
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c ed 88 f0 01 	movl   $0x1,0xf088ed5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 ed 88 f0 01 	movl   $0x1,0xf088ed30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc ee 88 f0       	mov    $0xf088eebc,%edx
f010006a:	b8 9c e1 88 f0       	mov    $0xf088e19c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c e1 88 f0       	push   $0xf088e19c
f010007e:	e8 1a 17 03 00       	call   f013179d <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 58 ed 88 f0 ff 	movl   $0xffffffff,0xf088ed58
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 4f 9e 00 00       	call   f0109efd <env_init>
	idt_init();
f01000ae:	e8 07 b4 00 00       	call   f010b4ba <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 39 df 00 00       	call   f010dff1 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 dc cd 00 00       	call   f010cea3 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 f9 78 00 00       	call   f01079d0 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 c7 cd 00 00       	call   f010cea3 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 08 00 03 00       	call   f0130100 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 28 ed 88 f0 61 	movl   $0x61,0xf088ed28
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b4 ec 88 f0 59 	movl   $0x59,0xf088ecb4
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 b3 e2 00 00       	call   f010e3e1 <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 c3 df 00 00       	call   f010e0fe <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 9e df 00 00       	call   f010e0e6 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 be df 00 00       	call   f010e116 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 40 38 13 f0       	push   $0xf0133840
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 6c 38 13 f0       	push   $0xf013386c
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 91 38 13 f0       	push   $0xf0133891
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 98 38 13 f0       	push   $0xf0133898
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 e0 38 13 f0       	push   $0xf01338e0
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 28 39 13 f0       	push   $0xf0133928
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 e0 38 13 f0       	push   $0xf01338e0
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 98 38 13 f0       	push   $0xf0133898
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 6d 39 13 f0       	push   $0xf013396d
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 e1 88 f0       	mov    %eax,0xf088e1a0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 72 39 13 f0       	push   $0xf0133972
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 8b 39 13 f0       	push   $0xf013398b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 83 9b 00 00       	call   f0109df2 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 8d 39 13 f0       	push   $0xf013398d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 e1 88 f0       	mov    %eax,0xf088e1a0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 72 39 13 f0       	push   $0xf0133972
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 8b 39 13 f0       	push   $0xf013398b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 e1 88 f0       	mov    %eax,0xf088e1a0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 72 39 13 f0       	push   $0xf0133972
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 8b 39 13 f0       	push   $0xf013398b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 58 ed 88 f0 00 	movl   $0x0,0xf088ed58
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 a2 39 13 f0       	push   $0xf01339a2
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 8b 39 13 f0       	push   $0xf013398b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 e1 88 f0       	mov    0xf088e1c0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 e1 88 f0       	mov    %eax,0xf088e1c0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 e1 88 f0 b4 	movl   $0x3b4,0xf088e1c4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 e1 88 f0 d4 	movl   $0x3d4,0xf088e1c4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 e1 88 f0       	mov    %eax,0xf088e1c8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 e1 88 f0    	mov    0xf088e1c8,%edx
f0100771:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc e1 88 f0 	mov    0xf088e1cc,%cx
f01007a4:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 e1 88 f0    	mov    0xf088e1c8,%ecx
f010080e:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc e1 88 f0 	mov    %dx,0xf088e1cc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 e1 88 f0       	mov    0xf088e1c8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 e1 88 f0       	mov    0xf088e1c8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 73 0f 03 00       	call   f01317cd <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 e1 88 f0    	mov    0xf088e1c8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc e1 88 f0    	mov    %ax,0xf088e1cc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 e1 88 f0    	mov    0xf088e1c4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 e1 88 f0       	mov    0xf088e1c4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc e1 88 f0    	mov    0xf088e1cc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 e1 88 f0    	mov    0xf088e1c4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 e3 88 f0       	mov    %eax,0xf088e3e8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 e3 88 f0       	mov    0xf088e3e8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 bd 39 13 f0       	push   $0xf01339bd
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 e3 88 f0    	mov    %edx,0xf088e3e4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 e1 88 f0    	mov    %dl,-0xf771e20(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 e3 88 f0 00 	movl   $0x0,0xf088e3e4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 e3 88 f0    	mov    0xf088e3e0,%edx
f0100b03:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 e3 88 f0       	mov    0xf088e3e0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 e3 88 f0    	mov    %edx,0xf088e3e0
f0100b1a:	8a 80 e0 e1 88 f0    	mov    -0xf771e20(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 e3 88 f0       	mov    0xf088e3e0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 e3 88 f0 00 	movl   $0x0,0xf088e3e0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 e1 88 f0       	mov    0xf088e1c0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 e3 88 f0    	mov    %edx,0xf088e3e4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 e1 88 f0    	mov    %dl,-0xf771e20(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 e3 88 f0 00 	movl   $0x0,0xf088e3e4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 e3 88 f0    	mov    %edx,0xf088e3e4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 e1 88 f0    	mov    %dl,-0xf771e20(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 e3 88 f0 00 	movl   $0x0,0xf088e3e4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 e3 88 f0    	mov    0xf088e3e0,%edx
f0100bf3:	a1 e4 e3 88 f0       	mov    0xf088e3e4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 e3 88 f0       	mov    0xf088e3e0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 e3 88 f0    	mov    %edx,0xf088e3e0
f0100c0a:	8a 80 e0 e1 88 f0    	mov    -0xf771e20(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 e3 88 f0       	mov    0xf088e3e0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 e3 88 f0 00 	movl   $0x0,0xf088e3e0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 e1 88 f0       	mov    0xf088e1c0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 c9 39 13 f0       	push   $0xf01339c9
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 fb 01 03 00       	call   f0130f01 <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 e6 39 13 f0       	push   $0xf01339e6
f0100d4c:	e8 58 06 03 00       	call   f01313a9 <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 ec 39 13 f0       	push   $0xf01339ec
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 55 0e 03 00       	call   f0131be3 <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 df 08 03 00       	call   f01316bb <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 b7 07 03 00       	call   f01315af <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 d5 08 03 00       	call   f01316f3 <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 f1 39 13 f0       	push   $0xf01339f1
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 07 3a 13 f0       	push   $0xf0133a07
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 5c ed 88 f0 00 	movl   $0x0,0xf088ed5c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 5c ed 88 f0 01 	movl   $0x1,0xf088ed5c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 5c ed 88 f0 02 	movl   $0x2,0xf088ed5c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 5c ed 88 f0 03 	movl   $0x3,0xf088ed5c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 5c ed 88 f0 04 	movl   $0x4,0xf088ed5c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 30 ed 88 f0 01 	movl   $0x1,0xf088ed30
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 30 ed 88 f0 02 	movl   $0x2,0xf088ed30
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 30 ed 88 f0 03 	movl   $0x3,0xf088ed30
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 30 ed 88 f0 04 	movl   $0x4,0xf088ed30
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 0c 3a 13 f0       	push   $0xf0133a0c
f0101046:	6a 55                	push   $0x55
f0101048:	68 34 3a 13 f0       	push   $0xf0133a34
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 35 19 f0       	add    $0xf0193544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 35 19 f0       	add    $0xf0193540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 ae 48 13 f0       	push   $0xf01348ae
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 b7 48 13 f0       	push   $0xf01348b7
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 cc 48 13 f0       	push   $0xf01348cc
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 e8 48 13 f0       	push   $0xf01348e8
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 04 49 13 f0       	push   $0xf0134904
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 35 38 13 00       	mov    $0x133835,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 35 38 13 f0       	push   $0xf0133835
f0101172:	68 40 49 13 f0       	push   $0xf0134940
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 9c e1 88 00       	mov    $0x88e19c,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 9c e1 88 f0       	push   $0xf088e19c
f010118d:	68 7c 49 13 f0       	push   $0xf013497c
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 bc ee 88 00       	mov    $0x88eebc,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 bc ee 88 f0       	push   $0xf088eebc
f01011a8:	68 c4 49 13 f0       	push   $0xf01349c4
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 bc ee 88 f0       	mov    $0xf088eebc,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 00 4a 13 f0       	push   $0xf0134a00
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 2c 4a 13 f0       	push   $0xf0134a2c
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 2c 4a 13 f0       	push   $0xf0134a2c
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 4d 4a 13 f0       	push   $0xf0134a4d
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 3c 06 03 00       	call   f013190f <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 eb 05 03 00       	call   f013190f <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 65 05 03 00       	call   f013190f <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 24 05 03 00       	call   f013190f <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 08 8a 00 00       	call   f0109e11 <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 ee 04 03 00       	call   f013190f <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 64 4a 13 f0       	push   $0xf0134a64
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 68 04 03 00       	call   f013190f <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 48 04 03 00       	call   f013190f <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 ca 00 03 00       	call   f01315af <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 bb 03 03 00       	call   f013190f <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 8e 4a 13 f0       	push   $0xf0134a8e
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 6f 03 03 00       	call   f013190f <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 53 88 00 00       	call   f0109e11 <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 39 03 03 00       	call   f013190f <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 8e 4a 13 f0       	push   $0xf0134a8e
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 a8 4a 13 f0       	push   $0xf0134aa8
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 a8 02 03 00       	call   f013190f <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 88 02 03 00       	call   f013190f <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 d2 4a 13 f0       	push   $0xf0134ad2
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 d5 4a 13 f0       	push   $0xf0134ad5
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 1d 02 03 00       	call   f013190f <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 01 87 00 00       	call   f0109e11 <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 e7 01 03 00       	call   f013190f <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 cc 01 03 00       	call   f013190f <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 d7 4a 13 f0       	push   $0xf0134ad7
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 30 01 03 00       	call   f013190f <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 14 86 00 00       	call   f0109e11 <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 e9 00 03 00       	call   f013190f <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 1c 65 00 00       	call   f0107d7e <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 e9 63 00 00       	call   f0107c57 <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 e8 4a 13 f0       	push   $0xf0134ae8
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 f4 ff 02 00       	call   f013190f <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 d8 84 00 00       	call   f0109e11 <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 ad ff 02 00       	call   f013190f <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 12 4b 13 f0       	push   $0xf0134b12
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 2c 4b 13 f0       	push   $0xf0134b2c
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 70 4b 13 f0       	push   $0xf0134b70
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 74 ed 88 f0       	mov    0xf088ed74,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 c8 4b 13 f0       	push   $0xf0134bc8
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 54 c5 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 04 4c 13 f0       	push   $0xf0134c04
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 e4 fd 02 00       	call   f013190f <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 c9 fd 02 00       	call   f013190f <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 ae fd 02 00       	call   f013190f <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 d3 c4 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 7d fd 02 00       	call   f013190f <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 60 fd 02 00       	call   f013190f <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 45 fd 02 00       	call   f013190f <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 6d c4 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 c4 4c 13 f0       	push   $0xf0134cc4
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 fd fc 02 00       	call   f013190f <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 54 4d 13 f0       	push   $0xf0134d54
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 ec 4d 13 f0       	push   $0xf0134dec
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 e3 c3 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 2c 4e 13 f0       	push   $0xf0134e2c
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 84 4e 13 f0       	push   $0xf0134e84
f0101c98:	68 c9 4e 13 f0       	push   $0xf0134ec9
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 84 4e 13 f0       	push   $0xf0134e84
f0101cb7:	68 c9 4e 13 f0       	push   $0xf0134ec9
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 88 74 00 00       	call   f010916a <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 de 4e 13 f0       	push   $0xf0134ede
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 74 ed 88 f0 00 	movl   $0x0,0xf088ed74
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 98 fb 02 00       	call   f013190f <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 de 4e 13 f0       	push   $0xf0134ede
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 74 ed 88 f0 00 	movl   $0x0,0xf088ed74
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 f4 4e 13 f0       	push   $0xf0134ef4
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 ae fa 02 00       	call   f013190f <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 46 c1 00 00       	call   f010dfbe <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 54 4f 13 f0       	push   $0xf0134f54
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 20 c1 00 00       	call   f010dfbe <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 98 4f 13 f0       	push   $0xf0134f98
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 d8 4f 13 f0       	push   $0xf0134fd8
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 23 fa 02 00       	call   f013190f <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 34 c1 00 00       	call   f010e031 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 2c 50 13 f0       	push   $0xf013502c
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 cf c0 00 00       	call   f010dff1 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 60 50 13 f0       	push   $0xf0135060
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 bd c0 00 00       	call   f010e001 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 8c 50 13 f0       	push   $0xf013508c
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 ab c0 00 00       	call   f010e011 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 b4 50 13 f0       	push   $0xf01350b4
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 77 f9 02 00       	call   f013190f <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 e8 50 13 f0       	push   $0xf01350e8
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 23 f9 02 00       	call   f013190f <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 f0 f8 02 00       	call   f013190f <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 20 51 13 f0       	push   $0xf0135120
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 2c ed 88 f0    	mov    0xf088ed2c,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 4d 51 13 f0       	push   $0xf013514d
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 d5 4a 13 f0       	push   $0xf0134ad5
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 54 51 13 f0       	push   $0xf0135154
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 2c ed 88 f0    	mov    0xf088ed2c,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 4d 51 13 f0       	push   $0xf013514d
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 d5 4a 13 f0       	push   $0xf0134ad5
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 88 51 13 f0       	push   $0xf0135188
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 c4 51 13 f0       	push   $0xf01351c4
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 a3 f7 02 00       	call   f013190f <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 b4 e6 02 00       	call   f0130835 <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 ec 51 13 f0       	push   $0xf01351ec
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 14 52 13 f0       	push   $0xf0135214
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 9b be 00 00       	call   f010e05f <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 38 52 13 f0       	push   $0xf0135238
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 62 be 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 60 52 13 f0       	push   $0xf0135260
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 3f be 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 a0 52 13 f0       	push   $0xf01352a0
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 52 be 00 00       	call   f010e07a <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 dc 52 13 f0       	push   $0xf01352dc
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 52 be 00 00       	call   f010e095 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 00 53 13 f0       	push   $0xf0135300
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 30 53 13 f0       	push   $0xf0135330
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 5c 53 13 f0       	push   $0xf013535c
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 8c 53 13 f0       	push   $0xf013538c
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 bc 53 13 f0       	push   $0xf01353bc
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 ec 53 13 f0       	push   $0xf01353ec
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 1c 54 13 f0       	push   $0xf013541c
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 48 54 13 f0       	push   $0xf0135448
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 74 54 13 f0       	push   $0xf0135474
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 a0 54 13 f0       	push   $0xf01354a0
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 cc 54 13 f0       	push   $0xf01354cc
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 f8 54 13 f0       	push   $0xf01354f8
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 f8 54 13 f0       	push   $0xf01354f8
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 2c 55 13 f0       	push   $0xf013552c
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 5c 55 13 f0       	push   $0xf013555c
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 8c 55 13 f0       	push   $0xf013558c
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 c0 55 13 f0       	push   $0xf01355c0
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 fc 55 13 f0       	push   $0xf01355fc
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 2c 56 13 f0       	push   $0xf013562c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 58 56 13 f0       	push   $0xf0135658
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 84 56 13 f0       	push   $0xf0135684
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 b4 56 13 f0       	push   $0xf01356b4
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 32 bc 00 00       	call   f010e10c <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 e4 56 13 f0       	push   $0xf01356e4
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 ec bb 00 00       	call   f010e0e6 <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 20 57 13 f0       	push   $0xf0135720
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 ed bb 00 00       	call   f010e10c <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 e4 56 13 f0       	push   $0xf01356e4
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 a7 bb 00 00       	call   f010e0e6 <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 44 57 13 f0       	push   $0xf0135744
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 95 bb 00 00       	call   f010e0fe <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 70 bb 00 00       	call   f010e0e6 <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 64 57 13 f0       	push   $0xf0135764
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 5e bb 00 00       	call   f010e0fe <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 39 bb 00 00       	call   f010e0e6 <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 6f bb 00 00       	call   f010e124 <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 80 57 13 f0       	push   $0xf0135780
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 b0 57 13 f0       	push   $0xf01357b0
f01025d5:	e8 cf ed 02 00       	call   f01313a9 <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 22 f3 02 00       	call   f013190f <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 1d bb 00 00       	call   f010e116 <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 23 bb 00 00       	call   f010e124 <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 dc 57 13 f0       	push   $0xf01357dc
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 01 58 13 f0       	push   $0xf0135801
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 d8 ba 00 00       	call   f010e10c <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 1c 58 13 f0       	push   $0xf013581c
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 a5 ba 00 00       	call   f010e0f4 <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 6c 58 13 f0       	push   $0xf013586c
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 97 f2 02 00       	call   f013190f <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 92 ba 00 00       	call   f010e116 <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 98 ba 00 00       	call   f010e124 <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 dc 57 13 f0       	push   $0xf01357dc
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 5d ba 00 00       	call   f010e10c <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 1c 58 13 f0       	push   $0xf013581c
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 2a ba 00 00       	call   f010e0f4 <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 6c 58 13 f0       	push   $0xf013586c
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 41 ba 00 00       	call   f010e124 <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 b2 58 13 f0       	push   $0xf01358b2
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 ec f1 02 00       	call   f013190f <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 67 53 01 00       	call   f0117a9e <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 d0 58 13 f0       	push   $0xf01358d0
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 b7 a1 01 00       	call   f011c927 <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 45 b5 01 00       	call   f011dcc9 <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 20 59 13 f0       	push   $0xf0135920
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 e4 52 01 00       	call   f0117a9e <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 2a 7c 01 00       	call   f011a3f1 <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 73 8e 01 00       	call   f011b647 <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 70 59 13 f0       	push   $0xf0135970
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 97 52 01 00       	call   f0117a9e <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 e8 64 01 00       	call   f0118cfc <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 3a c3 01 00       	call   f011eb5e <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 b8 fa 01 00       	call   f0122300 <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 5f d9 01 00       	call   f01201ae <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 9b 14 02 00       	call   f0123cfc <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 59 29 02 00       	call   f01251cc <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 24 3e 02 00       	call   f01266a9 <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 20 98 02 00       	call   f012c0c0 <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 c0 b7 02 00       	call   f012e070 <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 f1 3d 01 00       	call   f01166b3 <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 c5 47 01 00       	call   f0117099 <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 fd 3f 02 00       	call   f01268e3 <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 d7 56 02 00       	call   f0127fcf <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 46 64 02 00       	call   f0128d50 <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 21 73 02 00       	call   f0129c3d <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 d1 ef 02 00       	call   f013190f <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 be 59 13 f0       	push   $0xf01359be
f010296c:	50                   	push   %eax
f010296d:	e8 49 ed 02 00       	call   f01316bb <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f01029b1:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 c8 59 13 f0       	push   $0xf01359c8
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 01 5a 13 f0       	push   $0xf0135a01
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 4d 4a 13 f0       	push   $0xf0134a4d
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 a9 e9 00 00       	call   f01113af <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 18 5a 13 f0       	push   $0xf0135a18
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 50 5a 13 f0       	push   $0xf0135a50
f0102a46:	50                   	push   %eax
f0102a47:	e8 6f ec 02 00       	call   f01316bb <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 01 bf 00 00       	call   f010e959 <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 55 5a 13 f0       	push   $0xf0135a55
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 48 ec 02 00       	call   f01316bb <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 ee bf 00 00       	call   f010ea6d <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 5b 5a 13 f0       	push   $0xf0135a5b
f0102a94:	50                   	push   %eax
f0102a95:	e8 21 ec 02 00       	call   f01316bb <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 85 c4 00 00       	call   f010ef2b <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 60 5a 13 f0       	push   $0xf0135a60
f0102abb:	50                   	push   %eax
f0102abc:	e8 fa eb 02 00       	call   f01316bb <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 63 5a 13 f0       	push   $0xf0135a63
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 dd eb 02 00       	call   f01316bb <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 9c c7 00 00       	call   f010f286 <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 66 5a 13 f0       	push   $0xf0135a66
f0102aff:	50                   	push   %eax
f0102b00:	e8 b6 eb 02 00       	call   f01316bb <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 69 5a 13 f0       	push   $0xf0135a69
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 99 eb 02 00       	call   f01316bb <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 d6 cb 00 00       	call   f010f704 <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 6c 5a 13 f0       	push   $0xf0135a6c
f0102b43:	50                   	push   %eax
f0102b44:	e8 72 eb 02 00       	call   f01316bb <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 6f 5a 13 f0       	push   $0xf0135a6f
f0102b60:	50                   	push   %eax
f0102b61:	e8 55 eb 02 00       	call   f01316bb <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 19 d2 00 00       	call   f010fd8b <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 72 5a 13 f0       	push   $0xf0135a72
f0102b84:	50                   	push   %eax
f0102b85:	e8 31 eb 02 00       	call   f01316bb <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 78 5a 13 f0       	push   $0xf0135a78
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 14 eb 02 00       	call   f01316bb <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 66 da 00 00       	call   f0110619 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 80 5a 13 f0       	push   $0xf0135a80
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 b9 5a 13 f0       	push   $0xf0135ab9
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 c5 ea 02 00       	call   f01316bb <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 41 f2 00 00       	call   f0111e43 <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 c2 5a 13 f0       	push   $0xf0135ac2
f0102c17:	50                   	push   %eax
f0102c18:	e8 9e ea 02 00       	call   f01316bb <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 65 fc 00 00       	call   f011288e <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 cc 5a 13 f0       	push   $0xf0135acc
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 77 ea 02 00       	call   f01316bb <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 3c 0d 01 00       	call   f011398c <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 d2 5a 13 f0       	push   $0xf0135ad2
f0102c62:	50                   	push   %eax
f0102c63:	e8 53 ea 02 00       	call   f01316bb <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 40 17 01 00       	call   f01143b4 <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 db 5a 13 f0       	push   $0xf0135adb
f0102c86:	50                   	push   %eax
f0102c87:	e8 2f ea 02 00       	call   f01316bb <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 cb 1f 01 00       	call   f0114c63 <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 ea 5a 13 f0       	push   $0xf0135aea
f0102caa:	50                   	push   %eax
f0102cab:	e8 0b ea 02 00       	call   f01316bb <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 1b 28 01 00       	call   f01154d7 <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 fc 5a 13 f0       	push   $0xf0135afc
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 32 5b 13 f0       	push   $0xf0135b32
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 bc e9 02 00       	call   f01316bb <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 29 e8 00 00       	call   f0111534 <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 3a 5b 13 f0       	push   $0xf0135b3a
f0102d20:	50                   	push   %eax
f0102d21:	e8 95 e9 02 00       	call   f01316bb <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 65 ea 00 00       	call   f0111797 <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 42 5b 13 f0       	push   $0xf0135b42
f0102d47:	50                   	push   %eax
f0102d48:	e8 6e e9 02 00       	call   f01316bb <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 87 ea 00 00       	call   f01117e0 <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 4a 5b 13 f0       	push   $0xf0135b4a
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 4a e9 02 00       	call   f01316bb <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 a7 eb 00 00       	call   f0111924 <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 51 5b 13 f0       	push   $0xf0135b51
f0102d8f:	50                   	push   %eax
f0102d90:	e8 26 e9 02 00       	call   f01316bb <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 dc ec 00 00       	call   f0111a7d <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 58 5b 13 f0       	push   $0xf0135b58
f0102db3:	50                   	push   %eax
f0102db4:	e8 02 e9 02 00       	call   f01316bb <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 f0 ec 00 00       	call   f0111ab5 <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102de2:	50                   	push   %eax
f0102de3:	e8 d3 e8 02 00       	call   f01316bb <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 64 5b 13 f0       	push   $0xf0135b64
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102e1f:	50                   	push   %eax
f0102e20:	e8 96 e8 02 00       	call   f01316bb <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 b4 5b 13 f0       	push   $0xf0135bb4
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 60 5a 13 f0       	push   $0xf0135a60
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 59 e8 02 00       	call   f01316bb <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 63 5a 13 f0       	push   $0xf0135a63
f0102e79:	50                   	push   %eax
f0102e7a:	e8 3c e8 02 00       	call   f01316bb <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 fc 55 13 f0       	push   $0xf01355fc
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 66 5a 13 f0       	push   $0xf0135a66
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 05 e8 02 00       	call   f01316bb <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 69 5a 13 f0       	push   $0xf0135a69
f0102ecd:	50                   	push   %eax
f0102ece:	e8 e8 e7 02 00       	call   f01316bb <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 2c 56 13 f0       	push   $0xf013562c
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 6c 5a 13 f0       	push   $0xf0135a6c
f0102f01:	50                   	push   %eax
f0102f02:	e8 b4 e7 02 00       	call   f01316bb <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 6f 5a 13 f0       	push   $0xf0135a6f
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 97 e7 02 00       	call   f01316bb <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 58 56 13 f0       	push   $0xf0135658
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102f50:	50                   	push   %eax
f0102f51:	e8 65 e7 02 00       	call   f01316bb <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 99 e9 02 00       	call   f013190f <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 d0 58 13 f0       	push   $0xf01358d0
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 ee 4a 01 00       	call   f0117a9e <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 67 99 01 00       	call   f011c927 <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 f5 ac 01 00       	call   f011dcc9 <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 20 59 13 f0       	push   $0xf0135920
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 91 4a 01 00       	call   f0117a9e <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 d7 73 01 00       	call   f011a3f1 <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 20 86 01 00       	call   f011b647 <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 70 59 13 f0       	push   $0xf0135970
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 41 4a 01 00       	call   f0117a9e <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 92 5c 01 00       	call   f0118cfc <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 f8 5b 13 f0       	push   $0xf0135bf8
f0103084:	50                   	push   %eax
f0103085:	e8 31 e6 02 00       	call   f01316bb <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 58 f2 01 00       	call   f0122300 <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 ff d0 01 00       	call   f01201ae <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 fe 5b 13 f0       	push   $0xf0135bfe
f01030c9:	50                   	push   %eax
f01030ca:	e8 ec e5 02 00       	call   f01316bb <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 21 0c 02 00       	call   f0123cfc <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 08 5c 13 f0       	push   $0xf0135c08
f01030f2:	50                   	push   %eax
f01030f3:	e8 c3 e5 02 00       	call   f01316bb <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 c8 20 02 00       	call   f01251cc <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 12 5c 13 f0       	push   $0xf0135c12
f010311b:	50                   	push   %eax
f010311c:	e8 9a e5 02 00       	call   f01316bb <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 3a af 02 00       	call   f012e070 <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 9a eb 02 00       	call   f0131d02 <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 ab ec 02 00       	call   f0131e42 <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 1c 5c 13 f0       	push   $0xf0135c1c
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 33 5c 13 f0       	push   $0xf0135c33
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 b8 ed 88 f0 00 	movl   $0x0,0xf088edb8
f01031ca:	00 00 00 
f01031cd:	c7 05 bc ed 88 f0 00 	movl   $0x0,0xf088edbc
f01031d4:	00 00 00 
f01031d7:	c7 05 c4 ed 88 f0 00 	movl   $0x0,0xf088edc4
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 50 5c 13 f0       	push   $0xf0135c50
f010322d:	6a 59                	push   $0x59
f010322f:	68 33 5c 13 f0       	push   $0xf0135c33
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 b8 ed 88 f0    	mov    0xf088edb8,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 b8 ed 88 f0    	mov    0xf088edb8,%edx
f0103261:	8b 1d dc ec 88 f0    	mov    0xf088ecdc,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 bc ed 88 f0       	mov    %eax,0xf088edbc
f0103293:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 b8 ed 88 f0       	mov    %eax,0xf088edb8
f01032ac:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 c4 ed 88 f0       	mov    0xf088edc4,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 c4 ed 88 f0       	mov    %eax,0xf088edc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 dc ec 88 f0    	mov    0xf088ecdc,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 b8 ed 88 f0       	mov    0xf088edb8,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 73 5c 13 f0       	push   $0xf0135c73
f010334c:	6a 78                	push   $0x78
f010334e:	68 33 5c 13 f0       	push   $0xf0135c33
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 bc ed 88 f0       	mov    %eax,0xf088edbc
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 b8 ed 88 f0       	mov    %eax,0xf088edb8
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 c4 ed 88 f0       	mov    0xf088edc4,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 c4 ed 88 f0       	mov    %eax,0xf088edc4
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 50 5c 13 f0       	push   $0xf0135c50
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 33 5c 13 f0       	push   $0xf0135c33
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 b8 ed 88 f0    	mov    0xf088edb8,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 b8 ed 88 f0    	mov    0xf088edb8,%edx
f010344f:	8b 1d dc ec 88 f0    	mov    0xf088ecdc,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 bc ed 88 f0       	mov    %eax,0xf088edbc
f0103481:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 b8 ed 88 f0       	mov    %eax,0xf088edb8
f010349a:	8b 0d dc ec 88 f0    	mov    0xf088ecdc,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 c4 ed 88 f0       	mov    0xf088edc4,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 c4 ed 88 f0       	mov    %eax,0xf088edc4
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 7e 48 00 00       	call   f0107d7e <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 94 5c 13 f0       	push   $0xf0135c94
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 33 5c 13 f0       	push   $0xf0135c33
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 1f 46 00 00       	call   f0107b8c <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 02 48 00 00       	call   f0107daa <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 d8 e1 02 00       	call   f013179d <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 60 ed 88 f0       	mov    0xf088ed60,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103679:	68 ea 5c 13 f0       	push   $0xf0135cea
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 33 5c 13 f0       	push   $0xf0135c33
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103729:	68 ea 5c 13 f0       	push   $0xf0135cea
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 33 5c 13 f0       	push   $0xf0135c33
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 c4 5c 13 f0       	push   $0xf0135cc4
f01037ec:	68 ea 5c 13 f0       	push   $0xf0135cea
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 33 5c 13 f0       	push   $0xf0135c33
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 00 5d 13 f0       	push   $0xf0135d00
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 33 5c 13 f0       	push   $0xf0135c33
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 2c 5d 13 f0       	push   $0xf0135d2c
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 33 5c 13 f0       	push   $0xf0135c33
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 78 5d 13 f0       	push   $0xf0135d78
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 33 5c 13 f0       	push   $0xf0135c33
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 da 43 00 00       	call   f0107eb4 <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 bf 41 00 00       	call   f0107d7e <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 27 40 00 00       	call   f0107c57 <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 02 40 00 00       	call   f0107c57 <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 c4 3f 00 00       	call   f0107c57 <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 b6 3e 00 00       	call   f0107b8c <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 ac 40 00 00       	call   f0107daa <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 7f da 02 00       	call   f013179d <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 06 40 00 00       	call   f0107d7e <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 b8 ed 88 f0       	mov    0xf088edb8,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 c0 ed 88 f0       	mov    0xf088edc0,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 c0 ed 88 f0       	mov    %eax,0xf088edc0
f0103e01:	a1 c0 ed 88 f0       	mov    0xf088edc0,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 50 3d 00 00       	call   f0107b8c <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 46 3f 00 00       	call   f0107daa <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 19 d9 02 00       	call   f013179d <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103ea2:	68 ea 5c 13 f0       	push   $0xf0135cea
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 33 5c 13 f0       	push   $0xf0135c33
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 f4 5d 13 f0       	push   $0xf0135df4
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 d7 dd 02 00       	call   f0131e42 <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 18 5e 13 f0       	push   $0xf0135e18
f0104168:	6a 33                	push   $0x33
f010416a:	68 74 5e 13 f0       	push   $0xf0135e74
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 18 5e 13 f0       	push   $0xf0135e18
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 74 5e 13 f0       	push   $0xf0135e74
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 4c ed 88 f0       	mov    0xf088ed4c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 4c ed 88 f0       	mov    0xf088ed4c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 88 5e 13 f0       	push   $0xf0135e88
f01044ae:	68 96 5e 13 f0       	push   $0xf0135e96
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 ab 5e 13 f0       	push   $0xf0135eab
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 bc 5e 13 f0       	push   $0xf0135ebc
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 ab 5e 13 f0       	push   $0xf0135eab
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 df 5e 13 f0       	push   $0xf0135edf
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 ab 5e 13 f0       	push   $0xf0135eab
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 88 5e 13 f0       	push   $0xf0135e88
f01045f7:	68 96 5e 13 f0       	push   $0xf0135e96
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 df 5e 13 f0       	push   $0xf0135edf
f0104620:	6a 45                	push   $0x45
f0104622:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 00 5f 13 f0       	push   $0xf0135f00
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 3d c1 02 00       	call   f013086e <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 58 ed 88 f0 01 	movl   $0x1,0xf088ed58
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 4c ed 88 f0       	mov    0xf088ed4c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010475a:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 4c ed 88 f0       	mov    0xf088ed4c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 f4 e3 88 f0       	mov    %eax,0xf088e3f4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 e6 c0 02 00       	call   f01308ab <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 f4 e3 88 f0       	mov    %eax,0xf088e3f4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 92 55 00 00       	call   f0109d73 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 58 ed 88 f0 00 	movl   $0x0,0xf088ed58
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 80 ed 88 f0 01 	movb   $0x1,0xf088ed80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 58 33 00 00       	call   f0107b8c <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 e8 ec 88 f0       	mov    %eax,0xf088ece8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 3f 33 00 00       	call   f0107b8c <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 2c ed 88 f0       	mov    %eax,0xf088ed2c
#endif
	quantums[0] = quantum;
f0104855:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 58 ed 88 f0 00 	movl   $0x0,0xf088ed58
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 4c ed 88 f0 00 	movl   $0x0,0xf088ed4c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 34 5f 13 f0       	push   $0xf0135f34
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 ab 5e 13 f0       	push   $0xf0135eab
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 08 ed 88 f0 00 	movl   $0x0,0xf088ed08
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 3c ed 88 f0       	push   $0xf088ed3c
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 f4 ec 88 f0       	push   $0xf088ecf4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 58 ed 88 f0 00 	movl   $0x0,0xf088ed58
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 2b 33 00 00       	call   f0107c57 <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 2c ed 88 f0       	mov    0xf088ed2c,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 11 33 00 00       	call   f0107c57 <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 df 5e 13 f0       	push   $0xf0135edf
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 ab 5e 13 f0       	push   $0xf0135eab
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 3c ed 88 f0       	push   $0xf088ed3c
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 df 5e 13 f0       	push   $0xf0135edf
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 40 ed 88 f0       	mov    %eax,0xf088ed40
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 3c ed 88 f0       	mov    %eax,0xf088ed3c
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 48 ed 88 f0       	mov    0xf088ed48,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 48 ed 88 f0       	mov    %eax,0xf088ed48
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 a1 95 00 00       	call   f010e10c <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 67 66 00 00       	call   f010b1e1 <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 f4 ec 88 f0       	push   $0xf088ecf4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 df 5e 13 f0       	push   $0xf0135edf
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 f8 ec 88 f0       	mov    %eax,0xf088ecf8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 f4 ec 88 f0       	mov    %eax,0xf088ecf4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 00 ed 88 f0       	mov    0xf088ed00,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 00 ed 88 f0       	mov    %eax,0xf088ed00
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 64 5f 13 f0       	push   $0xf0135f64
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 86 5f 13 f0       	push   $0xf0135f86
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f0104cac:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 90 5f 13 f0       	push   $0xf0135f90
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 e0 5f 13 f0       	push   $0xf0135fe0
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 86 5f 13 f0       	push   $0xf0135f86
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 08 60 13 f0       	push   $0xf0136008
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 2c 60 13 f0       	push   $0xf013602c
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 86 5f 13 f0       	push   $0xf0135f86
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f0104e28:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 4e 60 13 f0       	push   $0xf013604e
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f0104e9f:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 6c 60 13 f0       	push   $0xf013606c
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 98 60 13 f0       	push   $0xf0136098
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 a1 4e 00 00       	call   f0109dc7 <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 ab 60 13 f0       	push   $0xf01360ab
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f0104f59:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 b1 60 13 f0       	push   $0xf01360b1
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 cc 60 13 f0       	push   $0xf01360cc
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 98 60 13 f0       	push   $0xf0136098
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 df 5e 13 f0       	push   $0xf0135edf
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 ab 5e 13 f0       	push   $0xf0135eab
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 1e 4d 00 00       	call   f0109dc7 <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 ab 60 13 f0       	push   $0xf01360ab
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 08 60 13 f0       	push   $0xf0136008
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 ac 5f 13 f0       	push   $0xf0135fac
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 00 61 13 f0       	push   $0xf0136100
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 98 60 13 f0       	push   $0xf0136098
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 26 4c 00 00       	call   f0109dc7 <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 ab 60 13 f0       	push   $0xf01360ab
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f01051d4:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 4e 60 13 f0       	push   $0xf013604e
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 58 ed 88 f0       	mov    0xf088ed58,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f010528d:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f0105306:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 df 5e 13 f0       	push   $0xf0135edf
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 ab 5e 13 f0       	push   $0xf0135eab
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 df 5e 13 f0       	push   $0xf0135edf
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 ab 5e 13 f0       	push   $0xf0135eab
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 3c ed 88 f0       	mov    0xf088ed3c,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 2c 61 13 f0       	push   $0xf013612c
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 1b 47 00 00       	call   f0109dc7 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 ab 60 13 f0       	push   $0xf01360ab
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 44 ed 88 f0       	mov    %eax,0xf088ed44
f01056e6:	a1 44 ed 88 f0       	mov    0xf088ed44,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 54 61 13 f0       	push   $0xf0136154
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 df 5e 13 f0       	push   $0xf0135edf
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 ab 5e 13 f0       	push   $0xf0135eab
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 9e 45 00 00       	call   f0109dc7 <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 ab 60 13 f0       	push   $0xf01360ab
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 80 61 13 f0       	push   $0xf0136180
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 ba 44 00 00       	call   f0109dc7 <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 ab 60 13 f0       	push   $0xf01360ab
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f0105947:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 a8 61 13 f0       	push   $0xf01361a8
f0105991:	68 96 5e 13 f0       	push   $0xf0135e96
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 ab 5e 13 f0       	push   $0xf0135eab
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 c8 61 13 f0       	push   $0xf01361c8
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 f6 43 00 00       	call   f0109dc7 <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 ab 60 13 f0       	push   $0xf01360ab
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 2e 86 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 cd 24 00 00       	call   f0107f68 <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 b9 23 00 00       	call   f0107eb4 <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 e6 24 00 00       	call   f0108087 <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 cc 24 00 00       	call   f01080ab <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ec e3 88 f0 01 	movl   $0x1,0xf088e3ec
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105d5d:	a1 ec e3 88 f0       	mov    0xf088e3ec,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 7c ed 88 f0       	mov    %eax,0xf088ed7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 cb b9 02 00       	call   f013179d <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 f4 61 13 f0       	push   $0xf01361f4
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 28 62 13 f0       	push   $0xf0136228
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 ac ed 88 f0       	mov    %eax,0xf088edac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 f4 61 13 f0       	push   $0xf01361f4
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 28 62 13 f0       	push   $0xf0136228
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 10 ed 88 f0    	mov    0xf088ed10,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 54 ed 88 f0       	mov    %eax,0xf088ed54
	memset(frames_info, 0, array_size);
f0105eca:	a1 54 ed 88 f0       	mov    0xf088ed54,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 c0 b8 02 00       	call   f013179d <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 dc ec 88 f0       	mov    %eax,0xf088ecdc
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 dc ec 88 f0       	mov    0xf088ecdc,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 8b b8 02 00       	call   f013179d <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 fa a3 02 00       	call   f0130321 <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 48 62 13 f0       	push   $0xf0136248
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 f0 e3 88 f0       	mov    %eax,0xf088e3f0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 f0 e3 88 f0       	mov    0xf088e3f0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 29 b8 02 00       	call   f013179d <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 f0 e3 88 f0       	mov    0xf088e3f0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 f4 61 13 f0       	push   $0xf01361f4
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 28 62 13 f0       	push   $0xf0136228
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 7c ed 88 f0    	mov    0xf088ed7c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 fb aa 02 00       	call   f0130b08 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 f0 ec 88 f0 19 	movl   $0x19,0xf088ecf0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 78 ed 88 f0 bc 	movl   $0xf088eebc,0xf088ed78
f0106035:	ee 88 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 78 ed 88 f0       	mov    %eax,0xf088ed78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 78 ed 88 f0    	mov    0xf088ed78,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 78 ed 88 f0       	mov    %eax,0xf088ed78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 70 62 13 f0       	push   $0xf0136270
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 28 62 13 f0       	push   $0xf0136228
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 f4 61 13 f0       	push   $0xf01361f4
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 28 62 13 f0       	push   $0xf0136228
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 10 ed 88 f0       	mov    %eax,0xf088ed10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 a0 62 13 f0       	push   $0xf01362a0
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 c1 62 13 f0       	push   $0xf01362c1
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 f4 61 13 f0       	push   $0xf01361f4
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 28 62 13 f0       	push   $0xf0136228
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 f4 61 13 f0       	push   $0xf01361f4
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 28 62 13 f0       	push   $0xf0136228
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 e0 62 13 f0       	push   $0xf01362e0
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 05 63 13 f0       	push   $0xf0136305
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 18 ed 88 f0 00 	movl   $0x0,0xf088ed18
f0106531:	00 00 00 
f0106534:	c7 05 1c ed 88 f0 00 	movl   $0x0,0xf088ed1c
f010653b:	00 00 00 
f010653e:	c7 05 24 ed 88 f0 00 	movl   $0x0,0xf088ed24
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 b8 ec 88 f0 00 	movl   $0x0,0xf088ecb8
f010654f:	00 00 00 
f0106552:	c7 05 bc ec 88 f0 00 	movl   $0x0,0xf088ecbc
f0106559:	00 00 00 
f010655c:	c7 05 c4 ec 88 f0 00 	movl   $0x0,0xf088ecc4
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 54 ed 88 f0       	mov    0xf088ed54,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 54 ed 88 f0       	mov    0xf088ed54,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 54 ed 88 f0       	mov    0xf088ed54,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 60 ed 88 f0 00 	movl   $0xf0001000,0xf088ed60
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 84 ed 88 f0 00 	movl   $0xf0002000,0xf088ed84
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 60 ed 88 f0    	mov    0xf088ed60,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 84 ed 88 f0    	mov    0xf088ed84,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 20 63 13 f0       	push   $0xf0136320
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 43 63 13 f0       	push   $0xf0136343
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f0106677:	8b 1d 54 ed 88 f0    	mov    0xf088ed54,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 1c ed 88 f0       	mov    %eax,0xf088ed1c
f01066a9:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 18 ed 88 f0       	mov    %eax,0xf088ed18
f01066c2:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 24 ed 88 f0       	mov    %eax,0xf088ed24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 60 63 13 f0       	push   $0xf0136360
f0106752:	6a 64                	push   $0x64
f0106754:	68 43 63 13 f0       	push   $0xf0136343
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 20 63 13 f0       	push   $0xf0136320
f0106814:	6a 70                	push   $0x70
f0106816:	68 43 63 13 f0       	push   $0xf0136343
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f0106848:	8b 1d 54 ed 88 f0    	mov    0xf088ed54,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 1c ed 88 f0       	mov    %eax,0xf088ed1c
f010687a:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 18 ed 88 f0       	mov    %eax,0xf088ed18
f0106893:	8b 0d 54 ed 88 f0    	mov    0xf088ed54,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 24 ed 88 f0       	mov    %eax,0xf088ed24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 b1 ae 02 00       	call   f013179d <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 94 63 13 f0       	push   $0xf0136394
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 43 63 13 f0       	push   $0xf0136343
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 e1 63 13 f0       	push   $0xf01363e1
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 43 63 13 f0       	push   $0xf0136343
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 1c ed 88 f0       	mov    %eax,0xf088ed1c
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 18 ed 88 f0       	mov    %eax,0xf088ed18
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 24 ed 88 f0       	mov    %eax,0xf088ed24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 d7 15 00 00       	call   f0107fc3 <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 20 63 13 f0       	push   $0xf0136320
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 43 63 13 f0       	push   $0xf0136343
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 18 ed 88 f0    	mov    0xf088ed18,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 18 ed 88 f0       	mov    0xf088ed18,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 1c ed 88 f0       	mov    %eax,0xf088ed1c
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 18 ed 88 f0       	mov    %eax,0xf088ed18
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 24 ed 88 f0       	mov    %eax,0xf088ed24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 8c 12 00 00       	call   f0107d7e <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 00 64 13 f0       	push   $0xf0136400
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 43 63 13 f0       	push   $0xf0136343
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 4a 5e 00 00       	call   f010c9b6 <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 de 11 00 00       	call   f0107d7e <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 00 64 13 f0       	push   $0xf0136400
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 43 63 13 f0       	push   $0xf0136343
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 71 0f 00 00       	call   f0107b8c <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 2f 64 13 f0       	push   $0xf013642f
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 43 63 13 f0       	push   $0xf0136343
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 4d 11 00 00       	call   f0107daa <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 26 ab 02 00       	call   f013179d <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 00 64 13 f0       	push   $0xf0136400
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 43 63 13 f0       	push   $0xf0136343
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 6e aa 02 00       	call   f013179d <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 4c 64 13 f0       	push   $0xf013644c
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 3c 0e 00 00       	call   f0107d7e <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 00 64 13 f0       	push   $0xf0136400
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 43 63 13 f0       	push   $0xf0136343
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 18 ed 88 f0       	mov    0xf088ed18,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 20 ed 88 f0       	mov    0xf088ed20,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 20 ed 88 f0       	mov    %eax,0xf088ed20
f0107034:	a1 20 ed 88 f0       	mov    0xf088ed20,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 b8 ec 88 f0       	mov    0xf088ecb8,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 c0 ec 88 f0       	mov    0xf088ecc0,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 c0 ec 88 f0       	mov    %eax,0xf088ecc0
f010706f:	a1 c0 ec 88 f0       	mov    0xf088ecc0,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 28 ed 88 f0       	mov    %eax,0xf088ed28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 66 0a 00 00       	call   f0107b8c <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ec ec 88 f0       	mov    %eax,0xf088ecec
	if (shares == NULL)
f010712e:	a1 ec ec 88 f0       	mov    0xf088ecec,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 70 64 13 f0       	push   $0xf0136470
f010713f:	6a 21                	push   $0x21
f0107141:	68 b4 64 13 f0       	push   $0xf01364b4
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 22 a6 02 00       	call   f013179d <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 02 a5 02 00       	call   f013179d <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 9b a3 02 00       	call   f01316bb <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 a7 08 00 00       	call   f0107c57 <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 c3 a3 02 00       	call   f013179d <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 77 07 00 00       	call   f0107b8c <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 d5 64 13 f0       	push   $0xf01364d5
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 b4 64 13 f0       	push   $0xf01364b4
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 5b 08 00 00       	call   f0107d7e <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 28 07 00 00       	call   f0107c57 <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	56                   	push   %esi
f01075a0:	53                   	push   %ebx
f01075a1:	83 ec 40             	sub    $0x40,%esp
f01075a4:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a7:	88 45 c4             	mov    %al,-0x3c(%ebp)
	// and return the ShareObjectID
	// RETURN:
	//	a) ShareObjectID (its index in "shares" array) if success
	//	b) E_SHARED_MEM_EXISTS if the shared object already exists
	//	c) E_NO_SHARE if the number of shared objects reaches max "MAX_SHARES"
	struct Env* myenv = curenv; //The calling environment
f01075aa:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01075af:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//Check if the shared object already exists
	int shared_Result = get_share_object_ID(ownerID , shareName);
f01075b2:	83 ec 08             	sub    $0x8,%esp
f01075b5:	ff 75 0c             	pushl  0xc(%ebp)
f01075b8:	ff 75 08             	pushl  0x8(%ebp)
f01075bb:	e8 e6 fc ff ff       	call   f01072a6 <get_share_object_ID>
f01075c0:	83 c4 10             	add    $0x10,%esp
f01075c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (shared_Result != E_SHARED_MEM_NOT_EXISTS)
f01075c6:	83 7d e4 f0          	cmpl   $0xfffffff0,-0x1c(%ebp)
f01075ca:	74 0a                	je     f01075d6 <createSharedObject+0x3a>
		return E_SHARED_MEM_EXISTS;
f01075cc:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
f01075d1:	e9 d4 01 00 00       	jmp    f01077aa <createSharedObject+0x20e>

	//Check if any shared object available
	struct Share * allocatedObject = NULL;
f01075d6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	int sharedObj_index = allocate_share_object(&allocatedObject);
f01075dd:	83 ec 0c             	sub    $0xc,%esp
f01075e0:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01075e3:	50                   	push   %eax
f01075e4:	e8 c5 fb ff ff       	call   f01071ae <allocate_share_object>
f01075e9:	83 c4 10             	add    $0x10,%esp
f01075ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(sharedObj_index == E_NO_SHARE)
f01075ef:	83 7d e0 f2          	cmpl   $0xfffffff2,-0x20(%ebp)
f01075f3:	75 0a                	jne    f01075ff <createSharedObject+0x63>
		return E_NO_SHARE;
f01075f5:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01075fa:	e9 ab 01 00 00       	jmp    f01077aa <createSharedObject+0x20e>

	//Allocate Frames for each page
	uint32 va = (uint32) virtual_address;
f01075ff:	8b 45 18             	mov    0x18(%ebp),%eax
f0107602:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
f0107605:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010760c:	8b 55 10             	mov    0x10(%ebp),%edx
f010760f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107612:	01 d0                	add    %edx,%eax
f0107614:	48                   	dec    %eax
f0107615:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0107618:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010761b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107620:	f7 75 dc             	divl   -0x24(%ebp)
f0107623:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107626:	29 d0                	sub    %edx,%eax
f0107628:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	struct FrameInfo *sb_chunck;
	int j = 0;
f010762b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f0107632:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107639:	e9 90 00 00 00       	jmp    f01076ce <createSharedObject+0x132>
	{
		sb_chunck= NULL;
f010763e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		int result= allocate_frame(&sb_chunck);
f0107645:	83 ec 0c             	sub    $0xc,%esp
f0107648:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010764b:	50                   	push   %eax
f010764c:	e8 a1 f2 ff ff       	call   f01068f2 <allocate_frame>
f0107651:	83 c4 10             	add    $0x10,%esp
f0107654:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(result != E_NO_MEM)
f0107657:	83 7d d0 fc          	cmpl   $0xfffffffc,-0x30(%ebp)
f010765b:	74 60                	je     f01076bd <createSharedObject+0x121>
		{
			sb_chunck->va = va;
f010765d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0107660:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107663:	89 50 0c             	mov    %edx,0xc(%eax)
			map_frame(curenv->env_page_directory ,sb_chunck ,va, PERM_WRITEABLE | PERM_USER);
f0107666:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107669:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010766e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107671:	6a 06                	push   $0x6
f0107673:	ff 75 f4             	pushl  -0xc(%ebp)
f0107676:	52                   	push   %edx
f0107677:	50                   	push   %eax
f0107678:	e8 c4 f6 ff ff       	call   f0106d41 <map_frame>
f010767d:	83 c4 10             	add    $0x10,%esp
			add_frame_to_storage(shares[sharedObj_index].framesStorage , sb_chunck , j);
f0107680:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0107683:	8b 4d c8             	mov    -0x38(%ebp),%ecx
f0107686:	8b 35 ec ec 88 f0    	mov    0xf088ecec,%esi
f010768c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010768f:	89 d0                	mov    %edx,%eax
f0107691:	c1 e0 02             	shl    $0x2,%eax
f0107694:	01 d0                	add    %edx,%eax
f0107696:	c1 e0 02             	shl    $0x2,%eax
f0107699:	01 d0                	add    %edx,%eax
f010769b:	c1 e0 02             	shl    $0x2,%eax
f010769e:	01 f0                	add    %esi,%eax
f01076a0:	8b 40 50             	mov    0x50(%eax),%eax
f01076a3:	83 ec 04             	sub    $0x4,%esp
f01076a6:	53                   	push   %ebx
f01076a7:	51                   	push   %ecx
f01076a8:	50                   	push   %eax
f01076a9:	e8 8f fd ff ff       	call   f010743d <add_frame_to_storage>
f01076ae:	83 c4 10             	add    $0x10,%esp
			j++;
f01076b1:	ff 45 f0             	incl   -0x10(%ebp)
			va += PAGE_SIZE;
f01076b4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01076bb:	eb 0a                	jmp    f01076c7 <createSharedObject+0x12b>
		}
		else
			return -1;
f01076bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01076c2:	e9 e3 00 00 00       	jmp    f01077aa <createSharedObject+0x20e>
	//Allocate Frames for each page
	uint32 va = (uint32) virtual_address;
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
	struct FrameInfo *sb_chunck;
	int j = 0;
	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f01076c7:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01076ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076d1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01076d4:	0f 82 64 ff ff ff    	jb     f010763e <createSharedObject+0xa2>
		else
			return -1;
	}

	//Initialize the shared object infos
	shares[sharedObj_index].ownerID = ownerID;
f01076da:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01076e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01076e3:	89 d0                	mov    %edx,%eax
f01076e5:	c1 e0 02             	shl    $0x2,%eax
f01076e8:	01 d0                	add    %edx,%eax
f01076ea:	c1 e0 02             	shl    $0x2,%eax
f01076ed:	01 d0                	add    %edx,%eax
f01076ef:	c1 e0 02             	shl    $0x2,%eax
f01076f2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01076f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01076f8:	89 02                	mov    %eax,(%edx)
	strcpy(shares[sharedObj_index].name,shareName);
f01076fa:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f0107700:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107703:	89 d0                	mov    %edx,%eax
f0107705:	c1 e0 02             	shl    $0x2,%eax
f0107708:	01 d0                	add    %edx,%eax
f010770a:	c1 e0 02             	shl    $0x2,%eax
f010770d:	01 d0                	add    %edx,%eax
f010770f:	c1 e0 02             	shl    $0x2,%eax
f0107712:	01 c8                	add    %ecx,%eax
f0107714:	83 c0 04             	add    $0x4,%eax
f0107717:	83 ec 08             	sub    $0x8,%esp
f010771a:	ff 75 0c             	pushl  0xc(%ebp)
f010771d:	50                   	push   %eax
f010771e:	e8 db 9e 02 00       	call   f01315fe <strcpy>
f0107723:	83 c4 10             	add    $0x10,%esp
	shares[sharedObj_index].references = 1;
f0107726:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010772c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010772f:	89 d0                	mov    %edx,%eax
f0107731:	c1 e0 02             	shl    $0x2,%eax
f0107734:	01 d0                	add    %edx,%eax
f0107736:	c1 e0 02             	shl    $0x2,%eax
f0107739:	01 d0                	add    %edx,%eax
f010773b:	c1 e0 02             	shl    $0x2,%eax
f010773e:	01 c8                	add    %ecx,%eax
f0107740:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
	shares[sharedObj_index].size = size;
f0107747:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010774d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107750:	89 d0                	mov    %edx,%eax
f0107752:	c1 e0 02             	shl    $0x2,%eax
f0107755:	01 d0                	add    %edx,%eax
f0107757:	c1 e0 02             	shl    $0x2,%eax
f010775a:	01 d0                	add    %edx,%eax
f010775c:	c1 e0 02             	shl    $0x2,%eax
f010775f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107762:	8b 45 10             	mov    0x10(%ebp),%eax
f0107765:	89 42 44             	mov    %eax,0x44(%edx)
	shares[sharedObj_index].isWritable = isWritable;
f0107768:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010776e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107771:	89 d0                	mov    %edx,%eax
f0107773:	c1 e0 02             	shl    $0x2,%eax
f0107776:	01 d0                	add    %edx,%eax
f0107778:	c1 e0 02             	shl    $0x2,%eax
f010777b:	01 d0                	add    %edx,%eax
f010777d:	c1 e0 02             	shl    $0x2,%eax
f0107780:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107783:	8a 45 c4             	mov    -0x3c(%ebp),%al
f0107786:	88 42 4c             	mov    %al,0x4c(%edx)
	shares[sharedObj_index].empty = 0;
f0107789:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010778f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107792:	89 d0                	mov    %edx,%eax
f0107794:	c1 e0 02             	shl    $0x2,%eax
f0107797:	01 d0                	add    %edx,%eax
f0107799:	c1 e0 02             	shl    $0x2,%eax
f010779c:	01 d0                	add    %edx,%eax
f010779e:	c1 e0 02             	shl    $0x2,%eax
f01077a1:	01 c8                	add    %ecx,%eax
f01077a3:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)
	return sharedObj_index;
f01077a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01077aa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01077ad:	5b                   	pop    %ebx
f01077ae:	5e                   	pop    %esi
f01077af:	5d                   	pop    %ebp
f01077b0:	c3                   	ret    

f01077b1 <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01077b1:	55                   	push   %ebp
f01077b2:	89 e5                	mov    %esp,%ebp
f01077b4:	53                   	push   %ebx
f01077b5:	83 ec 24             	sub    $0x24,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	//panic("getSharedObject() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f01077b8:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01077bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// 	and return the ShareObjectID
	// RETURN:
	//	a) sharedObjectID (its index in the array) if success
	//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists

	uint32 va = (uint32) virtual_address;
f01077c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01077c3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 shared_index = get_share_object_ID(ownerID,shareName);
f01077c6:	83 ec 08             	sub    $0x8,%esp
f01077c9:	ff 75 0c             	pushl  0xc(%ebp)
f01077cc:	ff 75 08             	pushl  0x8(%ebp)
f01077cf:	e8 d2 fa ff ff       	call   f01072a6 <get_share_object_ID>
f01077d4:	83 c4 10             	add    $0x10,%esp
f01077d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(shared_index == E_SHARED_MEM_NOT_EXISTS)
f01077da:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
f01077de:	75 0a                	jne    f01077ea <getSharedObject+0x39>
		return E_SHARED_MEM_NOT_EXISTS;
f01077e0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f01077e5:	e9 f4 00 00 00       	jmp    f01078de <getSharedObject+0x12d>

	int size_count = ROUNDUP(shares[shared_index].size,PAGE_SIZE) / PAGE_SIZE;
f01077ea:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01077f1:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f01077f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077fa:	89 d0                	mov    %edx,%eax
f01077fc:	c1 e0 02             	shl    $0x2,%eax
f01077ff:	01 d0                	add    %edx,%eax
f0107801:	c1 e0 02             	shl    $0x2,%eax
f0107804:	01 d0                	add    %edx,%eax
f0107806:	c1 e0 02             	shl    $0x2,%eax
f0107809:	01 c8                	add    %ecx,%eax
f010780b:	8b 40 44             	mov    0x44(%eax),%eax
f010780e:	89 c2                	mov    %eax,%edx
f0107810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107813:	01 d0                	add    %edx,%eax
f0107815:	48                   	dec    %eax
f0107816:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107819:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010781c:	ba 00 00 00 00       	mov    $0x0,%edx
f0107821:	f7 75 e4             	divl   -0x1c(%ebp)
f0107824:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107827:	29 d0                	sub    %edx,%eax
f0107829:	85 c0                	test   %eax,%eax
f010782b:	79 05                	jns    f0107832 <getSharedObject+0x81>
f010782d:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107832:	c1 f8 0c             	sar    $0xc,%eax
f0107835:	89 45 dc             	mov    %eax,-0x24(%ebp)
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f0107838:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010783f:	e9 8b 00 00 00       	jmp    f01078cf <getSharedObject+0x11e>
	{
		struct FrameInfo* frame = get_frame_from_storage(shares[shared_index].framesStorage, index_of_page);
f0107844:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0107847:	8b 1d ec ec 88 f0    	mov    0xf088ecec,%ebx
f010784d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107850:	89 d0                	mov    %edx,%eax
f0107852:	c1 e0 02             	shl    $0x2,%eax
f0107855:	01 d0                	add    %edx,%eax
f0107857:	c1 e0 02             	shl    $0x2,%eax
f010785a:	01 d0                	add    %edx,%eax
f010785c:	c1 e0 02             	shl    $0x2,%eax
f010785f:	01 d8                	add    %ebx,%eax
f0107861:	8b 40 50             	mov    0x50(%eax),%eax
f0107864:	83 ec 08             	sub    $0x8,%esp
f0107867:	51                   	push   %ecx
f0107868:	50                   	push   %eax
f0107869:	e8 3f fc ff ff       	call   f01074ad <get_frame_from_storage>
f010786e:	83 c4 10             	add    $0x10,%esp
f0107871:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if(shares[shared_index].isWritable == 1)
f0107874:	8b 0d ec ec 88 f0    	mov    0xf088ecec,%ecx
f010787a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010787d:	89 d0                	mov    %edx,%eax
f010787f:	c1 e0 02             	shl    $0x2,%eax
f0107882:	01 d0                	add    %edx,%eax
f0107884:	c1 e0 02             	shl    $0x2,%eax
f0107887:	01 d0                	add    %edx,%eax
f0107889:	c1 e0 02             	shl    $0x2,%eax
f010788c:	01 c8                	add    %ecx,%eax
f010788e:	8a 40 4c             	mov    0x4c(%eax),%al
f0107891:	3c 01                	cmp    $0x1,%al
f0107893:	75 19                	jne    f01078ae <getSharedObject+0xfd>
			map_frame(myenv->env_page_directory, frame, va, PERM_WRITEABLE | PERM_USER | PERM_PRESENT);
f0107895:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107898:	8b 40 5c             	mov    0x5c(%eax),%eax
f010789b:	6a 07                	push   $0x7
f010789d:	ff 75 f4             	pushl  -0xc(%ebp)
f01078a0:	ff 75 d8             	pushl  -0x28(%ebp)
f01078a3:	50                   	push   %eax
f01078a4:	e8 98 f4 ff ff       	call   f0106d41 <map_frame>
f01078a9:	83 c4 10             	add    $0x10,%esp
f01078ac:	eb 17                	jmp    f01078c5 <getSharedObject+0x114>
		else
			map_frame(myenv->env_page_directory, frame, va, PERM_USER | PERM_PRESENT);
f01078ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078b1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01078b4:	6a 05                	push   $0x5
f01078b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01078b9:	ff 75 d8             	pushl  -0x28(%ebp)
f01078bc:	50                   	push   %eax
f01078bd:	e8 7f f4 ff ff       	call   f0106d41 <map_frame>
f01078c2:	83 c4 10             	add    $0x10,%esp
		va += PAGE_SIZE;
f01078c5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	uint32 shared_index = get_share_object_ID(ownerID,shareName);
	if(shared_index == E_SHARED_MEM_NOT_EXISTS)
		return E_SHARED_MEM_NOT_EXISTS;

	int size_count = ROUNDUP(shares[shared_index].size,PAGE_SIZE) / PAGE_SIZE;
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f01078cc:	ff 45 f0             	incl   -0x10(%ebp)
f01078cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078d2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01078d5:	0f 8c 69 ff ff ff    	jl     f0107844 <getSharedObject+0x93>
			map_frame(myenv->env_page_directory, frame, va, PERM_USER | PERM_PRESENT);
		va += PAGE_SIZE;
	}

	//shares[shared_index].references++;
	return shared_index;
f01078db:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01078de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01078e1:	c9                   	leave  
f01078e2:	c3                   	ret    

f01078e3 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01078e3:	55                   	push   %ebp
f01078e4:	89 e5                	mov    %esp,%ebp
f01078e6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01078e9:	83 ec 04             	sub    $0x4,%esp
f01078ec:	68 f4 64 13 f0       	push   $0xf01364f4
f01078f1:	68 75 01 00 00       	push   $0x175
f01078f6:	68 b4 64 13 f0       	push   $0xf01364b4
f01078fb:	e8 05 89 ff ff       	call   f0100205 <_panic>

f0107900 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107900:	55                   	push   %ebp
f0107901:	89 e5                	mov    %esp,%ebp
f0107903:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0107908:	83 f8 01             	cmp    $0x1,%eax
f010790b:	75 04                	jne    f0107911 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010790d:	b0 01                	mov    $0x1,%al
f010790f:	eb 02                	jmp    f0107913 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107911:	b0 00                	mov    $0x0,%al
f0107913:	5d                   	pop    %ebp
f0107914:	c3                   	ret    

f0107915 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0107915:	55                   	push   %ebp
f0107916:	89 e5                	mov    %esp,%ebp
f0107918:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f010791d:	83 f8 02             	cmp    $0x2,%eax
f0107920:	75 04                	jne    f0107926 <isKHeapPlacementStrategyBESTFIT+0x11>
f0107922:	b0 01                	mov    $0x1,%al
f0107924:	eb 02                	jmp    f0107928 <isKHeapPlacementStrategyBESTFIT+0x13>
f0107926:	b0 00                	mov    $0x0,%al
f0107928:	5d                   	pop    %ebp
f0107929:	c3                   	ret    

f010792a <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010792a:	55                   	push   %ebp
f010792b:	89 e5                	mov    %esp,%ebp
f010792d:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0107932:	83 f8 03             	cmp    $0x3,%eax
f0107935:	75 04                	jne    f010793b <isKHeapPlacementStrategyNEXTFIT+0x11>
f0107937:	b0 01                	mov    $0x1,%al
f0107939:	eb 02                	jmp    f010793d <isKHeapPlacementStrategyNEXTFIT+0x13>
f010793b:	b0 00                	mov    $0x0,%al
f010793d:	5d                   	pop    %ebp
f010793e:	c3                   	ret    

f010793f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010793f:	55                   	push   %ebp
f0107940:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107942:	8b 45 08             	mov    0x8(%ebp),%eax
f0107945:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f010794b:	29 d0                	sub    %edx,%eax
f010794d:	c1 f8 03             	sar    $0x3,%eax
f0107950:	89 c2                	mov    %eax,%edx
f0107952:	89 d0                	mov    %edx,%eax
f0107954:	c1 e0 02             	shl    $0x2,%eax
f0107957:	01 d0                	add    %edx,%eax
f0107959:	c1 e0 02             	shl    $0x2,%eax
f010795c:	01 d0                	add    %edx,%eax
f010795e:	c1 e0 02             	shl    $0x2,%eax
f0107961:	01 d0                	add    %edx,%eax
f0107963:	89 c1                	mov    %eax,%ecx
f0107965:	c1 e1 08             	shl    $0x8,%ecx
f0107968:	01 c8                	add    %ecx,%eax
f010796a:	89 c1                	mov    %eax,%ecx
f010796c:	c1 e1 10             	shl    $0x10,%ecx
f010796f:	01 c8                	add    %ecx,%eax
f0107971:	01 c0                	add    %eax,%eax
f0107973:	01 d0                	add    %edx,%eax
}
f0107975:	5d                   	pop    %ebp
f0107976:	c3                   	ret    

f0107977 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107977:	55                   	push   %ebp
f0107978:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010797a:	ff 75 08             	pushl  0x8(%ebp)
f010797d:	e8 bd ff ff ff       	call   f010793f <to_frame_number>
f0107982:	83 c4 04             	add    $0x4,%esp
f0107985:	c1 e0 0c             	shl    $0xc,%eax
}
f0107988:	c9                   	leave  
f0107989:	c3                   	ret    

f010798a <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010798a:	55                   	push   %ebp
f010798b:	89 e5                	mov    %esp,%ebp
f010798d:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107990:	8b 45 08             	mov    0x8(%ebp),%eax
f0107993:	c1 e8 0c             	shr    $0xc,%eax
f0107996:	89 c2                	mov    %eax,%edx
f0107998:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f010799d:	39 c2                	cmp    %eax,%edx
f010799f:	72 14                	jb     f01079b5 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01079a1:	83 ec 04             	sub    $0x4,%esp
f01079a4:	68 24 65 13 f0       	push   $0xf0136524
f01079a9:	6a 55                	push   $0x55
f01079ab:	68 49 65 13 f0       	push   $0xf0136549
f01079b0:	e8 50 88 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01079b5:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f01079bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01079be:	c1 e8 0c             	shr    $0xc,%eax
f01079c1:	89 c1                	mov    %eax,%ecx
f01079c3:	89 c8                	mov    %ecx,%eax
f01079c5:	01 c0                	add    %eax,%eax
f01079c7:	01 c8                	add    %ecx,%eax
f01079c9:	c1 e0 03             	shl    $0x3,%eax
f01079cc:	01 d0                	add    %edx,%eax
}
f01079ce:	c9                   	leave  
f01079cf:	c3                   	ret    

f01079d0 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01079d0:	55                   	push   %ebp
f01079d1:	89 e5                	mov    %esp,%ebp
f01079d3:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f01079d6:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f01079dd:	00 00 00 
f01079e0:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f01079e7:	00 00 00 
f01079ea:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f01079f1:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01079f4:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f01079fb:	00 00 00 
f01079fe:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f0107a05:	00 00 00 
f0107a08:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f0107a0f:	00 00 00 
	uint32 arr_size = 0;
f0107a12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107a19:	c7 05 04 ed 88 f0 ff 	movl   $0x9fff,0xf088ed04
f0107a20:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f0107a23:	c7 05 d8 ec 88 f0 00 	movl   $0xf6000000,0xf088ecd8
f0107a2a:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107a2d:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107a34:	a1 04 ed 88 f0       	mov    0xf088ed04,%eax
f0107a39:	c1 e0 04             	shl    $0x4,%eax
f0107a3c:	89 c2                	mov    %eax,%edx
f0107a3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a41:	01 d0                	add    %edx,%eax
f0107a43:	48                   	dec    %eax
f0107a44:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a4f:	f7 75 f0             	divl   -0x10(%ebp)
f0107a52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a55:	29 d0                	sub    %edx,%eax
f0107a57:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107a5a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0107a5f:	6a 03                	push   $0x3
f0107a61:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a64:	68 00 00 00 f6       	push   $0xf6000000
f0107a69:	50                   	push   %eax
f0107a6a:	e8 bd 13 00 00       	call   f0108e2c <allocate_chunk>
f0107a6f:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107a72:	a1 04 ed 88 f0       	mov    0xf088ed04,%eax
f0107a77:	83 ec 0c             	sub    $0xc,%esp
f0107a7a:	50                   	push   %eax
f0107a7b:	e8 99 a6 02 00       	call   f0132119 <initialize_MemBlocksList>
f0107a80:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f0107a83:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0107a88:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107a8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a8e:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107a94:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a97:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107a9a:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107a9f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107aa2:	89 c2                	mov    %eax,%edx
f0107aa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107aa7:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f0107aaa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107aae:	75 14                	jne    f0107ac4 <initialize_dyn_block_system+0xf4>
f0107ab0:	83 ec 04             	sub    $0x4,%esp
f0107ab3:	68 63 65 13 f0       	push   $0xf0136563
f0107ab8:	6a 30                	push   $0x30
f0107aba:	68 81 65 13 f0       	push   $0xf0136581
f0107abf:	e8 41 87 ff ff       	call   f0100205 <_panic>
f0107ac4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ac7:	8b 00                	mov    (%eax),%eax
f0107ac9:	85 c0                	test   %eax,%eax
f0107acb:	74 10                	je     f0107add <initialize_dyn_block_system+0x10d>
f0107acd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ad0:	8b 00                	mov    (%eax),%eax
f0107ad2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107ad5:	8b 52 04             	mov    0x4(%edx),%edx
f0107ad8:	89 50 04             	mov    %edx,0x4(%eax)
f0107adb:	eb 0b                	jmp    f0107ae8 <initialize_dyn_block_system+0x118>
f0107add:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ae0:	8b 40 04             	mov    0x4(%eax),%eax
f0107ae3:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0107ae8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107aeb:	8b 40 04             	mov    0x4(%eax),%eax
f0107aee:	85 c0                	test   %eax,%eax
f0107af0:	74 0f                	je     f0107b01 <initialize_dyn_block_system+0x131>
f0107af2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107af5:	8b 40 04             	mov    0x4(%eax),%eax
f0107af8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107afb:	8b 12                	mov    (%edx),%edx
f0107afd:	89 10                	mov    %edx,(%eax)
f0107aff:	eb 0a                	jmp    f0107b0b <initialize_dyn_block_system+0x13b>
f0107b01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b04:	8b 00                	mov    (%eax),%eax
f0107b06:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0107b0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107b14:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b17:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b1e:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0107b23:	48                   	dec    %eax
f0107b24:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107b29:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107b2d:	75 14                	jne    f0107b43 <initialize_dyn_block_system+0x173>
f0107b2f:	83 ec 04             	sub    $0x4,%esp
f0107b32:	68 94 65 13 f0       	push   $0xf0136594
f0107b37:	6a 32                	push   $0x32
f0107b39:	68 81 65 13 f0       	push   $0xf0136581
f0107b3e:	e8 c2 86 ff ff       	call   f0100205 <_panic>
f0107b43:	8b 15 64 ed 88 f0    	mov    0xf088ed64,%edx
f0107b49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b4c:	89 10                	mov    %edx,(%eax)
f0107b4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b51:	8b 00                	mov    (%eax),%eax
f0107b53:	85 c0                	test   %eax,%eax
f0107b55:	74 0d                	je     f0107b64 <initialize_dyn_block_system+0x194>
f0107b57:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0107b5c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107b5f:	89 50 04             	mov    %edx,0x4(%eax)
f0107b62:	eb 08                	jmp    f0107b6c <initialize_dyn_block_system+0x19c>
f0107b64:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b67:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0107b6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b6f:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0107b74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b77:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b7e:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0107b83:	40                   	inc    %eax
f0107b84:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70

}
f0107b89:	90                   	nop
f0107b8a:	c9                   	leave  
f0107b8b:	c3                   	ret    

f0107b8c <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107b8c:	55                   	push   %ebp
f0107b8d:	89 e5                	mov    %esp,%ebp
f0107b8f:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107b92:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107b99:	8b 55 08             	mov    0x8(%ebp),%edx
f0107b9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b9f:	01 d0                	add    %edx,%eax
f0107ba1:	48                   	dec    %eax
f0107ba2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107ba5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ba8:	ba 00 00 00 00       	mov    $0x0,%edx
f0107bad:	f7 75 f0             	divl   -0x10(%ebp)
f0107bb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bb3:	29 d0                	sub    %edx,%eax
f0107bb5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f0107bb8:	e8 43 fd ff ff       	call   f0107900 <isKHeapPlacementStrategyFIRSTFIT>
f0107bbd:	84 c0                	test   %al,%al
f0107bbf:	74 13                	je     f0107bd4 <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107bc1:	83 ec 0c             	sub    $0xc,%esp
f0107bc4:	ff 75 e8             	pushl  -0x18(%ebp)
f0107bc7:	e8 0f a9 02 00       	call   f01324db <alloc_block_FF>
f0107bcc:	83 c4 10             	add    $0x10,%esp
f0107bcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107bd2:	eb 36                	jmp    f0107c0a <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f0107bd4:	e8 3c fd ff ff       	call   f0107915 <isKHeapPlacementStrategyBESTFIT>
f0107bd9:	84 c0                	test   %al,%al
f0107bdb:	74 13                	je     f0107bf0 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f0107bdd:	83 ec 0c             	sub    $0xc,%esp
f0107be0:	ff 75 e8             	pushl  -0x18(%ebp)
f0107be3:	e8 c0 aa 02 00       	call   f01326a8 <alloc_block_BF>
f0107be8:	83 c4 10             	add    $0x10,%esp
f0107beb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107bee:	eb 1a                	jmp    f0107c0a <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0107bf0:	e8 35 fd ff ff       	call   f010792a <isKHeapPlacementStrategyNEXTFIT>
f0107bf5:	84 c0                	test   %al,%al
f0107bf7:	74 11                	je     f0107c0a <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f0107bf9:	83 ec 0c             	sub    $0xc,%esp
f0107bfc:	ff 75 e8             	pushl  -0x18(%ebp)
f0107bff:	e8 b5 ac 02 00       	call   f01328b9 <alloc_block_NF>
f0107c04:	83 c4 10             	add    $0x10,%esp
f0107c07:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107c0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107c0e:	74 40                	je     f0107c50 <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c13:	8b 50 08             	mov    0x8(%eax),%edx
f0107c16:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0107c1b:	6a 03                	push   $0x3
f0107c1d:	ff 75 e8             	pushl  -0x18(%ebp)
f0107c20:	52                   	push   %edx
f0107c21:	50                   	push   %eax
f0107c22:	e8 05 12 00 00       	call   f0108e2c <allocate_chunk>
f0107c27:	83 c4 10             	add    $0x10,%esp
f0107c2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107c2d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107c31:	75 16                	jne    f0107c49 <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f0107c33:	83 ec 0c             	sub    $0xc,%esp
f0107c36:	ff 75 f4             	pushl  -0xc(%ebp)
f0107c39:	e8 10 a6 02 00       	call   f013224e <insert_sorted_allocList>
f0107c3e:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f0107c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c44:	8b 40 08             	mov    0x8(%eax),%eax
f0107c47:	eb 0c                	jmp    f0107c55 <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107c49:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c4e:	eb 05                	jmp    f0107c55 <kmalloc+0xc9>
	}
	return NULL;
f0107c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107c55:	c9                   	leave  
f0107c56:	c3                   	ret    

f0107c57 <kfree>:
void kfree(void* virtual_address)
{
f0107c57:	55                   	push   %ebp
f0107c58:	89 e5                	mov    %esp,%ebp
f0107c5a:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107c5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c60:	83 ec 08             	sub    $0x8,%esp
f0107c63:	50                   	push   %eax
f0107c64:	68 c8 ec 88 f0       	push   $0xf088ecc8
f0107c69:	e8 88 a5 02 00       	call   f01321f6 <find_block>
f0107c6e:	83 c4 10             	add    $0x10,%esp
f0107c71:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f0107c74:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c78:	0f 84 fd 00 00 00    	je     f0107d7b <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107c7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c82:	75 14                	jne    f0107c98 <kfree+0x41>
f0107c84:	83 ec 04             	sub    $0x4,%esp
f0107c87:	68 63 65 13 f0       	push   $0xf0136563
f0107c8c:	6a 5a                	push   $0x5a
f0107c8e:	68 81 65 13 f0       	push   $0xf0136581
f0107c93:	e8 6d 85 ff ff       	call   f0100205 <_panic>
f0107c98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c9b:	8b 00                	mov    (%eax),%eax
f0107c9d:	85 c0                	test   %eax,%eax
f0107c9f:	74 10                	je     f0107cb1 <kfree+0x5a>
f0107ca1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ca4:	8b 00                	mov    (%eax),%eax
f0107ca6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ca9:	8b 52 04             	mov    0x4(%edx),%edx
f0107cac:	89 50 04             	mov    %edx,0x4(%eax)
f0107caf:	eb 0b                	jmp    f0107cbc <kfree+0x65>
f0107cb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cb4:	8b 40 04             	mov    0x4(%eax),%eax
f0107cb7:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f0107cbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cbf:	8b 40 04             	mov    0x4(%eax),%eax
f0107cc2:	85 c0                	test   %eax,%eax
f0107cc4:	74 0f                	je     f0107cd5 <kfree+0x7e>
f0107cc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cc9:	8b 40 04             	mov    0x4(%eax),%eax
f0107ccc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ccf:	8b 12                	mov    (%edx),%edx
f0107cd1:	89 10                	mov    %edx,(%eax)
f0107cd3:	eb 0a                	jmp    f0107cdf <kfree+0x88>
f0107cd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cd8:	8b 00                	mov    (%eax),%eax
f0107cda:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f0107cdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ce2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ceb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107cf2:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0107cf7:	48                   	dec    %eax
f0107cf8:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d00:	8b 40 08             	mov    0x8(%eax),%eax
f0107d03:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107d06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107d0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107d11:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d1b:	8b 50 08             	mov    0x8(%eax),%edx
f0107d1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d21:	8b 40 0c             	mov    0xc(%eax),%eax
f0107d24:	01 c2                	add    %eax,%edx
f0107d26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d29:	01 d0                	add    %edx,%eax
f0107d2b:	48                   	dec    %eax
f0107d2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107d2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107d32:	ba 00 00 00 00       	mov    $0x0,%edx
f0107d37:	f7 75 e4             	divl   -0x1c(%ebp)
f0107d3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107d3d:	29 d0                	sub    %edx,%eax
f0107d3f:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107d42:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107d48:	eb 1b                	jmp    f0107d65 <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107d4a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0107d4f:	83 ec 08             	sub    $0x8,%esp
f0107d52:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d55:	50                   	push   %eax
f0107d56:	e8 1b f1 ff ff       	call   f0106e76 <unmap_frame>
f0107d5b:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107d5e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107d65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d68:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107d6b:	72 dd                	jb     f0107d4a <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107d6d:	83 ec 0c             	sub    $0xc,%esp
f0107d70:	ff 75 f0             	pushl  -0x10(%ebp)
f0107d73:	e8 0e b1 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f0107d78:	83 c4 10             	add    $0x10,%esp
	}
}
f0107d7b:	90                   	nop
f0107d7c:	c9                   	leave  
f0107d7d:	c3                   	ret    

f0107d7e <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107d7e:	55                   	push   %ebp
f0107d7f:	89 e5                	mov    %esp,%ebp
f0107d81:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107d84:	83 ec 0c             	sub    $0xc,%esp
f0107d87:	ff 75 08             	pushl  0x8(%ebp)
f0107d8a:	e8 fb fb ff ff       	call   f010798a <to_frame_info>
f0107d8f:	83 c4 10             	add    $0x10,%esp
f0107d92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107d95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d99:	74 08                	je     f0107da3 <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d9e:	8b 40 0c             	mov    0xc(%eax),%eax
f0107da1:	eb 05                	jmp    f0107da8 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107da3:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107da8:	c9                   	leave  
f0107da9:	c3                   	ret    

f0107daa <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107daa:	55                   	push   %ebp
f0107dab:	89 e5                	mov    %esp,%ebp
f0107dad:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107db0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107db7:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0107dbc:	83 ec 04             	sub    $0x4,%esp
f0107dbf:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107dc2:	52                   	push   %edx
f0107dc3:	ff 75 08             	pushl  0x8(%ebp)
f0107dc6:	50                   	push   %eax
f0107dc7:	e8 3a f0 ff ff       	call   f0106e06 <get_frame_info>
f0107dcc:	83 c4 10             	add    $0x10,%esp
f0107dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107dd2:	83 ec 0c             	sub    $0xc,%esp
f0107dd5:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dd8:	e8 9a fb ff ff       	call   f0107977 <to_physical_address>
f0107ddd:	83 c4 10             	add    $0x10,%esp
f0107de0:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107de3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107de7:	74 05                	je     f0107dee <kheap_physical_address+0x44>
		return address_physical;
f0107de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107dec:	eb 05                	jmp    f0107df3 <kheap_physical_address+0x49>
	return 0;
f0107dee:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107df3:	c9                   	leave  
f0107df4:	c3                   	ret    

f0107df5 <kfreeall>:


void kfreeall()
{
f0107df5:	55                   	push   %ebp
f0107df6:	89 e5                	mov    %esp,%ebp
f0107df8:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107dfb:	83 ec 04             	sub    $0x4,%esp
f0107dfe:	68 b7 65 13 f0       	push   $0xf01365b7
f0107e03:	68 89 00 00 00       	push   $0x89
f0107e08:	68 81 65 13 f0       	push   $0xf0136581
f0107e0d:	e8 f3 83 ff ff       	call   f0100205 <_panic>

f0107e12 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107e12:	55                   	push   %ebp
f0107e13:	89 e5                	mov    %esp,%ebp
f0107e15:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e18:	83 ec 04             	sub    $0x4,%esp
f0107e1b:	68 b7 65 13 f0       	push   $0xf01365b7
f0107e20:	68 8f 00 00 00       	push   $0x8f
f0107e25:	68 81 65 13 f0       	push   $0xf0136581
f0107e2a:	e8 d6 83 ff ff       	call   f0100205 <_panic>

f0107e2f <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107e2f:	55                   	push   %ebp
f0107e30:	89 e5                	mov    %esp,%ebp
f0107e32:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e35:	83 ec 04             	sub    $0x4,%esp
f0107e38:	68 b7 65 13 f0       	push   $0xf01365b7
f0107e3d:	68 94 00 00 00       	push   $0x94
f0107e42:	68 81 65 13 f0       	push   $0xf0136581
f0107e47:	e8 b9 83 ff ff       	call   f0100205 <_panic>

f0107e4c <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107e4c:	55                   	push   %ebp
f0107e4d:	89 e5                	mov    %esp,%ebp
f0107e4f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107e52:	83 ec 04             	sub    $0x4,%esp
f0107e55:	68 c8 65 13 f0       	push   $0xf01365c8
f0107e5a:	68 ab 00 00 00       	push   $0xab
f0107e5f:	68 81 65 13 f0       	push   $0xf0136581
f0107e64:	e8 9c 83 ff ff       	call   f0100205 <_panic>

f0107e69 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107e69:	55                   	push   %ebp
f0107e6a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e6f:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f0107e75:	29 d0                	sub    %edx,%eax
f0107e77:	c1 f8 03             	sar    $0x3,%eax
f0107e7a:	89 c2                	mov    %eax,%edx
f0107e7c:	89 d0                	mov    %edx,%eax
f0107e7e:	c1 e0 02             	shl    $0x2,%eax
f0107e81:	01 d0                	add    %edx,%eax
f0107e83:	c1 e0 02             	shl    $0x2,%eax
f0107e86:	01 d0                	add    %edx,%eax
f0107e88:	c1 e0 02             	shl    $0x2,%eax
f0107e8b:	01 d0                	add    %edx,%eax
f0107e8d:	89 c1                	mov    %eax,%ecx
f0107e8f:	c1 e1 08             	shl    $0x8,%ecx
f0107e92:	01 c8                	add    %ecx,%eax
f0107e94:	89 c1                	mov    %eax,%ecx
f0107e96:	c1 e1 10             	shl    $0x10,%ecx
f0107e99:	01 c8                	add    %ecx,%eax
f0107e9b:	01 c0                	add    %eax,%eax
f0107e9d:	01 d0                	add    %edx,%eax
}
f0107e9f:	5d                   	pop    %ebp
f0107ea0:	c3                   	ret    

f0107ea1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107ea1:	55                   	push   %ebp
f0107ea2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107ea4:	ff 75 08             	pushl  0x8(%ebp)
f0107ea7:	e8 bd ff ff ff       	call   f0107e69 <to_frame_number>
f0107eac:	83 c4 04             	add    $0x4,%esp
f0107eaf:	c1 e0 0c             	shl    $0xc,%eax
}
f0107eb2:	c9                   	leave  
f0107eb3:	c3                   	ret    

f0107eb4 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107eb4:	55                   	push   %ebp
f0107eb5:	89 e5                	mov    %esp,%ebp
f0107eb7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107eba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107ec1:	83 ec 04             	sub    $0x4,%esp
f0107ec4:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107ec7:	50                   	push   %eax
f0107ec8:	ff 75 0c             	pushl  0xc(%ebp)
f0107ecb:	ff 75 08             	pushl  0x8(%ebp)
f0107ece:	e8 de eb ff ff       	call   f0106ab1 <get_page_table>
f0107ed3:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107ed6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ed9:	85 c0                	test   %eax,%eax
f0107edb:	74 75                	je     f0107f52 <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107edd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ee0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ee3:	c1 ea 0c             	shr    $0xc,%edx
f0107ee6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107eec:	c1 e2 02             	shl    $0x2,%edx
f0107eef:	01 d0                	add    %edx,%eax
f0107ef1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ef4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107ef7:	c1 e9 0c             	shr    $0xc,%ecx
f0107efa:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f00:	c1 e1 02             	shl    $0x2,%ecx
f0107f03:	01 ca                	add    %ecx,%edx
f0107f05:	8b 12                	mov    (%edx),%edx
f0107f07:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107f0a:	f7 d1                	not    %ecx
f0107f0c:	21 ca                	and    %ecx,%edx
f0107f0e:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f13:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f16:	c1 ea 0c             	shr    $0xc,%edx
f0107f19:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107f1f:	c1 e2 02             	shl    $0x2,%edx
f0107f22:	01 c2                	add    %eax,%edx
f0107f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f27:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107f2a:	c1 e9 0c             	shr    $0xc,%ecx
f0107f2d:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f33:	c1 e1 02             	shl    $0x2,%ecx
f0107f36:	01 c8                	add    %ecx,%eax
f0107f38:	8b 00                	mov    (%eax),%eax
f0107f3a:	0b 45 10             	or     0x10(%ebp),%eax
f0107f3d:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107f3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f42:	83 ec 08             	sub    $0x8,%esp
f0107f45:	50                   	push   %eax
f0107f46:	6a 00                	push   $0x0
f0107f48:	e8 c1 e5 ff ff       	call   f010650e <tlb_invalidate>
f0107f4d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107f50:	eb 14                	jmp    f0107f66 <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107f52:	83 ec 04             	sub    $0x4,%esp
f0107f55:	68 ef 65 13 f0       	push   $0xf01365ef
f0107f5a:	6a 19                	push   $0x19
f0107f5c:	68 0c 66 13 f0       	push   $0xf013660c
f0107f61:	e8 9f 82 ff ff       	call   f0100205 <_panic>
	}
}
f0107f66:	c9                   	leave  
f0107f67:	c3                   	ret    

f0107f68 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107f68:	55                   	push   %ebp
f0107f69:	89 e5                	mov    %esp,%ebp
f0107f6b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107f6e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107f75:	83 ec 04             	sub    $0x4,%esp
f0107f78:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107f7b:	50                   	push   %eax
f0107f7c:	ff 75 0c             	pushl  0xc(%ebp)
f0107f7f:	ff 75 08             	pushl  0x8(%ebp)
f0107f82:	e8 2a eb ff ff       	call   f0106ab1 <get_page_table>
f0107f87:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107f8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f8d:	85 c0                	test   %eax,%eax
f0107f8f:	74 2b                	je     f0107fbc <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107f91:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f94:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f97:	c1 ea 0c             	shr    $0xc,%edx
f0107f9a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107fa0:	c1 e2 02             	shl    $0x2,%edx
f0107fa3:	01 d0                	add    %edx,%eax
f0107fa5:	8b 00                	mov    (%eax),%eax
f0107fa7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107faa:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fb4:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107fba:	eb 05                	jmp    f0107fc1 <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107fbc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107fc1:	c9                   	leave  
f0107fc2:	c3                   	ret    

f0107fc3 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107fc3:	55                   	push   %ebp
f0107fc4:	89 e5                	mov    %esp,%ebp
f0107fc6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107fc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107fd0:	83 ec 04             	sub    $0x4,%esp
f0107fd3:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107fd6:	50                   	push   %eax
f0107fd7:	ff 75 0c             	pushl  0xc(%ebp)
f0107fda:	ff 75 08             	pushl  0x8(%ebp)
f0107fdd:	e8 cf ea ff ff       	call   f0106ab1 <get_page_table>
f0107fe2:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fe8:	85 c0                	test   %eax,%eax
f0107fea:	74 2d                	je     f0108019 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107fec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fef:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ff2:	c1 ea 0c             	shr    $0xc,%edx
f0107ff5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ffb:	c1 e2 02             	shl    $0x2,%edx
f0107ffe:	01 d0                	add    %edx,%eax
f0108000:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108006:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108009:	83 ec 08             	sub    $0x8,%esp
f010800c:	50                   	push   %eax
f010800d:	6a 00                	push   $0x0
f010800f:	e8 fa e4 ff ff       	call   f010650e <tlb_invalidate>
f0108014:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0108017:	eb 14                	jmp    f010802d <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0108019:	83 ec 04             	sub    $0x4,%esp
f010801c:	68 ef 65 13 f0       	push   $0xf01365ef
f0108021:	6a 42                	push   $0x42
f0108023:	68 0c 66 13 f0       	push   $0xf013660c
f0108028:	e8 d8 81 ff ff       	call   f0100205 <_panic>
	}
}
f010802d:	c9                   	leave  
f010802e:	c3                   	ret    

f010802f <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f010802f:	55                   	push   %ebp
f0108030:	89 e5                	mov    %esp,%ebp
f0108032:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0108035:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f010803c:	83 ec 04             	sub    $0x4,%esp
f010803f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108042:	50                   	push   %eax
f0108043:	ff 75 0c             	pushl  0xc(%ebp)
f0108046:	ff 75 08             	pushl  0x8(%ebp)
f0108049:	e8 63 ea ff ff       	call   f0106ab1 <get_page_table>
f010804e:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0108051:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108054:	85 c0                	test   %eax,%eax
f0108056:	74 28                	je     f0108080 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0108058:	83 ec 04             	sub    $0x4,%esp
f010805b:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010805e:	50                   	push   %eax
f010805f:	ff 75 0c             	pushl  0xc(%ebp)
f0108062:	ff 75 08             	pushl  0x8(%ebp)
f0108065:	e8 9c ed ff ff       	call   f0106e06 <get_frame_info>
f010806a:	83 c4 10             	add    $0x10,%esp
f010806d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0108070:	83 ec 0c             	sub    $0xc,%esp
f0108073:	ff 75 f4             	pushl  -0xc(%ebp)
f0108076:	e8 26 fe ff ff       	call   f0107ea1 <to_physical_address>
f010807b:	83 c4 10             	add    $0x10,%esp
f010807e:	eb 05                	jmp    f0108085 <virtual_to_physical+0x56>
	}
	return -1;
f0108080:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0108085:	c9                   	leave  
f0108086:	c3                   	ret    

f0108087 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108087:	55                   	push   %ebp
f0108088:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f010808a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010808d:	c1 e8 16             	shr    $0x16,%eax
f0108090:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108097:	8b 45 08             	mov    0x8(%ebp),%eax
f010809a:	01 d0                	add    %edx,%eax
f010809c:	8b 00                	mov    (%eax),%eax
f010809e:	83 e0 20             	and    $0x20,%eax
f01080a1:	85 c0                	test   %eax,%eax
f01080a3:	0f 95 c0             	setne  %al
f01080a6:	0f b6 c0             	movzbl %al,%eax
}
f01080a9:	5d                   	pop    %ebp
f01080aa:	c3                   	ret    

f01080ab <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01080ab:	55                   	push   %ebp
f01080ac:	89 e5                	mov    %esp,%ebp
f01080ae:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01080b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080b4:	c1 e8 16             	shr    $0x16,%eax
f01080b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01080be:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c1:	01 d0                	add    %edx,%eax
f01080c3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080c6:	c1 ea 16             	shr    $0x16,%edx
f01080c9:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01080d0:	8b 55 08             	mov    0x8(%ebp),%edx
f01080d3:	01 ca                	add    %ecx,%edx
f01080d5:	8b 12                	mov    (%edx),%edx
f01080d7:	83 e2 df             	and    $0xffffffdf,%edx
f01080da:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01080dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080df:	83 ec 08             	sub    $0x8,%esp
f01080e2:	50                   	push   %eax
f01080e3:	6a 00                	push   $0x0
f01080e5:	e8 24 e4 ff ff       	call   f010650e <tlb_invalidate>
f01080ea:	83 c4 10             	add    $0x10,%esp
}
f01080ed:	90                   	nop
f01080ee:	c9                   	leave  
f01080ef:	c3                   	ret    

f01080f0 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f01080f0:	55                   	push   %ebp
f01080f1:	89 e5                	mov    %esp,%ebp
f01080f3:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01080f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080f9:	c1 e8 16             	shr    $0x16,%eax
f01080fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108103:	8b 45 08             	mov    0x8(%ebp),%eax
f0108106:	01 d0                	add    %edx,%eax
f0108108:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010810e:	0f 20 d8             	mov    %cr3,%eax
f0108111:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108114:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108117:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010811a:	90                   	nop
f010811b:	c9                   	leave  
f010811c:	c3                   	ret    

f010811d <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f010811d:	55                   	push   %ebp
f010811e:	89 e5                	mov    %esp,%ebp
f0108120:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108123:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010812a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108131:	eb 21                	jmp    f0108154 <env_page_ws_get_size+0x37>
f0108133:	8b 45 08             	mov    0x8(%ebp),%eax
f0108136:	8b 48 78             	mov    0x78(%eax),%ecx
f0108139:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010813c:	89 d0                	mov    %edx,%eax
f010813e:	01 c0                	add    %eax,%eax
f0108140:	01 d0                	add    %edx,%eax
f0108142:	c1 e0 03             	shl    $0x3,%eax
f0108145:	01 c8                	add    %ecx,%eax
f0108147:	8a 40 04             	mov    0x4(%eax),%al
f010814a:	84 c0                	test   %al,%al
f010814c:	75 03                	jne    f0108151 <env_page_ws_get_size+0x34>
f010814e:	ff 45 f8             	incl   -0x8(%ebp)
f0108151:	ff 45 fc             	incl   -0x4(%ebp)
f0108154:	8b 45 08             	mov    0x8(%ebp),%eax
f0108157:	8b 50 74             	mov    0x74(%eax),%edx
f010815a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010815d:	39 c2                	cmp    %eax,%edx
f010815f:	77 d2                	ja     f0108133 <env_page_ws_get_size+0x16>
	return counter;
f0108161:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108164:	c9                   	leave  
f0108165:	c3                   	ret    

f0108166 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108166:	55                   	push   %ebp
f0108167:	89 e5                	mov    %esp,%ebp
f0108169:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010816c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108173:	eb 4c                	jmp    f01081c1 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108175:	8b 45 08             	mov    0x8(%ebp),%eax
f0108178:	8b 48 78             	mov    0x78(%eax),%ecx
f010817b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010817e:	89 d0                	mov    %edx,%eax
f0108180:	01 c0                	add    %eax,%eax
f0108182:	01 d0                	add    %edx,%eax
f0108184:	c1 e0 03             	shl    $0x3,%eax
f0108187:	01 c8                	add    %ecx,%eax
f0108189:	8b 00                	mov    (%eax),%eax
f010818b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010818e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108191:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108196:	89 c2                	mov    %eax,%edx
f0108198:	8b 45 0c             	mov    0xc(%ebp),%eax
f010819b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010819e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01081a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01081a6:	39 c2                	cmp    %eax,%edx
f01081a8:	75 14                	jne    f01081be <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f01081aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ad:	83 ec 08             	sub    $0x8,%esp
f01081b0:	50                   	push   %eax
f01081b1:	ff 75 08             	pushl  0x8(%ebp)
f01081b4:	e8 b9 00 00 00       	call   f0108272 <env_page_ws_clear_entry>
f01081b9:	83 c4 10             	add    $0x10,%esp
			break;
f01081bc:	eb 10                	jmp    f01081ce <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01081be:	ff 45 f4             	incl   -0xc(%ebp)
f01081c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c4:	8b 50 74             	mov    0x74(%eax),%edx
f01081c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ca:	39 c2                	cmp    %eax,%edx
f01081cc:	77 a7                	ja     f0108175 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01081ce:	90                   	nop
f01081cf:	c9                   	leave  
f01081d0:	c3                   	ret    

f01081d1 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01081d1:	55                   	push   %ebp
f01081d2:	89 e5                	mov    %esp,%ebp
f01081d4:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01081d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01081da:	8b 40 74             	mov    0x74(%eax),%eax
f01081dd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01081e0:	77 16                	ja     f01081f8 <env_page_ws_set_entry+0x27>
f01081e2:	68 28 66 13 f0       	push   $0xf0136628
f01081e7:	68 5e 66 13 f0       	push   $0xf013665e
f01081ec:	6a 26                	push   $0x26
f01081ee:	68 74 66 13 f0       	push   $0xf0136674
f01081f3:	e8 0d 80 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01081f8:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01081ff:	76 16                	jbe    f0108217 <env_page_ws_set_entry+0x46>
f0108201:	68 94 66 13 f0       	push   $0xf0136694
f0108206:	68 5e 66 13 f0       	push   $0xf013665e
f010820b:	6a 27                	push   $0x27
f010820d:	68 74 66 13 f0       	push   $0xf0136674
f0108212:	e8 ee 7f ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108217:	8b 45 08             	mov    0x8(%ebp),%eax
f010821a:	8b 48 78             	mov    0x78(%eax),%ecx
f010821d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108220:	89 d0                	mov    %edx,%eax
f0108222:	01 c0                	add    %eax,%eax
f0108224:	01 d0                	add    %edx,%eax
f0108226:	c1 e0 03             	shl    $0x3,%eax
f0108229:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010822c:	8b 45 10             	mov    0x10(%ebp),%eax
f010822f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108232:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108235:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010823a:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f010823c:	8b 45 08             	mov    0x8(%ebp),%eax
f010823f:	8b 48 78             	mov    0x78(%eax),%ecx
f0108242:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108245:	89 d0                	mov    %edx,%eax
f0108247:	01 c0                	add    %eax,%eax
f0108249:	01 d0                	add    %edx,%eax
f010824b:	c1 e0 03             	shl    $0x3,%eax
f010824e:	01 c8                	add    %ecx,%eax
f0108250:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108254:	8b 45 08             	mov    0x8(%ebp),%eax
f0108257:	8b 48 78             	mov    0x78(%eax),%ecx
f010825a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010825d:	89 d0                	mov    %edx,%eax
f010825f:	01 c0                	add    %eax,%eax
f0108261:	01 d0                	add    %edx,%eax
f0108263:	c1 e0 03             	shl    $0x3,%eax
f0108266:	01 c8                	add    %ecx,%eax
f0108268:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010826f:	90                   	nop
}
f0108270:	c9                   	leave  
f0108271:	c3                   	ret    

f0108272 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108272:	55                   	push   %ebp
f0108273:	89 e5                	mov    %esp,%ebp
f0108275:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108278:	8b 45 08             	mov    0x8(%ebp),%eax
f010827b:	8b 40 74             	mov    0x74(%eax),%eax
f010827e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108281:	77 16                	ja     f0108299 <env_page_ws_clear_entry+0x27>
f0108283:	68 c8 66 13 f0       	push   $0xf01366c8
f0108288:	68 5e 66 13 f0       	push   $0xf013665e
f010828d:	6a 32                	push   $0x32
f010828f:	68 74 66 13 f0       	push   $0xf0136674
f0108294:	e8 6c 7f ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108299:	8b 45 08             	mov    0x8(%ebp),%eax
f010829c:	8b 48 78             	mov    0x78(%eax),%ecx
f010829f:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082a2:	89 d0                	mov    %edx,%eax
f01082a4:	01 c0                	add    %eax,%eax
f01082a6:	01 d0                	add    %edx,%eax
f01082a8:	c1 e0 03             	shl    $0x3,%eax
f01082ab:	01 c8                	add    %ecx,%eax
f01082ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01082b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b6:	8b 48 78             	mov    0x78(%eax),%ecx
f01082b9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082bc:	89 d0                	mov    %edx,%eax
f01082be:	01 c0                	add    %eax,%eax
f01082c0:	01 d0                	add    %edx,%eax
f01082c2:	c1 e0 03             	shl    $0x3,%eax
f01082c5:	01 c8                	add    %ecx,%eax
f01082c7:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01082cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01082ce:	8b 48 78             	mov    0x78(%eax),%ecx
f01082d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082d4:	89 d0                	mov    %edx,%eax
f01082d6:	01 c0                	add    %eax,%eax
f01082d8:	01 d0                	add    %edx,%eax
f01082da:	c1 e0 03             	shl    $0x3,%eax
f01082dd:	01 c8                	add    %ecx,%eax
f01082df:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01082e6:	90                   	nop
f01082e7:	c9                   	leave  
f01082e8:	c3                   	ret    

f01082e9 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01082e9:	55                   	push   %ebp
f01082ea:	89 e5                	mov    %esp,%ebp
f01082ec:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01082ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01082f2:	8b 40 74             	mov    0x74(%eax),%eax
f01082f5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01082f8:	77 16                	ja     f0108310 <env_page_ws_get_virtual_address+0x27>
f01082fa:	68 c8 66 13 f0       	push   $0xf01366c8
f01082ff:	68 5e 66 13 f0       	push   $0xf013665e
f0108304:	6a 3a                	push   $0x3a
f0108306:	68 74 66 13 f0       	push   $0xf0136674
f010830b:	e8 f5 7e ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108310:	8b 45 08             	mov    0x8(%ebp),%eax
f0108313:	8b 48 78             	mov    0x78(%eax),%ecx
f0108316:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108319:	89 d0                	mov    %edx,%eax
f010831b:	01 c0                	add    %eax,%eax
f010831d:	01 d0                	add    %edx,%eax
f010831f:	c1 e0 03             	shl    $0x3,%eax
f0108322:	01 c8                	add    %ecx,%eax
f0108324:	8b 00                	mov    (%eax),%eax
f0108326:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108329:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010832c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108331:	c9                   	leave  
f0108332:	c3                   	ret    

f0108333 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108333:	55                   	push   %ebp
f0108334:	89 e5                	mov    %esp,%ebp
f0108336:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108339:	8b 45 08             	mov    0x8(%ebp),%eax
f010833c:	8b 40 74             	mov    0x74(%eax),%eax
f010833f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108342:	77 16                	ja     f010835a <env_page_ws_get_time_stamp+0x27>
f0108344:	68 c8 66 13 f0       	push   $0xf01366c8
f0108349:	68 5e 66 13 f0       	push   $0xf013665e
f010834e:	6a 40                	push   $0x40
f0108350:	68 74 66 13 f0       	push   $0xf0136674
f0108355:	e8 ab 7e ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f010835a:	8b 45 08             	mov    0x8(%ebp),%eax
f010835d:	8b 48 78             	mov    0x78(%eax),%ecx
f0108360:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108363:	89 d0                	mov    %edx,%eax
f0108365:	01 c0                	add    %eax,%eax
f0108367:	01 d0                	add    %edx,%eax
f0108369:	c1 e0 03             	shl    $0x3,%eax
f010836c:	01 c8                	add    %ecx,%eax
f010836e:	8b 40 08             	mov    0x8(%eax),%eax
}
f0108371:	c9                   	leave  
f0108372:	c3                   	ret    

f0108373 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108373:	55                   	push   %ebp
f0108374:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108376:	8b 45 08             	mov    0x8(%ebp),%eax
f0108379:	8b 48 78             	mov    0x78(%eax),%ecx
f010837c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010837f:	89 d0                	mov    %edx,%eax
f0108381:	01 c0                	add    %eax,%eax
f0108383:	01 d0                	add    %edx,%eax
f0108385:	c1 e0 03             	shl    $0x3,%eax
f0108388:	01 c8                	add    %ecx,%eax
f010838a:	8a 40 04             	mov    0x4(%eax),%al
f010838d:	0f b6 c0             	movzbl %al,%eax
}
f0108390:	5d                   	pop    %ebp
f0108391:	c3                   	ret    

f0108392 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108392:	55                   	push   %ebp
f0108393:	89 e5                	mov    %esp,%ebp
f0108395:	53                   	push   %ebx
f0108396:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108399:	83 ec 0c             	sub    $0xc,%esp
f010839c:	6a 02                	push   $0x2
f010839e:	e8 a6 5c 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f01083a3:	83 c4 10             	add    $0x10,%esp
f01083a6:	85 c0                	test   %eax,%eax
f01083a8:	0f 84 fe 00 00 00    	je     f01084ac <env_page_ws_print+0x11a>
	{
		int i = 0;
f01083ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01083b5:	83 ec 0c             	sub    $0xc,%esp
f01083b8:	68 00 67 13 f0       	push   $0xf0136700
f01083bd:	e8 4c 89 ff ff       	call   f0100d0e <cprintf>
f01083c2:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01083c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c8:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01083ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01083d1:	eb 2c                	jmp    f01083ff <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01083d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083d6:	8b 10                	mov    (%eax),%edx
f01083d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01083db:	8d 48 01             	lea    0x1(%eax),%ecx
f01083de:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01083e1:	83 ec 04             	sub    $0x4,%esp
f01083e4:	52                   	push   %edx
f01083e5:	50                   	push   %eax
f01083e6:	68 1a 67 13 f0       	push   $0xf013671a
f01083eb:	e8 1e 89 ff ff       	call   f0100d0e <cprintf>
f01083f0:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01083f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01083f6:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01083fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01083ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108403:	74 08                	je     f010840d <env_page_ws_print+0x7b>
f0108405:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108408:	8b 40 10             	mov    0x10(%eax),%eax
f010840b:	eb 05                	jmp    f0108412 <env_page_ws_print+0x80>
f010840d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108412:	8b 55 08             	mov    0x8(%ebp),%edx
f0108415:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010841b:	8b 45 08             	mov    0x8(%ebp),%eax
f010841e:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108424:	85 c0                	test   %eax,%eax
f0108426:	75 ab                	jne    f01083d3 <env_page_ws_print+0x41>
f0108428:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010842c:	75 a5                	jne    f01083d3 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f010842e:	83 ec 0c             	sub    $0xc,%esp
f0108431:	68 22 67 13 f0       	push   $0xf0136722
f0108436:	e8 d3 88 ff ff       	call   f0100d0e <cprintf>
f010843b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010843e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108441:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0108447:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010844a:	eb 2c                	jmp    f0108478 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010844c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010844f:	8b 10                	mov    (%eax),%edx
f0108451:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108454:	8d 48 01             	lea    0x1(%eax),%ecx
f0108457:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010845a:	83 ec 04             	sub    $0x4,%esp
f010845d:	52                   	push   %edx
f010845e:	50                   	push   %eax
f010845f:	68 1a 67 13 f0       	push   $0xf013671a
f0108464:	e8 a5 88 ff ff       	call   f0100d0e <cprintf>
f0108469:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010846c:	8b 45 08             	mov    0x8(%ebp),%eax
f010846f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108475:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108478:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010847c:	74 08                	je     f0108486 <env_page_ws_print+0xf4>
f010847e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108481:	8b 40 10             	mov    0x10(%eax),%eax
f0108484:	eb 05                	jmp    f010848b <env_page_ws_print+0xf9>
f0108486:	b8 00 00 00 00       	mov    $0x0,%eax
f010848b:	8b 55 08             	mov    0x8(%ebp),%edx
f010848e:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f0108494:	8b 45 08             	mov    0x8(%ebp),%eax
f0108497:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010849d:	85 c0                	test   %eax,%eax
f010849f:	75 ab                	jne    f010844c <env_page_ws_print+0xba>
f01084a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01084a5:	75 a5                	jne    f010844c <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01084a7:	e9 95 01 00 00       	jmp    f0108641 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01084ac:	83 ec 0c             	sub    $0xc,%esp
f01084af:	68 3d 67 13 f0       	push   $0xf013673d
f01084b4:	e8 55 88 ff ff       	call   f0100d0e <cprintf>
f01084b9:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01084bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01084c3:	e9 6a 01 00 00       	jmp    f0108632 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01084c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01084cb:	8b 48 78             	mov    0x78(%eax),%ecx
f01084ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01084d1:	89 d0                	mov    %edx,%eax
f01084d3:	01 c0                	add    %eax,%eax
f01084d5:	01 d0                	add    %edx,%eax
f01084d7:	c1 e0 03             	shl    $0x3,%eax
f01084da:	01 c8                	add    %ecx,%eax
f01084dc:	8a 40 04             	mov    0x4(%eax),%al
f01084df:	84 c0                	test   %al,%al
f01084e1:	74 43                	je     f0108526 <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01084e3:	83 ec 0c             	sub    $0xc,%esp
f01084e6:	68 47 67 13 f0       	push   $0xf0136747
f01084eb:	e8 1e 88 ff ff       	call   f0100d0e <cprintf>
f01084f0:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01084f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01084f6:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01084fc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01084ff:	75 10                	jne    f0108511 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f0108501:	83 ec 0c             	sub    $0xc,%esp
f0108504:	68 56 67 13 f0       	push   $0xf0136756
f0108509:	e8 00 88 ff ff       	call   f0100d0e <cprintf>
f010850e:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108511:	83 ec 0c             	sub    $0xc,%esp
f0108514:	68 5c 67 13 f0       	push   $0xf013675c
f0108519:	e8 f0 87 ff ff       	call   f0100d0e <cprintf>
f010851e:	83 c4 10             	add    $0x10,%esp
				continue;
f0108521:	e9 09 01 00 00       	jmp    f010862f <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108526:	8b 45 08             	mov    0x8(%ebp),%eax
f0108529:	8b 48 78             	mov    0x78(%eax),%ecx
f010852c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010852f:	89 d0                	mov    %edx,%eax
f0108531:	01 c0                	add    %eax,%eax
f0108533:	01 d0                	add    %edx,%eax
f0108535:	c1 e0 03             	shl    $0x3,%eax
f0108538:	01 c8                	add    %ecx,%eax
f010853a:	8b 00                	mov    (%eax),%eax
f010853c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f010853f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108542:	8b 48 78             	mov    0x78(%eax),%ecx
f0108545:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108548:	89 d0                	mov    %edx,%eax
f010854a:	01 c0                	add    %eax,%eax
f010854c:	01 d0                	add    %edx,%eax
f010854e:	c1 e0 03             	shl    $0x3,%eax
f0108551:	01 c8                	add    %ecx,%eax
f0108553:	8b 40 08             	mov    0x8(%eax),%eax
f0108556:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108559:	8b 45 08             	mov    0x8(%ebp),%eax
f010855c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010855f:	83 ec 08             	sub    $0x8,%esp
f0108562:	ff 75 e8             	pushl  -0x18(%ebp)
f0108565:	50                   	push   %eax
f0108566:	e8 fd f9 ff ff       	call   f0107f68 <pt_get_page_permissions>
f010856b:	83 c4 10             	add    $0x10,%esp
f010856e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108571:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108574:	83 e0 40             	and    $0x40,%eax
f0108577:	85 c0                	test   %eax,%eax
f0108579:	0f 95 c0             	setne  %al
f010857c:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010857f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108582:	83 e0 20             	and    $0x20,%eax
f0108585:	85 c0                	test   %eax,%eax
f0108587:	0f 95 c0             	setne  %al
f010858a:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010858d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108590:	25 00 02 00 00       	and    $0x200,%eax
f0108595:	85 c0                	test   %eax,%eax
f0108597:	0f 95 c0             	setne  %al
f010859a:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010859d:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a0:	8b 48 78             	mov    0x78(%eax),%ecx
f01085a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085a6:	89 d0                	mov    %edx,%eax
f01085a8:	01 c0                	add    %eax,%eax
f01085aa:	01 d0                	add    %edx,%eax
f01085ac:	c1 e0 03             	shl    $0x3,%eax
f01085af:	01 c8                	add    %ecx,%eax
f01085b1:	8b 00                	mov    (%eax),%eax
f01085b3:	83 ec 04             	sub    $0x4,%esp
f01085b6:	50                   	push   %eax
f01085b7:	ff 75 ec             	pushl  -0x14(%ebp)
f01085ba:	68 5e 67 13 f0       	push   $0xf013675e
f01085bf:	e8 4a 87 ff ff       	call   f0100d0e <cprintf>
f01085c4:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01085c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01085ca:	8b 48 78             	mov    0x78(%eax),%ecx
f01085cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085d0:	89 d0                	mov    %edx,%eax
f01085d2:	01 c0                	add    %eax,%eax
f01085d4:	01 d0                	add    %edx,%eax
f01085d6:	c1 e0 03             	shl    $0x3,%eax
f01085d9:	01 c8                	add    %ecx,%eax
f01085db:	8b 58 0c             	mov    0xc(%eax),%ebx
f01085de:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01085e2:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01085e6:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01085ea:	83 ec 08             	sub    $0x8,%esp
f01085ed:	53                   	push   %ebx
f01085ee:	ff 75 e4             	pushl  -0x1c(%ebp)
f01085f1:	51                   	push   %ecx
f01085f2:	52                   	push   %edx
f01085f3:	50                   	push   %eax
f01085f4:	68 70 67 13 f0       	push   $0xf0136770
f01085f9:	e8 10 87 ff ff       	call   f0100d0e <cprintf>
f01085fe:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108601:	8b 45 08             	mov    0x8(%ebp),%eax
f0108604:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010860a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010860d:	75 10                	jne    f010861f <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f010860f:	83 ec 0c             	sub    $0xc,%esp
f0108612:	68 b7 67 13 f0       	push   $0xf01367b7
f0108617:	e8 f2 86 ff ff       	call   f0100d0e <cprintf>
f010861c:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010861f:	83 ec 0c             	sub    $0xc,%esp
f0108622:	68 5c 67 13 f0       	push   $0xf013675c
f0108627:	e8 e2 86 ff ff       	call   f0100d0e <cprintf>
f010862c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f010862f:	ff 45 ec             	incl   -0x14(%ebp)
f0108632:	8b 45 08             	mov    0x8(%ebp),%eax
f0108635:	8b 40 74             	mov    0x74(%eax),%eax
f0108638:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010863b:	0f 87 87 fe ff ff    	ja     f01084c8 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108641:	90                   	nop
f0108642:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108645:	c9                   	leave  
f0108646:	c3                   	ret    

f0108647 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108647:	55                   	push   %ebp
f0108648:	89 e5                	mov    %esp,%ebp
f010864a:	53                   	push   %ebx
f010864b:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f010864e:	83 ec 0c             	sub    $0xc,%esp
f0108651:	68 bc 67 13 f0       	push   $0xf01367bc
f0108656:	e8 b3 86 ff ff       	call   f0100d0e <cprintf>
f010865b:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f010865e:	83 ec 0c             	sub    $0xc,%esp
f0108661:	68 f1 67 13 f0       	push   $0xf01367f1
f0108666:	e8 a3 86 ff ff       	call   f0100d0e <cprintf>
f010866b:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010866e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108675:	e9 10 01 00 00       	jmp    f010878a <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f010867a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010867d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108680:	89 d0                	mov    %edx,%eax
f0108682:	01 c0                	add    %eax,%eax
f0108684:	01 d0                	add    %edx,%eax
f0108686:	c1 e0 03             	shl    $0x3,%eax
f0108689:	01 c8                	add    %ecx,%eax
f010868b:	83 e8 80             	sub    $0xffffff80,%eax
f010868e:	8a 00                	mov    (%eax),%al
f0108690:	84 c0                	test   %al,%al
f0108692:	74 43                	je     f01086d7 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0108694:	83 ec 0c             	sub    $0xc,%esp
f0108697:	68 47 67 13 f0       	push   $0xf0136747
f010869c:	e8 6d 86 ff ff       	call   f0100d0e <cprintf>
f01086a1:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01086a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01086a7:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01086ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01086b0:	75 10                	jne    f01086c2 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01086b2:	83 ec 0c             	sub    $0xc,%esp
f01086b5:	68 56 67 13 f0       	push   $0xf0136756
f01086ba:	e8 4f 86 ff ff       	call   f0100d0e <cprintf>
f01086bf:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01086c2:	83 ec 0c             	sub    $0xc,%esp
f01086c5:	68 5c 67 13 f0       	push   $0xf013675c
f01086ca:	e8 3f 86 ff ff       	call   f0100d0e <cprintf>
f01086cf:	83 c4 10             	add    $0x10,%esp
			continue;
f01086d2:	e9 b0 00 00 00       	jmp    f0108787 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01086d7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086dd:	89 d0                	mov    %edx,%eax
f01086df:	01 c0                	add    %eax,%eax
f01086e1:	01 d0                	add    %edx,%eax
f01086e3:	c1 e0 03             	shl    $0x3,%eax
f01086e6:	01 c8                	add    %ecx,%eax
f01086e8:	83 c0 7c             	add    $0x7c,%eax
f01086eb:	8b 00                	mov    (%eax),%eax
f01086ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01086f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086f6:	89 d0                	mov    %edx,%eax
f01086f8:	01 c0                	add    %eax,%eax
f01086fa:	01 d0                	add    %edx,%eax
f01086fc:	c1 e0 03             	shl    $0x3,%eax
f01086ff:	01 c8                	add    %ecx,%eax
f0108701:	83 c0 7c             	add    $0x7c,%eax
f0108704:	8b 00                	mov    (%eax),%eax
f0108706:	83 ec 04             	sub    $0x4,%esp
f0108709:	50                   	push   %eax
f010870a:	ff 75 f4             	pushl  -0xc(%ebp)
f010870d:	68 fc 67 13 f0       	push   $0xf01367fc
f0108712:	e8 f7 85 ff ff       	call   f0100d0e <cprintf>
f0108717:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f010871a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010871d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108720:	89 d0                	mov    %edx,%eax
f0108722:	01 c0                	add    %eax,%eax
f0108724:	01 d0                	add    %edx,%eax
f0108726:	c1 e0 03             	shl    $0x3,%eax
f0108729:	01 c8                	add    %ecx,%eax
f010872b:	05 84 00 00 00       	add    $0x84,%eax
f0108730:	8b 18                	mov    (%eax),%ebx
f0108732:	8b 45 08             	mov    0x8(%ebp),%eax
f0108735:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108738:	83 ec 08             	sub    $0x8,%esp
f010873b:	ff 75 f0             	pushl  -0x10(%ebp)
f010873e:	50                   	push   %eax
f010873f:	e8 43 f9 ff ff       	call   f0108087 <pd_is_table_used>
f0108744:	83 c4 10             	add    $0x10,%esp
f0108747:	83 ec 04             	sub    $0x4,%esp
f010874a:	53                   	push   %ebx
f010874b:	50                   	push   %eax
f010874c:	68 14 68 13 f0       	push   $0xf0136814
f0108751:	e8 b8 85 ff ff       	call   f0100d0e <cprintf>
f0108756:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108759:	8b 45 08             	mov    0x8(%ebp),%eax
f010875c:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108762:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108765:	75 10                	jne    f0108777 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f0108767:	83 ec 0c             	sub    $0xc,%esp
f010876a:	68 b7 67 13 f0       	push   $0xf01367b7
f010876f:	e8 9a 85 ff ff       	call   f0100d0e <cprintf>
f0108774:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108777:	83 ec 0c             	sub    $0xc,%esp
f010877a:	68 5c 67 13 f0       	push   $0xf013675c
f010877f:	e8 8a 85 ff ff       	call   f0100d0e <cprintf>
f0108784:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108787:	ff 45 f4             	incl   -0xc(%ebp)
f010878a:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010878e:	0f 86 e6 fe ff ff    	jbe    f010867a <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108794:	90                   	nop
f0108795:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108798:	c9                   	leave  
f0108799:	c3                   	ret    

f010879a <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f010879a:	55                   	push   %ebp
f010879b:	89 e5                	mov    %esp,%ebp
f010879d:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01087a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01087a7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01087ae:	eb 20                	jmp    f01087d0 <env_table_ws_get_size+0x36>
f01087b0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087b3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01087b6:	89 d0                	mov    %edx,%eax
f01087b8:	01 c0                	add    %eax,%eax
f01087ba:	01 d0                	add    %edx,%eax
f01087bc:	c1 e0 03             	shl    $0x3,%eax
f01087bf:	01 c8                	add    %ecx,%eax
f01087c1:	83 e8 80             	sub    $0xffffff80,%eax
f01087c4:	8a 00                	mov    (%eax),%al
f01087c6:	84 c0                	test   %al,%al
f01087c8:	75 03                	jne    f01087cd <env_table_ws_get_size+0x33>
f01087ca:	ff 45 f8             	incl   -0x8(%ebp)
f01087cd:	ff 45 fc             	incl   -0x4(%ebp)
f01087d0:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01087d4:	7e da                	jle    f01087b0 <env_table_ws_get_size+0x16>
	return counter;
f01087d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01087d9:	c9                   	leave  
f01087da:	c3                   	ret    

f01087db <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01087db:	55                   	push   %ebp
f01087dc:	89 e5                	mov    %esp,%ebp
f01087de:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01087e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01087e8:	eb 4c                	jmp    f0108836 <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01087ea:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087f0:	89 d0                	mov    %edx,%eax
f01087f2:	01 c0                	add    %eax,%eax
f01087f4:	01 d0                	add    %edx,%eax
f01087f6:	c1 e0 03             	shl    $0x3,%eax
f01087f9:	01 c8                	add    %ecx,%eax
f01087fb:	83 c0 7c             	add    $0x7c,%eax
f01087fe:	8b 00                	mov    (%eax),%eax
f0108800:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108803:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108806:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010880b:	89 c2                	mov    %eax,%edx
f010880d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108810:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108816:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010881b:	39 c2                	cmp    %eax,%edx
f010881d:	75 14                	jne    f0108833 <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f010881f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108822:	83 ec 08             	sub    $0x8,%esp
f0108825:	50                   	push   %eax
f0108826:	ff 75 08             	pushl  0x8(%ebp)
f0108829:	e8 b8 00 00 00       	call   f01088e6 <env_table_ws_clear_entry>
f010882e:	83 c4 10             	add    $0x10,%esp
			break;
f0108831:	eb 09                	jmp    f010883c <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108833:	ff 45 f4             	incl   -0xc(%ebp)
f0108836:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010883a:	7e ae                	jle    f01087ea <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f010883c:	90                   	nop
f010883d:	c9                   	leave  
f010883e:	c3                   	ret    

f010883f <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f010883f:	55                   	push   %ebp
f0108840:	89 e5                	mov    %esp,%ebp
f0108842:	53                   	push   %ebx
f0108843:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108846:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010884a:	76 19                	jbe    f0108865 <env_table_ws_set_entry+0x26>
f010884c:	68 38 68 13 f0       	push   $0xf0136838
f0108851:	68 5e 66 13 f0       	push   $0xf013665e
f0108856:	68 b6 00 00 00       	push   $0xb6
f010885b:	68 74 66 13 f0       	push   $0xf0136674
f0108860:	e8 a0 79 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108865:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010886c:	76 19                	jbe    f0108887 <env_table_ws_set_entry+0x48>
f010886e:	68 94 66 13 f0       	push   $0xf0136694
f0108873:	68 5e 66 13 f0       	push   $0xf013665e
f0108878:	68 b7 00 00 00       	push   $0xb7
f010887d:	68 74 66 13 f0       	push   $0xf0136674
f0108882:	e8 7e 79 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108887:	8b 45 10             	mov    0x10(%ebp),%eax
f010888a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010888d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108890:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108895:	89 c1                	mov    %eax,%ecx
f0108897:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010889a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010889d:	89 d0                	mov    %edx,%eax
f010889f:	01 c0                	add    %eax,%eax
f01088a1:	01 d0                	add    %edx,%eax
f01088a3:	c1 e0 03             	shl    $0x3,%eax
f01088a6:	01 d8                	add    %ebx,%eax
f01088a8:	83 c0 7c             	add    $0x7c,%eax
f01088ab:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01088ad:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088b0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088b3:	89 d0                	mov    %edx,%eax
f01088b5:	01 c0                	add    %eax,%eax
f01088b7:	01 d0                	add    %edx,%eax
f01088b9:	c1 e0 03             	shl    $0x3,%eax
f01088bc:	01 c8                	add    %ecx,%eax
f01088be:	83 e8 80             	sub    $0xffffff80,%eax
f01088c1:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01088c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088c7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088ca:	89 d0                	mov    %edx,%eax
f01088cc:	01 c0                	add    %eax,%eax
f01088ce:	01 d0                	add    %edx,%eax
f01088d0:	c1 e0 03             	shl    $0x3,%eax
f01088d3:	01 c8                	add    %ecx,%eax
f01088d5:	05 84 00 00 00       	add    $0x84,%eax
f01088da:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01088e0:	90                   	nop
}
f01088e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01088e4:	c9                   	leave  
f01088e5:	c3                   	ret    

f01088e6 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01088e6:	55                   	push   %ebp
f01088e7:	89 e5                	mov    %esp,%ebp
f01088e9:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01088ec:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01088f0:	76 19                	jbe    f010890b <env_table_ws_clear_entry+0x25>
f01088f2:	68 38 68 13 f0       	push   $0xf0136838
f01088f7:	68 5e 66 13 f0       	push   $0xf013665e
f01088fc:	68 c2 00 00 00       	push   $0xc2
f0108901:	68 74 66 13 f0       	push   $0xf0136674
f0108906:	e8 fa 78 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f010890b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010890e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108911:	89 d0                	mov    %edx,%eax
f0108913:	01 c0                	add    %eax,%eax
f0108915:	01 d0                	add    %edx,%eax
f0108917:	c1 e0 03             	shl    $0x3,%eax
f010891a:	01 c8                	add    %ecx,%eax
f010891c:	83 c0 7c             	add    $0x7c,%eax
f010891f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108925:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108928:	8b 55 0c             	mov    0xc(%ebp),%edx
f010892b:	89 d0                	mov    %edx,%eax
f010892d:	01 c0                	add    %eax,%eax
f010892f:	01 d0                	add    %edx,%eax
f0108931:	c1 e0 03             	shl    $0x3,%eax
f0108934:	01 c8                	add    %ecx,%eax
f0108936:	83 e8 80             	sub    $0xffffff80,%eax
f0108939:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f010893c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010893f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108942:	89 d0                	mov    %edx,%eax
f0108944:	01 c0                	add    %eax,%eax
f0108946:	01 d0                	add    %edx,%eax
f0108948:	c1 e0 03             	shl    $0x3,%eax
f010894b:	01 c8                	add    %ecx,%eax
f010894d:	05 84 00 00 00       	add    $0x84,%eax
f0108952:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108958:	90                   	nop
f0108959:	c9                   	leave  
f010895a:	c3                   	ret    

f010895b <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f010895b:	55                   	push   %ebp
f010895c:	89 e5                	mov    %esp,%ebp
f010895e:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108961:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108965:	76 19                	jbe    f0108980 <env_table_ws_get_virtual_address+0x25>
f0108967:	68 38 68 13 f0       	push   $0xf0136838
f010896c:	68 5e 66 13 f0       	push   $0xf013665e
f0108971:	68 ca 00 00 00       	push   $0xca
f0108976:	68 74 66 13 f0       	push   $0xf0136674
f010897b:	e8 85 78 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108980:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108983:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108986:	89 d0                	mov    %edx,%eax
f0108988:	01 c0                	add    %eax,%eax
f010898a:	01 d0                	add    %edx,%eax
f010898c:	c1 e0 03             	shl    $0x3,%eax
f010898f:	01 c8                	add    %ecx,%eax
f0108991:	83 c0 7c             	add    $0x7c,%eax
f0108994:	8b 00                	mov    (%eax),%eax
f0108996:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108999:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010899c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f01089a1:	c9                   	leave  
f01089a2:	c3                   	ret    

f01089a3 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01089a3:	55                   	push   %ebp
f01089a4:	89 e5                	mov    %esp,%ebp
f01089a6:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01089a9:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01089ad:	76 19                	jbe    f01089c8 <env_table_ws_get_time_stamp+0x25>
f01089af:	68 38 68 13 f0       	push   $0xf0136838
f01089b4:	68 5e 66 13 f0       	push   $0xf013665e
f01089b9:	68 d1 00 00 00       	push   $0xd1
f01089be:	68 74 66 13 f0       	push   $0xf0136674
f01089c3:	e8 3d 78 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01089c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089cb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089ce:	89 d0                	mov    %edx,%eax
f01089d0:	01 c0                	add    %eax,%eax
f01089d2:	01 d0                	add    %edx,%eax
f01089d4:	c1 e0 03             	shl    $0x3,%eax
f01089d7:	01 c8                	add    %ecx,%eax
f01089d9:	05 84 00 00 00       	add    $0x84,%eax
f01089de:	8b 00                	mov    (%eax),%eax
}
f01089e0:	c9                   	leave  
f01089e1:	c3                   	ret    

f01089e2 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01089e2:	55                   	push   %ebp
f01089e3:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01089e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089e8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089eb:	89 d0                	mov    %edx,%eax
f01089ed:	01 c0                	add    %eax,%eax
f01089ef:	01 d0                	add    %edx,%eax
f01089f1:	c1 e0 03             	shl    $0x3,%eax
f01089f4:	01 c8                	add    %ecx,%eax
f01089f6:	83 e8 80             	sub    $0xffffff80,%eax
f01089f9:	8a 00                	mov    (%eax),%al
f01089fb:	0f b6 c0             	movzbl %al,%eax
}
f01089fe:	5d                   	pop    %ebp
f01089ff:	c3                   	ret    

f0108a00 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108a00:	55                   	push   %ebp
f0108a01:	89 e5                	mov    %esp,%ebp
f0108a03:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0108a06:	83 ec 04             	sub    $0x4,%esp
f0108a09:	68 6c 68 13 f0       	push   $0xf013686c
f0108a0e:	68 e5 00 00 00       	push   $0xe5
f0108a13:	68 74 66 13 f0       	push   $0xf0136674
f0108a18:	e8 e8 77 ff ff       	call   f0100205 <_panic>

f0108a1d <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108a1d:	55                   	push   %ebp
f0108a1e:	89 e5                	mov    %esp,%ebp
f0108a20:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0108a23:	83 ec 04             	sub    $0x4,%esp
f0108a26:	68 98 68 13 f0       	push   $0xf0136898
f0108a2b:	68 ec 00 00 00       	push   $0xec
f0108a30:	68 74 66 13 f0       	push   $0xf0136674
f0108a35:	e8 cb 77 ff ff       	call   f0100205 <_panic>

f0108a3a <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108a3a:	55                   	push   %ebp
f0108a3b:	89 e5                	mov    %esp,%ebp
f0108a3d:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108a40:	83 ec 04             	sub    $0x4,%esp
f0108a43:	68 c8 68 13 f0       	push   $0xf01368c8
f0108a48:	68 f3 00 00 00       	push   $0xf3
f0108a4d:	68 74 66 13 f0       	push   $0xf0136674
f0108a52:	e8 ae 77 ff ff       	call   f0100205 <_panic>

f0108a57 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108a57:	55                   	push   %ebp
f0108a58:	89 e5                	mov    %esp,%ebp
f0108a5a:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f0108a5d:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a60:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f0108a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a66:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108a69:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a6c:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108a71:	85 c0                	test   %eax,%eax
f0108a73:	74 11                	je     f0108a86 <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f0108a75:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a78:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108a7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a7e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a83:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f0108a86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a89:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108a8e:	85 c0                	test   %eax,%eax
f0108a90:	74 11                	je     f0108aa3 <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f0108a92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a95:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108a98:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108a9b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108aa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f0108aa3:	8b 45 14             	mov    0x14(%ebp),%eax
f0108aa6:	c1 e0 0c             	shl    $0xc,%eax
f0108aa9:	89 c2                	mov    %eax,%edx
f0108aab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108aae:	01 d0                	add    %edx,%eax
f0108ab0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ab6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108ab9:	eb 4b                	jmp    f0108b06 <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108abb:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108ac2:	83 ec 04             	sub    $0x4,%esp
f0108ac5:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ac8:	50                   	push   %eax
f0108ac9:	ff 75 ec             	pushl  -0x14(%ebp)
f0108acc:	ff 75 08             	pushl  0x8(%ebp)
f0108acf:	e8 dd df ff ff       	call   f0106ab1 <get_page_table>
f0108ad4:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108ad7:	83 ec 04             	sub    $0x4,%esp
f0108ada:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108add:	50                   	push   %eax
f0108ade:	ff 75 ec             	pushl  -0x14(%ebp)
f0108ae1:	ff 75 08             	pushl  0x8(%ebp)
f0108ae4:	e8 1d e3 ff ff       	call   f0106e06 <get_frame_info>
f0108ae9:	83 c4 10             	add    $0x10,%esp
f0108aec:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108aef:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108af3:	74 0a                	je     f0108aff <cut_paste_pages+0xa8>
			return -1;
f0108af5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108afa:	e9 d4 00 00 00       	jmp    f0108bd3 <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108aff:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108b06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108b09:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108b0c:	72 ad                	jb     f0108abb <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b11:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108b14:	e9 a9 00 00 00       	jmp    f0108bc2 <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108b19:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108b20:	83 ec 04             	sub    $0x4,%esp
f0108b23:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108b26:	50                   	push   %eax
f0108b27:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b2a:	ff 75 08             	pushl  0x8(%ebp)
f0108b2d:	e8 7f df ff ff       	call   f0106ab1 <get_page_table>
f0108b32:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f0108b35:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108b38:	85 c0                	test   %eax,%eax
f0108b3a:	75 14                	jne    f0108b50 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108b3c:	83 ec 08             	sub    $0x8,%esp
f0108b3f:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b42:	ff 75 08             	pushl  0x8(%ebp)
f0108b45:	e8 bd e0 ff ff       	call   f0106c07 <create_page_table>
f0108b4a:	83 c4 10             	add    $0x10,%esp
f0108b4d:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108b50:	83 ec 04             	sub    $0x4,%esp
f0108b53:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108b56:	50                   	push   %eax
f0108b57:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b5a:	ff 75 08             	pushl  0x8(%ebp)
f0108b5d:	e8 a4 e2 ff ff       	call   f0106e06 <get_frame_info>
f0108b62:	83 c4 10             	add    $0x10,%esp
f0108b65:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108b68:	83 ec 08             	sub    $0x8,%esp
f0108b6b:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b6e:	ff 75 08             	pushl  0x8(%ebp)
f0108b71:	e8 f2 f3 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0108b76:	83 c4 10             	add    $0x10,%esp
f0108b79:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108b7c:	83 ec 08             	sub    $0x8,%esp
f0108b7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b82:	ff 75 08             	pushl  0x8(%ebp)
f0108b85:	e8 ec e2 ff ff       	call   f0106e76 <unmap_frame>
f0108b8a:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108b8d:	83 ec 0c             	sub    $0xc,%esp
f0108b90:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108b93:	50                   	push   %eax
f0108b94:	e8 59 dd ff ff       	call   f01068f2 <allocate_frame>
f0108b99:	83 c4 10             	add    $0x10,%esp
f0108b9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108b9f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108ba2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ba5:	ff 75 e8             	pushl  -0x18(%ebp)
f0108ba8:	50                   	push   %eax
f0108ba9:	ff 75 08             	pushl  0x8(%ebp)
f0108bac:	e8 90 e1 ff ff       	call   f0106d41 <map_frame>
f0108bb1:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f0108bb4:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108bbb:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108bc2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108bc5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108bc8:	0f 82 4b ff ff ff    	jb     f0108b19 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108bce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108bd3:	c9                   	leave  
f0108bd4:	c3                   	ret    

f0108bd5 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108bd5:	55                   	push   %ebp
f0108bd6:	89 e5                	mov    %esp,%ebp
f0108bd8:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108bdb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f0108be2:	8b 45 10             	mov    0x10(%ebp),%eax
f0108be5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f0108be8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108beb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108bee:	8b 45 10             	mov    0x10(%ebp),%eax
f0108bf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108bf4:	e9 d1 00 00 00       	jmp    f0108cca <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108bf9:	83 ec 04             	sub    $0x4,%esp
f0108bfc:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108bff:	50                   	push   %eax
f0108c00:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c03:	ff 75 08             	pushl  0x8(%ebp)
f0108c06:	e8 a6 de ff ff       	call   f0106ab1 <get_page_table>
f0108c0b:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108c0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c11:	85 c0                	test   %eax,%eax
f0108c13:	75 14                	jne    f0108c29 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f0108c15:	83 ec 08             	sub    $0x8,%esp
f0108c18:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c1b:	ff 75 08             	pushl  0x8(%ebp)
f0108c1e:	e8 e4 df ff ff       	call   f0106c07 <create_page_table>
f0108c23:	83 c4 10             	add    $0x10,%esp
f0108c26:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108c29:	83 ec 04             	sub    $0x4,%esp
f0108c2c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108c2f:	50                   	push   %eax
f0108c30:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c33:	ff 75 08             	pushl  0x8(%ebp)
f0108c36:	e8 cb e1 ff ff       	call   f0106e06 <get_frame_info>
f0108c3b:	83 c4 10             	add    $0x10,%esp
f0108c3e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f0108c41:	83 ec 08             	sub    $0x8,%esp
f0108c44:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c47:	ff 75 08             	pushl  0x8(%ebp)
f0108c4a:	e8 19 f3 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0108c4f:	83 c4 10             	add    $0x10,%esp
f0108c52:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f0108c55:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c58:	85 c0                	test   %eax,%eax
f0108c5a:	74 14                	je     f0108c70 <copy_paste_chunk+0x9b>
f0108c5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c5f:	83 e0 02             	and    $0x2,%eax
f0108c62:	85 c0                	test   %eax,%eax
f0108c64:	75 0a                	jne    f0108c70 <copy_paste_chunk+0x9b>
			return -1;
f0108c66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108c6b:	e9 a7 00 00 00       	jmp    f0108d17 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108c70:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c73:	85 c0                	test   %eax,%eax
f0108c75:	75 45                	jne    f0108cbc <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108c77:	83 ec 08             	sub    $0x8,%esp
f0108c7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0108c7d:	ff 75 08             	pushl  0x8(%ebp)
f0108c80:	e8 e3 f2 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0108c85:	83 c4 10             	add    $0x10,%esp
f0108c88:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108c8b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c8e:	83 e0 04             	and    $0x4,%eax
f0108c91:	83 c8 02             	or     $0x2,%eax
f0108c94:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108c97:	83 ec 0c             	sub    $0xc,%esp
f0108c9a:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108c9d:	50                   	push   %eax
f0108c9e:	e8 4f dc ff ff       	call   f01068f2 <allocate_frame>
f0108ca3:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f0108ca6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108ca9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108cac:	52                   	push   %edx
f0108cad:	ff 75 f0             	pushl  -0x10(%ebp)
f0108cb0:	50                   	push   %eax
f0108cb1:	ff 75 08             	pushl  0x8(%ebp)
f0108cb4:	e8 88 e0 ff ff       	call   f0106d41 <map_frame>
f0108cb9:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108cbc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108cc3:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108cca:	8b 55 10             	mov    0x10(%ebp),%edx
f0108ccd:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cd0:	01 d0                	add    %edx,%eax
f0108cd2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108cd5:	0f 87 1e ff ff ff    	ja     f0108bf9 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108cdb:	8b 45 10             	mov    0x10(%ebp),%eax
f0108cde:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f0108ce1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ce4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108ced:	eb 16                	jmp    f0108d05 <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108cef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108cf2:	8b 10                	mov    (%eax),%edx
f0108cf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108cf7:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108cf9:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108cfd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108d01:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f0108d05:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d08:	8b 45 14             	mov    0x14(%ebp),%eax
f0108d0b:	01 d0                	add    %edx,%eax
f0108d0d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108d10:	77 dd                	ja     f0108cef <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108d12:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108d17:	c9                   	leave  
f0108d18:	c3                   	ret    

f0108d19 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108d19:	55                   	push   %ebp
f0108d1a:	89 e5                	mov    %esp,%ebp
f0108d1c:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108d1f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108d26:	8b 45 10             	mov    0x10(%ebp),%eax
f0108d29:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108d2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d2f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d34:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108d37:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108d3e:	8b 55 10             	mov    0x10(%ebp),%edx
f0108d41:	8b 45 14             	mov    0x14(%ebp),%eax
f0108d44:	01 c2                	add    %eax,%edx
f0108d46:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d49:	01 d0                	add    %edx,%eax
f0108d4b:	48                   	dec    %eax
f0108d4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108d4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d52:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d57:	f7 75 e8             	divl   -0x18(%ebp)
f0108d5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d5d:	29 d0                	sub    %edx,%eax
f0108d5f:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108d62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d65:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108d68:	e9 ac 00 00 00       	jmp    f0108e19 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108d6d:	83 ec 04             	sub    $0x4,%esp
f0108d70:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108d73:	50                   	push   %eax
f0108d74:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d77:	ff 75 08             	pushl  0x8(%ebp)
f0108d7a:	e8 32 dd ff ff       	call   f0106ab1 <get_page_table>
f0108d7f:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108d82:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d85:	85 c0                	test   %eax,%eax
f0108d87:	75 14                	jne    f0108d9d <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108d89:	83 ec 08             	sub    $0x8,%esp
f0108d8c:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d8f:	ff 75 08             	pushl  0x8(%ebp)
f0108d92:	e8 70 de ff ff       	call   f0106c07 <create_page_table>
f0108d97:	83 c4 10             	add    $0x10,%esp
f0108d9a:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108d9d:	83 ec 04             	sub    $0x4,%esp
f0108da0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108da3:	50                   	push   %eax
f0108da4:	ff 75 f4             	pushl  -0xc(%ebp)
f0108da7:	ff 75 08             	pushl  0x8(%ebp)
f0108daa:	e8 57 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108daf:	83 c4 10             	add    $0x10,%esp
f0108db2:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108db5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108db9:	74 07                	je     f0108dc2 <share_chunk+0xa9>
           return -1;
f0108dbb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108dc0:	eb 68                	jmp    f0108e2a <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108dc2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108dc9:	83 ec 04             	sub    $0x4,%esp
f0108dcc:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108dcf:	50                   	push   %eax
f0108dd0:	ff 75 0c             	pushl  0xc(%ebp)
f0108dd3:	ff 75 08             	pushl  0x8(%ebp)
f0108dd6:	e8 d6 dc ff ff       	call   f0106ab1 <get_page_table>
f0108ddb:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108dde:	83 ec 04             	sub    $0x4,%esp
f0108de1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108de4:	50                   	push   %eax
f0108de5:	ff 75 0c             	pushl  0xc(%ebp)
f0108de8:	ff 75 08             	pushl  0x8(%ebp)
f0108deb:	e8 16 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108df0:	83 c4 10             	add    $0x10,%esp
f0108df3:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108df6:	8b 45 18             	mov    0x18(%ebp),%eax
f0108df9:	50                   	push   %eax
f0108dfa:	ff 75 f4             	pushl  -0xc(%ebp)
f0108dfd:	ff 75 d8             	pushl  -0x28(%ebp)
f0108e00:	ff 75 08             	pushl  0x8(%ebp)
f0108e03:	e8 39 df ff ff       	call   f0106d41 <map_frame>
f0108e08:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108e0b:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108e12:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e1c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108e1f:	0f 82 48 ff ff ff    	jb     f0108d6d <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108e25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108e2a:	c9                   	leave  
f0108e2b:	c3                   	ret    

f0108e2c <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108e2c:	55                   	push   %ebp
f0108e2d:	89 e5                	mov    %esp,%ebp
f0108e2f:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108e32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108e39:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e3c:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e3f:	01 d0                	add    %edx,%eax
f0108e41:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108e44:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108e4b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108e52:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108e59:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108e60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e63:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108e66:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108e69:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108e71:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108e78:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108e7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e7e:	01 d0                	add    %edx,%eax
f0108e80:	48                   	dec    %eax
f0108e81:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108e84:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e87:	ba 00 00 00 00       	mov    $0x0,%edx
f0108e8c:	f7 75 dc             	divl   -0x24(%ebp)
f0108e8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e92:	29 d0                	sub    %edx,%eax
f0108e94:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108e97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108e9d:	e9 9d 00 00 00       	jmp    f0108f3f <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ea5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108ea8:	83 ec 04             	sub    $0x4,%esp
f0108eab:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108eae:	50                   	push   %eax
f0108eaf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108eb2:	ff 75 08             	pushl  0x8(%ebp)
f0108eb5:	e8 f7 db ff ff       	call   f0106ab1 <get_page_table>
f0108eba:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108ebd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108ec0:	85 c0                	test   %eax,%eax
f0108ec2:	75 14                	jne    f0108ed8 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108ec4:	83 ec 08             	sub    $0x8,%esp
f0108ec7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108eca:	ff 75 08             	pushl  0x8(%ebp)
f0108ecd:	e8 35 dd ff ff       	call   f0106c07 <create_page_table>
f0108ed2:	83 c4 10             	add    $0x10,%esp
f0108ed5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108ed8:	83 ec 04             	sub    $0x4,%esp
f0108edb:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ede:	50                   	push   %eax
f0108edf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ee2:	ff 75 08             	pushl  0x8(%ebp)
f0108ee5:	e8 1c df ff ff       	call   f0106e06 <get_frame_info>
f0108eea:	83 c4 10             	add    $0x10,%esp
f0108eed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108ef0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108ef3:	85 c0                	test   %eax,%eax
f0108ef5:	74 07                	je     f0108efe <allocate_chunk+0xd2>
		{
			return -1;
f0108ef7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108efc:	eb 52                	jmp    f0108f50 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108efe:	83 ec 0c             	sub    $0xc,%esp
f0108f01:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108f04:	50                   	push   %eax
f0108f05:	e8 e8 d9 ff ff       	call   f01068f2 <allocate_frame>
f0108f0a:	83 c4 10             	add    $0x10,%esp
f0108f0d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108f10:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108f14:	74 22                	je     f0108f38 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108f16:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f19:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108f1c:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108f1f:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f25:	52                   	push   %edx
f0108f26:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108f29:	50                   	push   %eax
f0108f2a:	ff 75 08             	pushl  0x8(%ebp)
f0108f2d:	e8 0f de ff ff       	call   f0106d41 <map_frame>
f0108f32:	83 c4 10             	add    $0x10,%esp
f0108f35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108f38:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f42:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108f45:	0f 82 57 ff ff ff    	jb     f0108ea2 <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108f4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108f50:	c9                   	leave  
f0108f51:	c3                   	ret    

f0108f52 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108f52:	55                   	push   %ebp
f0108f53:	89 e5                	mov    %esp,%ebp
f0108f55:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108f58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108f5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108f61:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108f66:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f72:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108f7a:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108f81:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108f87:	01 d0                	add    %edx,%eax
f0108f89:	48                   	dec    %eax
f0108f8a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108f8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108f90:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f95:	f7 75 e0             	divl   -0x20(%ebp)
f0108f98:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108f9b:	29 d0                	sub    %edx,%eax
f0108f9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108fa0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108fa3:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108fa6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108fa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
		{
			if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108fb3:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108fb8:	85 c0                	test   %eax,%eax
f0108fba:	75 37                	jne    f0108ff3 <calculate_allocated_space+0xa1>
			{
				uint32 *ptr_page_table = NULL;
f0108fbc:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108fc3:	83 ec 04             	sub    $0x4,%esp
f0108fc6:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108fc9:	50                   	push   %eax
f0108fca:	ff 75 f4             	pushl  -0xc(%ebp)
f0108fcd:	ff 75 08             	pushl  0x8(%ebp)
f0108fd0:	e8 dc da ff ff       	call   f0106ab1 <get_page_table>
f0108fd5:	83 c4 10             	add    $0x10,%esp
				if(ptr_page_table != NULL)
f0108fd8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108fdb:	85 c0                	test   %eax,%eax
f0108fdd:	74 14                	je     f0108ff3 <calculate_allocated_space+0xa1>
				{
					(*num_tables)++;
f0108fdf:	8b 45 14             	mov    0x14(%ebp),%eax
f0108fe2:	8b 00                	mov    (%eax),%eax
f0108fe4:	8d 50 01             	lea    0x1(%eax),%edx
f0108fe7:	8b 45 14             	mov    0x14(%ebp),%eax
f0108fea:	89 10                	mov    %edx,(%eax)
					check = 1;
f0108fec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				}
			}
			if(check == 1)
f0108ff3:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108ff7:	75 2d                	jne    f0109026 <calculate_allocated_space+0xd4>
			{
				uint32 *ptr_page = NULL;
f0108ff9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0109000:	83 ec 04             	sub    $0x4,%esp
f0109003:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0109006:	50                   	push   %eax
f0109007:	ff 75 f0             	pushl  -0x10(%ebp)
f010900a:	ff 75 08             	pushl  0x8(%ebp)
f010900d:	e8 f4 dd ff ff       	call   f0106e06 <get_frame_info>
f0109012:	83 c4 10             	add    $0x10,%esp
f0109015:	85 c0                	test   %eax,%eax
f0109017:	74 0d                	je     f0109026 <calculate_allocated_space+0xd4>
					(*num_pages)++;
f0109019:	8b 45 18             	mov    0x18(%ebp),%eax
f010901c:	8b 00                	mov    (%eax),%eax
f010901e:	8d 50 01             	lea    0x1(%eax),%edx
f0109021:	8b 45 18             	mov    0x18(%ebp),%eax
f0109024:	89 10                	mov    %edx,(%eax)
			}
			start_address += PAGE_SIZE;
f0109026:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			start_address_pt = start_address;
f010902d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109030:	89 45 f4             	mov    %eax,-0xc(%ebp)
		} while (start_address < sva+size);
f0109033:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109036:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109039:	01 d0                	add    %edx,%eax
f010903b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010903e:	0f 87 6c ff ff ff    	ja     f0108fb0 <calculate_allocated_space+0x5e>
}
f0109044:	90                   	nop
f0109045:	c9                   	leave  
f0109046:	c3                   	ret    

f0109047 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109047:	55                   	push   %ebp
f0109048:	89 e5                	mov    %esp,%ebp
f010904a:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f010904d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0109054:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f010905b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010905e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109061:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109064:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109069:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f010906c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010906f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0109072:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109075:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010907a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f010907d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109080:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0109085:	85 c0                	test   %eax,%eax
f0109087:	75 26                	jne    f01090af <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0109089:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0109090:	83 ec 04             	sub    $0x4,%esp
f0109093:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0109096:	50                   	push   %eax
f0109097:	ff 75 ec             	pushl  -0x14(%ebp)
f010909a:	ff 75 08             	pushl  0x8(%ebp)
f010909d:	e8 0f da ff ff       	call   f0106ab1 <get_page_table>
f01090a2:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f01090a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01090a8:	85 c0                	test   %eax,%eax
f01090aa:	75 03                	jne    f01090af <calculate_required_frames+0x68>
				number_of_tables++;
f01090ac:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f01090af:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f01090b6:	83 ec 04             	sub    $0x4,%esp
f01090b9:	8d 45 dc             	lea    -0x24(%ebp),%eax
f01090bc:	50                   	push   %eax
f01090bd:	ff 75 e8             	pushl  -0x18(%ebp)
f01090c0:	ff 75 08             	pushl  0x8(%ebp)
f01090c3:	e8 3e dd ff ff       	call   f0106e06 <get_frame_info>
f01090c8:	83 c4 10             	add    $0x10,%esp
f01090cb:	85 c0                	test   %eax,%eax
f01090cd:	75 03                	jne    f01090d2 <calculate_required_frames+0x8b>
			number_of_pages++;
f01090cf:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f01090d2:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f01090d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01090dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f01090df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01090e2:	8b 45 10             	mov    0x10(%ebp),%eax
f01090e5:	01 d0                	add    %edx,%eax
f01090e7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01090ea:	77 91                	ja     f010907d <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f01090ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01090ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090f2:	01 d0                	add    %edx,%eax
}
f01090f4:	c9                   	leave  
f01090f5:	c3                   	ret    

f01090f6 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01090f6:	55                   	push   %ebp
f01090f7:	89 e5                	mov    %esp,%ebp
f01090f9:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01090fc:	83 ec 04             	sub    $0x4,%esp
f01090ff:	68 f4 68 13 f0       	push   $0xf01368f4
f0109104:	68 25 01 00 00       	push   $0x125
f0109109:	68 24 69 13 f0       	push   $0xf0136924
f010910e:	e8 f2 70 ff ff       	call   f0100205 <_panic>

f0109113 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109113:	55                   	push   %ebp
f0109114:	89 e5                	mov    %esp,%ebp
f0109116:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0109119:	83 ec 04             	sub    $0x4,%esp
f010911c:	68 40 69 13 f0       	push   $0xf0136940
f0109121:	68 2f 01 00 00       	push   $0x12f
f0109126:	68 24 69 13 f0       	push   $0xf0136924
f010912b:	e8 d5 70 ff ff       	call   f0100205 <_panic>

f0109130 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109130:	55                   	push   %ebp
f0109131:	89 e5                	mov    %esp,%ebp
f0109133:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109136:	83 ec 04             	sub    $0x4,%esp
f0109139:	68 6c 69 13 f0       	push   $0xf013696c
f010913e:	68 3d 01 00 00       	push   $0x13d
f0109143:	68 24 69 13 f0       	push   $0xf0136924
f0109148:	e8 b8 70 ff ff       	call   f0100205 <_panic>

f010914d <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010914d:	55                   	push   %ebp
f010914e:	89 e5                	mov    %esp,%ebp
f0109150:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109153:	83 ec 04             	sub    $0x4,%esp
f0109156:	68 ac 69 13 f0       	push   $0xf01369ac
f010915b:	68 4d 01 00 00       	push   $0x14d
f0109160:	68 24 69 13 f0       	push   $0xf0136924
f0109165:	e8 9b 70 ff ff       	call   f0100205 <_panic>

f010916a <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010916a:	55                   	push   %ebp
f010916b:	89 e5                	mov    %esp,%ebp
f010916d:	57                   	push   %edi
f010916e:	56                   	push   %esi
f010916f:	53                   	push   %ebx
f0109170:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109176:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f010917d:	83 ec 0c             	sub    $0xc,%esp
f0109180:	ff 75 08             	pushl  0x8(%ebp)
f0109183:	e8 0b 22 00 00       	call   f010b393 <get_user_program_info>
f0109188:	83 c4 10             	add    $0x10,%esp
f010918b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f010918e:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109192:	75 0a                	jne    f010919e <env_create+0x34>
f0109194:	b8 00 00 00 00       	mov    $0x0,%eax
f0109199:	e9 cd 0b 00 00       	jmp    f0109d6b <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f010919e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091a1:	8b 40 08             	mov    0x8(%eax),%eax
f01091a4:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01091a7:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f01091ae:	00 00 00 
	if(allocate_environment(&e) < 0)
f01091b1:	83 ec 0c             	sub    $0xc,%esp
f01091b4:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f01091ba:	50                   	push   %eax
f01091bb:	e8 d3 0e 00 00       	call   f010a093 <allocate_environment>
f01091c0:	83 c4 10             	add    $0x10,%esp
f01091c3:	85 c0                	test   %eax,%eax
f01091c5:	79 0a                	jns    f01091d1 <env_create+0x67>
	{
		return 0;
f01091c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01091cc:	e9 9a 0b 00 00       	jmp    f0109d6b <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01091d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091d4:	8b 00                	mov    (%eax),%eax
f01091d6:	83 ec 0c             	sub    $0xc,%esp
f01091d9:	50                   	push   %eax
f01091da:	e8 d0 83 02 00       	call   f01315af <strlen>
f01091df:	83 c4 10             	add    $0x10,%esp
f01091e2:	83 f8 3f             	cmp    $0x3f,%eax
f01091e5:	7f 20                	jg     f0109207 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01091e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091ea:	8b 00                	mov    (%eax),%eax
f01091ec:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01091f2:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01091f8:	83 ec 08             	sub    $0x8,%esp
f01091fb:	50                   	push   %eax
f01091fc:	52                   	push   %edx
f01091fd:	e8 fc 83 02 00       	call   f01315fe <strcpy>
f0109202:	83 c4 10             	add    $0x10,%esp
f0109205:	eb 20                	jmp    f0109227 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109207:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010920a:	8b 00                	mov    (%eax),%eax
f010920c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109212:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0109218:	83 ec 04             	sub    $0x4,%esp
f010921b:	6a 3f                	push   $0x3f
f010921d:	50                   	push   %eax
f010921e:	52                   	push   %edx
f010921f:	e8 08 84 02 00       	call   f013162c <strncpy>
f0109224:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0109227:	e8 6d 0f 00 00       	call   f010a199 <create_user_directory>
f010922c:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f010922f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109232:	83 ec 0c             	sub    $0xc,%esp
f0109235:	50                   	push   %eax
f0109236:	e8 6f eb ff ff       	call   f0107daa <kheap_physical_address>
f010923b:	83 c4 10             	add    $0x10,%esp
f010923e:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109241:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109247:	8b 55 0c             	mov    0xc(%ebp),%edx
f010924a:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010924d:	83 ec 0c             	sub    $0xc,%esp
f0109250:	6a 02                	push   $0x2
f0109252:	e8 f2 4d 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f0109257:	83 c4 10             	add    $0x10,%esp
f010925a:	85 c0                	test   %eax,%eax
f010925c:	74 21                	je     f010927f <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f010925e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109264:	8b 55 10             	mov    0x10(%ebp),%edx
f0109267:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f010926d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109273:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109276:	2b 55 10             	sub    0x10(%ebp),%edx
f0109279:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f010927f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109283:	75 12                	jne    f0109297 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109285:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010928b:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0109292:	00 00 00 
f0109295:	eb 0f                	jmp    f01092a6 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0109297:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010929d:	8b 55 14             	mov    0x14(%ebp),%edx
f01092a0:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f01092a6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092ac:	83 ec 04             	sub    $0x4,%esp
f01092af:	ff 75 ac             	pushl  -0x54(%ebp)
f01092b2:	ff 75 b0             	pushl  -0x50(%ebp)
f01092b5:	50                   	push   %eax
f01092b6:	e8 fa 15 00 00       	call   f010a8b5 <initialize_environment>
f01092bb:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01092be:	0f 20 d8             	mov    %cr3,%eax
f01092c1:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f01092c4:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f01092c7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f01092ca:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092d0:	8b 40 60             	mov    0x60(%eax),%eax
f01092d3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01092d9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01092df:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f01092e2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f01092e9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01092f0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092f6:	8b 40 74             	mov    0x74(%eax),%eax
f01092f9:	48                   	dec    %eax
f01092fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f01092fd:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0109304:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109307:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f010930d:	83 ec 08             	sub    $0x8,%esp
f0109310:	ff 75 b8             	pushl  -0x48(%ebp)
f0109313:	50                   	push   %eax
f0109314:	e8 af 1d 00 00       	call   f010b0c8 <PROGRAM_SEGMENT_FIRST>
f0109319:	83 c4 0c             	add    $0xc,%esp
f010931c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109322:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109328:	b9 05 00 00 00       	mov    $0x5,%ecx
f010932d:	89 c7                	mov    %eax,%edi
f010932f:	89 d6                	mov    %edx,%esi
f0109331:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109333:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109339:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010933c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010933f:	8b 40 10             	mov    0x10(%eax),%eax
f0109342:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109345:	75 07                	jne    f010934e <env_create+0x1e4>
f0109347:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010934e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109354:	e9 15 03 00 00       	jmp    f010966e <env_create+0x504>
	{
		segment_counter++;
f0109359:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f010935c:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0109363:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109366:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010936c:	83 ec 0c             	sub    $0xc,%esp
f010936f:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0109375:	52                   	push   %edx
f0109376:	ff 75 dc             	pushl  -0x24(%ebp)
f0109379:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f010937f:	52                   	push   %edx
f0109380:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109383:	50                   	push   %eax
f0109384:	e8 4b 0e 00 00       	call   f010a1d4 <program_segment_alloc_map_copy_workingset>
f0109389:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f010938c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0109392:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109395:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109398:	8b 00                	mov    (%eax),%eax
f010939a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f010939d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01093a0:	8b 40 0c             	mov    0xc(%eax),%eax
f01093a3:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f01093a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01093a9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01093ac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01093af:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01093b4:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01093b7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01093be:	8b 55 98             	mov    -0x68(%ebp),%edx
f01093c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01093c4:	01 d0                	add    %edx,%eax
f01093c6:	48                   	dec    %eax
f01093c7:	89 45 88             	mov    %eax,-0x78(%ebp)
f01093ca:	8b 45 88             	mov    -0x78(%ebp),%eax
f01093cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01093d2:	f7 75 8c             	divl   -0x74(%ebp)
f01093d5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01093d8:	29 d0                	sub    %edx,%eax
f01093da:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01093dd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01093e0:	2b 45 90             	sub    -0x70(%ebp),%eax
f01093e3:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01093e6:	a1 84 ed 88 f0       	mov    0xf088ed84,%eax
f01093eb:	83 ec 04             	sub    $0x4,%esp
f01093ee:	68 00 10 00 00       	push   $0x1000
f01093f3:	6a 00                	push   $0x0
f01093f5:	50                   	push   %eax
f01093f6:	e8 a2 83 02 00       	call   f013179d <memset>
f01093fb:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01093fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109401:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109404:	8b 15 84 ed 88 f0    	mov    0xf088ed84,%edx
f010940a:	8b 45 80             	mov    -0x80(%ebp),%eax
f010940d:	01 d0                	add    %edx,%eax
f010940f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109412:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109415:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109418:	eb 13                	jmp    f010942d <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f010941a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010941d:	8a 10                	mov    (%eax),%dl
f010941f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109422:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109424:	ff 45 cc             	incl   -0x34(%ebp)
f0109427:	ff 45 d4             	incl   -0x2c(%ebp)
f010942a:	ff 45 d0             	incl   -0x30(%ebp)
f010942d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109430:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0109433:	72 e5                	jb     f010941a <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109435:	8b 15 84 ed 88 f0    	mov    0xf088ed84,%edx
f010943b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109441:	83 ec 04             	sub    $0x4,%esp
f0109444:	52                   	push   %edx
f0109445:	ff 75 90             	pushl  -0x70(%ebp)
f0109448:	50                   	push   %eax
f0109449:	e8 c7 a2 ff ff       	call   f0103715 <pf_add_env_page>
f010944e:	83 c4 10             	add    $0x10,%esp
f0109451:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109454:	75 17                	jne    f010946d <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109456:	83 ec 04             	sub    $0x4,%esp
f0109459:	68 d8 69 13 f0       	push   $0xf01369d8
f010945e:	68 e1 00 00 00       	push   $0xe1
f0109463:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109468:	e8 98 6d ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f010946d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109470:	8b 50 04             	mov    0x4(%eax),%edx
f0109473:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109476:	01 d0                	add    %edx,%eax
f0109478:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010947e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109484:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109489:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010948f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109492:	8b 50 04             	mov    0x4(%eax),%edx
f0109495:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109498:	01 d0                	add    %edx,%eax
f010949a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01094a0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01094a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01094a6:	eb 43                	jmp    f01094eb <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01094a8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01094ab:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094b1:	83 ec 04             	sub    $0x4,%esp
f01094b4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01094b7:	52                   	push   %edx
f01094b8:	50                   	push   %eax
f01094b9:	e8 57 a2 ff ff       	call   f0103715 <pf_add_env_page>
f01094be:	83 c4 10             	add    $0x10,%esp
f01094c1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01094c4:	75 17                	jne    f01094dd <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01094c6:	83 ec 04             	sub    $0x4,%esp
f01094c9:	68 d8 69 13 f0       	push   $0xf01369d8
f01094ce:	68 ee 00 00 00       	push   $0xee
f01094d3:	68 1d 6a 13 f0       	push   $0xf0136a1d
f01094d8:	e8 28 6d ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01094dd:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01094e4:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01094eb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01094ee:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01094f4:	72 b2                	jb     f01094a8 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01094f6:	a1 84 ed 88 f0       	mov    0xf088ed84,%eax
f01094fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01094fe:	83 ec 04             	sub    $0x4,%esp
f0109501:	68 00 10 00 00       	push   $0x1000
f0109506:	6a 00                	push   $0x0
f0109508:	ff 75 d0             	pushl  -0x30(%ebp)
f010950b:	e8 8d 82 02 00       	call   f013179d <memset>
f0109510:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109513:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109519:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010951c:	eb 13                	jmp    f0109531 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f010951e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109521:	8a 10                	mov    (%eax),%dl
f0109523:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109526:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109528:	ff 45 cc             	incl   -0x34(%ebp)
f010952b:	ff 45 d4             	incl   -0x2c(%ebp)
f010952e:	ff 45 d0             	incl   -0x30(%ebp)
f0109531:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109534:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f010953a:	72 e2                	jb     f010951e <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010953c:	8b 15 84 ed 88 f0    	mov    0xf088ed84,%edx
f0109542:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109548:	83 ec 04             	sub    $0x4,%esp
f010954b:	52                   	push   %edx
f010954c:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109552:	50                   	push   %eax
f0109553:	e8 bd a1 ff ff       	call   f0103715 <pf_add_env_page>
f0109558:	83 c4 10             	add    $0x10,%esp
f010955b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010955e:	75 17                	jne    f0109577 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109560:	83 ec 04             	sub    $0x4,%esp
f0109563:	68 d8 69 13 f0       	push   $0xf01369d8
f0109568:	68 fd 00 00 00       	push   $0xfd
f010956d:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109572:	e8 8e 6c ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109577:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010957e:	10 00 00 
f0109581:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109584:	8b 50 04             	mov    0x4(%eax),%edx
f0109587:	8b 45 98             	mov    -0x68(%ebp),%eax
f010958a:	01 c2                	add    %eax,%edx
f010958c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109592:	01 d0                	add    %edx,%eax
f0109594:	48                   	dec    %eax
f0109595:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010959b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01095a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01095a6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01095ac:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01095b2:	29 d0                	sub    %edx,%eax
f01095b4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01095b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01095ba:	8b 50 08             	mov    0x8(%eax),%edx
f01095bd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01095c0:	01 d0                	add    %edx,%eax
f01095c2:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01095c5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01095cb:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01095d2:	eb 41                	jmp    f0109615 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01095d4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095da:	83 ec 04             	sub    $0x4,%esp
f01095dd:	6a 01                	push   $0x1
f01095df:	ff 75 c8             	pushl  -0x38(%ebp)
f01095e2:	50                   	push   %eax
f01095e3:	e8 fc 9f ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01095e8:	83 c4 10             	add    $0x10,%esp
f01095eb:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01095ee:	75 17                	jne    f0109607 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01095f0:	83 ec 04             	sub    $0x4,%esp
f01095f3:	68 d8 69 13 f0       	push   $0xf01369d8
f01095f8:	68 0a 01 00 00       	push   $0x10a
f01095fd:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109602:	e8 fe 6b ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109607:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010960e:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109615:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010961c:	10 00 00 
f010961f:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f0109625:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010962b:	01 d0                	add    %edx,%eax
f010962d:	48                   	dec    %eax
f010962e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0109634:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010963a:	ba 00 00 00 00       	mov    $0x0,%edx
f010963f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0109645:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010964b:	29 d0                	sub    %edx,%eax
f010964d:	89 c2                	mov    %eax,%edx
f010964f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109652:	39 c2                	cmp    %eax,%edx
f0109654:	0f 87 7a ff ff ff    	ja     f01095d4 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010965a:	83 ec 08             	sub    $0x8,%esp
f010965d:	ff 75 b8             	pushl  -0x48(%ebp)
f0109660:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109663:	e8 55 19 00 00       	call   f010afbd <PROGRAM_SEGMENT_NEXT>
f0109668:	83 c4 10             	add    $0x10,%esp
f010966b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010966e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109672:	0f 85 e1 fc ff ff    	jne    f0109359 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109678:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010967f:	e9 9d 00 00 00       	jmp    f0109721 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109684:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010968a:	8b 48 78             	mov    0x78(%eax),%ecx
f010968d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109690:	89 d0                	mov    %edx,%eax
f0109692:	01 c0                	add    %eax,%eax
f0109694:	01 d0                	add    %edx,%eax
f0109696:	c1 e0 03             	shl    $0x3,%eax
f0109699:	01 c8                	add    %ecx,%eax
f010969b:	8a 40 04             	mov    0x4(%eax),%al
f010969e:	84 c0                	test   %al,%al
f01096a0:	75 7c                	jne    f010971e <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01096a2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096a8:	8b 48 78             	mov    0x78(%eax),%ecx
f01096ab:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01096ae:	89 d0                	mov    %edx,%eax
f01096b0:	01 c0                	add    %eax,%eax
f01096b2:	01 d0                	add    %edx,%eax
f01096b4:	c1 e0 03             	shl    $0x3,%eax
f01096b7:	01 c8                	add    %ecx,%eax
f01096b9:	8b 00                	mov    (%eax),%eax
f01096bb:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01096c1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096c7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01096ca:	83 ec 04             	sub    $0x4,%esp
f01096cd:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01096d3:	52                   	push   %edx
f01096d4:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01096da:	50                   	push   %eax
f01096db:	e8 d1 d3 ff ff       	call   f0106ab1 <get_page_table>
f01096e0:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01096e3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01096e9:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01096ef:	c1 ea 0c             	shr    $0xc,%edx
f01096f2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01096f8:	c1 e2 02             	shl    $0x2,%edx
f01096fb:	01 d0                	add    %edx,%eax
f01096fd:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0109703:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109709:	c1 e9 0c             	shr    $0xc,%ecx
f010970c:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109712:	c1 e1 02             	shl    $0x2,%ecx
f0109715:	01 ca                	add    %ecx,%edx
f0109717:	8b 12                	mov    (%edx),%edx
f0109719:	83 e2 bf             	and    $0xffffffbf,%edx
f010971c:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f010971e:	ff 45 c4             	incl   -0x3c(%ebp)
f0109721:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109727:	8b 50 74             	mov    0x74(%eax),%edx
f010972a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010972d:	39 c2                	cmp    %eax,%edx
f010972f:	0f 87 4f ff ff ff    	ja     f0109684 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109735:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109738:	8b 50 08             	mov    0x8(%eax),%edx
f010973b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109741:	83 ec 08             	sub    $0x8,%esp
f0109744:	52                   	push   %edx
f0109745:	50                   	push   %eax
f0109746:	e8 bc 16 00 00       	call   f010ae07 <set_environment_entry_point>
f010974b:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010974e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109754:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f010975b:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010975e:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f0109765:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109768:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010976f:	e9 53 05 00 00       	jmp    f0109cc7 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109774:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010977b:	00 00 00 
		allocate_frame(&pp);
f010977e:	83 ec 0c             	sub    $0xc,%esp
f0109781:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109787:	50                   	push   %eax
f0109788:	e8 65 d1 ff ff       	call   f01068f2 <allocate_frame>
f010978d:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109790:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0109796:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010979c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010979f:	6a 06                	push   $0x6
f01097a1:	ff 75 c0             	pushl  -0x40(%ebp)
f01097a4:	52                   	push   %edx
f01097a5:	50                   	push   %eax
f01097a6:	e8 52 d7 ff ff       	call   f0106efd <loadtime_map_frame>
f01097ab:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01097ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01097b1:	83 ec 04             	sub    $0x4,%esp
f01097b4:	68 00 10 00 00       	push   $0x1000
f01097b9:	6a 00                	push   $0x0
f01097bb:	50                   	push   %eax
f01097bc:	e8 dc 7f 02 00       	call   f013179d <memset>
f01097c1:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01097c4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097ca:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01097d0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097d6:	83 ec 04             	sub    $0x4,%esp
f01097d9:	ff 75 c0             	pushl  -0x40(%ebp)
f01097dc:	52                   	push   %edx
f01097dd:	50                   	push   %eax
f01097de:	e8 ee e9 ff ff       	call   f01081d1 <env_page_ws_set_entry>
f01097e3:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01097e6:	83 ec 0c             	sub    $0xc,%esp
f01097e9:	6a 02                	push   $0x2
f01097eb:	e8 59 48 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f01097f0:	83 c4 10             	add    $0x10,%esp
f01097f3:	85 c0                	test   %eax,%eax
f01097f5:	0f 84 6b 04 00 00    	je     f0109c66 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01097fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109801:	8b 48 78             	mov    0x78(%eax),%ecx
f0109804:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010980a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109810:	89 d0                	mov    %edx,%eax
f0109812:	01 c0                	add    %eax,%eax
f0109814:	01 d0                	add    %edx,%eax
f0109816:	c1 e0 03             	shl    $0x3,%eax
f0109819:	01 c8                	add    %ecx,%eax
f010981b:	85 c0                	test   %eax,%eax
f010981d:	75 17                	jne    f0109836 <env_create+0x6cc>
f010981f:	83 ec 04             	sub    $0x4,%esp
f0109822:	68 3a 6a 13 f0       	push   $0xf0136a3a
f0109827:	68 41 01 00 00       	push   $0x141
f010982c:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109831:	e8 cf 69 ff ff       	call   f0100205 <_panic>
f0109836:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983c:	8b 48 78             	mov    0x78(%eax),%ecx
f010983f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109845:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010984b:	89 d0                	mov    %edx,%eax
f010984d:	01 c0                	add    %eax,%eax
f010984f:	01 d0                	add    %edx,%eax
f0109851:	c1 e0 03             	shl    $0x3,%eax
f0109854:	01 c8                	add    %ecx,%eax
f0109856:	8b 40 10             	mov    0x10(%eax),%eax
f0109859:	85 c0                	test   %eax,%eax
f010985b:	74 4b                	je     f01098a8 <env_create+0x73e>
f010985d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109863:	8b 48 78             	mov    0x78(%eax),%ecx
f0109866:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010986c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109872:	89 d0                	mov    %edx,%eax
f0109874:	01 c0                	add    %eax,%eax
f0109876:	01 d0                	add    %edx,%eax
f0109878:	c1 e0 03             	shl    $0x3,%eax
f010987b:	01 c8                	add    %ecx,%eax
f010987d:	8b 50 10             	mov    0x10(%eax),%edx
f0109880:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109886:	8b 58 78             	mov    0x78(%eax),%ebx
f0109889:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010988f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109895:	89 c8                	mov    %ecx,%eax
f0109897:	01 c0                	add    %eax,%eax
f0109899:	01 c8                	add    %ecx,%eax
f010989b:	c1 e0 03             	shl    $0x3,%eax
f010989e:	01 d8                	add    %ebx,%eax
f01098a0:	8b 40 14             	mov    0x14(%eax),%eax
f01098a3:	89 42 14             	mov    %eax,0x14(%edx)
f01098a6:	eb 2f                	jmp    f01098d7 <env_create+0x76d>
f01098a8:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098ae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098b4:	8b 58 78             	mov    0x78(%eax),%ebx
f01098b7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098bd:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098c3:	89 c8                	mov    %ecx,%eax
f01098c5:	01 c0                	add    %eax,%eax
f01098c7:	01 c8                	add    %ecx,%eax
f01098c9:	c1 e0 03             	shl    $0x3,%eax
f01098cc:	01 d8                	add    %ebx,%eax
f01098ce:	8b 40 14             	mov    0x14(%eax),%eax
f01098d1:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01098d7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098dd:	8b 48 78             	mov    0x78(%eax),%ecx
f01098e0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098ec:	89 d0                	mov    %edx,%eax
f01098ee:	01 c0                	add    %eax,%eax
f01098f0:	01 d0                	add    %edx,%eax
f01098f2:	c1 e0 03             	shl    $0x3,%eax
f01098f5:	01 c8                	add    %ecx,%eax
f01098f7:	8b 40 14             	mov    0x14(%eax),%eax
f01098fa:	85 c0                	test   %eax,%eax
f01098fc:	74 4b                	je     f0109949 <env_create+0x7df>
f01098fe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109904:	8b 48 78             	mov    0x78(%eax),%ecx
f0109907:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109913:	89 d0                	mov    %edx,%eax
f0109915:	01 c0                	add    %eax,%eax
f0109917:	01 d0                	add    %edx,%eax
f0109919:	c1 e0 03             	shl    $0x3,%eax
f010991c:	01 c8                	add    %ecx,%eax
f010991e:	8b 50 14             	mov    0x14(%eax),%edx
f0109921:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109927:	8b 58 78             	mov    0x78(%eax),%ebx
f010992a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109930:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109936:	89 c8                	mov    %ecx,%eax
f0109938:	01 c0                	add    %eax,%eax
f010993a:	01 c8                	add    %ecx,%eax
f010993c:	c1 e0 03             	shl    $0x3,%eax
f010993f:	01 d8                	add    %ebx,%eax
f0109941:	8b 40 10             	mov    0x10(%eax),%eax
f0109944:	89 42 10             	mov    %eax,0x10(%edx)
f0109947:	eb 2f                	jmp    f0109978 <env_create+0x80e>
f0109949:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010994f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109955:	8b 58 78             	mov    0x78(%eax),%ebx
f0109958:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010995e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109964:	89 c8                	mov    %ecx,%eax
f0109966:	01 c0                	add    %eax,%eax
f0109968:	01 c8                	add    %ecx,%eax
f010996a:	c1 e0 03             	shl    $0x3,%eax
f010996d:	01 d8                	add    %ebx,%eax
f010996f:	8b 40 10             	mov    0x10(%eax),%eax
f0109972:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109978:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997e:	8b 48 78             	mov    0x78(%eax),%ecx
f0109981:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109987:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010998d:	89 d0                	mov    %edx,%eax
f010998f:	01 c0                	add    %eax,%eax
f0109991:	01 d0                	add    %edx,%eax
f0109993:	c1 e0 03             	shl    $0x3,%eax
f0109996:	01 c8                	add    %ecx,%eax
f0109998:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010999f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099a5:	8b 48 78             	mov    0x78(%eax),%ecx
f01099a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ae:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01099b4:	89 d0                	mov    %edx,%eax
f01099b6:	01 c0                	add    %eax,%eax
f01099b8:	01 d0                	add    %edx,%eax
f01099ba:	c1 e0 03             	shl    $0x3,%eax
f01099bd:	01 c8                	add    %ecx,%eax
f01099bf:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01099c6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099cc:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01099d2:	4a                   	dec    %edx
f01099d3:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01099d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099df:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01099e5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099eb:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01099f1:	39 c2                	cmp    %eax,%edx
f01099f3:	0f 83 39 01 00 00    	jae    f0109b32 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01099f9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ff:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a02:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a08:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a0e:	89 d0                	mov    %edx,%eax
f0109a10:	01 c0                	add    %eax,%eax
f0109a12:	01 d0                	add    %edx,%eax
f0109a14:	c1 e0 03             	shl    $0x3,%eax
f0109a17:	01 c8                	add    %ecx,%eax
f0109a19:	85 c0                	test   %eax,%eax
f0109a1b:	75 17                	jne    f0109a34 <env_create+0x8ca>
f0109a1d:	83 ec 04             	sub    $0x4,%esp
f0109a20:	68 58 6a 13 f0       	push   $0xf0136a58
f0109a25:	68 46 01 00 00       	push   $0x146
f0109a2a:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109a2f:	e8 d1 67 ff ff       	call   f0100205 <_panic>
f0109a34:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a3a:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a3d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a43:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a49:	89 d0                	mov    %edx,%eax
f0109a4b:	01 c0                	add    %eax,%eax
f0109a4d:	01 d0                	add    %edx,%eax
f0109a4f:	c1 e0 03             	shl    $0x3,%eax
f0109a52:	01 c8                	add    %ecx,%eax
f0109a54:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a5a:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109a60:	89 50 10             	mov    %edx,0x10(%eax)
f0109a63:	8b 40 10             	mov    0x10(%eax),%eax
f0109a66:	85 c0                	test   %eax,%eax
f0109a68:	74 31                	je     f0109a9b <env_create+0x931>
f0109a6a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a70:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109a76:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a7c:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a7f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a85:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a8b:	89 c8                	mov    %ecx,%eax
f0109a8d:	01 c0                	add    %eax,%eax
f0109a8f:	01 c8                	add    %ecx,%eax
f0109a91:	c1 e0 03             	shl    $0x3,%eax
f0109a94:	01 d8                	add    %ebx,%eax
f0109a96:	89 42 14             	mov    %eax,0x14(%edx)
f0109a99:	eb 2c                	jmp    f0109ac7 <env_create+0x95d>
f0109a9b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109aa1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109aa7:	8b 58 78             	mov    0x78(%eax),%ebx
f0109aaa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ab0:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ab6:	89 c8                	mov    %ecx,%eax
f0109ab8:	01 c0                	add    %eax,%eax
f0109aba:	01 c8                	add    %ecx,%eax
f0109abc:	c1 e0 03             	shl    $0x3,%eax
f0109abf:	01 d8                	add    %ebx,%eax
f0109ac1:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109ac7:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109acd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ad3:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ad6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109adc:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ae2:	89 c8                	mov    %ecx,%eax
f0109ae4:	01 c0                	add    %eax,%eax
f0109ae6:	01 c8                	add    %ecx,%eax
f0109ae8:	c1 e0 03             	shl    $0x3,%eax
f0109aeb:	01 d8                	add    %ebx,%eax
f0109aed:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109af3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109af9:	8b 48 78             	mov    0x78(%eax),%ecx
f0109afc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b02:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b08:	89 d0                	mov    %edx,%eax
f0109b0a:	01 c0                	add    %eax,%eax
f0109b0c:	01 d0                	add    %edx,%eax
f0109b0e:	c1 e0 03             	shl    $0x3,%eax
f0109b11:	01 c8                	add    %ecx,%eax
f0109b13:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109b1a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b20:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109b26:	42                   	inc    %edx
f0109b27:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109b2d:	e9 34 01 00 00       	jmp    f0109c66 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109b32:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b38:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b3b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b41:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b47:	89 d0                	mov    %edx,%eax
f0109b49:	01 c0                	add    %eax,%eax
f0109b4b:	01 d0                	add    %edx,%eax
f0109b4d:	c1 e0 03             	shl    $0x3,%eax
f0109b50:	01 c8                	add    %ecx,%eax
f0109b52:	85 c0                	test   %eax,%eax
f0109b54:	75 17                	jne    f0109b6d <env_create+0xa03>
f0109b56:	83 ec 04             	sub    $0x4,%esp
f0109b59:	68 58 6a 13 f0       	push   $0xf0136a58
f0109b5e:	68 4a 01 00 00       	push   $0x14a
f0109b63:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109b68:	e8 98 66 ff ff       	call   f0100205 <_panic>
f0109b6d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b73:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b76:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b7c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b82:	89 d0                	mov    %edx,%eax
f0109b84:	01 c0                	add    %eax,%eax
f0109b86:	01 d0                	add    %edx,%eax
f0109b88:	c1 e0 03             	shl    $0x3,%eax
f0109b8b:	01 c8                	add    %ecx,%eax
f0109b8d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b93:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109b99:	89 50 10             	mov    %edx,0x10(%eax)
f0109b9c:	8b 40 10             	mov    0x10(%eax),%eax
f0109b9f:	85 c0                	test   %eax,%eax
f0109ba1:	74 31                	je     f0109bd4 <env_create+0xa6a>
f0109ba3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ba9:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109baf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bb5:	8b 58 78             	mov    0x78(%eax),%ebx
f0109bb8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bbe:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109bc4:	89 c8                	mov    %ecx,%eax
f0109bc6:	01 c0                	add    %eax,%eax
f0109bc8:	01 c8                	add    %ecx,%eax
f0109bca:	c1 e0 03             	shl    $0x3,%eax
f0109bcd:	01 d8                	add    %ebx,%eax
f0109bcf:	89 42 14             	mov    %eax,0x14(%edx)
f0109bd2:	eb 2c                	jmp    f0109c00 <env_create+0xa96>
f0109bd4:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109bda:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109be0:	8b 58 78             	mov    0x78(%eax),%ebx
f0109be3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109be9:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109bef:	89 c8                	mov    %ecx,%eax
f0109bf1:	01 c0                	add    %eax,%eax
f0109bf3:	01 c8                	add    %ecx,%eax
f0109bf5:	c1 e0 03             	shl    $0x3,%eax
f0109bf8:	01 d8                	add    %ebx,%eax
f0109bfa:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109c00:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c06:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c0c:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c0f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c15:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c1b:	89 c8                	mov    %ecx,%eax
f0109c1d:	01 c0                	add    %eax,%eax
f0109c1f:	01 c8                	add    %ecx,%eax
f0109c21:	c1 e0 03             	shl    $0x3,%eax
f0109c24:	01 d8                	add    %ebx,%eax
f0109c26:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109c2c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c32:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c35:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c3b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c41:	89 d0                	mov    %edx,%eax
f0109c43:	01 c0                	add    %eax,%eax
f0109c45:	01 d0                	add    %edx,%eax
f0109c47:	c1 e0 03             	shl    $0x3,%eax
f0109c4a:	01 c8                	add    %ecx,%eax
f0109c4c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109c53:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c59:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109c5f:	42                   	inc    %edx
f0109c60:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109c66:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c6c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c72:	42                   	inc    %edx
f0109c73:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109c79:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109c7f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c85:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109c8b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c91:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109c94:	ba 00 00 00 00       	mov    $0x0,%edx
f0109c99:	f7 f3                	div    %ebx
f0109c9b:	89 d0                	mov    %edx,%eax
f0109c9d:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109ca3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ca9:	83 ec 04             	sub    $0x4,%esp
f0109cac:	6a 01                	push   $0x1
f0109cae:	ff 75 c0             	pushl  -0x40(%ebp)
f0109cb1:	50                   	push   %eax
f0109cb2:	e8 2d 99 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0109cb7:	83 c4 10             	add    $0x10,%esp
f0109cba:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109cc0:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109cc7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109cca:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109cd0:	0f 83 9e fa ff ff    	jae    f0109774 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109cd6:	83 ec 0c             	sub    $0xc,%esp
f0109cd9:	6a 02                	push   $0x2
f0109cdb:	e8 69 43 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f0109ce0:	83 c4 10             	add    $0x10,%esp
f0109ce3:	85 c0                	test   %eax,%eax
f0109ce5:	74 72                	je     f0109d59 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109ce7:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109cee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cf4:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109cfa:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109cfd:	eb 2b                	jmp    f0109d2a <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109cff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109d02:	8b 10                	mov    (%eax),%edx
f0109d04:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d0a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109d0d:	6a 01                	push   $0x1
f0109d0f:	6a 00                	push   $0x0
f0109d11:	52                   	push   %edx
f0109d12:	50                   	push   %eax
f0109d13:	e8 9c e1 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0109d18:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109d1b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d21:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109d27:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109d2a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d30:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109d34:	74 08                	je     f0109d3e <env_create+0xbd4>
f0109d36:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109d39:	8b 52 10             	mov    0x10(%edx),%edx
f0109d3c:	eb 05                	jmp    f0109d43 <env_create+0xbd9>
f0109d3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d43:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109d49:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109d4f:	85 c0                	test   %eax,%eax
f0109d51:	75 ac                	jne    f0109cff <env_create+0xb95>
f0109d53:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109d57:	75 a6                	jne    f0109cff <env_create+0xb95>
f0109d59:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109d5c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109d5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109d62:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109d65:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109d6b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109d6e:	5b                   	pop    %ebx
f0109d6f:	5e                   	pop    %esi
f0109d70:	5f                   	pop    %edi
f0109d71:	5d                   	pop    %ebp
f0109d72:	c3                   	ret    

f0109d73 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109d73:	55                   	push   %ebp
f0109d74:	89 e5                	mov    %esp,%ebp
f0109d76:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109d79:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109d7e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109d81:	74 25                	je     f0109da8 <env_run+0x35>
	{
		curenv = e ;
f0109d83:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d86:	a3 f4 e3 88 f0       	mov    %eax,0xf088e3f4
		curenv->env_runs++ ;
f0109d8b:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109d90:	8b 50 58             	mov    0x58(%eax),%edx
f0109d93:	42                   	inc    %edx
f0109d94:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109d97:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109d9c:	8b 40 60             	mov    0x60(%eax),%eax
f0109d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109da5:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109da8:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109dad:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109db4:	e8 06 a4 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109db9:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109dbe:	83 ec 0c             	sub    $0xc,%esp
f0109dc1:	50                   	push   %eax
f0109dc2:	e8 0f 01 00 00       	call   f0109ed6 <env_pop_tf>

f0109dc7 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109dc7:	55                   	push   %ebp
f0109dc8:	89 e5                	mov    %esp,%ebp
f0109dca:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109dcd:	83 ec 0c             	sub    $0xc,%esp
f0109dd0:	ff 75 08             	pushl  0x8(%ebp)
f0109dd3:	e8 3e 11 00 00       	call   f010af16 <unshare_pws_at_user_space>
f0109dd8:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109ddb:	83 ec 04             	sub    $0x4,%esp
f0109dde:	68 7c 6a 13 f0       	push   $0xf0136a7c
f0109de3:	68 9d 01 00 00       	push   $0x19d
f0109de8:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109ded:	e8 13 64 ff ff       	call   f0100205 <_panic>

f0109df2 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109df2:	55                   	push   %ebp
f0109df3:	89 e5                	mov    %esp,%ebp
f0109df5:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109df8:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109dfd:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e00:	83 ec 0c             	sub    $0xc,%esp
f0109e03:	50                   	push   %eax
f0109e04:	e8 99 b4 ff ff       	call   f01052a2 <sched_exit_env>
f0109e09:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109e0c:	e8 15 a9 ff ff       	call   f0104726 <fos_scheduler>

f0109e11 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109e11:	55                   	push   %ebp
f0109e12:	89 e5                	mov    %esp,%ebp
f0109e14:	53                   	push   %ebx
f0109e15:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109e18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109e1c:	75 15                	jne    f0109e33 <envid2env+0x22>
		*env_store = curenv;
f0109e1e:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f0109e24:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e27:	89 10                	mov    %edx,(%eax)
		return 0;
f0109e29:	b8 00 00 00 00       	mov    $0x0,%eax
f0109e2e:	e9 9e 00 00 00       	jmp    f0109ed1 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109e33:	8b 1d f0 e3 88 f0    	mov    0xf088e3f0,%ebx
f0109e39:	83 ec 0c             	sub    $0xc,%esp
f0109e3c:	68 b1 02 00 00       	push   $0x2b1
f0109e41:	e8 db 64 02 00       	call   f0130321 <nearest_pow2_ceil>
f0109e46:	83 c4 10             	add    $0x10,%esp
f0109e49:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109e4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e4f:	21 c2                	and    %eax,%edx
f0109e51:	89 d0                	mov    %edx,%eax
f0109e53:	c1 e0 03             	shl    $0x3,%eax
f0109e56:	01 d0                	add    %edx,%eax
f0109e58:	01 c0                	add    %eax,%eax
f0109e5a:	01 d0                	add    %edx,%eax
f0109e5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109e63:	01 d0                	add    %edx,%eax
f0109e65:	c1 e0 04             	shl    $0x4,%eax
f0109e68:	01 d8                	add    %ebx,%eax
f0109e6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e70:	8b 40 54             	mov    0x54(%eax),%eax
f0109e73:	85 c0                	test   %eax,%eax
f0109e75:	74 0b                	je     f0109e82 <envid2env+0x71>
f0109e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e7a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e7d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109e80:	74 10                	je     f0109e92 <envid2env+0x81>
		*env_store = 0;
f0109e82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109e8b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109e90:	eb 3f                	jmp    f0109ed1 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109e92:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109e96:	74 2c                	je     f0109ec4 <envid2env+0xb3>
f0109e98:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109e9d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109ea0:	74 22                	je     f0109ec4 <envid2env+0xb3>
f0109ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ea5:	8b 50 50             	mov    0x50(%eax),%edx
f0109ea8:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0109ead:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109eb0:	39 c2                	cmp    %eax,%edx
f0109eb2:	74 10                	je     f0109ec4 <envid2env+0xb3>
		*env_store = 0;
f0109eb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109eb7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109ebd:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109ec2:	eb 0d                	jmp    f0109ed1 <envid2env+0xc0>
	}

	*env_store = e;
f0109ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ec7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109eca:	89 10                	mov    %edx,(%eax)
	return 0;
f0109ecc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109ed1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109ed4:	c9                   	leave  
f0109ed5:	c3                   	ret    

f0109ed6 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109ed6:	55                   	push   %ebp
f0109ed7:	89 e5                	mov    %esp,%ebp
f0109ed9:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109edc:	8b 65 08             	mov    0x8(%ebp),%esp
f0109edf:	61                   	popa   
f0109ee0:	07                   	pop    %es
f0109ee1:	1f                   	pop    %ds
f0109ee2:	83 c4 08             	add    $0x8,%esp
f0109ee5:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109ee6:	83 ec 04             	sub    $0x4,%esp
f0109ee9:	68 a3 6a 13 f0       	push   $0xf0136aa3
f0109eee:	68 fd 01 00 00       	push   $0x1fd
f0109ef3:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109ef8:	e8 08 63 ff ff       	call   f0100205 <_panic>

f0109efd <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109efd:	55                   	push   %ebp
f0109efe:	89 e5                	mov    %esp,%ebp
f0109f00:	53                   	push   %ebx
f0109f01:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109f04:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109f0b:	e9 73 01 00 00       	jmp    f010a083 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109f10:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f0109f16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f19:	89 d0                	mov    %edx,%eax
f0109f1b:	c1 e0 03             	shl    $0x3,%eax
f0109f1e:	01 d0                	add    %edx,%eax
f0109f20:	01 c0                	add    %eax,%eax
f0109f22:	01 d0                	add    %edx,%eax
f0109f24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f2b:	01 d0                	add    %edx,%eax
f0109f2d:	c1 e0 04             	shl    $0x4,%eax
f0109f30:	01 c8                	add    %ecx,%eax
f0109f32:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109f39:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f0109f3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f42:	89 d0                	mov    %edx,%eax
f0109f44:	c1 e0 03             	shl    $0x3,%eax
f0109f47:	01 d0                	add    %edx,%eax
f0109f49:	01 c0                	add    %eax,%eax
f0109f4b:	01 d0                	add    %edx,%eax
f0109f4d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f54:	01 d0                	add    %edx,%eax
f0109f56:	c1 e0 04             	shl    $0x4,%eax
f0109f59:	01 c8                	add    %ecx,%eax
f0109f5b:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109f62:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f0109f68:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f6b:	89 d0                	mov    %edx,%eax
f0109f6d:	c1 e0 03             	shl    $0x3,%eax
f0109f70:	01 d0                	add    %edx,%eax
f0109f72:	01 c0                	add    %eax,%eax
f0109f74:	01 d0                	add    %edx,%eax
f0109f76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f7d:	01 d0                	add    %edx,%eax
f0109f7f:	c1 e0 04             	shl    $0x4,%eax
f0109f82:	01 c8                	add    %ecx,%eax
f0109f84:	85 c0                	test   %eax,%eax
f0109f86:	75 17                	jne    f0109f9f <env_init+0xa2>
f0109f88:	83 ec 04             	sub    $0x4,%esp
f0109f8b:	68 58 6a 13 f0       	push   $0xf0136a58
f0109f90:	68 19 02 00 00       	push   $0x219
f0109f95:	68 1d 6a 13 f0       	push   $0xf0136a1d
f0109f9a:	e8 66 62 ff ff       	call   f0100205 <_panic>
f0109f9f:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f0109fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109fa8:	89 d0                	mov    %edx,%eax
f0109faa:	c1 e0 03             	shl    $0x3,%eax
f0109fad:	01 d0                	add    %edx,%eax
f0109faf:	01 c0                	add    %eax,%eax
f0109fb1:	01 d0                	add    %edx,%eax
f0109fb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109fba:	01 d0                	add    %edx,%eax
f0109fbc:	c1 e0 04             	shl    $0x4,%eax
f0109fbf:	01 c8                	add    %ecx,%eax
f0109fc1:	8b 15 f8 e3 88 f0    	mov    0xf088e3f8,%edx
f0109fc7:	89 50 44             	mov    %edx,0x44(%eax)
f0109fca:	8b 40 44             	mov    0x44(%eax),%eax
f0109fcd:	85 c0                	test   %eax,%eax
f0109fcf:	74 2d                	je     f0109ffe <env_init+0x101>
f0109fd1:	8b 0d f8 e3 88 f0    	mov    0xf088e3f8,%ecx
f0109fd7:	8b 1d f0 e3 88 f0    	mov    0xf088e3f0,%ebx
f0109fdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109fe0:	89 d0                	mov    %edx,%eax
f0109fe2:	c1 e0 03             	shl    $0x3,%eax
f0109fe5:	01 d0                	add    %edx,%eax
f0109fe7:	01 c0                	add    %eax,%eax
f0109fe9:	01 d0                	add    %edx,%eax
f0109feb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ff2:	01 d0                	add    %edx,%eax
f0109ff4:	c1 e0 04             	shl    $0x4,%eax
f0109ff7:	01 d8                	add    %ebx,%eax
f0109ff9:	89 41 48             	mov    %eax,0x48(%ecx)
f0109ffc:	eb 27                	jmp    f010a025 <env_init+0x128>
f0109ffe:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f010a004:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a007:	89 d0                	mov    %edx,%eax
f010a009:	c1 e0 03             	shl    $0x3,%eax
f010a00c:	01 d0                	add    %edx,%eax
f010a00e:	01 c0                	add    %eax,%eax
f010a010:	01 d0                	add    %edx,%eax
f010a012:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a019:	01 d0                	add    %edx,%eax
f010a01b:	c1 e0 04             	shl    $0x4,%eax
f010a01e:	01 c8                	add    %ecx,%eax
f010a020:	a3 fc e3 88 f0       	mov    %eax,0xf088e3fc
f010a025:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f010a02b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a02e:	89 d0                	mov    %edx,%eax
f010a030:	c1 e0 03             	shl    $0x3,%eax
f010a033:	01 d0                	add    %edx,%eax
f010a035:	01 c0                	add    %eax,%eax
f010a037:	01 d0                	add    %edx,%eax
f010a039:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a040:	01 d0                	add    %edx,%eax
f010a042:	c1 e0 04             	shl    $0x4,%eax
f010a045:	01 c8                	add    %ecx,%eax
f010a047:	a3 f8 e3 88 f0       	mov    %eax,0xf088e3f8
f010a04c:	8b 0d f0 e3 88 f0    	mov    0xf088e3f0,%ecx
f010a052:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a055:	89 d0                	mov    %edx,%eax
f010a057:	c1 e0 03             	shl    $0x3,%eax
f010a05a:	01 d0                	add    %edx,%eax
f010a05c:	01 c0                	add    %eax,%eax
f010a05e:	01 d0                	add    %edx,%eax
f010a060:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a067:	01 d0                	add    %edx,%eax
f010a069:	c1 e0 04             	shl    $0x4,%eax
f010a06c:	01 c8                	add    %ecx,%eax
f010a06e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a075:	a1 04 e4 88 f0       	mov    0xf088e404,%eax
f010a07a:	40                   	inc    %eax
f010a07b:	a3 04 e4 88 f0       	mov    %eax,0xf088e404
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a080:	ff 4d f4             	decl   -0xc(%ebp)
f010a083:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a087:	0f 89 83 fe ff ff    	jns    f0109f10 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a08d:	90                   	nop
f010a08e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a091:	c9                   	leave  
f010a092:	c3                   	ret    

f010a093 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a093:	55                   	push   %ebp
f010a094:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a096:	8b 15 f8 e3 88 f0    	mov    0xf088e3f8,%edx
f010a09c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a09f:	89 10                	mov    %edx,(%eax)
f010a0a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0a4:	8b 00                	mov    (%eax),%eax
f010a0a6:	85 c0                	test   %eax,%eax
f010a0a8:	75 07                	jne    f010a0b1 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a0aa:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a0af:	eb 11                	jmp    f010a0c2 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a0b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b4:	8b 00                	mov    (%eax),%eax
f010a0b6:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a0bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a0c2:	5d                   	pop    %ebp
f010a0c3:	c3                   	ret    

f010a0c4 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a0c4:	55                   	push   %ebp
f010a0c5:	89 e5                	mov    %esp,%ebp
f010a0c7:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a0ca:	83 ec 04             	sub    $0x4,%esp
f010a0cd:	68 f0 05 00 00       	push   $0x5f0
f010a0d2:	6a 00                	push   $0x0
f010a0d4:	ff 75 08             	pushl  0x8(%ebp)
f010a0d7:	e8 c1 76 02 00       	call   f013179d <memset>
f010a0dc:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e2:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a0e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a0ed:	75 17                	jne    f010a106 <free_environment+0x42>
f010a0ef:	83 ec 04             	sub    $0x4,%esp
f010a0f2:	68 58 6a 13 f0       	push   $0xf0136a58
f010a0f7:	68 36 02 00 00       	push   $0x236
f010a0fc:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a101:	e8 ff 60 ff ff       	call   f0100205 <_panic>
f010a106:	8b 15 f8 e3 88 f0    	mov    0xf088e3f8,%edx
f010a10c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a10f:	89 50 44             	mov    %edx,0x44(%eax)
f010a112:	8b 45 08             	mov    0x8(%ebp),%eax
f010a115:	8b 40 44             	mov    0x44(%eax),%eax
f010a118:	85 c0                	test   %eax,%eax
f010a11a:	74 0d                	je     f010a129 <free_environment+0x65>
f010a11c:	a1 f8 e3 88 f0       	mov    0xf088e3f8,%eax
f010a121:	8b 55 08             	mov    0x8(%ebp),%edx
f010a124:	89 50 48             	mov    %edx,0x48(%eax)
f010a127:	eb 08                	jmp    f010a131 <free_environment+0x6d>
f010a129:	8b 45 08             	mov    0x8(%ebp),%eax
f010a12c:	a3 fc e3 88 f0       	mov    %eax,0xf088e3fc
f010a131:	8b 45 08             	mov    0x8(%ebp),%eax
f010a134:	a3 f8 e3 88 f0       	mov    %eax,0xf088e3f8
f010a139:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a143:	a1 04 e4 88 f0       	mov    0xf088e404,%eax
f010a148:	40                   	inc    %eax
f010a149:	a3 04 e4 88 f0       	mov    %eax,0xf088e404
}
f010a14e:	90                   	nop
f010a14f:	c9                   	leave  
f010a150:	c3                   	ret    

f010a151 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a151:	55                   	push   %ebp
f010a152:	89 e5                	mov    %esp,%ebp
f010a154:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a157:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a15a:	89 d0                	mov    %edx,%eax
f010a15c:	01 c0                	add    %eax,%eax
f010a15e:	01 d0                	add    %edx,%eax
f010a160:	c1 e0 03             	shl    $0x3,%eax
f010a163:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a166:	83 ec 0c             	sub    $0xc,%esp
f010a169:	ff 75 f4             	pushl  -0xc(%ebp)
f010a16c:	e8 1b da ff ff       	call   f0107b8c <kmalloc>
f010a171:	83 c4 10             	add    $0x10,%esp
f010a174:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a177:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a17b:	75 17                	jne    f010a194 <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a17d:	83 ec 04             	sub    $0x4,%esp
f010a180:	68 af 6a 13 f0       	push   $0xf0136aaf
f010a185:	68 44 02 00 00       	push   $0x244
f010a18a:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a18f:	e8 71 60 ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a194:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a197:	c9                   	leave  
f010a198:	c3                   	ret    

f010a199 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a199:	55                   	push   %ebp
f010a19a:	89 e5                	mov    %esp,%ebp
f010a19c:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a19f:	83 ec 0c             	sub    $0xc,%esp
f010a1a2:	68 00 10 00 00       	push   $0x1000
f010a1a7:	e8 e0 d9 ff ff       	call   f0107b8c <kmalloc>
f010a1ac:	83 c4 10             	add    $0x10,%esp
f010a1af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a1b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a1b6:	75 17                	jne    f010a1cf <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a1b8:	83 ec 04             	sub    $0x4,%esp
f010a1bb:	68 af 6a 13 f0       	push   $0xf0136aaf
f010a1c0:	68 53 02 00 00       	push   $0x253
f010a1c5:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a1ca:	e8 36 60 ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a1cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f010a1d2:	c9                   	leave  
f010a1d3:	c3                   	ret    

f010a1d4 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a1d4:	55                   	push   %ebp
f010a1d5:	89 e5                	mov    %esp,%ebp
f010a1d7:	53                   	push   %ebx
f010a1d8:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a1db:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a1de:	8b 40 0c             	mov    0xc(%eax),%eax
f010a1e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a1e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a1e7:	8b 40 08             	mov    0x8(%eax),%eax
f010a1ea:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a1ed:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a1f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a1f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a1fa:	01 c2                	add    %eax,%edx
f010a1fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a1ff:	01 d0                	add    %edx,%eax
f010a201:	48                   	dec    %eax
f010a202:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a205:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a208:	ba 00 00 00 00       	mov    $0x0,%edx
f010a20d:	f7 75 dc             	divl   -0x24(%ebp)
f010a210:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a213:	29 d0                	sub    %edx,%eax
f010a215:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a218:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a21b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a21e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a221:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a226:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a229:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a230:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a237:	8b 45 10             	mov    0x10(%ebp),%eax
f010a23a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a240:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a247:	0f 85 c8 05 00 00    	jne    f010a815 <program_segment_alloc_map_copy_workingset+0x641>
f010a24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a250:	05 5c 05 00 00       	add    $0x55c,%eax
f010a255:	83 ec 08             	sub    $0x8,%esp
f010a258:	68 cc 6a 13 f0       	push   $0xf0136acc
f010a25d:	50                   	push   %eax
f010a25e:	e8 58 74 02 00       	call   f01316bb <strcmp>
f010a263:	83 c4 10             	add    $0x10,%esp
f010a266:	85 c0                	test   %eax,%eax
f010a268:	0f 84 a7 05 00 00    	je     f010a815 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a26e:	8b 45 14             	mov    0x14(%ebp),%eax
f010a271:	83 f8 06             	cmp    $0x6,%eax
f010a274:	76 05                	jbe    f010a27b <program_segment_alloc_map_copy_workingset+0xa7>
f010a276:	b8 06 00 00 00       	mov    $0x6,%eax
f010a27b:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a27e:	e9 92 05 00 00       	jmp    f010a815 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a283:	83 ec 0c             	sub    $0xc,%esp
f010a286:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a289:	50                   	push   %eax
f010a28a:	e8 63 c6 ff ff       	call   f01068f2 <allocate_frame>
f010a28f:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a292:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a295:	8b 45 08             	mov    0x8(%ebp),%eax
f010a298:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a29b:	6a 06                	push   $0x6
f010a29d:	ff 75 f4             	pushl  -0xc(%ebp)
f010a2a0:	52                   	push   %edx
f010a2a1:	50                   	push   %eax
f010a2a2:	e8 56 cc ff ff       	call   f0106efd <loadtime_map_frame>
f010a2a7:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a2aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2ad:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2b3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2b9:	89 d0                	mov    %edx,%eax
f010a2bb:	01 c0                	add    %eax,%eax
f010a2bd:	01 d0                	add    %edx,%eax
f010a2bf:	c1 e0 03             	shl    $0x3,%eax
f010a2c2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a2c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2c8:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a2ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2cd:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2d9:	89 d0                	mov    %edx,%eax
f010a2db:	01 c0                	add    %eax,%eax
f010a2dd:	01 d0                	add    %edx,%eax
f010a2df:	c1 e0 03             	shl    $0x3,%eax
f010a2e2:	01 c8                	add    %ecx,%eax
f010a2e4:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a2e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2eb:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2f7:	89 d0                	mov    %edx,%eax
f010a2f9:	01 c0                	add    %eax,%eax
f010a2fb:	01 d0                	add    %edx,%eax
f010a2fd:	c1 e0 03             	shl    $0x3,%eax
f010a300:	01 c8                	add    %ecx,%eax
f010a302:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a309:	83 ec 0c             	sub    $0xc,%esp
f010a30c:	6a 02                	push   $0x2
f010a30e:	e8 36 3d 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f010a313:	83 c4 10             	add    $0x10,%esp
f010a316:	85 c0                	test   %eax,%eax
f010a318:	0f 84 c8 03 00 00    	je     f010a6e6 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a31e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a321:	8b 48 78             	mov    0x78(%eax),%ecx
f010a324:	8b 45 08             	mov    0x8(%ebp),%eax
f010a327:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a32d:	89 d0                	mov    %edx,%eax
f010a32f:	01 c0                	add    %eax,%eax
f010a331:	01 d0                	add    %edx,%eax
f010a333:	c1 e0 03             	shl    $0x3,%eax
f010a336:	01 c8                	add    %ecx,%eax
f010a338:	85 c0                	test   %eax,%eax
f010a33a:	75 17                	jne    f010a353 <program_segment_alloc_map_copy_workingset+0x17f>
f010a33c:	83 ec 04             	sub    $0x4,%esp
f010a33f:	68 3a 6a 13 f0       	push   $0xf0136a3a
f010a344:	68 85 02 00 00       	push   $0x285
f010a349:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a34e:	e8 b2 5e ff ff       	call   f0100205 <_panic>
f010a353:	8b 45 08             	mov    0x8(%ebp),%eax
f010a356:	8b 48 78             	mov    0x78(%eax),%ecx
f010a359:	8b 45 08             	mov    0x8(%ebp),%eax
f010a35c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a362:	89 d0                	mov    %edx,%eax
f010a364:	01 c0                	add    %eax,%eax
f010a366:	01 d0                	add    %edx,%eax
f010a368:	c1 e0 03             	shl    $0x3,%eax
f010a36b:	01 c8                	add    %ecx,%eax
f010a36d:	8b 40 10             	mov    0x10(%eax),%eax
f010a370:	85 c0                	test   %eax,%eax
f010a372:	74 3f                	je     f010a3b3 <program_segment_alloc_map_copy_workingset+0x1df>
f010a374:	8b 45 08             	mov    0x8(%ebp),%eax
f010a377:	8b 48 78             	mov    0x78(%eax),%ecx
f010a37a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a383:	89 d0                	mov    %edx,%eax
f010a385:	01 c0                	add    %eax,%eax
f010a387:	01 d0                	add    %edx,%eax
f010a389:	c1 e0 03             	shl    $0x3,%eax
f010a38c:	01 c8                	add    %ecx,%eax
f010a38e:	8b 50 10             	mov    0x10(%eax),%edx
f010a391:	8b 45 08             	mov    0x8(%ebp),%eax
f010a394:	8b 58 78             	mov    0x78(%eax),%ebx
f010a397:	8b 45 08             	mov    0x8(%ebp),%eax
f010a39a:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a3a0:	89 c8                	mov    %ecx,%eax
f010a3a2:	01 c0                	add    %eax,%eax
f010a3a4:	01 c8                	add    %ecx,%eax
f010a3a6:	c1 e0 03             	shl    $0x3,%eax
f010a3a9:	01 d8                	add    %ebx,%eax
f010a3ab:	8b 40 14             	mov    0x14(%eax),%eax
f010a3ae:	89 42 14             	mov    %eax,0x14(%edx)
f010a3b1:	eb 26                	jmp    f010a3d9 <program_segment_alloc_map_copy_workingset+0x205>
f010a3b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3bc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3c2:	89 d0                	mov    %edx,%eax
f010a3c4:	01 c0                	add    %eax,%eax
f010a3c6:	01 d0                	add    %edx,%eax
f010a3c8:	c1 e0 03             	shl    $0x3,%eax
f010a3cb:	01 c8                	add    %ecx,%eax
f010a3cd:	8b 50 14             	mov    0x14(%eax),%edx
f010a3d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d3:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a3d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3dc:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3e8:	89 d0                	mov    %edx,%eax
f010a3ea:	01 c0                	add    %eax,%eax
f010a3ec:	01 d0                	add    %edx,%eax
f010a3ee:	c1 e0 03             	shl    $0x3,%eax
f010a3f1:	01 c8                	add    %ecx,%eax
f010a3f3:	8b 40 14             	mov    0x14(%eax),%eax
f010a3f6:	85 c0                	test   %eax,%eax
f010a3f8:	74 3f                	je     f010a439 <program_segment_alloc_map_copy_workingset+0x265>
f010a3fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3fd:	8b 48 78             	mov    0x78(%eax),%ecx
f010a400:	8b 45 08             	mov    0x8(%ebp),%eax
f010a403:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a409:	89 d0                	mov    %edx,%eax
f010a40b:	01 c0                	add    %eax,%eax
f010a40d:	01 d0                	add    %edx,%eax
f010a40f:	c1 e0 03             	shl    $0x3,%eax
f010a412:	01 c8                	add    %ecx,%eax
f010a414:	8b 50 14             	mov    0x14(%eax),%edx
f010a417:	8b 45 08             	mov    0x8(%ebp),%eax
f010a41a:	8b 58 78             	mov    0x78(%eax),%ebx
f010a41d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a420:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a426:	89 c8                	mov    %ecx,%eax
f010a428:	01 c0                	add    %eax,%eax
f010a42a:	01 c8                	add    %ecx,%eax
f010a42c:	c1 e0 03             	shl    $0x3,%eax
f010a42f:	01 d8                	add    %ebx,%eax
f010a431:	8b 40 10             	mov    0x10(%eax),%eax
f010a434:	89 42 10             	mov    %eax,0x10(%edx)
f010a437:	eb 26                	jmp    f010a45f <program_segment_alloc_map_copy_workingset+0x28b>
f010a439:	8b 45 08             	mov    0x8(%ebp),%eax
f010a43c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a43f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a442:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a448:	89 d0                	mov    %edx,%eax
f010a44a:	01 c0                	add    %eax,%eax
f010a44c:	01 d0                	add    %edx,%eax
f010a44e:	c1 e0 03             	shl    $0x3,%eax
f010a451:	01 c8                	add    %ecx,%eax
f010a453:	8b 50 10             	mov    0x10(%eax),%edx
f010a456:	8b 45 08             	mov    0x8(%ebp),%eax
f010a459:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a45f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a462:	8b 48 78             	mov    0x78(%eax),%ecx
f010a465:	8b 45 08             	mov    0x8(%ebp),%eax
f010a468:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a46e:	89 d0                	mov    %edx,%eax
f010a470:	01 c0                	add    %eax,%eax
f010a472:	01 d0                	add    %edx,%eax
f010a474:	c1 e0 03             	shl    $0x3,%eax
f010a477:	01 c8                	add    %ecx,%eax
f010a479:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a480:	8b 45 08             	mov    0x8(%ebp),%eax
f010a483:	8b 48 78             	mov    0x78(%eax),%ecx
f010a486:	8b 45 08             	mov    0x8(%ebp),%eax
f010a489:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a48f:	89 d0                	mov    %edx,%eax
f010a491:	01 c0                	add    %eax,%eax
f010a493:	01 d0                	add    %edx,%eax
f010a495:	c1 e0 03             	shl    $0x3,%eax
f010a498:	01 c8                	add    %ecx,%eax
f010a49a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a4a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a4:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a4aa:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a4ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b0:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a4b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b9:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a4bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c2:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a4c8:	48                   	dec    %eax
f010a4c9:	39 c2                	cmp    %eax,%edx
f010a4cb:	0f 83 0d 01 00 00    	jae    f010a5de <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a4d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4d4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4da:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4e0:	89 d0                	mov    %edx,%eax
f010a4e2:	01 c0                	add    %eax,%eax
f010a4e4:	01 d0                	add    %edx,%eax
f010a4e6:	c1 e0 03             	shl    $0x3,%eax
f010a4e9:	01 c8                	add    %ecx,%eax
f010a4eb:	85 c0                	test   %eax,%eax
f010a4ed:	75 17                	jne    f010a506 <program_segment_alloc_map_copy_workingset+0x332>
f010a4ef:	83 ec 04             	sub    $0x4,%esp
f010a4f2:	68 58 6a 13 f0       	push   $0xf0136a58
f010a4f7:	68 89 02 00 00       	push   $0x289
f010a4fc:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a501:	e8 ff 5c ff ff       	call   f0100205 <_panic>
f010a506:	8b 45 08             	mov    0x8(%ebp),%eax
f010a509:	8b 48 78             	mov    0x78(%eax),%ecx
f010a50c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a515:	89 d0                	mov    %edx,%eax
f010a517:	01 c0                	add    %eax,%eax
f010a519:	01 d0                	add    %edx,%eax
f010a51b:	c1 e0 03             	shl    $0x3,%eax
f010a51e:	01 c8                	add    %ecx,%eax
f010a520:	8b 55 08             	mov    0x8(%ebp),%edx
f010a523:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a529:	89 50 10             	mov    %edx,0x10(%eax)
f010a52c:	8b 40 10             	mov    0x10(%eax),%eax
f010a52f:	85 c0                	test   %eax,%eax
f010a531:	74 28                	je     f010a55b <program_segment_alloc_map_copy_workingset+0x387>
f010a533:	8b 45 08             	mov    0x8(%ebp),%eax
f010a536:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a53c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a53f:	8b 58 78             	mov    0x78(%eax),%ebx
f010a542:	8b 45 08             	mov    0x8(%ebp),%eax
f010a545:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a54b:	89 c8                	mov    %ecx,%eax
f010a54d:	01 c0                	add    %eax,%eax
f010a54f:	01 c8                	add    %ecx,%eax
f010a551:	c1 e0 03             	shl    $0x3,%eax
f010a554:	01 d8                	add    %ebx,%eax
f010a556:	89 42 14             	mov    %eax,0x14(%edx)
f010a559:	eb 24                	jmp    f010a57f <program_segment_alloc_map_copy_workingset+0x3ab>
f010a55b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a55e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a561:	8b 45 08             	mov    0x8(%ebp),%eax
f010a564:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a56a:	89 d0                	mov    %edx,%eax
f010a56c:	01 c0                	add    %eax,%eax
f010a56e:	01 d0                	add    %edx,%eax
f010a570:	c1 e0 03             	shl    $0x3,%eax
f010a573:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a576:	8b 45 08             	mov    0x8(%ebp),%eax
f010a579:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a57f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a582:	8b 48 78             	mov    0x78(%eax),%ecx
f010a585:	8b 45 08             	mov    0x8(%ebp),%eax
f010a588:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a58e:	89 d0                	mov    %edx,%eax
f010a590:	01 c0                	add    %eax,%eax
f010a592:	01 d0                	add    %edx,%eax
f010a594:	c1 e0 03             	shl    $0x3,%eax
f010a597:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a59a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a59d:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a5a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ac:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5b2:	89 d0                	mov    %edx,%eax
f010a5b4:	01 c0                	add    %eax,%eax
f010a5b6:	01 d0                	add    %edx,%eax
f010a5b8:	c1 e0 03             	shl    $0x3,%eax
f010a5bb:	01 c8                	add    %ecx,%eax
f010a5bd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a5c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c7:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a5cd:	8d 50 01             	lea    0x1(%eax),%edx
f010a5d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d3:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a5d9:	e9 08 01 00 00       	jmp    f010a6e6 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a5de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5ed:	89 d0                	mov    %edx,%eax
f010a5ef:	01 c0                	add    %eax,%eax
f010a5f1:	01 d0                	add    %edx,%eax
f010a5f3:	c1 e0 03             	shl    $0x3,%eax
f010a5f6:	01 c8                	add    %ecx,%eax
f010a5f8:	85 c0                	test   %eax,%eax
f010a5fa:	75 17                	jne    f010a613 <program_segment_alloc_map_copy_workingset+0x43f>
f010a5fc:	83 ec 04             	sub    $0x4,%esp
f010a5ff:	68 58 6a 13 f0       	push   $0xf0136a58
f010a604:	68 8e 02 00 00       	push   $0x28e
f010a609:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a60e:	e8 f2 5b ff ff       	call   f0100205 <_panic>
f010a613:	8b 45 08             	mov    0x8(%ebp),%eax
f010a616:	8b 48 78             	mov    0x78(%eax),%ecx
f010a619:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a622:	89 d0                	mov    %edx,%eax
f010a624:	01 c0                	add    %eax,%eax
f010a626:	01 d0                	add    %edx,%eax
f010a628:	c1 e0 03             	shl    $0x3,%eax
f010a62b:	01 c8                	add    %ecx,%eax
f010a62d:	8b 55 08             	mov    0x8(%ebp),%edx
f010a630:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a636:	89 50 10             	mov    %edx,0x10(%eax)
f010a639:	8b 40 10             	mov    0x10(%eax),%eax
f010a63c:	85 c0                	test   %eax,%eax
f010a63e:	74 28                	je     f010a668 <program_segment_alloc_map_copy_workingset+0x494>
f010a640:	8b 45 08             	mov    0x8(%ebp),%eax
f010a643:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a649:	8b 45 08             	mov    0x8(%ebp),%eax
f010a64c:	8b 58 78             	mov    0x78(%eax),%ebx
f010a64f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a652:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a658:	89 c8                	mov    %ecx,%eax
f010a65a:	01 c0                	add    %eax,%eax
f010a65c:	01 c8                	add    %ecx,%eax
f010a65e:	c1 e0 03             	shl    $0x3,%eax
f010a661:	01 d8                	add    %ebx,%eax
f010a663:	89 42 14             	mov    %eax,0x14(%edx)
f010a666:	eb 24                	jmp    f010a68c <program_segment_alloc_map_copy_workingset+0x4b8>
f010a668:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a66e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a671:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a677:	89 d0                	mov    %edx,%eax
f010a679:	01 c0                	add    %eax,%eax
f010a67b:	01 d0                	add    %edx,%eax
f010a67d:	c1 e0 03             	shl    $0x3,%eax
f010a680:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a683:	8b 45 08             	mov    0x8(%ebp),%eax
f010a686:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a68c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a692:	8b 45 08             	mov    0x8(%ebp),%eax
f010a695:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a69b:	89 d0                	mov    %edx,%eax
f010a69d:	01 c0                	add    %eax,%eax
f010a69f:	01 d0                	add    %edx,%eax
f010a6a1:	c1 e0 03             	shl    $0x3,%eax
f010a6a4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a6a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6aa:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a6b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6bf:	89 d0                	mov    %edx,%eax
f010a6c1:	01 c0                	add    %eax,%eax
f010a6c3:	01 d0                	add    %edx,%eax
f010a6c5:	c1 e0 03             	shl    $0x3,%eax
f010a6c8:	01 c8                	add    %ecx,%eax
f010a6ca:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a6d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d4:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a6da:	8d 50 01             	lea    0x1(%eax),%edx
f010a6dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e0:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a6e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e9:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a6ef:	8d 50 01             	lea    0x1(%eax),%edx
f010a6f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f5:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a6fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6fe:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a704:	8b 55 08             	mov    0x8(%ebp),%edx
f010a707:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a70a:	ba 00 00 00 00       	mov    $0x0,%edx
f010a70f:	f7 f1                	div    %ecx
f010a711:	8b 45 08             	mov    0x8(%ebp),%eax
f010a714:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a71a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a71d:	c1 e8 16             	shr    $0x16,%eax
f010a720:	89 c2                	mov    %eax,%edx
f010a722:	8b 45 18             	mov    0x18(%ebp),%eax
f010a725:	8b 00                	mov    (%eax),%eax
f010a727:	39 c2                	cmp    %eax,%edx
f010a729:	0f 84 cf 00 00 00    	je     f010a7fe <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a72f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a732:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a738:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a73b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a73e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a741:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a746:	89 c1                	mov    %eax,%ecx
f010a748:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a74b:	89 d0                	mov    %edx,%eax
f010a74d:	01 c0                	add    %eax,%eax
f010a74f:	01 d0                	add    %edx,%eax
f010a751:	c1 e0 03             	shl    $0x3,%eax
f010a754:	01 d8                	add    %ebx,%eax
f010a756:	83 c0 7c             	add    $0x7c,%eax
f010a759:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a75b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75e:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a764:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a767:	89 d0                	mov    %edx,%eax
f010a769:	01 c0                	add    %eax,%eax
f010a76b:	01 d0                	add    %edx,%eax
f010a76d:	c1 e0 03             	shl    $0x3,%eax
f010a770:	01 c8                	add    %ecx,%eax
f010a772:	83 e8 80             	sub    $0xffffff80,%eax
f010a775:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a778:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77b:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a781:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a784:	89 d0                	mov    %edx,%eax
f010a786:	01 c0                	add    %eax,%eax
f010a788:	01 d0                	add    %edx,%eax
f010a78a:	c1 e0 03             	shl    $0x3,%eax
f010a78d:	01 c8                	add    %ecx,%eax
f010a78f:	05 84 00 00 00       	add    $0x84,%eax
f010a794:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a79a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a79d:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a7a3:	8d 50 01             	lea    0x1(%eax),%edx
f010a7a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a9:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a7af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b2:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a7b8:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a7bd:	ba 00 00 00 00       	mov    $0x0,%edx
f010a7c2:	f7 f1                	div    %ecx
f010a7c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c7:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a7cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a7d6:	85 c0                	test   %eax,%eax
f010a7d8:	75 17                	jne    f010a7f1 <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a7da:	83 ec 04             	sub    $0x4,%esp
f010a7dd:	68 d0 6a 13 f0       	push   $0xf0136ad0
f010a7e2:	68 9e 02 00 00       	push   $0x29e
f010a7e7:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a7ec:	e8 14 5a ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a7f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7f4:	c1 e8 16             	shr    $0x16,%eax
f010a7f7:	89 c2                	mov    %eax,%edx
f010a7f9:	8b 45 18             	mov    0x18(%ebp),%eax
f010a7fc:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a7fe:	8b 45 10             	mov    0x10(%ebp),%eax
f010a801:	8b 00                	mov    (%eax),%eax
f010a803:	8d 50 01             	lea    0x1(%eax),%edx
f010a806:	8b 45 10             	mov    0x10(%ebp),%eax
f010a809:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a80b:	ff 45 f0             	incl   -0x10(%ebp)
f010a80e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a815:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a818:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a81b:	73 0c                	jae    f010a829 <program_segment_alloc_map_copy_workingset+0x655>
f010a81d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a820:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a823:	0f 82 5a fa ff ff    	jb     f010a283 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a829:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a82c:	8b 00                	mov    (%eax),%eax
f010a82e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a831:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a834:	8b 40 0c             	mov    0xc(%eax),%eax
f010a837:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a83a:	eb 10                	jmp    f010a84c <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a83c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a83f:	8a 10                	mov    (%eax),%dl
f010a841:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a844:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a846:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a849:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a84c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a84f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a852:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a855:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a85a:	89 c2                	mov    %eax,%edx
f010a85c:	8b 45 10             	mov    0x10(%ebp),%eax
f010a85f:	8b 00                	mov    (%eax),%eax
f010a861:	c1 e0 0c             	shl    $0xc,%eax
f010a864:	01 c2                	add    %eax,%edx
f010a866:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a869:	39 c2                	cmp    %eax,%edx
f010a86b:	76 1d                	jbe    f010a88a <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a86d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a870:	8b 50 04             	mov    0x4(%eax),%edx
f010a873:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a876:	01 c2                	add    %eax,%edx
f010a878:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a87b:	39 c2                	cmp    %eax,%edx
f010a87d:	77 bd                	ja     f010a83c <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a87f:	eb 09                	jmp    f010a88a <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a881:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a884:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a887:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a88a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a88d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a890:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a893:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a898:	89 c2                	mov    %eax,%edx
f010a89a:	8b 45 10             	mov    0x10(%ebp),%eax
f010a89d:	8b 00                	mov    (%eax),%eax
f010a89f:	c1 e0 0c             	shl    $0xc,%eax
f010a8a2:	01 c2                	add    %eax,%edx
f010a8a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a8a7:	39 c2                	cmp    %eax,%edx
f010a8a9:	77 d6                	ja     f010a881 <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a8ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a8b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8b3:	c9                   	leave  
f010a8b4:	c3                   	ret    

f010a8b5 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a8b5:	55                   	push   %ebp
f010a8b6:	89 e5                	mov    %esp,%ebp
f010a8b8:	53                   	push   %ebx
f010a8b9:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a8bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8bf:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a8c2:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a8c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c8:	8b 55 10             	mov    0x10(%ebp),%edx
f010a8cb:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a8ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a8d5:	eb 17                	jmp    f010a8ee <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a8d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8da:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a8dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a8e0:	c1 e2 02             	shl    $0x2,%edx
f010a8e3:	01 d0                	add    %edx,%eax
f010a8e5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a8eb:	ff 45 f4             	incl   -0xc(%ebp)
f010a8ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8f1:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a8f6:	76 df                	jbe    f010a8d7 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a8f8:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a8ff:	eb 22                	jmp    f010a923 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a901:	8b 45 08             	mov    0x8(%ebp),%eax
f010a904:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a907:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a90a:	c1 e2 02             	shl    $0x2,%edx
f010a90d:	01 c2                	add    %eax,%edx
f010a90f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f010a914:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a917:	c1 e1 02             	shl    $0x2,%ecx
f010a91a:	01 c8                	add    %ecx,%eax
f010a91c:	8b 00                	mov    (%eax),%eax
f010a91e:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a920:	ff 45 f4             	incl   -0xc(%ebp)
f010a923:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a92a:	7e d5                	jle    f010a901 <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a92c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92f:	8b 40 74             	mov    0x74(%eax),%eax
f010a932:	83 ec 08             	sub    $0x8,%esp
f010a935:	50                   	push   %eax
f010a936:	ff 75 08             	pushl  0x8(%ebp)
f010a939:	e8 13 f8 ff ff       	call   f010a151 <create_user_page_WS>
f010a93e:	83 c4 10             	add    $0x10,%esp
f010a941:	89 c2                	mov    %eax,%edx
f010a943:	8b 45 08             	mov    0x8(%ebp),%eax
f010a946:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a949:	83 ec 0c             	sub    $0xc,%esp
f010a94c:	ff 75 08             	pushl  0x8(%ebp)
f010a94f:	e8 f3 04 00 00       	call   f010ae47 <share_pws_at_user_space>
f010a954:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a957:	83 ec 0c             	sub    $0xc,%esp
f010a95a:	6a 02                	push   $0x2
f010a95c:	e8 e8 36 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f010a961:	83 c4 10             	add    $0x10,%esp
f010a964:	85 c0                	test   %eax,%eax
f010a966:	0f 84 04 01 00 00    	je     f010aa70 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a96c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a973:	e9 e7 00 00 00       	jmp    f010aa5f <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a978:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a97e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a981:	89 d0                	mov    %edx,%eax
f010a983:	01 c0                	add    %eax,%eax
f010a985:	01 d0                	add    %edx,%eax
f010a987:	c1 e0 03             	shl    $0x3,%eax
f010a98a:	01 c8                	add    %ecx,%eax
f010a98c:	85 c0                	test   %eax,%eax
f010a98e:	75 17                	jne    f010a9a7 <initialize_environment+0xf2>
f010a990:	83 ec 04             	sub    $0x4,%esp
f010a993:	68 58 6a 13 f0       	push   $0xf0136a58
f010a998:	68 fc 02 00 00       	push   $0x2fc
f010a99d:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010a9a2:	e8 5e 58 ff ff       	call   f0100205 <_panic>
f010a9a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9aa:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a9b0:	89 d0                	mov    %edx,%eax
f010a9b2:	01 c0                	add    %eax,%eax
f010a9b4:	01 d0                	add    %edx,%eax
f010a9b6:	c1 e0 03             	shl    $0x3,%eax
f010a9b9:	01 c8                	add    %ecx,%eax
f010a9bb:	8b 55 08             	mov    0x8(%ebp),%edx
f010a9be:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a9c4:	89 50 10             	mov    %edx,0x10(%eax)
f010a9c7:	8b 40 10             	mov    0x10(%eax),%eax
f010a9ca:	85 c0                	test   %eax,%eax
f010a9cc:	74 22                	je     f010a9f0 <initialize_environment+0x13b>
f010a9ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d1:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a9d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9da:	8b 58 78             	mov    0x78(%eax),%ebx
f010a9dd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a9e0:	89 c8                	mov    %ecx,%eax
f010a9e2:	01 c0                	add    %eax,%eax
f010a9e4:	01 c8                	add    %ecx,%eax
f010a9e6:	c1 e0 03             	shl    $0x3,%eax
f010a9e9:	01 d8                	add    %ebx,%eax
f010a9eb:	89 42 14             	mov    %eax,0x14(%edx)
f010a9ee:	eb 1e                	jmp    f010aa0e <initialize_environment+0x159>
f010a9f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a9f9:	89 d0                	mov    %edx,%eax
f010a9fb:	01 c0                	add    %eax,%eax
f010a9fd:	01 d0                	add    %edx,%eax
f010a9ff:	c1 e0 03             	shl    $0x3,%eax
f010aa02:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010aa05:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa08:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010aa0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa11:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa14:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa17:	89 d0                	mov    %edx,%eax
f010aa19:	01 c0                	add    %eax,%eax
f010aa1b:	01 d0                	add    %edx,%eax
f010aa1d:	c1 e0 03             	shl    $0x3,%eax
f010aa20:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010aa23:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa26:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010aa2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa2f:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa32:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa35:	89 d0                	mov    %edx,%eax
f010aa37:	01 c0                	add    %eax,%eax
f010aa39:	01 d0                	add    %edx,%eax
f010aa3b:	c1 e0 03             	shl    $0x3,%eax
f010aa3e:	01 c8                	add    %ecx,%eax
f010aa40:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010aa47:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa4a:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010aa50:	8d 50 01             	lea    0x1(%eax),%edx
f010aa53:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa56:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010aa5c:	ff 45 f0             	incl   -0x10(%ebp)
f010aa5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa62:	8b 50 74             	mov    0x74(%eax),%edx
f010aa65:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aa68:	39 c2                	cmp    %eax,%edx
f010aa6a:	0f 87 08 ff ff ff    	ja     f010a978 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010aa70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aa77:	eb 50                	jmp    f010aac9 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010aa79:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa7c:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa82:	89 d0                	mov    %edx,%eax
f010aa84:	01 c0                	add    %eax,%eax
f010aa86:	01 d0                	add    %edx,%eax
f010aa88:	c1 e0 03             	shl    $0x3,%eax
f010aa8b:	01 c8                	add    %ecx,%eax
f010aa8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010aa93:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa96:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa9c:	89 d0                	mov    %edx,%eax
f010aa9e:	01 c0                	add    %eax,%eax
f010aaa0:	01 d0                	add    %edx,%eax
f010aaa2:	c1 e0 03             	shl    $0x3,%eax
f010aaa5:	01 c8                	add    %ecx,%eax
f010aaa7:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010aaab:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaae:	8b 48 78             	mov    0x78(%eax),%ecx
f010aab1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aab4:	89 d0                	mov    %edx,%eax
f010aab6:	01 c0                	add    %eax,%eax
f010aab8:	01 d0                	add    %edx,%eax
f010aaba:	c1 e0 03             	shl    $0x3,%eax
f010aabd:	01 c8                	add    %ecx,%eax
f010aabf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010aac6:	ff 45 f4             	incl   -0xc(%ebp)
f010aac9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aacc:	8b 50 74             	mov    0x74(%eax),%edx
f010aacf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aad2:	39 c2                	cmp    %eax,%edx
f010aad4:	77 a3                	ja     f010aa79 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010aad6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad9:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010aae0:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010aae3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aaea:	eb 50                	jmp    f010ab3c <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010aaec:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aaef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaf2:	89 d0                	mov    %edx,%eax
f010aaf4:	01 c0                	add    %eax,%eax
f010aaf6:	01 d0                	add    %edx,%eax
f010aaf8:	c1 e0 03             	shl    $0x3,%eax
f010aafb:	01 c8                	add    %ecx,%eax
f010aafd:	83 c0 7c             	add    $0x7c,%eax
f010ab00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010ab06:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ab09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab0c:	89 d0                	mov    %edx,%eax
f010ab0e:	01 c0                	add    %eax,%eax
f010ab10:	01 d0                	add    %edx,%eax
f010ab12:	c1 e0 03             	shl    $0x3,%eax
f010ab15:	01 c8                	add    %ecx,%eax
f010ab17:	83 e8 80             	sub    $0xffffff80,%eax
f010ab1a:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010ab1d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ab20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab23:	89 d0                	mov    %edx,%eax
f010ab25:	01 c0                	add    %eax,%eax
f010ab27:	01 d0                	add    %edx,%eax
f010ab29:	c1 e0 03             	shl    $0x3,%eax
f010ab2c:	01 c8                	add    %ecx,%eax
f010ab2e:	05 84 00 00 00       	add    $0x84,%eax
f010ab33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ab39:	ff 45 f4             	incl   -0xc(%ebp)
f010ab3c:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010ab40:	7e aa                	jle    f010aaec <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010ab42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab45:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010ab4c:	00 00 00 

	e->pageFaultsCounter=0;
f010ab4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab52:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010ab59:	00 00 00 
	e->tableFaultsCounter=0;
f010ab5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5f:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010ab66:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ab69:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab6c:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010ab73:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010ab76:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab79:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010ab80:	00 00 00 

	e->nModifiedPages=0;
f010ab83:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab86:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010ab8d:	00 00 00 
	e->nNotModifiedPages=0;
f010ab90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab93:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010ab9a:	00 00 00 
	e->nClocks = 0;
f010ab9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010aba0:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010aba7:	00 00 00 

	//2020
	e->nPageIn = 0;
f010abaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010abad:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010abb4:	00 00 00 
	e->nPageOut = 0;
f010abb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abba:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010abc1:	00 00 00 
	e->nNewPageAdded = 0;
f010abc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abc7:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010abce:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010abd1:	83 ec 0c             	sub    $0xc,%esp
f010abd4:	ff 75 08             	pushl  0x8(%ebp)
f010abd7:	e8 09 00 00 00       	call   f010abe5 <complete_environment_initialization>
f010abdc:	83 c4 10             	add    $0x10,%esp
}
f010abdf:	90                   	nop
f010abe0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010abe3:	c9                   	leave  
f010abe4:	c3                   	ret    

f010abe5 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010abe5:	55                   	push   %ebp
f010abe6:	89 e5                	mov    %esp,%ebp
f010abe8:	53                   	push   %ebx
f010abe9:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010abec:	8b 45 08             	mov    0x8(%ebp),%eax
f010abef:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abf2:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010abf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010abfb:	8b 40 60             	mov    0x60(%eax),%eax
f010abfe:	83 c8 03             	or     $0x3,%eax
f010ac01:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010ac03:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac06:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac09:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010ac0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac12:	8b 40 60             	mov    0x60(%eax),%eax
f010ac15:	83 c8 05             	or     $0x5,%eax
f010ac18:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010ac1a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac1d:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010ac24:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac27:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010ac2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac31:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010ac38:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac3b:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010ac42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac45:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010ac48:	83 ec 0c             	sub    $0xc,%esp
f010ac4b:	68 b1 02 00 00       	push   $0x2b1
f010ac50:	e8 01 57 02 00       	call   f0130356 <log2_ceil>
f010ac55:	83 c4 10             	add    $0x10,%esp
f010ac58:	ba 01 00 00 00       	mov    $0x1,%edx
f010ac5d:	88 c1                	mov    %al,%cl
f010ac5f:	d3 e2                	shl    %cl,%edx
f010ac61:	89 d0                	mov    %edx,%eax
f010ac63:	01 d8                	add    %ebx,%eax
f010ac65:	89 c3                	mov    %eax,%ebx
f010ac67:	83 ec 0c             	sub    $0xc,%esp
f010ac6a:	68 b1 02 00 00       	push   $0x2b1
f010ac6f:	e8 ad 56 02 00       	call   f0130321 <nearest_pow2_ceil>
f010ac74:	83 c4 10             	add    $0x10,%esp
f010ac77:	f7 d8                	neg    %eax
f010ac79:	21 d8                	and    %ebx,%eax
f010ac7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010ac7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ac82:	7f 1e                	jg     f010aca2 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010ac84:	83 ec 0c             	sub    $0xc,%esp
f010ac87:	68 b1 02 00 00       	push   $0x2b1
f010ac8c:	e8 c5 56 02 00       	call   f0130356 <log2_ceil>
f010ac91:	83 c4 10             	add    $0x10,%esp
f010ac94:	ba 01 00 00 00       	mov    $0x1,%edx
f010ac99:	88 c1                	mov    %al,%cl
f010ac9b:	d3 e2                	shl    %cl,%edx
f010ac9d:	89 d0                	mov    %edx,%eax
f010ac9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010aca2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aca5:	8b 15 f0 e3 88 f0    	mov    0xf088e3f0,%edx
f010acab:	29 d0                	sub    %edx,%eax
f010acad:	c1 f8 04             	sar    $0x4,%eax
f010acb0:	89 c2                	mov    %eax,%edx
f010acb2:	89 d0                	mov    %edx,%eax
f010acb4:	c1 e0 03             	shl    $0x3,%eax
f010acb7:	01 d0                	add    %edx,%eax
f010acb9:	01 c0                	add    %eax,%eax
f010acbb:	01 d0                	add    %edx,%eax
f010acbd:	c1 e0 03             	shl    $0x3,%eax
f010acc0:	01 d0                	add    %edx,%eax
f010acc2:	89 c1                	mov    %eax,%ecx
f010acc4:	c1 e1 08             	shl    $0x8,%ecx
f010acc7:	01 c8                	add    %ecx,%eax
f010acc9:	01 c0                	add    %eax,%eax
f010accb:	01 d0                	add    %edx,%eax
f010accd:	01 c0                	add    %eax,%eax
f010accf:	01 d0                	add    %edx,%eax
f010acd1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010acd8:	01 d0                	add    %edx,%eax
f010acda:	89 c2                	mov    %eax,%edx
f010acdc:	c1 e2 09             	shl    $0x9,%edx
f010acdf:	29 c2                	sub    %eax,%edx
f010ace1:	89 d0                	mov    %edx,%eax
f010ace3:	f7 d8                	neg    %eax
f010ace5:	0b 45 f4             	or     -0xc(%ebp),%eax
f010ace8:	89 c2                	mov    %eax,%edx
f010acea:	8b 45 08             	mov    0x8(%ebp),%eax
f010aced:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010acf0:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010acf5:	85 c0                	test   %eax,%eax
f010acf7:	75 0c                	jne    f010ad05 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010acf9:	8b 45 08             	mov    0x8(%ebp),%eax
f010acfc:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010ad03:	eb 0e                	jmp    f010ad13 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010ad05:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010ad0a:	8b 50 4c             	mov    0x4c(%eax),%edx
f010ad0d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad10:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ad13:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad16:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010ad1d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad20:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010ad27:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2a:	83 ec 04             	sub    $0x4,%esp
f010ad2d:	6a 44                	push   $0x44
f010ad2f:	6a 00                	push   $0x0
f010ad31:	50                   	push   %eax
f010ad32:	e8 66 6a 02 00       	call   f013179d <memset>
f010ad37:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010ad3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad3d:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010ad43:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad46:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010ad4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad4f:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010ad55:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad58:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010ad5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad62:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010ad68:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6b:	8b 40 38             	mov    0x38(%eax),%eax
f010ad6e:	80 cc 02             	or     $0x2,%ah
f010ad71:	89 c2                	mov    %eax,%edx
f010ad73:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad76:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ad79:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ad7d:	75 17                	jne    f010ad96 <complete_environment_initialization+0x1b1>
f010ad7f:	83 ec 04             	sub    $0x4,%esp
f010ad82:	68 3a 6a 13 f0       	push   $0xf0136a3a
f010ad87:	68 60 03 00 00       	push   $0x360
f010ad8c:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010ad91:	e8 6f 54 ff ff       	call   f0100205 <_panic>
f010ad96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad99:	8b 40 44             	mov    0x44(%eax),%eax
f010ad9c:	85 c0                	test   %eax,%eax
f010ad9e:	74 11                	je     f010adb1 <complete_environment_initialization+0x1cc>
f010ada0:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada3:	8b 40 44             	mov    0x44(%eax),%eax
f010ada6:	8b 55 08             	mov    0x8(%ebp),%edx
f010ada9:	8b 52 48             	mov    0x48(%edx),%edx
f010adac:	89 50 48             	mov    %edx,0x48(%eax)
f010adaf:	eb 0b                	jmp    f010adbc <complete_environment_initialization+0x1d7>
f010adb1:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb4:	8b 40 48             	mov    0x48(%eax),%eax
f010adb7:	a3 fc e3 88 f0       	mov    %eax,0xf088e3fc
f010adbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbf:	8b 40 48             	mov    0x48(%eax),%eax
f010adc2:	85 c0                	test   %eax,%eax
f010adc4:	74 11                	je     f010add7 <complete_environment_initialization+0x1f2>
f010adc6:	8b 45 08             	mov    0x8(%ebp),%eax
f010adc9:	8b 40 48             	mov    0x48(%eax),%eax
f010adcc:	8b 55 08             	mov    0x8(%ebp),%edx
f010adcf:	8b 52 44             	mov    0x44(%edx),%edx
f010add2:	89 50 44             	mov    %edx,0x44(%eax)
f010add5:	eb 0b                	jmp    f010ade2 <complete_environment_initialization+0x1fd>
f010add7:	8b 45 08             	mov    0x8(%ebp),%eax
f010adda:	8b 40 44             	mov    0x44(%eax),%eax
f010addd:	a3 f8 e3 88 f0       	mov    %eax,0xf088e3f8
f010ade2:	8b 45 08             	mov    0x8(%ebp),%eax
f010ade5:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010adec:	8b 45 08             	mov    0x8(%ebp),%eax
f010adef:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010adf6:	a1 04 e4 88 f0       	mov    0xf088e404,%eax
f010adfb:	48                   	dec    %eax
f010adfc:	a3 04 e4 88 f0       	mov    %eax,0xf088e404
	return ;
f010ae01:	90                   	nop
}
f010ae02:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ae05:	c9                   	leave  
f010ae06:	c3                   	ret    

f010ae07 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ae07:	55                   	push   %ebp
f010ae08:	89 e5                	mov    %esp,%ebp
f010ae0a:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ae0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae10:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ae13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae16:	8b 00                	mov    (%eax),%eax
f010ae18:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ae1d:	74 17                	je     f010ae36 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ae1f:	83 ec 04             	sub    $0x4,%esp
f010ae22:	68 73 6b 13 f0       	push   $0xf0136b73
f010ae27:	68 6c 03 00 00       	push   $0x36c
f010ae2c:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010ae31:	e8 cf 53 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ae36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae39:	8b 40 18             	mov    0x18(%eax),%eax
f010ae3c:	89 c2                	mov    %eax,%edx
f010ae3e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae41:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ae44:	90                   	nop
f010ae45:	c9                   	leave  
f010ae46:	c3                   	ret    

f010ae47 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010ae47:	55                   	push   %ebp
f010ae48:	89 e5                	mov    %esp,%ebp
f010ae4a:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010ae4d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae50:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010ae57:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010ae5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5d:	8b 40 78             	mov    0x78(%eax),%eax
f010ae60:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ae63:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae66:	8b 50 74             	mov    0x74(%eax),%edx
f010ae69:	89 d0                	mov    %edx,%eax
f010ae6b:	01 c0                	add    %eax,%eax
f010ae6d:	01 d0                	add    %edx,%eax
f010ae6f:	c1 e0 03             	shl    $0x3,%eax
f010ae72:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010ae75:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae78:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ae7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ae81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae84:	8b 40 78             	mov    0x78(%eax),%eax
f010ae87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae8a:	eb 71                	jmp    f010aefd <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010ae8c:	83 ec 0c             	sub    $0xc,%esp
f010ae8f:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae92:	e8 13 cf ff ff       	call   f0107daa <kheap_physical_address>
f010ae97:	83 c4 10             	add    $0x10,%esp
f010ae9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010ae9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aea3:	83 ec 04             	sub    $0x4,%esp
f010aea6:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010aea9:	52                   	push   %edx
f010aeaa:	ff 75 f0             	pushl  -0x10(%ebp)
f010aead:	50                   	push   %eax
f010aeae:	e8 fe bb ff ff       	call   f0106ab1 <get_page_table>
f010aeb3:	83 c4 10             	add    $0x10,%esp
f010aeb6:	83 f8 01             	cmp    $0x1,%eax
f010aeb9:	75 18                	jne    f010aed3 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010aebb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebe:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aec1:	83 ec 08             	sub    $0x8,%esp
f010aec4:	ff 75 f0             	pushl  -0x10(%ebp)
f010aec7:	50                   	push   %eax
f010aec8:	e8 3a bd ff ff       	call   f0106c07 <create_page_table>
f010aecd:	83 c4 10             	add    $0x10,%esp
f010aed0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010aed3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aed6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aed9:	c1 ea 0c             	shr    $0xc,%edx
f010aedc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010aee2:	c1 e2 02             	shl    $0x2,%edx
f010aee5:	01 d0                	add    %edx,%eax
f010aee7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010aeea:	83 ca 05             	or     $0x5,%edx
f010aeed:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010aeef:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010aef6:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010aefd:	8b 45 08             	mov    0x8(%ebp),%eax
f010af00:	8b 40 78             	mov    0x78(%eax),%eax
f010af03:	89 c2                	mov    %eax,%edx
f010af05:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010af08:	01 d0                	add    %edx,%eax
f010af0a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010af0d:	0f 87 79 ff ff ff    	ja     f010ae8c <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010af13:	90                   	nop
f010af14:	c9                   	leave  
f010af15:	c3                   	ret    

f010af16 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010af16:	55                   	push   %ebp
f010af17:	89 e5                	mov    %esp,%ebp
f010af19:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010af1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af1f:	8b 50 74             	mov    0x74(%eax),%edx
f010af22:	89 d0                	mov    %edx,%eax
f010af24:	01 c0                	add    %eax,%eax
f010af26:	01 d0                	add    %edx,%eax
f010af28:	c1 e0 03             	shl    $0x3,%eax
f010af2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010af2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010af31:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010af37:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010af3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010af3d:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010af43:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010af46:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010af49:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010af4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010af51:	eb 46                	jmp    f010af99 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010af53:	8b 45 08             	mov    0x8(%ebp),%eax
f010af56:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af59:	83 ec 04             	sub    $0x4,%esp
f010af5c:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010af5f:	52                   	push   %edx
f010af60:	ff 75 f4             	pushl  -0xc(%ebp)
f010af63:	50                   	push   %eax
f010af64:	e8 48 bb ff ff       	call   f0106ab1 <get_page_table>
f010af69:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010af6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010af6f:	83 ec 0c             	sub    $0xc,%esp
f010af72:	50                   	push   %eax
f010af73:	e8 df cc ff ff       	call   f0107c57 <kfree>
f010af78:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010af7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af7e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af84:	c1 ea 16             	shr    $0x16,%edx
f010af87:	c1 e2 02             	shl    $0x2,%edx
f010af8a:	01 d0                	add    %edx,%eax
f010af8c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010af92:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010af99:	8b 45 08             	mov    0x8(%ebp),%eax
f010af9c:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010afa2:	89 c2                	mov    %eax,%edx
f010afa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010afa7:	01 d0                	add    %edx,%eax
f010afa9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010afac:	77 a5                	ja     f010af53 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010afae:	0f 20 d8             	mov    %cr3,%eax
f010afb1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010afb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010afb7:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010afba:	90                   	nop
f010afbb:	c9                   	leave  
f010afbc:	c3                   	ret    

f010afbd <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010afbd:	55                   	push   %ebp
f010afbe:	89 e5                	mov    %esp,%ebp
f010afc0:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010afc3:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc6:	8b 40 10             	mov    0x10(%eax),%eax
f010afc9:	8d 48 01             	lea    0x1(%eax),%ecx
f010afcc:	8b 55 08             	mov    0x8(%ebp),%edx
f010afcf:	89 4a 10             	mov    %ecx,0x10(%edx)
f010afd2:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010afd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010afdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010afde:	8b 00                	mov    (%eax),%eax
f010afe0:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010afe5:	74 17                	je     f010affe <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010afe7:	83 ec 04             	sub    $0x4,%esp
f010afea:	68 73 6b 13 f0       	push   $0xf0136b73
f010afef:	68 b6 03 00 00       	push   $0x3b6
f010aff4:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010aff9:	e8 07 52 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010affe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b001:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b004:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b007:	01 d0                	add    %edx,%eax
f010b009:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b00c:	eb 0f                	jmp    f010b01d <PROGRAM_SEGMENT_NEXT+0x60>
f010b00e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b011:	8b 40 10             	mov    0x10(%eax),%eax
f010b014:	8d 50 01             	lea    0x1(%eax),%edx
f010b017:	8b 45 08             	mov    0x8(%ebp),%eax
f010b01a:	89 50 10             	mov    %edx,0x10(%eax)
f010b01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b020:	8b 40 10             	mov    0x10(%eax),%eax
f010b023:	c1 e0 05             	shl    $0x5,%eax
f010b026:	89 c2                	mov    %eax,%edx
f010b028:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b02b:	01 d0                	add    %edx,%eax
f010b02d:	8b 00                	mov    (%eax),%eax
f010b02f:	83 f8 01             	cmp    $0x1,%eax
f010b032:	74 13                	je     f010b047 <PROGRAM_SEGMENT_NEXT+0x8a>
f010b034:	8b 45 08             	mov    0x8(%ebp),%eax
f010b037:	8b 50 10             	mov    0x10(%eax),%edx
f010b03a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b03d:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b040:	0f b7 c0             	movzwl %ax,%eax
f010b043:	39 c2                	cmp    %eax,%edx
f010b045:	72 c7                	jb     f010b00e <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b047:	8b 45 08             	mov    0x8(%ebp),%eax
f010b04a:	8b 40 10             	mov    0x10(%eax),%eax
f010b04d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b050:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b053:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b056:	0f b7 c0             	movzwl %ax,%eax
f010b059:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b05c:	7e 63                	jle    f010b0c1 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b05e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b061:	c1 e0 05             	shl    $0x5,%eax
f010b064:	89 c2                	mov    %eax,%edx
f010b066:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b069:	01 d0                	add    %edx,%eax
f010b06b:	8b 50 04             	mov    0x4(%eax),%edx
f010b06e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b071:	01 c2                	add    %eax,%edx
f010b073:	8b 45 08             	mov    0x8(%ebp),%eax
f010b076:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b078:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b07b:	c1 e0 05             	shl    $0x5,%eax
f010b07e:	89 c2                	mov    %eax,%edx
f010b080:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b083:	01 d0                	add    %edx,%eax
f010b085:	8b 50 14             	mov    0x14(%eax),%edx
f010b088:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08b:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b08e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b091:	c1 e0 05             	shl    $0x5,%eax
f010b094:	89 c2                	mov    %eax,%edx
f010b096:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b099:	01 d0                	add    %edx,%eax
f010b09b:	8b 50 10             	mov    0x10(%eax),%edx
f010b09e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a1:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b0a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0a7:	c1 e0 05             	shl    $0x5,%eax
f010b0aa:	89 c2                	mov    %eax,%edx
f010b0ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0af:	01 d0                	add    %edx,%eax
f010b0b1:	8b 40 08             	mov    0x8(%eax),%eax
f010b0b4:	89 c2                	mov    %eax,%edx
f010b0b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b9:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b0bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0bf:	eb 05                	jmp    f010b0c6 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b0c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b0c6:	c9                   	leave  
f010b0c7:	c3                   	ret    

f010b0c8 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b0c8:	55                   	push   %ebp
f010b0c9:	89 e5                	mov    %esp,%ebp
f010b0cb:	57                   	push   %edi
f010b0cc:	56                   	push   %esi
f010b0cd:	53                   	push   %ebx
f010b0ce:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b0d1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b0d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b0db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b0de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b0e1:	8b 00                	mov    (%eax),%eax
f010b0e3:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b0e8:	74 17                	je     f010b101 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b0ea:	83 ec 04             	sub    $0x4,%esp
f010b0ed:	68 73 6b 13 f0       	push   $0xf0136b73
f010b0f2:	68 d2 03 00 00       	push   $0x3d2
f010b0f7:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010b0fc:	e8 04 51 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b101:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b104:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b107:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b10a:	01 d0                	add    %edx,%eax
f010b10c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b10f:	eb 07                	jmp    f010b118 <PROGRAM_SEGMENT_FIRST+0x50>
f010b111:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b114:	40                   	inc    %eax
f010b115:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b118:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b11b:	c1 e0 05             	shl    $0x5,%eax
f010b11e:	89 c2                	mov    %eax,%edx
f010b120:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b123:	01 d0                	add    %edx,%eax
f010b125:	8b 00                	mov    (%eax),%eax
f010b127:	83 f8 01             	cmp    $0x1,%eax
f010b12a:	74 10                	je     f010b13c <PROGRAM_SEGMENT_FIRST+0x74>
f010b12c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b12f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b132:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b135:	0f b7 c0             	movzwl %ax,%eax
f010b138:	39 c2                	cmp    %eax,%edx
f010b13a:	72 d5                	jb     f010b111 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b13c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b13f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b142:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b145:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b148:	0f b7 c0             	movzwl %ax,%eax
f010b14b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b14e:	7e 68                	jle    f010b1b8 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b150:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b153:	c1 e0 05             	shl    $0x5,%eax
f010b156:	89 c2                	mov    %eax,%edx
f010b158:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b15b:	01 d0                	add    %edx,%eax
f010b15d:	8b 50 04             	mov    0x4(%eax),%edx
f010b160:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b163:	01 d0                	add    %edx,%eax
f010b165:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b168:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b16b:	c1 e0 05             	shl    $0x5,%eax
f010b16e:	89 c2                	mov    %eax,%edx
f010b170:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b173:	01 d0                	add    %edx,%eax
f010b175:	8b 40 14             	mov    0x14(%eax),%eax
f010b178:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b17b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b17e:	c1 e0 05             	shl    $0x5,%eax
f010b181:	89 c2                	mov    %eax,%edx
f010b183:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b186:	01 d0                	add    %edx,%eax
f010b188:	8b 40 10             	mov    0x10(%eax),%eax
f010b18b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b18e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b191:	c1 e0 05             	shl    $0x5,%eax
f010b194:	89 c2                	mov    %eax,%edx
f010b196:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b199:	01 d0                	add    %edx,%eax
f010b19b:	8b 40 08             	mov    0x8(%eax),%eax
f010b19e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b1a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1a4:	89 c3                	mov    %eax,%ebx
f010b1a6:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b1a9:	ba 05 00 00 00       	mov    $0x5,%edx
f010b1ae:	89 df                	mov    %ebx,%edi
f010b1b0:	89 c6                	mov    %eax,%esi
f010b1b2:	89 d1                	mov    %edx,%ecx
f010b1b4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b1b6:	eb 1c                	jmp    f010b1d4 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b1b8:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c2:	89 c3                	mov    %eax,%ebx
f010b1c4:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b1c7:	ba 05 00 00 00       	mov    $0x5,%edx
f010b1cc:	89 df                	mov    %ebx,%edi
f010b1ce:	89 c6                	mov    %eax,%esi
f010b1d0:	89 d1                	mov    %edx,%ecx
f010b1d2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b1d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1d7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b1da:	5b                   	pop    %ebx
f010b1db:	5e                   	pop    %esi
f010b1dc:	5f                   	pop    %edi
f010b1dd:	5d                   	pop    %ebp
f010b1de:	c2 04 00             	ret    $0x4

f010b1e1 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b1e1:	55                   	push   %ebp
f010b1e2:	89 e5                	mov    %esp,%ebp
f010b1e4:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b1e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b1ee:	a1 b8 ec 88 f0       	mov    0xf088ecb8,%eax
f010b1f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b1f6:	e9 c3 00 00 00       	jmp    f010b2be <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b1fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b1fe:	8b 40 10             	mov    0x10(%eax),%eax
f010b201:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b204:	0f 85 ac 00 00 00    	jne    f010b2b6 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b20a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b20d:	8b 50 0c             	mov    0xc(%eax),%edx
f010b210:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b213:	8b 40 10             	mov    0x10(%eax),%eax
f010b216:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b219:	83 ec 08             	sub    $0x8,%esp
f010b21c:	52                   	push   %edx
f010b21d:	50                   	push   %eax
f010b21e:	e8 a0 cd ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f010b223:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b226:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b22a:	75 17                	jne    f010b243 <cleanup_buffers+0x62>
f010b22c:	83 ec 04             	sub    $0x4,%esp
f010b22f:	68 3a 6a 13 f0       	push   $0xf0136a3a
f010b234:	68 f9 03 00 00       	push   $0x3f9
f010b239:	68 1d 6a 13 f0       	push   $0xf0136a1d
f010b23e:	e8 c2 4f ff ff       	call   f0100205 <_panic>
f010b243:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b246:	8b 00                	mov    (%eax),%eax
f010b248:	85 c0                	test   %eax,%eax
f010b24a:	74 10                	je     f010b25c <cleanup_buffers+0x7b>
f010b24c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b24f:	8b 00                	mov    (%eax),%eax
f010b251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b254:	8b 52 04             	mov    0x4(%edx),%edx
f010b257:	89 50 04             	mov    %edx,0x4(%eax)
f010b25a:	eb 0b                	jmp    f010b267 <cleanup_buffers+0x86>
f010b25c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b25f:	8b 40 04             	mov    0x4(%eax),%eax
f010b262:	a3 bc ec 88 f0       	mov    %eax,0xf088ecbc
f010b267:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b26a:	8b 40 04             	mov    0x4(%eax),%eax
f010b26d:	85 c0                	test   %eax,%eax
f010b26f:	74 0f                	je     f010b280 <cleanup_buffers+0x9f>
f010b271:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b274:	8b 40 04             	mov    0x4(%eax),%eax
f010b277:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b27a:	8b 12                	mov    (%edx),%edx
f010b27c:	89 10                	mov    %edx,(%eax)
f010b27e:	eb 0a                	jmp    f010b28a <cleanup_buffers+0xa9>
f010b280:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b283:	8b 00                	mov    (%eax),%eax
f010b285:	a3 b8 ec 88 f0       	mov    %eax,0xf088ecb8
f010b28a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b28d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b293:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b296:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b29d:	a1 c4 ec 88 f0       	mov    0xf088ecc4,%eax
f010b2a2:	48                   	dec    %eax
f010b2a3:	a3 c4 ec 88 f0       	mov    %eax,0xf088ecc4

			free_frame(ptr_fi);
f010b2a8:	83 ec 0c             	sub    $0xc,%esp
f010b2ab:	ff 75 f4             	pushl  -0xc(%ebp)
f010b2ae:	e8 54 b7 ff ff       	call   f0106a07 <free_frame>
f010b2b3:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b2b6:	a1 c0 ec 88 f0       	mov    0xf088ecc0,%eax
f010b2bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b2be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b2c2:	74 07                	je     f010b2cb <cleanup_buffers+0xea>
f010b2c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2c7:	8b 00                	mov    (%eax),%eax
f010b2c9:	eb 05                	jmp    f010b2d0 <cleanup_buffers+0xef>
f010b2cb:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2d0:	a3 c0 ec 88 f0       	mov    %eax,0xf088ecc0
f010b2d5:	a1 c0 ec 88 f0       	mov    0xf088ecc0,%eax
f010b2da:	85 c0                	test   %eax,%eax
f010b2dc:	0f 85 19 ff ff ff    	jne    f010b1fb <cleanup_buffers+0x1a>
f010b2e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b2e6:	0f 85 0f ff ff ff    	jne    f010b1fb <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b2ec:	90                   	nop
f010b2ed:	c9                   	leave  
f010b2ee:	c3                   	ret    

f010b2ef <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b2ef:	55                   	push   %ebp
f010b2f0:	89 e5                	mov    %esp,%ebp
f010b2f2:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b2f5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b2f9:	7e 06                	jle    f010b301 <set_program_priority+0x12>
f010b2fb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b2ff:	7e 14                	jle    f010b315 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b301:	83 ec 04             	sub    $0x4,%esp
f010b304:	68 8c 6b 13 f0       	push   $0xf0136b8c
f010b309:	6a 10                	push   $0x10
f010b30b:	68 b0 6b 13 f0       	push   $0xf0136bb0
f010b310:	e8 f0 4e ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b315:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b319:	74 75                	je     f010b390 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b31b:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b31f:	77 56                	ja     f010b377 <set_program_priority+0x88>
f010b321:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b324:	c1 e0 02             	shl    $0x2,%eax
f010b327:	05 ec 6b 13 f0       	add    $0xf0136bec,%eax
f010b32c:	8b 00                	mov    (%eax),%eax
f010b32e:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b330:	83 ec 08             	sub    $0x8,%esp
f010b333:	6a 01                	push   $0x1
f010b335:	ff 75 08             	pushl  0x8(%ebp)
f010b338:	e8 fd d6 ff ff       	call   f0108a3a <half_WS_Size>
f010b33d:	83 c4 10             	add    $0x10,%esp
			break;
f010b340:	eb 35                	jmp    f010b377 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b342:	83 ec 08             	sub    $0x8,%esp
f010b345:	6a 00                	push   $0x0
f010b347:	ff 75 08             	pushl  0x8(%ebp)
f010b34a:	e8 eb d6 ff ff       	call   f0108a3a <half_WS_Size>
f010b34f:	83 c4 10             	add    $0x10,%esp
			break;
f010b352:	eb 23                	jmp    f010b377 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b354:	83 ec 08             	sub    $0x8,%esp
f010b357:	6a 01                	push   $0x1
f010b359:	ff 75 08             	pushl  0x8(%ebp)
f010b35c:	e8 bc d6 ff ff       	call   f0108a1d <double_WS_Size>
f010b361:	83 c4 10             	add    $0x10,%esp
			break;
f010b364:	eb 11                	jmp    f010b377 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b366:	83 ec 08             	sub    $0x8,%esp
f010b369:	6a 00                	push   $0x0
f010b36b:	ff 75 08             	pushl  0x8(%ebp)
f010b36e:	e8 aa d6 ff ff       	call   f0108a1d <double_WS_Size>
f010b373:	83 c4 10             	add    $0x10,%esp
			break;
f010b376:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b377:	8b 45 08             	mov    0x8(%ebp),%eax
f010b37a:	8b 40 74             	mov    0x74(%eax),%eax
f010b37d:	83 ec 08             	sub    $0x8,%esp
f010b380:	50                   	push   %eax
f010b381:	68 cd 6b 13 f0       	push   $0xf0136bcd
f010b386:	e8 83 59 ff ff       	call   f0100d0e <cprintf>
f010b38b:	83 c4 10             	add    $0x10,%esp
f010b38e:	eb 01                	jmp    f010b391 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b390:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b391:	c9                   	leave  
f010b392:	c3                   	ret    

f010b393 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b393:	55                   	push   %ebp
f010b394:	89 e5                	mov    %esp,%ebp
f010b396:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b399:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b3a0:	eb 29                	jmp    f010b3cb <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b3a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b3a5:	89 d0                	mov    %edx,%eax
f010b3a7:	01 c0                	add    %eax,%eax
f010b3a9:	01 d0                	add    %edx,%eax
f010b3ab:	c1 e0 02             	shl    $0x2,%eax
f010b3ae:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b3b3:	8b 00                	mov    (%eax),%eax
f010b3b5:	83 ec 08             	sub    $0x8,%esp
f010b3b8:	50                   	push   %eax
f010b3b9:	ff 75 08             	pushl  0x8(%ebp)
f010b3bc:	e8 fa 62 02 00       	call   f01316bb <strcmp>
f010b3c1:	83 c4 10             	add    $0x10,%esp
f010b3c4:	85 c0                	test   %eax,%eax
f010b3c6:	74 0f                	je     f010b3d7 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b3c8:	ff 45 f4             	incl   -0xc(%ebp)
f010b3cb:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b3d0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b3d3:	7c cd                	jl     f010b3a2 <get_user_program_info+0xf>
f010b3d5:	eb 01                	jmp    f010b3d8 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b3d7:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b3d8:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b3dd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b3e0:	75 1a                	jne    f010b3fc <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b3e2:	83 ec 08             	sub    $0x8,%esp
f010b3e5:	ff 75 08             	pushl  0x8(%ebp)
f010b3e8:	68 81 77 13 f0       	push   $0xf0137781
f010b3ed:	e8 1c 59 ff ff       	call   f0100d0e <cprintf>
f010b3f2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b3f5:	b8 00 00 00 00       	mov    $0x0,%eax
f010b3fa:	eb 11                	jmp    f010b40d <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b3fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b3ff:	89 d0                	mov    %edx,%eax
f010b401:	01 c0                	add    %eax,%eax
f010b403:	01 d0                	add    %edx,%eax
f010b405:	c1 e0 02             	shl    $0x2,%eax
f010b408:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b40d:	c9                   	leave  
f010b40e:	c3                   	ret    

f010b40f <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b40f:	55                   	push   %ebp
f010b410:	89 e5                	mov    %esp,%ebp
f010b412:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b415:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b41c:	eb 30                	jmp    f010b44e <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b41e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b421:	89 d0                	mov    %edx,%eax
f010b423:	01 c0                	add    %eax,%eax
f010b425:	01 d0                	add    %edx,%eax
f010b427:	c1 e0 02             	shl    $0x2,%eax
f010b42a:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b42f:	8b 00                	mov    (%eax),%eax
f010b431:	8b 55 08             	mov    0x8(%ebp),%edx
f010b434:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b43a:	83 ec 08             	sub    $0x8,%esp
f010b43d:	50                   	push   %eax
f010b43e:	52                   	push   %edx
f010b43f:	e8 77 62 02 00       	call   f01316bb <strcmp>
f010b444:	83 c4 10             	add    $0x10,%esp
f010b447:	85 c0                	test   %eax,%eax
f010b449:	74 0f                	je     f010b45a <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b44b:	ff 45 f4             	incl   -0xc(%ebp)
f010b44e:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b453:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b456:	7c c6                	jl     f010b41e <get_user_program_info_by_env+0xf>
f010b458:	eb 01                	jmp    f010b45b <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b45a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b45b:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b460:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b463:	75 17                	jne    f010b47c <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b465:	83 ec 0c             	sub    $0xc,%esp
f010b468:	68 9c 77 13 f0       	push   $0xf013779c
f010b46d:	e8 9c 58 ff ff       	call   f0100d0e <cprintf>
f010b472:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b475:	b8 00 00 00 00       	mov    $0x0,%eax
f010b47a:	eb 11                	jmp    f010b48d <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b47c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b47f:	89 d0                	mov    %edx,%eax
f010b481:	01 c0                	add    %eax,%eax
f010b483:	01 d0                	add    %edx,%eax
f010b485:	c1 e0 02             	shl    $0x2,%eax
f010b488:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b48d:	c9                   	leave  
f010b48e:	c3                   	ret    

f010b48f <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b48f:	55                   	push   %ebp
f010b490:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b492:	8b 45 08             	mov    0x8(%ebp),%eax
f010b495:	83 f8 13             	cmp    $0x13,%eax
f010b498:	77 0c                	ja     f010b4a6 <trapname+0x17>
		return excnames[trapno];
f010b49a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b49d:	8b 04 85 e0 7b 13 f0 	mov    -0xfec8420(,%eax,4),%eax
f010b4a4:	eb 12                	jmp    f010b4b8 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b4a6:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b4aa:	75 07                	jne    f010b4b3 <trapname+0x24>
		return "System call";
f010b4ac:	b8 c0 77 13 f0       	mov    $0xf01377c0,%eax
f010b4b1:	eb 05                	jmp    f010b4b8 <trapname+0x29>
	return "(unknown trap)";
f010b4b3:	b8 cc 77 13 f0       	mov    $0xf01377cc,%eax
}
f010b4b8:	5d                   	pop    %ebp
f010b4b9:	c3                   	ret    

f010b4ba <idt_init>:


void
idt_init(void)
{
f010b4ba:	55                   	push   %ebp
f010b4bb:	89 e5                	mov    %esp,%ebp
f010b4bd:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b4c0:	b8 4e cb 10 f0       	mov    $0xf010cb4e,%eax
f010b4c5:	66 a3 90 e4 88 f0    	mov    %ax,0xf088e490
f010b4cb:	66 c7 05 92 e4 88 f0 	movw   $0x8,0xf088e492
f010b4d2:	08 00 
f010b4d4:	a0 94 e4 88 f0       	mov    0xf088e494,%al
f010b4d9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4dc:	a2 94 e4 88 f0       	mov    %al,0xf088e494
f010b4e1:	a0 94 e4 88 f0       	mov    0xf088e494,%al
f010b4e6:	83 e0 1f             	and    $0x1f,%eax
f010b4e9:	a2 94 e4 88 f0       	mov    %al,0xf088e494
f010b4ee:	a0 95 e4 88 f0       	mov    0xf088e495,%al
f010b4f3:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4f6:	83 c8 0e             	or     $0xe,%eax
f010b4f9:	a2 95 e4 88 f0       	mov    %al,0xf088e495
f010b4fe:	a0 95 e4 88 f0       	mov    0xf088e495,%al
f010b503:	83 e0 ef             	and    $0xffffffef,%eax
f010b506:	a2 95 e4 88 f0       	mov    %al,0xf088e495
f010b50b:	a0 95 e4 88 f0       	mov    0xf088e495,%al
f010b510:	83 e0 9f             	and    $0xffffff9f,%eax
f010b513:	a2 95 e4 88 f0       	mov    %al,0xf088e495
f010b518:	a0 95 e4 88 f0       	mov    0xf088e495,%al
f010b51d:	83 c8 80             	or     $0xffffff80,%eax
f010b520:	a2 95 e4 88 f0       	mov    %al,0xf088e495
f010b525:	b8 4e cb 10 f0       	mov    $0xf010cb4e,%eax
f010b52a:	c1 e8 10             	shr    $0x10,%eax
f010b52d:	66 a3 96 e4 88 f0    	mov    %ax,0xf088e496
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b533:	b8 56 cb 10 f0       	mov    $0xf010cb56,%eax
f010b538:	66 a3 a0 e5 88 f0    	mov    %ax,0xf088e5a0
f010b53e:	66 c7 05 a2 e5 88 f0 	movw   $0x8,0xf088e5a2
f010b545:	08 00 
f010b547:	a0 a4 e5 88 f0       	mov    0xf088e5a4,%al
f010b54c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b54f:	a2 a4 e5 88 f0       	mov    %al,0xf088e5a4
f010b554:	a0 a4 e5 88 f0       	mov    0xf088e5a4,%al
f010b559:	83 e0 1f             	and    $0x1f,%eax
f010b55c:	a2 a4 e5 88 f0       	mov    %al,0xf088e5a4
f010b561:	a0 a5 e5 88 f0       	mov    0xf088e5a5,%al
f010b566:	83 e0 f0             	and    $0xfffffff0,%eax
f010b569:	83 c8 0e             	or     $0xe,%eax
f010b56c:	a2 a5 e5 88 f0       	mov    %al,0xf088e5a5
f010b571:	a0 a5 e5 88 f0       	mov    0xf088e5a5,%al
f010b576:	83 e0 ef             	and    $0xffffffef,%eax
f010b579:	a2 a5 e5 88 f0       	mov    %al,0xf088e5a5
f010b57e:	a0 a5 e5 88 f0       	mov    0xf088e5a5,%al
f010b583:	83 c8 60             	or     $0x60,%eax
f010b586:	a2 a5 e5 88 f0       	mov    %al,0xf088e5a5
f010b58b:	a0 a5 e5 88 f0       	mov    0xf088e5a5,%al
f010b590:	83 c8 80             	or     $0xffffff80,%eax
f010b593:	a2 a5 e5 88 f0       	mov    %al,0xf088e5a5
f010b598:	b8 56 cb 10 f0       	mov    $0xf010cb56,%eax
f010b59d:	c1 e8 10             	shr    $0x10,%eax
f010b5a0:	66 a3 a6 e5 88 f0    	mov    %ax,0xf088e5a6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b5a6:	b8 60 cb 10 f0       	mov    $0xf010cb60,%eax
f010b5ab:	66 a3 60 e4 88 f0    	mov    %ax,0xf088e460
f010b5b1:	66 c7 05 62 e4 88 f0 	movw   $0x8,0xf088e462
f010b5b8:	08 00 
f010b5ba:	a0 64 e4 88 f0       	mov    0xf088e464,%al
f010b5bf:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5c2:	a2 64 e4 88 f0       	mov    %al,0xf088e464
f010b5c7:	a0 64 e4 88 f0       	mov    0xf088e464,%al
f010b5cc:	83 e0 1f             	and    $0x1f,%eax
f010b5cf:	a2 64 e4 88 f0       	mov    %al,0xf088e464
f010b5d4:	a0 65 e4 88 f0       	mov    0xf088e465,%al
f010b5d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5dc:	83 c8 0e             	or     $0xe,%eax
f010b5df:	a2 65 e4 88 f0       	mov    %al,0xf088e465
f010b5e4:	a0 65 e4 88 f0       	mov    0xf088e465,%al
f010b5e9:	83 e0 ef             	and    $0xffffffef,%eax
f010b5ec:	a2 65 e4 88 f0       	mov    %al,0xf088e465
f010b5f1:	a0 65 e4 88 f0       	mov    0xf088e465,%al
f010b5f6:	83 e0 9f             	and    $0xffffff9f,%eax
f010b5f9:	a2 65 e4 88 f0       	mov    %al,0xf088e465
f010b5fe:	a0 65 e4 88 f0       	mov    0xf088e465,%al
f010b603:	83 c8 80             	or     $0xffffff80,%eax
f010b606:	a2 65 e4 88 f0       	mov    %al,0xf088e465
f010b60b:	b8 60 cb 10 f0       	mov    $0xf010cb60,%eax
f010b610:	c1 e8 10             	shr    $0x10,%eax
f010b613:	66 a3 66 e4 88 f0    	mov    %ax,0xf088e466


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b619:	b8 68 cb 10 f0       	mov    $0xf010cb68,%eax
f010b61e:	66 a3 20 e4 88 f0    	mov    %ax,0xf088e420
f010b624:	66 c7 05 22 e4 88 f0 	movw   $0x8,0xf088e422
f010b62b:	08 00 
f010b62d:	a0 24 e4 88 f0       	mov    0xf088e424,%al
f010b632:	83 e0 e0             	and    $0xffffffe0,%eax
f010b635:	a2 24 e4 88 f0       	mov    %al,0xf088e424
f010b63a:	a0 24 e4 88 f0       	mov    0xf088e424,%al
f010b63f:	83 e0 1f             	and    $0x1f,%eax
f010b642:	a2 24 e4 88 f0       	mov    %al,0xf088e424
f010b647:	a0 25 e4 88 f0       	mov    0xf088e425,%al
f010b64c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b64f:	83 c8 0e             	or     $0xe,%eax
f010b652:	a2 25 e4 88 f0       	mov    %al,0xf088e425
f010b657:	a0 25 e4 88 f0       	mov    0xf088e425,%al
f010b65c:	83 e0 ef             	and    $0xffffffef,%eax
f010b65f:	a2 25 e4 88 f0       	mov    %al,0xf088e425
f010b664:	a0 25 e4 88 f0       	mov    0xf088e425,%al
f010b669:	83 c8 60             	or     $0x60,%eax
f010b66c:	a2 25 e4 88 f0       	mov    %al,0xf088e425
f010b671:	a0 25 e4 88 f0       	mov    0xf088e425,%al
f010b676:	83 c8 80             	or     $0xffffff80,%eax
f010b679:	a2 25 e4 88 f0       	mov    %al,0xf088e425
f010b67e:	b8 68 cb 10 f0       	mov    $0xf010cb68,%eax
f010b683:	c1 e8 10             	shr    $0x10,%eax
f010b686:	66 a3 26 e4 88 f0    	mov    %ax,0xf088e426
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b68c:	b8 72 cb 10 f0       	mov    $0xf010cb72,%eax
f010b691:	66 a3 28 e4 88 f0    	mov    %ax,0xf088e428
f010b697:	66 c7 05 2a e4 88 f0 	movw   $0x8,0xf088e42a
f010b69e:	08 00 
f010b6a0:	a0 2c e4 88 f0       	mov    0xf088e42c,%al
f010b6a5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6a8:	a2 2c e4 88 f0       	mov    %al,0xf088e42c
f010b6ad:	a0 2c e4 88 f0       	mov    0xf088e42c,%al
f010b6b2:	83 e0 1f             	and    $0x1f,%eax
f010b6b5:	a2 2c e4 88 f0       	mov    %al,0xf088e42c
f010b6ba:	a0 2d e4 88 f0       	mov    0xf088e42d,%al
f010b6bf:	83 c8 0f             	or     $0xf,%eax
f010b6c2:	a2 2d e4 88 f0       	mov    %al,0xf088e42d
f010b6c7:	a0 2d e4 88 f0       	mov    0xf088e42d,%al
f010b6cc:	83 e0 ef             	and    $0xffffffef,%eax
f010b6cf:	a2 2d e4 88 f0       	mov    %al,0xf088e42d
f010b6d4:	a0 2d e4 88 f0       	mov    0xf088e42d,%al
f010b6d9:	83 c8 60             	or     $0x60,%eax
f010b6dc:	a2 2d e4 88 f0       	mov    %al,0xf088e42d
f010b6e1:	a0 2d e4 88 f0       	mov    0xf088e42d,%al
f010b6e6:	83 c8 80             	or     $0xffffff80,%eax
f010b6e9:	a2 2d e4 88 f0       	mov    %al,0xf088e42d
f010b6ee:	b8 72 cb 10 f0       	mov    $0xf010cb72,%eax
f010b6f3:	c1 e8 10             	shr    $0x10,%eax
f010b6f6:	66 a3 2e e4 88 f0    	mov    %ax,0xf088e42e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b6fc:	b8 7c cb 10 f0       	mov    $0xf010cb7c,%eax
f010b701:	66 a3 30 e4 88 f0    	mov    %ax,0xf088e430
f010b707:	66 c7 05 32 e4 88 f0 	movw   $0x8,0xf088e432
f010b70e:	08 00 
f010b710:	a0 34 e4 88 f0       	mov    0xf088e434,%al
f010b715:	83 e0 e0             	and    $0xffffffe0,%eax
f010b718:	a2 34 e4 88 f0       	mov    %al,0xf088e434
f010b71d:	a0 34 e4 88 f0       	mov    0xf088e434,%al
f010b722:	83 e0 1f             	and    $0x1f,%eax
f010b725:	a2 34 e4 88 f0       	mov    %al,0xf088e434
f010b72a:	a0 35 e4 88 f0       	mov    0xf088e435,%al
f010b72f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b732:	83 c8 0e             	or     $0xe,%eax
f010b735:	a2 35 e4 88 f0       	mov    %al,0xf088e435
f010b73a:	a0 35 e4 88 f0       	mov    0xf088e435,%al
f010b73f:	83 e0 ef             	and    $0xffffffef,%eax
f010b742:	a2 35 e4 88 f0       	mov    %al,0xf088e435
f010b747:	a0 35 e4 88 f0       	mov    0xf088e435,%al
f010b74c:	83 c8 60             	or     $0x60,%eax
f010b74f:	a2 35 e4 88 f0       	mov    %al,0xf088e435
f010b754:	a0 35 e4 88 f0       	mov    0xf088e435,%al
f010b759:	83 c8 80             	or     $0xffffff80,%eax
f010b75c:	a2 35 e4 88 f0       	mov    %al,0xf088e435
f010b761:	b8 7c cb 10 f0       	mov    $0xf010cb7c,%eax
f010b766:	c1 e8 10             	shr    $0x10,%eax
f010b769:	66 a3 36 e4 88 f0    	mov    %ax,0xf088e436
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b76f:	b8 86 cb 10 f0       	mov    $0xf010cb86,%eax
f010b774:	66 a3 38 e4 88 f0    	mov    %ax,0xf088e438
f010b77a:	66 c7 05 3a e4 88 f0 	movw   $0x8,0xf088e43a
f010b781:	08 00 
f010b783:	a0 3c e4 88 f0       	mov    0xf088e43c,%al
f010b788:	83 e0 e0             	and    $0xffffffe0,%eax
f010b78b:	a2 3c e4 88 f0       	mov    %al,0xf088e43c
f010b790:	a0 3c e4 88 f0       	mov    0xf088e43c,%al
f010b795:	83 e0 1f             	and    $0x1f,%eax
f010b798:	a2 3c e4 88 f0       	mov    %al,0xf088e43c
f010b79d:	a0 3d e4 88 f0       	mov    0xf088e43d,%al
f010b7a2:	83 c8 0f             	or     $0xf,%eax
f010b7a5:	a2 3d e4 88 f0       	mov    %al,0xf088e43d
f010b7aa:	a0 3d e4 88 f0       	mov    0xf088e43d,%al
f010b7af:	83 e0 ef             	and    $0xffffffef,%eax
f010b7b2:	a2 3d e4 88 f0       	mov    %al,0xf088e43d
f010b7b7:	a0 3d e4 88 f0       	mov    0xf088e43d,%al
f010b7bc:	83 c8 60             	or     $0x60,%eax
f010b7bf:	a2 3d e4 88 f0       	mov    %al,0xf088e43d
f010b7c4:	a0 3d e4 88 f0       	mov    0xf088e43d,%al
f010b7c9:	83 c8 80             	or     $0xffffff80,%eax
f010b7cc:	a2 3d e4 88 f0       	mov    %al,0xf088e43d
f010b7d1:	b8 86 cb 10 f0       	mov    $0xf010cb86,%eax
f010b7d6:	c1 e8 10             	shr    $0x10,%eax
f010b7d9:	66 a3 3e e4 88 f0    	mov    %ax,0xf088e43e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b7df:	b8 90 cb 10 f0       	mov    $0xf010cb90,%eax
f010b7e4:	66 a3 40 e4 88 f0    	mov    %ax,0xf088e440
f010b7ea:	66 c7 05 42 e4 88 f0 	movw   $0x8,0xf088e442
f010b7f1:	08 00 
f010b7f3:	a0 44 e4 88 f0       	mov    0xf088e444,%al
f010b7f8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7fb:	a2 44 e4 88 f0       	mov    %al,0xf088e444
f010b800:	a0 44 e4 88 f0       	mov    0xf088e444,%al
f010b805:	83 e0 1f             	and    $0x1f,%eax
f010b808:	a2 44 e4 88 f0       	mov    %al,0xf088e444
f010b80d:	a0 45 e4 88 f0       	mov    0xf088e445,%al
f010b812:	83 c8 0f             	or     $0xf,%eax
f010b815:	a2 45 e4 88 f0       	mov    %al,0xf088e445
f010b81a:	a0 45 e4 88 f0       	mov    0xf088e445,%al
f010b81f:	83 e0 ef             	and    $0xffffffef,%eax
f010b822:	a2 45 e4 88 f0       	mov    %al,0xf088e445
f010b827:	a0 45 e4 88 f0       	mov    0xf088e445,%al
f010b82c:	83 c8 60             	or     $0x60,%eax
f010b82f:	a2 45 e4 88 f0       	mov    %al,0xf088e445
f010b834:	a0 45 e4 88 f0       	mov    0xf088e445,%al
f010b839:	83 c8 80             	or     $0xffffff80,%eax
f010b83c:	a2 45 e4 88 f0       	mov    %al,0xf088e445
f010b841:	b8 90 cb 10 f0       	mov    $0xf010cb90,%eax
f010b846:	c1 e8 10             	shr    $0x10,%eax
f010b849:	66 a3 46 e4 88 f0    	mov    %ax,0xf088e446
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b84f:	b8 9a cb 10 f0       	mov    $0xf010cb9a,%eax
f010b854:	66 a3 48 e4 88 f0    	mov    %ax,0xf088e448
f010b85a:	66 c7 05 4a e4 88 f0 	movw   $0x8,0xf088e44a
f010b861:	08 00 
f010b863:	a0 4c e4 88 f0       	mov    0xf088e44c,%al
f010b868:	83 e0 e0             	and    $0xffffffe0,%eax
f010b86b:	a2 4c e4 88 f0       	mov    %al,0xf088e44c
f010b870:	a0 4c e4 88 f0       	mov    0xf088e44c,%al
f010b875:	83 e0 1f             	and    $0x1f,%eax
f010b878:	a2 4c e4 88 f0       	mov    %al,0xf088e44c
f010b87d:	a0 4d e4 88 f0       	mov    0xf088e44d,%al
f010b882:	83 e0 f0             	and    $0xfffffff0,%eax
f010b885:	83 c8 0e             	or     $0xe,%eax
f010b888:	a2 4d e4 88 f0       	mov    %al,0xf088e44d
f010b88d:	a0 4d e4 88 f0       	mov    0xf088e44d,%al
f010b892:	83 e0 ef             	and    $0xffffffef,%eax
f010b895:	a2 4d e4 88 f0       	mov    %al,0xf088e44d
f010b89a:	a0 4d e4 88 f0       	mov    0xf088e44d,%al
f010b89f:	83 c8 60             	or     $0x60,%eax
f010b8a2:	a2 4d e4 88 f0       	mov    %al,0xf088e44d
f010b8a7:	a0 4d e4 88 f0       	mov    0xf088e44d,%al
f010b8ac:	83 c8 80             	or     $0xffffff80,%eax
f010b8af:	a2 4d e4 88 f0       	mov    %al,0xf088e44d
f010b8b4:	b8 9a cb 10 f0       	mov    $0xf010cb9a,%eax
f010b8b9:	c1 e8 10             	shr    $0x10,%eax
f010b8bc:	66 a3 4e e4 88 f0    	mov    %ax,0xf088e44e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b8c2:	b8 a4 cb 10 f0       	mov    $0xf010cba4,%eax
f010b8c7:	66 a3 50 e4 88 f0    	mov    %ax,0xf088e450
f010b8cd:	66 c7 05 52 e4 88 f0 	movw   $0x8,0xf088e452
f010b8d4:	08 00 
f010b8d6:	a0 54 e4 88 f0       	mov    0xf088e454,%al
f010b8db:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8de:	a2 54 e4 88 f0       	mov    %al,0xf088e454
f010b8e3:	a0 54 e4 88 f0       	mov    0xf088e454,%al
f010b8e8:	83 e0 1f             	and    $0x1f,%eax
f010b8eb:	a2 54 e4 88 f0       	mov    %al,0xf088e454
f010b8f0:	a0 55 e4 88 f0       	mov    0xf088e455,%al
f010b8f5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8f8:	83 c8 0e             	or     $0xe,%eax
f010b8fb:	a2 55 e4 88 f0       	mov    %al,0xf088e455
f010b900:	a0 55 e4 88 f0       	mov    0xf088e455,%al
f010b905:	83 e0 ef             	and    $0xffffffef,%eax
f010b908:	a2 55 e4 88 f0       	mov    %al,0xf088e455
f010b90d:	a0 55 e4 88 f0       	mov    0xf088e455,%al
f010b912:	83 c8 60             	or     $0x60,%eax
f010b915:	a2 55 e4 88 f0       	mov    %al,0xf088e455
f010b91a:	a0 55 e4 88 f0       	mov    0xf088e455,%al
f010b91f:	83 c8 80             	or     $0xffffff80,%eax
f010b922:	a2 55 e4 88 f0       	mov    %al,0xf088e455
f010b927:	b8 a4 cb 10 f0       	mov    $0xf010cba4,%eax
f010b92c:	c1 e8 10             	shr    $0x10,%eax
f010b92f:	66 a3 56 e4 88 f0    	mov    %ax,0xf088e456
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b935:	b8 ae cb 10 f0       	mov    $0xf010cbae,%eax
f010b93a:	66 a3 58 e4 88 f0    	mov    %ax,0xf088e458
f010b940:	66 c7 05 5a e4 88 f0 	movw   $0x8,0xf088e45a
f010b947:	08 00 
f010b949:	a0 5c e4 88 f0       	mov    0xf088e45c,%al
f010b94e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b951:	a2 5c e4 88 f0       	mov    %al,0xf088e45c
f010b956:	a0 5c e4 88 f0       	mov    0xf088e45c,%al
f010b95b:	83 e0 1f             	and    $0x1f,%eax
f010b95e:	a2 5c e4 88 f0       	mov    %al,0xf088e45c
f010b963:	a0 5d e4 88 f0       	mov    0xf088e45d,%al
f010b968:	83 e0 f0             	and    $0xfffffff0,%eax
f010b96b:	83 c8 0e             	or     $0xe,%eax
f010b96e:	a2 5d e4 88 f0       	mov    %al,0xf088e45d
f010b973:	a0 5d e4 88 f0       	mov    0xf088e45d,%al
f010b978:	83 e0 ef             	and    $0xffffffef,%eax
f010b97b:	a2 5d e4 88 f0       	mov    %al,0xf088e45d
f010b980:	a0 5d e4 88 f0       	mov    0xf088e45d,%al
f010b985:	83 c8 60             	or     $0x60,%eax
f010b988:	a2 5d e4 88 f0       	mov    %al,0xf088e45d
f010b98d:	a0 5d e4 88 f0       	mov    0xf088e45d,%al
f010b992:	83 c8 80             	or     $0xffffff80,%eax
f010b995:	a2 5d e4 88 f0       	mov    %al,0xf088e45d
f010b99a:	b8 ae cb 10 f0       	mov    $0xf010cbae,%eax
f010b99f:	c1 e8 10             	shr    $0x10,%eax
f010b9a2:	66 a3 5e e4 88 f0    	mov    %ax,0xf088e45e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b9a8:	b8 b8 cb 10 f0       	mov    $0xf010cbb8,%eax
f010b9ad:	66 a3 70 e4 88 f0    	mov    %ax,0xf088e470
f010b9b3:	66 c7 05 72 e4 88 f0 	movw   $0x8,0xf088e472
f010b9ba:	08 00 
f010b9bc:	a0 74 e4 88 f0       	mov    0xf088e474,%al
f010b9c1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9c4:	a2 74 e4 88 f0       	mov    %al,0xf088e474
f010b9c9:	a0 74 e4 88 f0       	mov    0xf088e474,%al
f010b9ce:	83 e0 1f             	and    $0x1f,%eax
f010b9d1:	a2 74 e4 88 f0       	mov    %al,0xf088e474
f010b9d6:	a0 75 e4 88 f0       	mov    0xf088e475,%al
f010b9db:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9de:	83 c8 0e             	or     $0xe,%eax
f010b9e1:	a2 75 e4 88 f0       	mov    %al,0xf088e475
f010b9e6:	a0 75 e4 88 f0       	mov    0xf088e475,%al
f010b9eb:	83 e0 ef             	and    $0xffffffef,%eax
f010b9ee:	a2 75 e4 88 f0       	mov    %al,0xf088e475
f010b9f3:	a0 75 e4 88 f0       	mov    0xf088e475,%al
f010b9f8:	83 c8 60             	or     $0x60,%eax
f010b9fb:	a2 75 e4 88 f0       	mov    %al,0xf088e475
f010ba00:	a0 75 e4 88 f0       	mov    0xf088e475,%al
f010ba05:	83 c8 80             	or     $0xffffff80,%eax
f010ba08:	a2 75 e4 88 f0       	mov    %al,0xf088e475
f010ba0d:	b8 b8 cb 10 f0       	mov    $0xf010cbb8,%eax
f010ba12:	c1 e8 10             	shr    $0x10,%eax
f010ba15:	66 a3 76 e4 88 f0    	mov    %ax,0xf088e476
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010ba1b:	b8 c0 cb 10 f0       	mov    $0xf010cbc0,%eax
f010ba20:	66 a3 78 e4 88 f0    	mov    %ax,0xf088e478
f010ba26:	66 c7 05 7a e4 88 f0 	movw   $0x8,0xf088e47a
f010ba2d:	08 00 
f010ba2f:	a0 7c e4 88 f0       	mov    0xf088e47c,%al
f010ba34:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba37:	a2 7c e4 88 f0       	mov    %al,0xf088e47c
f010ba3c:	a0 7c e4 88 f0       	mov    0xf088e47c,%al
f010ba41:	83 e0 1f             	and    $0x1f,%eax
f010ba44:	a2 7c e4 88 f0       	mov    %al,0xf088e47c
f010ba49:	a0 7d e4 88 f0       	mov    0xf088e47d,%al
f010ba4e:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba51:	83 c8 0e             	or     $0xe,%eax
f010ba54:	a2 7d e4 88 f0       	mov    %al,0xf088e47d
f010ba59:	a0 7d e4 88 f0       	mov    0xf088e47d,%al
f010ba5e:	83 e0 ef             	and    $0xffffffef,%eax
f010ba61:	a2 7d e4 88 f0       	mov    %al,0xf088e47d
f010ba66:	a0 7d e4 88 f0       	mov    0xf088e47d,%al
f010ba6b:	83 c8 60             	or     $0x60,%eax
f010ba6e:	a2 7d e4 88 f0       	mov    %al,0xf088e47d
f010ba73:	a0 7d e4 88 f0       	mov    0xf088e47d,%al
f010ba78:	83 c8 80             	or     $0xffffff80,%eax
f010ba7b:	a2 7d e4 88 f0       	mov    %al,0xf088e47d
f010ba80:	b8 c0 cb 10 f0       	mov    $0xf010cbc0,%eax
f010ba85:	c1 e8 10             	shr    $0x10,%eax
f010ba88:	66 a3 7e e4 88 f0    	mov    %ax,0xf088e47e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010ba8e:	b8 c4 cb 10 f0       	mov    $0xf010cbc4,%eax
f010ba93:	66 a3 80 e4 88 f0    	mov    %ax,0xf088e480
f010ba99:	66 c7 05 82 e4 88 f0 	movw   $0x8,0xf088e482
f010baa0:	08 00 
f010baa2:	a0 84 e4 88 f0       	mov    0xf088e484,%al
f010baa7:	83 e0 e0             	and    $0xffffffe0,%eax
f010baaa:	a2 84 e4 88 f0       	mov    %al,0xf088e484
f010baaf:	a0 84 e4 88 f0       	mov    0xf088e484,%al
f010bab4:	83 e0 1f             	and    $0x1f,%eax
f010bab7:	a2 84 e4 88 f0       	mov    %al,0xf088e484
f010babc:	a0 85 e4 88 f0       	mov    0xf088e485,%al
f010bac1:	83 e0 f0             	and    $0xfffffff0,%eax
f010bac4:	83 c8 0e             	or     $0xe,%eax
f010bac7:	a2 85 e4 88 f0       	mov    %al,0xf088e485
f010bacc:	a0 85 e4 88 f0       	mov    0xf088e485,%al
f010bad1:	83 e0 ef             	and    $0xffffffef,%eax
f010bad4:	a2 85 e4 88 f0       	mov    %al,0xf088e485
f010bad9:	a0 85 e4 88 f0       	mov    0xf088e485,%al
f010bade:	83 c8 60             	or     $0x60,%eax
f010bae1:	a2 85 e4 88 f0       	mov    %al,0xf088e485
f010bae6:	a0 85 e4 88 f0       	mov    0xf088e485,%al
f010baeb:	83 c8 80             	or     $0xffffff80,%eax
f010baee:	a2 85 e4 88 f0       	mov    %al,0xf088e485
f010baf3:	b8 c4 cb 10 f0       	mov    $0xf010cbc4,%eax
f010baf8:	c1 e8 10             	shr    $0x10,%eax
f010bafb:	66 a3 86 e4 88 f0    	mov    %ax,0xf088e486
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010bb01:	b8 c8 cb 10 f0       	mov    $0xf010cbc8,%eax
f010bb06:	66 a3 88 e4 88 f0    	mov    %ax,0xf088e488
f010bb0c:	66 c7 05 8a e4 88 f0 	movw   $0x8,0xf088e48a
f010bb13:	08 00 
f010bb15:	a0 8c e4 88 f0       	mov    0xf088e48c,%al
f010bb1a:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb1d:	a2 8c e4 88 f0       	mov    %al,0xf088e48c
f010bb22:	a0 8c e4 88 f0       	mov    0xf088e48c,%al
f010bb27:	83 e0 1f             	and    $0x1f,%eax
f010bb2a:	a2 8c e4 88 f0       	mov    %al,0xf088e48c
f010bb2f:	a0 8d e4 88 f0       	mov    0xf088e48d,%al
f010bb34:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb37:	83 c8 0e             	or     $0xe,%eax
f010bb3a:	a2 8d e4 88 f0       	mov    %al,0xf088e48d
f010bb3f:	a0 8d e4 88 f0       	mov    0xf088e48d,%al
f010bb44:	83 e0 ef             	and    $0xffffffef,%eax
f010bb47:	a2 8d e4 88 f0       	mov    %al,0xf088e48d
f010bb4c:	a0 8d e4 88 f0       	mov    0xf088e48d,%al
f010bb51:	83 c8 60             	or     $0x60,%eax
f010bb54:	a2 8d e4 88 f0       	mov    %al,0xf088e48d
f010bb59:	a0 8d e4 88 f0       	mov    0xf088e48d,%al
f010bb5e:	83 c8 80             	or     $0xffffff80,%eax
f010bb61:	a2 8d e4 88 f0       	mov    %al,0xf088e48d
f010bb66:	b8 c8 cb 10 f0       	mov    $0xf010cbc8,%eax
f010bb6b:	c1 e8 10             	shr    $0x10,%eax
f010bb6e:	66 a3 8e e4 88 f0    	mov    %ax,0xf088e48e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010bb74:	b8 cc cb 10 f0       	mov    $0xf010cbcc,%eax
f010bb79:	66 a3 a0 e4 88 f0    	mov    %ax,0xf088e4a0
f010bb7f:	66 c7 05 a2 e4 88 f0 	movw   $0x8,0xf088e4a2
f010bb86:	08 00 
f010bb88:	a0 a4 e4 88 f0       	mov    0xf088e4a4,%al
f010bb8d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb90:	a2 a4 e4 88 f0       	mov    %al,0xf088e4a4
f010bb95:	a0 a4 e4 88 f0       	mov    0xf088e4a4,%al
f010bb9a:	83 e0 1f             	and    $0x1f,%eax
f010bb9d:	a2 a4 e4 88 f0       	mov    %al,0xf088e4a4
f010bba2:	a0 a5 e4 88 f0       	mov    0xf088e4a5,%al
f010bba7:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbaa:	83 c8 0e             	or     $0xe,%eax
f010bbad:	a2 a5 e4 88 f0       	mov    %al,0xf088e4a5
f010bbb2:	a0 a5 e4 88 f0       	mov    0xf088e4a5,%al
f010bbb7:	83 e0 ef             	and    $0xffffffef,%eax
f010bbba:	a2 a5 e4 88 f0       	mov    %al,0xf088e4a5
f010bbbf:	a0 a5 e4 88 f0       	mov    0xf088e4a5,%al
f010bbc4:	83 c8 60             	or     $0x60,%eax
f010bbc7:	a2 a5 e4 88 f0       	mov    %al,0xf088e4a5
f010bbcc:	a0 a5 e4 88 f0       	mov    0xf088e4a5,%al
f010bbd1:	83 c8 80             	or     $0xffffff80,%eax
f010bbd4:	a2 a5 e4 88 f0       	mov    %al,0xf088e4a5
f010bbd9:	b8 cc cb 10 f0       	mov    $0xf010cbcc,%eax
f010bbde:	c1 e8 10             	shr    $0x10,%eax
f010bbe1:	66 a3 a6 e4 88 f0    	mov    %ax,0xf088e4a6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bbe7:	b8 d2 cb 10 f0       	mov    $0xf010cbd2,%eax
f010bbec:	66 a3 a8 e4 88 f0    	mov    %ax,0xf088e4a8
f010bbf2:	66 c7 05 aa e4 88 f0 	movw   $0x8,0xf088e4aa
f010bbf9:	08 00 
f010bbfb:	a0 ac e4 88 f0       	mov    0xf088e4ac,%al
f010bc00:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc03:	a2 ac e4 88 f0       	mov    %al,0xf088e4ac
f010bc08:	a0 ac e4 88 f0       	mov    0xf088e4ac,%al
f010bc0d:	83 e0 1f             	and    $0x1f,%eax
f010bc10:	a2 ac e4 88 f0       	mov    %al,0xf088e4ac
f010bc15:	a0 ad e4 88 f0       	mov    0xf088e4ad,%al
f010bc1a:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc1d:	83 c8 0e             	or     $0xe,%eax
f010bc20:	a2 ad e4 88 f0       	mov    %al,0xf088e4ad
f010bc25:	a0 ad e4 88 f0       	mov    0xf088e4ad,%al
f010bc2a:	83 e0 ef             	and    $0xffffffef,%eax
f010bc2d:	a2 ad e4 88 f0       	mov    %al,0xf088e4ad
f010bc32:	a0 ad e4 88 f0       	mov    0xf088e4ad,%al
f010bc37:	83 c8 60             	or     $0x60,%eax
f010bc3a:	a2 ad e4 88 f0       	mov    %al,0xf088e4ad
f010bc3f:	a0 ad e4 88 f0       	mov    0xf088e4ad,%al
f010bc44:	83 c8 80             	or     $0xffffff80,%eax
f010bc47:	a2 ad e4 88 f0       	mov    %al,0xf088e4ad
f010bc4c:	b8 d2 cb 10 f0       	mov    $0xf010cbd2,%eax
f010bc51:	c1 e8 10             	shr    $0x10,%eax
f010bc54:	66 a3 ae e4 88 f0    	mov    %ax,0xf088e4ae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bc5a:	b8 d6 cb 10 f0       	mov    $0xf010cbd6,%eax
f010bc5f:	66 a3 b0 e4 88 f0    	mov    %ax,0xf088e4b0
f010bc65:	66 c7 05 b2 e4 88 f0 	movw   $0x8,0xf088e4b2
f010bc6c:	08 00 
f010bc6e:	a0 b4 e4 88 f0       	mov    0xf088e4b4,%al
f010bc73:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc76:	a2 b4 e4 88 f0       	mov    %al,0xf088e4b4
f010bc7b:	a0 b4 e4 88 f0       	mov    0xf088e4b4,%al
f010bc80:	83 e0 1f             	and    $0x1f,%eax
f010bc83:	a2 b4 e4 88 f0       	mov    %al,0xf088e4b4
f010bc88:	a0 b5 e4 88 f0       	mov    0xf088e4b5,%al
f010bc8d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc90:	83 c8 0e             	or     $0xe,%eax
f010bc93:	a2 b5 e4 88 f0       	mov    %al,0xf088e4b5
f010bc98:	a0 b5 e4 88 f0       	mov    0xf088e4b5,%al
f010bc9d:	83 e0 ef             	and    $0xffffffef,%eax
f010bca0:	a2 b5 e4 88 f0       	mov    %al,0xf088e4b5
f010bca5:	a0 b5 e4 88 f0       	mov    0xf088e4b5,%al
f010bcaa:	83 c8 60             	or     $0x60,%eax
f010bcad:	a2 b5 e4 88 f0       	mov    %al,0xf088e4b5
f010bcb2:	a0 b5 e4 88 f0       	mov    0xf088e4b5,%al
f010bcb7:	83 c8 80             	or     $0xffffff80,%eax
f010bcba:	a2 b5 e4 88 f0       	mov    %al,0xf088e4b5
f010bcbf:	b8 d6 cb 10 f0       	mov    $0xf010cbd6,%eax
f010bcc4:	c1 e8 10             	shr    $0x10,%eax
f010bcc7:	66 a3 b6 e4 88 f0    	mov    %ax,0xf088e4b6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bccd:	b8 dc cb 10 f0       	mov    $0xf010cbdc,%eax
f010bcd2:	66 a3 b8 e4 88 f0    	mov    %ax,0xf088e4b8
f010bcd8:	66 c7 05 ba e4 88 f0 	movw   $0x8,0xf088e4ba
f010bcdf:	08 00 
f010bce1:	a0 bc e4 88 f0       	mov    0xf088e4bc,%al
f010bce6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bce9:	a2 bc e4 88 f0       	mov    %al,0xf088e4bc
f010bcee:	a0 bc e4 88 f0       	mov    0xf088e4bc,%al
f010bcf3:	83 e0 1f             	and    $0x1f,%eax
f010bcf6:	a2 bc e4 88 f0       	mov    %al,0xf088e4bc
f010bcfb:	a0 bd e4 88 f0       	mov    0xf088e4bd,%al
f010bd00:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd03:	83 c8 0e             	or     $0xe,%eax
f010bd06:	a2 bd e4 88 f0       	mov    %al,0xf088e4bd
f010bd0b:	a0 bd e4 88 f0       	mov    0xf088e4bd,%al
f010bd10:	83 e0 ef             	and    $0xffffffef,%eax
f010bd13:	a2 bd e4 88 f0       	mov    %al,0xf088e4bd
f010bd18:	a0 bd e4 88 f0       	mov    0xf088e4bd,%al
f010bd1d:	83 c8 60             	or     $0x60,%eax
f010bd20:	a2 bd e4 88 f0       	mov    %al,0xf088e4bd
f010bd25:	a0 bd e4 88 f0       	mov    0xf088e4bd,%al
f010bd2a:	83 c8 80             	or     $0xffffff80,%eax
f010bd2d:	a2 bd e4 88 f0       	mov    %al,0xf088e4bd
f010bd32:	b8 dc cb 10 f0       	mov    $0xf010cbdc,%eax
f010bd37:	c1 e8 10             	shr    $0x10,%eax
f010bd3a:	66 a3 be e4 88 f0    	mov    %ax,0xf088e4be


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010bd40:	b8 e2 cb 10 f0       	mov    $0xf010cbe2,%eax
f010bd45:	66 a3 20 e5 88 f0    	mov    %ax,0xf088e520
f010bd4b:	66 c7 05 22 e5 88 f0 	movw   $0x8,0xf088e522
f010bd52:	08 00 
f010bd54:	a0 24 e5 88 f0       	mov    0xf088e524,%al
f010bd59:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd5c:	a2 24 e5 88 f0       	mov    %al,0xf088e524
f010bd61:	a0 24 e5 88 f0       	mov    0xf088e524,%al
f010bd66:	83 e0 1f             	and    $0x1f,%eax
f010bd69:	a2 24 e5 88 f0       	mov    %al,0xf088e524
f010bd6e:	a0 25 e5 88 f0       	mov    0xf088e525,%al
f010bd73:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd76:	83 c8 0e             	or     $0xe,%eax
f010bd79:	a2 25 e5 88 f0       	mov    %al,0xf088e525
f010bd7e:	a0 25 e5 88 f0       	mov    0xf088e525,%al
f010bd83:	83 e0 ef             	and    $0xffffffef,%eax
f010bd86:	a2 25 e5 88 f0       	mov    %al,0xf088e525
f010bd8b:	a0 25 e5 88 f0       	mov    0xf088e525,%al
f010bd90:	83 c8 60             	or     $0x60,%eax
f010bd93:	a2 25 e5 88 f0       	mov    %al,0xf088e525
f010bd98:	a0 25 e5 88 f0       	mov    0xf088e525,%al
f010bd9d:	83 c8 80             	or     $0xffffff80,%eax
f010bda0:	a2 25 e5 88 f0       	mov    %al,0xf088e525
f010bda5:	b8 e2 cb 10 f0       	mov    $0xf010cbe2,%eax
f010bdaa:	c1 e8 10             	shr    $0x10,%eax
f010bdad:	66 a3 26 e5 88 f0    	mov    %ax,0xf088e526
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010bdb3:	b8 e8 cb 10 f0       	mov    $0xf010cbe8,%eax
f010bdb8:	66 a3 28 e5 88 f0    	mov    %ax,0xf088e528
f010bdbe:	66 c7 05 2a e5 88 f0 	movw   $0x8,0xf088e52a
f010bdc5:	08 00 
f010bdc7:	a0 2c e5 88 f0       	mov    0xf088e52c,%al
f010bdcc:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdcf:	a2 2c e5 88 f0       	mov    %al,0xf088e52c
f010bdd4:	a0 2c e5 88 f0       	mov    0xf088e52c,%al
f010bdd9:	83 e0 1f             	and    $0x1f,%eax
f010bddc:	a2 2c e5 88 f0       	mov    %al,0xf088e52c
f010bde1:	a0 2d e5 88 f0       	mov    0xf088e52d,%al
f010bde6:	83 e0 f0             	and    $0xfffffff0,%eax
f010bde9:	83 c8 0e             	or     $0xe,%eax
f010bdec:	a2 2d e5 88 f0       	mov    %al,0xf088e52d
f010bdf1:	a0 2d e5 88 f0       	mov    0xf088e52d,%al
f010bdf6:	83 e0 ef             	and    $0xffffffef,%eax
f010bdf9:	a2 2d e5 88 f0       	mov    %al,0xf088e52d
f010bdfe:	a0 2d e5 88 f0       	mov    0xf088e52d,%al
f010be03:	83 c8 60             	or     $0x60,%eax
f010be06:	a2 2d e5 88 f0       	mov    %al,0xf088e52d
f010be0b:	a0 2d e5 88 f0       	mov    0xf088e52d,%al
f010be10:	83 c8 80             	or     $0xffffff80,%eax
f010be13:	a2 2d e5 88 f0       	mov    %al,0xf088e52d
f010be18:	b8 e8 cb 10 f0       	mov    $0xf010cbe8,%eax
f010be1d:	c1 e8 10             	shr    $0x10,%eax
f010be20:	66 a3 2e e5 88 f0    	mov    %ax,0xf088e52e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010be26:	b8 ee cb 10 f0       	mov    $0xf010cbee,%eax
f010be2b:	66 a3 30 e5 88 f0    	mov    %ax,0xf088e530
f010be31:	66 c7 05 32 e5 88 f0 	movw   $0x8,0xf088e532
f010be38:	08 00 
f010be3a:	a0 34 e5 88 f0       	mov    0xf088e534,%al
f010be3f:	83 e0 e0             	and    $0xffffffe0,%eax
f010be42:	a2 34 e5 88 f0       	mov    %al,0xf088e534
f010be47:	a0 34 e5 88 f0       	mov    0xf088e534,%al
f010be4c:	83 e0 1f             	and    $0x1f,%eax
f010be4f:	a2 34 e5 88 f0       	mov    %al,0xf088e534
f010be54:	a0 35 e5 88 f0       	mov    0xf088e535,%al
f010be59:	83 e0 f0             	and    $0xfffffff0,%eax
f010be5c:	83 c8 0e             	or     $0xe,%eax
f010be5f:	a2 35 e5 88 f0       	mov    %al,0xf088e535
f010be64:	a0 35 e5 88 f0       	mov    0xf088e535,%al
f010be69:	83 e0 ef             	and    $0xffffffef,%eax
f010be6c:	a2 35 e5 88 f0       	mov    %al,0xf088e535
f010be71:	a0 35 e5 88 f0       	mov    0xf088e535,%al
f010be76:	83 c8 60             	or     $0x60,%eax
f010be79:	a2 35 e5 88 f0       	mov    %al,0xf088e535
f010be7e:	a0 35 e5 88 f0       	mov    0xf088e535,%al
f010be83:	83 c8 80             	or     $0xffffff80,%eax
f010be86:	a2 35 e5 88 f0       	mov    %al,0xf088e535
f010be8b:	b8 ee cb 10 f0       	mov    $0xf010cbee,%eax
f010be90:	c1 e8 10             	shr    $0x10,%eax
f010be93:	66 a3 36 e5 88 f0    	mov    %ax,0xf088e536
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010be99:	b8 f4 cb 10 f0       	mov    $0xf010cbf4,%eax
f010be9e:	66 a3 38 e5 88 f0    	mov    %ax,0xf088e538
f010bea4:	66 c7 05 3a e5 88 f0 	movw   $0x8,0xf088e53a
f010beab:	08 00 
f010bead:	a0 3c e5 88 f0       	mov    0xf088e53c,%al
f010beb2:	83 e0 e0             	and    $0xffffffe0,%eax
f010beb5:	a2 3c e5 88 f0       	mov    %al,0xf088e53c
f010beba:	a0 3c e5 88 f0       	mov    0xf088e53c,%al
f010bebf:	83 e0 1f             	and    $0x1f,%eax
f010bec2:	a2 3c e5 88 f0       	mov    %al,0xf088e53c
f010bec7:	a0 3d e5 88 f0       	mov    0xf088e53d,%al
f010becc:	83 e0 f0             	and    $0xfffffff0,%eax
f010becf:	83 c8 0e             	or     $0xe,%eax
f010bed2:	a2 3d e5 88 f0       	mov    %al,0xf088e53d
f010bed7:	a0 3d e5 88 f0       	mov    0xf088e53d,%al
f010bedc:	83 e0 ef             	and    $0xffffffef,%eax
f010bedf:	a2 3d e5 88 f0       	mov    %al,0xf088e53d
f010bee4:	a0 3d e5 88 f0       	mov    0xf088e53d,%al
f010bee9:	83 c8 60             	or     $0x60,%eax
f010beec:	a2 3d e5 88 f0       	mov    %al,0xf088e53d
f010bef1:	a0 3d e5 88 f0       	mov    0xf088e53d,%al
f010bef6:	83 c8 80             	or     $0xffffff80,%eax
f010bef9:	a2 3d e5 88 f0       	mov    %al,0xf088e53d
f010befe:	b8 f4 cb 10 f0       	mov    $0xf010cbf4,%eax
f010bf03:	c1 e8 10             	shr    $0x10,%eax
f010bf06:	66 a3 3e e5 88 f0    	mov    %ax,0xf088e53e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bf0c:	b8 fa cb 10 f0       	mov    $0xf010cbfa,%eax
f010bf11:	66 a3 40 e5 88 f0    	mov    %ax,0xf088e540
f010bf17:	66 c7 05 42 e5 88 f0 	movw   $0x8,0xf088e542
f010bf1e:	08 00 
f010bf20:	a0 44 e5 88 f0       	mov    0xf088e544,%al
f010bf25:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf28:	a2 44 e5 88 f0       	mov    %al,0xf088e544
f010bf2d:	a0 44 e5 88 f0       	mov    0xf088e544,%al
f010bf32:	83 e0 1f             	and    $0x1f,%eax
f010bf35:	a2 44 e5 88 f0       	mov    %al,0xf088e544
f010bf3a:	a0 45 e5 88 f0       	mov    0xf088e545,%al
f010bf3f:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf42:	83 c8 0e             	or     $0xe,%eax
f010bf45:	a2 45 e5 88 f0       	mov    %al,0xf088e545
f010bf4a:	a0 45 e5 88 f0       	mov    0xf088e545,%al
f010bf4f:	83 e0 ef             	and    $0xffffffef,%eax
f010bf52:	a2 45 e5 88 f0       	mov    %al,0xf088e545
f010bf57:	a0 45 e5 88 f0       	mov    0xf088e545,%al
f010bf5c:	83 c8 60             	or     $0x60,%eax
f010bf5f:	a2 45 e5 88 f0       	mov    %al,0xf088e545
f010bf64:	a0 45 e5 88 f0       	mov    0xf088e545,%al
f010bf69:	83 c8 80             	or     $0xffffff80,%eax
f010bf6c:	a2 45 e5 88 f0       	mov    %al,0xf088e545
f010bf71:	b8 fa cb 10 f0       	mov    $0xf010cbfa,%eax
f010bf76:	c1 e8 10             	shr    $0x10,%eax
f010bf79:	66 a3 46 e5 88 f0    	mov    %ax,0xf088e546
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bf7f:	b8 00 cc 10 f0       	mov    $0xf010cc00,%eax
f010bf84:	66 a3 48 e5 88 f0    	mov    %ax,0xf088e548
f010bf8a:	66 c7 05 4a e5 88 f0 	movw   $0x8,0xf088e54a
f010bf91:	08 00 
f010bf93:	a0 4c e5 88 f0       	mov    0xf088e54c,%al
f010bf98:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf9b:	a2 4c e5 88 f0       	mov    %al,0xf088e54c
f010bfa0:	a0 4c e5 88 f0       	mov    0xf088e54c,%al
f010bfa5:	83 e0 1f             	and    $0x1f,%eax
f010bfa8:	a2 4c e5 88 f0       	mov    %al,0xf088e54c
f010bfad:	a0 4d e5 88 f0       	mov    0xf088e54d,%al
f010bfb2:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfb5:	83 c8 0e             	or     $0xe,%eax
f010bfb8:	a2 4d e5 88 f0       	mov    %al,0xf088e54d
f010bfbd:	a0 4d e5 88 f0       	mov    0xf088e54d,%al
f010bfc2:	83 e0 ef             	and    $0xffffffef,%eax
f010bfc5:	a2 4d e5 88 f0       	mov    %al,0xf088e54d
f010bfca:	a0 4d e5 88 f0       	mov    0xf088e54d,%al
f010bfcf:	83 c8 60             	or     $0x60,%eax
f010bfd2:	a2 4d e5 88 f0       	mov    %al,0xf088e54d
f010bfd7:	a0 4d e5 88 f0       	mov    0xf088e54d,%al
f010bfdc:	83 c8 80             	or     $0xffffff80,%eax
f010bfdf:	a2 4d e5 88 f0       	mov    %al,0xf088e54d
f010bfe4:	b8 00 cc 10 f0       	mov    $0xf010cc00,%eax
f010bfe9:	c1 e8 10             	shr    $0x10,%eax
f010bfec:	66 a3 4e e5 88 f0    	mov    %ax,0xf088e54e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bff2:	b8 06 cc 10 f0       	mov    $0xf010cc06,%eax
f010bff7:	66 a3 50 e5 88 f0    	mov    %ax,0xf088e550
f010bffd:	66 c7 05 52 e5 88 f0 	movw   $0x8,0xf088e552
f010c004:	08 00 
f010c006:	a0 54 e5 88 f0       	mov    0xf088e554,%al
f010c00b:	83 e0 e0             	and    $0xffffffe0,%eax
f010c00e:	a2 54 e5 88 f0       	mov    %al,0xf088e554
f010c013:	a0 54 e5 88 f0       	mov    0xf088e554,%al
f010c018:	83 e0 1f             	and    $0x1f,%eax
f010c01b:	a2 54 e5 88 f0       	mov    %al,0xf088e554
f010c020:	a0 55 e5 88 f0       	mov    0xf088e555,%al
f010c025:	83 e0 f0             	and    $0xfffffff0,%eax
f010c028:	83 c8 0e             	or     $0xe,%eax
f010c02b:	a2 55 e5 88 f0       	mov    %al,0xf088e555
f010c030:	a0 55 e5 88 f0       	mov    0xf088e555,%al
f010c035:	83 e0 ef             	and    $0xffffffef,%eax
f010c038:	a2 55 e5 88 f0       	mov    %al,0xf088e555
f010c03d:	a0 55 e5 88 f0       	mov    0xf088e555,%al
f010c042:	83 c8 60             	or     $0x60,%eax
f010c045:	a2 55 e5 88 f0       	mov    %al,0xf088e555
f010c04a:	a0 55 e5 88 f0       	mov    0xf088e555,%al
f010c04f:	83 c8 80             	or     $0xffffff80,%eax
f010c052:	a2 55 e5 88 f0       	mov    %al,0xf088e555
f010c057:	b8 06 cc 10 f0       	mov    $0xf010cc06,%eax
f010c05c:	c1 e8 10             	shr    $0x10,%eax
f010c05f:	66 a3 56 e5 88 f0    	mov    %ax,0xf088e556
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c065:	b8 0c cc 10 f0       	mov    $0xf010cc0c,%eax
f010c06a:	66 a3 58 e5 88 f0    	mov    %ax,0xf088e558
f010c070:	66 c7 05 5a e5 88 f0 	movw   $0x8,0xf088e55a
f010c077:	08 00 
f010c079:	a0 5c e5 88 f0       	mov    0xf088e55c,%al
f010c07e:	83 e0 e0             	and    $0xffffffe0,%eax
f010c081:	a2 5c e5 88 f0       	mov    %al,0xf088e55c
f010c086:	a0 5c e5 88 f0       	mov    0xf088e55c,%al
f010c08b:	83 e0 1f             	and    $0x1f,%eax
f010c08e:	a2 5c e5 88 f0       	mov    %al,0xf088e55c
f010c093:	a0 5d e5 88 f0       	mov    0xf088e55d,%al
f010c098:	83 e0 f0             	and    $0xfffffff0,%eax
f010c09b:	83 c8 0e             	or     $0xe,%eax
f010c09e:	a2 5d e5 88 f0       	mov    %al,0xf088e55d
f010c0a3:	a0 5d e5 88 f0       	mov    0xf088e55d,%al
f010c0a8:	83 e0 ef             	and    $0xffffffef,%eax
f010c0ab:	a2 5d e5 88 f0       	mov    %al,0xf088e55d
f010c0b0:	a0 5d e5 88 f0       	mov    0xf088e55d,%al
f010c0b5:	83 c8 60             	or     $0x60,%eax
f010c0b8:	a2 5d e5 88 f0       	mov    %al,0xf088e55d
f010c0bd:	a0 5d e5 88 f0       	mov    0xf088e55d,%al
f010c0c2:	83 c8 80             	or     $0xffffff80,%eax
f010c0c5:	a2 5d e5 88 f0       	mov    %al,0xf088e55d
f010c0ca:	b8 0c cc 10 f0       	mov    $0xf010cc0c,%eax
f010c0cf:	c1 e8 10             	shr    $0x10,%eax
f010c0d2:	66 a3 5e e5 88 f0    	mov    %ax,0xf088e55e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c0d8:	b8 12 cc 10 f0       	mov    $0xf010cc12,%eax
f010c0dd:	66 a3 60 e5 88 f0    	mov    %ax,0xf088e560
f010c0e3:	66 c7 05 62 e5 88 f0 	movw   $0x8,0xf088e562
f010c0ea:	08 00 
f010c0ec:	a0 64 e5 88 f0       	mov    0xf088e564,%al
f010c0f1:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0f4:	a2 64 e5 88 f0       	mov    %al,0xf088e564
f010c0f9:	a0 64 e5 88 f0       	mov    0xf088e564,%al
f010c0fe:	83 e0 1f             	and    $0x1f,%eax
f010c101:	a2 64 e5 88 f0       	mov    %al,0xf088e564
f010c106:	a0 65 e5 88 f0       	mov    0xf088e565,%al
f010c10b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c10e:	83 c8 0e             	or     $0xe,%eax
f010c111:	a2 65 e5 88 f0       	mov    %al,0xf088e565
f010c116:	a0 65 e5 88 f0       	mov    0xf088e565,%al
f010c11b:	83 e0 ef             	and    $0xffffffef,%eax
f010c11e:	a2 65 e5 88 f0       	mov    %al,0xf088e565
f010c123:	a0 65 e5 88 f0       	mov    0xf088e565,%al
f010c128:	83 c8 60             	or     $0x60,%eax
f010c12b:	a2 65 e5 88 f0       	mov    %al,0xf088e565
f010c130:	a0 65 e5 88 f0       	mov    0xf088e565,%al
f010c135:	83 c8 80             	or     $0xffffff80,%eax
f010c138:	a2 65 e5 88 f0       	mov    %al,0xf088e565
f010c13d:	b8 12 cc 10 f0       	mov    $0xf010cc12,%eax
f010c142:	c1 e8 10             	shr    $0x10,%eax
f010c145:	66 a3 66 e5 88 f0    	mov    %ax,0xf088e566
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c14b:	b8 18 cc 10 f0       	mov    $0xf010cc18,%eax
f010c150:	66 a3 68 e5 88 f0    	mov    %ax,0xf088e568
f010c156:	66 c7 05 6a e5 88 f0 	movw   $0x8,0xf088e56a
f010c15d:	08 00 
f010c15f:	a0 6c e5 88 f0       	mov    0xf088e56c,%al
f010c164:	83 e0 e0             	and    $0xffffffe0,%eax
f010c167:	a2 6c e5 88 f0       	mov    %al,0xf088e56c
f010c16c:	a0 6c e5 88 f0       	mov    0xf088e56c,%al
f010c171:	83 e0 1f             	and    $0x1f,%eax
f010c174:	a2 6c e5 88 f0       	mov    %al,0xf088e56c
f010c179:	a0 6d e5 88 f0       	mov    0xf088e56d,%al
f010c17e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c181:	83 c8 0e             	or     $0xe,%eax
f010c184:	a2 6d e5 88 f0       	mov    %al,0xf088e56d
f010c189:	a0 6d e5 88 f0       	mov    0xf088e56d,%al
f010c18e:	83 e0 ef             	and    $0xffffffef,%eax
f010c191:	a2 6d e5 88 f0       	mov    %al,0xf088e56d
f010c196:	a0 6d e5 88 f0       	mov    0xf088e56d,%al
f010c19b:	83 c8 60             	or     $0x60,%eax
f010c19e:	a2 6d e5 88 f0       	mov    %al,0xf088e56d
f010c1a3:	a0 6d e5 88 f0       	mov    0xf088e56d,%al
f010c1a8:	83 c8 80             	or     $0xffffff80,%eax
f010c1ab:	a2 6d e5 88 f0       	mov    %al,0xf088e56d
f010c1b0:	b8 18 cc 10 f0       	mov    $0xf010cc18,%eax
f010c1b5:	c1 e8 10             	shr    $0x10,%eax
f010c1b8:	66 a3 6e e5 88 f0    	mov    %ax,0xf088e56e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c1be:	b8 1e cc 10 f0       	mov    $0xf010cc1e,%eax
f010c1c3:	66 a3 70 e5 88 f0    	mov    %ax,0xf088e570
f010c1c9:	66 c7 05 72 e5 88 f0 	movw   $0x8,0xf088e572
f010c1d0:	08 00 
f010c1d2:	a0 74 e5 88 f0       	mov    0xf088e574,%al
f010c1d7:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1da:	a2 74 e5 88 f0       	mov    %al,0xf088e574
f010c1df:	a0 74 e5 88 f0       	mov    0xf088e574,%al
f010c1e4:	83 e0 1f             	and    $0x1f,%eax
f010c1e7:	a2 74 e5 88 f0       	mov    %al,0xf088e574
f010c1ec:	a0 75 e5 88 f0       	mov    0xf088e575,%al
f010c1f1:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1f4:	83 c8 0e             	or     $0xe,%eax
f010c1f7:	a2 75 e5 88 f0       	mov    %al,0xf088e575
f010c1fc:	a0 75 e5 88 f0       	mov    0xf088e575,%al
f010c201:	83 e0 ef             	and    $0xffffffef,%eax
f010c204:	a2 75 e5 88 f0       	mov    %al,0xf088e575
f010c209:	a0 75 e5 88 f0       	mov    0xf088e575,%al
f010c20e:	83 c8 60             	or     $0x60,%eax
f010c211:	a2 75 e5 88 f0       	mov    %al,0xf088e575
f010c216:	a0 75 e5 88 f0       	mov    0xf088e575,%al
f010c21b:	83 c8 80             	or     $0xffffff80,%eax
f010c21e:	a2 75 e5 88 f0       	mov    %al,0xf088e575
f010c223:	b8 1e cc 10 f0       	mov    $0xf010cc1e,%eax
f010c228:	c1 e8 10             	shr    $0x10,%eax
f010c22b:	66 a3 76 e5 88 f0    	mov    %ax,0xf088e576
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c231:	b8 24 cc 10 f0       	mov    $0xf010cc24,%eax
f010c236:	66 a3 78 e5 88 f0    	mov    %ax,0xf088e578
f010c23c:	66 c7 05 7a e5 88 f0 	movw   $0x8,0xf088e57a
f010c243:	08 00 
f010c245:	a0 7c e5 88 f0       	mov    0xf088e57c,%al
f010c24a:	83 e0 e0             	and    $0xffffffe0,%eax
f010c24d:	a2 7c e5 88 f0       	mov    %al,0xf088e57c
f010c252:	a0 7c e5 88 f0       	mov    0xf088e57c,%al
f010c257:	83 e0 1f             	and    $0x1f,%eax
f010c25a:	a2 7c e5 88 f0       	mov    %al,0xf088e57c
f010c25f:	a0 7d e5 88 f0       	mov    0xf088e57d,%al
f010c264:	83 e0 f0             	and    $0xfffffff0,%eax
f010c267:	83 c8 0e             	or     $0xe,%eax
f010c26a:	a2 7d e5 88 f0       	mov    %al,0xf088e57d
f010c26f:	a0 7d e5 88 f0       	mov    0xf088e57d,%al
f010c274:	83 e0 ef             	and    $0xffffffef,%eax
f010c277:	a2 7d e5 88 f0       	mov    %al,0xf088e57d
f010c27c:	a0 7d e5 88 f0       	mov    0xf088e57d,%al
f010c281:	83 c8 60             	or     $0x60,%eax
f010c284:	a2 7d e5 88 f0       	mov    %al,0xf088e57d
f010c289:	a0 7d e5 88 f0       	mov    0xf088e57d,%al
f010c28e:	83 c8 80             	or     $0xffffff80,%eax
f010c291:	a2 7d e5 88 f0       	mov    %al,0xf088e57d
f010c296:	b8 24 cc 10 f0       	mov    $0xf010cc24,%eax
f010c29b:	c1 e8 10             	shr    $0x10,%eax
f010c29e:	66 a3 7e e5 88 f0    	mov    %ax,0xf088e57e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c2a4:	b8 2a cc 10 f0       	mov    $0xf010cc2a,%eax
f010c2a9:	66 a3 80 e5 88 f0    	mov    %ax,0xf088e580
f010c2af:	66 c7 05 82 e5 88 f0 	movw   $0x8,0xf088e582
f010c2b6:	08 00 
f010c2b8:	a0 84 e5 88 f0       	mov    0xf088e584,%al
f010c2bd:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2c0:	a2 84 e5 88 f0       	mov    %al,0xf088e584
f010c2c5:	a0 84 e5 88 f0       	mov    0xf088e584,%al
f010c2ca:	83 e0 1f             	and    $0x1f,%eax
f010c2cd:	a2 84 e5 88 f0       	mov    %al,0xf088e584
f010c2d2:	a0 85 e5 88 f0       	mov    0xf088e585,%al
f010c2d7:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2da:	83 c8 0e             	or     $0xe,%eax
f010c2dd:	a2 85 e5 88 f0       	mov    %al,0xf088e585
f010c2e2:	a0 85 e5 88 f0       	mov    0xf088e585,%al
f010c2e7:	83 e0 ef             	and    $0xffffffef,%eax
f010c2ea:	a2 85 e5 88 f0       	mov    %al,0xf088e585
f010c2ef:	a0 85 e5 88 f0       	mov    0xf088e585,%al
f010c2f4:	83 c8 60             	or     $0x60,%eax
f010c2f7:	a2 85 e5 88 f0       	mov    %al,0xf088e585
f010c2fc:	a0 85 e5 88 f0       	mov    0xf088e585,%al
f010c301:	83 c8 80             	or     $0xffffff80,%eax
f010c304:	a2 85 e5 88 f0       	mov    %al,0xf088e585
f010c309:	b8 2a cc 10 f0       	mov    $0xf010cc2a,%eax
f010c30e:	c1 e8 10             	shr    $0x10,%eax
f010c311:	66 a3 86 e5 88 f0    	mov    %ax,0xf088e586
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c317:	b8 30 cc 10 f0       	mov    $0xf010cc30,%eax
f010c31c:	66 a3 88 e5 88 f0    	mov    %ax,0xf088e588
f010c322:	66 c7 05 8a e5 88 f0 	movw   $0x8,0xf088e58a
f010c329:	08 00 
f010c32b:	a0 8c e5 88 f0       	mov    0xf088e58c,%al
f010c330:	83 e0 e0             	and    $0xffffffe0,%eax
f010c333:	a2 8c e5 88 f0       	mov    %al,0xf088e58c
f010c338:	a0 8c e5 88 f0       	mov    0xf088e58c,%al
f010c33d:	83 e0 1f             	and    $0x1f,%eax
f010c340:	a2 8c e5 88 f0       	mov    %al,0xf088e58c
f010c345:	a0 8d e5 88 f0       	mov    0xf088e58d,%al
f010c34a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c34d:	83 c8 0e             	or     $0xe,%eax
f010c350:	a2 8d e5 88 f0       	mov    %al,0xf088e58d
f010c355:	a0 8d e5 88 f0       	mov    0xf088e58d,%al
f010c35a:	83 e0 ef             	and    $0xffffffef,%eax
f010c35d:	a2 8d e5 88 f0       	mov    %al,0xf088e58d
f010c362:	a0 8d e5 88 f0       	mov    0xf088e58d,%al
f010c367:	83 c8 60             	or     $0x60,%eax
f010c36a:	a2 8d e5 88 f0       	mov    %al,0xf088e58d
f010c36f:	a0 8d e5 88 f0       	mov    0xf088e58d,%al
f010c374:	83 c8 80             	or     $0xffffff80,%eax
f010c377:	a2 8d e5 88 f0       	mov    %al,0xf088e58d
f010c37c:	b8 30 cc 10 f0       	mov    $0xf010cc30,%eax
f010c381:	c1 e8 10             	shr    $0x10,%eax
f010c384:	66 a3 8e e5 88 f0    	mov    %ax,0xf088e58e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c38a:	b8 36 cc 10 f0       	mov    $0xf010cc36,%eax
f010c38f:	66 a3 90 e5 88 f0    	mov    %ax,0xf088e590
f010c395:	66 c7 05 92 e5 88 f0 	movw   $0x8,0xf088e592
f010c39c:	08 00 
f010c39e:	a0 94 e5 88 f0       	mov    0xf088e594,%al
f010c3a3:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3a6:	a2 94 e5 88 f0       	mov    %al,0xf088e594
f010c3ab:	a0 94 e5 88 f0       	mov    0xf088e594,%al
f010c3b0:	83 e0 1f             	and    $0x1f,%eax
f010c3b3:	a2 94 e5 88 f0       	mov    %al,0xf088e594
f010c3b8:	a0 95 e5 88 f0       	mov    0xf088e595,%al
f010c3bd:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3c0:	83 c8 0e             	or     $0xe,%eax
f010c3c3:	a2 95 e5 88 f0       	mov    %al,0xf088e595
f010c3c8:	a0 95 e5 88 f0       	mov    0xf088e595,%al
f010c3cd:	83 e0 ef             	and    $0xffffffef,%eax
f010c3d0:	a2 95 e5 88 f0       	mov    %al,0xf088e595
f010c3d5:	a0 95 e5 88 f0       	mov    0xf088e595,%al
f010c3da:	83 c8 60             	or     $0x60,%eax
f010c3dd:	a2 95 e5 88 f0       	mov    %al,0xf088e595
f010c3e2:	a0 95 e5 88 f0       	mov    0xf088e595,%al
f010c3e7:	83 c8 80             	or     $0xffffff80,%eax
f010c3ea:	a2 95 e5 88 f0       	mov    %al,0xf088e595
f010c3ef:	b8 36 cc 10 f0       	mov    $0xf010cc36,%eax
f010c3f4:	c1 e8 10             	shr    $0x10,%eax
f010c3f7:	66 a3 96 e5 88 f0    	mov    %ax,0xf088e596
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c3fd:	b8 3c cc 10 f0       	mov    $0xf010cc3c,%eax
f010c402:	66 a3 98 e5 88 f0    	mov    %ax,0xf088e598
f010c408:	66 c7 05 9a e5 88 f0 	movw   $0x8,0xf088e59a
f010c40f:	08 00 
f010c411:	a0 9c e5 88 f0       	mov    0xf088e59c,%al
f010c416:	83 e0 e0             	and    $0xffffffe0,%eax
f010c419:	a2 9c e5 88 f0       	mov    %al,0xf088e59c
f010c41e:	a0 9c e5 88 f0       	mov    0xf088e59c,%al
f010c423:	83 e0 1f             	and    $0x1f,%eax
f010c426:	a2 9c e5 88 f0       	mov    %al,0xf088e59c
f010c42b:	a0 9d e5 88 f0       	mov    0xf088e59d,%al
f010c430:	83 e0 f0             	and    $0xfffffff0,%eax
f010c433:	83 c8 0e             	or     $0xe,%eax
f010c436:	a2 9d e5 88 f0       	mov    %al,0xf088e59d
f010c43b:	a0 9d e5 88 f0       	mov    0xf088e59d,%al
f010c440:	83 e0 ef             	and    $0xffffffef,%eax
f010c443:	a2 9d e5 88 f0       	mov    %al,0xf088e59d
f010c448:	a0 9d e5 88 f0       	mov    0xf088e59d,%al
f010c44d:	83 c8 60             	or     $0x60,%eax
f010c450:	a2 9d e5 88 f0       	mov    %al,0xf088e59d
f010c455:	a0 9d e5 88 f0       	mov    0xf088e59d,%al
f010c45a:	83 c8 80             	or     $0xffffff80,%eax
f010c45d:	a2 9d e5 88 f0       	mov    %al,0xf088e59d
f010c462:	b8 3c cc 10 f0       	mov    $0xf010cc3c,%eax
f010c467:	c1 e8 10             	shr    $0x10,%eax
f010c46a:	66 a3 9e e5 88 f0    	mov    %ax,0xf088e59e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c470:	c7 05 44 ec 88 f0 00 	movl   $0xefc00000,0xf088ec44
f010c477:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c47a:	66 c7 05 48 ec 88 f0 	movw   $0x10,0xf088ec48
f010c481:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c483:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c48a:	68 00 
f010c48c:	b8 40 ec 88 f0       	mov    $0xf088ec40,%eax
f010c491:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c497:	b8 40 ec 88 f0       	mov    $0xf088ec40,%eax
f010c49c:	c1 e8 10             	shr    $0x10,%eax
f010c49f:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c4a4:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c4a9:	83 e0 f0             	and    $0xfffffff0,%eax
f010c4ac:	83 c8 09             	or     $0x9,%eax
f010c4af:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c4b4:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c4b9:	83 c8 10             	or     $0x10,%eax
f010c4bc:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c4c1:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c4c6:	83 e0 9f             	and    $0xffffff9f,%eax
f010c4c9:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c4ce:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c4d3:	83 c8 80             	or     $0xffffff80,%eax
f010c4d6:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c4db:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c4e0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c4e3:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c4e8:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c4ed:	83 e0 ef             	and    $0xffffffef,%eax
f010c4f0:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c4f5:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c4fa:	83 e0 df             	and    $0xffffffdf,%eax
f010c4fd:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c502:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c507:	83 c8 40             	or     $0x40,%eax
f010c50a:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c50f:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c514:	83 e0 7f             	and    $0x7f,%eax
f010c517:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c51c:	b8 40 ec 88 f0       	mov    $0xf088ec40,%eax
f010c521:	c1 e8 18             	shr    $0x18,%eax
f010c524:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c529:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c52e:	83 e0 ef             	and    $0xffffffef,%eax
f010c531:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c536:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c53c:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c540:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c543:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c54a:	90                   	nop
f010c54b:	c9                   	leave  
f010c54c:	c3                   	ret    

f010c54d <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c54d:	55                   	push   %ebp
f010c54e:	89 e5                	mov    %esp,%ebp
f010c550:	53                   	push   %ebx
f010c551:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c554:	83 ec 08             	sub    $0x8,%esp
f010c557:	ff 75 08             	pushl  0x8(%ebp)
f010c55a:	68 db 77 13 f0       	push   $0xf01377db
f010c55f:	e8 aa 47 ff ff       	call   f0100d0e <cprintf>
f010c564:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c567:	8b 45 08             	mov    0x8(%ebp),%eax
f010c56a:	83 ec 0c             	sub    $0xc,%esp
f010c56d:	50                   	push   %eax
f010c56e:	e8 fd 00 00 00       	call   f010c670 <print_regs>
f010c573:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c576:	8b 45 08             	mov    0x8(%ebp),%eax
f010c579:	8b 40 20             	mov    0x20(%eax),%eax
f010c57c:	0f b7 c0             	movzwl %ax,%eax
f010c57f:	83 ec 08             	sub    $0x8,%esp
f010c582:	50                   	push   %eax
f010c583:	68 ed 77 13 f0       	push   $0xf01377ed
f010c588:	e8 81 47 ff ff       	call   f0100d0e <cprintf>
f010c58d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c590:	8b 45 08             	mov    0x8(%ebp),%eax
f010c593:	8b 40 24             	mov    0x24(%eax),%eax
f010c596:	0f b7 c0             	movzwl %ax,%eax
f010c599:	83 ec 08             	sub    $0x8,%esp
f010c59c:	50                   	push   %eax
f010c59d:	68 00 78 13 f0       	push   $0xf0137800
f010c5a2:	e8 67 47 ff ff       	call   f0100d0e <cprintf>
f010c5a7:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c5aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5ad:	8b 58 28             	mov    0x28(%eax),%ebx
f010c5b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5b3:	8b 40 28             	mov    0x28(%eax),%eax
f010c5b6:	83 ec 0c             	sub    $0xc,%esp
f010c5b9:	50                   	push   %eax
f010c5ba:	e8 d0 ee ff ff       	call   f010b48f <trapname>
f010c5bf:	83 c4 10             	add    $0x10,%esp
f010c5c2:	89 c2                	mov    %eax,%edx
f010c5c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5c7:	8b 40 28             	mov    0x28(%eax),%eax
f010c5ca:	53                   	push   %ebx
f010c5cb:	52                   	push   %edx
f010c5cc:	50                   	push   %eax
f010c5cd:	68 13 78 13 f0       	push   $0xf0137813
f010c5d2:	e8 37 47 ff ff       	call   f0100d0e <cprintf>
f010c5d7:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c5da:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5dd:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c5e0:	83 ec 08             	sub    $0x8,%esp
f010c5e3:	50                   	push   %eax
f010c5e4:	68 2a 78 13 f0       	push   $0xf013782a
f010c5e9:	e8 20 47 ff ff       	call   f0100d0e <cprintf>
f010c5ee:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c5f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5f4:	8b 40 30             	mov    0x30(%eax),%eax
f010c5f7:	83 ec 08             	sub    $0x8,%esp
f010c5fa:	50                   	push   %eax
f010c5fb:	68 39 78 13 f0       	push   $0xf0137839
f010c600:	e8 09 47 ff ff       	call   f0100d0e <cprintf>
f010c605:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c608:	8b 45 08             	mov    0x8(%ebp),%eax
f010c60b:	8b 40 34             	mov    0x34(%eax),%eax
f010c60e:	0f b7 c0             	movzwl %ax,%eax
f010c611:	83 ec 08             	sub    $0x8,%esp
f010c614:	50                   	push   %eax
f010c615:	68 48 78 13 f0       	push   $0xf0137848
f010c61a:	e8 ef 46 ff ff       	call   f0100d0e <cprintf>
f010c61f:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c622:	8b 45 08             	mov    0x8(%ebp),%eax
f010c625:	8b 40 38             	mov    0x38(%eax),%eax
f010c628:	83 ec 08             	sub    $0x8,%esp
f010c62b:	50                   	push   %eax
f010c62c:	68 5b 78 13 f0       	push   $0xf013785b
f010c631:	e8 d8 46 ff ff       	call   f0100d0e <cprintf>
f010c636:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c639:	8b 45 08             	mov    0x8(%ebp),%eax
f010c63c:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c63f:	83 ec 08             	sub    $0x8,%esp
f010c642:	50                   	push   %eax
f010c643:	68 6a 78 13 f0       	push   $0xf013786a
f010c648:	e8 c1 46 ff ff       	call   f0100d0e <cprintf>
f010c64d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c650:	8b 45 08             	mov    0x8(%ebp),%eax
f010c653:	8b 40 40             	mov    0x40(%eax),%eax
f010c656:	0f b7 c0             	movzwl %ax,%eax
f010c659:	83 ec 08             	sub    $0x8,%esp
f010c65c:	50                   	push   %eax
f010c65d:	68 79 78 13 f0       	push   $0xf0137879
f010c662:	e8 a7 46 ff ff       	call   f0100d0e <cprintf>
f010c667:	83 c4 10             	add    $0x10,%esp
}
f010c66a:	90                   	nop
f010c66b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c66e:	c9                   	leave  
f010c66f:	c3                   	ret    

f010c670 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c670:	55                   	push   %ebp
f010c671:	89 e5                	mov    %esp,%ebp
f010c673:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c676:	8b 45 08             	mov    0x8(%ebp),%eax
f010c679:	8b 00                	mov    (%eax),%eax
f010c67b:	83 ec 08             	sub    $0x8,%esp
f010c67e:	50                   	push   %eax
f010c67f:	68 8c 78 13 f0       	push   $0xf013788c
f010c684:	e8 85 46 ff ff       	call   f0100d0e <cprintf>
f010c689:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c68c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c68f:	8b 40 04             	mov    0x4(%eax),%eax
f010c692:	83 ec 08             	sub    $0x8,%esp
f010c695:	50                   	push   %eax
f010c696:	68 9b 78 13 f0       	push   $0xf013789b
f010c69b:	e8 6e 46 ff ff       	call   f0100d0e <cprintf>
f010c6a0:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c6a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6a6:	8b 40 08             	mov    0x8(%eax),%eax
f010c6a9:	83 ec 08             	sub    $0x8,%esp
f010c6ac:	50                   	push   %eax
f010c6ad:	68 aa 78 13 f0       	push   $0xf01378aa
f010c6b2:	e8 57 46 ff ff       	call   f0100d0e <cprintf>
f010c6b7:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c6ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6bd:	8b 40 0c             	mov    0xc(%eax),%eax
f010c6c0:	83 ec 08             	sub    $0x8,%esp
f010c6c3:	50                   	push   %eax
f010c6c4:	68 b9 78 13 f0       	push   $0xf01378b9
f010c6c9:	e8 40 46 ff ff       	call   f0100d0e <cprintf>
f010c6ce:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c6d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6d4:	8b 40 10             	mov    0x10(%eax),%eax
f010c6d7:	83 ec 08             	sub    $0x8,%esp
f010c6da:	50                   	push   %eax
f010c6db:	68 c8 78 13 f0       	push   $0xf01378c8
f010c6e0:	e8 29 46 ff ff       	call   f0100d0e <cprintf>
f010c6e5:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c6e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6eb:	8b 40 14             	mov    0x14(%eax),%eax
f010c6ee:	83 ec 08             	sub    $0x8,%esp
f010c6f1:	50                   	push   %eax
f010c6f2:	68 d7 78 13 f0       	push   $0xf01378d7
f010c6f7:	e8 12 46 ff ff       	call   f0100d0e <cprintf>
f010c6fc:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c6ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010c702:	8b 40 18             	mov    0x18(%eax),%eax
f010c705:	83 ec 08             	sub    $0x8,%esp
f010c708:	50                   	push   %eax
f010c709:	68 e6 78 13 f0       	push   $0xf01378e6
f010c70e:	e8 fb 45 ff ff       	call   f0100d0e <cprintf>
f010c713:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c716:	8b 45 08             	mov    0x8(%ebp),%eax
f010c719:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c71c:	83 ec 08             	sub    $0x8,%esp
f010c71f:	50                   	push   %eax
f010c720:	68 f5 78 13 f0       	push   $0xf01378f5
f010c725:	e8 e4 45 ff ff       	call   f0100d0e <cprintf>
f010c72a:	83 c4 10             	add    $0x10,%esp
}
f010c72d:	90                   	nop
f010c72e:	c9                   	leave  
f010c72f:	c3                   	ret    

f010c730 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c730:	55                   	push   %ebp
f010c731:	89 e5                	mov    %esp,%ebp
f010c733:	57                   	push   %edi
f010c734:	56                   	push   %esi
f010c735:	53                   	push   %ebx
f010c736:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c739:	8b 45 08             	mov    0x8(%ebp),%eax
f010c73c:	8b 40 28             	mov    0x28(%eax),%eax
f010c73f:	83 f8 0e             	cmp    $0xe,%eax
f010c742:	75 29                	jne    f010c76d <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c744:	83 ec 0c             	sub    $0xc,%esp
f010c747:	6a 01                	push   $0x1
f010c749:	e8 fb 18 00 00       	call   f010e049 <isPageReplacmentAlgorithmLRU>
f010c74e:	83 c4 10             	add    $0x10,%esp
f010c751:	85 c0                	test   %eax,%eax
f010c753:	74 05                	je     f010c75a <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c755:	e8 d2 92 ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c75a:	83 ec 0c             	sub    $0xc,%esp
f010c75d:	ff 75 08             	pushl  0x8(%ebp)
f010c760:	e8 51 02 00 00       	call   f010c9b6 <fault_handler>
f010c765:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c768:	e9 bb 00 00 00       	jmp    f010c828 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c76d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c770:	8b 40 28             	mov    0x28(%eax),%eax
f010c773:	83 f8 30             	cmp    $0x30,%eax
f010c776:	75 42                	jne    f010c7ba <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c778:	8b 45 08             	mov    0x8(%ebp),%eax
f010c77b:	8b 78 04             	mov    0x4(%eax),%edi
f010c77e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c781:	8b 30                	mov    (%eax),%esi
f010c783:	8b 45 08             	mov    0x8(%ebp),%eax
f010c786:	8b 58 10             	mov    0x10(%eax),%ebx
f010c789:	8b 45 08             	mov    0x8(%ebp),%eax
f010c78c:	8b 48 18             	mov    0x18(%eax),%ecx
f010c78f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c792:	8b 50 14             	mov    0x14(%eax),%edx
f010c795:	8b 45 08             	mov    0x8(%ebp),%eax
f010c798:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c79b:	83 ec 08             	sub    $0x8,%esp
f010c79e:	57                   	push   %edi
f010c79f:	56                   	push   %esi
f010c7a0:	53                   	push   %ebx
f010c7a1:	51                   	push   %ecx
f010c7a2:	52                   	push   %edx
f010c7a3:	50                   	push   %eax
f010c7a4:	e8 eb 0f 00 00       	call   f010d794 <syscall>
f010c7a9:	83 c4 20             	add    $0x20,%esp
f010c7ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c7af:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c7b5:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c7b8:	eb 6e                	jmp    f010c828 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c7ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7bd:	8b 40 28             	mov    0x28(%eax),%eax
f010c7c0:	83 f8 08             	cmp    $0x8,%eax
f010c7c3:	75 17                	jne    f010c7dc <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c7c5:	83 ec 04             	sub    $0x4,%esp
f010c7c8:	68 04 79 13 f0       	push   $0xf0137904
f010c7cd:	68 e7 00 00 00       	push   $0xe7
f010c7d2:	68 13 79 13 f0       	push   $0xf0137913
f010c7d7:	e8 29 3a ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c7dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7df:	8b 40 28             	mov    0x28(%eax),%eax
f010c7e2:	83 f8 20             	cmp    $0x20,%eax
f010c7e5:	75 07                	jne    f010c7ee <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c7e7:	e8 1f 92 ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c7ec:	eb 3a                	jmp    f010c828 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c7ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7f1:	8b 40 34             	mov    0x34(%eax),%eax
f010c7f4:	66 83 f8 08          	cmp    $0x8,%ax
f010c7f8:	75 17                	jne    f010c811 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c7fa:	83 ec 04             	sub    $0x4,%esp
f010c7fd:	68 24 79 13 f0       	push   $0xf0137924
f010c802:	68 f4 00 00 00       	push   $0xf4
f010c807:	68 13 79 13 f0       	push   $0xf0137913
f010c80c:	e8 f4 39 ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c811:	83 ec 04             	sub    $0x4,%esp
f010c814:	68 40 79 13 f0       	push   $0xf0137940
f010c819:	68 f8 00 00 00       	push   $0xf8
f010c81e:	68 13 79 13 f0       	push   $0xf0137913
f010c823:	e8 dd 39 ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c828:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c82b:	5b                   	pop    %ebx
f010c82c:	5e                   	pop    %esi
f010c82d:	5f                   	pop    %edi
f010c82e:	5d                   	pop    %ebp
f010c82f:	c3                   	ret    

f010c830 <trap>:

void trap(struct Trapframe *tf)
{
f010c830:	55                   	push   %ebp
f010c831:	89 e5                	mov    %esp,%ebp
f010c833:	57                   	push   %edi
f010c834:	56                   	push   %esi
f010c835:	53                   	push   %ebx
f010c836:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c839:	e8 56 79 ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010c83e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c845:	8b 45 08             	mov    0x8(%ebp),%eax
f010c848:	8b 40 34             	mov    0x34(%eax),%eax
f010c84b:	0f b7 c0             	movzwl %ax,%eax
f010c84e:	83 e0 03             	and    $0x3,%eax
f010c851:	83 f8 03             	cmp    $0x3,%eax
f010c854:	75 49                	jne    f010c89f <trap+0x6f>
		assert(curenv);
f010c856:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c85b:	85 c0                	test   %eax,%eax
f010c85d:	75 19                	jne    f010c878 <trap+0x48>
f010c85f:	68 5f 79 13 f0       	push   $0xf013795f
f010c864:	68 66 79 13 f0       	push   $0xf0137966
f010c869:	68 06 01 00 00       	push   $0x106
f010c86e:	68 13 79 13 f0       	push   $0xf0137913
f010c873:	e8 8d 39 ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c878:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010c87e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c881:	89 c3                	mov    %eax,%ebx
f010c883:	b8 11 00 00 00       	mov    $0x11,%eax
f010c888:	89 d7                	mov    %edx,%edi
f010c88a:	89 de                	mov    %ebx,%esi
f010c88c:	89 c1                	mov    %eax,%ecx
f010c88e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c890:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c895:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c898:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c89f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a2:	8b 40 28             	mov    0x28(%eax),%eax
f010c8a5:	83 f8 20             	cmp    $0x20,%eax
f010c8a8:	75 40                	jne    f010c8ea <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c8aa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c8ae:	0f 84 a6 00 00 00    	je     f010c95a <trap+0x12a>
		{
			assert(curenv);
f010c8b4:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c8b9:	85 c0                	test   %eax,%eax
f010c8bb:	75 19                	jne    f010c8d6 <trap+0xa6>
f010c8bd:	68 5f 79 13 f0       	push   $0xf013795f
f010c8c2:	68 66 79 13 f0       	push   $0xf0137966
f010c8c7:	68 12 01 00 00       	push   $0x112
f010c8cc:	68 13 79 13 f0       	push   $0xf0137913
f010c8d1:	e8 2f 39 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c8d6:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c8db:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c8e1:	42                   	inc    %edx
f010c8e2:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c8e8:	eb 70                	jmp    f010c95a <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c8ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ed:	8b 40 28             	mov    0x28(%eax),%eax
f010c8f0:	83 f8 0e             	cmp    $0xe,%eax
f010c8f3:	75 65                	jne    f010c95a <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c8f5:	a0 a8 ec 88 f0       	mov    0xf088eca8,%al
f010c8fa:	84 c0                	test   %al,%al
f010c8fc:	74 5c                	je     f010c95a <trap+0x12a>
			if (userTrap){
f010c8fe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c902:	74 2c                	je     f010c930 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c904:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c909:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010c90f:	8b 52 30             	mov    0x30(%edx),%edx
f010c912:	89 d1                	mov    %edx,%ecx
f010c914:	8a 15 a8 ec 88 f0    	mov    0xf088eca8,%dl
f010c91a:	0f b6 d2             	movzbl %dl,%edx
f010c91d:	01 ca                	add    %ecx,%edx
f010c91f:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c922:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c927:	83 ec 0c             	sub    $0xc,%esp
f010c92a:	50                   	push   %eax
f010c92b:	e8 43 d4 ff ff       	call   f0109d73 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c930:	8b 45 08             	mov    0x8(%ebp),%eax
f010c933:	8b 40 30             	mov    0x30(%eax),%eax
f010c936:	89 c2                	mov    %eax,%edx
f010c938:	a0 a8 ec 88 f0       	mov    0xf088eca8,%al
f010c93d:	0f b6 c0             	movzbl %al,%eax
f010c940:	01 d0                	add    %edx,%eax
f010c942:	89 c2                	mov    %eax,%edx
f010c944:	8b 45 08             	mov    0x8(%ebp),%eax
f010c947:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c94a:	e8 70 78 ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010c94f:	83 ec 0c             	sub    $0xc,%esp
f010c952:	ff 75 08             	pushl  0x8(%ebp)
f010c955:	e8 7c d5 ff ff       	call   f0109ed6 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c95a:	83 ec 0c             	sub    $0xc,%esp
f010c95d:	ff 75 08             	pushl  0x8(%ebp)
f010c960:	e8 cb fd ff ff       	call   f010c730 <trap_dispatch>
f010c965:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c968:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c96c:	74 3d                	je     f010c9ab <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c96e:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c973:	85 c0                	test   %eax,%eax
f010c975:	74 0d                	je     f010c984 <trap+0x154>
f010c977:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c97c:	8b 40 54             	mov    0x54(%eax),%eax
f010c97f:	83 f8 02             	cmp    $0x2,%eax
f010c982:	74 19                	je     f010c99d <trap+0x16d>
f010c984:	68 7c 79 13 f0       	push   $0xf013797c
f010c989:	68 66 79 13 f0       	push   $0xf0137966
f010c98e:	68 27 01 00 00       	push   $0x127
f010c993:	68 13 79 13 f0       	push   $0xf0137913
f010c998:	e8 68 38 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010c99d:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010c9a2:	83 ec 0c             	sub    $0xc,%esp
f010c9a5:	50                   	push   %eax
f010c9a6:	e8 c8 d3 ff ff       	call   f0109d73 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c9ab:	83 ec 0c             	sub    $0xc,%esp
f010c9ae:	ff 75 08             	pushl  0x8(%ebp)
f010c9b1:	e8 20 d5 ff ff       	call   f0109ed6 <env_pop_tf>

f010c9b6 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c9b6:	55                   	push   %ebp
f010c9b7:	89 e5                	mov    %esp,%ebp
f010c9b9:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c9bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c9c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9c6:	8b 40 34             	mov    0x34(%eax),%eax
f010c9c9:	0f b7 c0             	movzwl %ax,%eax
f010c9cc:	83 e0 03             	and    $0x3,%eax
f010c9cf:	83 f8 03             	cmp    $0x3,%eax
f010c9d2:	75 07                	jne    f010c9db <fault_handler+0x25>
		userTrap = 1;
f010c9d4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c9db:	0f 20 d0             	mov    %cr2,%eax
f010c9de:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c9e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c9e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c9e7:	a1 20 ec 88 f0       	mov    0xf088ec20,%eax
f010c9ec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c9ef:	75 2b                	jne    f010ca1c <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c9f1:	a0 24 ec 88 f0       	mov    0xf088ec24,%al
f010c9f6:	40                   	inc    %eax
f010c9f7:	a2 24 ec 88 f0       	mov    %al,0xf088ec24
		if (num_repeated_fault == 3)
f010c9fc:	a0 24 ec 88 f0       	mov    0xf088ec24,%al
f010ca01:	3c 03                	cmp    $0x3,%al
f010ca03:	75 1e                	jne    f010ca23 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010ca05:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca08:	68 ac 79 13 f0       	push   $0xf01379ac
f010ca0d:	68 47 01 00 00       	push   $0x147
f010ca12:	68 13 79 13 f0       	push   $0xf0137913
f010ca17:	e8 e9 37 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010ca1c:	c6 05 24 ec 88 f0 00 	movb   $0x0,0xf088ec24
	}
	last_fault_va = fault_va ;
f010ca23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ca26:	a3 20 ec 88 f0       	mov    %eax,0xf088ec20
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010ca2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca2f:	75 29                	jne    f010ca5a <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010ca31:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010ca38:	77 40                	ja     f010ca7a <fault_handler+0xc4>
f010ca3a:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010ca41:	76 37                	jbe    f010ca7a <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010ca43:	83 ec 04             	sub    $0x4,%esp
f010ca46:	68 f8 79 13 f0       	push   $0xf01379f8
f010ca4b:	68 53 01 00 00       	push   $0x153
f010ca50:	68 13 79 13 f0       	push   $0xf0137913
f010ca55:	e8 ab 37 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010ca5a:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010ca61:	76 17                	jbe    f010ca7a <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010ca63:	83 ec 04             	sub    $0x4,%esp
f010ca66:	68 1c 7a 13 f0       	push   $0xf0137a1c
f010ca6b:	68 59 01 00 00       	push   $0x159
f010ca70:	68 13 79 13 f0       	push   $0xf0137913
f010ca75:	e8 8b 37 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010ca7a:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010ca7f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010ca82:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca85:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ca88:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ca8b:	c1 ea 16             	shr    $0x16,%edx
f010ca8e:	c1 e2 02             	shl    $0x2,%edx
f010ca91:	01 d0                	add    %edx,%eax
f010ca93:	8b 00                	mov    (%eax),%eax
f010ca95:	83 e0 01             	and    $0x1,%eax
f010ca98:	85 c0                	test   %eax,%eax
f010ca9a:	75 28                	jne    f010cac4 <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010ca9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca9f:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010caa5:	8d 50 01             	lea    0x1(%eax),%edx
f010caa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010caab:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010cab1:	83 ec 08             	sub    $0x8,%esp
f010cab4:	ff 75 ec             	pushl  -0x14(%ebp)
f010cab7:	ff 75 e8             	pushl  -0x18(%ebp)
f010caba:	e8 6f 16 00 00       	call   f010e12e <table_fault_handler>
f010cabf:	83 c4 10             	add    $0x10,%esp
f010cac2:	eb 7b                	jmp    f010cb3f <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cac4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cac7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010caca:	83 ec 08             	sub    $0x8,%esp
f010cacd:	ff 75 ec             	pushl  -0x14(%ebp)
f010cad0:	50                   	push   %eax
f010cad1:	e8 92 b4 ff ff       	call   f0107f68 <pt_get_page_permissions>
f010cad6:	83 c4 10             	add    $0x10,%esp
f010cad9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010cadc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cadf:	83 e0 01             	and    $0x1,%eax
f010cae2:	85 c0                	test   %eax,%eax
f010cae4:	74 17                	je     f010cafd <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010cae6:	ff 75 ec             	pushl  -0x14(%ebp)
f010cae9:	68 40 7a 13 f0       	push   $0xf0137a40
f010caee:	68 6e 01 00 00       	push   $0x16e
f010caf3:	68 13 79 13 f0       	push   $0xf0137913
f010caf8:	e8 08 37 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010cafd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb00:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010cb06:	8d 50 01             	lea    0x1(%eax),%edx
f010cb09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb0c:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010cb12:	e8 f5 15 00 00       	call   f010e10c <isBufferingEnabled>
f010cb17:	84 c0                	test   %al,%al
f010cb19:	74 13                	je     f010cb2e <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010cb1b:	83 ec 08             	sub    $0x8,%esp
f010cb1e:	ff 75 ec             	pushl  -0x14(%ebp)
f010cb21:	ff 75 e8             	pushl  -0x18(%ebp)
f010cb24:	e8 9b 18 00 00       	call   f010e3c4 <__page_fault_handler_with_buffering>
f010cb29:	83 c4 10             	add    $0x10,%esp
f010cb2c:	eb 11                	jmp    f010cb3f <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010cb2e:	83 ec 08             	sub    $0x8,%esp
f010cb31:	ff 75 ec             	pushl  -0x14(%ebp)
f010cb34:	ff 75 e8             	pushl  -0x18(%ebp)
f010cb37:	e8 13 16 00 00       	call   f010e14f <page_fault_handler>
f010cb3c:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010cb3f:	0f 20 d8             	mov    %cr3,%eax
f010cb42:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010cb45:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb48:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010cb4b:	90                   	nop
f010cb4c:	c9                   	leave  
f010cb4d:	c3                   	ret    

f010cb4e <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010cb4e:	6a 0e                	push   $0xe
f010cb50:	e9 ed 00 00 00       	jmp    f010cc42 <_alltraps>
f010cb55:	90                   	nop

f010cb56 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010cb56:	6a 00                	push   $0x0
f010cb58:	6a 30                	push   $0x30
f010cb5a:	e9 e3 00 00 00       	jmp    f010cc42 <_alltraps>
f010cb5f:	90                   	nop

f010cb60 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010cb60:	6a 08                	push   $0x8
f010cb62:	e9 db 00 00 00       	jmp    f010cc42 <_alltraps>
f010cb67:	90                   	nop

f010cb68 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010cb68:	6a 00                	push   $0x0
f010cb6a:	6a 00                	push   $0x0
f010cb6c:	e9 d1 00 00 00       	jmp    f010cc42 <_alltraps>
f010cb71:	90                   	nop

f010cb72 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010cb72:	6a 00                	push   $0x0
f010cb74:	6a 01                	push   $0x1
f010cb76:	e9 c7 00 00 00       	jmp    f010cc42 <_alltraps>
f010cb7b:	90                   	nop

f010cb7c <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010cb7c:	6a 00                	push   $0x0
f010cb7e:	6a 02                	push   $0x2
f010cb80:	e9 bd 00 00 00       	jmp    f010cc42 <_alltraps>
f010cb85:	90                   	nop

f010cb86 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010cb86:	6a 00                	push   $0x0
f010cb88:	6a 03                	push   $0x3
f010cb8a:	e9 b3 00 00 00       	jmp    f010cc42 <_alltraps>
f010cb8f:	90                   	nop

f010cb90 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010cb90:	6a 00                	push   $0x0
f010cb92:	6a 04                	push   $0x4
f010cb94:	e9 a9 00 00 00       	jmp    f010cc42 <_alltraps>
f010cb99:	90                   	nop

f010cb9a <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cb9a:	6a 00                	push   $0x0
f010cb9c:	6a 05                	push   $0x5
f010cb9e:	e9 9f 00 00 00       	jmp    f010cc42 <_alltraps>
f010cba3:	90                   	nop

f010cba4 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010cba4:	6a 00                	push   $0x0
f010cba6:	6a 06                	push   $0x6
f010cba8:	e9 95 00 00 00       	jmp    f010cc42 <_alltraps>
f010cbad:	90                   	nop

f010cbae <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010cbae:	6a 00                	push   $0x0
f010cbb0:	6a 07                	push   $0x7
f010cbb2:	e9 8b 00 00 00       	jmp    f010cc42 <_alltraps>
f010cbb7:	90                   	nop

f010cbb8 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010cbb8:	6a 0a                	push   $0xa
f010cbba:	e9 83 00 00 00       	jmp    f010cc42 <_alltraps>
f010cbbf:	90                   	nop

f010cbc0 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010cbc0:	6a 0b                	push   $0xb
f010cbc2:	eb 7e                	jmp    f010cc42 <_alltraps>

f010cbc4 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010cbc4:	6a 0c                	push   $0xc
f010cbc6:	eb 7a                	jmp    f010cc42 <_alltraps>

f010cbc8 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cbc8:	6a 0d                	push   $0xd
f010cbca:	eb 76                	jmp    f010cc42 <_alltraps>

f010cbcc <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010cbcc:	6a 00                	push   $0x0
f010cbce:	6a 10                	push   $0x10
f010cbd0:	eb 70                	jmp    f010cc42 <_alltraps>

f010cbd2 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cbd2:	6a 11                	push   $0x11
f010cbd4:	eb 6c                	jmp    f010cc42 <_alltraps>

f010cbd6 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cbd6:	6a 00                	push   $0x0
f010cbd8:	6a 12                	push   $0x12
f010cbda:	eb 66                	jmp    f010cc42 <_alltraps>

f010cbdc <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010cbdc:	6a 00                	push   $0x0
f010cbde:	6a 13                	push   $0x13
f010cbe0:	eb 60                	jmp    f010cc42 <_alltraps>

f010cbe2 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cbe2:	6a 00                	push   $0x0
f010cbe4:	6a 20                	push   $0x20
f010cbe6:	eb 5a                	jmp    f010cc42 <_alltraps>

f010cbe8 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cbe8:	6a 00                	push   $0x0
f010cbea:	6a 21                	push   $0x21
f010cbec:	eb 54                	jmp    f010cc42 <_alltraps>

f010cbee <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cbee:	6a 00                	push   $0x0
f010cbf0:	6a 22                	push   $0x22
f010cbf2:	eb 4e                	jmp    f010cc42 <_alltraps>

f010cbf4 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cbf4:	6a 00                	push   $0x0
f010cbf6:	6a 23                	push   $0x23
f010cbf8:	eb 48                	jmp    f010cc42 <_alltraps>

f010cbfa <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cbfa:	6a 00                	push   $0x0
f010cbfc:	6a 24                	push   $0x24
f010cbfe:	eb 42                	jmp    f010cc42 <_alltraps>

f010cc00 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cc00:	6a 00                	push   $0x0
f010cc02:	6a 25                	push   $0x25
f010cc04:	eb 3c                	jmp    f010cc42 <_alltraps>

f010cc06 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cc06:	6a 00                	push   $0x0
f010cc08:	6a 26                	push   $0x26
f010cc0a:	eb 36                	jmp    f010cc42 <_alltraps>

f010cc0c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cc0c:	6a 00                	push   $0x0
f010cc0e:	6a 27                	push   $0x27
f010cc10:	eb 30                	jmp    f010cc42 <_alltraps>

f010cc12 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cc12:	6a 00                	push   $0x0
f010cc14:	6a 28                	push   $0x28
f010cc16:	eb 2a                	jmp    f010cc42 <_alltraps>

f010cc18 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cc18:	6a 00                	push   $0x0
f010cc1a:	6a 29                	push   $0x29
f010cc1c:	eb 24                	jmp    f010cc42 <_alltraps>

f010cc1e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cc1e:	6a 00                	push   $0x0
f010cc20:	6a 2a                	push   $0x2a
f010cc22:	eb 1e                	jmp    f010cc42 <_alltraps>

f010cc24 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cc24:	6a 00                	push   $0x0
f010cc26:	6a 2b                	push   $0x2b
f010cc28:	eb 18                	jmp    f010cc42 <_alltraps>

f010cc2a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cc2a:	6a 00                	push   $0x0
f010cc2c:	6a 2c                	push   $0x2c
f010cc2e:	eb 12                	jmp    f010cc42 <_alltraps>

f010cc30 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cc30:	6a 00                	push   $0x0
f010cc32:	6a 2d                	push   $0x2d
f010cc34:	eb 0c                	jmp    f010cc42 <_alltraps>

f010cc36 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cc36:	6a 00                	push   $0x0
f010cc38:	6a 2e                	push   $0x2e
f010cc3a:	eb 06                	jmp    f010cc42 <_alltraps>

f010cc3c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cc3c:	6a 00                	push   $0x0
f010cc3e:	6a 2f                	push   $0x2f
f010cc40:	eb 00                	jmp    f010cc42 <_alltraps>

f010cc42 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cc42:	1e                   	push   %ds
push %es
f010cc43:	06                   	push   %es
pushal
f010cc44:	60                   	pusha  

mov $(GD_KD), %ax
f010cc45:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cc49:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cc4b:	8e c0                	mov    %eax,%es

push %esp
f010cc4d:	54                   	push   %esp

call trap
f010cc4e:	e8 dd fb ff ff       	call   f010c830 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cc53:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cc54:	61                   	popa   
pop %es
f010cc55:	07                   	pop    %es
pop %ds
f010cc56:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cc57:	83 c4 08             	add    $0x8,%esp

iret
f010cc5a:	cf                   	iret   

f010cc5b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cc5b:	55                   	push   %ebp
f010cc5c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cc5e:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc61:	8b 15 54 ed 88 f0    	mov    0xf088ed54,%edx
f010cc67:	29 d0                	sub    %edx,%eax
f010cc69:	c1 f8 03             	sar    $0x3,%eax
f010cc6c:	89 c2                	mov    %eax,%edx
f010cc6e:	89 d0                	mov    %edx,%eax
f010cc70:	c1 e0 02             	shl    $0x2,%eax
f010cc73:	01 d0                	add    %edx,%eax
f010cc75:	c1 e0 02             	shl    $0x2,%eax
f010cc78:	01 d0                	add    %edx,%eax
f010cc7a:	c1 e0 02             	shl    $0x2,%eax
f010cc7d:	01 d0                	add    %edx,%eax
f010cc7f:	89 c1                	mov    %eax,%ecx
f010cc81:	c1 e1 08             	shl    $0x8,%ecx
f010cc84:	01 c8                	add    %ecx,%eax
f010cc86:	89 c1                	mov    %eax,%ecx
f010cc88:	c1 e1 10             	shl    $0x10,%ecx
f010cc8b:	01 c8                	add    %ecx,%eax
f010cc8d:	01 c0                	add    %eax,%eax
f010cc8f:	01 d0                	add    %edx,%eax
}
f010cc91:	5d                   	pop    %ebp
f010cc92:	c3                   	ret    

f010cc93 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cc93:	55                   	push   %ebp
f010cc94:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cc96:	ff 75 08             	pushl  0x8(%ebp)
f010cc99:	e8 bd ff ff ff       	call   f010cc5b <to_frame_number>
f010cc9e:	83 c4 04             	add    $0x4,%esp
f010cca1:	c1 e0 0c             	shl    $0xc,%eax
}
f010cca4:	c9                   	leave  
f010cca5:	c3                   	ret    

f010cca6 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010cca6:	55                   	push   %ebp
f010cca7:	89 e5                	mov    %esp,%ebp
f010cca9:	83 ec 18             	sub    $0x18,%esp
f010ccac:	8b 45 10             	mov    0x10(%ebp),%eax
f010ccaf:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010ccb2:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010ccb6:	74 26                	je     f010ccde <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010ccb8:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010ccbd:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ccc0:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010ccc6:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010cccc:	83 ec 04             	sub    $0x4,%esp
f010cccf:	50                   	push   %eax
f010ccd0:	52                   	push   %edx
f010ccd1:	68 30 7c 13 f0       	push   $0xf0137c30
f010ccd6:	e8 33 40 ff ff       	call   f0100d0e <cprintf>
f010ccdb:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010ccde:	83 ec 04             	sub    $0x4,%esp
f010cce1:	ff 75 08             	pushl  0x8(%ebp)
f010cce4:	ff 75 0c             	pushl  0xc(%ebp)
f010cce7:	68 39 7c 13 f0       	push   $0xf0137c39
f010ccec:	e8 1d 40 ff ff       	call   f0100d0e <cprintf>
f010ccf1:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010ccf4:	90                   	nop
f010ccf5:	c9                   	leave  
f010ccf6:	c3                   	ret    

f010ccf7 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010ccf7:	55                   	push   %ebp
f010ccf8:	89 e5                	mov    %esp,%ebp
f010ccfa:	83 ec 18             	sub    $0x18,%esp
f010ccfd:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd00:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010cd03:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010cd07:	83 ec 08             	sub    $0x8,%esp
f010cd0a:	50                   	push   %eax
f010cd0b:	68 3e 7c 13 f0       	push   $0xf0137c3e
f010cd10:	e8 f9 3f ff ff       	call   f0100d0e <cprintf>
f010cd15:	83 c4 10             	add    $0x10,%esp
}
f010cd18:	90                   	nop
f010cd19:	c9                   	leave  
f010cd1a:	c3                   	ret    

f010cd1b <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010cd1b:	55                   	push   %ebp
f010cd1c:	89 e5                	mov    %esp,%ebp
f010cd1e:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010cd21:	e8 22 3e ff ff       	call   f0100b48 <cons_getc2>
f010cd26:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010cd29:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cd2c:	c9                   	leave  
f010cd2d:	c3                   	ret    

f010cd2e <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010cd2e:	55                   	push   %ebp
f010cd2f:	89 e5                	mov    %esp,%ebp
f010cd31:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010cd34:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cd39:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010cd3c:	83 ec 0c             	sub    $0xc,%esp
f010cd3f:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cd42:	50                   	push   %eax
f010cd43:	e8 aa 9b ff ff       	call   f01068f2 <allocate_frame>
f010cd48:	83 c4 10             	add    $0x10,%esp
f010cd4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cd4e:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cd52:	75 08                	jne    f010cd5c <__sys_allocate_page+0x2e>
		return r ;
f010cd54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd57:	e9 e9 00 00 00       	jmp    f010ce45 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010cd5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd5f:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010cd64:	77 0c                	ja     f010cd72 <__sys_allocate_page+0x44>
f010cd66:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd69:	25 ff 0f 00 00       	and    $0xfff,%eax
f010cd6e:	85 c0                	test   %eax,%eax
f010cd70:	74 0a                	je     f010cd7c <__sys_allocate_page+0x4e>
		return E_INVAL;
f010cd72:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cd77:	e9 c9 00 00 00       	jmp    f010ce45 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010cd7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd7f:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010cd84:	83 f8 04             	cmp    $0x4,%eax
f010cd87:	74 0a                	je     f010cd93 <__sys_allocate_page+0x65>
		return E_INVAL;
f010cd89:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cd8e:	e9 b2 00 00 00       	jmp    f010ce45 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010cd93:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd96:	83 ec 0c             	sub    $0xc,%esp
f010cd99:	50                   	push   %eax
f010cd9a:	e8 f4 fe ff ff       	call   f010cc93 <to_physical_address>
f010cd9f:	83 c4 10             	add    $0x10,%esp
f010cda2:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010cda5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cda8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdab:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cdae:	6a 02                	push   $0x2
f010cdb0:	68 00 00 80 ef       	push   $0xef800000
f010cdb5:	52                   	push   %edx
f010cdb6:	50                   	push   %eax
f010cdb7:	e8 85 9f ff ff       	call   f0106d41 <map_frame>
f010cdbc:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cdbf:	83 ec 04             	sub    $0x4,%esp
f010cdc2:	68 00 10 00 00       	push   $0x1000
f010cdc7:	6a 00                	push   $0x0
f010cdc9:	68 00 00 80 ef       	push   $0xef800000
f010cdce:	e8 ca 49 02 00       	call   f013179d <memset>
f010cdd3:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cdd6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cdd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cddc:	8b 40 08             	mov    0x8(%eax),%eax
f010cddf:	40                   	inc    %eax
f010cde0:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cde4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cde7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cdea:	83 ec 08             	sub    $0x8,%esp
f010cded:	68 00 00 80 ef       	push   $0xef800000
f010cdf2:	50                   	push   %eax
f010cdf3:	e8 7e a0 ff ff       	call   f0106e76 <unmap_frame>
f010cdf8:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010cdfb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cdfe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce01:	8b 40 08             	mov    0x8(%eax),%eax
f010ce04:	48                   	dec    %eax
f010ce05:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010ce09:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ce0c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ce0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce12:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ce15:	ff 75 0c             	pushl  0xc(%ebp)
f010ce18:	51                   	push   %ecx
f010ce19:	52                   	push   %edx
f010ce1a:	50                   	push   %eax
f010ce1b:	e8 21 9f ff ff       	call   f0106d41 <map_frame>
f010ce20:	83 c4 10             	add    $0x10,%esp
f010ce23:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010ce26:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010ce2a:	75 14                	jne    f010ce40 <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010ce2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce2f:	83 ec 0c             	sub    $0xc,%esp
f010ce32:	50                   	push   %eax
f010ce33:	e8 49 9c ff ff       	call   f0106a81 <decrement_references>
f010ce38:	83 c4 10             	add    $0x10,%esp
		return r;
f010ce3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce3e:	eb 05                	jmp    f010ce45 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010ce40:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ce45:	c9                   	leave  
f010ce46:	c3                   	ret    

f010ce47 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010ce47:	55                   	push   %ebp
f010ce48:	89 e5                	mov    %esp,%ebp
f010ce4a:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010ce4d:	83 ec 04             	sub    $0x4,%esp
f010ce50:	68 41 7c 13 f0       	push   $0xf0137c41
f010ce55:	68 b3 00 00 00       	push   $0xb3
f010ce5a:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010ce5f:	e8 a1 33 ff ff       	call   f0100205 <_panic>

f010ce64 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010ce64:	55                   	push   %ebp
f010ce65:	89 e5                	mov    %esp,%ebp
f010ce67:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010ce6a:	83 ec 04             	sub    $0x4,%esp
f010ce6d:	68 74 7c 13 f0       	push   $0xf0137c74
f010ce72:	68 c3 00 00 00       	push   $0xc3
f010ce77:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010ce7c:	e8 84 33 ff ff       	call   f0100205 <_panic>

f010ce81 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010ce81:	55                   	push   %ebp
f010ce82:	89 e5                	mov    %esp,%ebp
f010ce84:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010ce87:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010ce8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ce8f:	83 ec 04             	sub    $0x4,%esp
f010ce92:	ff 75 0c             	pushl  0xc(%ebp)
f010ce95:	ff 75 08             	pushl  0x8(%ebp)
f010ce98:	50                   	push   %eax
f010ce99:	e8 a9 c1 ff ff       	call   f0109047 <calculate_required_frames>
f010ce9e:	83 c4 10             	add    $0x10,%esp
}
f010cea1:	c9                   	leave  
f010cea2:	c3                   	ret    

f010cea3 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cea3:	55                   	push   %ebp
f010cea4:	89 e5                	mov    %esp,%ebp
f010cea6:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cea9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ceac:	83 ec 0c             	sub    $0xc,%esp
f010ceaf:	50                   	push   %eax
f010ceb0:	e8 26 a1 ff ff       	call   f0106fdb <calculate_available_frames>
f010ceb5:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010ceb8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cebb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cebe:	01 d0                	add    %edx,%eax
}
f010cec0:	c9                   	leave  
f010cec1:	c3                   	ret    

f010cec2 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010cec2:	55                   	push   %ebp
f010cec3:	89 e5                	mov    %esp,%ebp
f010cec5:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cec8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cecb:	83 ec 0c             	sub    $0xc,%esp
f010cece:	50                   	push   %eax
f010cecf:	e8 07 a1 ff ff       	call   f0106fdb <calculate_available_frames>
f010ced4:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010ced7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ceda:	c9                   	leave  
f010cedb:	c3                   	ret    

f010cedc <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010cedc:	55                   	push   %ebp
f010cedd:	89 e5                	mov    %esp,%ebp
f010cedf:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cee2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cee5:	83 ec 0c             	sub    $0xc,%esp
f010cee8:	50                   	push   %eax
f010cee9:	e8 ed a0 ff ff       	call   f0106fdb <calculate_available_frames>
f010ceee:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cef1:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010cef4:	c9                   	leave  
f010cef5:	c3                   	ret    

f010cef6 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010cef6:	55                   	push   %ebp
f010cef7:	89 e5                	mov    %esp,%ebp
f010cef9:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010cefc:	83 ec 0c             	sub    $0xc,%esp
f010ceff:	ff 75 08             	pushl  0x8(%ebp)
f010cf02:	e8 b3 35 02 00       	call   f01304ba <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cf07:	83 c4 10             	add    $0x10,%esp
}
f010cf0a:	c9                   	leave  
f010cf0b:	c3                   	ret    

f010cf0c <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cf0c:	55                   	push   %ebp
f010cf0d:	89 e5                	mov    %esp,%ebp
f010cf0f:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cf12:	e8 fb 34 02 00       	call   f0130412 <scarce_memory>
}
f010cf17:	90                   	nop
f010cf18:	c9                   	leave  
f010cf19:	c3                   	ret    

f010cf1a <sys_clearFFL>:

void sys_clearFFL()
{
f010cf1a:	55                   	push   %ebp
f010cf1b:	89 e5                	mov    %esp,%ebp
f010cf1d:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cf20:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f010cf25:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cf28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cf2f:	eb 12                	jmp    f010cf43 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010cf31:	83 ec 0c             	sub    $0xc,%esp
f010cf34:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cf37:	50                   	push   %eax
f010cf38:	e8 b5 99 ff ff       	call   f01068f2 <allocate_frame>
f010cf3d:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cf40:	ff 45 f4             	incl   -0xc(%ebp)
f010cf43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf46:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cf49:	7c e6                	jl     f010cf31 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010cf4b:	90                   	nop
f010cf4c:	c9                   	leave  
f010cf4d:	c3                   	ret    

f010cf4e <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cf4e:	55                   	push   %ebp
f010cf4f:	89 e5                	mov    %esp,%ebp
f010cf51:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010cf54:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cf59:	83 ec 0c             	sub    $0xc,%esp
f010cf5c:	50                   	push   %eax
f010cf5d:	e8 c6 6d ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010cf62:	83 c4 10             	add    $0x10,%esp
}
f010cf65:	c9                   	leave  
f010cf66:	c3                   	ret    

f010cf67 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cf67:	55                   	push   %ebp
f010cf68:	89 e5                	mov    %esp,%ebp
f010cf6a:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cf6d:	e8 9a 11 00 00       	call   f010e10c <isBufferingEnabled>
f010cf72:	84 c0                	test   %al,%al
f010cf74:	74 19                	je     f010cf8f <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cf76:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cf7b:	83 ec 04             	sub    $0x4,%esp
f010cf7e:	ff 75 0c             	pushl  0xc(%ebp)
f010cf81:	ff 75 08             	pushl  0x8(%ebp)
f010cf84:	50                   	push   %eax
f010cf85:	e8 a6 c1 ff ff       	call   f0109130 <__free_user_mem_with_buffering>
f010cf8a:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cf8d:	eb 18                	jmp    f010cfa7 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cf8f:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cf94:	83 ec 04             	sub    $0x4,%esp
f010cf97:	ff 75 0c             	pushl  0xc(%ebp)
f010cf9a:	ff 75 08             	pushl  0x8(%ebp)
f010cf9d:	50                   	push   %eax
f010cf9e:	e8 70 c1 ff ff       	call   f0109113 <free_user_mem>
f010cfa3:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cfa6:	90                   	nop
}
f010cfa7:	c9                   	leave  
f010cfa8:	c3                   	ret    

f010cfa9 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cfa9:	55                   	push   %ebp
f010cfaa:	89 e5                	mov    %esp,%ebp
f010cfac:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cfaf:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cfb4:	83 ec 04             	sub    $0x4,%esp
f010cfb7:	ff 75 0c             	pushl  0xc(%ebp)
f010cfba:	ff 75 08             	pushl  0x8(%ebp)
f010cfbd:	50                   	push   %eax
f010cfbe:	e8 33 c1 ff ff       	call   f01090f6 <allocate_user_mem>
f010cfc3:	83 c4 10             	add    $0x10,%esp
	return;
f010cfc6:	90                   	nop
}
f010cfc7:	c9                   	leave  
f010cfc8:	c3                   	ret    

f010cfc9 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010cfc9:	55                   	push   %ebp
f010cfca:	89 e5                	mov    %esp,%ebp
f010cfcc:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010cfcf:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cfd4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cfd7:	ff 75 10             	pushl  0x10(%ebp)
f010cfda:	ff 75 0c             	pushl  0xc(%ebp)
f010cfdd:	ff 75 08             	pushl  0x8(%ebp)
f010cfe0:	50                   	push   %eax
f010cfe1:	e8 46 be ff ff       	call   f0108e2c <allocate_chunk>
f010cfe6:	83 c4 10             	add    $0x10,%esp
	return;
f010cfe9:	90                   	nop
}
f010cfea:	c9                   	leave  
f010cfeb:	c3                   	ret    

f010cfec <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cfec:	55                   	push   %ebp
f010cfed:	89 e5                	mov    %esp,%ebp
f010cfef:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cff2:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010cff7:	ff 75 10             	pushl  0x10(%ebp)
f010cffa:	ff 75 0c             	pushl  0xc(%ebp)
f010cffd:	ff 75 08             	pushl  0x8(%ebp)
f010d000:	50                   	push   %eax
f010d001:	e8 47 c1 ff ff       	call   f010914d <move_user_mem>
f010d006:	83 c4 10             	add    $0x10,%esp
	return;
f010d009:	90                   	nop
}
f010d00a:	c9                   	leave  
f010d00b:	c3                   	ret    

f010d00c <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d00c:	55                   	push   %ebp
f010d00d:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d00f:	a1 30 ed 88 f0       	mov    0xf088ed30,%eax
}
f010d014:	5d                   	pop    %ebp
f010d015:	c3                   	ret    

f010d016 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d016:	55                   	push   %ebp
f010d017:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d019:	8b 45 08             	mov    0x8(%ebp),%eax
f010d01c:	a3 30 ed 88 f0       	mov    %eax,0xf088ed30
}
f010d021:	90                   	nop
f010d022:	5d                   	pop    %ebp
f010d023:	c3                   	ret    

f010d024 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d024:	55                   	push   %ebp
f010d025:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d027:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d02c:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010d032:	8b 52 38             	mov    0x38(%edx),%edx
f010d035:	80 e6 fd             	and    $0xfd,%dh
f010d038:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d03b:	90                   	nop
f010d03c:	5d                   	pop    %ebp
f010d03d:	c3                   	ret    

f010d03e <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d03e:	55                   	push   %ebp
f010d03f:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d041:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d046:	8b 15 f4 e3 88 f0    	mov    0xf088e3f4,%edx
f010d04c:	8b 52 38             	mov    0x38(%edx),%edx
f010d04f:	80 ce 02             	or     $0x2,%dh
f010d052:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d055:	90                   	nop
f010d056:	5d                   	pop    %ebp
f010d057:	c3                   	ret    

f010d058 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d058:	55                   	push   %ebp
f010d059:	89 e5                	mov    %esp,%ebp
f010d05b:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d05e:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d063:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d066:	83 ec 04             	sub    $0x4,%esp
f010d069:	ff 75 0c             	pushl  0xc(%ebp)
f010d06c:	ff 75 08             	pushl  0x8(%ebp)
f010d06f:	50                   	push   %eax
f010d070:	e8 0e 17 00 00       	call   f010e783 <createSemaphore>
f010d075:	83 c4 10             	add    $0x10,%esp
}
f010d078:	c9                   	leave  
f010d079:	c3                   	ret    

f010d07a <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d07a:	55                   	push   %ebp
f010d07b:	89 e5                	mov    %esp,%ebp
f010d07d:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d080:	83 ec 08             	sub    $0x8,%esp
f010d083:	ff 75 0c             	pushl  0xc(%ebp)
f010d086:	ff 75 08             	pushl  0x8(%ebp)
f010d089:	e8 6d 17 00 00       	call   f010e7fb <waitSemaphore>
f010d08e:	83 c4 10             	add    $0x10,%esp
}
f010d091:	90                   	nop
f010d092:	c9                   	leave  
f010d093:	c3                   	ret    

f010d094 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d094:	55                   	push   %ebp
f010d095:	89 e5                	mov    %esp,%ebp
f010d097:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d09a:	83 ec 08             	sub    $0x8,%esp
f010d09d:	ff 75 0c             	pushl  0xc(%ebp)
f010d0a0:	ff 75 08             	pushl  0x8(%ebp)
f010d0a3:	e8 05 18 00 00       	call   f010e8ad <signalSemaphore>
f010d0a8:	83 c4 10             	add    $0x10,%esp
}
f010d0ab:	90                   	nop
f010d0ac:	c9                   	leave  
f010d0ad:	c3                   	ret    

f010d0ae <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d0ae:	55                   	push   %ebp
f010d0af:	89 e5                	mov    %esp,%ebp
f010d0b1:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d0b4:	83 ec 08             	sub    $0x8,%esp
f010d0b7:	ff 75 0c             	pushl  0xc(%ebp)
f010d0ba:	ff 75 08             	pushl  0x8(%ebp)
f010d0bd:	e8 39 15 00 00       	call   f010e5fb <get_semaphore_object_ID>
f010d0c2:	83 c4 10             	add    $0x10,%esp
f010d0c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d0c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d0cc:	78 0c                	js     f010d0da <sys_getSemaphoreValue+0x2c>
f010d0ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d0d1:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010d0d6:	39 c2                	cmp    %eax,%edx
f010d0d8:	72 19                	jb     f010d0f3 <sys_getSemaphoreValue+0x45>
f010d0da:	68 94 7c 13 f0       	push   $0xf0137c94
f010d0df:	68 b9 7c 13 f0       	push   $0xf0137cb9
f010d0e4:	68 4a 01 00 00       	push   $0x14a
f010d0e9:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010d0ee:	e8 12 31 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d0f3:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010d0f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d0fc:	89 d0                	mov    %edx,%eax
f010d0fe:	c1 e0 02             	shl    $0x2,%eax
f010d101:	01 d0                	add    %edx,%eax
f010d103:	01 c0                	add    %eax,%eax
f010d105:	01 d0                	add    %edx,%eax
f010d107:	01 c0                	add    %eax,%eax
f010d109:	01 d0                	add    %edx,%eax
f010d10b:	c1 e0 02             	shl    $0x2,%eax
f010d10e:	01 c8                	add    %ecx,%eax
f010d110:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d113:	c9                   	leave  
f010d114:	c3                   	ret    

f010d115 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d115:	55                   	push   %ebp
f010d116:	89 e5                	mov    %esp,%ebp
f010d118:	83 ec 18             	sub    $0x18,%esp
f010d11b:	8b 45 10             	mov    0x10(%ebp),%eax
f010d11e:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d121:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d125:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d12a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d12d:	83 ec 0c             	sub    $0xc,%esp
f010d130:	ff 75 14             	pushl  0x14(%ebp)
f010d133:	52                   	push   %edx
f010d134:	ff 75 0c             	pushl  0xc(%ebp)
f010d137:	ff 75 08             	pushl  0x8(%ebp)
f010d13a:	50                   	push   %eax
f010d13b:	e8 5c a4 ff ff       	call   f010759c <createSharedObject>
f010d140:	83 c4 20             	add    $0x20,%esp
}
f010d143:	c9                   	leave  
f010d144:	c3                   	ret    

f010d145 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d145:	55                   	push   %ebp
f010d146:	89 e5                	mov    %esp,%ebp
f010d148:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d14b:	83 ec 08             	sub    $0x8,%esp
f010d14e:	ff 75 0c             	pushl  0xc(%ebp)
f010d151:	ff 75 08             	pushl  0x8(%ebp)
f010d154:	e8 fd a3 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010d159:	83 c4 10             	add    $0x10,%esp
}
f010d15c:	c9                   	leave  
f010d15d:	c3                   	ret    

f010d15e <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d15e:	55                   	push   %ebp
f010d15f:	89 e5                	mov    %esp,%ebp
f010d161:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d164:	83 ec 04             	sub    $0x4,%esp
f010d167:	ff 75 10             	pushl  0x10(%ebp)
f010d16a:	ff 75 0c             	pushl  0xc(%ebp)
f010d16d:	ff 75 08             	pushl  0x8(%ebp)
f010d170:	e8 3c a6 ff ff       	call   f01077b1 <getSharedObject>
f010d175:	83 c4 10             	add    $0x10,%esp
}
f010d178:	c9                   	leave  
f010d179:	c3                   	ret    

f010d17a <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d17a:	55                   	push   %ebp
f010d17b:	89 e5                	mov    %esp,%ebp
f010d17d:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d180:	83 ec 08             	sub    $0x8,%esp
f010d183:	ff 75 0c             	pushl  0xc(%ebp)
f010d186:	ff 75 08             	pushl  0x8(%ebp)
f010d189:	e8 55 a7 ff ff       	call   f01078e3 <freeSharedObject>
f010d18e:	83 c4 10             	add    $0x10,%esp
}
f010d191:	c9                   	leave  
f010d192:	c3                   	ret    

f010d193 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d193:	55                   	push   %ebp
f010d194:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d196:	a1 28 ed 88 f0       	mov    0xf088ed28,%eax
}
f010d19b:	5d                   	pop    %ebp
f010d19c:	c3                   	ret    

f010d19d <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d19d:	55                   	push   %ebp
f010d19e:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d1a0:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d1a5:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d1a8:	5d                   	pop    %ebp
f010d1a9:	c3                   	ret    

f010d1aa <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d1aa:	55                   	push   %ebp
f010d1ab:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d1ad:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d1b2:	89 c2                	mov    %eax,%edx
f010d1b4:	a1 f0 e3 88 f0       	mov    0xf088e3f0,%eax
f010d1b9:	29 c2                	sub    %eax,%edx
f010d1bb:	89 d0                	mov    %edx,%eax
f010d1bd:	c1 f8 04             	sar    $0x4,%eax
f010d1c0:	89 c2                	mov    %eax,%edx
f010d1c2:	89 d0                	mov    %edx,%eax
f010d1c4:	c1 e0 03             	shl    $0x3,%eax
f010d1c7:	01 d0                	add    %edx,%eax
f010d1c9:	01 c0                	add    %eax,%eax
f010d1cb:	01 d0                	add    %edx,%eax
f010d1cd:	c1 e0 03             	shl    $0x3,%eax
f010d1d0:	01 d0                	add    %edx,%eax
f010d1d2:	89 c1                	mov    %eax,%ecx
f010d1d4:	c1 e1 08             	shl    $0x8,%ecx
f010d1d7:	01 c8                	add    %ecx,%eax
f010d1d9:	01 c0                	add    %eax,%eax
f010d1db:	01 d0                	add    %edx,%eax
f010d1dd:	01 c0                	add    %eax,%eax
f010d1df:	01 d0                	add    %edx,%eax
f010d1e1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d1e8:	01 d0                	add    %edx,%eax
f010d1ea:	89 c2                	mov    %eax,%edx
f010d1ec:	c1 e2 09             	shl    $0x9,%edx
f010d1ef:	29 c2                	sub    %eax,%edx
f010d1f1:	89 d0                	mov    %edx,%eax
f010d1f3:	f7 d8                	neg    %eax
}
f010d1f5:	5d                   	pop    %ebp
f010d1f6:	c3                   	ret    

f010d1f7 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d1f7:	55                   	push   %ebp
f010d1f8:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d1fa:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d1ff:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d202:	5d                   	pop    %ebp
f010d203:	c3                   	ret    

f010d204 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d204:	55                   	push   %ebp
f010d205:	89 e5                	mov    %esp,%ebp
f010d207:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d20a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d20e:	75 0a                	jne    f010d21a <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d210:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d215:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d218:	eb 22                	jmp    f010d23c <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d21a:	83 ec 04             	sub    $0x4,%esp
f010d21d:	6a 00                	push   $0x0
f010d21f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d222:	50                   	push   %eax
f010d223:	ff 75 08             	pushl  0x8(%ebp)
f010d226:	e8 e6 cb ff ff       	call   f0109e11 <envid2env>
f010d22b:	83 c4 10             	add    $0x10,%esp
f010d22e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d231:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d235:	79 05                	jns    f010d23c <sys_destroy_env+0x38>
	{
		return r;
f010d237:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d23a:	eb 5e                	jmp    f010d29a <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d23c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d23f:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d244:	39 c2                	cmp    %eax,%edx
f010d246:	75 1b                	jne    f010d263 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d248:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d24d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d250:	83 ec 08             	sub    $0x8,%esp
f010d253:	50                   	push   %eax
f010d254:	68 ce 7c 13 f0       	push   $0xf0137cce
f010d259:	e8 b0 3a ff ff       	call   f0100d0e <cprintf>
f010d25e:	83 c4 10             	add    $0x10,%esp
f010d261:	eb 20                	jmp    f010d283 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d263:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d266:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d269:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d26e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d271:	83 ec 04             	sub    $0x4,%esp
f010d274:	52                   	push   %edx
f010d275:	50                   	push   %eax
f010d276:	68 e9 7c 13 f0       	push   $0xf0137ce9
f010d27b:	e8 8e 3a ff ff       	call   f0100d0e <cprintf>
f010d280:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d283:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d286:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d289:	83 ec 0c             	sub    $0xc,%esp
f010d28c:	50                   	push   %eax
f010d28d:	e8 ad 83 ff ff       	call   f010563f <sched_kill_env>
f010d292:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d295:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d29a:	c9                   	leave  
f010d29b:	c3                   	ret    

f010d29c <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d29c:	55                   	push   %ebp
f010d29d:	89 e5                	mov    %esp,%ebp
f010d29f:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d2a2:	e8 4b cb ff ff       	call   f0109df2 <env_exit>
	//env_run_cmd_prmpt();
}
f010d2a7:	90                   	nop
f010d2a8:	c9                   	leave  
f010d2a9:	c3                   	ret    

f010d2aa <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d2aa:	55                   	push   %ebp
f010d2ab:	89 e5                	mov    %esp,%ebp
f010d2ad:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d2b0:	ff 75 14             	pushl  0x14(%ebp)
f010d2b3:	ff 75 10             	pushl  0x10(%ebp)
f010d2b6:	ff 75 0c             	pushl  0xc(%ebp)
f010d2b9:	ff 75 08             	pushl  0x8(%ebp)
f010d2bc:	e8 a9 be ff ff       	call   f010916a <env_create>
f010d2c1:	83 c4 10             	add    $0x10,%esp
f010d2c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d2c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d2cb:	75 07                	jne    f010d2d4 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d2cd:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d2d2:	eb 14                	jmp    f010d2e8 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d2d4:	83 ec 0c             	sub    $0xc,%esp
f010d2d7:	ff 75 f4             	pushl  -0xc(%ebp)
f010d2da:	e8 25 7f ff ff       	call   f0105204 <sched_new_env>
f010d2df:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d2e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2e5:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d2e8:	c9                   	leave  
f010d2e9:	c3                   	ret    

f010d2ea <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d2ea:	55                   	push   %ebp
f010d2eb:	89 e5                	mov    %esp,%ebp
f010d2ed:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d2f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2f3:	83 ec 0c             	sub    $0xc,%esp
f010d2f6:	50                   	push   %eax
f010d2f7:	e8 25 7f ff ff       	call   f0105221 <sched_run_env>
f010d2fc:	83 c4 10             	add    $0x10,%esp
}
f010d2ff:	90                   	nop
f010d300:	c9                   	leave  
f010d301:	c3                   	ret    

f010d302 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d302:	55                   	push   %ebp
f010d303:	89 e5                	mov    %esp,%ebp
f010d305:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d308:	0f 31                	rdtsc  
f010d30a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d30d:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d310:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d313:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d316:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d319:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d31c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d31f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d322:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d325:	89 01                	mov    %eax,(%ecx)
f010d327:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d32a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d32d:	c9                   	leave  
f010d32e:	c2 04 00             	ret    $0x4

f010d331 <sys_rcr2>:

uint32 sys_rcr2()
{
f010d331:	55                   	push   %ebp
f010d332:	89 e5                	mov    %esp,%ebp
f010d334:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d337:	0f 20 d0             	mov    %cr2,%eax
f010d33a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d33d:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d340:	90                   	nop
}
f010d341:	c9                   	leave  
f010d342:	c3                   	ret    

f010d343 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d343:	55                   	push   %ebp
f010d344:	89 e5                	mov    %esp,%ebp
f010d346:	83 ec 04             	sub    $0x4,%esp
f010d349:	8b 45 08             	mov    0x8(%ebp),%eax
f010d34c:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d34f:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d352:	a2 a8 ec 88 f0       	mov    %al,0xf088eca8
}
f010d357:	90                   	nop
f010d358:	c9                   	leave  
f010d359:	c3                   	ret    

f010d35a <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d35a:	55                   	push   %ebp
f010d35b:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d35d:	c7 05 b0 ee 88 f0 00 	movl   $0x0,0xf088eeb0
f010d364:	00 00 00 
}
f010d367:	90                   	nop
f010d368:	5d                   	pop    %ebp
f010d369:	c3                   	ret    

f010d36a <inctst>:
void inctst()
{
f010d36a:	55                   	push   %ebp
f010d36b:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d36d:	a1 b0 ee 88 f0       	mov    0xf088eeb0,%eax
f010d372:	40                   	inc    %eax
f010d373:	a3 b0 ee 88 f0       	mov    %eax,0xf088eeb0
}
f010d378:	90                   	nop
f010d379:	5d                   	pop    %ebp
f010d37a:	c3                   	ret    

f010d37b <gettst>:
uint32 gettst()
{
f010d37b:	55                   	push   %ebp
f010d37c:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d37e:	a1 b0 ee 88 f0       	mov    0xf088eeb0,%eax
}
f010d383:	5d                   	pop    %ebp
f010d384:	c3                   	ret    

f010d385 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d385:	55                   	push   %ebp
f010d386:	89 e5                	mov    %esp,%ebp
f010d388:	83 ec 28             	sub    $0x28,%esp
f010d38b:	8b 45 14             	mov    0x14(%ebp),%eax
f010d38e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d391:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d398:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d39c:	83 f8 65             	cmp    $0x65,%eax
f010d39f:	74 5d                	je     f010d3fe <tst+0x79>
f010d3a1:	83 f8 65             	cmp    $0x65,%eax
f010d3a4:	7f 0a                	jg     f010d3b0 <tst+0x2b>
f010d3a6:	83 f8 62             	cmp    $0x62,%eax
f010d3a9:	74 73                	je     f010d41e <tst+0x99>
f010d3ab:	e9 91 00 00 00       	jmp    f010d441 <tst+0xbc>
f010d3b0:	83 f8 67             	cmp    $0x67,%eax
f010d3b3:	74 29                	je     f010d3de <tst+0x59>
f010d3b5:	83 f8 6c             	cmp    $0x6c,%eax
f010d3b8:	0f 85 83 00 00 00    	jne    f010d441 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d3be:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3c1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d3c4:	73 09                	jae    f010d3cf <tst+0x4a>
			chk = 1;
f010d3c6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d3cd:	eb 68                	jmp    f010d437 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d3cf:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d3d3:	74 62                	je     f010d437 <tst+0xb2>
			chk = 1;
f010d3d5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d3dc:	eb 59                	jmp    f010d437 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d3de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3e1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d3e4:	76 09                	jbe    f010d3ef <tst+0x6a>
			chk = 1;
f010d3e6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d3ed:	eb 4b                	jmp    f010d43a <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d3ef:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d3f3:	74 45                	je     f010d43a <tst+0xb5>
			chk = 1;
f010d3f5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d3fc:	eb 3c                	jmp    f010d43a <tst+0xb5>
	case 'e':
		if (n == v1)
f010d3fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010d401:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d404:	75 09                	jne    f010d40f <tst+0x8a>
			chk = 1;
f010d406:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d40d:	eb 2e                	jmp    f010d43d <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d40f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d413:	74 28                	je     f010d43d <tst+0xb8>
			chk = 1;
f010d415:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d41c:	eb 1f                	jmp    f010d43d <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d41e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d421:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d424:	72 1a                	jb     f010d440 <tst+0xbb>
f010d426:	8b 45 08             	mov    0x8(%ebp),%eax
f010d429:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d42c:	77 12                	ja     f010d440 <tst+0xbb>
			chk = 1;
f010d42e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d435:	eb 09                	jmp    f010d440 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d437:	90                   	nop
f010d438:	eb 07                	jmp    f010d441 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d43a:	90                   	nop
f010d43b:	eb 04                	jmp    f010d441 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d43d:	90                   	nop
f010d43e:	eb 01                	jmp    f010d441 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d440:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d441:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d445:	75 17                	jne    f010d45e <tst+0xd9>
f010d447:	83 ec 04             	sub    $0x4,%esp
f010d44a:	68 01 7d 13 f0       	push   $0xf0137d01
f010d44f:	68 00 02 00 00       	push   $0x200
f010d454:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010d459:	e8 a7 2d ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d45e:	a1 b0 ee 88 f0       	mov    0xf088eeb0,%eax
f010d463:	40                   	inc    %eax
f010d464:	a3 b0 ee 88 f0       	mov    %eax,0xf088eeb0
	return;
f010d469:	90                   	nop
}
f010d46a:	c9                   	leave  
f010d46b:	c3                   	ret    

f010d46c <chktst>:

void chktst(uint32 n)
{
f010d46c:	55                   	push   %ebp
f010d46d:	89 e5                	mov    %esp,%ebp
f010d46f:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d472:	a1 b0 ee 88 f0       	mov    0xf088eeb0,%eax
f010d477:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d47a:	75 12                	jne    f010d48e <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d47c:	83 ec 0c             	sub    $0xc,%esp
f010d47f:	68 14 7d 13 f0       	push   $0xf0137d14
f010d484:	e8 85 38 ff ff       	call   f0100d0e <cprintf>
f010d489:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d48c:	eb 17                	jmp    f010d4a5 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d48e:	83 ec 04             	sub    $0x4,%esp
f010d491:	68 40 7d 13 f0       	push   $0xf0137d40
f010d496:	68 0a 02 00 00       	push   $0x20a
f010d49b:	68 5f 7c 13 f0       	push   $0xf0137c5f
f010d4a0:	e8 60 2d ff ff       	call   f0100205 <_panic>
}
f010d4a5:	c9                   	leave  
f010d4a6:	c3                   	ret    

f010d4a7 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d4a7:	55                   	push   %ebp
f010d4a8:	89 e5                	mov    %esp,%ebp
f010d4aa:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d4ad:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d4b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d4b5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d4bc:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d4c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d4c7:	0f 84 a5 00 00 00    	je     f010d572 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d4cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d4d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4d7:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d4dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d4e0:	eb 4a                	jmp    f010d52c <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d4e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4e5:	8b 00                	mov    (%eax),%eax
f010d4e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d4ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d4ed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d4f2:	89 c2                	mov    %eax,%edx
f010d4f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d4f7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d4fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010d501:	01 c8                	add    %ecx,%eax
f010d503:	8b 00                	mov    (%eax),%eax
f010d505:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d508:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d50b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d510:	39 c2                	cmp    %eax,%edx
f010d512:	74 09                	je     f010d51d <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d514:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d51b:	eb 3e                	jmp    f010d55b <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d51d:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d523:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d529:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d52c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d530:	74 08                	je     f010d53a <sys_check_LRU_lists+0x93>
f010d532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d535:	8b 40 10             	mov    0x10(%eax),%eax
f010d538:	eb 05                	jmp    f010d53f <sys_check_LRU_lists+0x98>
f010d53a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d53f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d542:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d548:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d54b:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d551:	85 c0                	test   %eax,%eax
f010d553:	75 8d                	jne    f010d4e2 <sys_check_LRU_lists+0x3b>
f010d555:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d559:	75 87                	jne    f010d4e2 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d55b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d55e:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d564:	8b 45 10             	mov    0x10(%ebp),%eax
f010d567:	39 c2                	cmp    %eax,%edx
f010d569:	74 07                	je     f010d572 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d56b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d572:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d576:	0f 84 a5 00 00 00    	je     f010d621 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d57c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d583:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d586:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d58c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d58f:	eb 4a                	jmp    f010d5db <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d591:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d594:	8b 00                	mov    (%eax),%eax
f010d596:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d599:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d59c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d5a1:	89 c2                	mov    %eax,%edx
f010d5a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d5a6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d5ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5b0:	01 c8                	add    %ecx,%eax
f010d5b2:	8b 00                	mov    (%eax),%eax
f010d5b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d5b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d5ba:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d5bf:	39 c2                	cmp    %eax,%edx
f010d5c1:	74 09                	je     f010d5cc <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d5c3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d5ca:	eb 3e                	jmp    f010d60a <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d5cc:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d5cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5d2:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d5d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d5db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d5df:	74 08                	je     f010d5e9 <sys_check_LRU_lists+0x142>
f010d5e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5e4:	8b 40 10             	mov    0x10(%eax),%eax
f010d5e7:	eb 05                	jmp    f010d5ee <sys_check_LRU_lists+0x147>
f010d5e9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5ee:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d5f1:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d5f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5fa:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d600:	85 c0                	test   %eax,%eax
f010d602:	75 8d                	jne    f010d591 <sys_check_LRU_lists+0xea>
f010d604:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d608:	75 87                	jne    f010d591 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d60a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d60d:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d613:	8b 45 14             	mov    0x14(%ebp),%eax
f010d616:	39 c2                	cmp    %eax,%edx
f010d618:	74 07                	je     f010d621 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d61a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d621:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d624:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d627:	c9                   	leave  
f010d628:	c3                   	ret    

f010d629 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d629:	55                   	push   %ebp
f010d62a:	89 e5                	mov    %esp,%ebp
f010d62c:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d62f:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010d634:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d637:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d63e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d641:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d647:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d64a:	eb 65                	jmp    f010d6b1 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d64c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d653:	eb 3a                	jmp    f010d68f <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d655:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d658:	8b 00                	mov    (%eax),%eax
f010d65a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d65d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d660:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d665:	89 c2                	mov    %eax,%edx
f010d667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d66a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d671:	8b 45 08             	mov    0x8(%ebp),%eax
f010d674:	01 c8                	add    %ecx,%eax
f010d676:	8b 00                	mov    (%eax),%eax
f010d678:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d67b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d67e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d683:	39 c2                	cmp    %eax,%edx
f010d685:	75 05                	jne    f010d68c <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d687:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d68a:	eb 0b                	jmp    f010d697 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d68c:	ff 45 f4             	incl   -0xc(%ebp)
f010d68f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d692:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d695:	7c be                	jl     f010d655 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d697:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d69b:	7e 08                	jle    f010d6a5 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d69d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d6a0:	e9 ed 00 00 00       	jmp    f010d792 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d6a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6a8:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d6ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d6b1:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d6b5:	74 08                	je     f010d6bf <sys_check_LRU_lists_free+0x96>
f010d6b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d6ba:	8b 40 10             	mov    0x10(%eax),%eax
f010d6bd:	eb 05                	jmp    f010d6c4 <sys_check_LRU_lists_free+0x9b>
f010d6bf:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d6c7:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d6cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6d0:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d6d6:	85 c0                	test   %eax,%eax
f010d6d8:	0f 85 6e ff ff ff    	jne    f010d64c <sys_check_LRU_lists_free+0x23>
f010d6de:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d6e2:	0f 85 64 ff ff ff    	jne    f010d64c <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d6e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6eb:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d6f1:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d6f4:	eb 62                	jmp    f010d758 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d6f6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d6fd:	eb 3a                	jmp    f010d739 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d6ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d702:	8b 00                	mov    (%eax),%eax
f010d704:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d707:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d70a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d70f:	89 c2                	mov    %eax,%edx
f010d711:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d714:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d71b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d71e:	01 c8                	add    %ecx,%eax
f010d720:	8b 00                	mov    (%eax),%eax
f010d722:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d725:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d728:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d72d:	39 c2                	cmp    %eax,%edx
f010d72f:	75 05                	jne    f010d736 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d731:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d734:	eb 0b                	jmp    f010d741 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d736:	ff 45 f0             	incl   -0x10(%ebp)
f010d739:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d73c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d73f:	7c be                	jl     f010d6ff <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d741:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d745:	7e 05                	jle    f010d74c <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d747:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d74a:	eb 46                	jmp    f010d792 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d74c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d74f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d755:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d758:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d75c:	74 08                	je     f010d766 <sys_check_LRU_lists_free+0x13d>
f010d75e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d761:	8b 40 10             	mov    0x10(%eax),%eax
f010d764:	eb 05                	jmp    f010d76b <sys_check_LRU_lists_free+0x142>
f010d766:	b8 00 00 00 00       	mov    $0x0,%eax
f010d76b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d76e:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d774:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d777:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d77d:	85 c0                	test   %eax,%eax
f010d77f:	0f 85 71 ff ff ff    	jne    f010d6f6 <sys_check_LRU_lists_free+0xcd>
f010d785:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d789:	0f 85 67 ff ff ff    	jne    f010d6f6 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d78f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d792:	c9                   	leave  
f010d793:	c3                   	ret    

f010d794 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d794:	55                   	push   %ebp
f010d795:	89 e5                	mov    %esp,%ebp
f010d797:	56                   	push   %esi
f010d798:	53                   	push   %ebx
f010d799:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d79c:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d7a0:	0f 87 0e 04 00 00    	ja     f010dbb4 <syscall+0x420>
f010d7a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7a9:	c1 e0 02             	shl    $0x2,%eax
f010d7ac:	05 5c 7d 13 f0       	add    $0xf0137d5c,%eax
f010d7b1:	8b 00                	mov    (%eax),%eax
f010d7b3:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d7b5:	8b 45 14             	mov    0x14(%ebp),%eax
f010d7b8:	0f b6 d0             	movzbl %al,%edx
f010d7bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7be:	83 ec 04             	sub    $0x4,%esp
f010d7c1:	52                   	push   %edx
f010d7c2:	ff 75 10             	pushl  0x10(%ebp)
f010d7c5:	50                   	push   %eax
f010d7c6:	e8 db f4 ff ff       	call   f010cca6 <sys_cputs>
f010d7cb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7ce:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7d3:	e9 e1 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d7d8:	e8 3e f5 ff ff       	call   f010cd1b <sys_cgetc>
f010d7dd:	e9 d7 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d7e2:	83 ec 08             	sub    $0x8,%esp
f010d7e5:	ff 75 10             	pushl  0x10(%ebp)
f010d7e8:	ff 75 0c             	pushl  0xc(%ebp)
f010d7eb:	e8 91 f6 ff ff       	call   f010ce81 <sys_calculate_required_frames>
f010d7f0:	83 c4 10             	add    $0x10,%esp
f010d7f3:	e9 c1 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d7f8:	e8 a6 f6 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f010d7fd:	e9 b7 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d802:	e8 bb f6 ff ff       	call   f010cec2 <sys_calculate_modified_frames>
f010d807:	e9 ad 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d80c:	e8 cb f6 ff ff       	call   f010cedc <sys_calculate_notmod_frames>
f010d811:	e9 a3 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d816:	e8 33 f7 ff ff       	call   f010cf4e <sys_pf_calculate_allocated_pages>
f010d81b:	e9 99 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d820:	83 ec 0c             	sub    $0xc,%esp
f010d823:	ff 75 0c             	pushl  0xc(%ebp)
f010d826:	e8 cb f6 ff ff       	call   f010cef6 <sys_calculate_pages_tobe_removed_ready_exit>
f010d82b:	83 c4 10             	add    $0x10,%esp
f010d82e:	e9 86 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d833:	e8 d4 f6 ff ff       	call   f010cf0c <sys_scarce_memory>
		return 0;
f010d838:	b8 00 00 00 00       	mov    $0x0,%eax
f010d83d:	e9 77 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d842:	83 ec 08             	sub    $0x8,%esp
f010d845:	ff 75 10             	pushl  0x10(%ebp)
f010d848:	ff 75 0c             	pushl  0xc(%ebp)
f010d84b:	e8 17 f7 ff ff       	call   f010cf67 <sys_free_user_mem>
f010d850:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d853:	b8 00 00 00 00       	mov    $0x0,%eax
f010d858:	e9 5c 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d85d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d860:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d863:	83 ec 08             	sub    $0x8,%esp
f010d866:	52                   	push   %edx
f010d867:	50                   	push   %eax
f010d868:	e8 c1 f4 ff ff       	call   f010cd2e <__sys_allocate_page>
f010d86d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d870:	b8 00 00 00 00       	mov    $0x0,%eax
f010d875:	e9 3f 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d87a:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d87d:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d880:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d883:	8b 55 10             	mov    0x10(%ebp),%edx
f010d886:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d889:	83 ec 0c             	sub    $0xc,%esp
f010d88c:	56                   	push   %esi
f010d88d:	53                   	push   %ebx
f010d88e:	51                   	push   %ecx
f010d88f:	52                   	push   %edx
f010d890:	50                   	push   %eax
f010d891:	e8 b1 f5 ff ff       	call   f010ce47 <__sys_map_frame>
f010d896:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d899:	b8 00 00 00 00       	mov    $0x0,%eax
f010d89e:	e9 16 03 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d8a3:	8b 55 10             	mov    0x10(%ebp),%edx
f010d8a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8a9:	83 ec 08             	sub    $0x8,%esp
f010d8ac:	52                   	push   %edx
f010d8ad:	50                   	push   %eax
f010d8ae:	e8 b1 f5 ff ff       	call   f010ce64 <__sys_unmap_frame>
f010d8b3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d8b6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8bb:	e9 f9 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d8c0:	83 ec 04             	sub    $0x4,%esp
f010d8c3:	ff 75 14             	pushl  0x14(%ebp)
f010d8c6:	ff 75 10             	pushl  0x10(%ebp)
f010d8c9:	ff 75 0c             	pushl  0xc(%ebp)
f010d8cc:	e8 f8 f6 ff ff       	call   f010cfc9 <sys_allocate_chunk>
f010d8d1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d8d4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8d9:	e9 db 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d8de:	e8 41 f7 ff ff       	call   f010d024 <sys_disable_interrupt>
		return 0;
f010d8e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8e8:	e9 cc 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d8ed:	e8 4c f7 ff ff       	call   f010d03e <sys_enable_interrupt>
		return 0;
f010d8f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8f7:	e9 bd 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d8fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8ff:	0f be c0             	movsbl %al,%eax
f010d902:	83 ec 0c             	sub    $0xc,%esp
f010d905:	50                   	push   %eax
f010d906:	e8 ec f3 ff ff       	call   f010ccf7 <sys_cputc>
f010d90b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d90e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d913:	e9 a1 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d918:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d91b:	0f be c0             	movsbl %al,%eax
f010d91e:	83 ec 0c             	sub    $0xc,%esp
f010d921:	50                   	push   %eax
f010d922:	e8 f3 f5 ff ff       	call   f010cf1a <sys_clearFFL>
f010d927:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d92a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d92f:	e9 85 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d934:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d937:	83 ec 08             	sub    $0x8,%esp
f010d93a:	ff 75 10             	pushl  0x10(%ebp)
f010d93d:	50                   	push   %eax
f010d93e:	e8 15 f7 ff ff       	call   f010d058 <sys_createSemaphore>
f010d943:	83 c4 10             	add    $0x10,%esp
f010d946:	e9 6e 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d94b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d94e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d951:	83 ec 08             	sub    $0x8,%esp
f010d954:	52                   	push   %edx
f010d955:	50                   	push   %eax
f010d956:	e8 1f f7 ff ff       	call   f010d07a <sys_waitSemaphore>
f010d95b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d95e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d963:	e9 51 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d968:	8b 55 10             	mov    0x10(%ebp),%edx
f010d96b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d96e:	83 ec 08             	sub    $0x8,%esp
f010d971:	52                   	push   %edx
f010d972:	50                   	push   %eax
f010d973:	e8 1c f7 ff ff       	call   f010d094 <sys_signalSemaphore>
f010d978:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d97b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d980:	e9 34 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d985:	8b 55 10             	mov    0x10(%ebp),%edx
f010d988:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d98b:	83 ec 08             	sub    $0x8,%esp
f010d98e:	52                   	push   %edx
f010d98f:	50                   	push   %eax
f010d990:	e8 19 f7 ff ff       	call   f010d0ae <sys_getSemaphoreValue>
f010d995:	83 c4 10             	add    $0x10,%esp
f010d998:	e9 1c 02 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d99d:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d9a0:	8b 45 14             	mov    0x14(%ebp),%eax
f010d9a3:	0f b6 d0             	movzbl %al,%edx
f010d9a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9a9:	51                   	push   %ecx
f010d9aa:	52                   	push   %edx
f010d9ab:	ff 75 10             	pushl  0x10(%ebp)
f010d9ae:	50                   	push   %eax
f010d9af:	e8 61 f7 ff ff       	call   f010d115 <sys_createSharedObject>
f010d9b4:	83 c4 10             	add    $0x10,%esp
f010d9b7:	e9 fd 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d9bc:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d9bf:	8b 55 10             	mov    0x10(%ebp),%edx
f010d9c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9c5:	83 ec 04             	sub    $0x4,%esp
f010d9c8:	51                   	push   %ecx
f010d9c9:	52                   	push   %edx
f010d9ca:	50                   	push   %eax
f010d9cb:	e8 8e f7 ff ff       	call   f010d15e <sys_getSharedObject>
f010d9d0:	83 c4 10             	add    $0x10,%esp
f010d9d3:	e9 e1 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d9d8:	8b 55 10             	mov    0x10(%ebp),%edx
f010d9db:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9de:	83 ec 08             	sub    $0x8,%esp
f010d9e1:	52                   	push   %edx
f010d9e2:	50                   	push   %eax
f010d9e3:	e8 92 f7 ff ff       	call   f010d17a <sys_freeSharedObject>
f010d9e8:	83 c4 10             	add    $0x10,%esp
f010d9eb:	e9 c9 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d9f0:	8b 55 10             	mov    0x10(%ebp),%edx
f010d9f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9f6:	83 ec 08             	sub    $0x8,%esp
f010d9f9:	52                   	push   %edx
f010d9fa:	50                   	push   %eax
f010d9fb:	e8 45 f7 ff ff       	call   f010d145 <sys_getSizeOfSharedObject>
f010da00:	83 c4 10             	add    $0x10,%esp
f010da03:	e9 b1 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010da08:	e8 86 f7 ff ff       	call   f010d193 <sys_getMaxShares>
f010da0d:	e9 a7 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010da12:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da15:	ff 75 18             	pushl  0x18(%ebp)
f010da18:	ff 75 14             	pushl  0x14(%ebp)
f010da1b:	ff 75 10             	pushl  0x10(%ebp)
f010da1e:	50                   	push   %eax
f010da1f:	e8 86 f8 ff ff       	call   f010d2aa <sys_create_env>
f010da24:	83 c4 10             	add    $0x10,%esp
f010da27:	e9 8d 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010da2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da2f:	83 ec 0c             	sub    $0xc,%esp
f010da32:	50                   	push   %eax
f010da33:	e8 b2 f8 ff ff       	call   f010d2ea <sys_run_env>
f010da38:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da3b:	b8 00 00 00 00       	mov    $0x0,%eax
f010da40:	e9 74 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010da45:	e8 60 f7 ff ff       	call   f010d1aa <sys_getenvindex>
f010da4a:	e9 6a 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010da4f:	e8 49 f7 ff ff       	call   f010d19d <sys_getenvid>
f010da54:	e9 60 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010da59:	e8 99 f7 ff ff       	call   f010d1f7 <sys_getparentenvid>
f010da5e:	e9 56 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010da63:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da66:	83 ec 0c             	sub    $0xc,%esp
f010da69:	50                   	push   %eax
f010da6a:	e8 95 f7 ff ff       	call   f010d204 <sys_destroy_env>
f010da6f:	83 c4 10             	add    $0x10,%esp
f010da72:	e9 42 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010da77:	e8 20 f8 ff ff       	call   f010d29c <sys_exit_env>
		return 0;
f010da7c:	b8 00 00 00 00       	mov    $0x0,%eax
f010da81:	e9 33 01 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010da86:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010da89:	83 ec 0c             	sub    $0xc,%esp
f010da8c:	50                   	push   %eax
f010da8d:	e8 70 f8 ff ff       	call   f010d302 <sys_get_virtual_time>
f010da92:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010da95:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da98:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010da9b:	8b 45 10             	mov    0x10(%ebp),%eax
f010da9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010daa1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010daa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010daa7:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010daa9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010daac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010daaf:	89 10                	mov    %edx,(%eax)
		return 0;
f010dab1:	b8 00 00 00 00       	mov    $0x0,%eax
f010dab6:	e9 fe 00 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010dabb:	83 ec 04             	sub    $0x4,%esp
f010dabe:	ff 75 14             	pushl  0x14(%ebp)
f010dac1:	ff 75 10             	pushl  0x10(%ebp)
f010dac4:	ff 75 0c             	pushl  0xc(%ebp)
f010dac7:	e8 20 f5 ff ff       	call   f010cfec <sys_move_user_mem>
f010dacc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dacf:	b8 00 00 00 00       	mov    $0x0,%eax
f010dad4:	e9 e0 00 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010dad9:	e8 53 f8 ff ff       	call   f010d331 <sys_rcr2>
f010dade:	e9 d6 00 00 00       	jmp    f010dbb9 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010dae3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dae6:	0f b6 c0             	movzbl %al,%eax
f010dae9:	83 ec 0c             	sub    $0xc,%esp
f010daec:	50                   	push   %eax
f010daed:	e8 51 f8 ff ff       	call   f010d343 <sys_bypassPageFault>
f010daf2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010daf5:	b8 00 00 00 00       	mov    $0x0,%eax
f010dafa:	e9 ba 00 00 00       	jmp    f010dbb9 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010daff:	e8 56 f8 ff ff       	call   f010d35a <rsttst>
		return 0;
f010db04:	b8 00 00 00 00       	mov    $0x0,%eax
f010db09:	e9 ab 00 00 00       	jmp    f010dbb9 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010db0e:	e8 57 f8 ff ff       	call   f010d36a <inctst>
		return 0;
f010db13:	b8 00 00 00 00       	mov    $0x0,%eax
f010db18:	e9 9c 00 00 00       	jmp    f010dbb9 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010db1d:	83 ec 0c             	sub    $0xc,%esp
f010db20:	ff 75 0c             	pushl  0xc(%ebp)
f010db23:	e8 44 f9 ff ff       	call   f010d46c <chktst>
f010db28:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db2b:	b8 00 00 00 00       	mov    $0x0,%eax
f010db30:	e9 84 00 00 00       	jmp    f010dbb9 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010db35:	e8 41 f8 ff ff       	call   f010d37b <gettst>
f010db3a:	eb 7d                	jmp    f010dbb9 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010db3c:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010db3f:	8b 45 18             	mov    0x18(%ebp),%eax
f010db42:	0f be c0             	movsbl %al,%eax
f010db45:	83 ec 0c             	sub    $0xc,%esp
f010db48:	52                   	push   %edx
f010db49:	50                   	push   %eax
f010db4a:	ff 75 14             	pushl  0x14(%ebp)
f010db4d:	ff 75 10             	pushl  0x10(%ebp)
f010db50:	ff 75 0c             	pushl  0xc(%ebp)
f010db53:	e8 2d f8 ff ff       	call   f010d385 <tst>
f010db58:	83 c4 20             	add    $0x20,%esp
		return 0;
f010db5b:	b8 00 00 00 00       	mov    $0x0,%eax
f010db60:	eb 57                	jmp    f010dbb9 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010db62:	e8 a5 f4 ff ff       	call   f010d00c <sys_get_heap_strategy>
f010db67:	eb 50                	jmp    f010dbb9 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010db69:	83 ec 0c             	sub    $0xc,%esp
f010db6c:	ff 75 0c             	pushl  0xc(%ebp)
f010db6f:	e8 a2 f4 ff ff       	call   f010d016 <sys_set_uheap_strategy>
f010db74:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db77:	b8 00 00 00 00       	mov    $0x0,%eax
f010db7c:	eb 3b                	jmp    f010dbb9 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010db7e:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010db81:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010db84:	8b 55 10             	mov    0x10(%ebp),%edx
f010db87:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db8a:	53                   	push   %ebx
f010db8b:	51                   	push   %ecx
f010db8c:	52                   	push   %edx
f010db8d:	50                   	push   %eax
f010db8e:	e8 14 f9 ff ff       	call   f010d4a7 <sys_check_LRU_lists>
f010db93:	83 c4 10             	add    $0x10,%esp
f010db96:	eb 21                	jmp    f010dbb9 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010db98:	8b 55 10             	mov    0x10(%ebp),%edx
f010db9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db9e:	83 ec 08             	sub    $0x8,%esp
f010dba1:	52                   	push   %edx
f010dba2:	50                   	push   %eax
f010dba3:	e8 81 fa ff ff       	call   f010d629 <sys_check_LRU_lists_free>
f010dba8:	83 c4 10             	add    $0x10,%esp
f010dbab:	eb 0c                	jmp    f010dbb9 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010dbad:	b8 03 00 00 00       	mov    $0x3,%eax
f010dbb2:	eb 05                	jmp    f010dbb9 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010dbb4:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010dbb9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010dbbc:	5b                   	pop    %ebx
f010dbbd:	5e                   	pop    %esi
f010dbbe:	5d                   	pop    %ebp
f010dbbf:	c3                   	ret    

f010dbc0 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010dbc0:	55                   	push   %ebp
f010dbc1:	89 e5                	mov    %esp,%ebp
f010dbc3:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010dbc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbc9:	8b 00                	mov    (%eax),%eax
f010dbcb:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dbce:	8b 45 10             	mov    0x10(%ebp),%eax
f010dbd1:	8b 00                	mov    (%eax),%eax
f010dbd3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dbd6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010dbdd:	e9 ca 00 00 00       	jmp    f010dcac <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010dbe2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dbe5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010dbe8:	01 d0                	add    %edx,%eax
f010dbea:	89 c2                	mov    %eax,%edx
f010dbec:	c1 ea 1f             	shr    $0x1f,%edx
f010dbef:	01 d0                	add    %edx,%eax
f010dbf1:	d1 f8                	sar    %eax
f010dbf3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dbf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dbf9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010dbfc:	eb 03                	jmp    f010dc01 <stab_binsearch+0x41>
			m--;
f010dbfe:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010dc01:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc04:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dc07:	7c 1e                	jl     f010dc27 <stab_binsearch+0x67>
f010dc09:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dc0c:	89 d0                	mov    %edx,%eax
f010dc0e:	01 c0                	add    %eax,%eax
f010dc10:	01 d0                	add    %edx,%eax
f010dc12:	c1 e0 02             	shl    $0x2,%eax
f010dc15:	89 c2                	mov    %eax,%edx
f010dc17:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc1a:	01 d0                	add    %edx,%eax
f010dc1c:	8a 40 04             	mov    0x4(%eax),%al
f010dc1f:	0f b6 c0             	movzbl %al,%eax
f010dc22:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dc25:	75 d7                	jne    f010dbfe <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010dc27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc2a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dc2d:	7d 09                	jge    f010dc38 <stab_binsearch+0x78>
			l = true_m + 1;
f010dc2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dc32:	40                   	inc    %eax
f010dc33:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010dc36:	eb 74                	jmp    f010dcac <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010dc38:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010dc3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dc42:	89 d0                	mov    %edx,%eax
f010dc44:	01 c0                	add    %eax,%eax
f010dc46:	01 d0                	add    %edx,%eax
f010dc48:	c1 e0 02             	shl    $0x2,%eax
f010dc4b:	89 c2                	mov    %eax,%edx
f010dc4d:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc50:	01 d0                	add    %edx,%eax
f010dc52:	8b 40 08             	mov    0x8(%eax),%eax
f010dc55:	3b 45 18             	cmp    0x18(%ebp),%eax
f010dc58:	73 11                	jae    f010dc6b <stab_binsearch+0xab>
			*region_left = m;
f010dc5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc5d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dc60:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010dc62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dc65:	40                   	inc    %eax
f010dc66:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dc69:	eb 41                	jmp    f010dcac <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010dc6b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dc6e:	89 d0                	mov    %edx,%eax
f010dc70:	01 c0                	add    %eax,%eax
f010dc72:	01 d0                	add    %edx,%eax
f010dc74:	c1 e0 02             	shl    $0x2,%eax
f010dc77:	89 c2                	mov    %eax,%edx
f010dc79:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc7c:	01 d0                	add    %edx,%eax
f010dc7e:	8b 40 08             	mov    0x8(%eax),%eax
f010dc81:	3b 45 18             	cmp    0x18(%ebp),%eax
f010dc84:	76 14                	jbe    f010dc9a <stab_binsearch+0xda>
			*region_right = m - 1;
f010dc86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc89:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dc8c:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc8f:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010dc91:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc94:	48                   	dec    %eax
f010dc95:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dc98:	eb 12                	jmp    f010dcac <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010dc9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dca0:	89 10                	mov    %edx,(%eax)
			l = m;
f010dca2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dca5:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010dca8:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010dcac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010dcaf:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010dcb2:	0f 8e 2a ff ff ff    	jle    f010dbe2 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010dcb8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dcbc:	75 0f                	jne    f010dccd <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010dcbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcc1:	8b 00                	mov    (%eax),%eax
f010dcc3:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dcc6:	8b 45 10             	mov    0x10(%ebp),%eax
f010dcc9:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010dccb:	eb 3d                	jmp    f010dd0a <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dccd:	8b 45 10             	mov    0x10(%ebp),%eax
f010dcd0:	8b 00                	mov    (%eax),%eax
f010dcd2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dcd5:	eb 03                	jmp    f010dcda <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010dcd7:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010dcda:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcdd:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dcdf:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dce2:	7d 1e                	jge    f010dd02 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010dce4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dce7:	89 d0                	mov    %edx,%eax
f010dce9:	01 c0                	add    %eax,%eax
f010dceb:	01 d0                	add    %edx,%eax
f010dced:	c1 e0 02             	shl    $0x2,%eax
f010dcf0:	89 c2                	mov    %eax,%edx
f010dcf2:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcf5:	01 d0                	add    %edx,%eax
f010dcf7:	8a 40 04             	mov    0x4(%eax),%al
f010dcfa:	0f b6 c0             	movzbl %al,%eax
f010dcfd:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dd00:	75 d5                	jne    f010dcd7 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010dd02:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd05:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dd08:	89 10                	mov    %edx,(%eax)
	}
}
f010dd0a:	90                   	nop
f010dd0b:	c9                   	leave  
f010dd0c:	c3                   	ret    

f010dd0d <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010dd0d:	55                   	push   %ebp
f010dd0e:	89 e5                	mov    %esp,%ebp
f010dd10:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010dd13:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd16:	c7 00 20 7e 13 f0    	movl   $0xf0137e20,(%eax)
	info->eip_line = 0;
f010dd1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010dd26:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd29:	c7 40 08 20 7e 13 f0 	movl   $0xf0137e20,0x8(%eax)
	info->eip_fn_namelen = 9;
f010dd30:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd33:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010dd3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd3d:	8b 55 08             	mov    0x8(%ebp),%edx
f010dd40:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010dd43:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd46:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010dd4d:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd50:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010dd55:	76 1e                	jbe    f010dd75 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010dd57:	c7 45 f4 10 da 13 f0 	movl   $0xf013da10,-0xc(%ebp)
		stab_end = __STAB_END__;
f010dd5e:	c7 45 f0 5c d8 17 f0 	movl   $0xf017d85c,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010dd65:	c7 45 ec 5d d8 17 f0 	movl   $0xf017d85d,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010dd6c:	c7 45 e8 43 a5 18 f0 	movl   $0xf018a543,-0x18(%ebp)
f010dd73:	eb 2a                	jmp    f010dd9f <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010dd75:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010dd7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd7f:	8b 00                	mov    (%eax),%eax
f010dd81:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010dd84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd87:	8b 40 04             	mov    0x4(%eax),%eax
f010dd8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010dd8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd90:	8b 40 08             	mov    0x8(%eax),%eax
f010dd93:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010dd96:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd99:	8b 40 0c             	mov    0xc(%eax),%eax
f010dd9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010dd9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dda2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dda5:	76 0a                	jbe    f010ddb1 <debuginfo_eip+0xa4>
f010dda7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ddaa:	48                   	dec    %eax
f010ddab:	8a 00                	mov    (%eax),%al
f010ddad:	84 c0                	test   %al,%al
f010ddaf:	74 0a                	je     f010ddbb <debuginfo_eip+0xae>
		return -1;
f010ddb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010ddb6:	e9 01 02 00 00       	jmp    f010dfbc <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010ddbb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010ddc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ddc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ddc8:	29 c2                	sub    %eax,%edx
f010ddca:	89 d0                	mov    %edx,%eax
f010ddcc:	c1 f8 02             	sar    $0x2,%eax
f010ddcf:	89 c2                	mov    %eax,%edx
f010ddd1:	89 d0                	mov    %edx,%eax
f010ddd3:	c1 e0 02             	shl    $0x2,%eax
f010ddd6:	01 d0                	add    %edx,%eax
f010ddd8:	c1 e0 02             	shl    $0x2,%eax
f010dddb:	01 d0                	add    %edx,%eax
f010dddd:	c1 e0 02             	shl    $0x2,%eax
f010dde0:	01 d0                	add    %edx,%eax
f010dde2:	89 c1                	mov    %eax,%ecx
f010dde4:	c1 e1 08             	shl    $0x8,%ecx
f010dde7:	01 c8                	add    %ecx,%eax
f010dde9:	89 c1                	mov    %eax,%ecx
f010ddeb:	c1 e1 10             	shl    $0x10,%ecx
f010ddee:	01 c8                	add    %ecx,%eax
f010ddf0:	01 c0                	add    %eax,%eax
f010ddf2:	01 d0                	add    %edx,%eax
f010ddf4:	48                   	dec    %eax
f010ddf5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010ddf8:	ff 75 08             	pushl  0x8(%ebp)
f010ddfb:	6a 64                	push   $0x64
f010ddfd:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010de00:	50                   	push   %eax
f010de01:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010de04:	50                   	push   %eax
f010de05:	ff 75 f4             	pushl  -0xc(%ebp)
f010de08:	e8 b3 fd ff ff       	call   f010dbc0 <stab_binsearch>
f010de0d:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010de10:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010de13:	85 c0                	test   %eax,%eax
f010de15:	75 0a                	jne    f010de21 <debuginfo_eip+0x114>
		return -1;
f010de17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010de1c:	e9 9b 01 00 00       	jmp    f010dfbc <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010de21:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010de24:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010de27:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010de2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010de2d:	ff 75 08             	pushl  0x8(%ebp)
f010de30:	6a 24                	push   $0x24
f010de32:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010de35:	50                   	push   %eax
f010de36:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010de39:	50                   	push   %eax
f010de3a:	ff 75 f4             	pushl  -0xc(%ebp)
f010de3d:	e8 7e fd ff ff       	call   f010dbc0 <stab_binsearch>
f010de42:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010de45:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010de48:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010de4b:	39 c2                	cmp    %eax,%edx
f010de4d:	0f 8f 86 00 00 00    	jg     f010ded9 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010de53:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010de56:	89 c2                	mov    %eax,%edx
f010de58:	89 d0                	mov    %edx,%eax
f010de5a:	01 c0                	add    %eax,%eax
f010de5c:	01 d0                	add    %edx,%eax
f010de5e:	c1 e0 02             	shl    $0x2,%eax
f010de61:	89 c2                	mov    %eax,%edx
f010de63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de66:	01 d0                	add    %edx,%eax
f010de68:	8b 00                	mov    (%eax),%eax
f010de6a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010de6d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010de70:	29 d1                	sub    %edx,%ecx
f010de72:	89 ca                	mov    %ecx,%edx
f010de74:	39 d0                	cmp    %edx,%eax
f010de76:	73 22                	jae    f010de9a <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010de78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010de7b:	89 c2                	mov    %eax,%edx
f010de7d:	89 d0                	mov    %edx,%eax
f010de7f:	01 c0                	add    %eax,%eax
f010de81:	01 d0                	add    %edx,%eax
f010de83:	c1 e0 02             	shl    $0x2,%eax
f010de86:	89 c2                	mov    %eax,%edx
f010de88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de8b:	01 d0                	add    %edx,%eax
f010de8d:	8b 10                	mov    (%eax),%edx
f010de8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de92:	01 c2                	add    %eax,%edx
f010de94:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de97:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010de9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010de9d:	89 c2                	mov    %eax,%edx
f010de9f:	89 d0                	mov    %edx,%eax
f010dea1:	01 c0                	add    %eax,%eax
f010dea3:	01 d0                	add    %edx,%eax
f010dea5:	c1 e0 02             	shl    $0x2,%eax
f010dea8:	89 c2                	mov    %eax,%edx
f010deaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dead:	01 d0                	add    %edx,%eax
f010deaf:	8b 50 08             	mov    0x8(%eax),%edx
f010deb2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010deb5:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010deb8:	8b 55 08             	mov    0x8(%ebp),%edx
f010debb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010debe:	8b 40 10             	mov    0x10(%eax),%eax
f010dec1:	29 c2                	sub    %eax,%edx
f010dec3:	89 d0                	mov    %edx,%eax
f010dec5:	c1 f8 02             	sar    $0x2,%eax
f010dec8:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010decb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dece:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010ded1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ded4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010ded7:	eb 15                	jmp    f010deee <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010ded9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dedc:	8b 55 08             	mov    0x8(%ebp),%edx
f010dedf:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010dee2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dee5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010dee8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010deeb:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010deee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010def1:	8b 40 08             	mov    0x8(%eax),%eax
f010def4:	83 ec 08             	sub    $0x8,%esp
f010def7:	6a 3a                	push   $0x3a
f010def9:	50                   	push   %eax
f010defa:	e8 72 38 02 00       	call   f0131771 <strfind>
f010deff:	83 c4 10             	add    $0x10,%esp
f010df02:	89 c2                	mov    %eax,%edx
f010df04:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df07:	8b 40 08             	mov    0x8(%eax),%eax
f010df0a:	29 c2                	sub    %eax,%edx
f010df0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df0f:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010df12:	eb 03                	jmp    f010df17 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010df14:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010df17:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010df1a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010df1d:	7c 4e                	jl     f010df6d <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010df1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df22:	89 d0                	mov    %edx,%eax
f010df24:	01 c0                	add    %eax,%eax
f010df26:	01 d0                	add    %edx,%eax
f010df28:	c1 e0 02             	shl    $0x2,%eax
f010df2b:	89 c2                	mov    %eax,%edx
f010df2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df30:	01 d0                	add    %edx,%eax
f010df32:	8a 40 04             	mov    0x4(%eax),%al
f010df35:	3c 84                	cmp    $0x84,%al
f010df37:	74 34                	je     f010df6d <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010df39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df3c:	89 d0                	mov    %edx,%eax
f010df3e:	01 c0                	add    %eax,%eax
f010df40:	01 d0                	add    %edx,%eax
f010df42:	c1 e0 02             	shl    $0x2,%eax
f010df45:	89 c2                	mov    %eax,%edx
f010df47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df4a:	01 d0                	add    %edx,%eax
f010df4c:	8a 40 04             	mov    0x4(%eax),%al
f010df4f:	3c 64                	cmp    $0x64,%al
f010df51:	75 c1                	jne    f010df14 <debuginfo_eip+0x207>
f010df53:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df56:	89 d0                	mov    %edx,%eax
f010df58:	01 c0                	add    %eax,%eax
f010df5a:	01 d0                	add    %edx,%eax
f010df5c:	c1 e0 02             	shl    $0x2,%eax
f010df5f:	89 c2                	mov    %eax,%edx
f010df61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df64:	01 d0                	add    %edx,%eax
f010df66:	8b 40 08             	mov    0x8(%eax),%eax
f010df69:	85 c0                	test   %eax,%eax
f010df6b:	74 a7                	je     f010df14 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010df6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010df70:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010df73:	7c 42                	jl     f010dfb7 <debuginfo_eip+0x2aa>
f010df75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df78:	89 d0                	mov    %edx,%eax
f010df7a:	01 c0                	add    %eax,%eax
f010df7c:	01 d0                	add    %edx,%eax
f010df7e:	c1 e0 02             	shl    $0x2,%eax
f010df81:	89 c2                	mov    %eax,%edx
f010df83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df86:	01 d0                	add    %edx,%eax
f010df88:	8b 00                	mov    (%eax),%eax
f010df8a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010df8d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010df90:	29 d1                	sub    %edx,%ecx
f010df92:	89 ca                	mov    %ecx,%edx
f010df94:	39 d0                	cmp    %edx,%eax
f010df96:	73 1f                	jae    f010dfb7 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010df98:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010df9b:	89 d0                	mov    %edx,%eax
f010df9d:	01 c0                	add    %eax,%eax
f010df9f:	01 d0                	add    %edx,%eax
f010dfa1:	c1 e0 02             	shl    $0x2,%eax
f010dfa4:	89 c2                	mov    %eax,%edx
f010dfa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dfa9:	01 d0                	add    %edx,%eax
f010dfab:	8b 10                	mov    (%eax),%edx
f010dfad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dfb0:	01 c2                	add    %eax,%edx
f010dfb2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfb5:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010dfb7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dfbc:	c9                   	leave  
f010dfbd:	c3                   	ret    

f010dfbe <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010dfbe:	55                   	push   %ebp
f010dfbf:	89 e5                	mov    %esp,%ebp
f010dfc1:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010dfc4:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010dfc8:	74 1c                	je     f010dfe6 <setPageReplacmentAlgorithmLRU+0x28>
f010dfca:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dfce:	74 16                	je     f010dfe6 <setPageReplacmentAlgorithmLRU+0x28>
f010dfd0:	68 2c 7e 13 f0       	push   $0xf0137e2c
f010dfd5:	68 76 7e 13 f0       	push   $0xf0137e76
f010dfda:	6a 18                	push   $0x18
f010dfdc:	68 8b 7e 13 f0       	push   $0xf0137e8b
f010dfe1:	e8 1f 22 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010dfe6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfe9:	a3 88 ed 88 f0       	mov    %eax,0xf088ed88
}
f010dfee:	90                   	nop
f010dfef:	c9                   	leave  
f010dff0:	c3                   	ret    

f010dff1 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010dff1:	55                   	push   %ebp
f010dff2:	89 e5                	mov    %esp,%ebp
f010dff4:	c7 05 88 ed 88 f0 03 	movl   $0x3,0xf088ed88
f010dffb:	00 00 00 
f010dffe:	90                   	nop
f010dfff:	5d                   	pop    %ebp
f010e000:	c3                   	ret    

f010e001 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e001:	55                   	push   %ebp
f010e002:	89 e5                	mov    %esp,%ebp
f010e004:	c7 05 88 ed 88 f0 04 	movl   $0x4,0xf088ed88
f010e00b:	00 00 00 
f010e00e:	90                   	nop
f010e00f:	5d                   	pop    %ebp
f010e010:	c3                   	ret    

f010e011 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e011:	55                   	push   %ebp
f010e012:	89 e5                	mov    %esp,%ebp
f010e014:	c7 05 88 ed 88 f0 05 	movl   $0x5,0xf088ed88
f010e01b:	00 00 00 
f010e01e:	90                   	nop
f010e01f:	5d                   	pop    %ebp
f010e020:	c3                   	ret    

f010e021 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e021:	55                   	push   %ebp
f010e022:	89 e5                	mov    %esp,%ebp
f010e024:	c7 05 88 ed 88 f0 07 	movl   $0x7,0xf088ed88
f010e02b:	00 00 00 
f010e02e:	90                   	nop
f010e02f:	5d                   	pop    %ebp
f010e030:	c3                   	ret    

f010e031 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e031:	55                   	push   %ebp
f010e032:	89 e5                	mov    %esp,%ebp
f010e034:	c7 05 88 ed 88 f0 06 	movl   $0x6,0xf088ed88
f010e03b:	00 00 00 
f010e03e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e041:	a3 e4 ec 88 f0       	mov    %eax,0xf088ece4
f010e046:	90                   	nop
f010e047:	5d                   	pop    %ebp
f010e048:	c3                   	ret    

f010e049 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e049:	55                   	push   %ebp
f010e04a:	89 e5                	mov    %esp,%ebp
f010e04c:	8b 15 88 ed 88 f0    	mov    0xf088ed88,%edx
f010e052:	8b 45 08             	mov    0x8(%ebp),%eax
f010e055:	39 c2                	cmp    %eax,%edx
f010e057:	0f 94 c0             	sete   %al
f010e05a:	0f b6 c0             	movzbl %al,%eax
f010e05d:	5d                   	pop    %ebp
f010e05e:	c3                   	ret    

f010e05f <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e05f:	55                   	push   %ebp
f010e060:	89 e5                	mov    %esp,%ebp
f010e062:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e067:	83 f8 03             	cmp    $0x3,%eax
f010e06a:	75 07                	jne    f010e073 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e06c:	b8 01 00 00 00       	mov    $0x1,%eax
f010e071:	eb 05                	jmp    f010e078 <isPageReplacmentAlgorithmCLOCK+0x19>
f010e073:	b8 00 00 00 00       	mov    $0x0,%eax
f010e078:	5d                   	pop    %ebp
f010e079:	c3                   	ret    

f010e07a <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e07a:	55                   	push   %ebp
f010e07b:	89 e5                	mov    %esp,%ebp
f010e07d:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e082:	83 f8 04             	cmp    $0x4,%eax
f010e085:	75 07                	jne    f010e08e <isPageReplacmentAlgorithmFIFO+0x14>
f010e087:	b8 01 00 00 00       	mov    $0x1,%eax
f010e08c:	eb 05                	jmp    f010e093 <isPageReplacmentAlgorithmFIFO+0x19>
f010e08e:	b8 00 00 00 00       	mov    $0x0,%eax
f010e093:	5d                   	pop    %ebp
f010e094:	c3                   	ret    

f010e095 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e095:	55                   	push   %ebp
f010e096:	89 e5                	mov    %esp,%ebp
f010e098:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e09d:	83 f8 05             	cmp    $0x5,%eax
f010e0a0:	75 07                	jne    f010e0a9 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e0a2:	b8 01 00 00 00       	mov    $0x1,%eax
f010e0a7:	eb 05                	jmp    f010e0ae <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e0a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0ae:	5d                   	pop    %ebp
f010e0af:	c3                   	ret    

f010e0b0 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e0b0:	55                   	push   %ebp
f010e0b1:	89 e5                	mov    %esp,%ebp
f010e0b3:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e0b8:	83 f8 07             	cmp    $0x7,%eax
f010e0bb:	75 07                	jne    f010e0c4 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e0bd:	b8 01 00 00 00       	mov    $0x1,%eax
f010e0c2:	eb 05                	jmp    f010e0c9 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e0c4:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0c9:	5d                   	pop    %ebp
f010e0ca:	c3                   	ret    

f010e0cb <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e0cb:	55                   	push   %ebp
f010e0cc:	89 e5                	mov    %esp,%ebp
f010e0ce:	a1 88 ed 88 f0       	mov    0xf088ed88,%eax
f010e0d3:	83 f8 06             	cmp    $0x6,%eax
f010e0d6:	75 07                	jne    f010e0df <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e0d8:	b8 01 00 00 00       	mov    $0x1,%eax
f010e0dd:	eb 05                	jmp    f010e0e4 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e0df:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0e4:	5d                   	pop    %ebp
f010e0e5:	c3                   	ret    

f010e0e6 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e0e6:	55                   	push   %ebp
f010e0e7:	89 e5                	mov    %esp,%ebp
f010e0e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0ec:	a3 50 ed 88 f0       	mov    %eax,0xf088ed50
f010e0f1:	90                   	nop
f010e0f2:	5d                   	pop    %ebp
f010e0f3:	c3                   	ret    

f010e0f4 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e0f4:	55                   	push   %ebp
f010e0f5:	89 e5                	mov    %esp,%ebp
f010e0f7:	a1 50 ed 88 f0       	mov    0xf088ed50,%eax
f010e0fc:	5d                   	pop    %ebp
f010e0fd:	c3                   	ret    

f010e0fe <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e0fe:	55                   	push   %ebp
f010e0ff:	89 e5                	mov    %esp,%ebp
f010e101:	8b 45 08             	mov    0x8(%ebp),%eax
f010e104:	a3 90 ed 88 f0       	mov    %eax,0xf088ed90
f010e109:	90                   	nop
f010e10a:	5d                   	pop    %ebp
f010e10b:	c3                   	ret    

f010e10c <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e10c:	55                   	push   %ebp
f010e10d:	89 e5                	mov    %esp,%ebp
f010e10f:	a1 90 ed 88 f0       	mov    0xf088ed90,%eax
f010e114:	5d                   	pop    %ebp
f010e115:	c3                   	ret    

f010e116 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e116:	55                   	push   %ebp
f010e117:	89 e5                	mov    %esp,%ebp
f010e119:	8b 45 08             	mov    0x8(%ebp),%eax
f010e11c:	a3 b0 ed 88 f0       	mov    %eax,0xf088edb0
f010e121:	90                   	nop
f010e122:	5d                   	pop    %ebp
f010e123:	c3                   	ret    

f010e124 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e124:	55                   	push   %ebp
f010e125:	89 e5                	mov    %esp,%ebp
f010e127:	a1 b0 ed 88 f0       	mov    0xf088edb0,%eax
f010e12c:	5d                   	pop    %ebp
f010e12d:	c3                   	ret    

f010e12e <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e12e:	55                   	push   %ebp
f010e12f:	89 e5                	mov    %esp,%ebp
f010e131:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e134:	8b 45 08             	mov    0x8(%ebp),%eax
f010e137:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e13a:	83 ec 08             	sub    $0x8,%esp
f010e13d:	ff 75 0c             	pushl  0xc(%ebp)
f010e140:	50                   	push   %eax
f010e141:	e8 c1 8a ff ff       	call   f0106c07 <create_page_table>
f010e146:	83 c4 10             	add    $0x10,%esp
f010e149:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e14c:	90                   	nop
f010e14d:	c9                   	leave  
f010e14e:	c3                   	ret    

f010e14f <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e14f:	55                   	push   %ebp
f010e150:	89 e5                	mov    %esp,%ebp
f010e152:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 current_env_size = env_page_ws_get_size(curenv);
f010e155:	83 ec 0c             	sub    $0xc,%esp
f010e158:	ff 75 08             	pushl  0x8(%ebp)
f010e15b:	e8 bd 9f ff ff       	call   f010811d <env_page_ws_get_size>
f010e160:	83 c4 10             	add    $0x10,%esp
f010e163:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(current_env_size == curenv->page_WS_max_size) //Replacement
f010e166:	8b 45 08             	mov    0x8(%ebp),%eax
f010e169:	8b 40 74             	mov    0x74(%eax),%eax
f010e16c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e16f:	0f 85 56 01 00 00    	jne    f010e2cb <page_fault_handler+0x17c>
	{
		uint32 virtual_address = 0;
f010e175:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		while(1 == 1)  // Find victim virtual
		{
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
f010e17c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e17f:	8b 48 78             	mov    0x78(%eax),%ecx
f010e182:	8b 45 08             	mov    0x8(%ebp),%eax
f010e185:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e18b:	89 d0                	mov    %edx,%eax
f010e18d:	01 c0                	add    %eax,%eax
f010e18f:	01 d0                	add    %edx,%eax
f010e191:	c1 e0 03             	shl    $0x3,%eax
f010e194:	01 c8                	add    %ecx,%eax
f010e196:	8b 10                	mov    (%eax),%edx
f010e198:	8b 45 08             	mov    0x8(%ebp),%eax
f010e19b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e19e:	83 ec 08             	sub    $0x8,%esp
f010e1a1:	52                   	push   %edx
f010e1a2:	50                   	push   %eax
f010e1a3:	e8 c0 9d ff ff       	call   f0107f68 <pt_get_page_permissions>
f010e1a8:	83 c4 10             	add    $0x10,%esp
f010e1ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if((per&PERM_USED)== PERM_USED)
f010e1ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e1b1:	83 e0 20             	and    $0x20,%eax
f010e1b4:	85 c0                	test   %eax,%eax
f010e1b6:	74 46                	je     f010e1fe <page_fault_handler+0xaf>
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
f010e1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1bb:	8b 48 78             	mov    0x78(%eax),%ecx
f010e1be:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1c1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e1c7:	89 d0                	mov    %edx,%eax
f010e1c9:	01 c0                	add    %eax,%eax
f010e1cb:	01 d0                	add    %edx,%eax
f010e1cd:	c1 e0 03             	shl    $0x3,%eax
f010e1d0:	01 c8                	add    %ecx,%eax
f010e1d2:	8b 10                	mov    (%eax),%edx
f010e1d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1d7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e1da:	6a 20                	push   $0x20
f010e1dc:	6a 00                	push   $0x0
f010e1de:	52                   	push   %edx
f010e1df:	50                   	push   %eax
f010e1e0:	e8 cf 9c ff ff       	call   f0107eb4 <pt_set_page_permissions>
f010e1e5:	83 c4 10             	add    $0x10,%esp
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
f010e1e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1eb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e1f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1f4:	8b 40 74             	mov    0x74(%eax),%eax
f010e1f7:	48                   	dec    %eax
f010e1f8:	39 c2                	cmp    %eax,%edx
f010e1fa:	75 7b                	jne    f010e277 <page_fault_handler+0x128>
f010e1fc:	eb 67                	jmp    f010e265 <page_fault_handler+0x116>
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
			if((per&PERM_USED)== PERM_USED)
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010e1fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010e201:	8b 48 78             	mov    0x78(%eax),%ecx
f010e204:	8b 45 08             	mov    0x8(%ebp),%eax
f010e207:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e20d:	89 d0                	mov    %edx,%eax
f010e20f:	01 c0                	add    %eax,%eax
f010e211:	01 d0                	add    %edx,%eax
f010e213:	c1 e0 03             	shl    $0x3,%eax
f010e216:	01 c8                	add    %ecx,%eax
f010e218:	8b 00                	mov    (%eax),%eax
f010e21a:	89 45 f0             	mov    %eax,-0x10(%ebp)
				break;
f010e21d:	90                   	nop
				curenv->page_last_WS_index = 0;
			else
				curenv->page_last_WS_index++;
		}

		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
f010e21e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e221:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e224:	83 ec 08             	sub    $0x8,%esp
f010e227:	ff 75 f0             	pushl  -0x10(%ebp)
f010e22a:	50                   	push   %eax
f010e22b:	e8 38 9d ff ff       	call   f0107f68 <pt_get_page_permissions>
f010e230:	83 c4 10             	add    $0x10,%esp
f010e233:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 *ptr_page_table = NULL ;
f010e236:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);
f010e23d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e240:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e243:	83 ec 04             	sub    $0x4,%esp
f010e246:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010e249:	52                   	push   %edx
f010e24a:	ff 75 f0             	pushl  -0x10(%ebp)
f010e24d:	50                   	push   %eax
f010e24e:	e8 b3 8b ff ff       	call   f0106e06 <get_frame_info>
f010e253:	83 c4 10             	add    $0x10,%esp
f010e256:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
f010e259:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e25c:	83 e0 40             	and    $0x40,%eax
f010e25f:	85 c0                	test   %eax,%eax
f010e261:	74 42                	je     f010e2a5 <page_fault_handler+0x156>
f010e263:	eb 2c                	jmp    f010e291 <page_fault_handler+0x142>
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
f010e265:	8b 45 08             	mov    0x8(%ebp),%eax
f010e268:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e26f:	00 00 00 
f010e272:	e9 05 ff ff ff       	jmp    f010e17c <page_fault_handler+0x2d>
			else
				curenv->page_last_WS_index++;
f010e277:	8b 45 08             	mov    0x8(%ebp),%eax
f010e27a:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e280:	8d 50 01             	lea    0x1(%eax),%edx
f010e283:	8b 45 08             	mov    0x8(%ebp),%eax
f010e286:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010e28c:	e9 eb fe ff ff       	jmp    f010e17c <page_fault_handler+0x2d>
		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
		uint32 *ptr_page_table = NULL ;
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
			pf_update_env_page(curenv,virtual_address,frame_info);
f010e291:	83 ec 04             	sub    $0x4,%esp
f010e294:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e297:	ff 75 f0             	pushl  -0x10(%ebp)
f010e29a:	ff 75 08             	pushl  0x8(%ebp)
f010e29d:	e8 36 55 ff ff       	call   f01037d8 <pf_update_env_page>
f010e2a2:	83 c4 10             	add    $0x10,%esp

		env_page_ws_invalidate(curenv,virtual_address);
f010e2a5:	83 ec 08             	sub    $0x8,%esp
f010e2a8:	ff 75 f0             	pushl  -0x10(%ebp)
f010e2ab:	ff 75 08             	pushl  0x8(%ebp)
f010e2ae:	e8 b3 9e ff ff       	call   f0108166 <env_page_ws_invalidate>
f010e2b3:	83 c4 10             	add    $0x10,%esp
		unmap_frame(curenv->env_page_directory,virtual_address);
f010e2b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2b9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2bc:	83 ec 08             	sub    $0x8,%esp
f010e2bf:	ff 75 f0             	pushl  -0x10(%ebp)
f010e2c2:	50                   	push   %eax
f010e2c3:	e8 ae 8b ff ff       	call   f0106e76 <unmap_frame>
f010e2c8:	83 c4 10             	add    $0x10,%esp
	}
		// Placement
	cprintf("-------------------------------------There is a fault\n");
f010e2cb:	83 ec 0c             	sub    $0xc,%esp
f010e2ce:	68 a8 7e 13 f0       	push   $0xf0137ea8
f010e2d3:	e8 36 2a ff ff       	call   f0100d0e <cprintf>
f010e2d8:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *ptr_frame;
		allocate_frame(&ptr_frame);
f010e2db:	83 ec 0c             	sub    $0xc,%esp
f010e2de:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e2e1:	50                   	push   %eax
f010e2e2:	e8 0b 86 ff ff       	call   f01068f2 <allocate_frame>
f010e2e7:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_WRITEABLE|PERM_USER);
f010e2ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010e2ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2f0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2f3:	6a 06                	push   $0x6
f010e2f5:	ff 75 0c             	pushl  0xc(%ebp)
f010e2f8:	52                   	push   %edx
f010e2f9:	50                   	push   %eax
f010e2fa:	e8 42 8a ff ff       	call   f0106d41 <map_frame>
f010e2ff:	83 c4 10             	add    $0x10,%esp
		int ret = pf_read_env_page(curenv, (void *)fault_va);
f010e302:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e305:	83 ec 08             	sub    $0x8,%esp
f010e308:	50                   	push   %eax
f010e309:	ff 75 08             	pushl  0x8(%ebp)
f010e30c:	e8 29 57 ff ff       	call   f0103a3a <pf_read_env_page>
f010e311:	83 c4 10             	add    $0x10,%esp
f010e314:	89 45 e0             	mov    %eax,-0x20(%ebp)

		if(ret == E_PAGE_NOT_EXIST_IN_PF) // Check if page in Page File
f010e317:	83 7d e0 f7          	cmpl   $0xfffffff7,-0x20(%ebp)
f010e31b:	75 54                	jne    f010e371 <page_fault_handler+0x222>
		{
			if(
f010e31d:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e324:	77 27                	ja     f010e34d <page_fault_handler+0x1fe>
				!((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || // Check if page in Stack
f010e326:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e32d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e330:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e335:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e338:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e33b:	ba 00 00 00 00       	mov    $0x0,%edx
f010e340:	f7 75 dc             	divl   -0x24(%ebp)
f010e343:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e346:	29 d0                	sub    %edx,%eax
f010e348:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e34b:	76 24                	jbe    f010e371 <page_fault_handler+0x222>
f010e34d:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e354:	77 07                	ja     f010e35d <page_fault_handler+0x20e>
					(fault_va < USER_HEAP_MAX && fault_va >= USER_HEAP_START)) // Check if page in User Heap
f010e356:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e359:	85 c0                	test   %eax,%eax
f010e35b:	78 14                	js     f010e371 <page_fault_handler+0x222>
			)
				panic("ILLEGAL MEMORY ACCESS");
f010e35d:	83 ec 04             	sub    $0x4,%esp
f010e360:	68 df 7e 13 f0       	push   $0xf0137edf
f010e365:	6a 7d                	push   $0x7d
f010e367:	68 8b 7e 13 f0       	push   $0xf0137e8b
f010e36c:	e8 94 1e ff ff       	call   f0100205 <_panic>
		}
		env_page_ws_set_entry(curenv,curenv->page_last_WS_index,fault_va);
f010e371:	8b 45 08             	mov    0x8(%ebp),%eax
f010e374:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e37a:	83 ec 04             	sub    $0x4,%esp
f010e37d:	ff 75 0c             	pushl  0xc(%ebp)
f010e380:	50                   	push   %eax
f010e381:	ff 75 08             	pushl  0x8(%ebp)
f010e384:	e8 48 9e ff ff       	call   f01081d1 <env_page_ws_set_entry>
f010e389:	83 c4 10             	add    $0x10,%esp
		curenv->page_last_WS_index++;
f010e38c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e38f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e395:	8d 50 01             	lea    0x1(%eax),%edx
f010e398:	8b 45 08             	mov    0x8(%ebp),%eax
f010e39b:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010e3a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3a4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e3aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3ad:	8b 40 74             	mov    0x74(%eax),%eax
f010e3b0:	39 c2                	cmp    %eax,%edx
f010e3b2:	75 0d                	jne    f010e3c1 <page_fault_handler+0x272>
			curenv->page_last_WS_index = 0;
f010e3b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3b7:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e3be:	00 00 00 

	//refer to the project presentation and documentation for details
}
f010e3c1:	90                   	nop
f010e3c2:	c9                   	leave  
f010e3c3:	c3                   	ret    

f010e3c4 <__page_fault_handler_with_buffering>:
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e3c4:	55                   	push   %ebp
f010e3c5:	89 e5                	mov    %esp,%ebp
f010e3c7:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e3ca:	83 ec 04             	sub    $0x4,%esp
f010e3cd:	68 f8 7e 13 f0       	push   $0xf0137ef8
f010e3d2:	68 89 00 00 00       	push   $0x89
f010e3d7:	68 8b 7e 13 f0       	push   $0xf0137e8b
f010e3dc:	e8 24 1e ff ff       	call   f0100205 <_panic>

f010e3e1 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e3e1:	55                   	push   %ebp
f010e3e2:	89 e5                	mov    %esp,%ebp
f010e3e4:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e3e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3ea:	a3 b4 ec 88 f0       	mov    %eax,0xf088ecb4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e3ef:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3f2:	89 d0                	mov    %edx,%eax
f010e3f4:	c1 e0 02             	shl    $0x2,%eax
f010e3f7:	01 d0                	add    %edx,%eax
f010e3f9:	01 c0                	add    %eax,%eax
f010e3fb:	01 d0                	add    %edx,%eax
f010e3fd:	01 c0                	add    %eax,%eax
f010e3ff:	01 d0                	add    %edx,%eax
f010e401:	c1 e0 02             	shl    $0x2,%eax
f010e404:	83 ec 0c             	sub    $0xc,%esp
f010e407:	50                   	push   %eax
f010e408:	e8 7f 97 ff ff       	call   f0107b8c <kmalloc>
f010e40d:	83 c4 10             	add    $0x10,%esp
f010e410:	a3 0c ed 88 f0       	mov    %eax,0xf088ed0c
	if (semaphores == NULL)
f010e415:	a1 0c ed 88 f0       	mov    0xf088ed0c,%eax
f010e41a:	85 c0                	test   %eax,%eax
f010e41c:	75 14                	jne    f010e432 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e41e:	83 ec 04             	sub    $0x4,%esp
f010e421:	68 3c 7f 13 f0       	push   $0xf0137f3c
f010e426:	6a 1e                	push   $0x1e
f010e428:	68 7c 7f 13 f0       	push   $0xf0137f7c
f010e42d:	e8 d3 1d ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e432:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e439:	e9 bd 00 00 00       	jmp    f010e4fb <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e43e:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e447:	89 d0                	mov    %edx,%eax
f010e449:	c1 e0 02             	shl    $0x2,%eax
f010e44c:	01 d0                	add    %edx,%eax
f010e44e:	01 c0                	add    %eax,%eax
f010e450:	01 d0                	add    %edx,%eax
f010e452:	01 c0                	add    %eax,%eax
f010e454:	01 d0                	add    %edx,%eax
f010e456:	c1 e0 02             	shl    $0x2,%eax
f010e459:	01 c8                	add    %ecx,%eax
f010e45b:	83 ec 04             	sub    $0x4,%esp
f010e45e:	6a 5c                	push   $0x5c
f010e460:	6a 00                	push   $0x0
f010e462:	50                   	push   %eax
f010e463:	e8 35 33 02 00       	call   f013179d <memset>
f010e468:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e46b:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e471:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e474:	89 d0                	mov    %edx,%eax
f010e476:	c1 e0 02             	shl    $0x2,%eax
f010e479:	01 d0                	add    %edx,%eax
f010e47b:	01 c0                	add    %eax,%eax
f010e47d:	01 d0                	add    %edx,%eax
f010e47f:	01 c0                	add    %eax,%eax
f010e481:	01 d0                	add    %edx,%eax
f010e483:	c1 e0 02             	shl    $0x2,%eax
f010e486:	01 c8                	add    %ecx,%eax
f010e488:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e48c:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e492:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e495:	89 d0                	mov    %edx,%eax
f010e497:	c1 e0 02             	shl    $0x2,%eax
f010e49a:	01 d0                	add    %edx,%eax
f010e49c:	01 c0                	add    %eax,%eax
f010e49e:	01 d0                	add    %edx,%eax
f010e4a0:	01 c0                	add    %eax,%eax
f010e4a2:	01 d0                	add    %edx,%eax
f010e4a4:	c1 e0 02             	shl    $0x2,%eax
f010e4a7:	01 c8                	add    %ecx,%eax
f010e4a9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e4b0:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e4b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4b9:	89 d0                	mov    %edx,%eax
f010e4bb:	c1 e0 02             	shl    $0x2,%eax
f010e4be:	01 d0                	add    %edx,%eax
f010e4c0:	01 c0                	add    %eax,%eax
f010e4c2:	01 d0                	add    %edx,%eax
f010e4c4:	01 c0                	add    %eax,%eax
f010e4c6:	01 d0                	add    %edx,%eax
f010e4c8:	c1 e0 02             	shl    $0x2,%eax
f010e4cb:	01 c8                	add    %ecx,%eax
f010e4cd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e4d4:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e4da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4dd:	89 d0                	mov    %edx,%eax
f010e4df:	c1 e0 02             	shl    $0x2,%eax
f010e4e2:	01 d0                	add    %edx,%eax
f010e4e4:	01 c0                	add    %eax,%eax
f010e4e6:	01 d0                	add    %edx,%eax
f010e4e8:	01 c0                	add    %eax,%eax
f010e4ea:	01 d0                	add    %edx,%eax
f010e4ec:	c1 e0 02             	shl    $0x2,%eax
f010e4ef:	01 c8                	add    %ecx,%eax
f010e4f1:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e4f8:	ff 45 f4             	incl   -0xc(%ebp)
f010e4fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4fe:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e503:	39 c2                	cmp    %eax,%edx
f010e505:	0f 82 33 ff ff ff    	jb     f010e43e <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e50b:	90                   	nop
f010e50c:	c9                   	leave  
f010e50d:	c3                   	ret    

f010e50e <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e50e:	55                   	push   %ebp
f010e50f:	89 e5                	mov    %esp,%ebp
f010e511:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e514:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e51b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e522:	eb 2f                	jmp    f010e553 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e524:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e52a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e52d:	89 d0                	mov    %edx,%eax
f010e52f:	c1 e0 02             	shl    $0x2,%eax
f010e532:	01 d0                	add    %edx,%eax
f010e534:	01 c0                	add    %eax,%eax
f010e536:	01 d0                	add    %edx,%eax
f010e538:	01 c0                	add    %eax,%eax
f010e53a:	01 d0                	add    %edx,%eax
f010e53c:	c1 e0 02             	shl    $0x2,%eax
f010e53f:	01 c8                	add    %ecx,%eax
f010e541:	8a 40 58             	mov    0x58(%eax),%al
f010e544:	84 c0                	test   %al,%al
f010e546:	74 08                	je     f010e550 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e548:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e54b:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e54e:	eb 0f                	jmp    f010e55f <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e550:	ff 45 f0             	incl   -0x10(%ebp)
f010e553:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e556:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e55b:	39 c2                	cmp    %eax,%edx
f010e55d:	72 c5                	jb     f010e524 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e55f:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e563:	75 4d                	jne    f010e5b2 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e565:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e56a:	01 c0                	add    %eax,%eax
f010e56c:	89 c2                	mov    %eax,%edx
f010e56e:	a1 0c ed 88 f0       	mov    0xf088ed0c,%eax
f010e573:	83 ec 08             	sub    $0x8,%esp
f010e576:	52                   	push   %edx
f010e577:	50                   	push   %eax
f010e578:	e8 cf 98 ff ff       	call   f0107e4c <krealloc>
f010e57d:	83 c4 10             	add    $0x10,%esp
f010e580:	a3 0c ed 88 f0       	mov    %eax,0xf088ed0c
			if (semaphores == NULL)
f010e585:	a1 0c ed 88 f0       	mov    0xf088ed0c,%eax
f010e58a:	85 c0                	test   %eax,%eax
f010e58c:	75 10                	jne    f010e59e <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e58e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e591:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e597:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e59c:	eb 5b                	jmp    f010e5f9 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e59e:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e5a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e5a6:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e5ab:	01 c0                	add    %eax,%eax
f010e5ad:	a3 b4 ec 88 f0       	mov    %eax,0xf088ecb4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e5b2:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e5b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5bb:	89 d0                	mov    %edx,%eax
f010e5bd:	c1 e0 02             	shl    $0x2,%eax
f010e5c0:	01 d0                	add    %edx,%eax
f010e5c2:	01 c0                	add    %eax,%eax
f010e5c4:	01 d0                	add    %edx,%eax
f010e5c6:	01 c0                	add    %eax,%eax
f010e5c8:	01 d0                	add    %edx,%eax
f010e5ca:	c1 e0 02             	shl    $0x2,%eax
f010e5cd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e5d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5d3:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e5d5:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e5db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5de:	89 d0                	mov    %edx,%eax
f010e5e0:	c1 e0 02             	shl    $0x2,%eax
f010e5e3:	01 d0                	add    %edx,%eax
f010e5e5:	01 c0                	add    %eax,%eax
f010e5e7:	01 d0                	add    %edx,%eax
f010e5e9:	01 c0                	add    %eax,%eax
f010e5eb:	01 d0                	add    %edx,%eax
f010e5ed:	c1 e0 02             	shl    $0x2,%eax
f010e5f0:	01 c8                	add    %ecx,%eax
f010e5f2:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e5f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e5f9:	c9                   	leave  
f010e5fa:	c3                   	ret    

f010e5fb <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e5fb:	55                   	push   %ebp
f010e5fc:	89 e5                	mov    %esp,%ebp
f010e5fe:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e601:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e608:	e9 84 00 00 00       	jmp    f010e691 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e60d:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e613:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e616:	89 d0                	mov    %edx,%eax
f010e618:	c1 e0 02             	shl    $0x2,%eax
f010e61b:	01 d0                	add    %edx,%eax
f010e61d:	01 c0                	add    %eax,%eax
f010e61f:	01 d0                	add    %edx,%eax
f010e621:	01 c0                	add    %eax,%eax
f010e623:	01 d0                	add    %edx,%eax
f010e625:	c1 e0 02             	shl    $0x2,%eax
f010e628:	01 c8                	add    %ecx,%eax
f010e62a:	8a 40 58             	mov    0x58(%eax),%al
f010e62d:	84 c0                	test   %al,%al
f010e62f:	75 5c                	jne    f010e68d <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e631:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e637:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e63a:	89 d0                	mov    %edx,%eax
f010e63c:	c1 e0 02             	shl    $0x2,%eax
f010e63f:	01 d0                	add    %edx,%eax
f010e641:	01 c0                	add    %eax,%eax
f010e643:	01 d0                	add    %edx,%eax
f010e645:	01 c0                	add    %eax,%eax
f010e647:	01 d0                	add    %edx,%eax
f010e649:	c1 e0 02             	shl    $0x2,%eax
f010e64c:	01 c8                	add    %ecx,%eax
f010e64e:	8b 00                	mov    (%eax),%eax
f010e650:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e653:	75 39                	jne    f010e68e <get_semaphore_object_ID+0x93>
f010e655:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e65b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e65e:	89 d0                	mov    %edx,%eax
f010e660:	c1 e0 02             	shl    $0x2,%eax
f010e663:	01 d0                	add    %edx,%eax
f010e665:	01 c0                	add    %eax,%eax
f010e667:	01 d0                	add    %edx,%eax
f010e669:	01 c0                	add    %eax,%eax
f010e66b:	01 d0                	add    %edx,%eax
f010e66d:	c1 e0 02             	shl    $0x2,%eax
f010e670:	01 c8                	add    %ecx,%eax
f010e672:	83 c0 04             	add    $0x4,%eax
f010e675:	83 ec 08             	sub    $0x8,%esp
f010e678:	50                   	push   %eax
f010e679:	ff 75 0c             	pushl  0xc(%ebp)
f010e67c:	e8 3a 30 02 00       	call   f01316bb <strcmp>
f010e681:	83 c4 10             	add    $0x10,%esp
f010e684:	85 c0                	test   %eax,%eax
f010e686:	75 06                	jne    f010e68e <get_semaphore_object_ID+0x93>
		{
			return i;
f010e688:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e68b:	eb 19                	jmp    f010e6a6 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e68d:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e68e:	ff 45 f4             	incl   -0xc(%ebp)
f010e691:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e694:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e699:	39 c2                	cmp    %eax,%edx
f010e69b:	0f 82 6c ff ff ff    	jb     f010e60d <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e6a1:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e6a6:	c9                   	leave  
f010e6a7:	c3                   	ret    

f010e6a8 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e6a8:	55                   	push   %ebp
f010e6a9:	89 e5                	mov    %esp,%ebp
f010e6ab:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e6ae:	a1 b4 ec 88 f0       	mov    0xf088ecb4,%eax
f010e6b3:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e6b6:	72 0a                	jb     f010e6c2 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e6b8:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e6bd:	e9 bf 00 00 00       	jmp    f010e781 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e6c2:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e6c8:	8b 55 08             	mov    0x8(%ebp),%edx
f010e6cb:	89 d0                	mov    %edx,%eax
f010e6cd:	c1 e0 02             	shl    $0x2,%eax
f010e6d0:	01 d0                	add    %edx,%eax
f010e6d2:	01 c0                	add    %eax,%eax
f010e6d4:	01 d0                	add    %edx,%eax
f010e6d6:	01 c0                	add    %eax,%eax
f010e6d8:	01 d0                	add    %edx,%eax
f010e6da:	c1 e0 02             	shl    $0x2,%eax
f010e6dd:	01 c8                	add    %ecx,%eax
f010e6df:	83 ec 04             	sub    $0x4,%esp
f010e6e2:	6a 5c                	push   $0x5c
f010e6e4:	6a 00                	push   $0x0
f010e6e6:	50                   	push   %eax
f010e6e7:	e8 b1 30 02 00       	call   f013179d <memset>
f010e6ec:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e6ef:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e6f5:	8b 55 08             	mov    0x8(%ebp),%edx
f010e6f8:	89 d0                	mov    %edx,%eax
f010e6fa:	c1 e0 02             	shl    $0x2,%eax
f010e6fd:	01 d0                	add    %edx,%eax
f010e6ff:	01 c0                	add    %eax,%eax
f010e701:	01 d0                	add    %edx,%eax
f010e703:	01 c0                	add    %eax,%eax
f010e705:	01 d0                	add    %edx,%eax
f010e707:	c1 e0 02             	shl    $0x2,%eax
f010e70a:	01 c8                	add    %ecx,%eax
f010e70c:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e710:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e716:	8b 55 08             	mov    0x8(%ebp),%edx
f010e719:	89 d0                	mov    %edx,%eax
f010e71b:	c1 e0 02             	shl    $0x2,%eax
f010e71e:	01 d0                	add    %edx,%eax
f010e720:	01 c0                	add    %eax,%eax
f010e722:	01 d0                	add    %edx,%eax
f010e724:	01 c0                	add    %eax,%eax
f010e726:	01 d0                	add    %edx,%eax
f010e728:	c1 e0 02             	shl    $0x2,%eax
f010e72b:	01 c8                	add    %ecx,%eax
f010e72d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e734:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e73a:	8b 55 08             	mov    0x8(%ebp),%edx
f010e73d:	89 d0                	mov    %edx,%eax
f010e73f:	c1 e0 02             	shl    $0x2,%eax
f010e742:	01 d0                	add    %edx,%eax
f010e744:	01 c0                	add    %eax,%eax
f010e746:	01 d0                	add    %edx,%eax
f010e748:	01 c0                	add    %eax,%eax
f010e74a:	01 d0                	add    %edx,%eax
f010e74c:	c1 e0 02             	shl    $0x2,%eax
f010e74f:	01 c8                	add    %ecx,%eax
f010e751:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e758:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e75e:	8b 55 08             	mov    0x8(%ebp),%edx
f010e761:	89 d0                	mov    %edx,%eax
f010e763:	c1 e0 02             	shl    $0x2,%eax
f010e766:	01 d0                	add    %edx,%eax
f010e768:	01 c0                	add    %eax,%eax
f010e76a:	01 d0                	add    %edx,%eax
f010e76c:	01 c0                	add    %eax,%eax
f010e76e:	01 d0                	add    %edx,%eax
f010e770:	c1 e0 02             	shl    $0x2,%eax
f010e773:	01 c8                	add    %ecx,%eax
f010e775:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e77c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e781:	c9                   	leave  
f010e782:	c3                   	ret    

f010e783 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e783:	55                   	push   %ebp
f010e784:	89 e5                	mov    %esp,%ebp
f010e786:	83 ec 18             	sub    $0x18,%esp
	//Return:
	//	a) SemaphoreID (its index in the array) if succeed
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full
	//change this "return" according to your answer
	struct Semaphore *new_semaphore=NULL;
f010e789:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		int ret_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e790:	83 ec 08             	sub    $0x8,%esp
f010e793:	ff 75 0c             	pushl  0xc(%ebp)
f010e796:	ff 75 08             	pushl  0x8(%ebp)
f010e799:	e8 5d fe ff ff       	call   f010e5fb <get_semaphore_object_ID>
f010e79e:	83 c4 10             	add    $0x10,%esp
f010e7a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret_of_get ==E_SEMAPHORE_NOT_EXISTS)
f010e7a4:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010e7a8:	75 43                	jne    f010e7ed <createSemaphore+0x6a>
		{
			int result_of_allocation=allocate_semaphore_object(&new_semaphore);
f010e7aa:	83 ec 0c             	sub    $0xc,%esp
f010e7ad:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010e7b0:	50                   	push   %eax
f010e7b1:	e8 58 fd ff ff       	call   f010e50e <allocate_semaphore_object>
f010e7b6:	83 c4 10             	add    $0x10,%esp
f010e7b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if(result_of_allocation!=E_NO_SEMAPHORE)
f010e7bc:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010e7c0:	74 32                	je     f010e7f4 <createSemaphore+0x71>
			{   //*new_semaphore->name=*semaphoreName;
				strcpy(new_semaphore->name,semaphoreName);
f010e7c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e7c5:	83 c0 04             	add    $0x4,%eax
f010e7c8:	83 ec 08             	sub    $0x8,%esp
f010e7cb:	ff 75 0c             	pushl  0xc(%ebp)
f010e7ce:	50                   	push   %eax
f010e7cf:	e8 2a 2e 02 00       	call   f01315fe <strcpy>
f010e7d4:	83 c4 10             	add    $0x10,%esp
				new_semaphore->ownerID=ownerEnvID;
f010e7d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e7da:	8b 55 08             	mov    0x8(%ebp),%edx
f010e7dd:	89 10                	mov    %edx,(%eax)
				new_semaphore->value=initialValue;
f010e7df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e7e2:	8b 55 10             	mov    0x10(%ebp),%edx
f010e7e5:	89 50 54             	mov    %edx,0x54(%eax)
				return result_of_allocation;
f010e7e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e7eb:	eb 0c                	jmp    f010e7f9 <createSemaphore+0x76>
			}

		}
		else
		{
			return E_SEMAPHORE_EXISTS;
f010e7ed:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010e7f2:	eb 05                	jmp    f010e7f9 <createSemaphore+0x76>
		}

		return E_NO_SEMAPHORE;
f010e7f4:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
f010e7f9:	c9                   	leave  
f010e7fa:	c3                   	ret    

f010e7fb <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e7fb:	55                   	push   %ebp
f010e7fc:	89 e5                	mov    %esp,%ebp
f010e7fe:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010e801:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f010e806:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//		a) adding it to semaphore queue		[refer to helper functions in doc]
	//		b) changing its status to ENV_BLOCKED
	//		c) set curenv with NULL
	//	4) Call "fos_scheduler()" to continue running the remaining envs

	int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e809:	83 ec 08             	sub    $0x8,%esp
f010e80c:	ff 75 0c             	pushl  0xc(%ebp)
f010e80f:	ff 75 08             	pushl  0x8(%ebp)
f010e812:	e8 e4 fd ff ff       	call   f010e5fb <get_semaphore_object_ID>
f010e817:	83 c4 10             	add    $0x10,%esp
f010e81a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		semaphores[return_of_get].value--;
f010e81d:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e823:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e826:	89 d0                	mov    %edx,%eax
f010e828:	c1 e0 02             	shl    $0x2,%eax
f010e82b:	01 d0                	add    %edx,%eax
f010e82d:	01 c0                	add    %eax,%eax
f010e82f:	01 d0                	add    %edx,%eax
f010e831:	01 c0                	add    %eax,%eax
f010e833:	01 d0                	add    %edx,%eax
f010e835:	c1 e0 02             	shl    $0x2,%eax
f010e838:	01 c8                	add    %ecx,%eax
f010e83a:	8b 50 54             	mov    0x54(%eax),%edx
f010e83d:	4a                   	dec    %edx
f010e83e:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<0)
f010e841:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e847:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e84a:	89 d0                	mov    %edx,%eax
f010e84c:	c1 e0 02             	shl    $0x2,%eax
f010e84f:	01 d0                	add    %edx,%eax
f010e851:	01 c0                	add    %eax,%eax
f010e853:	01 d0                	add    %edx,%eax
f010e855:	01 c0                	add    %eax,%eax
f010e857:	01 d0                	add    %edx,%eax
f010e859:	c1 e0 02             	shl    $0x2,%eax
f010e85c:	01 c8                	add    %ecx,%eax
f010e85e:	8b 40 54             	mov    0x54(%eax),%eax
f010e861:	85 c0                	test   %eax,%eax
f010e863:	79 43                	jns    f010e8a8 <waitSemaphore+0xad>
		{
			enqueue(&semaphores[return_of_get].env_queue,myenv);
f010e865:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e86b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e86e:	89 d0                	mov    %edx,%eax
f010e870:	c1 e0 02             	shl    $0x2,%eax
f010e873:	01 d0                	add    %edx,%eax
f010e875:	01 c0                	add    %eax,%eax
f010e877:	01 d0                	add    %edx,%eax
f010e879:	01 c0                	add    %eax,%eax
f010e87b:	01 d0                	add    %edx,%eax
f010e87d:	c1 e0 02             	shl    $0x2,%eax
f010e880:	01 c8                	add    %ecx,%eax
f010e882:	83 c0 44             	add    $0x44,%eax
f010e885:	83 ec 08             	sub    $0x8,%esp
f010e888:	ff 75 f4             	pushl  -0xc(%ebp)
f010e88b:	50                   	push   %eax
f010e88c:	e8 0c 5c ff ff       	call   f010449d <enqueue>
f010e891:	83 c4 10             	add    $0x10,%esp
			myenv->env_status=ENV_BLOCKED;
f010e894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e897:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
			//curenv->env_status=ENV_BLOCKED;
			curenv=NULL;
f010e89e:	c7 05 f4 e3 88 f0 00 	movl   $0x0,0xf088e3f4
f010e8a5:	00 00 00 
		}
		fos_scheduler();
f010e8a8:	e8 79 5e ff ff       	call   f0104726 <fos_scheduler>

f010e8ad <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e8ad:	55                   	push   %ebp
f010e8ae:	89 e5                	mov    %esp,%ebp
f010e8b0:	83 ec 18             	sub    $0x18,%esp
	//		c) changing its status to ENV_READY


	    //uint32 val=0;
		struct Env* env;
		int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e8b3:	83 ec 08             	sub    $0x8,%esp
f010e8b6:	ff 75 0c             	pushl  0xc(%ebp)
f010e8b9:	ff 75 08             	pushl  0x8(%ebp)
f010e8bc:	e8 3a fd ff ff       	call   f010e5fb <get_semaphore_object_ID>
f010e8c1:	83 c4 10             	add    $0x10,%esp
f010e8c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		semaphores[return_of_get].value++;
f010e8c7:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e8cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8d0:	89 d0                	mov    %edx,%eax
f010e8d2:	c1 e0 02             	shl    $0x2,%eax
f010e8d5:	01 d0                	add    %edx,%eax
f010e8d7:	01 c0                	add    %eax,%eax
f010e8d9:	01 d0                	add    %edx,%eax
f010e8db:	01 c0                	add    %eax,%eax
f010e8dd:	01 d0                	add    %edx,%eax
f010e8df:	c1 e0 02             	shl    $0x2,%eax
f010e8e2:	01 c8                	add    %ecx,%eax
f010e8e4:	8b 50 54             	mov    0x54(%eax),%edx
f010e8e7:	42                   	inc    %edx
f010e8e8:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<=0)
f010e8eb:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e8f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8f4:	89 d0                	mov    %edx,%eax
f010e8f6:	c1 e0 02             	shl    $0x2,%eax
f010e8f9:	01 d0                	add    %edx,%eax
f010e8fb:	01 c0                	add    %eax,%eax
f010e8fd:	01 d0                	add    %edx,%eax
f010e8ff:	01 c0                	add    %eax,%eax
f010e901:	01 d0                	add    %edx,%eax
f010e903:	c1 e0 02             	shl    $0x2,%eax
f010e906:	01 c8                	add    %ecx,%eax
f010e908:	8b 40 54             	mov    0x54(%eax),%eax
f010e90b:	85 c0                	test   %eax,%eax
f010e90d:	7f 47                	jg     f010e956 <signalSemaphore+0xa9>
		{
			env=dequeue(&semaphores[return_of_get].env_queue);
f010e90f:	8b 0d 0c ed 88 f0    	mov    0xf088ed0c,%ecx
f010e915:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e918:	89 d0                	mov    %edx,%eax
f010e91a:	c1 e0 02             	shl    $0x2,%eax
f010e91d:	01 d0                	add    %edx,%eax
f010e91f:	01 c0                	add    %eax,%eax
f010e921:	01 d0                	add    %edx,%eax
f010e923:	01 c0                	add    %eax,%eax
f010e925:	01 d0                	add    %edx,%eax
f010e927:	c1 e0 02             	shl    $0x2,%eax
f010e92a:	01 c8                	add    %ecx,%eax
f010e92c:	83 c0 44             	add    $0x44,%eax
f010e92f:	83 ec 0c             	sub    $0xc,%esp
f010e932:	50                   	push   %eax
f010e933:	e8 f6 5b ff ff       	call   f010452e <dequeue>
f010e938:	83 c4 10             	add    $0x10,%esp
f010e93b:	89 45 f0             	mov    %eax,-0x10(%ebp)
			sched_insert_ready(env);
f010e93e:	83 ec 0c             	sub    $0xc,%esp
f010e941:	ff 75 f0             	pushl  -0x10(%ebp)
f010e944:	e8 03 60 ff ff       	call   f010494c <sched_insert_ready>
f010e949:	83 c4 10             	add    $0x10,%esp
			env->env_status=ENV_READY;
f010e94c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e94f:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)





}
f010e956:	90                   	nop
f010e957:	c9                   	leave  
f010e958:	c3                   	ret    

f010e959 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e959:	55                   	push   %ebp
f010e95a:	89 e5                	mov    %esp,%ebp
f010e95c:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e95f:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e966:	83 ec 0c             	sub    $0xc,%esp
f010e969:	ff 75 ec             	pushl  -0x14(%ebp)
f010e96c:	e8 a8 37 02 00       	call   f0132119 <initialize_MemBlocksList>
f010e971:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e974:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010e979:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e97c:	74 17                	je     f010e995 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e97e:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010e983:	50                   	push   %eax
f010e984:	68 a0 7f 13 f0       	push   $0xf0137fa0
f010e989:	6a 1f                	push   $0x1f
f010e98b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010e990:	e8 70 18 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e995:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010e99a:	85 c0                	test   %eax,%eax
f010e99c:	74 17                	je     f010e9b5 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e99e:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010e9a3:	50                   	push   %eax
f010e9a4:	68 18 80 13 f0       	push   $0xf0138018
f010e9a9:	6a 26                	push   $0x26
f010e9ab:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010e9b0:	e8 50 18 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e9b5:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010e9ba:	85 c0                	test   %eax,%eax
f010e9bc:	74 17                	je     f010e9d5 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e9be:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010e9c3:	50                   	push   %eax
f010e9c4:	68 68 80 13 f0       	push   $0xf0138068
f010e9c9:	6a 2c                	push   $0x2c
f010e9cb:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010e9d0:	e8 30 18 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e9d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e9dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e9e3:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f010e9e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e9eb:	eb 29                	jmp    f010ea16 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e9ed:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e9f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e9f3:	8b 50 0c             	mov    0xc(%eax),%edx
f010e9f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e9f9:	8b 40 08             	mov    0x8(%eax),%eax
f010e9fc:	83 ec 04             	sub    $0x4,%esp
f010e9ff:	52                   	push   %edx
f010ea00:	50                   	push   %eax
f010ea01:	68 b8 80 13 f0       	push   $0xf01380b8
f010ea06:	e8 03 23 ff ff       	call   f0100d0e <cprintf>
f010ea0b:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ea0e:	a1 a0 ed 88 f0       	mov    0xf088eda0,%eax
f010ea13:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ea16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ea1a:	74 07                	je     f010ea23 <test_initialize_MemBlocksList+0xca>
f010ea1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ea1f:	8b 00                	mov    (%eax),%eax
f010ea21:	eb 05                	jmp    f010ea28 <test_initialize_MemBlocksList+0xcf>
f010ea23:	b8 00 00 00 00       	mov    $0x0,%eax
f010ea28:	a3 a0 ed 88 f0       	mov    %eax,0xf088eda0
f010ea2d:	a1 a0 ed 88 f0       	mov    0xf088eda0,%eax
f010ea32:	85 c0                	test   %eax,%eax
f010ea34:	75 b7                	jne    f010e9ed <test_initialize_MemBlocksList+0x94>
f010ea36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ea3a:	75 b1                	jne    f010e9ed <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010ea3c:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ea41:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea44:	74 14                	je     f010ea5a <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010ea46:	83 ec 04             	sub    $0x4,%esp
f010ea49:	68 d8 80 13 f0       	push   $0xf01380d8
f010ea4e:	6a 38                	push   $0x38
f010ea50:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ea55:	e8 ab 17 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010ea5a:	83 ec 0c             	sub    $0xc,%esp
f010ea5d:	68 30 81 13 f0       	push   $0xf0138130
f010ea62:	e8 a7 22 ff ff       	call   f0100d0e <cprintf>
f010ea67:	83 c4 10             	add    $0x10,%esp
}
f010ea6a:	90                   	nop
f010ea6b:	c9                   	leave  
f010ea6c:	c3                   	ret    

f010ea6d <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010ea6d:	55                   	push   %ebp
f010ea6e:	89 e5                	mov    %esp,%ebp
f010ea70:	57                   	push   %edi
f010ea71:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010ea77:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ea7e:	83 ec 0c             	sub    $0xc,%esp
f010ea81:	ff 75 f4             	pushl  -0xc(%ebp)
f010ea84:	e8 90 36 02 00       	call   f0132119 <initialize_MemBlocksList>
f010ea89:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ea8c:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010ea93:	00 00 00 
f010ea96:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010ea9d:	00 00 00 
f010eaa0:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010eaa7:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010eaaa:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010eab1:	00 00 00 
f010eab4:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010eabb:	00 00 00 
f010eabe:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010eac5:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010eac8:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010eacb:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ead0:	b8 00 00 00 00       	mov    $0x0,%eax
f010ead5:	89 d7                	mov    %edx,%edi
f010ead7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010ead9:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010eadc:	b9 05 00 00 00       	mov    $0x5,%ecx
f010eae1:	b8 00 00 00 00       	mov    $0x0,%eax
f010eae6:	89 d7                	mov    %edx,%edi
f010eae8:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010eaea:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010eaf1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010eaf8:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010eaff:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010eb06:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb09:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010eb0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eb0f:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010eb12:	83 ec 0c             	sub    $0xc,%esp
f010eb15:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010eb18:	50                   	push   %eax
f010eb19:	e8 30 37 02 00       	call   f013224e <insert_sorted_allocList>
f010eb1e:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010eb21:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010eb28:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010eb2d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb30:	74 14                	je     f010eb46 <test_insert_sorted_allocList+0xd9>
f010eb32:	83 ec 04             	sub    $0x4,%esp
f010eb35:	68 7c 81 13 f0       	push   $0xf013817c
f010eb3a:	6a 56                	push   $0x56
f010eb3c:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010eb41:	e8 bf 16 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010eb46:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010eb4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eb4e:	74 14                	je     f010eb64 <test_insert_sorted_allocList+0xf7>
f010eb50:	83 ec 04             	sub    $0x4,%esp
f010eb53:	68 c8 81 13 f0       	push   $0xf01381c8
f010eb58:	6a 59                	push   $0x59
f010eb5a:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010eb5f:	e8 a1 16 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eb64:	83 ec 0c             	sub    $0xc,%esp
f010eb67:	ff 75 f0             	pushl  -0x10(%ebp)
f010eb6a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eb6d:	50                   	push   %eax
f010eb6e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eb71:	50                   	push   %eax
f010eb72:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eb75:	50                   	push   %eax
f010eb76:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010eb7b:	e8 7d 26 00 00       	call   f01111fd <check_list_data>
f010eb80:	83 c4 20             	add    $0x20,%esp
f010eb83:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eb86:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eb8a:	74 14                	je     f010eba0 <test_insert_sorted_allocList+0x133>
f010eb8c:	83 ec 04             	sub    $0x4,%esp
f010eb8f:	68 18 82 13 f0       	push   $0xf0138218
f010eb94:	6a 5d                	push   $0x5d
f010eb96:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010eb9b:	e8 65 16 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eba0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eba3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eba6:	74 14                	je     f010ebbc <test_insert_sorted_allocList+0x14f>
f010eba8:	83 ec 04             	sub    $0x4,%esp
f010ebab:	68 68 82 13 f0       	push   $0xf0138268
f010ebb0:	6a 5e                	push   $0x5e
f010ebb2:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ebb7:	e8 49 16 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010ebbc:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010ebc3:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010ebca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ebcd:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010ebd0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ebd3:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010ebd6:	83 ec 0c             	sub    $0xc,%esp
f010ebd9:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ebdc:	50                   	push   %eax
f010ebdd:	e8 6c 36 02 00       	call   f013224e <insert_sorted_allocList>
f010ebe2:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010ebe5:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ebec:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ebf1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ebf4:	74 14                	je     f010ec0a <test_insert_sorted_allocList+0x19d>
f010ebf6:	83 ec 04             	sub    $0x4,%esp
f010ebf9:	68 7c 81 13 f0       	push   $0xf013817c
f010ebfe:	6a 6d                	push   $0x6d
f010ec00:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ec05:	e8 fb 15 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ec0a:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ec0f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec12:	74 14                	je     f010ec28 <test_insert_sorted_allocList+0x1bb>
f010ec14:	83 ec 04             	sub    $0x4,%esp
f010ec17:	68 c8 81 13 f0       	push   $0xf01381c8
f010ec1c:	6a 70                	push   $0x70
f010ec1e:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ec23:	e8 dd 15 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ec28:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ec2f:	83 ec 0c             	sub    $0xc,%esp
f010ec32:	ff 75 f0             	pushl  -0x10(%ebp)
f010ec35:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ec38:	50                   	push   %eax
f010ec39:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ec3c:	50                   	push   %eax
f010ec3d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ec40:	50                   	push   %eax
f010ec41:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010ec46:	e8 b2 25 00 00       	call   f01111fd <check_list_data>
f010ec4b:	83 c4 20             	add    $0x20,%esp
f010ec4e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ec51:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ec55:	74 14                	je     f010ec6b <test_insert_sorted_allocList+0x1fe>
f010ec57:	83 ec 04             	sub    $0x4,%esp
f010ec5a:	68 18 82 13 f0       	push   $0xf0138218
f010ec5f:	6a 75                	push   $0x75
f010ec61:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ec66:	e8 9a 15 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ec6b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ec6e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec71:	74 14                	je     f010ec87 <test_insert_sorted_allocList+0x21a>
f010ec73:	83 ec 04             	sub    $0x4,%esp
f010ec76:	68 68 82 13 f0       	push   $0xf0138268
f010ec7b:	6a 76                	push   $0x76
f010ec7d:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ec82:	e8 7e 15 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010ec87:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010ec8e:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010ec95:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ec98:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010ec9b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ec9e:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010eca1:	83 ec 0c             	sub    $0xc,%esp
f010eca4:	8d 45 90             	lea    -0x70(%ebp),%eax
f010eca7:	50                   	push   %eax
f010eca8:	e8 a1 35 02 00       	call   f013224e <insert_sorted_allocList>
f010ecad:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010ecb0:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ecb7:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ecbc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecbf:	74 17                	je     f010ecd8 <test_insert_sorted_allocList+0x26b>
f010ecc1:	83 ec 04             	sub    $0x4,%esp
f010ecc4:	68 7c 81 13 f0       	push   $0xf013817c
f010ecc9:	68 85 00 00 00       	push   $0x85
f010ecce:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ecd3:	e8 2d 15 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010ecd8:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ecdd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ece0:	74 17                	je     f010ecf9 <test_insert_sorted_allocList+0x28c>
f010ece2:	83 ec 04             	sub    $0x4,%esp
f010ece5:	68 b4 82 13 f0       	push   $0xf01382b4
f010ecea:	68 88 00 00 00       	push   $0x88
f010ecef:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ecf4:	e8 0c 15 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ecf9:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ed00:	83 ec 0c             	sub    $0xc,%esp
f010ed03:	ff 75 f0             	pushl  -0x10(%ebp)
f010ed06:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ed09:	50                   	push   %eax
f010ed0a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ed0d:	50                   	push   %eax
f010ed0e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ed11:	50                   	push   %eax
f010ed12:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010ed17:	e8 e1 24 00 00       	call   f01111fd <check_list_data>
f010ed1c:	83 c4 20             	add    $0x20,%esp
f010ed1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ed22:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ed26:	74 17                	je     f010ed3f <test_insert_sorted_allocList+0x2d2>
f010ed28:	83 ec 04             	sub    $0x4,%esp
f010ed2b:	68 18 82 13 f0       	push   $0xf0138218
f010ed30:	68 8d 00 00 00       	push   $0x8d
f010ed35:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ed3a:	e8 c6 14 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ed3f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ed42:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed45:	74 17                	je     f010ed5e <test_insert_sorted_allocList+0x2f1>
f010ed47:	83 ec 04             	sub    $0x4,%esp
f010ed4a:	68 68 82 13 f0       	push   $0xf0138268
f010ed4f:	68 8e 00 00 00       	push   $0x8e
f010ed54:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ed59:	e8 a7 14 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010ed5e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010ed65:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010ed6c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ed6f:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010ed72:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed75:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010ed78:	83 ec 0c             	sub    $0xc,%esp
f010ed7b:	8d 45 80             	lea    -0x80(%ebp),%eax
f010ed7e:	50                   	push   %eax
f010ed7f:	e8 ca 34 02 00       	call   f013224e <insert_sorted_allocList>
f010ed84:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010ed87:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ed8e:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ed93:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed96:	74 17                	je     f010edaf <test_insert_sorted_allocList+0x342>
f010ed98:	83 ec 04             	sub    $0x4,%esp
f010ed9b:	68 7c 81 13 f0       	push   $0xf013817c
f010eda0:	68 9c 00 00 00       	push   $0x9c
f010eda5:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010edaa:	e8 56 14 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010edaf:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010edb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010edb7:	74 17                	je     f010edd0 <test_insert_sorted_allocList+0x363>
f010edb9:	83 ec 04             	sub    $0x4,%esp
f010edbc:	68 c8 81 13 f0       	push   $0xf01381c8
f010edc1:	68 9f 00 00 00       	push   $0x9f
f010edc6:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010edcb:	e8 35 14 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010edd0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010edd7:	83 ec 0c             	sub    $0xc,%esp
f010edda:	ff 75 f0             	pushl  -0x10(%ebp)
f010eddd:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ede0:	50                   	push   %eax
f010ede1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ede4:	50                   	push   %eax
f010ede5:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ede8:	50                   	push   %eax
f010ede9:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010edee:	e8 0a 24 00 00       	call   f01111fd <check_list_data>
f010edf3:	83 c4 20             	add    $0x20,%esp
f010edf6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010edf9:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010edfd:	74 17                	je     f010ee16 <test_insert_sorted_allocList+0x3a9>
f010edff:	83 ec 04             	sub    $0x4,%esp
f010ee02:	68 18 82 13 f0       	push   $0xf0138218
f010ee07:	68 a4 00 00 00       	push   $0xa4
f010ee0c:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ee11:	e8 ef 13 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ee16:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ee19:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee1c:	74 17                	je     f010ee35 <test_insert_sorted_allocList+0x3c8>
f010ee1e:	83 ec 04             	sub    $0x4,%esp
f010ee21:	68 68 82 13 f0       	push   $0xf0138268
f010ee26:	68 a5 00 00 00       	push   $0xa5
f010ee2b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ee30:	e8 d0 13 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010ee35:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010ee3c:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010ee43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee46:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010ee4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ee4f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010ee55:	83 ec 0c             	sub    $0xc,%esp
f010ee58:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010ee5e:	50                   	push   %eax
f010ee5f:	e8 ea 33 02 00       	call   f013224e <insert_sorted_allocList>
f010ee64:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010ee67:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ee6e:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ee73:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee76:	74 17                	je     f010ee8f <test_insert_sorted_allocList+0x422>
f010ee78:	83 ec 04             	sub    $0x4,%esp
f010ee7b:	68 7c 81 13 f0       	push   $0xf013817c
f010ee80:	68 b3 00 00 00       	push   $0xb3
f010ee85:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ee8a:	e8 76 13 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ee8f:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ee94:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ee97:	74 17                	je     f010eeb0 <test_insert_sorted_allocList+0x443>
f010ee99:	83 ec 04             	sub    $0x4,%esp
f010ee9c:	68 c8 81 13 f0       	push   $0xf01381c8
f010eea1:	68 b6 00 00 00       	push   $0xb6
f010eea6:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010eeab:	e8 55 13 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010eeb0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eeb7:	83 ec 0c             	sub    $0xc,%esp
f010eeba:	ff 75 f0             	pushl  -0x10(%ebp)
f010eebd:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eec0:	50                   	push   %eax
f010eec1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eec4:	50                   	push   %eax
f010eec5:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eec8:	50                   	push   %eax
f010eec9:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010eece:	e8 2a 23 00 00       	call   f01111fd <check_list_data>
f010eed3:	83 c4 20             	add    $0x20,%esp
f010eed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eed9:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eedd:	74 17                	je     f010eef6 <test_insert_sorted_allocList+0x489>
f010eedf:	83 ec 04             	sub    $0x4,%esp
f010eee2:	68 18 82 13 f0       	push   $0xf0138218
f010eee7:	68 bb 00 00 00       	push   $0xbb
f010eeec:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010eef1:	e8 0f 13 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eef6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eef9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eefc:	74 17                	je     f010ef15 <test_insert_sorted_allocList+0x4a8>
f010eefe:	83 ec 04             	sub    $0x4,%esp
f010ef01:	68 68 82 13 f0       	push   $0xf0138268
f010ef06:	68 bc 00 00 00       	push   $0xbc
f010ef0b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ef10:	e8 f0 12 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010ef15:	83 ec 0c             	sub    $0xc,%esp
f010ef18:	68 04 83 13 f0       	push   $0xf0138304
f010ef1d:	e8 ec 1d ff ff       	call   f0100d0e <cprintf>
f010ef22:	83 c4 10             	add    $0x10,%esp
}
f010ef25:	90                   	nop
f010ef26:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010ef29:	c9                   	leave  
f010ef2a:	c3                   	ret    

f010ef2b <test_find_block>:

void test_find_block()
{
f010ef2b:	55                   	push   %ebp
f010ef2c:	89 e5                	mov    %esp,%ebp
f010ef2e:	57                   	push   %edi
f010ef2f:	56                   	push   %esi
f010ef30:	53                   	push   %ebx
f010ef31:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010ef37:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ef3e:	83 ec 0c             	sub    $0xc,%esp
f010ef41:	ff 75 e0             	pushl  -0x20(%ebp)
f010ef44:	e8 d0 31 02 00       	call   f0132119 <initialize_MemBlocksList>
f010ef49:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010ef4c:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010ef53:	00 00 00 
f010ef56:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010ef5d:	00 00 00 
f010ef60:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010ef67:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010ef6a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ef6d:	bb 7c 84 13 f0       	mov    $0xf013847c,%ebx
f010ef72:	ba 06 00 00 00       	mov    $0x6,%edx
f010ef77:	89 c7                	mov    %eax,%edi
f010ef79:	89 de                	mov    %ebx,%esi
f010ef7b:	89 d1                	mov    %edx,%ecx
f010ef7d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010ef7f:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010ef82:	bb 94 84 13 f0       	mov    $0xf0138494,%ebx
f010ef87:	ba 06 00 00 00       	mov    $0x6,%edx
f010ef8c:	89 c7                	mov    %eax,%edi
f010ef8e:	89 de                	mov    %ebx,%esi
f010ef90:	89 d1                	mov    %edx,%ecx
f010ef92:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010ef94:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010ef9b:	00 00 00 
f010ef9e:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010efa5:	00 00 00 
f010efa8:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010efaf:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010efb2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010efb9:	e9 5f 01 00 00       	jmp    f010f11d <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010efbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efc1:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010efc5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efc8:	c1 e2 04             	shl    $0x4,%edx
f010efcb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010efce:	01 da                	add    %ebx,%edx
f010efd0:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010efd6:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010efd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efdb:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010efdf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efe2:	c1 e2 04             	shl    $0x4,%edx
f010efe5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010efe8:	01 f2                	add    %esi,%edx
f010efea:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010eff0:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010eff2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010eff6:	0f 85 92 00 00 00    	jne    f010f08e <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010effc:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f010f001:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f004:	c1 e2 04             	shl    $0x4,%edx
f010f007:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f00a:	01 fa                	add    %edi,%edx
f010f00c:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f012:	89 02                	mov    %eax,(%edx)
f010f014:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f017:	c1 e0 04             	shl    $0x4,%eax
f010f01a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f01d:	01 d8                	add    %ebx,%eax
f010f01f:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f024:	8b 00                	mov    (%eax),%eax
f010f026:	85 c0                	test   %eax,%eax
f010f028:	74 18                	je     f010f042 <test_find_block+0x117>
f010f02a:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f010f02f:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f035:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f038:	c1 e1 04             	shl    $0x4,%ecx
f010f03b:	01 ca                	add    %ecx,%edx
f010f03d:	89 50 04             	mov    %edx,0x4(%eax)
f010f040:	eb 13                	jmp    f010f055 <test_find_block+0x12a>
f010f042:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f048:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f04b:	c1 e2 04             	shl    $0x4,%edx
f010f04e:	01 d0                	add    %edx,%eax
f010f050:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f010f055:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f05b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f05e:	c1 e2 04             	shl    $0x4,%edx
f010f061:	01 d0                	add    %edx,%eax
f010f063:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f010f068:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f06b:	c1 e0 04             	shl    $0x4,%eax
f010f06e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f071:	01 f0                	add    %esi,%eax
f010f073:	2d 98 00 00 00       	sub    $0x98,%eax
f010f078:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f07e:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f083:	40                   	inc    %eax
f010f084:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
f010f089:	e9 8c 00 00 00       	jmp    f010f11a <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f08e:	a1 cc ec 88 f0       	mov    0xf088eccc,%eax
f010f093:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f096:	c1 e2 04             	shl    $0x4,%edx
f010f099:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f09c:	01 fa                	add    %edi,%edx
f010f09e:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f0a4:	89 02                	mov    %eax,(%edx)
f010f0a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0a9:	c1 e0 04             	shl    $0x4,%eax
f010f0ac:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f0af:	01 d8                	add    %ebx,%eax
f010f0b1:	2d 98 00 00 00       	sub    $0x98,%eax
f010f0b6:	8b 00                	mov    (%eax),%eax
f010f0b8:	85 c0                	test   %eax,%eax
f010f0ba:	74 17                	je     f010f0d3 <test_find_block+0x1a8>
f010f0bc:	a1 cc ec 88 f0       	mov    0xf088eccc,%eax
f010f0c1:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f0c7:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f0ca:	c1 e1 04             	shl    $0x4,%ecx
f010f0cd:	01 ca                	add    %ecx,%edx
f010f0cf:	89 10                	mov    %edx,(%eax)
f010f0d1:	eb 13                	jmp    f010f0e6 <test_find_block+0x1bb>
f010f0d3:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f0d9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0dc:	c1 e2 04             	shl    $0x4,%edx
f010f0df:	01 d0                	add    %edx,%eax
f010f0e1:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f010f0e6:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f0ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0ef:	c1 e2 04             	shl    $0x4,%edx
f010f0f2:	01 d0                	add    %edx,%eax
f010f0f4:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f010f0f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0fc:	c1 e0 04             	shl    $0x4,%eax
f010f0ff:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f102:	01 f0                	add    %esi,%eax
f010f104:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f109:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f10f:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f114:	40                   	inc    %eax
f010f115:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f11a:	ff 45 e4             	incl   -0x1c(%ebp)
f010f11d:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f121:	0f 8e 97 fe ff ff    	jle    f010efbe <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f127:	83 ec 08             	sub    $0x8,%esp
f010f12a:	68 00 10 00 00       	push   $0x1000
f010f12f:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010f134:	e8 bd 30 02 00       	call   f01321f6 <find_block>
f010f139:	83 c4 10             	add    $0x10,%esp
f010f13c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f13f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f143:	74 17                	je     f010f15c <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f145:	83 ec 04             	sub    $0x4,%esp
f010f148:	68 44 83 13 f0       	push   $0xf0138344
f010f14d:	68 de 00 00 00       	push   $0xde
f010f152:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f157:	e8 a9 10 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f15c:	83 ec 08             	sub    $0x8,%esp
f010f15f:	6a 00                	push   $0x0
f010f161:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010f166:	e8 8b 30 02 00       	call   f01321f6 <find_block>
f010f16b:	83 c4 10             	add    $0x10,%esp
f010f16e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f171:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f175:	74 17                	je     f010f18e <test_find_block+0x263>
f010f177:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f17a:	8b 40 0c             	mov    0xc(%eax),%eax
f010f17d:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f182:	75 0a                	jne    f010f18e <test_find_block+0x263>
f010f184:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f187:	8b 40 08             	mov    0x8(%eax),%eax
f010f18a:	85 c0                	test   %eax,%eax
f010f18c:	74 17                	je     f010f1a5 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f18e:	83 ec 04             	sub    $0x4,%esp
f010f191:	68 a8 83 13 f0       	push   $0xf01383a8
f010f196:	68 e3 00 00 00       	push   $0xe3
f010f19b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f1a0:	e8 60 10 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f1a5:	83 ec 08             	sub    $0x8,%esp
f010f1a8:	68 00 70 00 00       	push   $0x7000
f010f1ad:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010f1b2:	e8 3f 30 02 00       	call   f01321f6 <find_block>
f010f1b7:	83 c4 10             	add    $0x10,%esp
f010f1ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f1bd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f1c1:	74 1a                	je     f010f1dd <test_find_block+0x2b2>
f010f1c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1c6:	8b 40 0c             	mov    0xc(%eax),%eax
f010f1c9:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f1ce:	75 0d                	jne    f010f1dd <test_find_block+0x2b2>
f010f1d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1d3:	8b 40 08             	mov    0x8(%eax),%eax
f010f1d6:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f1db:	74 17                	je     f010f1f4 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f1dd:	83 ec 04             	sub    $0x4,%esp
f010f1e0:	68 a8 83 13 f0       	push   $0xf01383a8
f010f1e5:	68 e8 00 00 00       	push   $0xe8
f010f1ea:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f1ef:	e8 11 10 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f1f4:	83 ec 08             	sub    $0x8,%esp
f010f1f7:	68 00 a4 01 00       	push   $0x1a400
f010f1fc:	68 c8 ec 88 f0       	push   $0xf088ecc8
f010f201:	e8 f0 2f 02 00       	call   f01321f6 <find_block>
f010f206:	83 c4 10             	add    $0x10,%esp
f010f209:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f20c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f210:	74 1a                	je     f010f22c <test_find_block+0x301>
f010f212:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f215:	8b 40 0c             	mov    0xc(%eax),%eax
f010f218:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f21d:	75 0d                	jne    f010f22c <test_find_block+0x301>
f010f21f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f222:	8b 40 08             	mov    0x8(%eax),%eax
f010f225:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f22a:	74 17                	je     f010f243 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f22c:	83 ec 04             	sub    $0x4,%esp
f010f22f:	68 a8 83 13 f0       	push   $0xf01383a8
f010f234:	68 ed 00 00 00       	push   $0xed
f010f239:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f23e:	e8 c2 0f ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f243:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f248:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f24b:	75 09                	jne    f010f256 <test_find_block+0x32b>
f010f24d:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f252:	85 c0                	test   %eax,%eax
f010f254:	74 17                	je     f010f26d <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f256:	83 ec 04             	sub    $0x4,%esp
f010f259:	68 dc 83 13 f0       	push   $0xf01383dc
f010f25e:	68 f2 00 00 00       	push   $0xf2
f010f263:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f268:	e8 98 0f ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f26d:	83 ec 0c             	sub    $0xc,%esp
f010f270:	68 40 84 13 f0       	push   $0xf0138440
f010f275:	e8 94 1a ff ff       	call   f0100d0e <cprintf>
f010f27a:	83 c4 10             	add    $0x10,%esp
}
f010f27d:	90                   	nop
f010f27e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f281:	5b                   	pop    %ebx
f010f282:	5e                   	pop    %esi
f010f283:	5f                   	pop    %edi
f010f284:	5d                   	pop    %ebp
f010f285:	c3                   	ret    

f010f286 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f286:	55                   	push   %ebp
f010f287:	89 e5                	mov    %esp,%ebp
f010f289:	57                   	push   %edi
f010f28a:	56                   	push   %esi
f010f28b:	53                   	push   %ebx
f010f28c:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f292:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f299:	83 ec 0c             	sub    $0xc,%esp
f010f29c:	ff 75 e0             	pushl  -0x20(%ebp)
f010f29f:	e8 75 2e 02 00       	call   f0132119 <initialize_MemBlocksList>
f010f2a4:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f2a7:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010f2ae:	00 00 00 
f010f2b1:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010f2b8:	00 00 00 
f010f2bb:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010f2c2:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f2c5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f2c8:	bb 20 87 13 f0       	mov    $0xf0138720,%ebx
f010f2cd:	ba 08 00 00 00       	mov    $0x8,%edx
f010f2d2:	89 c7                	mov    %eax,%edi
f010f2d4:	89 de                	mov    %ebx,%esi
f010f2d6:	89 d1                	mov    %edx,%ecx
f010f2d8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f2da:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f2dd:	bb 40 87 13 f0       	mov    $0xf0138740,%ebx
f010f2e2:	ba 08 00 00 00       	mov    $0x8,%edx
f010f2e7:	89 c7                	mov    %eax,%edi
f010f2e9:	89 de                	mov    %ebx,%esi
f010f2eb:	89 d1                	mov    %edx,%ecx
f010f2ed:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f2ef:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010f2f6:	00 00 00 
f010f2f9:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010f300:	00 00 00 
f010f303:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010f30a:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f30d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f314:	e9 5f 01 00 00       	jmp    f010f478 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f319:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f31c:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f320:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f323:	c1 e2 04             	shl    $0x4,%edx
f010f326:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f329:	01 da                	add    %ebx,%edx
f010f32b:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f331:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f333:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f336:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f33a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f33d:	c1 e2 04             	shl    $0x4,%edx
f010f340:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f343:	01 f2                	add    %esi,%edx
f010f345:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f34b:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f34d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f351:	0f 85 92 00 00 00    	jne    f010f3e9 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f357:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010f35c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f35f:	c1 e2 04             	shl    $0x4,%edx
f010f362:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f365:	01 fa                	add    %edi,%edx
f010f367:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f36d:	89 02                	mov    %eax,(%edx)
f010f36f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f372:	c1 e0 04             	shl    $0x4,%eax
f010f375:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f378:	01 d8                	add    %ebx,%eax
f010f37a:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f37f:	8b 00                	mov    (%eax),%eax
f010f381:	85 c0                	test   %eax,%eax
f010f383:	74 18                	je     f010f39d <test_alloc_block_FF+0x117>
f010f385:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010f38a:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f390:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f393:	c1 e1 04             	shl    $0x4,%ecx
f010f396:	01 ca                	add    %ecx,%edx
f010f398:	89 50 04             	mov    %edx,0x4(%eax)
f010f39b:	eb 13                	jmp    f010f3b0 <test_alloc_block_FF+0x12a>
f010f39d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f3a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3a6:	c1 e2 04             	shl    $0x4,%edx
f010f3a9:	01 d0                	add    %edx,%eax
f010f3ab:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010f3b0:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f3b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3b9:	c1 e2 04             	shl    $0x4,%edx
f010f3bc:	01 d0                	add    %edx,%eax
f010f3be:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010f3c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3c6:	c1 e0 04             	shl    $0x4,%eax
f010f3c9:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f3cc:	01 f0                	add    %esi,%eax
f010f3ce:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f3d3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f3d9:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f3de:	40                   	inc    %eax
f010f3df:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
f010f3e4:	e9 8c 00 00 00       	jmp    f010f475 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f3e9:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010f3ee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3f1:	c1 e2 04             	shl    $0x4,%edx
f010f3f4:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f3f7:	01 fa                	add    %edi,%edx
f010f3f9:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f3ff:	89 02                	mov    %eax,(%edx)
f010f401:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f404:	c1 e0 04             	shl    $0x4,%eax
f010f407:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f40a:	01 d8                	add    %ebx,%eax
f010f40c:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f411:	8b 00                	mov    (%eax),%eax
f010f413:	85 c0                	test   %eax,%eax
f010f415:	74 17                	je     f010f42e <test_alloc_block_FF+0x1a8>
f010f417:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010f41c:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f422:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f425:	c1 e1 04             	shl    $0x4,%ecx
f010f428:	01 ca                	add    %ecx,%edx
f010f42a:	89 10                	mov    %edx,(%eax)
f010f42c:	eb 13                	jmp    f010f441 <test_alloc_block_FF+0x1bb>
f010f42e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f434:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f437:	c1 e2 04             	shl    $0x4,%edx
f010f43a:	01 d0                	add    %edx,%eax
f010f43c:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010f441:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f447:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f44a:	c1 e2 04             	shl    $0x4,%edx
f010f44d:	01 d0                	add    %edx,%eax
f010f44f:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010f454:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f457:	c1 e0 04             	shl    $0x4,%eax
f010f45a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f45d:	01 f0                	add    %esi,%eax
f010f45f:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f464:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f46a:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f46f:	40                   	inc    %eax
f010f470:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f475:	ff 45 e4             	incl   -0x1c(%ebp)
f010f478:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f47c:	0f 8e 97 fe ff ff    	jle    f010f319 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f482:	83 ec 0c             	sub    $0xc,%esp
f010f485:	68 00 00 30 00       	push   $0x300000
f010f48a:	e8 4c 30 02 00       	call   f01324db <alloc_block_FF>
f010f48f:	83 c4 10             	add    $0x10,%esp
f010f492:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f495:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f499:	74 17                	je     f010f4b2 <test_alloc_block_FF+0x22c>
f010f49b:	83 ec 04             	sub    $0x4,%esp
f010f49e:	68 ac 84 13 f0       	push   $0xf01384ac
f010f4a3:	68 15 01 00 00       	push   $0x115
f010f4a8:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f4ad:	e8 53 0d ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f4b2:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f4b7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f4ba:	75 13                	jne    f010f4cf <test_alloc_block_FF+0x249>
f010f4bc:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f4c1:	83 f8 08             	cmp    $0x8,%eax
f010f4c4:	75 09                	jne    f010f4cf <test_alloc_block_FF+0x249>
f010f4c6:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f4cb:	85 c0                	test   %eax,%eax
f010f4cd:	74 17                	je     f010f4e6 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f4cf:	83 ec 04             	sub    $0x4,%esp
f010f4d2:	68 20 85 13 f0       	push   $0xf0138520
f010f4d7:	68 19 01 00 00       	push   $0x119
f010f4dc:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f4e1:	e8 1f 0d ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f4e6:	83 ec 0c             	sub    $0xc,%esp
f010f4e9:	68 00 24 00 00       	push   $0x2400
f010f4ee:	e8 e8 2f 02 00       	call   f01324db <alloc_block_FF>
f010f4f3:	83 c4 10             	add    $0x10,%esp
f010f4f6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f4f9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f4fd:	74 1a                	je     f010f519 <test_alloc_block_FF+0x293>
f010f4ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f502:	8b 40 0c             	mov    0xc(%eax),%eax
f010f505:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f50a:	75 0d                	jne    f010f519 <test_alloc_block_FF+0x293>
f010f50c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f50f:	8b 40 08             	mov    0x8(%eax),%eax
f010f512:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f517:	74 17                	je     f010f530 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f519:	83 ec 04             	sub    $0x4,%esp
f010f51c:	68 98 85 13 f0       	push   $0xf0138598
f010f521:	68 21 01 00 00       	push   $0x121
f010f526:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f52b:	e8 d5 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f530:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f535:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f538:	75 13                	jne    f010f54d <test_alloc_block_FF+0x2c7>
f010f53a:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f53f:	83 f8 07             	cmp    $0x7,%eax
f010f542:	75 09                	jne    f010f54d <test_alloc_block_FF+0x2c7>
f010f544:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f549:	85 c0                	test   %eax,%eax
f010f54b:	74 17                	je     f010f564 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f54d:	83 ec 04             	sub    $0x4,%esp
f010f550:	68 dc 85 13 f0       	push   $0xf01385dc
f010f555:	68 25 01 00 00       	push   $0x125
f010f55a:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f55f:	e8 a1 0c ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f564:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f56b:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f56e:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f575:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f57c:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f583:	83 ec 0c             	sub    $0xc,%esp
f010f586:	ff 75 d8             	pushl  -0x28(%ebp)
f010f589:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f58f:	50                   	push   %eax
f010f590:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f593:	50                   	push   %eax
f010f594:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f597:	50                   	push   %eax
f010f598:	68 64 ed 88 f0       	push   $0xf088ed64
f010f59d:	e8 5b 1c 00 00       	call   f01111fd <check_list_data>
f010f5a2:	83 c4 20             	add    $0x20,%esp
f010f5a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f5a8:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f5ac:	74 17                	je     f010f5c5 <test_alloc_block_FF+0x33f>
f010f5ae:	83 ec 04             	sub    $0x4,%esp
f010f5b1:	68 40 86 13 f0       	push   $0xf0138640
f010f5b6:	68 2d 01 00 00       	push   $0x12d
f010f5bb:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f5c0:	e8 40 0c ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f5c5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f5cb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f5ce:	74 17                	je     f010f5e7 <test_alloc_block_FF+0x361>
f010f5d0:	83 ec 04             	sub    $0x4,%esp
f010f5d3:	68 8c 86 13 f0       	push   $0xf013868c
f010f5d8:	68 2e 01 00 00       	push   $0x12e
f010f5dd:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f5e2:	e8 1e 0c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f5e7:	83 ec 0c             	sub    $0xc,%esp
f010f5ea:	68 00 00 10 00       	push   $0x100000
f010f5ef:	e8 e7 2e 02 00       	call   f01324db <alloc_block_FF>
f010f5f4:	83 c4 10             	add    $0x10,%esp
f010f5f7:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f5fa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5fe:	74 1a                	je     f010f61a <test_alloc_block_FF+0x394>
f010f600:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f603:	8b 40 0c             	mov    0xc(%eax),%eax
f010f606:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f60b:	75 0d                	jne    f010f61a <test_alloc_block_FF+0x394>
f010f60d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f610:	8b 40 08             	mov    0x8(%eax),%eax
f010f613:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f618:	74 17                	je     f010f631 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f61a:	83 ec 04             	sub    $0x4,%esp
f010f61d:	68 98 85 13 f0       	push   $0xf0138598
f010f622:	68 36 01 00 00       	push   $0x136
f010f627:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f62c:	e8 d4 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f631:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f636:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f639:	4a                   	dec    %edx
f010f63a:	39 d0                	cmp    %edx,%eax
f010f63c:	75 13                	jne    f010f651 <test_alloc_block_FF+0x3cb>
f010f63e:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f643:	83 f8 07             	cmp    $0x7,%eax
f010f646:	75 09                	jne    f010f651 <test_alloc_block_FF+0x3cb>
f010f648:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f64d:	85 c0                	test   %eax,%eax
f010f64f:	74 17                	je     f010f668 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f651:	83 ec 04             	sub    $0x4,%esp
f010f654:	68 dc 85 13 f0       	push   $0xf01385dc
f010f659:	68 3a 01 00 00       	push   $0x13a
f010f65e:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f663:	e8 9d 0b ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f668:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f66f:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f672:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f679:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f680:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f687:	83 ec 0c             	sub    $0xc,%esp
f010f68a:	ff 75 d8             	pushl  -0x28(%ebp)
f010f68d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f693:	50                   	push   %eax
f010f694:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f697:	50                   	push   %eax
f010f698:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f69b:	50                   	push   %eax
f010f69c:	68 64 ed 88 f0       	push   $0xf088ed64
f010f6a1:	e8 57 1b 00 00       	call   f01111fd <check_list_data>
f010f6a6:	83 c4 20             	add    $0x20,%esp
f010f6a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f6ac:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f6b0:	74 17                	je     f010f6c9 <test_alloc_block_FF+0x443>
f010f6b2:	83 ec 04             	sub    $0x4,%esp
f010f6b5:	68 40 86 13 f0       	push   $0xf0138640
f010f6ba:	68 42 01 00 00       	push   $0x142
f010f6bf:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f6c4:	e8 3c 0b ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f6c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f6cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f6d2:	74 17                	je     f010f6eb <test_alloc_block_FF+0x465>
f010f6d4:	83 ec 04             	sub    $0x4,%esp
f010f6d7:	68 8c 86 13 f0       	push   $0xf013868c
f010f6dc:	68 43 01 00 00       	push   $0x143
f010f6e1:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f6e6:	e8 1a 0b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f6eb:	83 ec 0c             	sub    $0xc,%esp
f010f6ee:	68 d8 86 13 f0       	push   $0xf01386d8
f010f6f3:	e8 16 16 ff ff       	call   f0100d0e <cprintf>
f010f6f8:	83 c4 10             	add    $0x10,%esp
}
f010f6fb:	90                   	nop
f010f6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f6ff:	5b                   	pop    %ebx
f010f700:	5e                   	pop    %esi
f010f701:	5f                   	pop    %edi
f010f702:	5d                   	pop    %ebp
f010f703:	c3                   	ret    

f010f704 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f704:	55                   	push   %ebp
f010f705:	89 e5                	mov    %esp,%ebp
f010f707:	57                   	push   %edi
f010f708:	56                   	push   %esi
f010f709:	53                   	push   %ebx
f010f70a:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f710:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f717:	83 ec 0c             	sub    $0xc,%esp
f010f71a:	ff 75 e0             	pushl  -0x20(%ebp)
f010f71d:	e8 f7 29 02 00       	call   f0132119 <initialize_MemBlocksList>
f010f722:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f725:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010f72c:	00 00 00 
f010f72f:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010f736:	00 00 00 
f010f739:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010f740:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f743:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f746:	bb 54 89 13 f0       	mov    $0xf0138954,%ebx
f010f74b:	ba 07 00 00 00       	mov    $0x7,%edx
f010f750:	89 c7                	mov    %eax,%edi
f010f752:	89 de                	mov    %ebx,%esi
f010f754:	89 d1                	mov    %edx,%ecx
f010f756:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f758:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f75b:	bb 70 89 13 f0       	mov    $0xf0138970,%ebx
f010f760:	ba 07 00 00 00       	mov    $0x7,%edx
f010f765:	89 c7                	mov    %eax,%edi
f010f767:	89 de                	mov    %ebx,%esi
f010f769:	89 d1                	mov    %edx,%ecx
f010f76b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f76d:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010f774:	00 00 00 
f010f777:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010f77e:	00 00 00 
f010f781:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010f788:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f78b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f792:	e9 5f 01 00 00       	jmp    f010f8f6 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f797:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f79a:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f79e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7a1:	c1 e2 04             	shl    $0x4,%edx
f010f7a4:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f7a7:	01 da                	add    %ebx,%edx
f010f7a9:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f7af:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f7b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7b4:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f7b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7bb:	c1 e2 04             	shl    $0x4,%edx
f010f7be:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f7c1:	01 f2                	add    %esi,%edx
f010f7c3:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f7c9:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f7cb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f7cf:	0f 85 92 00 00 00    	jne    f010f867 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f7d5:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010f7da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7dd:	c1 e2 04             	shl    $0x4,%edx
f010f7e0:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f7e3:	01 fa                	add    %edi,%edx
f010f7e5:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f7eb:	89 02                	mov    %eax,(%edx)
f010f7ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7f0:	c1 e0 04             	shl    $0x4,%eax
f010f7f3:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f7f6:	01 d8                	add    %ebx,%eax
f010f7f8:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f7fd:	8b 00                	mov    (%eax),%eax
f010f7ff:	85 c0                	test   %eax,%eax
f010f801:	74 18                	je     f010f81b <test_alloc_block_BF+0x117>
f010f803:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010f808:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f80e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f811:	c1 e1 04             	shl    $0x4,%ecx
f010f814:	01 ca                	add    %ecx,%edx
f010f816:	89 50 04             	mov    %edx,0x4(%eax)
f010f819:	eb 13                	jmp    f010f82e <test_alloc_block_BF+0x12a>
f010f81b:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f821:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f824:	c1 e2 04             	shl    $0x4,%edx
f010f827:	01 d0                	add    %edx,%eax
f010f829:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010f82e:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f834:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f837:	c1 e2 04             	shl    $0x4,%edx
f010f83a:	01 d0                	add    %edx,%eax
f010f83c:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010f841:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f844:	c1 e0 04             	shl    $0x4,%eax
f010f847:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f84a:	01 f0                	add    %esi,%eax
f010f84c:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f851:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f857:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f85c:	40                   	inc    %eax
f010f85d:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
f010f862:	e9 8c 00 00 00       	jmp    f010f8f3 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f867:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010f86c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f86f:	c1 e2 04             	shl    $0x4,%edx
f010f872:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f875:	01 fa                	add    %edi,%edx
f010f877:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f87d:	89 02                	mov    %eax,(%edx)
f010f87f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f882:	c1 e0 04             	shl    $0x4,%eax
f010f885:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f888:	01 d8                	add    %ebx,%eax
f010f88a:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f88f:	8b 00                	mov    (%eax),%eax
f010f891:	85 c0                	test   %eax,%eax
f010f893:	74 17                	je     f010f8ac <test_alloc_block_BF+0x1a8>
f010f895:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010f89a:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f8a0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f8a3:	c1 e1 04             	shl    $0x4,%ecx
f010f8a6:	01 ca                	add    %ecx,%edx
f010f8a8:	89 10                	mov    %edx,(%eax)
f010f8aa:	eb 13                	jmp    f010f8bf <test_alloc_block_BF+0x1bb>
f010f8ac:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f8b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8b5:	c1 e2 04             	shl    $0x4,%edx
f010f8b8:	01 d0                	add    %edx,%eax
f010f8ba:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010f8bf:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f8c5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8c8:	c1 e2 04             	shl    $0x4,%edx
f010f8cb:	01 d0                	add    %edx,%eax
f010f8cd:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010f8d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8d5:	c1 e0 04             	shl    $0x4,%eax
f010f8d8:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f8db:	01 f0                	add    %esi,%eax
f010f8dd:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f8e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f8e8:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f8ed:	40                   	inc    %eax
f010f8ee:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f8f3:	ff 45 e4             	incl   -0x1c(%ebp)
f010f8f6:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f8fa:	0f 8e 97 fe ff ff    	jle    f010f797 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f900:	83 ec 0c             	sub    $0xc,%esp
f010f903:	68 00 00 40 00       	push   $0x400000
f010f908:	e8 9b 2d 02 00       	call   f01326a8 <alloc_block_BF>
f010f90d:	83 c4 10             	add    $0x10,%esp
f010f910:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f913:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f917:	74 17                	je     f010f930 <test_alloc_block_BF+0x22c>
f010f919:	83 ec 04             	sub    $0x4,%esp
f010f91c:	68 60 87 13 f0       	push   $0xf0138760
f010f921:	68 66 01 00 00       	push   $0x166
f010f926:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f92b:	e8 d5 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f930:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f935:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f938:	75 13                	jne    f010f94d <test_alloc_block_BF+0x249>
f010f93a:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f93f:	83 f8 07             	cmp    $0x7,%eax
f010f942:	75 09                	jne    f010f94d <test_alloc_block_BF+0x249>
f010f944:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f949:	85 c0                	test   %eax,%eax
f010f94b:	74 17                	je     f010f964 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f94d:	83 ec 04             	sub    $0x4,%esp
f010f950:	68 20 85 13 f0       	push   $0xf0138520
f010f955:	68 6a 01 00 00       	push   $0x16a
f010f95a:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f95f:	e8 a1 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f964:	83 ec 0c             	sub    $0xc,%esp
f010f967:	68 00 00 10 00       	push   $0x100000
f010f96c:	e8 37 2d 02 00       	call   f01326a8 <alloc_block_BF>
f010f971:	83 c4 10             	add    $0x10,%esp
f010f974:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f977:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f97b:	74 1a                	je     f010f997 <test_alloc_block_BF+0x293>
f010f97d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f980:	8b 40 0c             	mov    0xc(%eax),%eax
f010f983:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f988:	75 0d                	jne    f010f997 <test_alloc_block_BF+0x293>
f010f98a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f98d:	8b 40 08             	mov    0x8(%eax),%eax
f010f990:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f995:	74 17                	je     f010f9ae <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f997:	83 ec 04             	sub    $0x4,%esp
f010f99a:	68 d4 87 13 f0       	push   $0xf01387d4
f010f99f:	68 72 01 00 00       	push   $0x172
f010f9a4:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f9a9:	e8 57 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f9ae:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010f9b3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f9b6:	75 13                	jne    f010f9cb <test_alloc_block_BF+0x2c7>
f010f9b8:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010f9bd:	83 f8 06             	cmp    $0x6,%eax
f010f9c0:	75 09                	jne    f010f9cb <test_alloc_block_BF+0x2c7>
f010f9c2:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010f9c7:	85 c0                	test   %eax,%eax
f010f9c9:	74 17                	je     f010f9e2 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f9cb:	83 ec 04             	sub    $0x4,%esp
f010f9ce:	68 18 88 13 f0       	push   $0xf0138818
f010f9d3:	68 76 01 00 00       	push   $0x176
f010f9d8:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010f9dd:	e8 23 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f9e2:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f9e9:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f9ec:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f9f3:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f9fa:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fa01:	83 ec 0c             	sub    $0xc,%esp
f010fa04:	ff 75 d8             	pushl  -0x28(%ebp)
f010fa07:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fa0d:	50                   	push   %eax
f010fa0e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fa11:	50                   	push   %eax
f010fa12:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fa15:	50                   	push   %eax
f010fa16:	68 64 ed 88 f0       	push   $0xf088ed64
f010fa1b:	e8 dd 17 00 00       	call   f01111fd <check_list_data>
f010fa20:	83 c4 20             	add    $0x20,%esp
f010fa23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa26:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa2a:	74 17                	je     f010fa43 <test_alloc_block_BF+0x33f>
f010fa2c:	83 ec 04             	sub    $0x4,%esp
f010fa2f:	68 7c 88 13 f0       	push   $0xf013887c
f010fa34:	68 7e 01 00 00       	push   $0x17e
f010fa39:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fa3e:	e8 c2 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa43:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fa49:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa4c:	74 17                	je     f010fa65 <test_alloc_block_BF+0x361>
f010fa4e:	83 ec 04             	sub    $0x4,%esp
f010fa51:	68 c8 88 13 f0       	push   $0xf01388c8
f010fa56:	68 7f 01 00 00       	push   $0x17f
f010fa5b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fa60:	e8 a0 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fa65:	83 ec 0c             	sub    $0xc,%esp
f010fa68:	68 00 00 10 00       	push   $0x100000
f010fa6d:	e8 36 2c 02 00       	call   f01326a8 <alloc_block_BF>
f010fa72:	83 c4 10             	add    $0x10,%esp
f010fa75:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fa78:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa7c:	74 1a                	je     f010fa98 <test_alloc_block_BF+0x394>
f010fa7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa81:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa84:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fa89:	75 0d                	jne    f010fa98 <test_alloc_block_BF+0x394>
f010fa8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa8e:	8b 40 08             	mov    0x8(%eax),%eax
f010fa91:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fa96:	74 17                	je     f010faaf <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fa98:	83 ec 04             	sub    $0x4,%esp
f010fa9b:	68 d4 87 13 f0       	push   $0xf01387d4
f010faa0:	68 87 01 00 00       	push   $0x187
f010faa5:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010faaa:	e8 56 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010faaf:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010fab4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fab7:	4a                   	dec    %edx
f010fab8:	39 d0                	cmp    %edx,%eax
f010faba:	75 13                	jne    f010facf <test_alloc_block_BF+0x3cb>
f010fabc:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010fac1:	83 f8 06             	cmp    $0x6,%eax
f010fac4:	75 09                	jne    f010facf <test_alloc_block_BF+0x3cb>
f010fac6:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010facb:	85 c0                	test   %eax,%eax
f010facd:	74 17                	je     f010fae6 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010facf:	83 ec 04             	sub    $0x4,%esp
f010fad2:	68 18 88 13 f0       	push   $0xf0138818
f010fad7:	68 8b 01 00 00       	push   $0x18b
f010fadc:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fae1:	e8 1f 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fae6:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010faed:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010faf0:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010faf7:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010fafe:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fb05:	83 ec 0c             	sub    $0xc,%esp
f010fb08:	ff 75 d8             	pushl  -0x28(%ebp)
f010fb0b:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fb11:	50                   	push   %eax
f010fb12:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fb15:	50                   	push   %eax
f010fb16:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fb19:	50                   	push   %eax
f010fb1a:	68 64 ed 88 f0       	push   $0xf088ed64
f010fb1f:	e8 d9 16 00 00       	call   f01111fd <check_list_data>
f010fb24:	83 c4 20             	add    $0x20,%esp
f010fb27:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb2a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb2e:	74 17                	je     f010fb47 <test_alloc_block_BF+0x443>
f010fb30:	83 ec 04             	sub    $0x4,%esp
f010fb33:	68 7c 88 13 f0       	push   $0xf013887c
f010fb38:	68 93 01 00 00       	push   $0x193
f010fb3d:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fb42:	e8 be 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb47:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fb4d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb50:	74 17                	je     f010fb69 <test_alloc_block_BF+0x465>
f010fb52:	83 ec 04             	sub    $0x4,%esp
f010fb55:	68 c8 88 13 f0       	push   $0xf01388c8
f010fb5a:	68 94 01 00 00       	push   $0x194
f010fb5f:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fb64:	e8 9c 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010fb69:	83 ec 0c             	sub    $0xc,%esp
f010fb6c:	68 00 0c 00 00       	push   $0xc00
f010fb71:	e8 32 2b 02 00       	call   f01326a8 <alloc_block_BF>
f010fb76:	83 c4 10             	add    $0x10,%esp
f010fb79:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010fb7c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb80:	74 1a                	je     f010fb9c <test_alloc_block_BF+0x498>
f010fb82:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb85:	8b 40 0c             	mov    0xc(%eax),%eax
f010fb88:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fb8d:	75 0d                	jne    f010fb9c <test_alloc_block_BF+0x498>
f010fb8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb92:	8b 40 08             	mov    0x8(%eax),%eax
f010fb95:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010fb9a:	74 17                	je     f010fbb3 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fb9c:	83 ec 04             	sub    $0x4,%esp
f010fb9f:	68 d4 87 13 f0       	push   $0xf01387d4
f010fba4:	68 9c 01 00 00       	push   $0x19c
f010fba9:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fbae:	e8 52 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fbb3:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010fbb8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fbbb:	83 ea 02             	sub    $0x2,%edx
f010fbbe:	39 d0                	cmp    %edx,%eax
f010fbc0:	75 13                	jne    f010fbd5 <test_alloc_block_BF+0x4d1>
f010fbc2:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010fbc7:	83 f8 06             	cmp    $0x6,%eax
f010fbca:	75 09                	jne    f010fbd5 <test_alloc_block_BF+0x4d1>
f010fbcc:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010fbd1:	85 c0                	test   %eax,%eax
f010fbd3:	74 17                	je     f010fbec <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fbd5:	83 ec 04             	sub    $0x4,%esp
f010fbd8:	68 18 88 13 f0       	push   $0xf0138818
f010fbdd:	68 a0 01 00 00       	push   $0x1a0
f010fbe2:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fbe7:	e8 19 06 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fbec:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fbf3:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fbf6:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010fbfd:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010fc04:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fc0b:	83 ec 0c             	sub    $0xc,%esp
f010fc0e:	ff 75 d8             	pushl  -0x28(%ebp)
f010fc11:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fc17:	50                   	push   %eax
f010fc18:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fc1b:	50                   	push   %eax
f010fc1c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fc1f:	50                   	push   %eax
f010fc20:	68 64 ed 88 f0       	push   $0xf088ed64
f010fc25:	e8 d3 15 00 00       	call   f01111fd <check_list_data>
f010fc2a:	83 c4 20             	add    $0x20,%esp
f010fc2d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc30:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc34:	74 17                	je     f010fc4d <test_alloc_block_BF+0x549>
f010fc36:	83 ec 04             	sub    $0x4,%esp
f010fc39:	68 7c 88 13 f0       	push   $0xf013887c
f010fc3e:	68 a8 01 00 00       	push   $0x1a8
f010fc43:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fc48:	e8 b8 05 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fc4d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fc53:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fc56:	74 17                	je     f010fc6f <test_alloc_block_BF+0x56b>
f010fc58:	83 ec 04             	sub    $0x4,%esp
f010fc5b:	68 c8 88 13 f0       	push   $0xf01388c8
f010fc60:	68 a9 01 00 00       	push   $0x1a9
f010fc65:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fc6a:	e8 96 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010fc6f:	83 ec 0c             	sub    $0xc,%esp
f010fc72:	68 00 08 00 00       	push   $0x800
f010fc77:	e8 2c 2a 02 00       	call   f01326a8 <alloc_block_BF>
f010fc7c:	83 c4 10             	add    $0x10,%esp
f010fc7f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010fc82:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fc86:	74 17                	je     f010fc9f <test_alloc_block_BF+0x59b>
f010fc88:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc8b:	8b 40 0c             	mov    0xc(%eax),%eax
f010fc8e:	3d 00 08 00 00       	cmp    $0x800,%eax
f010fc93:	75 0a                	jne    f010fc9f <test_alloc_block_BF+0x59b>
f010fc95:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc98:	8b 40 08             	mov    0x8(%eax),%eax
f010fc9b:	85 c0                	test   %eax,%eax
f010fc9d:	74 17                	je     f010fcb6 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fc9f:	83 ec 04             	sub    $0x4,%esp
f010fca2:	68 d4 87 13 f0       	push   $0xf01387d4
f010fca7:	68 b1 01 00 00       	push   $0x1b1
f010fcac:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fcb1:	e8 4f 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fcb6:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010fcbb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fcbe:	83 ea 02             	sub    $0x2,%edx
f010fcc1:	39 d0                	cmp    %edx,%eax
f010fcc3:	75 13                	jne    f010fcd8 <test_alloc_block_BF+0x5d4>
f010fcc5:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010fcca:	83 f8 05             	cmp    $0x5,%eax
f010fccd:	75 09                	jne    f010fcd8 <test_alloc_block_BF+0x5d4>
f010fccf:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010fcd4:	85 c0                	test   %eax,%eax
f010fcd6:	74 17                	je     f010fcef <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fcd8:	83 ec 04             	sub    $0x4,%esp
f010fcdb:	68 18 88 13 f0       	push   $0xf0138818
f010fce0:	68 b5 01 00 00       	push   $0x1b5
f010fce5:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fcea:	e8 16 05 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fcef:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fcf6:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010fcf9:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010fd00:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010fd07:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fd0e:	83 ec 0c             	sub    $0xc,%esp
f010fd11:	ff 75 d8             	pushl  -0x28(%ebp)
f010fd14:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fd1a:	50                   	push   %eax
f010fd1b:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fd1e:	50                   	push   %eax
f010fd1f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fd22:	50                   	push   %eax
f010fd23:	68 64 ed 88 f0       	push   $0xf088ed64
f010fd28:	e8 d0 14 00 00       	call   f01111fd <check_list_data>
f010fd2d:	83 c4 20             	add    $0x20,%esp
f010fd30:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fd33:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fd37:	74 17                	je     f010fd50 <test_alloc_block_BF+0x64c>
f010fd39:	83 ec 04             	sub    $0x4,%esp
f010fd3c:	68 7c 88 13 f0       	push   $0xf013887c
f010fd41:	68 bd 01 00 00       	push   $0x1bd
f010fd46:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fd4b:	e8 b5 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fd50:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fd56:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fd59:	74 17                	je     f010fd72 <test_alloc_block_BF+0x66e>
f010fd5b:	83 ec 04             	sub    $0x4,%esp
f010fd5e:	68 c8 88 13 f0       	push   $0xf01388c8
f010fd63:	68 be 01 00 00       	push   $0x1be
f010fd68:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fd6d:	e8 93 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010fd72:	83 ec 0c             	sub    $0xc,%esp
f010fd75:	68 14 89 13 f0       	push   $0xf0138914
f010fd7a:	e8 8f 0f ff ff       	call   f0100d0e <cprintf>
f010fd7f:	83 c4 10             	add    $0x10,%esp
}
f010fd82:	90                   	nop
f010fd83:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fd86:	5b                   	pop    %ebx
f010fd87:	5e                   	pop    %esi
f010fd88:	5f                   	pop    %edi
f010fd89:	5d                   	pop    %ebp
f010fd8a:	c3                   	ret    

f010fd8b <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010fd8b:	55                   	push   %ebp
f010fd8c:	89 e5                	mov    %esp,%ebp
f010fd8e:	57                   	push   %edi
f010fd8f:	56                   	push   %esi
f010fd90:	53                   	push   %ebx
f010fd91:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010fd97:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fd9e:	83 ec 0c             	sub    $0xc,%esp
f010fda1:	ff 75 e0             	pushl  -0x20(%ebp)
f010fda4:	e8 70 23 02 00       	call   f0132119 <initialize_MemBlocksList>
f010fda9:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fdac:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f010fdb3:	00 00 00 
f010fdb6:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f010fdbd:	00 00 00 
f010fdc0:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f010fdc7:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010fdca:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fdcd:	bb 20 87 13 f0       	mov    $0xf0138720,%ebx
f010fdd2:	ba 08 00 00 00       	mov    $0x8,%edx
f010fdd7:	89 c7                	mov    %eax,%edi
f010fdd9:	89 de                	mov    %ebx,%esi
f010fddb:	89 d1                	mov    %edx,%ecx
f010fddd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010fddf:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fde2:	bb 80 8b 13 f0       	mov    $0xf0138b80,%ebx
f010fde7:	ba 08 00 00 00       	mov    $0x8,%edx
f010fdec:	89 c7                	mov    %eax,%edi
f010fdee:	89 de                	mov    %ebx,%esi
f010fdf0:	89 d1                	mov    %edx,%ecx
f010fdf2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fdf4:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f010fdfb:	00 00 00 
f010fdfe:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f010fe05:	00 00 00 
f010fe08:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f010fe0f:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fe12:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fe19:	e9 5f 01 00 00       	jmp    f010ff7d <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fe1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe21:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010fe25:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe28:	c1 e2 04             	shl    $0x4,%edx
f010fe2b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fe2e:	01 da                	add    %ebx,%edx
f010fe30:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010fe36:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fe38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe3b:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010fe3f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe42:	c1 e2 04             	shl    $0x4,%edx
f010fe45:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fe48:	01 f2                	add    %esi,%edx
f010fe4a:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010fe50:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fe52:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fe56:	0f 85 92 00 00 00    	jne    f010feee <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fe5c:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010fe61:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe64:	c1 e2 04             	shl    $0x4,%edx
f010fe67:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fe6a:	01 fa                	add    %edi,%edx
f010fe6c:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010fe72:	89 02                	mov    %eax,(%edx)
f010fe74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe77:	c1 e0 04             	shl    $0x4,%eax
f010fe7a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fe7d:	01 d8                	add    %ebx,%eax
f010fe7f:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fe84:	8b 00                	mov    (%eax),%eax
f010fe86:	85 c0                	test   %eax,%eax
f010fe88:	74 18                	je     f010fea2 <test_alloc_block_NF+0x117>
f010fe8a:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f010fe8f:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fe95:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fe98:	c1 e1 04             	shl    $0x4,%ecx
f010fe9b:	01 ca                	add    %ecx,%edx
f010fe9d:	89 50 04             	mov    %edx,0x4(%eax)
f010fea0:	eb 13                	jmp    f010feb5 <test_alloc_block_NF+0x12a>
f010fea2:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fea8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010feab:	c1 e2 04             	shl    $0x4,%edx
f010feae:	01 d0                	add    %edx,%eax
f010feb0:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010feb5:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010febb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010febe:	c1 e2 04             	shl    $0x4,%edx
f010fec1:	01 d0                	add    %edx,%eax
f010fec3:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010fec8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fecb:	c1 e0 04             	shl    $0x4,%eax
f010fece:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fed1:	01 f0                	add    %esi,%eax
f010fed3:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fed8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fede:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010fee3:	40                   	inc    %eax
f010fee4:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
f010fee9:	e9 8c 00 00 00       	jmp    f010ff7a <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010feee:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010fef3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fef6:	c1 e2 04             	shl    $0x4,%edx
f010fef9:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fefc:	01 fa                	add    %edi,%edx
f010fefe:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ff04:	89 02                	mov    %eax,(%edx)
f010ff06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff09:	c1 e0 04             	shl    $0x4,%eax
f010ff0c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ff0f:	01 d8                	add    %ebx,%eax
f010ff11:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ff16:	8b 00                	mov    (%eax),%eax
f010ff18:	85 c0                	test   %eax,%eax
f010ff1a:	74 17                	je     f010ff33 <test_alloc_block_NF+0x1a8>
f010ff1c:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f010ff21:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ff27:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ff2a:	c1 e1 04             	shl    $0x4,%ecx
f010ff2d:	01 ca                	add    %ecx,%edx
f010ff2f:	89 10                	mov    %edx,(%eax)
f010ff31:	eb 13                	jmp    f010ff46 <test_alloc_block_NF+0x1bb>
f010ff33:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ff39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff3c:	c1 e2 04             	shl    $0x4,%edx
f010ff3f:	01 d0                	add    %edx,%eax
f010ff41:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f010ff46:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ff4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff4f:	c1 e2 04             	shl    $0x4,%edx
f010ff52:	01 d0                	add    %edx,%eax
f010ff54:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f010ff59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff5c:	c1 e0 04             	shl    $0x4,%eax
f010ff5f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ff62:	01 f0                	add    %esi,%eax
f010ff64:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ff69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ff6f:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010ff74:	40                   	inc    %eax
f010ff75:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010ff7a:	ff 45 e4             	incl   -0x1c(%ebp)
f010ff7d:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010ff81:	0f 8e 97 fe ff ff    	jle    f010fe1e <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010ff87:	83 ec 0c             	sub    $0xc,%esp
f010ff8a:	68 00 00 a0 00       	push   $0xa00000
f010ff8f:	e8 25 29 02 00       	call   f01328b9 <alloc_block_NF>
f010ff94:	83 c4 10             	add    $0x10,%esp
f010ff97:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010ff9a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ff9e:	74 17                	je     f010ffb7 <test_alloc_block_NF+0x22c>
f010ffa0:	83 ec 04             	sub    $0x4,%esp
f010ffa3:	68 8c 89 13 f0       	push   $0xf013898c
f010ffa8:	68 e1 01 00 00       	push   $0x1e1
f010ffad:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ffb2:	e8 4e 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ffb7:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f010ffbc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ffbf:	75 13                	jne    f010ffd4 <test_alloc_block_NF+0x249>
f010ffc1:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f010ffc6:	83 f8 08             	cmp    $0x8,%eax
f010ffc9:	75 09                	jne    f010ffd4 <test_alloc_block_NF+0x249>
f010ffcb:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f010ffd0:	85 c0                	test   %eax,%eax
f010ffd2:	74 17                	je     f010ffeb <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ffd4:	83 ec 04             	sub    $0x4,%esp
f010ffd7:	68 20 85 13 f0       	push   $0xf0138520
f010ffdc:	68 e5 01 00 00       	push   $0x1e5
f010ffe1:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010ffe6:	e8 1a 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010ffeb:	83 ec 0c             	sub    $0xc,%esp
f010ffee:	68 00 28 00 00       	push   $0x2800
f010fff3:	e8 c1 28 02 00       	call   f01328b9 <alloc_block_NF>
f010fff8:	83 c4 10             	add    $0x10,%esp
f010fffb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010fffe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110002:	74 1a                	je     f011001e <test_alloc_block_NF+0x293>
f0110004:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110007:	8b 40 0c             	mov    0xc(%eax),%eax
f011000a:	3d 00 28 00 00       	cmp    $0x2800,%eax
f011000f:	75 0d                	jne    f011001e <test_alloc_block_NF+0x293>
f0110011:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110014:	8b 40 08             	mov    0x8(%eax),%eax
f0110017:	3d 00 70 00 00       	cmp    $0x7000,%eax
f011001c:	74 17                	je     f0110035 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011001e:	83 ec 04             	sub    $0x4,%esp
f0110021:	68 00 8a 13 f0       	push   $0xf0138a00
f0110026:	68 ed 01 00 00       	push   $0x1ed
f011002b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110030:	e8 d0 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110035:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f011003a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011003d:	75 13                	jne    f0110052 <test_alloc_block_NF+0x2c7>
f011003f:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110044:	83 f8 07             	cmp    $0x7,%eax
f0110047:	75 09                	jne    f0110052 <test_alloc_block_NF+0x2c7>
f0110049:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f011004e:	85 c0                	test   %eax,%eax
f0110050:	74 17                	je     f0110069 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110052:	83 ec 04             	sub    $0x4,%esp
f0110055:	68 44 8a 13 f0       	push   $0xf0138a44
f011005a:	68 f1 01 00 00       	push   $0x1f1
f011005f:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110064:	e8 9c 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f0110069:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110070:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f0110073:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f011007a:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f0110081:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110088:	83 ec 0c             	sub    $0xc,%esp
f011008b:	ff 75 d8             	pushl  -0x28(%ebp)
f011008e:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110094:	50                   	push   %eax
f0110095:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110098:	50                   	push   %eax
f0110099:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011009c:	50                   	push   %eax
f011009d:	68 64 ed 88 f0       	push   $0xf088ed64
f01100a2:	e8 56 11 00 00       	call   f01111fd <check_list_data>
f01100a7:	83 c4 20             	add    $0x20,%esp
f01100aa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01100ad:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01100b1:	74 17                	je     f01100ca <test_alloc_block_NF+0x33f>
f01100b3:	83 ec 04             	sub    $0x4,%esp
f01100b6:	68 a8 8a 13 f0       	push   $0xf0138aa8
f01100bb:	68 f9 01 00 00       	push   $0x1f9
f01100c0:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01100c5:	e8 3b 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01100ca:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01100d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01100d3:	74 17                	je     f01100ec <test_alloc_block_NF+0x361>
f01100d5:	83 ec 04             	sub    $0x4,%esp
f01100d8:	68 f4 8a 13 f0       	push   $0xf0138af4
f01100dd:	68 fa 01 00 00       	push   $0x1fa
f01100e2:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01100e7:	e8 19 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f01100ec:	83 ec 0c             	sub    $0xc,%esp
f01100ef:	68 00 00 20 00       	push   $0x200000
f01100f4:	e8 c0 27 02 00       	call   f01328b9 <alloc_block_NF>
f01100f9:	83 c4 10             	add    $0x10,%esp
f01100fc:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f01100ff:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110103:	74 1a                	je     f011011f <test_alloc_block_NF+0x394>
f0110105:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110108:	8b 40 0c             	mov    0xc(%eax),%eax
f011010b:	3d 00 00 20 00       	cmp    $0x200000,%eax
f0110110:	75 0d                	jne    f011011f <test_alloc_block_NF+0x394>
f0110112:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110115:	8b 40 08             	mov    0x8(%eax),%eax
f0110118:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f011011d:	74 17                	je     f0110136 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011011f:	83 ec 04             	sub    $0x4,%esp
f0110122:	68 00 8a 13 f0       	push   $0xf0138a00
f0110127:	68 03 02 00 00       	push   $0x203
f011012c:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110131:	e8 cf 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110136:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f011013b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011013e:	75 13                	jne    f0110153 <test_alloc_block_NF+0x3c8>
f0110140:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110145:	83 f8 06             	cmp    $0x6,%eax
f0110148:	75 09                	jne    f0110153 <test_alloc_block_NF+0x3c8>
f011014a:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f011014f:	85 c0                	test   %eax,%eax
f0110151:	74 17                	je     f011016a <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110153:	83 ec 04             	sub    $0x4,%esp
f0110156:	68 44 8a 13 f0       	push   $0xf0138a44
f011015b:	68 07 02 00 00       	push   $0x207
f0110160:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110165:	e8 9b 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011016a:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110171:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110174:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f011017b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f0110182:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110189:	83 ec 0c             	sub    $0xc,%esp
f011018c:	ff 75 d8             	pushl  -0x28(%ebp)
f011018f:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110195:	50                   	push   %eax
f0110196:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110199:	50                   	push   %eax
f011019a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011019d:	50                   	push   %eax
f011019e:	68 64 ed 88 f0       	push   $0xf088ed64
f01101a3:	e8 55 10 00 00       	call   f01111fd <check_list_data>
f01101a8:	83 c4 20             	add    $0x20,%esp
f01101ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01101ae:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01101b2:	74 17                	je     f01101cb <test_alloc_block_NF+0x440>
f01101b4:	83 ec 04             	sub    $0x4,%esp
f01101b7:	68 a8 8a 13 f0       	push   $0xf0138aa8
f01101bc:	68 0f 02 00 00       	push   $0x20f
f01101c1:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01101c6:	e8 3a 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01101cb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01101d1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01101d4:	74 17                	je     f01101ed <test_alloc_block_NF+0x462>
f01101d6:	83 ec 04             	sub    $0x4,%esp
f01101d9:	68 f4 8a 13 f0       	push   $0xf0138af4
f01101de:	68 10 02 00 00       	push   $0x210
f01101e3:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01101e8:	e8 18 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f01101ed:	83 ec 0c             	sub    $0xc,%esp
f01101f0:	68 00 00 08 00       	push   $0x80000
f01101f5:	e8 bf 26 02 00       	call   f01328b9 <alloc_block_NF>
f01101fa:	83 c4 10             	add    $0x10,%esp
f01101fd:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f0110200:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110204:	74 1a                	je     f0110220 <test_alloc_block_NF+0x495>
f0110206:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110209:	8b 40 0c             	mov    0xc(%eax),%eax
f011020c:	3d 00 00 08 00       	cmp    $0x80000,%eax
f0110211:	75 0d                	jne    f0110220 <test_alloc_block_NF+0x495>
f0110213:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110216:	8b 40 08             	mov    0x8(%eax),%eax
f0110219:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f011021e:	74 17                	je     f0110237 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110220:	83 ec 04             	sub    $0x4,%esp
f0110223:	68 00 8a 13 f0       	push   $0xf0138a00
f0110228:	68 19 02 00 00       	push   $0x219
f011022d:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110232:	e8 ce ff fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110237:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f011023c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011023f:	4a                   	dec    %edx
f0110240:	39 d0                	cmp    %edx,%eax
f0110242:	75 13                	jne    f0110257 <test_alloc_block_NF+0x4cc>
f0110244:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110249:	83 f8 06             	cmp    $0x6,%eax
f011024c:	75 09                	jne    f0110257 <test_alloc_block_NF+0x4cc>
f011024e:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110253:	85 c0                	test   %eax,%eax
f0110255:	74 17                	je     f011026e <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110257:	83 ec 04             	sub    $0x4,%esp
f011025a:	68 44 8a 13 f0       	push   $0xf0138a44
f011025f:	68 1d 02 00 00       	push   $0x21d
f0110264:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110269:	e8 97 ff fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011026e:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110275:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110278:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f011027f:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f0110286:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011028d:	83 ec 0c             	sub    $0xc,%esp
f0110290:	ff 75 d8             	pushl  -0x28(%ebp)
f0110293:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110299:	50                   	push   %eax
f011029a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011029d:	50                   	push   %eax
f011029e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01102a1:	50                   	push   %eax
f01102a2:	68 64 ed 88 f0       	push   $0xf088ed64
f01102a7:	e8 51 0f 00 00       	call   f01111fd <check_list_data>
f01102ac:	83 c4 20             	add    $0x20,%esp
f01102af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01102b2:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01102b6:	74 17                	je     f01102cf <test_alloc_block_NF+0x544>
f01102b8:	83 ec 04             	sub    $0x4,%esp
f01102bb:	68 a8 8a 13 f0       	push   $0xf0138aa8
f01102c0:	68 25 02 00 00       	push   $0x225
f01102c5:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01102ca:	e8 36 ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01102cf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01102d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01102d8:	74 17                	je     f01102f1 <test_alloc_block_NF+0x566>
f01102da:	83 ec 04             	sub    $0x4,%esp
f01102dd:	68 f4 8a 13 f0       	push   $0xf0138af4
f01102e2:	68 26 02 00 00       	push   $0x226
f01102e7:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01102ec:	e8 14 ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f01102f1:	83 ec 0c             	sub    $0xc,%esp
f01102f4:	68 00 fc 07 00       	push   $0x7fc00
f01102f9:	e8 bb 25 02 00       	call   f01328b9 <alloc_block_NF>
f01102fe:	83 c4 10             	add    $0x10,%esp
f0110301:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f0110304:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110308:	74 1a                	je     f0110324 <test_alloc_block_NF+0x599>
f011030a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011030d:	8b 40 0c             	mov    0xc(%eax),%eax
f0110310:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f0110315:	75 0d                	jne    f0110324 <test_alloc_block_NF+0x599>
f0110317:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011031a:	8b 40 08             	mov    0x8(%eax),%eax
f011031d:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f0110322:	74 17                	je     f011033b <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110324:	83 ec 04             	sub    $0x4,%esp
f0110327:	68 00 8a 13 f0       	push   $0xf0138a00
f011032c:	68 2f 02 00 00       	push   $0x22f
f0110331:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110336:	e8 ca fe fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011033b:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110340:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110343:	83 ea 02             	sub    $0x2,%edx
f0110346:	39 d0                	cmp    %edx,%eax
f0110348:	75 13                	jne    f011035d <test_alloc_block_NF+0x5d2>
f011034a:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f011034f:	83 f8 06             	cmp    $0x6,%eax
f0110352:	75 09                	jne    f011035d <test_alloc_block_NF+0x5d2>
f0110354:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110359:	85 c0                	test   %eax,%eax
f011035b:	74 17                	je     f0110374 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011035d:	83 ec 04             	sub    $0x4,%esp
f0110360:	68 44 8a 13 f0       	push   $0xf0138a44
f0110365:	68 33 02 00 00       	push   $0x233
f011036a:	68 f4 7f 13 f0       	push   $0xf0137ff4
f011036f:	e8 91 fe fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110374:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011037b:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f011037e:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f0110385:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f011038c:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110393:	83 ec 0c             	sub    $0xc,%esp
f0110396:	ff 75 d8             	pushl  -0x28(%ebp)
f0110399:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011039f:	50                   	push   %eax
f01103a0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01103a3:	50                   	push   %eax
f01103a4:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01103a7:	50                   	push   %eax
f01103a8:	68 64 ed 88 f0       	push   $0xf088ed64
f01103ad:	e8 4b 0e 00 00       	call   f01111fd <check_list_data>
f01103b2:	83 c4 20             	add    $0x20,%esp
f01103b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01103b8:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01103bc:	74 17                	je     f01103d5 <test_alloc_block_NF+0x64a>
f01103be:	83 ec 04             	sub    $0x4,%esp
f01103c1:	68 a8 8a 13 f0       	push   $0xf0138aa8
f01103c6:	68 3b 02 00 00       	push   $0x23b
f01103cb:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01103d0:	e8 30 fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01103d5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01103db:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01103de:	74 17                	je     f01103f7 <test_alloc_block_NF+0x66c>
f01103e0:	83 ec 04             	sub    $0x4,%esp
f01103e3:	68 f4 8a 13 f0       	push   $0xf0138af4
f01103e8:	68 3c 02 00 00       	push   $0x23c
f01103ed:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01103f2:	e8 0e fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f01103f7:	83 ec 0c             	sub    $0xc,%esp
f01103fa:	68 00 0c 00 00       	push   $0xc00
f01103ff:	e8 b5 24 02 00       	call   f01328b9 <alloc_block_NF>
f0110404:	83 c4 10             	add    $0x10,%esp
f0110407:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f011040a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011040e:	74 17                	je     f0110427 <test_alloc_block_NF+0x69c>
f0110410:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110413:	8b 40 0c             	mov    0xc(%eax),%eax
f0110416:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f011041b:	75 0a                	jne    f0110427 <test_alloc_block_NF+0x69c>
f011041d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110420:	8b 40 08             	mov    0x8(%eax),%eax
f0110423:	85 c0                	test   %eax,%eax
f0110425:	74 17                	je     f011043e <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110427:	83 ec 04             	sub    $0x4,%esp
f011042a:	68 00 8a 13 f0       	push   $0xf0138a00
f011042f:	68 45 02 00 00       	push   $0x245
f0110434:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110439:	e8 c7 fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011043e:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110443:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110446:	83 ea 02             	sub    $0x2,%edx
f0110449:	39 d0                	cmp    %edx,%eax
f011044b:	75 13                	jne    f0110460 <test_alloc_block_NF+0x6d5>
f011044d:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110452:	83 f8 05             	cmp    $0x5,%eax
f0110455:	75 09                	jne    f0110460 <test_alloc_block_NF+0x6d5>
f0110457:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f011045c:	85 c0                	test   %eax,%eax
f011045e:	74 17                	je     f0110477 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110460:	83 ec 04             	sub    $0x4,%esp
f0110463:	68 44 8a 13 f0       	push   $0xf0138a44
f0110468:	68 49 02 00 00       	push   $0x249
f011046d:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110472:	e8 8e fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110477:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011047e:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f0110481:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f0110488:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f011048f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110496:	83 ec 0c             	sub    $0xc,%esp
f0110499:	ff 75 d8             	pushl  -0x28(%ebp)
f011049c:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01104a2:	50                   	push   %eax
f01104a3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104a6:	50                   	push   %eax
f01104a7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01104aa:	50                   	push   %eax
f01104ab:	68 64 ed 88 f0       	push   $0xf088ed64
f01104b0:	e8 48 0d 00 00       	call   f01111fd <check_list_data>
f01104b5:	83 c4 20             	add    $0x20,%esp
f01104b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01104bb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01104bf:	74 17                	je     f01104d8 <test_alloc_block_NF+0x74d>
f01104c1:	83 ec 04             	sub    $0x4,%esp
f01104c4:	68 a8 8a 13 f0       	push   $0xf0138aa8
f01104c9:	68 51 02 00 00       	push   $0x251
f01104ce:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01104d3:	e8 2d fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01104d8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01104de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01104e1:	74 17                	je     f01104fa <test_alloc_block_NF+0x76f>
f01104e3:	83 ec 04             	sub    $0x4,%esp
f01104e6:	68 f4 8a 13 f0       	push   $0xf0138af4
f01104eb:	68 52 02 00 00       	push   $0x252
f01104f0:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01104f5:	e8 0b fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f01104fa:	83 ec 0c             	sub    $0xc,%esp
f01104fd:	68 00 04 00 00       	push   $0x400
f0110502:	e8 b2 23 02 00       	call   f01328b9 <alloc_block_NF>
f0110507:	83 c4 10             	add    $0x10,%esp
f011050a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f011050d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110511:	74 1a                	je     f011052d <test_alloc_block_NF+0x7a2>
f0110513:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110516:	8b 40 0c             	mov    0xc(%eax),%eax
f0110519:	3d 00 04 00 00       	cmp    $0x400,%eax
f011051e:	75 0d                	jne    f011052d <test_alloc_block_NF+0x7a2>
f0110520:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110523:	8b 40 08             	mov    0x8(%eax),%eax
f0110526:	3d 00 20 00 00       	cmp    $0x2000,%eax
f011052b:	74 17                	je     f0110544 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011052d:	83 ec 04             	sub    $0x4,%esp
f0110530:	68 00 8a 13 f0       	push   $0xf0138a00
f0110535:	68 5b 02 00 00       	push   $0x25b
f011053a:	68 f4 7f 13 f0       	push   $0xf0137ff4
f011053f:	e8 c1 fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110544:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110549:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011054c:	83 ea 03             	sub    $0x3,%edx
f011054f:	39 d0                	cmp    %edx,%eax
f0110551:	75 13                	jne    f0110566 <test_alloc_block_NF+0x7db>
f0110553:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110558:	83 f8 05             	cmp    $0x5,%eax
f011055b:	75 09                	jne    f0110566 <test_alloc_block_NF+0x7db>
f011055d:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110562:	85 c0                	test   %eax,%eax
f0110564:	74 17                	je     f011057d <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110566:	83 ec 04             	sub    $0x4,%esp
f0110569:	68 44 8a 13 f0       	push   $0xf0138a44
f011056e:	68 5f 02 00 00       	push   $0x25f
f0110573:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110578:	e8 88 fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011057d:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110584:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f0110587:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f011058e:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f0110595:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011059c:	83 ec 0c             	sub    $0xc,%esp
f011059f:	ff 75 d8             	pushl  -0x28(%ebp)
f01105a2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01105a8:	50                   	push   %eax
f01105a9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105ac:	50                   	push   %eax
f01105ad:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01105b0:	50                   	push   %eax
f01105b1:	68 64 ed 88 f0       	push   $0xf088ed64
f01105b6:	e8 42 0c 00 00       	call   f01111fd <check_list_data>
f01105bb:	83 c4 20             	add    $0x20,%esp
f01105be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01105c1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01105c5:	74 17                	je     f01105de <test_alloc_block_NF+0x853>
f01105c7:	83 ec 04             	sub    $0x4,%esp
f01105ca:	68 a8 8a 13 f0       	push   $0xf0138aa8
f01105cf:	68 67 02 00 00       	push   $0x267
f01105d4:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01105d9:	e8 27 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01105de:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01105e4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01105e7:	74 17                	je     f0110600 <test_alloc_block_NF+0x875>
f01105e9:	83 ec 04             	sub    $0x4,%esp
f01105ec:	68 f4 8a 13 f0       	push   $0xf0138af4
f01105f1:	68 68 02 00 00       	push   $0x268
f01105f6:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01105fb:	e8 05 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f0110600:	83 ec 0c             	sub    $0xc,%esp
f0110603:	68 40 8b 13 f0       	push   $0xf0138b40
f0110608:	e8 01 07 ff ff       	call   f0100d0e <cprintf>
f011060d:	83 c4 10             	add    $0x10,%esp

}
f0110610:	90                   	nop
f0110611:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110614:	5b                   	pop    %ebx
f0110615:	5e                   	pop    %esi
f0110616:	5f                   	pop    %edi
f0110617:	5d                   	pop    %ebp
f0110618:	c3                   	ret    

f0110619 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110619:	55                   	push   %ebp
f011061a:	89 e5                	mov    %esp,%ebp
f011061c:	57                   	push   %edi
f011061d:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110623:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f011062a:	83 ec 0c             	sub    $0xc,%esp
f011062d:	ff 75 f4             	pushl  -0xc(%ebp)
f0110630:	e8 e4 1a 02 00       	call   f0132119 <initialize_MemBlocksList>
f0110635:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110638:	c7 05 c8 ec 88 f0 00 	movl   $0x0,0xf088ecc8
f011063f:	00 00 00 
f0110642:	c7 05 cc ec 88 f0 00 	movl   $0x0,0xf088eccc
f0110649:	00 00 00 
f011064c:	c7 05 d4 ec 88 f0 00 	movl   $0x0,0xf088ecd4
f0110653:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110656:	c7 05 64 ed 88 f0 00 	movl   $0x0,0xf088ed64
f011065d:	00 00 00 
f0110660:	c7 05 68 ed 88 f0 00 	movl   $0x0,0xf088ed68
f0110667:	00 00 00 
f011066a:	c7 05 70 ed 88 f0 00 	movl   $0x0,0xf088ed70
f0110671:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f0110674:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0110677:	b9 0a 00 00 00       	mov    $0xa,%ecx
f011067c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110681:	89 d7                	mov    %edx,%edi
f0110683:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f0110685:	8d 55 98             	lea    -0x68(%ebp),%edx
f0110688:	b9 0a 00 00 00       	mov    $0xa,%ecx
f011068d:	b8 00 00 00 00       	mov    $0x0,%eax
f0110692:	89 d7                	mov    %edx,%edi
f0110694:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110696:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f011069d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f01106a4:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f01106ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106ae:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f01106b5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01106b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106b9:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01106c0:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01106c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106c4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01106c8:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f01106cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106ce:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01106d2:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f01106d5:	83 ec 0c             	sub    $0xc,%esp
f01106d8:	8d 45 84             	lea    -0x7c(%ebp),%eax
f01106db:	50                   	push   %eax
f01106dc:	e8 a5 27 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f01106e1:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01106e4:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01106e9:	85 c0                	test   %eax,%eax
f01106eb:	75 14                	jne    f0110701 <test_insert_sorted_with_merge_freeList+0xe8>
f01106ed:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01106f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01106f5:	75 0a                	jne    f0110701 <test_insert_sorted_with_merge_freeList+0xe8>
f01106f7:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01106fc:	83 f8 01             	cmp    $0x1,%eax
f01106ff:	74 17                	je     f0110718 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110701:	83 ec 04             	sub    $0x4,%esp
f0110704:	68 a0 8b 13 f0       	push   $0xf0138ba0
f0110709:	68 88 02 00 00       	push   $0x288
f011070e:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110713:	e8 ed fa fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110718:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f011071f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110726:	83 ec 0c             	sub    $0xc,%esp
f0110729:	ff 75 f0             	pushl  -0x10(%ebp)
f011072c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011072f:	50                   	push   %eax
f0110730:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110733:	50                   	push   %eax
f0110734:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110737:	50                   	push   %eax
f0110738:	68 64 ed 88 f0       	push   $0xf088ed64
f011073d:	e8 bb 0a 00 00       	call   f01111fd <check_list_data>
f0110742:	83 c4 20             	add    $0x20,%esp
f0110745:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110748:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011074c:	74 17                	je     f0110765 <test_insert_sorted_with_merge_freeList+0x14c>
f011074e:	83 ec 04             	sub    $0x4,%esp
f0110751:	68 0c 8c 13 f0       	push   $0xf0138c0c
f0110756:	68 8e 02 00 00       	push   $0x28e
f011075b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110760:	e8 a0 fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110765:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110768:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011076b:	74 17                	je     f0110784 <test_insert_sorted_with_merge_freeList+0x16b>
f011076d:	83 ec 04             	sub    $0x4,%esp
f0110770:	68 60 8c 13 f0       	push   $0xf0138c60
f0110775:	68 8f 02 00 00       	push   $0x28f
f011077a:	68 f4 7f 13 f0       	push   $0xf0137ff4
f011077f:	e8 81 fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110784:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f011078b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011078e:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110795:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110796:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110799:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f01107a0:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01107a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107a4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01107a8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f01107ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107b1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01107b5:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f01107b8:	83 ec 0c             	sub    $0xc,%esp
f01107bb:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01107c1:	50                   	push   %eax
f01107c2:	e8 bf 26 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f01107c7:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f01107ca:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01107cf:	85 c0                	test   %eax,%eax
f01107d1:	75 14                	jne    f01107e7 <test_insert_sorted_with_merge_freeList+0x1ce>
f01107d3:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01107d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01107db:	75 0a                	jne    f01107e7 <test_insert_sorted_with_merge_freeList+0x1ce>
f01107dd:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01107e2:	83 f8 02             	cmp    $0x2,%eax
f01107e5:	74 17                	je     f01107fe <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01107e7:	83 ec 04             	sub    $0x4,%esp
f01107ea:	68 a0 8b 13 f0       	push   $0xf0138ba0
f01107ef:	68 9e 02 00 00       	push   $0x29e
f01107f4:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01107f9:	e8 07 fa fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01107fe:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110805:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011080c:	83 ec 0c             	sub    $0xc,%esp
f011080f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110812:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110815:	50                   	push   %eax
f0110816:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110819:	50                   	push   %eax
f011081a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011081d:	50                   	push   %eax
f011081e:	68 64 ed 88 f0       	push   $0xf088ed64
f0110823:	e8 d5 09 00 00       	call   f01111fd <check_list_data>
f0110828:	83 c4 20             	add    $0x20,%esp
f011082b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011082e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110832:	74 17                	je     f011084b <test_insert_sorted_with_merge_freeList+0x232>
f0110834:	83 ec 04             	sub    $0x4,%esp
f0110837:	68 0c 8c 13 f0       	push   $0xf0138c0c
f011083c:	68 a4 02 00 00       	push   $0x2a4
f0110841:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110846:	e8 ba f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011084b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011084e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110851:	74 17                	je     f011086a <test_insert_sorted_with_merge_freeList+0x251>
f0110853:	83 ec 04             	sub    $0x4,%esp
f0110856:	68 60 8c 13 f0       	push   $0xf0138c60
f011085b:	68 a5 02 00 00       	push   $0x2a5
f0110860:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110865:	e8 9b f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f011086a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f0110871:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110874:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f011087b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011087c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011087f:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110886:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110887:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011088a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011088e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110894:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110897:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011089b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f01108a1:	83 ec 0c             	sub    $0xc,%esp
f01108a4:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f01108aa:	50                   	push   %eax
f01108ab:	e8 d6 25 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f01108b0:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01108b3:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01108b8:	85 c0                	test   %eax,%eax
f01108ba:	75 14                	jne    f01108d0 <test_insert_sorted_with_merge_freeList+0x2b7>
f01108bc:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01108c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01108c4:	75 0a                	jne    f01108d0 <test_insert_sorted_with_merge_freeList+0x2b7>
f01108c6:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01108cb:	83 f8 03             	cmp    $0x3,%eax
f01108ce:	74 17                	je     f01108e7 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01108d0:	83 ec 04             	sub    $0x4,%esp
f01108d3:	68 a0 8b 13 f0       	push   $0xf0138ba0
f01108d8:	68 b4 02 00 00       	push   $0x2b4
f01108dd:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01108e2:	e8 1e f9 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01108e7:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01108ee:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01108f5:	83 ec 0c             	sub    $0xc,%esp
f01108f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01108fb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108fe:	50                   	push   %eax
f01108ff:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110902:	50                   	push   %eax
f0110903:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110906:	50                   	push   %eax
f0110907:	68 64 ed 88 f0       	push   $0xf088ed64
f011090c:	e8 ec 08 00 00       	call   f01111fd <check_list_data>
f0110911:	83 c4 20             	add    $0x20,%esp
f0110914:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110917:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011091b:	74 17                	je     f0110934 <test_insert_sorted_with_merge_freeList+0x31b>
f011091d:	83 ec 04             	sub    $0x4,%esp
f0110920:	68 0c 8c 13 f0       	push   $0xf0138c0c
f0110925:	68 ba 02 00 00       	push   $0x2ba
f011092a:	68 f4 7f 13 f0       	push   $0xf0137ff4
f011092f:	e8 d1 f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110934:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110937:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011093a:	74 17                	je     f0110953 <test_insert_sorted_with_merge_freeList+0x33a>
f011093c:	83 ec 04             	sub    $0x4,%esp
f011093f:	68 60 8c 13 f0       	push   $0xf0138c60
f0110944:	68 bb 02 00 00       	push   $0x2bb
f0110949:	68 f4 7f 13 f0       	push   $0xf0137ff4
f011094e:	e8 b2 f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110953:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f011095a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011095d:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110964:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110965:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110968:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f011096f:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110970:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110973:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110977:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f011097d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110980:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110984:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f011098a:	83 ec 0c             	sub    $0xc,%esp
f011098d:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110993:	50                   	push   %eax
f0110994:	e8 ed 24 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f0110999:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011099c:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01109a1:	85 c0                	test   %eax,%eax
f01109a3:	75 14                	jne    f01109b9 <test_insert_sorted_with_merge_freeList+0x3a0>
f01109a5:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01109aa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01109ad:	75 0a                	jne    f01109b9 <test_insert_sorted_with_merge_freeList+0x3a0>
f01109af:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01109b4:	83 f8 04             	cmp    $0x4,%eax
f01109b7:	74 17                	je     f01109d0 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01109b9:	83 ec 04             	sub    $0x4,%esp
f01109bc:	68 a0 8b 13 f0       	push   $0xf0138ba0
f01109c1:	68 ca 02 00 00       	push   $0x2ca
f01109c6:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01109cb:	e8 35 f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01109d0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01109d7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01109de:	83 ec 0c             	sub    $0xc,%esp
f01109e1:	ff 75 f0             	pushl  -0x10(%ebp)
f01109e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01109e7:	50                   	push   %eax
f01109e8:	8d 45 98             	lea    -0x68(%ebp),%eax
f01109eb:	50                   	push   %eax
f01109ec:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01109ef:	50                   	push   %eax
f01109f0:	68 64 ed 88 f0       	push   $0xf088ed64
f01109f5:	e8 03 08 00 00       	call   f01111fd <check_list_data>
f01109fa:	83 c4 20             	add    $0x20,%esp
f01109fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110a00:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110a04:	74 17                	je     f0110a1d <test_insert_sorted_with_merge_freeList+0x404>
f0110a06:	83 ec 04             	sub    $0x4,%esp
f0110a09:	68 0c 8c 13 f0       	push   $0xf0138c0c
f0110a0e:	68 d0 02 00 00       	push   $0x2d0
f0110a13:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110a18:	e8 e8 f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110a1d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a20:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110a23:	74 17                	je     f0110a3c <test_insert_sorted_with_merge_freeList+0x423>
f0110a25:	83 ec 04             	sub    $0x4,%esp
f0110a28:	68 60 8c 13 f0       	push   $0xf0138c60
f0110a2d:	68 d1 02 00 00       	push   $0x2d1
f0110a32:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110a37:	e8 c9 f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110a3c:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a46:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110a4d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110a4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a51:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110a58:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a5c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110a60:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110a66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a69:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a6d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110a73:	83 ec 0c             	sub    $0xc,%esp
f0110a76:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110a7c:	50                   	push   %eax
f0110a7d:	e8 04 24 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f0110a82:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110a85:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110a8a:	85 c0                	test   %eax,%eax
f0110a8c:	75 17                	jne    f0110aa5 <test_insert_sorted_with_merge_freeList+0x48c>
f0110a8e:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110a93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110a96:	42                   	inc    %edx
f0110a97:	39 d0                	cmp    %edx,%eax
f0110a99:	75 0a                	jne    f0110aa5 <test_insert_sorted_with_merge_freeList+0x48c>
f0110a9b:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110aa0:	83 f8 04             	cmp    $0x4,%eax
f0110aa3:	74 17                	je     f0110abc <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110aa5:	83 ec 04             	sub    $0x4,%esp
f0110aa8:	68 a0 8b 13 f0       	push   $0xf0138ba0
f0110aad:	68 e3 02 00 00       	push   $0x2e3
f0110ab2:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110ab7:	e8 49 f7 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110abc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110ac3:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110aca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110acd:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110ad0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ad3:	48                   	dec    %eax
f0110ad4:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110ad8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110adb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110adf:	01 c8                	add    %ecx,%eax
f0110ae1:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110ae5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ae8:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110aef:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110af0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110af3:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110afa:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110afb:	83 ec 0c             	sub    $0xc,%esp
f0110afe:	ff 75 f0             	pushl  -0x10(%ebp)
f0110b01:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b04:	50                   	push   %eax
f0110b05:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110b08:	50                   	push   %eax
f0110b09:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b0c:	50                   	push   %eax
f0110b0d:	68 64 ed 88 f0       	push   $0xf088ed64
f0110b12:	e8 e6 06 00 00       	call   f01111fd <check_list_data>
f0110b17:	83 c4 20             	add    $0x20,%esp
f0110b1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b1d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b21:	74 17                	je     f0110b3a <test_insert_sorted_with_merge_freeList+0x521>
f0110b23:	83 ec 04             	sub    $0x4,%esp
f0110b26:	68 0c 8c 13 f0       	push   $0xf0138c0c
f0110b2b:	68 ec 02 00 00       	push   $0x2ec
f0110b30:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110b35:	e8 cb f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b3a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b40:	74 17                	je     f0110b59 <test_insert_sorted_with_merge_freeList+0x540>
f0110b42:	83 ec 04             	sub    $0x4,%esp
f0110b45:	68 60 8c 13 f0       	push   $0xf0138c60
f0110b4a:	68 ed 02 00 00       	push   $0x2ed
f0110b4f:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110b54:	e8 ac f6 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110b59:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110b60:	83 ec 0c             	sub    $0xc,%esp
f0110b63:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b66:	50                   	push   %eax
f0110b67:	e8 5d 07 00 00       	call   f01112c9 <check_avaliable_list_data>
f0110b6c:	83 c4 10             	add    $0x10,%esp
f0110b6f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110b75:	8d 50 01             	lea    0x1(%eax),%edx
f0110b78:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b7b:	39 c2                	cmp    %eax,%edx
f0110b7d:	74 17                	je     f0110b96 <test_insert_sorted_with_merge_freeList+0x57d>
f0110b7f:	83 ec 04             	sub    $0x4,%esp
f0110b82:	68 b4 8c 13 f0       	push   $0xf0138cb4
f0110b87:	68 f2 02 00 00       	push   $0x2f2
f0110b8c:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110b91:	e8 6f f6 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110b96:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b9a:	74 17                	je     f0110bb3 <test_insert_sorted_with_merge_freeList+0x59a>
f0110b9c:	83 ec 04             	sub    $0x4,%esp
f0110b9f:	68 0c 8d 13 f0       	push   $0xf0138d0c
f0110ba4:	68 f3 02 00 00       	push   $0x2f3
f0110ba9:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110bae:	e8 52 f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110bb3:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110bba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bbd:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110bc4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110bc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bc8:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110bcf:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110bd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bd3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110bd7:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110bdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110be0:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110be4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110bea:	83 ec 0c             	sub    $0xc,%esp
f0110bed:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110bf3:	50                   	push   %eax
f0110bf4:	e8 8d 22 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f0110bf9:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110bfc:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110c01:	85 c0                	test   %eax,%eax
f0110c03:	75 19                	jne    f0110c1e <test_insert_sorted_with_merge_freeList+0x605>
f0110c05:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110c0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110c0d:	83 c2 02             	add    $0x2,%edx
f0110c10:	39 d0                	cmp    %edx,%eax
f0110c12:	75 0a                	jne    f0110c1e <test_insert_sorted_with_merge_freeList+0x605>
f0110c14:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110c19:	83 f8 04             	cmp    $0x4,%eax
f0110c1c:	74 17                	je     f0110c35 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c1e:	83 ec 04             	sub    $0x4,%esp
f0110c21:	68 a0 8b 13 f0       	push   $0xf0138ba0
f0110c26:	68 05 03 00 00       	push   $0x305
f0110c2b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110c30:	e8 d0 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c35:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110c3c:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110c43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c46:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110c49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c4c:	48                   	dec    %eax
f0110c4d:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110c51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c54:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c58:	01 c8                	add    %ecx,%eax
f0110c5a:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110c5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c61:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110c68:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110c69:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c6c:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110c73:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110c74:	83 ec 0c             	sub    $0xc,%esp
f0110c77:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c7a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c7d:	50                   	push   %eax
f0110c7e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110c81:	50                   	push   %eax
f0110c82:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110c85:	50                   	push   %eax
f0110c86:	68 64 ed 88 f0       	push   $0xf088ed64
f0110c8b:	e8 6d 05 00 00       	call   f01111fd <check_list_data>
f0110c90:	83 c4 20             	add    $0x20,%esp
f0110c93:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c96:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c9a:	74 17                	je     f0110cb3 <test_insert_sorted_with_merge_freeList+0x69a>
f0110c9c:	83 ec 04             	sub    $0x4,%esp
f0110c9f:	68 0c 8c 13 f0       	push   $0xf0138c0c
f0110ca4:	68 0e 03 00 00       	push   $0x30e
f0110ca9:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110cae:	e8 52 f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110cb3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110cb6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110cb9:	74 17                	je     f0110cd2 <test_insert_sorted_with_merge_freeList+0x6b9>
f0110cbb:	83 ec 04             	sub    $0x4,%esp
f0110cbe:	68 60 8c 13 f0       	push   $0xf0138c60
f0110cc3:	68 0f 03 00 00       	push   $0x30f
f0110cc8:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110ccd:	e8 33 f5 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110cd2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110cd9:	83 ec 0c             	sub    $0xc,%esp
f0110cdc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110cdf:	50                   	push   %eax
f0110ce0:	e8 e4 05 00 00       	call   f01112c9 <check_avaliable_list_data>
f0110ce5:	83 c4 10             	add    $0x10,%esp
f0110ce8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110cee:	8d 50 02             	lea    0x2(%eax),%edx
f0110cf1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110cf4:	39 c2                	cmp    %eax,%edx
f0110cf6:	74 17                	je     f0110d0f <test_insert_sorted_with_merge_freeList+0x6f6>
f0110cf8:	83 ec 04             	sub    $0x4,%esp
f0110cfb:	68 b4 8c 13 f0       	push   $0xf0138cb4
f0110d00:	68 14 03 00 00       	push   $0x314
f0110d05:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110d0a:	e8 f6 f4 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110d0f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d13:	74 17                	je     f0110d2c <test_insert_sorted_with_merge_freeList+0x713>
f0110d15:	83 ec 04             	sub    $0x4,%esp
f0110d18:	68 0c 8d 13 f0       	push   $0xf0138d0c
f0110d1d:	68 15 03 00 00       	push   $0x315
f0110d22:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110d27:	e8 d9 f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110d2c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110d33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d36:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110d3d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110d3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d41:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110d48:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110d49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d4c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110d50:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110d56:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d59:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110d5d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0110d63:	83 ec 0c             	sub    $0xc,%esp
f0110d66:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0110d6c:	50                   	push   %eax
f0110d6d:	e8 14 21 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f0110d72:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110d75:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110d7a:	85 c0                	test   %eax,%eax
f0110d7c:	75 19                	jne    f0110d97 <test_insert_sorted_with_merge_freeList+0x77e>
f0110d7e:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110d83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110d86:	83 c2 03             	add    $0x3,%edx
f0110d89:	39 d0                	cmp    %edx,%eax
f0110d8b:	75 0a                	jne    f0110d97 <test_insert_sorted_with_merge_freeList+0x77e>
f0110d8d:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110d92:	83 f8 04             	cmp    $0x4,%eax
f0110d95:	74 17                	je     f0110dae <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110d97:	83 ec 04             	sub    $0x4,%esp
f0110d9a:	68 a0 8b 13 f0       	push   $0xf0138ba0
f0110d9f:	68 28 03 00 00       	push   $0x328
f0110da4:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110da9:	e8 57 f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110dae:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110db5:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110dbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dbf:	8d 50 01             	lea    0x1(%eax),%edx
f0110dc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dc5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110dc9:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110dcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dd0:	8d 50 01             	lea    0x1(%eax),%edx
f0110dd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dd6:	40                   	inc    %eax
f0110dd7:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110ddb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dde:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110de2:	01 c8                	add    %ecx,%eax
f0110de4:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110de8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110deb:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110df2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110df3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110df6:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110dfd:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110dfe:	83 ec 0c             	sub    $0xc,%esp
f0110e01:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e04:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e07:	50                   	push   %eax
f0110e08:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110e0b:	50                   	push   %eax
f0110e0c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e0f:	50                   	push   %eax
f0110e10:	68 64 ed 88 f0       	push   $0xf088ed64
f0110e15:	e8 e3 03 00 00       	call   f01111fd <check_list_data>
f0110e1a:	83 c4 20             	add    $0x20,%esp
f0110e1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e20:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e24:	74 17                	je     f0110e3d <test_insert_sorted_with_merge_freeList+0x824>
f0110e26:	83 ec 04             	sub    $0x4,%esp
f0110e29:	68 0c 8c 13 f0       	push   $0xf0138c0c
f0110e2e:	68 32 03 00 00       	push   $0x332
f0110e33:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110e38:	e8 c8 f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110e3d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e43:	74 17                	je     f0110e5c <test_insert_sorted_with_merge_freeList+0x843>
f0110e45:	83 ec 04             	sub    $0x4,%esp
f0110e48:	68 60 8c 13 f0       	push   $0xf0138c60
f0110e4d:	68 33 03 00 00       	push   $0x333
f0110e52:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110e57:	e8 a9 f3 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110e5c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110e63:	83 ec 0c             	sub    $0xc,%esp
f0110e66:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e69:	50                   	push   %eax
f0110e6a:	e8 5a 04 00 00       	call   f01112c9 <check_avaliable_list_data>
f0110e6f:	83 c4 10             	add    $0x10,%esp
f0110e72:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110e75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110e78:	8d 50 03             	lea    0x3(%eax),%edx
f0110e7b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e7e:	39 c2                	cmp    %eax,%edx
f0110e80:	74 17                	je     f0110e99 <test_insert_sorted_with_merge_freeList+0x880>
f0110e82:	83 ec 04             	sub    $0x4,%esp
f0110e85:	68 b4 8c 13 f0       	push   $0xf0138cb4
f0110e8a:	68 38 03 00 00       	push   $0x338
f0110e8f:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110e94:	e8 6c f3 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110e99:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e9d:	74 17                	je     f0110eb6 <test_insert_sorted_with_merge_freeList+0x89d>
f0110e9f:	83 ec 04             	sub    $0x4,%esp
f0110ea2:	68 0c 8d 13 f0       	push   $0xf0138d0c
f0110ea7:	68 39 03 00 00       	push   $0x339
f0110eac:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110eb1:	e8 4f f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110eb6:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110ebd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ec0:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110ec7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110ec8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ecb:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110ed2:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110ed3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ed6:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110eda:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110ee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ee3:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ee7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110eed:	83 ec 0c             	sub    $0xc,%esp
f0110ef0:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110ef6:	50                   	push   %eax
f0110ef7:	e8 8a 1f 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f0110efc:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110eff:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0110f04:	85 c0                	test   %eax,%eax
f0110f06:	75 19                	jne    f0110f21 <test_insert_sorted_with_merge_freeList+0x908>
f0110f08:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0110f0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110f10:	83 c2 04             	add    $0x4,%edx
f0110f13:	39 d0                	cmp    %edx,%eax
f0110f15:	75 0a                	jne    f0110f21 <test_insert_sorted_with_merge_freeList+0x908>
f0110f17:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0110f1c:	83 f8 04             	cmp    $0x4,%eax
f0110f1f:	74 17                	je     f0110f38 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110f21:	83 ec 04             	sub    $0x4,%esp
f0110f24:	68 a0 8b 13 f0       	push   $0xf0138ba0
f0110f29:	68 4c 03 00 00       	push   $0x34c
f0110f2e:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110f33:	e8 cd f2 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110f38:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110f3f:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110f46:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f49:	8d 50 01             	lea    0x1(%eax),%edx
f0110f4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f4f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110f53:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110f57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f5a:	8d 50 01             	lea    0x1(%eax),%edx
f0110f5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f60:	40                   	inc    %eax
f0110f61:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110f65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f68:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f6c:	01 c8                	add    %ecx,%eax
f0110f6e:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110f72:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f75:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110f7c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110f7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f80:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110f87:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110f88:	83 ec 0c             	sub    $0xc,%esp
f0110f8b:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f8e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110f91:	50                   	push   %eax
f0110f92:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110f95:	50                   	push   %eax
f0110f96:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110f99:	50                   	push   %eax
f0110f9a:	68 64 ed 88 f0       	push   $0xf088ed64
f0110f9f:	e8 59 02 00 00       	call   f01111fd <check_list_data>
f0110fa4:	83 c4 20             	add    $0x20,%esp
f0110fa7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110faa:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110fae:	74 17                	je     f0110fc7 <test_insert_sorted_with_merge_freeList+0x9ae>
f0110fb0:	83 ec 04             	sub    $0x4,%esp
f0110fb3:	68 0c 8c 13 f0       	push   $0xf0138c0c
f0110fb8:	68 56 03 00 00       	push   $0x356
f0110fbd:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110fc2:	e8 3e f2 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110fc7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110fcd:	74 17                	je     f0110fe6 <test_insert_sorted_with_merge_freeList+0x9cd>
f0110fcf:	83 ec 04             	sub    $0x4,%esp
f0110fd2:	68 60 8c 13 f0       	push   $0xf0138c60
f0110fd7:	68 57 03 00 00       	push   $0x357
f0110fdc:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110fe1:	e8 1f f2 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110fe6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110fed:	83 ec 0c             	sub    $0xc,%esp
f0110ff0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ff3:	50                   	push   %eax
f0110ff4:	e8 d0 02 00 00       	call   f01112c9 <check_avaliable_list_data>
f0110ff9:	83 c4 10             	add    $0x10,%esp
f0110ffc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111002:	8d 50 04             	lea    0x4(%eax),%edx
f0111005:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111008:	39 c2                	cmp    %eax,%edx
f011100a:	74 17                	je     f0111023 <test_insert_sorted_with_merge_freeList+0xa0a>
f011100c:	83 ec 04             	sub    $0x4,%esp
f011100f:	68 b4 8c 13 f0       	push   $0xf0138cb4
f0111014:	68 5c 03 00 00       	push   $0x35c
f0111019:	68 f4 7f 13 f0       	push   $0xf0137ff4
f011101e:	e8 e2 f1 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111023:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111027:	74 17                	je     f0111040 <test_insert_sorted_with_merge_freeList+0xa27>
f0111029:	83 ec 04             	sub    $0x4,%esp
f011102c:	68 0c 8d 13 f0       	push   $0xf0138d0c
f0111031:	68 5d 03 00 00       	push   $0x35d
f0111036:	68 f4 7f 13 f0       	push   $0xf0137ff4
f011103b:	e8 c5 f1 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0111040:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0111047:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011104a:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0111051:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0111052:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111055:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f011105c:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011105d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111060:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111064:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f011106a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011106d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111071:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0111077:	83 ec 0c             	sub    $0xc,%esp
f011107a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111080:	50                   	push   %eax
f0111081:	e8 00 1e 02 00       	call   f0132e86 <insert_sorted_with_merge_freeList>
f0111086:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0111089:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f011108e:	85 c0                	test   %eax,%eax
f0111090:	75 19                	jne    f01110ab <test_insert_sorted_with_merge_freeList+0xa92>
f0111092:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0111097:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011109a:	83 c2 06             	add    $0x6,%edx
f011109d:	39 d0                	cmp    %edx,%eax
f011109f:	75 0a                	jne    f01110ab <test_insert_sorted_with_merge_freeList+0xa92>
f01110a1:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01110a6:	83 f8 03             	cmp    $0x3,%eax
f01110a9:	74 17                	je     f01110c2 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01110ab:	83 ec 04             	sub    $0x4,%esp
f01110ae:	68 a0 8b 13 f0       	push   $0xf0138ba0
f01110b3:	68 70 03 00 00       	push   $0x370
f01110b8:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01110bd:	e8 43 f1 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01110c2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01110c9:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f01110d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110d3:	48                   	dec    %eax
f01110d4:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01110db:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f01110dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110df:	8d 50 ff             	lea    -0x1(%eax),%edx
f01110e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110e5:	48                   	dec    %eax
f01110e6:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01110ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110ed:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01110f1:	01 c1                	add    %eax,%ecx
f01110f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110f6:	40                   	inc    %eax
f01110f7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01110fb:	01 c8                	add    %ecx,%eax
f01110fd:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111101:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111104:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011110b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011110c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011110f:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111116:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0111117:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011111a:	40                   	inc    %eax
f011111b:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111122:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0111123:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111126:	40                   	inc    %eax
f0111127:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011112e:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011112f:	83 ec 0c             	sub    $0xc,%esp
f0111132:	ff 75 f0             	pushl  -0x10(%ebp)
f0111135:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111138:	50                   	push   %eax
f0111139:	8d 45 98             	lea    -0x68(%ebp),%eax
f011113c:	50                   	push   %eax
f011113d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111140:	50                   	push   %eax
f0111141:	68 64 ed 88 f0       	push   $0xf088ed64
f0111146:	e8 b2 00 00 00       	call   f01111fd <check_list_data>
f011114b:	83 c4 20             	add    $0x20,%esp
f011114e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111151:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111155:	74 17                	je     f011116e <test_insert_sorted_with_merge_freeList+0xb55>
f0111157:	83 ec 04             	sub    $0x4,%esp
f011115a:	68 0c 8c 13 f0       	push   $0xf0138c0c
f011115f:	68 7c 03 00 00       	push   $0x37c
f0111164:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0111169:	e8 97 f0 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011116e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111171:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111174:	74 17                	je     f011118d <test_insert_sorted_with_merge_freeList+0xb74>
f0111176:	83 ec 04             	sub    $0x4,%esp
f0111179:	68 60 8c 13 f0       	push   $0xf0138c60
f011117e:	68 7d 03 00 00       	push   $0x37d
f0111183:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0111188:	e8 78 f0 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011118d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111194:	83 ec 0c             	sub    $0xc,%esp
f0111197:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011119a:	50                   	push   %eax
f011119b:	e8 29 01 00 00       	call   f01112c9 <check_avaliable_list_data>
f01111a0:	83 c4 10             	add    $0x10,%esp
f01111a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01111a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01111a9:	8d 50 06             	lea    0x6(%eax),%edx
f01111ac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01111af:	39 c2                	cmp    %eax,%edx
f01111b1:	74 17                	je     f01111ca <test_insert_sorted_with_merge_freeList+0xbb1>
f01111b3:	83 ec 04             	sub    $0x4,%esp
f01111b6:	68 b4 8c 13 f0       	push   $0xf0138cb4
f01111bb:	68 82 03 00 00       	push   $0x382
f01111c0:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01111c5:	e8 3b f0 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01111ca:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01111ce:	74 17                	je     f01111e7 <test_insert_sorted_with_merge_freeList+0xbce>
f01111d0:	83 ec 04             	sub    $0x4,%esp
f01111d3:	68 0c 8d 13 f0       	push   $0xf0138d0c
f01111d8:	68 83 03 00 00       	push   $0x383
f01111dd:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01111e2:	e8 1e f0 fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f01111e7:	83 ec 0c             	sub    $0xc,%esp
f01111ea:	68 68 8d 13 f0       	push   $0xf0138d68
f01111ef:	e8 1a fb fe ff       	call   f0100d0e <cprintf>
f01111f4:	83 c4 10             	add    $0x10,%esp

}
f01111f7:	90                   	nop
f01111f8:	8b 7d fc             	mov    -0x4(%ebp),%edi
f01111fb:	c9                   	leave  
f01111fc:	c3                   	ret    

f01111fd <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f01111fd:	55                   	push   %ebp
f01111fe:	89 e5                	mov    %esp,%ebp
f0111200:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111203:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011120a:	8b 45 14             	mov    0x14(%ebp),%eax
f011120d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0111213:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f011121a:	8b 45 08             	mov    0x8(%ebp),%eax
f011121d:	8b 00                	mov    (%eax),%eax
f011121f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111222:	eb 6e                	jmp    f0111292 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0111224:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0111227:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011122a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111231:	8b 45 10             	mov    0x10(%ebp),%eax
f0111234:	01 d0                	add    %edx,%eax
f0111236:	8b 00                	mov    (%eax),%eax
f0111238:	85 c0                	test   %eax,%eax
f011123a:	74 e8                	je     f0111224 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f011123c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011123f:	8b 50 08             	mov    0x8(%eax),%edx
f0111242:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111245:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011124c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011124f:	01 c8                	add    %ecx,%eax
f0111251:	8b 00                	mov    (%eax),%eax
f0111253:	39 c2                	cmp    %eax,%edx
f0111255:	75 1b                	jne    f0111272 <check_list_data+0x75>
f0111257:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011125a:	8b 50 0c             	mov    0xc(%eax),%edx
f011125d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111260:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111267:	8b 45 10             	mov    0x10(%ebp),%eax
f011126a:	01 c8                	add    %ecx,%eax
f011126c:	8b 00                	mov    (%eax),%eax
f011126e:	39 c2                	cmp    %eax,%edx
f0111270:	74 07                	je     f0111279 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0111272:	b8 00 00 00 00       	mov    $0x0,%eax
f0111277:	eb 4e                	jmp    f01112c7 <check_list_data+0xca>
		}
		(*size)++;
f0111279:	8b 45 14             	mov    0x14(%ebp),%eax
f011127c:	8b 00                	mov    (%eax),%eax
f011127e:	8d 50 01             	lea    0x1(%eax),%edx
f0111281:	8b 45 14             	mov    0x14(%ebp),%eax
f0111284:	89 10                	mov    %edx,(%eax)
		i++;
f0111286:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0111289:	8b 45 08             	mov    0x8(%ebp),%eax
f011128c:	8b 40 08             	mov    0x8(%eax),%eax
f011128f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111292:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111296:	74 07                	je     f011129f <check_list_data+0xa2>
f0111298:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011129b:	8b 00                	mov    (%eax),%eax
f011129d:	eb 05                	jmp    f01112a4 <check_list_data+0xa7>
f011129f:	b8 00 00 00 00       	mov    $0x0,%eax
f01112a4:	8b 55 08             	mov    0x8(%ebp),%edx
f01112a7:	89 42 08             	mov    %eax,0x8(%edx)
f01112aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01112ad:	8b 40 08             	mov    0x8(%eax),%eax
f01112b0:	85 c0                	test   %eax,%eax
f01112b2:	0f 85 6f ff ff ff    	jne    f0111227 <check_list_data+0x2a>
f01112b8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01112bc:	0f 85 65 ff ff ff    	jne    f0111227 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f01112c2:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01112c7:	c9                   	leave  
f01112c8:	c3                   	ret    

f01112c9 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f01112c9:	55                   	push   %ebp
f01112ca:	89 e5                	mov    %esp,%ebp
f01112cc:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01112cf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01112d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01112d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01112df:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01112e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01112e7:	eb 30                	jmp    f0111319 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f01112e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01112ec:	8b 40 08             	mov    0x8(%eax),%eax
f01112ef:	85 c0                	test   %eax,%eax
f01112f1:	75 0a                	jne    f01112fd <check_avaliable_list_data+0x34>
f01112f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01112f6:	8b 40 0c             	mov    0xc(%eax),%eax
f01112f9:	85 c0                	test   %eax,%eax
f01112fb:	74 07                	je     f0111304 <check_avaliable_list_data+0x3b>
		{
			return 0;
f01112fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0111302:	eb 40                	jmp    f0111344 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0111304:	8b 45 08             	mov    0x8(%ebp),%eax
f0111307:	8b 00                	mov    (%eax),%eax
f0111309:	8d 50 01             	lea    0x1(%eax),%edx
f011130c:	8b 45 08             	mov    0x8(%ebp),%eax
f011130f:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111311:	a1 a0 ed 88 f0       	mov    0xf088eda0,%eax
f0111316:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111319:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011131d:	74 07                	je     f0111326 <check_avaliable_list_data+0x5d>
f011131f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111322:	8b 00                	mov    (%eax),%eax
f0111324:	eb 05                	jmp    f011132b <check_avaliable_list_data+0x62>
f0111326:	b8 00 00 00 00       	mov    $0x0,%eax
f011132b:	a3 a0 ed 88 f0       	mov    %eax,0xf088eda0
f0111330:	a1 a0 ed 88 f0       	mov    0xf088eda0,%eax
f0111335:	85 c0                	test   %eax,%eax
f0111337:	75 b0                	jne    f01112e9 <check_avaliable_list_data+0x20>
f0111339:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011133d:	75 aa                	jne    f01112e9 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f011133f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0111344:	c9                   	leave  
f0111345:	c3                   	ret    

f0111346 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0111346:	55                   	push   %ebp
f0111347:	89 e5                	mov    %esp,%ebp
f0111349:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f011134c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0111353:	8b 45 08             	mov    0x8(%ebp),%eax
f0111356:	8b 00                	mov    (%eax),%eax
f0111358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011135b:	eb 27                	jmp    f0111384 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f011135d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111360:	8b 50 0c             	mov    0xc(%eax),%edx
f0111363:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111366:	8b 40 08             	mov    0x8(%eax),%eax
f0111369:	83 ec 04             	sub    $0x4,%esp
f011136c:	52                   	push   %edx
f011136d:	50                   	push   %eax
f011136e:	68 b8 80 13 f0       	push   $0xf01380b8
f0111373:	e8 96 f9 fe ff       	call   f0100d0e <cprintf>
f0111378:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f011137b:	8b 45 08             	mov    0x8(%ebp),%eax
f011137e:	8b 40 08             	mov    0x8(%eax),%eax
f0111381:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111384:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111388:	74 07                	je     f0111391 <show_list_content+0x4b>
f011138a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011138d:	8b 00                	mov    (%eax),%eax
f011138f:	eb 05                	jmp    f0111396 <show_list_content+0x50>
f0111391:	b8 00 00 00 00       	mov    $0x0,%eax
f0111396:	8b 55 08             	mov    0x8(%ebp),%edx
f0111399:	89 42 08             	mov    %eax,0x8(%edx)
f011139c:	8b 45 08             	mov    0x8(%ebp),%eax
f011139f:	8b 40 08             	mov    0x8(%eax),%eax
f01113a2:	85 c0                	test   %eax,%eax
f01113a4:	75 b7                	jne    f011135d <show_list_content+0x17>
f01113a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01113aa:	75 b1                	jne    f011135d <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f01113ac:	90                   	nop
f01113ad:	c9                   	leave  
f01113ae:	c3                   	ret    

f01113af <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01113af:	55                   	push   %ebp
f01113b0:	89 e5                	mov    %esp,%ebp
f01113b2:	57                   	push   %edi
f01113b3:	56                   	push   %esi
f01113b4:	53                   	push   %ebx
f01113b5:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01113bb:	83 ec 0c             	sub    $0xc,%esp
f01113be:	68 bc 8d 13 f0       	push   $0xf0138dbc
f01113c3:	e8 46 f9 fe ff       	call   f0100d0e <cprintf>
f01113c8:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01113cb:	83 ec 0c             	sub    $0xc,%esp
f01113ce:	68 e0 8d 13 f0       	push   $0xf0138de0
f01113d3:	e8 36 f9 fe ff       	call   f0100d0e <cprintf>
f01113d8:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f01113db:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f01113e2:	83 ec 0c             	sub    $0xc,%esp
f01113e5:	68 fc 8d 13 f0       	push   $0xf0138dfc
f01113ea:	e8 1f f9 fe ff       	call   f0100d0e <cprintf>
f01113ef:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01113f2:	8d 45 80             	lea    -0x80(%ebp),%eax
f01113f5:	bb b6 8e 13 f0       	mov    $0xf0138eb6,%ebx
f01113fa:	ba 03 00 00 00       	mov    $0x3,%edx
f01113ff:	89 c7                	mov    %eax,%edi
f0111401:	89 de                	mov    %ebx,%esi
f0111403:	89 d1                	mov    %edx,%ecx
f0111405:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111407:	8d 55 8c             	lea    -0x74(%ebp),%edx
f011140a:	b9 16 00 00 00       	mov    $0x16,%ecx
f011140f:	b8 00 00 00 00       	mov    $0x0,%eax
f0111414:	89 d7                	mov    %edx,%edi
f0111416:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111418:	83 ec 0c             	sub    $0xc,%esp
f011141b:	8d 45 80             	lea    -0x80(%ebp),%eax
f011141e:	50                   	push   %eax
f011141f:	e8 4c f9 fe ff       	call   f0100d70 <execute_command>
f0111424:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111427:	83 ec 0c             	sub    $0xc,%esp
f011142a:	68 2a 8e 13 f0       	push   $0xf0138e2a
f011142f:	e8 da f8 fe ff       	call   f0100d0e <cprintf>
f0111434:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111437:	83 ec 0c             	sub    $0xc,%esp
f011143a:	68 40 8e 13 f0       	push   $0xf0138e40
f011143f:	e8 ca f8 fe ff       	call   f0100d0e <cprintf>
f0111444:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111447:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f011144e:	65 00 00 
f0111451:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111457:	b9 18 00 00 00       	mov    $0x18,%ecx
f011145c:	b8 00 00 00 00       	mov    $0x0,%eax
f0111461:	89 d7                	mov    %edx,%edi
f0111463:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111465:	83 ec 0c             	sub    $0xc,%esp
f0111468:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f011146e:	50                   	push   %eax
f011146f:	e8 fc f8 fe ff       	call   f0100d70 <execute_command>
f0111474:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111477:	83 ec 0c             	sub    $0xc,%esp
f011147a:	68 2a 8e 13 f0       	push   $0xf0138e2a
f011147f:	e8 8a f8 fe ff       	call   f0100d0e <cprintf>
f0111484:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111487:	83 ec 0c             	sub    $0xc,%esp
f011148a:	68 68 8e 13 f0       	push   $0xf0138e68
f011148f:	e8 7a f8 fe ff       	call   f0100d0e <cprintf>
f0111494:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111497:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f011149e:	75 00 00 
f01114a1:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01114a7:	b9 18 00 00 00       	mov    $0x18,%ecx
f01114ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01114b1:	89 d7                	mov    %edx,%edi
f01114b3:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f01114b5:	83 ec 0c             	sub    $0xc,%esp
f01114b8:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01114be:	50                   	push   %eax
f01114bf:	e8 ac f8 fe ff       	call   f0100d70 <execute_command>
f01114c4:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01114c7:	83 ec 0c             	sub    $0xc,%esp
f01114ca:	68 2a 8e 13 f0       	push   $0xf0138e2a
f01114cf:	e8 3a f8 fe ff       	call   f0100d0e <cprintf>
f01114d4:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01114d7:	83 ec 0c             	sub    $0xc,%esp
f01114da:	68 90 8e 13 f0       	push   $0xf0138e90
f01114df:	e8 2a f8 fe ff       	call   f0100d0e <cprintf>
f01114e4:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f01114e7:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01114ee:	6d 6d 00 
f01114f1:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01114f7:	b9 18 00 00 00       	mov    $0x18,%ecx
f01114fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0111501:	89 d7                	mov    %edx,%edi
f0111503:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111505:	83 ec 0c             	sub    $0xc,%esp
f0111508:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f011150e:	50                   	push   %eax
f011150f:	e8 5c f8 fe ff       	call   f0100d70 <execute_command>
f0111514:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111517:	83 ec 0c             	sub    $0xc,%esp
f011151a:	68 2a 8e 13 f0       	push   $0xf0138e2a
f011151f:	e8 ea f7 fe ff       	call   f0100d0e <cprintf>
f0111524:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111527:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011152c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011152f:	5b                   	pop    %ebx
f0111530:	5e                   	pop    %esi
f0111531:	5f                   	pop    %edi
f0111532:	5d                   	pop    %ebp
f0111533:	c3                   	ret    

f0111534 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111534:	55                   	push   %ebp
f0111535:	89 e5                	mov    %esp,%ebp
f0111537:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f011153a:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111541:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111548:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011154f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111554:	ff 75 ec             	pushl  -0x14(%ebp)
f0111557:	ff 75 f0             	pushl  -0x10(%ebp)
f011155a:	ff 75 f4             	pushl  -0xc(%ebp)
f011155d:	50                   	push   %eax
f011155e:	e8 51 69 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0111563:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111566:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011156b:	ff 75 ec             	pushl  -0x14(%ebp)
f011156e:	ff 75 f0             	pushl  -0x10(%ebp)
f0111571:	ff 75 f4             	pushl  -0xc(%ebp)
f0111574:	50                   	push   %eax
f0111575:	e8 9e 4e 00 00       	call   f0116418 <CP>
f011157a:	83 c4 10             	add    $0x10,%esp
f011157d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111580:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111584:	74 14                	je     f011159a <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111586:	83 ec 04             	sub    $0x4,%esp
f0111589:	68 1c 8f 13 f0       	push   $0xf0138f1c
f011158e:	6a 5a                	push   $0x5a
f0111590:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111595:	e8 6b ec fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f011159a:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01115a1:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01115a8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01115af:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01115b4:	ff 75 ec             	pushl  -0x14(%ebp)
f01115b7:	ff 75 f0             	pushl  -0x10(%ebp)
f01115ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01115bd:	50                   	push   %eax
f01115be:	e8 f1 68 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f01115c3:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01115c6:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01115cb:	ff 75 ec             	pushl  -0x14(%ebp)
f01115ce:	ff 75 f0             	pushl  -0x10(%ebp)
f01115d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01115d4:	50                   	push   %eax
f01115d5:	e8 3e 4e 00 00       	call   f0116418 <CP>
f01115da:	83 c4 10             	add    $0x10,%esp
f01115dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01115e0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01115e4:	74 14                	je     f01115fa <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f01115e6:	83 ec 04             	sub    $0x4,%esp
f01115e9:	68 5c 8f 13 f0       	push   $0xf0138f5c
f01115ee:	6a 66                	push   $0x66
f01115f0:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01115f5:	e8 0b ec fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01115fa:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111601:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111608:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011160f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111614:	ff 75 ec             	pushl  -0x14(%ebp)
f0111617:	ff 75 f0             	pushl  -0x10(%ebp)
f011161a:	ff 75 f4             	pushl  -0xc(%ebp)
f011161d:	50                   	push   %eax
f011161e:	e8 91 68 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0111623:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111626:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011162b:	ff 75 ec             	pushl  -0x14(%ebp)
f011162e:	ff 75 f0             	pushl  -0x10(%ebp)
f0111631:	ff 75 f4             	pushl  -0xc(%ebp)
f0111634:	50                   	push   %eax
f0111635:	e8 de 4d 00 00       	call   f0116418 <CP>
f011163a:	83 c4 10             	add    $0x10,%esp
f011163d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111640:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111644:	74 14                	je     f011165a <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111646:	83 ec 04             	sub    $0x4,%esp
f0111649:	68 80 8f 13 f0       	push   $0xf0138f80
f011164e:	6a 71                	push   $0x71
f0111650:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111655:	e8 ab eb fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f011165a:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111661:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111668:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011166f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111674:	ff 75 ec             	pushl  -0x14(%ebp)
f0111677:	ff 75 f0             	pushl  -0x10(%ebp)
f011167a:	ff 75 f4             	pushl  -0xc(%ebp)
f011167d:	50                   	push   %eax
f011167e:	e8 31 68 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0111683:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111686:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011168b:	ff 75 ec             	pushl  -0x14(%ebp)
f011168e:	ff 75 f0             	pushl  -0x10(%ebp)
f0111691:	ff 75 f4             	pushl  -0xc(%ebp)
f0111694:	50                   	push   %eax
f0111695:	e8 7e 4d 00 00       	call   f0116418 <CP>
f011169a:	83 c4 10             	add    $0x10,%esp
f011169d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01116a0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01116a4:	74 14                	je     f01116ba <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f01116a6:	83 ec 04             	sub    $0x4,%esp
f01116a9:	68 a4 8f 13 f0       	push   $0xf0138fa4
f01116ae:	6a 7d                	push   $0x7d
f01116b0:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01116b5:	e8 4b eb fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f01116ba:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f01116c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01116c8:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01116cf:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01116d4:	ff 75 ec             	pushl  -0x14(%ebp)
f01116d7:	ff 75 f0             	pushl  -0x10(%ebp)
f01116da:	ff 75 f4             	pushl  -0xc(%ebp)
f01116dd:	50                   	push   %eax
f01116de:	e8 d1 67 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f01116e3:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01116e6:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01116eb:	ff 75 ec             	pushl  -0x14(%ebp)
f01116ee:	ff 75 f0             	pushl  -0x10(%ebp)
f01116f1:	ff 75 f4             	pushl  -0xc(%ebp)
f01116f4:	50                   	push   %eax
f01116f5:	e8 1e 4d 00 00       	call   f0116418 <CP>
f01116fa:	83 c4 10             	add    $0x10,%esp
f01116fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111700:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111704:	74 17                	je     f011171d <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111706:	83 ec 04             	sub    $0x4,%esp
f0111709:	68 c8 8f 13 f0       	push   $0xf0138fc8
f011170e:	68 89 00 00 00       	push   $0x89
f0111713:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111718:	e8 e8 ea fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f011171d:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111724:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f011172b:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111732:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111737:	ff 75 ec             	pushl  -0x14(%ebp)
f011173a:	ff 75 f0             	pushl  -0x10(%ebp)
f011173d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111740:	50                   	push   %eax
f0111741:	e8 6e 67 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0111746:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111749:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011174e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111751:	ff 75 f0             	pushl  -0x10(%ebp)
f0111754:	ff 75 f4             	pushl  -0xc(%ebp)
f0111757:	50                   	push   %eax
f0111758:	e8 bb 4c 00 00       	call   f0116418 <CP>
f011175d:	83 c4 10             	add    $0x10,%esp
f0111760:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111763:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111767:	74 17                	je     f0111780 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111769:	83 ec 04             	sub    $0x4,%esp
f011176c:	68 ec 8f 13 f0       	push   $0xf0138fec
f0111771:	68 95 00 00 00       	push   $0x95
f0111776:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011177b:	e8 85 ea fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111780:	83 ec 0c             	sub    $0xc,%esp
f0111783:	68 18 90 13 f0       	push   $0xf0139018
f0111788:	e8 81 f5 fe ff       	call   f0100d0e <cprintf>
f011178d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111790:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111795:	c9                   	leave  
f0111796:	c3                   	ret    

f0111797 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111797:	55                   	push   %ebp
f0111798:	89 e5                	mov    %esp,%ebp
f011179a:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f011179d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01117a4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01117ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01117b2:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01117b7:	ff 75 ec             	pushl  -0x14(%ebp)
f01117ba:	ff 75 f0             	pushl  -0x10(%ebp)
f01117bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01117c0:	50                   	push   %eax
f01117c1:	e8 ee 66 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f01117c6:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01117c9:	83 ec 04             	sub    $0x4,%esp
f01117cc:	68 68 90 13 f0       	push   $0xf0139068
f01117d1:	68 a2 00 00 00       	push   $0xa2
f01117d6:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01117db:	e8 25 ea fe ff       	call   f0100205 <_panic>

f01117e0 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01117e0:	55                   	push   %ebp
f01117e1:	89 e5                	mov    %esp,%ebp
f01117e3:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f01117e6:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f01117ed:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01117f2:	83 ec 08             	sub    $0x8,%esp
f01117f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01117f8:	50                   	push   %eax
f01117f9:	e8 6a 67 ff ff       	call   f0107f68 <pt_get_page_permissions>
f01117fe:	83 c4 10             	add    $0x10,%esp
f0111801:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111804:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111808:	74 17                	je     f0111821 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f011180a:	83 ec 04             	sub    $0x4,%esp
f011180d:	68 04 91 13 f0       	push   $0xf0139104
f0111812:	68 b0 00 00 00       	push   $0xb0
f0111817:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011181c:	e8 e4 e9 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111821:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111828:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011182d:	83 ec 08             	sub    $0x8,%esp
f0111830:	ff 75 f4             	pushl  -0xc(%ebp)
f0111833:	50                   	push   %eax
f0111834:	e8 2f 67 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0111839:	83 c4 10             	add    $0x10,%esp
f011183c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f011183f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111843:	74 17                	je     f011185c <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111845:	83 ec 04             	sub    $0x4,%esp
f0111848:	68 28 91 13 f0       	push   $0xf0139128
f011184d:	68 b8 00 00 00       	push   $0xb8
f0111852:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111857:	e8 a9 e9 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f011185c:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111863:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111868:	83 ec 08             	sub    $0x8,%esp
f011186b:	ff 75 f4             	pushl  -0xc(%ebp)
f011186e:	50                   	push   %eax
f011186f:	e8 f4 66 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0111874:	83 c4 10             	add    $0x10,%esp
f0111877:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011187a:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011187e:	74 17                	je     f0111897 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111880:	83 ec 04             	sub    $0x4,%esp
f0111883:	68 4c 91 13 f0       	push   $0xf013914c
f0111888:	68 c0 00 00 00       	push   $0xc0
f011188d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111892:	e8 6e e9 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111897:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011189e:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01118a3:	83 ec 08             	sub    $0x8,%esp
f01118a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01118a9:	50                   	push   %eax
f01118aa:	e8 b9 66 ff ff       	call   f0107f68 <pt_get_page_permissions>
f01118af:	83 c4 10             	add    $0x10,%esp
f01118b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01118b5:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01118b9:	74 17                	je     f01118d2 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01118bb:	83 ec 04             	sub    $0x4,%esp
f01118be:	68 70 91 13 f0       	push   $0xf0139170
f01118c3:	68 c7 00 00 00       	push   $0xc7
f01118c8:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01118cd:	e8 33 e9 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01118d2:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01118d9:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01118de:	83 ec 08             	sub    $0x8,%esp
f01118e1:	ff 75 f4             	pushl  -0xc(%ebp)
f01118e4:	50                   	push   %eax
f01118e5:	e8 7e 66 ff ff       	call   f0107f68 <pt_get_page_permissions>
f01118ea:	83 c4 10             	add    $0x10,%esp
f01118ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01118f0:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01118f4:	74 17                	je     f011190d <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01118f6:	83 ec 04             	sub    $0x4,%esp
f01118f9:	68 94 91 13 f0       	push   $0xf0139194
f01118fe:	68 ce 00 00 00       	push   $0xce
f0111903:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111908:	e8 f8 e8 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011190d:	83 ec 0c             	sub    $0xc,%esp
f0111910:	68 b8 91 13 f0       	push   $0xf01391b8
f0111915:	e8 f4 f3 fe ff       	call   f0100d0e <cprintf>
f011191a:	83 c4 10             	add    $0x10,%esp
	return 0;
f011191d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111922:	c9                   	leave  
f0111923:	c3                   	ret    

f0111924 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111924:	55                   	push   %ebp
f0111925:	89 e5                	mov    %esp,%ebp
f0111927:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f011192a:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111931:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111936:	83 ec 08             	sub    $0x8,%esp
f0111939:	ff 75 f4             	pushl  -0xc(%ebp)
f011193c:	50                   	push   %eax
f011193d:	e8 81 66 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111942:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111945:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f011194a:	83 ec 08             	sub    $0x8,%esp
f011194d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111950:	50                   	push   %eax
f0111951:	e8 1e 4a 00 00       	call   f0116374 <CE>
f0111956:	83 c4 10             	add    $0x10,%esp
f0111959:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011195c:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111960:	74 17                	je     f0111979 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111962:	83 ec 04             	sub    $0x4,%esp
f0111965:	68 00 92 13 f0       	push   $0xf0139200
f011196a:	68 de 00 00 00       	push   $0xde
f011196f:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111974:	e8 8c e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111979:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111980:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111985:	83 ec 08             	sub    $0x8,%esp
f0111988:	ff 75 f4             	pushl  -0xc(%ebp)
f011198b:	50                   	push   %eax
f011198c:	e8 32 66 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111991:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111994:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111999:	83 ec 08             	sub    $0x8,%esp
f011199c:	ff 75 f4             	pushl  -0xc(%ebp)
f011199f:	50                   	push   %eax
f01119a0:	e8 cf 49 00 00       	call   f0116374 <CE>
f01119a5:	83 c4 10             	add    $0x10,%esp
f01119a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01119ab:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01119af:	74 17                	je     f01119c8 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f01119b1:	83 ec 04             	sub    $0x4,%esp
f01119b4:	68 2c 92 13 f0       	push   $0xf013922c
f01119b9:	68 e6 00 00 00       	push   $0xe6
f01119be:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01119c3:	e8 3d e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01119c8:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01119cf:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01119d4:	83 ec 08             	sub    $0x8,%esp
f01119d7:	ff 75 f4             	pushl  -0xc(%ebp)
f01119da:	50                   	push   %eax
f01119db:	e8 e3 65 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f01119e0:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01119e3:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01119e8:	83 ec 08             	sub    $0x8,%esp
f01119eb:	ff 75 f4             	pushl  -0xc(%ebp)
f01119ee:	50                   	push   %eax
f01119ef:	e8 80 49 00 00       	call   f0116374 <CE>
f01119f4:	83 c4 10             	add    $0x10,%esp
f01119f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01119fa:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01119fe:	74 17                	je     f0111a17 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111a00:	83 ec 04             	sub    $0x4,%esp
f0111a03:	68 58 92 13 f0       	push   $0xf0139258
f0111a08:	68 ee 00 00 00       	push   $0xee
f0111a0d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111a12:	e8 ee e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111a17:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111a1e:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111a23:	83 ec 08             	sub    $0x8,%esp
f0111a26:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a29:	50                   	push   %eax
f0111a2a:	e8 94 65 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111a2f:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111a32:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111a37:	83 ec 08             	sub    $0x8,%esp
f0111a3a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a3d:	50                   	push   %eax
f0111a3e:	e8 31 49 00 00       	call   f0116374 <CE>
f0111a43:	83 c4 10             	add    $0x10,%esp
f0111a46:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111a49:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111a4d:	74 17                	je     f0111a66 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111a4f:	83 ec 04             	sub    $0x4,%esp
f0111a52:	68 84 92 13 f0       	push   $0xf0139284
f0111a57:	68 f6 00 00 00       	push   $0xf6
f0111a5c:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111a61:	e8 9f e7 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111a66:	83 ec 0c             	sub    $0xc,%esp
f0111a69:	68 b0 92 13 f0       	push   $0xf01392b0
f0111a6e:	e8 9b f2 fe ff       	call   f0100d0e <cprintf>
f0111a73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111a76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111a7b:	c9                   	leave  
f0111a7c:	c3                   	ret    

f0111a7d <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111a7d:	55                   	push   %ebp
f0111a7e:	89 e5                	mov    %esp,%ebp
f0111a80:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111a83:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111a8a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111a8f:	83 ec 08             	sub    $0x8,%esp
f0111a92:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a95:	50                   	push   %eax
f0111a96:	e8 28 65 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111a9b:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111a9e:	83 ec 04             	sub    $0x4,%esp
f0111aa1:	68 fc 92 13 f0       	push   $0xf01392fc
f0111aa6:	68 01 01 00 00       	push   $0x101
f0111aab:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111ab0:	e8 50 e7 fe ff       	call   f0100205 <_panic>

f0111ab5 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111ab5:	55                   	push   %ebp
f0111ab6:	89 e5                	mov    %esp,%ebp
f0111ab8:	57                   	push   %edi
f0111ab9:	56                   	push   %esi
f0111aba:	53                   	push   %ebx
f0111abb:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111ac1:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111ac8:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111acf:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111ad4:	83 ec 0c             	sub    $0xc,%esp
f0111ad7:	50                   	push   %eax
f0111ad8:	e8 79 49 00 00       	call   f0116456 <ClearUserSpace>
f0111add:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111ae0:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111ae7:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111aec:	83 ec 08             	sub    $0x8,%esp
f0111aef:	ff 75 dc             	pushl  -0x24(%ebp)
f0111af2:	50                   	push   %eax
f0111af3:	e8 37 65 ff ff       	call   f010802f <virtual_to_physical>
f0111af8:	83 c4 10             	add    $0x10,%esp
f0111afb:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111afe:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111b02:	74 17                	je     f0111b1b <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111b04:	83 ec 04             	sub    $0x4,%esp
f0111b07:	68 94 93 13 f0       	push   $0xf0139394
f0111b0c:	68 16 01 00 00       	push   $0x116
f0111b11:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111b16:	e8 ea e6 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111b1b:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111b22:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111b27:	83 ec 08             	sub    $0x8,%esp
f0111b2a:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b2d:	50                   	push   %eax
f0111b2e:	e8 fc 64 ff ff       	call   f010802f <virtual_to_physical>
f0111b33:	83 c4 10             	add    $0x10,%esp
f0111b36:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111b39:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111b3e:	83 ec 08             	sub    $0x8,%esp
f0111b41:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b44:	50                   	push   %eax
f0111b45:	e8 0b 48 00 00       	call   f0116355 <CA>
f0111b4a:	83 c4 10             	add    $0x10,%esp
f0111b4d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111b50:	74 17                	je     f0111b69 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111b52:	83 ec 04             	sub    $0x4,%esp
f0111b55:	68 cc 93 13 f0       	push   $0xf01393cc
f0111b5a:	68 1f 01 00 00       	push   $0x11f
f0111b5f:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111b64:	e8 9c e6 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111b69:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111b6f:	bb 98 95 13 f0       	mov    $0xf0139598,%ebx
f0111b74:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111b79:	89 c7                	mov    %eax,%edi
f0111b7b:	89 de                	mov    %ebx,%esi
f0111b7d:	89 d1                	mov    %edx,%ecx
f0111b7f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b81:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111b84:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111b89:	b0 00                	mov    $0x0,%al
f0111b8b:	89 d7                	mov    %edx,%edi
f0111b8d:	f3 aa                	rep stos %al,%es:(%edi)
f0111b8f:	83 ec 0c             	sub    $0xc,%esp
f0111b92:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111b98:	50                   	push   %eax
f0111b99:	e8 d2 f1 fe ff       	call   f0100d70 <execute_command>
f0111b9e:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111ba1:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111ba8:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111bad:	83 ec 08             	sub    $0x8,%esp
f0111bb0:	ff 75 dc             	pushl  -0x24(%ebp)
f0111bb3:	50                   	push   %eax
f0111bb4:	e8 76 64 ff ff       	call   f010802f <virtual_to_physical>
f0111bb9:	83 c4 10             	add    $0x10,%esp
f0111bbc:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111bbf:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111bc4:	83 ec 08             	sub    $0x8,%esp
f0111bc7:	ff 75 dc             	pushl  -0x24(%ebp)
f0111bca:	50                   	push   %eax
f0111bcb:	e8 85 47 00 00       	call   f0116355 <CA>
f0111bd0:	83 c4 10             	add    $0x10,%esp
f0111bd3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111bd6:	74 17                	je     f0111bef <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111bd8:	83 ec 04             	sub    $0x4,%esp
f0111bdb:	68 04 94 13 f0       	push   $0xf0139404
f0111be0:	68 28 01 00 00       	push   $0x128
f0111be5:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111bea:	e8 16 e6 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0111bef:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111bf5:	bb fc 95 13 f0       	mov    $0xf01395fc,%ebx
f0111bfa:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111bff:	89 c7                	mov    %eax,%edi
f0111c01:	89 de                	mov    %ebx,%esi
f0111c03:	89 d1                	mov    %edx,%ecx
f0111c05:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c07:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111c0d:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111c12:	b0 00                	mov    $0x0,%al
f0111c14:	89 d7                	mov    %edx,%edi
f0111c16:	f3 aa                	rep stos %al,%es:(%edi)
f0111c18:	83 ec 0c             	sub    $0xc,%esp
f0111c1b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111c21:	50                   	push   %eax
f0111c22:	e8 49 f1 fe ff       	call   f0100d70 <execute_command>
f0111c27:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111c2a:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111c31:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111c36:	83 ec 08             	sub    $0x8,%esp
f0111c39:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c3c:	50                   	push   %eax
f0111c3d:	e8 ed 63 ff ff       	call   f010802f <virtual_to_physical>
f0111c42:	83 c4 10             	add    $0x10,%esp
f0111c45:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111c48:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111c4d:	83 ec 08             	sub    $0x8,%esp
f0111c50:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c53:	50                   	push   %eax
f0111c54:	e8 fc 46 00 00       	call   f0116355 <CA>
f0111c59:	83 c4 10             	add    $0x10,%esp
f0111c5c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111c5f:	74 17                	je     f0111c78 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0111c61:	83 ec 04             	sub    $0x4,%esp
f0111c64:	68 3c 94 13 f0       	push   $0xf013943c
f0111c69:	68 31 01 00 00       	push   $0x131
f0111c6e:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111c73:	e8 8d e5 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111c78:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111c7e:	bb 60 96 13 f0       	mov    $0xf0139660,%ebx
f0111c83:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111c88:	89 c7                	mov    %eax,%edi
f0111c8a:	89 de                	mov    %ebx,%esi
f0111c8c:	89 d1                	mov    %edx,%ecx
f0111c8e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c90:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111c96:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111c9b:	b0 00                	mov    $0x0,%al
f0111c9d:	89 d7                	mov    %edx,%edi
f0111c9f:	f3 aa                	rep stos %al,%es:(%edi)
f0111ca1:	83 ec 0c             	sub    $0xc,%esp
f0111ca4:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111caa:	50                   	push   %eax
f0111cab:	e8 c0 f0 fe ff       	call   f0100d70 <execute_command>
f0111cb0:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0111cb3:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111cba:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111cbf:	83 ec 08             	sub    $0x8,%esp
f0111cc2:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cc5:	50                   	push   %eax
f0111cc6:	e8 64 63 ff ff       	call   f010802f <virtual_to_physical>
f0111ccb:	83 c4 10             	add    $0x10,%esp
f0111cce:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111cd1:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111cd6:	83 ec 08             	sub    $0x8,%esp
f0111cd9:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cdc:	50                   	push   %eax
f0111cdd:	e8 73 46 00 00       	call   f0116355 <CA>
f0111ce2:	83 c4 10             	add    $0x10,%esp
f0111ce5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111ce8:	74 17                	je     f0111d01 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111cea:	83 ec 04             	sub    $0x4,%esp
f0111ced:	68 74 94 13 f0       	push   $0xf0139474
f0111cf2:	68 3a 01 00 00       	push   $0x13a
f0111cf7:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111cfc:	e8 04 e5 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0111d01:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111d08:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111d0d:	83 ec 08             	sub    $0x8,%esp
f0111d10:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d13:	50                   	push   %eax
f0111d14:	e8 16 63 ff ff       	call   f010802f <virtual_to_physical>
f0111d19:	83 c4 10             	add    $0x10,%esp
f0111d1c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111d1f:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111d24:	83 ec 08             	sub    $0x8,%esp
f0111d27:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d2a:	50                   	push   %eax
f0111d2b:	e8 25 46 00 00       	call   f0116355 <CA>
f0111d30:	83 c4 10             	add    $0x10,%esp
f0111d33:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111d36:	74 17                	je     f0111d4f <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111d38:	83 ec 04             	sub    $0x4,%esp
f0111d3b:	68 ac 94 13 f0       	push   $0xf01394ac
f0111d40:	68 42 01 00 00       	push   $0x142
f0111d45:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111d4a:	e8 b6 e4 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0111d4f:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111d56:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111d5b:	83 ec 08             	sub    $0x8,%esp
f0111d5e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d61:	50                   	push   %eax
f0111d62:	e8 c8 62 ff ff       	call   f010802f <virtual_to_physical>
f0111d67:	83 c4 10             	add    $0x10,%esp
f0111d6a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111d6d:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111d72:	83 ec 08             	sub    $0x8,%esp
f0111d75:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d78:	50                   	push   %eax
f0111d79:	e8 d7 45 00 00       	call   f0116355 <CA>
f0111d7e:	83 c4 10             	add    $0x10,%esp
f0111d81:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111d84:	74 17                	je     f0111d9d <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0111d86:	83 ec 04             	sub    $0x4,%esp
f0111d89:	68 e4 94 13 f0       	push   $0xf01394e4
f0111d8e:	68 4a 01 00 00       	push   $0x14a
f0111d93:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111d98:	e8 68 e4 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0111d9d:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111da3:	bb c4 96 13 f0       	mov    $0xf01396c4,%ebx
f0111da8:	ba 0e 00 00 00       	mov    $0xe,%edx
f0111dad:	89 c7                	mov    %eax,%edi
f0111daf:	89 de                	mov    %ebx,%esi
f0111db1:	89 d1                	mov    %edx,%ecx
f0111db3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111db5:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111dbb:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111dc0:	b0 00                	mov    $0x0,%al
f0111dc2:	89 d7                	mov    %edx,%edi
f0111dc4:	f3 aa                	rep stos %al,%es:(%edi)
f0111dc6:	83 ec 0c             	sub    $0xc,%esp
f0111dc9:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111dcf:	50                   	push   %eax
f0111dd0:	e8 9b ef fe ff       	call   f0100d70 <execute_command>
f0111dd5:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111dd8:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111ddf:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111de4:	83 ec 08             	sub    $0x8,%esp
f0111de7:	ff 75 dc             	pushl  -0x24(%ebp)
f0111dea:	50                   	push   %eax
f0111deb:	e8 3f 62 ff ff       	call   f010802f <virtual_to_physical>
f0111df0:	83 c4 10             	add    $0x10,%esp
f0111df3:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111df6:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0111dfb:	83 ec 08             	sub    $0x8,%esp
f0111dfe:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e01:	50                   	push   %eax
f0111e02:	e8 4e 45 00 00       	call   f0116355 <CA>
f0111e07:	83 c4 10             	add    $0x10,%esp
f0111e0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111e0d:	74 17                	je     f0111e26 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0111e0f:	83 ec 04             	sub    $0x4,%esp
f0111e12:	68 1c 95 13 f0       	push   $0xf013951c
f0111e17:	68 53 01 00 00       	push   $0x153
f0111e1c:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0111e21:	e8 df e3 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111e26:	83 ec 0c             	sub    $0xc,%esp
f0111e29:	68 54 95 13 f0       	push   $0xf0139554
f0111e2e:	e8 db ee fe ff       	call   f0100d0e <cprintf>
f0111e33:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111e36:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111e3b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111e3e:	5b                   	pop    %ebx
f0111e3f:	5e                   	pop    %esi
f0111e40:	5f                   	pop    %edi
f0111e41:	5d                   	pop    %ebp
f0111e42:	c3                   	ret    

f0111e43 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111e43:	55                   	push   %ebp
f0111e44:	89 e5                	mov    %esp,%ebp
f0111e46:	57                   	push   %edi
f0111e47:	56                   	push   %esi
f0111e48:	53                   	push   %ebx
f0111e49:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111e4f:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111e55:	bb d8 99 13 f0       	mov    $0xf01399d8,%ebx
f0111e5a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111e5f:	89 c7                	mov    %eax,%edi
f0111e61:	89 de                	mov    %ebx,%esi
f0111e63:	89 d1                	mov    %edx,%ecx
f0111e65:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111e67:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111e6d:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111e72:	b0 00                	mov    $0x0,%al
f0111e74:	89 d7                	mov    %edx,%edi
f0111e76:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111e78:	6a 00                	push   $0x0
f0111e7a:	6a 0a                	push   $0xa
f0111e7c:	6a 14                	push   $0x14
f0111e7e:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111e84:	50                   	push   %eax
f0111e85:	e8 e0 72 ff ff       	call   f010916a <env_create>
f0111e8a:	83 c4 10             	add    $0x10,%esp
f0111e8d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111e90:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111e93:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111e96:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111e99:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111e9c:	8b 40 60             	mov    0x60(%eax),%eax
f0111e9f:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111ea2:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111ea5:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111ea8:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111eaf:	75 70 20 
f0111eb2:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111eb9:	00 00 00 
f0111ebc:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111ec2:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111ec7:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ecc:	89 d7                	mov    %edx,%edi
f0111ece:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111ed0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111ed3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111ed6:	83 ec 08             	sub    $0x8,%esp
f0111ed9:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111edf:	52                   	push   %edx
f0111ee0:	50                   	push   %eax
f0111ee1:	e8 6f fb 01 00       	call   f0131a55 <ltostr>
f0111ee6:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111ee9:	83 ec 04             	sub    $0x4,%esp
f0111eec:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111ef2:	50                   	push   %eax
f0111ef3:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111ef9:	50                   	push   %eax
f0111efa:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111f00:	50                   	push   %eax
f0111f01:	e8 47 fc 01 00       	call   f0131b4d <strcconcat>
f0111f06:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111f09:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0111f10:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111f17:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0111f1e:	83 ec 0c             	sub    $0xc,%esp
f0111f21:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f24:	e8 2d 45 00 00       	call   f0116456 <ClearUserSpace>
f0111f29:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111f2c:	83 ec 04             	sub    $0x4,%esp
f0111f2f:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111f35:	50                   	push   %eax
f0111f36:	68 28 97 13 f0       	push   $0xf0139728
f0111f3b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f41:	50                   	push   %eax
f0111f42:	e8 06 fc 01 00       	call   f0131b4d <strcconcat>
f0111f47:	83 c4 10             	add    $0x10,%esp
f0111f4a:	83 ec 0c             	sub    $0xc,%esp
f0111f4d:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111f53:	50                   	push   %eax
f0111f54:	e8 17 ee fe ff       	call   f0100d70 <execute_command>
f0111f59:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111f5c:	83 ec 04             	sub    $0x4,%esp
f0111f5f:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111f65:	50                   	push   %eax
f0111f66:	68 33 97 13 f0       	push   $0xf0139733
f0111f6b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f71:	50                   	push   %eax
f0111f72:	e8 d6 fb 01 00       	call   f0131b4d <strcconcat>
f0111f77:	83 c4 10             	add    $0x10,%esp
f0111f7a:	83 ec 0c             	sub    $0xc,%esp
f0111f7d:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111f83:	50                   	push   %eax
f0111f84:	e8 e7 ed fe ff       	call   f0100d70 <execute_command>
f0111f89:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111f8c:	83 ec 04             	sub    $0x4,%esp
f0111f8f:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111f95:	50                   	push   %eax
f0111f96:	68 3e 97 13 f0       	push   $0xf013973e
f0111f9b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111fa1:	50                   	push   %eax
f0111fa2:	e8 a6 fb 01 00       	call   f0131b4d <strcconcat>
f0111fa7:	83 c4 10             	add    $0x10,%esp
f0111faa:	83 ec 0c             	sub    $0xc,%esp
f0111fad:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111fb3:	50                   	push   %eax
f0111fb4:	e8 b7 ed fe ff       	call   f0100d70 <execute_command>
f0111fb9:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111fbc:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111fc3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fc6:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111fc9:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0111fd0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fd3:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0111fd6:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111fdd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fe0:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111fe3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111fe6:	83 ec 08             	sub    $0x8,%esp
f0111fe9:	50                   	push   %eax
f0111fea:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111fed:	e8 45 44 00 00       	call   f0116437 <GP>
f0111ff2:	83 c4 10             	add    $0x10,%esp
f0111ff5:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111ff8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0111fff:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0112006:	e8 98 ae ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011200b:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f011200e:	83 ec 0c             	sub    $0xc,%esp
f0112011:	68 4c 97 13 f0       	push   $0xf013974c
f0112016:	e8 f3 ec fe ff       	call   f0100d0e <cprintf>
f011201b:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f011201e:	6a 03                	push   $0x3
f0112020:	68 00 00 90 02       	push   $0x2900000
f0112025:	68 00 00 80 02       	push   $0x2800000
f011202a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011202d:	e8 25 6a ff ff       	call   f0108a57 <cut_paste_pages>
f0112032:	83 c4 10             	add    $0x10,%esp
f0112035:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0112038:	e8 66 ae ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011203d:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112040:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0112047:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011204b:	75 08                	jne    f0112055 <test_cut_paste_pages+0x212>
f011204d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112050:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112053:	74 2b                	je     f0112080 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112055:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112058:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011205b:	83 ec 0c             	sub    $0xc,%esp
f011205e:	50                   	push   %eax
f011205f:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112062:	68 7c 97 13 f0       	push   $0xf013977c
f0112067:	68 91 01 00 00       	push   $0x191
f011206c:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112071:	e8 9d e3 fe ff       	call   f0100413 <_warn>
f0112076:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112079:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112080:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112084:	74 04                	je     f011208a <test_cut_paste_pages+0x247>
f0112086:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011208a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112091:	83 ec 08             	sub    $0x8,%esp
f0112094:	6a 00                	push   $0x0
f0112096:	6a 01                	push   $0x1
f0112098:	6a 00                	push   $0x0
f011209a:	68 ff 0f 00 00       	push   $0xfff
f011209f:	ff 75 bc             	pushl  -0x44(%ebp)
f01120a2:	6a 01                	push   $0x1
f01120a4:	68 00 30 00 00       	push   $0x3000
f01120a9:	68 00 00 90 02       	push   $0x2900000
f01120ae:	68 00 00 80 02       	push   $0x2800000
f01120b3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120b6:	e8 cf 43 00 00       	call   f011648a <CCP>
f01120bb:	83 c4 30             	add    $0x30,%esp
f01120be:	83 f8 01             	cmp    $0x1,%eax
f01120c1:	74 21                	je     f01120e4 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01120c3:	83 ec 04             	sub    $0x4,%esp
f01120c6:	68 d0 97 13 f0       	push   $0xf01397d0
f01120cb:	68 99 01 00 00       	push   $0x199
f01120d0:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01120d5:	e8 39 e3 fe ff       	call   f0100413 <_warn>
f01120da:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01120dd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01120e4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01120e8:	74 04                	je     f01120ee <test_cut_paste_pages+0x2ab>
f01120ea:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01120ee:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01120f5:	83 ec 04             	sub    $0x4,%esp
f01120f8:	6a 00                	push   $0x0
f01120fa:	68 00 00 90 02       	push   $0x2900000
f01120ff:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112102:	e8 5f 41 00 00       	call   f0116266 <CB>
f0112107:	83 c4 10             	add    $0x10,%esp
f011210a:	85 c0                	test   %eax,%eax
f011210c:	0f 84 f6 00 00 00    	je     f0112208 <test_cut_paste_pages+0x3c5>
f0112112:	83 ec 04             	sub    $0x4,%esp
f0112115:	6a 00                	push   $0x0
f0112117:	68 00 10 90 02       	push   $0x2901000
f011211c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011211f:	e8 42 41 00 00       	call   f0116266 <CB>
f0112124:	83 c4 10             	add    $0x10,%esp
f0112127:	85 c0                	test   %eax,%eax
f0112129:	0f 84 d9 00 00 00    	je     f0112208 <test_cut_paste_pages+0x3c5>
f011212f:	83 ec 04             	sub    $0x4,%esp
f0112132:	6a 00                	push   $0x0
f0112134:	68 00 20 90 02       	push   $0x2902000
f0112139:	ff 75 d4             	pushl  -0x2c(%ebp)
f011213c:	e8 25 41 00 00       	call   f0116266 <CB>
f0112141:	83 c4 10             	add    $0x10,%esp
f0112144:	85 c0                	test   %eax,%eax
f0112146:	0f 84 bc 00 00 00    	je     f0112208 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f011214c:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112153:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f011215a:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0112161:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112164:	8a 00                	mov    (%eax),%al
f0112166:	3c 61                	cmp    $0x61,%al
f0112168:	75 12                	jne    f011217c <test_cut_paste_pages+0x339>
f011216a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011216d:	8a 00                	mov    (%eax),%al
f011216f:	3c 62                	cmp    $0x62,%al
f0112171:	75 09                	jne    f011217c <test_cut_paste_pages+0x339>
f0112173:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112176:	8a 00                	mov    (%eax),%al
f0112178:	3c 63                	cmp    $0x63,%al
f011217a:	74 21                	je     f011219d <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011217c:	83 ec 04             	sub    $0x4,%esp
f011217f:	68 1c 98 13 f0       	push   $0xf013981c
f0112184:	68 a6 01 00 00       	push   $0x1a6
f0112189:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011218e:	e8 80 e2 fe ff       	call   f0100413 <_warn>
f0112193:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112196:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011219d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121a1:	74 04                	je     f01121a7 <test_cut_paste_pages+0x364>
f01121a3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01121a7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01121ae:	83 ec 04             	sub    $0x4,%esp
f01121b1:	6a 01                	push   $0x1
f01121b3:	68 00 10 90 02       	push   $0x2901000
f01121b8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121bb:	e8 a6 40 00 00       	call   f0116266 <CB>
f01121c0:	83 c4 10             	add    $0x10,%esp
f01121c3:	85 c0                	test   %eax,%eax
f01121c5:	74 41                	je     f0112208 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f01121c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01121ca:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01121cd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01121d0:	8a 00                	mov    (%eax),%al
f01121d2:	3c 79                	cmp    $0x79,%al
f01121d4:	74 21                	je     f01121f7 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01121d6:	83 ec 04             	sub    $0x4,%esp
f01121d9:	68 1c 98 13 f0       	push   $0xf013981c
f01121de:	68 b1 01 00 00       	push   $0x1b1
f01121e3:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01121e8:	e8 26 e2 fe ff       	call   f0100413 <_warn>
f01121ed:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01121f0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01121f7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121fb:	74 04                	je     f0112201 <test_cut_paste_pages+0x3be>
f01121fd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112201:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0112208:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011220b:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f011220e:	6a 02                	push   $0x2
f0112210:	68 00 f0 bf 02       	push   $0x2bff000
f0112215:	68 00 10 90 02       	push   $0x2901000
f011221a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011221d:	e8 35 68 ff ff       	call   f0108a57 <cut_paste_pages>
f0112222:	83 c4 10             	add    $0x10,%esp
f0112225:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112228:	e8 76 ac ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011222d:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112230:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112234:	75 0b                	jne    f0112241 <test_cut_paste_pages+0x3fe>
f0112236:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112239:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011223c:	83 f8 01             	cmp    $0x1,%eax
f011223f:	74 2b                	je     f011226c <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112241:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112244:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112247:	83 ec 0c             	sub    $0xc,%esp
f011224a:	50                   	push   %eax
f011224b:	ff 75 b4             	pushl  -0x4c(%ebp)
f011224e:	68 7c 97 13 f0       	push   $0xf013977c
f0112253:	68 c2 01 00 00       	push   $0x1c2
f0112258:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011225d:	e8 b1 e1 fe ff       	call   f0100413 <_warn>
f0112262:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112265:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011226c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112270:	74 04                	je     f0112276 <test_cut_paste_pages+0x433>
f0112272:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112276:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011227d:	83 ec 08             	sub    $0x8,%esp
f0112280:	6a 00                	push   $0x0
f0112282:	6a 01                	push   $0x1
f0112284:	6a 00                	push   $0x0
f0112286:	68 ff 0f 00 00       	push   $0xfff
f011228b:	ff 75 bc             	pushl  -0x44(%ebp)
f011228e:	6a 01                	push   $0x1
f0112290:	68 00 20 00 00       	push   $0x2000
f0112295:	68 00 f0 bf 02       	push   $0x2bff000
f011229a:	68 00 10 90 02       	push   $0x2901000
f011229f:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122a2:	e8 e3 41 00 00       	call   f011648a <CCP>
f01122a7:	83 c4 30             	add    $0x30,%esp
f01122aa:	83 f8 01             	cmp    $0x1,%eax
f01122ad:	74 21                	je     f01122d0 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01122af:	83 ec 04             	sub    $0x4,%esp
f01122b2:	68 d0 97 13 f0       	push   $0xf01397d0
f01122b7:	68 ca 01 00 00       	push   $0x1ca
f01122bc:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01122c1:	e8 4d e1 fe ff       	call   f0100413 <_warn>
f01122c6:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01122c9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01122d0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122d4:	74 04                	je     f01122da <test_cut_paste_pages+0x497>
f01122d6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01122da:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01122e1:	83 ec 04             	sub    $0x4,%esp
f01122e4:	6a 00                	push   $0x0
f01122e6:	68 ff f7 bf 02       	push   $0x2bff7ff
f01122eb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122ee:	e8 73 3f 00 00       	call   f0116266 <CB>
f01122f3:	83 c4 10             	add    $0x10,%esp
f01122f6:	85 c0                	test   %eax,%eax
f01122f8:	74 6b                	je     f0112365 <test_cut_paste_pages+0x522>
f01122fa:	83 ec 04             	sub    $0x4,%esp
f01122fd:	6a 00                	push   $0x0
f01122ff:	68 ff 0f c0 02       	push   $0x2c00fff
f0112304:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112307:	e8 5a 3f 00 00       	call   f0116266 <CB>
f011230c:	83 c4 10             	add    $0x10,%esp
f011230f:	85 c0                	test   %eax,%eax
f0112311:	74 52                	je     f0112365 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112313:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f011231a:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112321:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112324:	8a 00                	mov    (%eax),%al
f0112326:	3c 79                	cmp    $0x79,%al
f0112328:	75 09                	jne    f0112333 <test_cut_paste_pages+0x4f0>
f011232a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011232d:	8a 00                	mov    (%eax),%al
f011232f:	3c 63                	cmp    $0x63,%al
f0112331:	74 21                	je     f0112354 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112333:	83 ec 04             	sub    $0x4,%esp
f0112336:	68 1c 98 13 f0       	push   $0xf013981c
f011233b:	68 d6 01 00 00       	push   $0x1d6
f0112340:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112345:	e8 c9 e0 fe ff       	call   f0100413 <_warn>
f011234a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011234d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112354:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112358:	74 04                	je     f011235e <test_cut_paste_pages+0x51b>
f011235a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011235e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112365:	83 ec 0c             	sub    $0xc,%esp
f0112368:	68 55 98 13 f0       	push   $0xf0139855
f011236d:	e8 9c e9 fe ff       	call   f0100d0e <cprintf>
f0112372:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0112375:	83 ec 0c             	sub    $0xc,%esp
f0112378:	68 64 98 13 f0       	push   $0xf0139864
f011237d:	e8 8c e9 fe ff       	call   f0100d0e <cprintf>
f0112382:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0112385:	83 ec 04             	sub    $0x4,%esp
f0112388:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011238e:	50                   	push   %eax
f011238f:	68 8d 98 13 f0       	push   $0xf013988d
f0112394:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011239a:	50                   	push   %eax
f011239b:	e8 ad f7 01 00       	call   f0131b4d <strcconcat>
f01123a0:	83 c4 10             	add    $0x10,%esp
f01123a3:	83 ec 0c             	sub    $0xc,%esp
f01123a6:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01123ac:	50                   	push   %eax
f01123ad:	e8 be e9 fe ff       	call   f0100d70 <execute_command>
f01123b2:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01123b5:	83 ec 04             	sub    $0x4,%esp
f01123b8:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01123be:	50                   	push   %eax
f01123bf:	68 98 98 13 f0       	push   $0xf0139898
f01123c4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123ca:	50                   	push   %eax
f01123cb:	e8 7d f7 01 00       	call   f0131b4d <strcconcat>
f01123d0:	83 c4 10             	add    $0x10,%esp
f01123d3:	83 ec 0c             	sub    $0xc,%esp
f01123d6:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01123dc:	50                   	push   %eax
f01123dd:	e8 8e e9 fe ff       	call   f0100d70 <execute_command>
f01123e2:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01123e5:	83 ec 04             	sub    $0x4,%esp
f01123e8:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01123ee:	50                   	push   %eax
f01123ef:	68 a3 98 13 f0       	push   $0xf01398a3
f01123f4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123fa:	50                   	push   %eax
f01123fb:	e8 4d f7 01 00       	call   f0131b4d <strcconcat>
f0112400:	83 c4 10             	add    $0x10,%esp
f0112403:	83 ec 0c             	sub    $0xc,%esp
f0112406:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011240c:	50                   	push   %eax
f011240d:	e8 5e e9 fe ff       	call   f0100d70 <execute_command>
f0112412:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112415:	83 ec 04             	sub    $0x4,%esp
f0112418:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011241e:	50                   	push   %eax
f011241f:	68 ae 98 13 f0       	push   $0xf01398ae
f0112424:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011242a:	50                   	push   %eax
f011242b:	e8 1d f7 01 00       	call   f0131b4d <strcconcat>
f0112430:	83 c4 10             	add    $0x10,%esp
f0112433:	83 ec 0c             	sub    $0xc,%esp
f0112436:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011243c:	50                   	push   %eax
f011243d:	e8 2e e9 fe ff       	call   f0100d70 <execute_command>
f0112442:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112445:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f011244c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011244f:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112452:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112459:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011245c:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f011245f:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112466:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112469:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f011246c:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112473:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112476:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112479:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112480:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112483:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0112486:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f011248d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112490:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0112493:	83 ec 08             	sub    $0x8,%esp
f0112496:	68 00 00 c0 01       	push   $0x1c00000
f011249b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011249e:	e8 94 3f 00 00       	call   f0116437 <GP>
f01124a3:	83 c4 10             	add    $0x10,%esp
f01124a6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01124a9:	83 ec 08             	sub    $0x8,%esp
f01124ac:	68 00 00 40 01       	push   $0x1400000
f01124b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124b4:	e8 7e 3f 00 00       	call   f0116437 <GP>
f01124b9:	83 c4 10             	add    $0x10,%esp
f01124bc:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01124bf:	e8 df a9 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01124c4:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01124c7:	6a 01                	push   $0x1
f01124c9:	68 00 00 40 01       	push   $0x1400000
f01124ce:	68 00 00 c0 01       	push   $0x1c00000
f01124d3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124d6:	e8 7c 65 ff ff       	call   f0108a57 <cut_paste_pages>
f01124db:	83 c4 10             	add    $0x10,%esp
f01124de:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01124e1:	e8 bd a9 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01124e6:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01124e9:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01124ed:	75 08                	jne    f01124f7 <test_cut_paste_pages+0x6b4>
f01124ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124f2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01124f5:	74 2b                	je     f0112522 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01124f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124fa:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01124fd:	83 ec 0c             	sub    $0xc,%esp
f0112500:	50                   	push   %eax
f0112501:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112504:	68 bc 98 13 f0       	push   $0xf01398bc
f0112509:	68 f9 01 00 00       	push   $0x1f9
f011250e:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112513:	e8 fb de fe ff       	call   f0100413 <_warn>
f0112518:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011251b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112522:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112526:	74 04                	je     f011252c <test_cut_paste_pages+0x6e9>
f0112528:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011252c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112533:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f011253a:	83 ec 08             	sub    $0x8,%esp
f011253d:	6a 00                	push   $0x0
f011253f:	68 ff 0f 00 00       	push   $0xfff
f0112544:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112547:	68 ff 0f 00 00       	push   $0xfff
f011254c:	ff 75 a0             	pushl  -0x60(%ebp)
f011254f:	6a 01                	push   $0x1
f0112551:	68 00 10 00 00       	push   $0x1000
f0112556:	68 00 00 40 01       	push   $0x1400000
f011255b:	68 00 00 c0 01       	push   $0x1c00000
f0112560:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112563:	e8 22 3f 00 00       	call   f011648a <CCP>
f0112568:	83 c4 30             	add    $0x30,%esp
f011256b:	83 f8 01             	cmp    $0x1,%eax
f011256e:	74 28                	je     f0112598 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112570:	83 ec 04             	sub    $0x4,%esp
f0112573:	68 d0 97 13 f0       	push   $0xf01397d0
f0112578:	68 02 02 00 00       	push   $0x202
f011257d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112582:	e8 8c de fe ff       	call   f0100413 <_warn>
f0112587:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011258a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112591:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112598:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011259c:	74 04                	je     f01125a2 <test_cut_paste_pages+0x75f>
f011259e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01125a2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01125a9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01125ad:	0f 84 92 00 00 00    	je     f0112645 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f01125b3:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01125ba:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01125c1:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01125c8:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01125cf:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01125d6:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01125dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125e0:	8a 00                	mov    (%eax),%al
f01125e2:	3c 61                	cmp    $0x61,%al
f01125e4:	75 2d                	jne    f0112613 <test_cut_paste_pages+0x7d0>
f01125e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125e9:	8a 00                	mov    (%eax),%al
f01125eb:	3c 78                	cmp    $0x78,%al
f01125ed:	75 24                	jne    f0112613 <test_cut_paste_pages+0x7d0>
f01125ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01125f2:	8a 00                	mov    (%eax),%al
f01125f4:	3c 62                	cmp    $0x62,%al
f01125f6:	75 1b                	jne    f0112613 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01125f8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01125fb:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01125fd:	3c 79                	cmp    $0x79,%al
f01125ff:	75 12                	jne    f0112613 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112601:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112604:	8a 00                	mov    (%eax),%al
f0112606:	3c 63                	cmp    $0x63,%al
f0112608:	75 09                	jne    f0112613 <test_cut_paste_pages+0x7d0>
f011260a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011260d:	8a 00                	mov    (%eax),%al
f011260f:	3c 7a                	cmp    $0x7a,%al
f0112611:	74 21                	je     f0112634 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112613:	83 ec 04             	sub    $0x4,%esp
f0112616:	68 1c 98 13 f0       	push   $0xf013981c
f011261b:	68 14 02 00 00       	push   $0x214
f0112620:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112625:	e8 e9 dd fe ff       	call   f0100413 <_warn>
f011262a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011262d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112634:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112638:	74 04                	je     f011263e <test_cut_paste_pages+0x7fb>
f011263a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011263e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112645:	e8 59 a8 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011264a:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f011264d:	6a 03                	push   $0x3
f011264f:	68 00 f0 bf 01       	push   $0x1bff000
f0112654:	68 00 00 40 01       	push   $0x1400000
f0112659:	ff 75 d4             	pushl  -0x2c(%ebp)
f011265c:	e8 f6 63 ff ff       	call   f0108a57 <cut_paste_pages>
f0112661:	83 c4 10             	add    $0x10,%esp
f0112664:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112667:	e8 37 a8 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011266c:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011266f:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112673:	75 08                	jne    f011267d <test_cut_paste_pages+0x83a>
f0112675:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112678:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011267b:	74 2b                	je     f01126a8 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011267d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112680:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112683:	83 ec 0c             	sub    $0xc,%esp
f0112686:	50                   	push   %eax
f0112687:	ff 75 b4             	pushl  -0x4c(%ebp)
f011268a:	68 bc 98 13 f0       	push   $0xf01398bc
f011268f:	68 23 02 00 00       	push   $0x223
f0112694:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112699:	e8 75 dd fe ff       	call   f0100413 <_warn>
f011269e:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01126a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01126a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126ac:	74 04                	je     f01126b2 <test_cut_paste_pages+0x86f>
f01126ae:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01126b2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f01126b9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01126c0:	83 ec 04             	sub    $0x4,%esp
f01126c3:	6a 00                	push   $0x0
f01126c5:	68 00 00 40 01       	push   $0x1400000
f01126ca:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126cd:	e8 94 3b 00 00       	call   f0116266 <CB>
f01126d2:	83 c4 10             	add    $0x10,%esp
f01126d5:	83 f8 01             	cmp    $0x1,%eax
f01126d8:	0f 85 80 00 00 00    	jne    f011275e <test_cut_paste_pages+0x91b>
f01126de:	83 ec 04             	sub    $0x4,%esp
f01126e1:	6a 00                	push   $0x0
f01126e3:	68 00 10 40 01       	push   $0x1401000
f01126e8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126eb:	e8 76 3b 00 00       	call   f0116266 <CB>
f01126f0:	83 c4 10             	add    $0x10,%esp
f01126f3:	83 f8 01             	cmp    $0x1,%eax
f01126f6:	75 66                	jne    f011275e <test_cut_paste_pages+0x91b>
f01126f8:	83 ec 04             	sub    $0x4,%esp
f01126fb:	6a 00                	push   $0x0
f01126fd:	68 00 20 40 01       	push   $0x1402000
f0112702:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112705:	e8 5c 3b 00 00       	call   f0116266 <CB>
f011270a:	83 c4 10             	add    $0x10,%esp
f011270d:	83 f8 01             	cmp    $0x1,%eax
f0112710:	75 4c                	jne    f011275e <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112712:	83 ec 04             	sub    $0x4,%esp
f0112715:	6a 00                	push   $0x0
f0112717:	68 00 f0 bf 01       	push   $0x1bff000
f011271c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011271f:	e8 42 3b 00 00       	call   f0116266 <CB>
f0112724:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112727:	85 c0                	test   %eax,%eax
f0112729:	75 33                	jne    f011275e <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011272b:	83 ec 04             	sub    $0x4,%esp
f011272e:	6a 00                	push   $0x0
f0112730:	68 00 00 c0 01       	push   $0x1c00000
f0112735:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112738:	e8 29 3b 00 00       	call   f0116266 <CB>
f011273d:	83 c4 10             	add    $0x10,%esp
f0112740:	83 f8 01             	cmp    $0x1,%eax
f0112743:	75 19                	jne    f011275e <test_cut_paste_pages+0x91b>
f0112745:	83 ec 04             	sub    $0x4,%esp
f0112748:	6a 00                	push   $0x0
f011274a:	68 00 10 c0 01       	push   $0x1c01000
f011274f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112752:	e8 0f 3b 00 00       	call   f0116266 <CB>
f0112757:	83 c4 10             	add    $0x10,%esp
f011275a:	85 c0                	test   %eax,%eax
f011275c:	74 28                	je     f0112786 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f011275e:	83 ec 04             	sub    $0x4,%esp
f0112761:	68 1c 99 13 f0       	push   $0xf013991c
f0112766:	68 2c 02 00 00       	push   $0x22c
f011276b:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112770:	e8 9e dc fe ff       	call   f0100413 <_warn>
f0112775:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112778:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011277f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112786:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011278a:	74 04                	je     f0112790 <test_cut_paste_pages+0x94d>
f011278c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112790:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112797:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011279b:	0f 84 99 00 00 00    	je     f011283a <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f01127a1:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01127a8:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01127af:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01127b6:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01127bd:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01127c4:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01127cb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127ce:	8a 00                	mov    (%eax),%al
f01127d0:	3c 61                	cmp    $0x61,%al
f01127d2:	75 2d                	jne    f0112801 <test_cut_paste_pages+0x9be>
f01127d4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01127d7:	8a 00                	mov    (%eax),%al
f01127d9:	3c 78                	cmp    $0x78,%al
f01127db:	75 24                	jne    f0112801 <test_cut_paste_pages+0x9be>
f01127dd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01127e0:	8a 00                	mov    (%eax),%al
f01127e2:	3c 62                	cmp    $0x62,%al
f01127e4:	75 1b                	jne    f0112801 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01127e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01127e9:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01127eb:	3c 79                	cmp    $0x79,%al
f01127ed:	75 12                	jne    f0112801 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01127ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01127f2:	8a 00                	mov    (%eax),%al
f01127f4:	3c 63                	cmp    $0x63,%al
f01127f6:	75 09                	jne    f0112801 <test_cut_paste_pages+0x9be>
f01127f8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01127fb:	8a 00                	mov    (%eax),%al
f01127fd:	3c 7a                	cmp    $0x7a,%al
f01127ff:	74 28                	je     f0112829 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0112801:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112808:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011280f:	83 ec 04             	sub    $0x4,%esp
f0112812:	68 1c 98 13 f0       	push   $0xf013981c
f0112817:	68 40 02 00 00       	push   $0x240
f011281c:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112821:	e8 ed db fe ff       	call   f0100413 <_warn>
f0112826:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112829:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011282d:	74 04                	je     f0112833 <test_cut_paste_pages+0x9f0>
f011282f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112833:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f011283a:	83 ec 0c             	sub    $0xc,%esp
f011283d:	68 55 99 13 f0       	push   $0xf0139955
f0112842:	e8 c7 e4 fe ff       	call   f0100d0e <cprintf>
f0112847:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f011284a:	83 ec 08             	sub    $0x8,%esp
f011284d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112850:	68 64 99 13 f0       	push   $0xf0139964
f0112855:	e8 b4 e4 fe ff       	call   f0100d0e <cprintf>
f011285a:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011285d:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112861:	75 10                	jne    f0112873 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112863:	83 ec 0c             	sub    $0xc,%esp
f0112866:	68 98 99 13 f0       	push   $0xf0139998
f011286b:	e8 9e e4 fe ff       	call   f0100d0e <cprintf>
f0112870:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112873:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f0112878:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011287b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011287e:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112881:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112886:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112889:	5b                   	pop    %ebx
f011288a:	5e                   	pop    %esi
f011288b:	5f                   	pop    %edi
f011288c:	5d                   	pop    %ebp
f011288d:	c3                   	ret    

f011288e <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f011288e:	55                   	push   %ebp
f011288f:	89 e5                	mov    %esp,%ebp
f0112891:	57                   	push   %edi
f0112892:	56                   	push   %esi
f0112893:	53                   	push   %ebx
f0112894:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011289a:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01128a0:	bb d8 99 13 f0       	mov    $0xf01399d8,%ebx
f01128a5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01128aa:	89 c7                	mov    %eax,%edi
f01128ac:	89 de                	mov    %ebx,%esi
f01128ae:	89 d1                	mov    %edx,%ecx
f01128b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01128b2:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f01128b8:	b9 23 00 00 00       	mov    $0x23,%ecx
f01128bd:	b0 00                	mov    $0x0,%al
f01128bf:	89 d7                	mov    %edx,%edi
f01128c1:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01128c3:	6a 00                	push   $0x0
f01128c5:	6a 0a                	push   $0xa
f01128c7:	6a 14                	push   $0x14
f01128c9:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01128cf:	50                   	push   %eax
f01128d0:	e8 95 68 ff ff       	call   f010916a <env_create>
f01128d5:	83 c4 10             	add    $0x10,%esp
f01128d8:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01128db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01128de:	8b 40 5c             	mov    0x5c(%eax),%eax
f01128e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01128e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01128e7:	8b 40 60             	mov    0x60(%eax),%eax
f01128ea:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01128f0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01128f6:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01128f9:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112900:	75 70 20 
f0112903:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f011290a:	00 00 00 
f011290d:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112913:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112918:	b8 00 00 00 00       	mov    $0x0,%eax
f011291d:	89 d7                	mov    %edx,%edi
f011291f:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112921:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112924:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112927:	83 ec 08             	sub    $0x8,%esp
f011292a:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112930:	52                   	push   %edx
f0112931:	50                   	push   %eax
f0112932:	e8 1e f1 01 00       	call   f0131a55 <ltostr>
f0112937:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011293a:	83 ec 04             	sub    $0x4,%esp
f011293d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112943:	50                   	push   %eax
f0112944:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f011294a:	50                   	push   %eax
f011294b:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112951:	50                   	push   %eax
f0112952:	e8 f6 f1 01 00       	call   f0131b4d <strcconcat>
f0112957:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f011295a:	83 ec 0c             	sub    $0xc,%esp
f011295d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112960:	e8 f1 3a 00 00       	call   f0116456 <ClearUserSpace>
f0112965:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112968:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f011296f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112976:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011297d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112984:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f011298b:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112992:	83 ec 0c             	sub    $0xc,%esp
f0112995:	68 0c 9a 13 f0       	push   $0xf0139a0c
f011299a:	e8 6f e3 fe ff       	call   f0100d0e <cprintf>
f011299f:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01129a2:	83 ec 04             	sub    $0x4,%esp
f01129a5:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129ab:	50                   	push   %eax
f01129ac:	68 42 9a 13 f0       	push   $0xf0139a42
f01129b1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01129b7:	50                   	push   %eax
f01129b8:	e8 90 f1 01 00       	call   f0131b4d <strcconcat>
f01129bd:	83 c4 10             	add    $0x10,%esp
f01129c0:	83 ec 0c             	sub    $0xc,%esp
f01129c3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129c9:	50                   	push   %eax
f01129ca:	e8 a1 e3 fe ff       	call   f0100d70 <execute_command>
f01129cf:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f01129d2:	83 ec 04             	sub    $0x4,%esp
f01129d5:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129db:	50                   	push   %eax
f01129dc:	68 47 9a 13 f0       	push   $0xf0139a47
f01129e1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01129e7:	50                   	push   %eax
f01129e8:	e8 60 f1 01 00       	call   f0131b4d <strcconcat>
f01129ed:	83 c4 10             	add    $0x10,%esp
f01129f0:	83 ec 0c             	sub    $0xc,%esp
f01129f3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01129f9:	50                   	push   %eax
f01129fa:	e8 71 e3 fe ff       	call   f0100d70 <execute_command>
f01129ff:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112a02:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112a08:	bb 4d 9d 13 f0       	mov    $0xf0139d4d,%ebx
f0112a0d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a12:	89 c7                	mov    %eax,%edi
f0112a14:	89 de                	mov    %ebx,%esi
f0112a16:	89 d1                	mov    %edx,%ecx
f0112a18:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a1a:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112a20:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a25:	b0 00                	mov    $0x0,%al
f0112a27:	89 d7                	mov    %edx,%edi
f0112a29:	f3 aa                	rep stos %al,%es:(%edi)
f0112a2b:	83 ec 0c             	sub    $0xc,%esp
f0112a2e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112a34:	50                   	push   %eax
f0112a35:	e8 36 e3 fe ff       	call   f0100d70 <execute_command>
f0112a3a:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112a3d:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112a43:	bb b1 9d 13 f0       	mov    $0xf0139db1,%ebx
f0112a48:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a4d:	89 c7                	mov    %eax,%edi
f0112a4f:	89 de                	mov    %ebx,%esi
f0112a51:	89 d1                	mov    %edx,%ecx
f0112a53:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a55:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112a5b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a60:	b0 00                	mov    $0x0,%al
f0112a62:	89 d7                	mov    %edx,%edi
f0112a64:	f3 aa                	rep stos %al,%es:(%edi)
f0112a66:	83 ec 0c             	sub    $0xc,%esp
f0112a69:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112a6f:	50                   	push   %eax
f0112a70:	e8 fb e2 fe ff       	call   f0100d70 <execute_command>
f0112a75:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112a78:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112a7e:	bb 15 9e 13 f0       	mov    $0xf0139e15,%ebx
f0112a83:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a88:	89 c7                	mov    %eax,%edi
f0112a8a:	89 de                	mov    %ebx,%esi
f0112a8c:	89 d1                	mov    %edx,%ecx
f0112a8e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a90:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112a96:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a9b:	b0 00                	mov    $0x0,%al
f0112a9d:	89 d7                	mov    %edx,%edi
f0112a9f:	f3 aa                	rep stos %al,%es:(%edi)
f0112aa1:	83 ec 0c             	sub    $0xc,%esp
f0112aa4:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112aaa:	50                   	push   %eax
f0112aab:	e8 c0 e2 fe ff       	call   f0100d70 <execute_command>
f0112ab0:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112ab3:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112ab9:	bb 79 9e 13 f0       	mov    $0xf0139e79,%ebx
f0112abe:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ac3:	89 c7                	mov    %eax,%edi
f0112ac5:	89 de                	mov    %ebx,%esi
f0112ac7:	89 d1                	mov    %edx,%ecx
f0112ac9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112acb:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112ad1:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ad6:	b0 00                	mov    $0x0,%al
f0112ad8:	89 d7                	mov    %edx,%edi
f0112ada:	f3 aa                	rep stos %al,%es:(%edi)
f0112adc:	83 ec 0c             	sub    $0xc,%esp
f0112adf:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112ae5:	50                   	push   %eax
f0112ae6:	e8 85 e2 fe ff       	call   f0100d70 <execute_command>
f0112aeb:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112aee:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112af4:	bb dd 9e 13 f0       	mov    $0xf0139edd,%ebx
f0112af9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112afe:	89 c7                	mov    %eax,%edi
f0112b00:	89 de                	mov    %ebx,%esi
f0112b02:	89 d1                	mov    %edx,%ecx
f0112b04:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b06:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112b0c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b11:	b0 00                	mov    $0x0,%al
f0112b13:	89 d7                	mov    %edx,%edi
f0112b15:	f3 aa                	rep stos %al,%es:(%edi)
f0112b17:	83 ec 0c             	sub    $0xc,%esp
f0112b1a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112b20:	50                   	push   %eax
f0112b21:	e8 4a e2 fe ff       	call   f0100d70 <execute_command>
f0112b26:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112b29:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112b2f:	bb 41 9f 13 f0       	mov    $0xf0139f41,%ebx
f0112b34:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b39:	89 c7                	mov    %eax,%edi
f0112b3b:	89 de                	mov    %ebx,%esi
f0112b3d:	89 d1                	mov    %edx,%ecx
f0112b3f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b41:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112b47:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b4c:	b0 00                	mov    $0x0,%al
f0112b4e:	89 d7                	mov    %edx,%edi
f0112b50:	f3 aa                	rep stos %al,%es:(%edi)
f0112b52:	83 ec 0c             	sub    $0xc,%esp
f0112b55:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112b5b:	50                   	push   %eax
f0112b5c:	e8 0f e2 fe ff       	call   f0100d70 <execute_command>
f0112b61:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112b64:	83 ec 04             	sub    $0x4,%esp
f0112b67:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b6d:	50                   	push   %eax
f0112b6e:	68 4f 9a 13 f0       	push   $0xf0139a4f
f0112b73:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b79:	50                   	push   %eax
f0112b7a:	e8 ce ef 01 00       	call   f0131b4d <strcconcat>
f0112b7f:	83 c4 10             	add    $0x10,%esp
f0112b82:	83 ec 0c             	sub    $0xc,%esp
f0112b85:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b8b:	50                   	push   %eax
f0112b8c:	e8 df e1 fe ff       	call   f0100d70 <execute_command>
f0112b91:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112b94:	83 ec 04             	sub    $0x4,%esp
f0112b97:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b9d:	50                   	push   %eax
f0112b9e:	68 59 9a 13 f0       	push   $0xf0139a59
f0112ba3:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ba9:	50                   	push   %eax
f0112baa:	e8 9e ef 01 00       	call   f0131b4d <strcconcat>
f0112baf:	83 c4 10             	add    $0x10,%esp
f0112bb2:	83 ec 0c             	sub    $0xc,%esp
f0112bb5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112bbb:	50                   	push   %eax
f0112bbc:	e8 af e1 fe ff       	call   f0100d70 <execute_command>
f0112bc1:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112bc4:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112bca:	bb a5 9f 13 f0       	mov    $0xf0139fa5,%ebx
f0112bcf:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bd4:	89 c7                	mov    %eax,%edi
f0112bd6:	89 de                	mov    %ebx,%esi
f0112bd8:	89 d1                	mov    %edx,%ecx
f0112bda:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bdc:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112be2:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112be7:	b0 00                	mov    $0x0,%al
f0112be9:	89 d7                	mov    %edx,%edi
f0112beb:	f3 aa                	rep stos %al,%es:(%edi)
f0112bed:	83 ec 0c             	sub    $0xc,%esp
f0112bf0:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112bf6:	50                   	push   %eax
f0112bf7:	e8 74 e1 fe ff       	call   f0100d70 <execute_command>
f0112bfc:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112bff:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c05:	bb 09 a0 13 f0       	mov    $0xf013a009,%ebx
f0112c0a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c0f:	89 c7                	mov    %eax,%edi
f0112c11:	89 de                	mov    %ebx,%esi
f0112c13:	89 d1                	mov    %edx,%ecx
f0112c15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c17:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112c1d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c22:	b0 00                	mov    $0x0,%al
f0112c24:	89 d7                	mov    %edx,%edi
f0112c26:	f3 aa                	rep stos %al,%es:(%edi)
f0112c28:	83 ec 0c             	sub    $0xc,%esp
f0112c2b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c31:	50                   	push   %eax
f0112c32:	e8 39 e1 fe ff       	call   f0100d70 <execute_command>
f0112c37:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112c3a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c40:	bb 6d a0 13 f0       	mov    $0xf013a06d,%ebx
f0112c45:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c4a:	89 c7                	mov    %eax,%edi
f0112c4c:	89 de                	mov    %ebx,%esi
f0112c4e:	89 d1                	mov    %edx,%ecx
f0112c50:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c52:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112c58:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c5d:	b0 00                	mov    $0x0,%al
f0112c5f:	89 d7                	mov    %edx,%edi
f0112c61:	f3 aa                	rep stos %al,%es:(%edi)
f0112c63:	83 ec 0c             	sub    $0xc,%esp
f0112c66:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c6c:	50                   	push   %eax
f0112c6d:	e8 fe e0 fe ff       	call   f0100d70 <execute_command>
f0112c72:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112c75:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112c7c:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112c83:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112c8a:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112c91:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112c98:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112c9f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112ca6:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112cad:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112cb4:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112cbb:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112cc2:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112cc9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112ccc:	8a 00                	mov    (%eax),%al
f0112cce:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112cd4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112cd7:	8a 00                	mov    (%eax),%al
f0112cd9:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112cdf:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112ce2:	8a 00                	mov    (%eax),%al
f0112ce4:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112cea:	e8 b4 a1 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0112cef:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112cf2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112cf5:	89 d0                	mov    %edx,%eax
f0112cf7:	01 c0                	add    %eax,%eax
f0112cf9:	01 d0                	add    %edx,%eax
f0112cfb:	01 c0                	add    %eax,%eax
f0112cfd:	50                   	push   %eax
f0112cfe:	68 00 00 10 00       	push   $0x100000
f0112d03:	6a 00                	push   $0x0
f0112d05:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d08:	e8 c8 5e ff ff       	call   f0108bd5 <copy_paste_chunk>
f0112d0d:	83 c4 10             	add    $0x10,%esp
f0112d10:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112d13:	e8 8b a1 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0112d18:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112d1b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112d22:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112d26:	75 08                	jne    f0112d30 <test_copy_paste_chunk+0x4a2>
f0112d28:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d2b:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112d2e:	74 2b                	je     f0112d5b <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112d30:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d33:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112d36:	83 ec 0c             	sub    $0xc,%esp
f0112d39:	50                   	push   %eax
f0112d3a:	ff 75 88             	pushl  -0x78(%ebp)
f0112d3d:	68 68 9a 13 f0       	push   $0xf0139a68
f0112d42:	68 93 02 00 00       	push   $0x293
f0112d47:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112d4c:	e8 c2 d6 fe ff       	call   f0100413 <_warn>
f0112d51:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112d54:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112d5b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d5f:	74 04                	je     f0112d65 <test_copy_paste_chunk+0x4d7>
f0112d61:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112d65:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112d6c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d6f:	8a 00                	mov    (%eax),%al
f0112d71:	3c 61                	cmp    $0x61,%al
f0112d73:	75 75                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112d75:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d78:	8a 00                	mov    (%eax),%al
f0112d7a:	3c 78                	cmp    $0x78,%al
f0112d7c:	75 6c                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112d7e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d81:	8a 00                	mov    (%eax),%al
f0112d83:	3c 62                	cmp    $0x62,%al
f0112d85:	75 63                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112d87:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112d8a:	8a 00                	mov    (%eax),%al
f0112d8c:	3c 79                	cmp    $0x79,%al
f0112d8e:	75 5a                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112d90:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112d93:	8a 00                	mov    (%eax),%al
f0112d95:	3c 63                	cmp    $0x63,%al
f0112d97:	75 51                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112d99:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112d9c:	8a 00                	mov    (%eax),%al
f0112d9e:	3c 7a                	cmp    $0x7a,%al
f0112da0:	75 48                	jne    f0112dea <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112da2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112da5:	8a 00                	mov    (%eax),%al
f0112da7:	3c 64                	cmp    $0x64,%al
f0112da9:	75 3f                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112dab:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112dae:	8a 10                	mov    (%eax),%dl
f0112db0:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112db6:	38 c2                	cmp    %al,%dl
f0112db8:	75 30                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112dba:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112dbd:	8a 00                	mov    (%eax),%al
f0112dbf:	3c 65                	cmp    $0x65,%al
f0112dc1:	75 27                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112dc3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112dc6:	8a 10                	mov    (%eax),%dl
f0112dc8:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112dce:	38 c2                	cmp    %al,%dl
f0112dd0:	75 18                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112dd2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112dd5:	8a 00                	mov    (%eax),%al
f0112dd7:	3c 66                	cmp    $0x66,%al
f0112dd9:	75 0f                	jne    f0112dea <test_copy_paste_chunk+0x55c>
f0112ddb:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112dde:	8a 10                	mov    (%eax),%dl
f0112de0:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112de6:	38 c2                	cmp    %al,%dl
f0112de8:	74 21                	je     f0112e0b <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112dea:	83 ec 04             	sub    $0x4,%esp
f0112ded:	68 cc 9a 13 f0       	push   $0xf0139acc
f0112df2:	68 9c 02 00 00       	push   $0x29c
f0112df7:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0112dfc:	e8 12 d6 fe ff       	call   f0100413 <_warn>
f0112e01:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112e04:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112e0b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e0f:	74 04                	je     f0112e15 <test_copy_paste_chunk+0x587>
f0112e11:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112e15:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112e1c:	83 ec 0c             	sub    $0xc,%esp
f0112e1f:	68 06 9b 13 f0       	push   $0xf0139b06
f0112e24:	e8 e5 de fe ff       	call   f0100d0e <cprintf>
f0112e29:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112e2c:	83 ec 0c             	sub    $0xc,%esp
f0112e2f:	68 18 9b 13 f0       	push   $0xf0139b18
f0112e34:	e8 d5 de fe ff       	call   f0100d0e <cprintf>
f0112e39:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112e3c:	83 ec 04             	sub    $0x4,%esp
f0112e3f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e45:	50                   	push   %eax
f0112e46:	68 4e 9b 13 f0       	push   $0xf0139b4e
f0112e4b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e51:	50                   	push   %eax
f0112e52:	e8 f6 ec 01 00       	call   f0131b4d <strcconcat>
f0112e57:	83 c4 10             	add    $0x10,%esp
f0112e5a:	83 ec 0c             	sub    $0xc,%esp
f0112e5d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e63:	50                   	push   %eax
f0112e64:	e8 07 df fe ff       	call   f0100d70 <execute_command>
f0112e69:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112e6c:	83 ec 04             	sub    $0x4,%esp
f0112e6f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e75:	50                   	push   %eax
f0112e76:	68 58 9b 13 f0       	push   $0xf0139b58
f0112e7b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e81:	50                   	push   %eax
f0112e82:	e8 c6 ec 01 00       	call   f0131b4d <strcconcat>
f0112e87:	83 c4 10             	add    $0x10,%esp
f0112e8a:	83 ec 0c             	sub    $0xc,%esp
f0112e8d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e93:	50                   	push   %eax
f0112e94:	e8 d7 de fe ff       	call   f0100d70 <execute_command>
f0112e99:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112e9c:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112ea2:	bb d1 a0 13 f0       	mov    $0xf013a0d1,%ebx
f0112ea7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112eac:	89 c7                	mov    %eax,%edi
f0112eae:	89 de                	mov    %ebx,%esi
f0112eb0:	89 d1                	mov    %edx,%ecx
f0112eb2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112eb4:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112eba:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ebf:	b0 00                	mov    $0x0,%al
f0112ec1:	89 d7                	mov    %edx,%edi
f0112ec3:	f3 aa                	rep stos %al,%es:(%edi)
f0112ec5:	83 ec 0c             	sub    $0xc,%esp
f0112ec8:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112ece:	50                   	push   %eax
f0112ecf:	e8 9c de fe ff       	call   f0100d70 <execute_command>
f0112ed4:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112ed7:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112edd:	bb 35 a1 13 f0       	mov    $0xf013a135,%ebx
f0112ee2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ee7:	89 c7                	mov    %eax,%edi
f0112ee9:	89 de                	mov    %ebx,%esi
f0112eeb:	89 d1                	mov    %edx,%ecx
f0112eed:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112eef:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112ef5:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112efa:	b0 00                	mov    $0x0,%al
f0112efc:	89 d7                	mov    %edx,%edi
f0112efe:	f3 aa                	rep stos %al,%es:(%edi)
f0112f00:	83 ec 0c             	sub    $0xc,%esp
f0112f03:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f09:	50                   	push   %eax
f0112f0a:	e8 61 de fe ff       	call   f0100d70 <execute_command>
f0112f0f:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0112f12:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f18:	bb 99 a1 13 f0       	mov    $0xf013a199,%ebx
f0112f1d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f22:	89 c7                	mov    %eax,%edi
f0112f24:	89 de                	mov    %ebx,%esi
f0112f26:	89 d1                	mov    %edx,%ecx
f0112f28:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f2a:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112f30:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f35:	b0 00                	mov    $0x0,%al
f0112f37:	89 d7                	mov    %edx,%edi
f0112f39:	f3 aa                	rep stos %al,%es:(%edi)
f0112f3b:	83 ec 0c             	sub    $0xc,%esp
f0112f3e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f44:	50                   	push   %eax
f0112f45:	e8 26 de fe ff       	call   f0100d70 <execute_command>
f0112f4a:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112f4d:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f53:	bb fd a1 13 f0       	mov    $0xf013a1fd,%ebx
f0112f58:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f5d:	89 c7                	mov    %eax,%edi
f0112f5f:	89 de                	mov    %ebx,%esi
f0112f61:	89 d1                	mov    %edx,%ecx
f0112f63:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f65:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112f6b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f70:	b0 00                	mov    $0x0,%al
f0112f72:	89 d7                	mov    %edx,%edi
f0112f74:	f3 aa                	rep stos %al,%es:(%edi)
f0112f76:	83 ec 0c             	sub    $0xc,%esp
f0112f79:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f7f:	50                   	push   %eax
f0112f80:	e8 eb dd fe ff       	call   f0100d70 <execute_command>
f0112f85:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112f88:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f8e:	bb 61 a2 13 f0       	mov    $0xf013a261,%ebx
f0112f93:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f98:	89 c7                	mov    %eax,%edi
f0112f9a:	89 de                	mov    %ebx,%esi
f0112f9c:	89 d1                	mov    %edx,%ecx
f0112f9e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fa0:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112fa6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fab:	b0 00                	mov    $0x0,%al
f0112fad:	89 d7                	mov    %edx,%edi
f0112faf:	f3 aa                	rep stos %al,%es:(%edi)
f0112fb1:	83 ec 0c             	sub    $0xc,%esp
f0112fb4:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112fba:	50                   	push   %eax
f0112fbb:	e8 b0 dd fe ff       	call   f0100d70 <execute_command>
f0112fc0:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112fc3:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112fc9:	bb c5 a2 13 f0       	mov    $0xf013a2c5,%ebx
f0112fce:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fd3:	89 c7                	mov    %eax,%edi
f0112fd5:	89 de                	mov    %ebx,%esi
f0112fd7:	89 d1                	mov    %edx,%ecx
f0112fd9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fdb:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112fe1:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fe6:	b0 00                	mov    $0x0,%al
f0112fe8:	89 d7                	mov    %edx,%edi
f0112fea:	f3 aa                	rep stos %al,%es:(%edi)
f0112fec:	83 ec 0c             	sub    $0xc,%esp
f0112fef:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112ff5:	50                   	push   %eax
f0112ff6:	e8 75 dd fe ff       	call   f0100d70 <execute_command>
f0112ffb:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0112ffe:	83 ec 04             	sub    $0x4,%esp
f0113001:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113007:	50                   	push   %eax
f0113008:	68 62 9b 13 f0       	push   $0xf0139b62
f011300d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113013:	50                   	push   %eax
f0113014:	e8 34 eb 01 00       	call   f0131b4d <strcconcat>
f0113019:	83 c4 10             	add    $0x10,%esp
f011301c:	83 ec 0c             	sub    $0xc,%esp
f011301f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113025:	50                   	push   %eax
f0113026:	e8 45 dd fe ff       	call   f0100d70 <execute_command>
f011302b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011302e:	83 ec 04             	sub    $0x4,%esp
f0113031:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113037:	50                   	push   %eax
f0113038:	68 6c 9b 13 f0       	push   $0xf0139b6c
f011303d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113043:	50                   	push   %eax
f0113044:	e8 04 eb 01 00       	call   f0131b4d <strcconcat>
f0113049:	83 c4 10             	add    $0x10,%esp
f011304c:	83 ec 0c             	sub    $0xc,%esp
f011304f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113055:	50                   	push   %eax
f0113056:	e8 15 dd fe ff       	call   f0100d70 <execute_command>
f011305b:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011305e:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113064:	bb 29 a3 13 f0       	mov    $0xf013a329,%ebx
f0113069:	ba 0f 00 00 00       	mov    $0xf,%edx
f011306e:	89 c7                	mov    %eax,%edi
f0113070:	89 de                	mov    %ebx,%esi
f0113072:	89 d1                	mov    %edx,%ecx
f0113074:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113076:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011307c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113081:	b0 00                	mov    $0x0,%al
f0113083:	89 d7                	mov    %edx,%edi
f0113085:	f3 aa                	rep stos %al,%es:(%edi)
f0113087:	83 ec 0c             	sub    $0xc,%esp
f011308a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113090:	50                   	push   %eax
f0113091:	e8 da dc fe ff       	call   f0100d70 <execute_command>
f0113096:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113099:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011309f:	bb 8d a3 13 f0       	mov    $0xf013a38d,%ebx
f01130a4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130a9:	89 c7                	mov    %eax,%edi
f01130ab:	89 de                	mov    %ebx,%esi
f01130ad:	89 d1                	mov    %edx,%ecx
f01130af:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130b1:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01130b7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130bc:	b0 00                	mov    $0x0,%al
f01130be:	89 d7                	mov    %edx,%edi
f01130c0:	f3 aa                	rep stos %al,%es:(%edi)
f01130c2:	83 ec 0c             	sub    $0xc,%esp
f01130c5:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130cb:	50                   	push   %eax
f01130cc:	e8 9f dc fe ff       	call   f0100d70 <execute_command>
f01130d1:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01130d4:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01130da:	bb f1 a3 13 f0       	mov    $0xf013a3f1,%ebx
f01130df:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130e4:	89 c7                	mov    %eax,%edi
f01130e6:	89 de                	mov    %ebx,%esi
f01130e8:	89 d1                	mov    %edx,%ecx
f01130ea:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130ec:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01130f2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130f7:	b0 00                	mov    $0x0,%al
f01130f9:	89 d7                	mov    %edx,%edi
f01130fb:	f3 aa                	rep stos %al,%es:(%edi)
f01130fd:	83 ec 0c             	sub    $0xc,%esp
f0113100:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113106:	50                   	push   %eax
f0113107:	e8 64 dc fe ff       	call   f0100d70 <execute_command>
f011310c:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011310f:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113116:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011311d:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113124:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011312b:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113132:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113139:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113140:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113147:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011314e:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113155:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011315c:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113163:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113166:	8a 00                	mov    (%eax),%al
f0113168:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011316e:	e8 30 9d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113173:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113176:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113179:	89 d0                	mov    %edx,%eax
f011317b:	01 c0                	add    %eax,%eax
f011317d:	01 d0                	add    %edx,%eax
f011317f:	01 c0                	add    %eax,%eax
f0113181:	50                   	push   %eax
f0113182:	68 00 00 40 00       	push   $0x400000
f0113187:	68 00 00 20 00       	push   $0x200000
f011318c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011318f:	e8 41 5a ff ff       	call   f0108bd5 <copy_paste_chunk>
f0113194:	83 c4 10             	add    $0x10,%esp
f0113197:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011319a:	e8 04 9d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011319f:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01131a2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01131a9:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01131ad:	75 08                	jne    f01131b7 <test_copy_paste_chunk+0x929>
f01131af:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131b2:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01131b5:	74 2b                	je     f01131e2 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01131b7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131ba:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01131bd:	83 ec 0c             	sub    $0xc,%esp
f01131c0:	50                   	push   %eax
f01131c1:	ff 75 80             	pushl  -0x80(%ebp)
f01131c4:	68 78 9b 13 f0       	push   $0xf0139b78
f01131c9:	68 cc 02 00 00       	push   $0x2cc
f01131ce:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01131d3:	e8 3b d2 fe ff       	call   f0100413 <_warn>
f01131d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01131db:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01131e2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01131e6:	74 04                	je     f01131ec <test_copy_paste_chunk+0x95e>
f01131e8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01131ec:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01131f3:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01131fa:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01131fd:	83 ec 08             	sub    $0x8,%esp
f0113200:	6a 01                	push   $0x1
f0113202:	6a 07                	push   $0x7
f0113204:	6a 07                	push   $0x7
f0113206:	6a 07                	push   $0x7
f0113208:	6a 07                	push   $0x7
f011320a:	6a 01                	push   $0x1
f011320c:	68 00 20 00 00       	push   $0x2000
f0113211:	68 00 00 40 00       	push   $0x400000
f0113216:	68 00 00 20 00       	push   $0x200000
f011321b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011321e:	e8 67 32 00 00       	call   f011648a <CCP>
f0113223:	83 c4 30             	add    $0x30,%esp
f0113226:	83 f8 01             	cmp    $0x1,%eax
f0113229:	74 2b                	je     f0113256 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011322b:	83 ec 04             	sub    $0x4,%esp
f011322e:	68 cc 9b 13 f0       	push   $0xf0139bcc
f0113233:	68 d5 02 00 00       	push   $0x2d5
f0113238:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011323d:	e8 d1 d1 fe ff       	call   f0100413 <_warn>
f0113242:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113245:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f011324c:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113253:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113256:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011325a:	74 04                	je     f0113260 <test_copy_paste_chunk+0x9d2>
f011325c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113260:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113267:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011326a:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f011326d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113270:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113273:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113276:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113279:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011327c:	8a 00                	mov    (%eax),%al
f011327e:	3c 61                	cmp    $0x61,%al
f0113280:	75 69                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f0113282:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113285:	8a 00                	mov    (%eax),%al
f0113287:	3c 61                	cmp    $0x61,%al
f0113289:	75 60                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f011328b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011328e:	8a 00                	mov    (%eax),%al
f0113290:	3c 79                	cmp    $0x79,%al
f0113292:	75 57                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f0113294:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113297:	8a 00                	mov    (%eax),%al
f0113299:	3c 62                	cmp    $0x62,%al
f011329b:	75 4e                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f011329d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01132a0:	8a 00                	mov    (%eax),%al
f01132a2:	3c 63                	cmp    $0x63,%al
f01132a4:	75 45                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f01132a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01132a9:	8a 00                	mov    (%eax),%al
f01132ab:	3c 7a                	cmp    $0x7a,%al
f01132ad:	75 3c                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01132af:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01132b2:	8a 00                	mov    (%eax),%al
f01132b4:	3c 77                	cmp    $0x77,%al
f01132b6:	75 33                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f01132b8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01132bb:	8a 00                	mov    (%eax),%al
f01132bd:	3c 64                	cmp    $0x64,%al
f01132bf:	75 2a                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f01132c1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01132c4:	8a 00                	mov    (%eax),%al
f01132c6:	3c 65                	cmp    $0x65,%al
f01132c8:	75 21                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f01132ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01132cd:	8a 00                	mov    (%eax),%al
f01132cf:	3c 65                	cmp    $0x65,%al
f01132d1:	75 18                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f01132d3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01132d6:	8a 00                	mov    (%eax),%al
f01132d8:	3c 66                	cmp    $0x66,%al
f01132da:	75 0f                	jne    f01132eb <test_copy_paste_chunk+0xa5d>
f01132dc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01132df:	8a 10                	mov    (%eax),%dl
f01132e1:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01132e7:	38 c2                	cmp    %al,%dl
f01132e9:	74 21                	je     f011330c <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01132eb:	83 ec 04             	sub    $0x4,%esp
f01132ee:	68 cc 9a 13 f0       	push   $0xf0139acc
f01132f3:	68 e3 02 00 00       	push   $0x2e3
f01132f8:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01132fd:	e8 11 d1 fe ff       	call   f0100413 <_warn>
f0113302:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113305:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011330c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113310:	74 04                	je     f0113316 <test_copy_paste_chunk+0xa88>
f0113312:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113316:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011331d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113320:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113323:	e8 7b 9b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113328:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011332b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011332e:	89 c2                	mov    %eax,%edx
f0113330:	01 d2                	add    %edx,%edx
f0113332:	01 d0                	add    %edx,%eax
f0113334:	50                   	push   %eax
f0113335:	68 00 08 20 00       	push   $0x200800
f011333a:	68 00 08 40 00       	push   $0x400800
f011333f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113342:	e8 8e 58 ff ff       	call   f0108bd5 <copy_paste_chunk>
f0113347:	83 c4 10             	add    $0x10,%esp
f011334a:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011334d:	e8 51 9b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113352:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113355:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113359:	75 08                	jne    f0113363 <test_copy_paste_chunk+0xad5>
f011335b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011335e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113361:	74 2b                	je     f011338e <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113363:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113366:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113369:	83 ec 0c             	sub    $0xc,%esp
f011336c:	50                   	push   %eax
f011336d:	ff 75 80             	pushl  -0x80(%ebp)
f0113370:	68 78 9b 13 f0       	push   $0xf0139b78
f0113375:	68 f3 02 00 00       	push   $0x2f3
f011337a:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011337f:	e8 8f d0 fe ff       	call   f0100413 <_warn>
f0113384:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113387:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011338e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113392:	74 04                	je     f0113398 <test_copy_paste_chunk+0xb0a>
f0113394:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113398:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011339f:	83 ec 08             	sub    $0x8,%esp
f01133a2:	6a 01                	push   $0x1
f01133a4:	6a 07                	push   $0x7
f01133a6:	6a 07                	push   $0x7
f01133a8:	6a 07                	push   $0x7
f01133aa:	6a 07                	push   $0x7
f01133ac:	6a 01                	push   $0x1
f01133ae:	68 00 20 00 00       	push   $0x2000
f01133b3:	68 00 00 20 00       	push   $0x200000
f01133b8:	68 00 00 40 00       	push   $0x400000
f01133bd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01133c0:	e8 c5 30 00 00       	call   f011648a <CCP>
f01133c5:	83 c4 30             	add    $0x30,%esp
f01133c8:	83 f8 01             	cmp    $0x1,%eax
f01133cb:	74 21                	je     f01133ee <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01133cd:	83 ec 04             	sub    $0x4,%esp
f01133d0:	68 18 9c 13 f0       	push   $0xf0139c18
f01133d5:	68 fb 02 00 00       	push   $0x2fb
f01133da:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01133df:	e8 2f d0 fe ff       	call   f0100413 <_warn>
f01133e4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01133e7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01133ee:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01133f2:	74 04                	je     f01133f8 <test_copy_paste_chunk+0xb6a>
f01133f4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01133ff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113402:	8a 00                	mov    (%eax),%al
f0113404:	3c 61                	cmp    $0x61,%al
f0113406:	75 69                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f0113408:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011340b:	8a 00                	mov    (%eax),%al
f011340d:	3c 61                	cmp    $0x61,%al
f011340f:	75 60                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f0113411:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113414:	8a 00                	mov    (%eax),%al
f0113416:	3c 79                	cmp    $0x79,%al
f0113418:	75 57                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f011341a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011341d:	8a 00                	mov    (%eax),%al
f011341f:	3c 62                	cmp    $0x62,%al
f0113421:	75 4e                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f0113423:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113426:	8a 00                	mov    (%eax),%al
f0113428:	3c 7a                	cmp    $0x7a,%al
f011342a:	75 45                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f011342c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011342f:	8a 00                	mov    (%eax),%al
f0113431:	3c 7a                	cmp    $0x7a,%al
f0113433:	75 3c                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113435:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113438:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011343a:	3c 64                	cmp    $0x64,%al
f011343c:	75 33                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011343e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113441:	8a 00                	mov    (%eax),%al
f0113443:	3c 64                	cmp    $0x64,%al
f0113445:	75 2a                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f0113447:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011344a:	8a 00                	mov    (%eax),%al
f011344c:	3c 65                	cmp    $0x65,%al
f011344e:	75 21                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f0113450:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113453:	8a 00                	mov    (%eax),%al
f0113455:	3c 78                	cmp    $0x78,%al
f0113457:	75 18                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f0113459:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011345c:	8a 00                	mov    (%eax),%al
f011345e:	3c 66                	cmp    $0x66,%al
f0113460:	75 0f                	jne    f0113471 <test_copy_paste_chunk+0xbe3>
f0113462:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113465:	8a 10                	mov    (%eax),%dl
f0113467:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011346d:	38 c2                	cmp    %al,%dl
f011346f:	74 21                	je     f0113492 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113471:	83 ec 04             	sub    $0x4,%esp
f0113474:	68 cc 9a 13 f0       	push   $0xf0139acc
f0113479:	68 04 03 00 00       	push   $0x304
f011347e:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113483:	e8 8b cf fe ff       	call   f0100413 <_warn>
f0113488:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011348b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113492:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113496:	74 04                	je     f011349c <test_copy_paste_chunk+0xc0e>
f0113498:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011349c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01134a3:	83 ec 0c             	sub    $0xc,%esp
f01134a6:	68 63 9c 13 f0       	push   $0xf0139c63
f01134ab:	e8 5e d8 fe ff       	call   f0100d0e <cprintf>
f01134b0:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01134b3:	83 ec 0c             	sub    $0xc,%esp
f01134b6:	68 74 9c 13 f0       	push   $0xf0139c74
f01134bb:	e8 4e d8 fe ff       	call   f0100d0e <cprintf>
f01134c0:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01134c3:	83 ec 04             	sub    $0x4,%esp
f01134c6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134cc:	50                   	push   %eax
f01134cd:	68 a8 9c 13 f0       	push   $0xf0139ca8
f01134d2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134d8:	50                   	push   %eax
f01134d9:	e8 6f e6 01 00       	call   f0131b4d <strcconcat>
f01134de:	83 c4 10             	add    $0x10,%esp
f01134e1:	83 ec 0c             	sub    $0xc,%esp
f01134e4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134ea:	50                   	push   %eax
f01134eb:	e8 80 d8 fe ff       	call   f0100d70 <execute_command>
f01134f0:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01134f3:	83 ec 04             	sub    $0x4,%esp
f01134f6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134fc:	50                   	push   %eax
f01134fd:	68 b2 9c 13 f0       	push   $0xf0139cb2
f0113502:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113508:	50                   	push   %eax
f0113509:	e8 3f e6 01 00       	call   f0131b4d <strcconcat>
f011350e:	83 c4 10             	add    $0x10,%esp
f0113511:	83 ec 0c             	sub    $0xc,%esp
f0113514:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011351a:	50                   	push   %eax
f011351b:	e8 50 d8 fe ff       	call   f0100d70 <execute_command>
f0113520:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113523:	83 ec 04             	sub    $0x4,%esp
f0113526:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011352c:	50                   	push   %eax
f011352d:	68 bc 9c 13 f0       	push   $0xf0139cbc
f0113532:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113538:	50                   	push   %eax
f0113539:	e8 0f e6 01 00       	call   f0131b4d <strcconcat>
f011353e:	83 c4 10             	add    $0x10,%esp
f0113541:	83 ec 0c             	sub    $0xc,%esp
f0113544:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011354a:	50                   	push   %eax
f011354b:	e8 20 d8 fe ff       	call   f0100d70 <execute_command>
f0113550:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113553:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113559:	bb 55 a4 13 f0       	mov    $0xf013a455,%ebx
f011355e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113563:	89 c7                	mov    %eax,%edi
f0113565:	89 de                	mov    %ebx,%esi
f0113567:	89 d1                	mov    %edx,%ecx
f0113569:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011356b:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113571:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113576:	b0 00                	mov    $0x0,%al
f0113578:	89 d7                	mov    %edx,%edi
f011357a:	f3 aa                	rep stos %al,%es:(%edi)
f011357c:	83 ec 0c             	sub    $0xc,%esp
f011357f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113585:	50                   	push   %eax
f0113586:	e8 e5 d7 fe ff       	call   f0100d70 <execute_command>
f011358b:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f011358e:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113594:	bb b9 a4 13 f0       	mov    $0xf013a4b9,%ebx
f0113599:	ba 0f 00 00 00       	mov    $0xf,%edx
f011359e:	89 c7                	mov    %eax,%edi
f01135a0:	89 de                	mov    %ebx,%esi
f01135a2:	89 d1                	mov    %edx,%ecx
f01135a4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135a6:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01135ac:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135b1:	b0 00                	mov    $0x0,%al
f01135b3:	89 d7                	mov    %edx,%edi
f01135b5:	f3 aa                	rep stos %al,%es:(%edi)
f01135b7:	83 ec 0c             	sub    $0xc,%esp
f01135ba:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01135c0:	50                   	push   %eax
f01135c1:	e8 aa d7 fe ff       	call   f0100d70 <execute_command>
f01135c6:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f01135c9:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135cf:	bb 1d a5 13 f0       	mov    $0xf013a51d,%ebx
f01135d4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135d9:	89 c7                	mov    %eax,%edi
f01135db:	89 de                	mov    %ebx,%esi
f01135dd:	89 d1                	mov    %edx,%ecx
f01135df:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135e1:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01135e7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135ec:	b0 00                	mov    $0x0,%al
f01135ee:	89 d7                	mov    %edx,%edi
f01135f0:	f3 aa                	rep stos %al,%es:(%edi)
f01135f2:	83 ec 0c             	sub    $0xc,%esp
f01135f5:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135fb:	50                   	push   %eax
f01135fc:	e8 6f d7 fe ff       	call   f0100d70 <execute_command>
f0113601:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113604:	e8 9a 98 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113609:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f011360c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011360f:	89 d0                	mov    %edx,%eax
f0113611:	01 c0                	add    %eax,%eax
f0113613:	01 d0                	add    %edx,%eax
f0113615:	c1 e0 02             	shl    $0x2,%eax
f0113618:	50                   	push   %eax
f0113619:	68 00 00 90 00       	push   $0x900000
f011361e:	68 00 00 80 00       	push   $0x800000
f0113623:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113626:	e8 aa 55 ff ff       	call   f0108bd5 <copy_paste_chunk>
f011362b:	83 c4 10             	add    $0x10,%esp
f011362e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113634:	e8 6a 98 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113639:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011363c:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113643:	75 0b                	jne    f0113650 <test_copy_paste_chunk+0xdc2>
f0113645:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113648:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011364b:	83 f8 03             	cmp    $0x3,%eax
f011364e:	74 2e                	je     f011367e <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113650:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113653:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113656:	83 ec 0c             	sub    $0xc,%esp
f0113659:	50                   	push   %eax
f011365a:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113660:	68 78 9b 13 f0       	push   $0xf0139b78
f0113665:	68 22 03 00 00       	push   $0x322
f011366a:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011366f:	e8 9f cd fe ff       	call   f0100413 <_warn>
f0113674:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113677:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011367e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113682:	74 04                	je     f0113688 <test_copy_paste_chunk+0xdfa>
f0113684:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113688:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f011368f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113696:	83 ec 08             	sub    $0x8,%esp
f0113699:	6a 01                	push   $0x1
f011369b:	6a 07                	push   $0x7
f011369d:	6a 07                	push   $0x7
f011369f:	6a 07                	push   $0x7
f01136a1:	6a 07                	push   $0x7
f01136a3:	6a 01                	push   $0x1
f01136a5:	68 00 30 00 00       	push   $0x3000
f01136aa:	68 00 00 90 00       	push   $0x900000
f01136af:	68 00 00 80 00       	push   $0x800000
f01136b4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136b7:	e8 ce 2d 00 00       	call   f011648a <CCP>
f01136bc:	83 c4 30             	add    $0x30,%esp
f01136bf:	83 f8 01             	cmp    $0x1,%eax
f01136c2:	74 28                	je     f01136ec <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01136c4:	83 ec 04             	sub    $0x4,%esp
f01136c7:	68 18 9c 13 f0       	push   $0xf0139c18
f01136cc:	68 2b 03 00 00       	push   $0x32b
f01136d1:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01136d6:	e8 38 cd fe ff       	call   f0100413 <_warn>
f01136db:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01136de:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01136e5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f01136ec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01136f0:	74 04                	je     f01136f6 <test_copy_paste_chunk+0xe68>
f01136f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136f6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01136fd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113701:	0f 84 9e 00 00 00    	je     f01137a5 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113707:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011370e:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113715:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f011371c:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113723:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f011372a:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113731:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113734:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113737:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011373a:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f011373d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113740:	8a 00                	mov    (%eax),%al
f0113742:	3c 61                	cmp    $0x61,%al
f0113744:	75 2d                	jne    f0113773 <test_copy_paste_chunk+0xee5>
f0113746:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113749:	8a 00                	mov    (%eax),%al
f011374b:	3c 61                	cmp    $0x61,%al
f011374d:	75 24                	jne    f0113773 <test_copy_paste_chunk+0xee5>
f011374f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113752:	8a 00                	mov    (%eax),%al
f0113754:	3c 79                	cmp    $0x79,%al
f0113756:	75 1b                	jne    f0113773 <test_copy_paste_chunk+0xee5>
f0113758:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011375b:	8a 00                	mov    (%eax),%al
f011375d:	3c 62                	cmp    $0x62,%al
f011375f:	75 12                	jne    f0113773 <test_copy_paste_chunk+0xee5>
f0113761:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113764:	8a 00                	mov    (%eax),%al
f0113766:	3c 63                	cmp    $0x63,%al
f0113768:	75 09                	jne    f0113773 <test_copy_paste_chunk+0xee5>
f011376a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011376d:	8a 00                	mov    (%eax),%al
f011376f:	3c 7a                	cmp    $0x7a,%al
f0113771:	74 21                	je     f0113794 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113773:	83 ec 04             	sub    $0x4,%esp
f0113776:	68 cc 9a 13 f0       	push   $0xf0139acc
f011377b:	68 3d 03 00 00       	push   $0x33d
f0113780:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113785:	e8 89 cc fe ff       	call   f0100413 <_warn>
f011378a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011378d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113794:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113798:	74 04                	je     f011379e <test_copy_paste_chunk+0xf10>
f011379a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011379e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01137a5:	e8 f9 96 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01137aa:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f01137ad:	6a 00                	push   $0x0
f01137af:	6a 02                	push   $0x2
f01137b1:	68 00 10 90 00       	push   $0x901000
f01137b6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137b9:	e8 59 2b 00 00       	call   f0116317 <SB>
f01137be:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f01137c1:	6a 00                	push   $0x0
f01137c3:	6a 02                	push   $0x2
f01137c5:	68 00 20 90 00       	push   $0x902000
f01137ca:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137cd:	e8 45 2b 00 00       	call   f0116317 <SB>
f01137d2:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f01137d5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137d8:	c1 e0 03             	shl    $0x3,%eax
f01137db:	50                   	push   %eax
f01137dc:	68 00 f0 bf 00       	push   $0xbff000
f01137e1:	68 00 10 90 00       	push   $0x901000
f01137e6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137e9:	e8 e7 53 ff ff       	call   f0108bd5 <copy_paste_chunk>
f01137ee:	83 c4 10             	add    $0x10,%esp
f01137f1:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01137f7:	e8 a7 96 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01137fc:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01137ff:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113806:	75 0b                	jne    f0113813 <test_copy_paste_chunk+0xf85>
f0113808:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011380b:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011380e:	83 f8 03             	cmp    $0x3,%eax
f0113811:	74 2e                	je     f0113841 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113813:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113816:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113819:	83 ec 0c             	sub    $0xc,%esp
f011381c:	50                   	push   %eax
f011381d:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113823:	68 78 9b 13 f0       	push   $0xf0139b78
f0113828:	68 4d 03 00 00       	push   $0x34d
f011382d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113832:	e8 dc cb fe ff       	call   f0100413 <_warn>
f0113837:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011383a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113841:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113845:	74 04                	je     f011384b <test_copy_paste_chunk+0xfbd>
f0113847:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011384b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113852:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113859:	83 ec 08             	sub    $0x8,%esp
f011385c:	6a 01                	push   $0x1
f011385e:	6a 07                	push   $0x7
f0113860:	6a 03                	push   $0x3
f0113862:	6a 07                	push   $0x7
f0113864:	6a 03                	push   $0x3
f0113866:	6a 01                	push   $0x1
f0113868:	68 00 20 00 00       	push   $0x2000
f011386d:	68 00 f0 bf 00       	push   $0xbff000
f0113872:	68 00 10 90 00       	push   $0x901000
f0113877:	ff 75 d4             	pushl  -0x2c(%ebp)
f011387a:	e8 0b 2c 00 00       	call   f011648a <CCP>
f011387f:	83 c4 30             	add    $0x30,%esp
f0113882:	83 f8 01             	cmp    $0x1,%eax
f0113885:	74 28                	je     f01138af <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113887:	83 ec 04             	sub    $0x4,%esp
f011388a:	68 18 9c 13 f0       	push   $0xf0139c18
f011388f:	68 56 03 00 00       	push   $0x356
f0113894:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113899:	e8 75 cb fe ff       	call   f0100413 <_warn>
f011389e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01138a8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01138af:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138b3:	74 04                	je     f01138b9 <test_copy_paste_chunk+0x102b>
f01138b5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01138b9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01138c0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01138c4:	74 72                	je     f0113938 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f01138c6:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f01138cd:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f01138d4:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f01138db:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f01138e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138e5:	8a 00                	mov    (%eax),%al
f01138e7:	3c 62                	cmp    $0x62,%al
f01138e9:	75 1b                	jne    f0113906 <test_copy_paste_chunk+0x1078>
f01138eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01138ee:	8a 00                	mov    (%eax),%al
f01138f0:	3c 62                	cmp    $0x62,%al
f01138f2:	75 12                	jne    f0113906 <test_copy_paste_chunk+0x1078>
f01138f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138f7:	8a 00                	mov    (%eax),%al
f01138f9:	3c 7a                	cmp    $0x7a,%al
f01138fb:	75 09                	jne    f0113906 <test_copy_paste_chunk+0x1078>
f01138fd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113900:	8a 00                	mov    (%eax),%al
f0113902:	3c 7a                	cmp    $0x7a,%al
f0113904:	74 21                	je     f0113927 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113906:	83 ec 04             	sub    $0x4,%esp
f0113909:	68 cc 9a 13 f0       	push   $0xf0139acc
f011390e:	68 62 03 00 00       	push   $0x362
f0113913:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113918:	e8 f6 ca fe ff       	call   f0100413 <_warn>
f011391d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113920:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113927:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011392b:	74 04                	je     f0113931 <test_copy_paste_chunk+0x10a3>
f011392d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113931:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113938:	83 ec 0c             	sub    $0xc,%esp
f011393b:	68 c6 9c 13 f0       	push   $0xf0139cc6
f0113940:	e8 c9 d3 fe ff       	call   f0100d0e <cprintf>
f0113945:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113948:	83 ec 08             	sub    $0x8,%esp
f011394b:	ff 75 e4             	pushl  -0x1c(%ebp)
f011394e:	68 d8 9c 13 f0       	push   $0xf0139cd8
f0113953:	e8 b6 d3 fe ff       	call   f0100d0e <cprintf>
f0113958:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011395b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011395f:	75 10                	jne    f0113971 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113961:	83 ec 0c             	sub    $0xc,%esp
f0113964:	68 0c 9d 13 f0       	push   $0xf0139d0c
f0113969:	e8 a0 d3 fe ff       	call   f0100d0e <cprintf>
f011396e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113971:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f0113976:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113979:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011397c:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011397f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113984:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113987:	5b                   	pop    %ebx
f0113988:	5e                   	pop    %esi
f0113989:	5f                   	pop    %edi
f011398a:	5d                   	pop    %ebp
f011398b:	c3                   	ret    

f011398c <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f011398c:	55                   	push   %ebp
f011398d:	89 e5                	mov    %esp,%ebp
f011398f:	57                   	push   %edi
f0113990:	56                   	push   %esi
f0113991:	53                   	push   %ebx
f0113992:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113998:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011399e:	bb d8 99 13 f0       	mov    $0xf01399d8,%ebx
f01139a3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139a8:	89 c7                	mov    %eax,%edi
f01139aa:	89 de                	mov    %ebx,%esi
f01139ac:	89 d1                	mov    %edx,%ecx
f01139ae:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01139b0:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f01139b6:	b9 23 00 00 00       	mov    $0x23,%ecx
f01139bb:	b0 00                	mov    $0x0,%al
f01139bd:	89 d7                	mov    %edx,%edi
f01139bf:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01139c1:	6a 00                	push   $0x0
f01139c3:	6a 0a                	push   $0xa
f01139c5:	6a 14                	push   $0x14
f01139c7:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01139cd:	50                   	push   %eax
f01139ce:	e8 97 57 ff ff       	call   f010916a <env_create>
f01139d3:	83 c4 10             	add    $0x10,%esp
f01139d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01139d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01139dc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01139df:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01139e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01139e5:	8b 40 60             	mov    0x60(%eax),%eax
f01139e8:	89 45 80             	mov    %eax,-0x80(%ebp)
f01139eb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01139ee:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01139f1:	83 ec 0c             	sub    $0xc,%esp
f01139f4:	ff 75 cc             	pushl  -0x34(%ebp)
f01139f7:	e8 5a 2a 00 00       	call   f0116456 <ClearUserSpace>
f01139fc:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01139ff:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113a06:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113a0d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113a14:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113a18:	83 ec 0c             	sub    $0xc,%esp
f0113a1b:	68 84 a5 13 f0       	push   $0xf013a584
f0113a20:	e8 e9 d2 fe ff       	call   f0100d0e <cprintf>
f0113a25:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113a28:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113a2f:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113a36:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a39:	8a 00                	mov    (%eax),%al
f0113a3b:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113a41:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a44:	8a 00                	mov    (%eax),%al
f0113a46:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a4c:	e8 52 94 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113a51:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113a54:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a57:	89 d0                	mov    %edx,%eax
f0113a59:	01 c0                	add    %eax,%eax
f0113a5b:	01 d0                	add    %edx,%eax
f0113a5d:	01 c0                	add    %eax,%eax
f0113a5f:	83 ec 0c             	sub    $0xc,%esp
f0113a62:	6a 02                	push   $0x2
f0113a64:	50                   	push   %eax
f0113a65:	68 00 40 10 f0       	push   $0xf0104000
f0113a6a:	68 00 00 10 f0       	push   $0xf0100000
f0113a6f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113a72:	e8 a2 52 ff ff       	call   f0108d19 <share_chunk>
f0113a77:	83 c4 20             	add    $0x20,%esp
f0113a7a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113a7d:	e8 21 94 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113a82:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113a85:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113a89:	75 08                	jne    f0113a93 <test_share_chunk+0x107>
f0113a8b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a8e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113a91:	74 28                	je     f0113abb <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113a93:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a96:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113a99:	83 ec 0c             	sub    $0xc,%esp
f0113a9c:	50                   	push   %eax
f0113a9d:	ff 75 b0             	pushl  -0x50(%ebp)
f0113aa0:	68 b0 a5 13 f0       	push   $0xf013a5b0
f0113aa5:	68 9e 03 00 00       	push   $0x39e
f0113aaa:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113aaf:	e8 5f c9 fe ff       	call   f0100413 <_warn>
f0113ab4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ab7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113abb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113abf:	74 04                	je     f0113ac5 <test_share_chunk+0x139>
f0113ac1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113ac5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113ac9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113acc:	c1 e0 03             	shl    $0x3,%eax
f0113acf:	83 ec 08             	sub    $0x8,%esp
f0113ad2:	68 fd 00 00 00       	push   $0xfd
f0113ad7:	6a 07                	push   $0x7
f0113ad9:	6a 03                	push   $0x3
f0113adb:	6a 07                	push   $0x7
f0113add:	6a 03                	push   $0x3
f0113adf:	6a 01                	push   $0x1
f0113ae1:	50                   	push   %eax
f0113ae2:	68 00 40 10 f0       	push   $0xf0104000
f0113ae7:	68 00 00 10 f0       	push   $0xf0100000
f0113aec:	ff 75 cc             	pushl  -0x34(%ebp)
f0113aef:	e8 96 29 00 00       	call   f011648a <CCP>
f0113af4:	83 c4 30             	add    $0x30,%esp
f0113af7:	85 c0                	test   %eax,%eax
f0113af9:	75 1e                	jne    f0113b19 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113afb:	83 ec 04             	sub    $0x4,%esp
f0113afe:	68 0c a6 13 f0       	push   $0xf013a60c
f0113b03:	68 a6 03 00 00       	push   $0x3a6
f0113b08:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113b0d:	e8 01 c9 fe ff       	call   f0100413 <_warn>
f0113b12:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b15:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b19:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b1d:	74 04                	je     f0113b23 <test_share_chunk+0x197>
f0113b1f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113b23:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b26:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113b29:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b2c:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113b2f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b32:	8a 00                	mov    (%eax),%al
f0113b34:	3c 41                	cmp    $0x41,%al
f0113b36:	75 09                	jne    f0113b41 <test_share_chunk+0x1b5>
f0113b38:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b3b:	8a 00                	mov    (%eax),%al
f0113b3d:	3c 42                	cmp    $0x42,%al
f0113b3f:	74 1e                	je     f0113b5f <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113b41:	83 ec 04             	sub    $0x4,%esp
f0113b44:	68 54 a6 13 f0       	push   $0xf013a654
f0113b49:	68 b0 03 00 00       	push   $0x3b0
f0113b4e:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113b53:	e8 bb c8 fe ff       	call   f0100413 <_warn>
f0113b58:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b5b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b5f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b63:	74 04                	je     f0113b69 <test_share_chunk+0x1dd>
f0113b65:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b69:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113b6d:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113b73:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b76:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113b78:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113b7e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b81:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113b83:	83 ec 0c             	sub    $0xc,%esp
f0113b86:	68 89 a6 13 f0       	push   $0xf013a689
f0113b8b:	e8 7e d1 fe ff       	call   f0100d0e <cprintf>
f0113b90:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113b93:	83 ec 0c             	sub    $0xc,%esp
f0113b96:	68 98 a6 13 f0       	push   $0xf013a698
f0113b9b:	e8 6e d1 fe ff       	call   f0100d0e <cprintf>
f0113ba0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ba3:	e8 fb 92 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113ba8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113bab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113bae:	c1 e0 05             	shl    $0x5,%eax
f0113bb1:	83 ec 0c             	sub    $0xc,%esp
f0113bb4:	68 02 0e 00 00       	push   $0xe02
f0113bb9:	50                   	push   %eax
f0113bba:	68 00 00 00 40       	push   $0x40000000
f0113bbf:	68 00 00 00 f0       	push   $0xf0000000
f0113bc4:	ff 75 cc             	pushl  -0x34(%ebp)
f0113bc7:	e8 4d 51 ff ff       	call   f0108d19 <share_chunk>
f0113bcc:	83 c4 20             	add    $0x20,%esp
f0113bcf:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113bd2:	e8 cc 92 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113bd7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113bda:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113bde:	75 1f                	jne    f0113bff <test_share_chunk+0x273>
f0113be0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113be3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113be6:	89 c1                	mov    %eax,%ecx
f0113be8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113beb:	c1 e0 05             	shl    $0x5,%eax
f0113bee:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113bf1:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113bf8:	99                   	cltd   
f0113bf9:	f7 fb                	idiv   %ebx
f0113bfb:	39 c1                	cmp    %eax,%ecx
f0113bfd:	74 28                	je     f0113c27 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113bff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c02:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113c05:	83 ec 0c             	sub    $0xc,%esp
f0113c08:	50                   	push   %eax
f0113c09:	ff 75 a8             	pushl  -0x58(%ebp)
f0113c0c:	68 d4 a6 13 f0       	push   $0xf013a6d4
f0113c11:	68 c8 03 00 00       	push   $0x3c8
f0113c16:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113c1b:	e8 f3 c7 fe ff       	call   f0100413 <_warn>
f0113c20:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c23:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c27:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c2b:	74 04                	je     f0113c31 <test_share_chunk+0x2a5>
f0113c2d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c31:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113c35:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113c3c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c3f:	c1 e0 05             	shl    $0x5,%eax
f0113c42:	83 ec 08             	sub    $0x8,%esp
f0113c45:	6a 02                	push   $0x2
f0113c47:	6a 07                	push   $0x7
f0113c49:	6a 03                	push   $0x3
f0113c4b:	68 07 0e 00 00       	push   $0xe07
f0113c50:	68 03 0e 00 00       	push   $0xe03
f0113c55:	6a ff                	push   $0xffffffff
f0113c57:	50                   	push   %eax
f0113c58:	68 00 00 00 40       	push   $0x40000000
f0113c5d:	68 00 00 00 f0       	push   $0xf0000000
f0113c62:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c65:	e8 20 28 00 00       	call   f011648a <CCP>
f0113c6a:	83 c4 30             	add    $0x30,%esp
f0113c6d:	85 c0                	test   %eax,%eax
f0113c6f:	75 25                	jne    f0113c96 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113c71:	83 ec 04             	sub    $0x4,%esp
f0113c74:	68 0c a6 13 f0       	push   $0xf013a60c
f0113c79:	68 d1 03 00 00       	push   $0x3d1
f0113c7e:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113c83:	e8 8b c7 fe ff       	call   f0100413 <_warn>
f0113c88:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c8b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113c8f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113c96:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113c99:	89 d0                	mov    %edx,%eax
f0113c9b:	01 c0                	add    %eax,%eax
f0113c9d:	01 d0                	add    %edx,%eax
f0113c9f:	c1 e0 02             	shl    $0x2,%eax
f0113ca2:	83 ec 08             	sub    $0x8,%esp
f0113ca5:	6a 02                	push   $0x2
f0113ca7:	6a 07                	push   $0x7
f0113ca9:	6a 03                	push   $0x3
f0113cab:	68 07 0e 00 00       	push   $0xe07
f0113cb0:	68 03 0e 00 00       	push   $0xe03
f0113cb5:	6a 02                	push   $0x2
f0113cb7:	50                   	push   %eax
f0113cb8:	68 00 00 00 40       	push   $0x40000000
f0113cbd:	68 00 00 00 f0       	push   $0xf0000000
f0113cc2:	ff 75 cc             	pushl  -0x34(%ebp)
f0113cc5:	e8 c0 27 00 00       	call   f011648a <CCP>
f0113cca:	83 c4 30             	add    $0x30,%esp
f0113ccd:	85 c0                	test   %eax,%eax
f0113ccf:	75 1e                	jne    f0113cef <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113cd1:	83 ec 04             	sub    $0x4,%esp
f0113cd4:	68 0c a6 13 f0       	push   $0xf013a60c
f0113cd9:	68 d8 03 00 00       	push   $0x3d8
f0113cde:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113ce3:	e8 2b c7 fe ff       	call   f0100413 <_warn>
f0113ce8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ceb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113cef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cf3:	74 04                	je     f0113cf9 <test_share_chunk+0x36d>
f0113cf5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113cf9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113cfd:	b8 bc ee 88 f0       	mov    $0xf088eebc,%eax
f0113d02:	05 00 00 00 10       	add    $0x10000000,%eax
f0113d07:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113d0a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113d0d:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113d12:	83 ec 08             	sub    $0x8,%esp
f0113d15:	6a 02                	push   $0x2
f0113d17:	6a 07                	push   $0x7
f0113d19:	6a 03                	push   $0x3
f0113d1b:	68 07 0e 00 00       	push   $0xe07
f0113d20:	68 03 0e 00 00       	push   $0xe03
f0113d25:	6a 02                	push   $0x2
f0113d27:	50                   	push   %eax
f0113d28:	68 00 00 0a 40       	push   $0x400a0000
f0113d2d:	68 00 00 0a f0       	push   $0xf00a0000
f0113d32:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d35:	e8 50 27 00 00       	call   f011648a <CCP>
f0113d3a:	83 c4 30             	add    $0x30,%esp
f0113d3d:	85 c0                	test   %eax,%eax
f0113d3f:	75 1e                	jne    f0113d5f <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113d41:	83 ec 04             	sub    $0x4,%esp
f0113d44:	68 0c a6 13 f0       	push   $0xf013a60c
f0113d49:	68 e2 03 00 00       	push   $0x3e2
f0113d4e:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113d53:	e8 bb c6 fe ff       	call   f0100413 <_warn>
f0113d58:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d5b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d5f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d63:	74 04                	je     f0113d69 <test_share_chunk+0x3dd>
f0113d65:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d69:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113d6d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113d71:	0f 84 a4 00 00 00    	je     f0113e1b <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113d77:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113d7e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d81:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113d84:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113d8b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d8e:	8a 00                	mov    (%eax),%al
f0113d90:	3c 41                	cmp    $0x41,%al
f0113d92:	75 09                	jne    f0113d9d <test_share_chunk+0x411>
f0113d94:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d97:	8a 00                	mov    (%eax),%al
f0113d99:	3c 41                	cmp    $0x41,%al
f0113d9b:	74 1e                	je     f0113dbb <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113d9d:	83 ec 04             	sub    $0x4,%esp
f0113da0:	68 54 a6 13 f0       	push   $0xf013a654
f0113da5:	68 ef 03 00 00       	push   $0x3ef
f0113daa:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113daf:	e8 5f c6 fe ff       	call   f0100413 <_warn>
f0113db4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113db7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113dbb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113dbf:	74 04                	je     f0113dc5 <test_share_chunk+0x439>
f0113dc1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113dc5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113dc9:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113dd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113dd3:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113dd6:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113ddd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113de0:	8a 00                	mov    (%eax),%al
f0113de2:	3c 43                	cmp    $0x43,%al
f0113de4:	75 09                	jne    f0113def <test_share_chunk+0x463>
f0113de6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113de9:	8a 00                	mov    (%eax),%al
f0113deb:	3c 43                	cmp    $0x43,%al
f0113ded:	74 1e                	je     f0113e0d <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113def:	83 ec 04             	sub    $0x4,%esp
f0113df2:	68 54 a6 13 f0       	push   $0xf013a654
f0113df7:	68 fa 03 00 00       	push   $0x3fa
f0113dfc:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113e01:	e8 0d c6 fe ff       	call   f0100413 <_warn>
f0113e06:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e09:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113e0d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e11:	74 04                	je     f0113e17 <test_share_chunk+0x48b>
f0113e13:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e17:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113e1b:	83 ec 0c             	sub    $0xc,%esp
f0113e1e:	68 63 9c 13 f0       	push   $0xf0139c63
f0113e23:	e8 e6 ce fe ff       	call   f0100d0e <cprintf>
f0113e28:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113e2b:	83 ec 0c             	sub    $0xc,%esp
f0113e2e:	68 24 a7 13 f0       	push   $0xf013a724
f0113e33:	e8 d6 ce fe ff       	call   f0100d0e <cprintf>
f0113e38:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e3b:	e8 63 90 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113e40:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113e43:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e46:	89 d0                	mov    %edx,%eax
f0113e48:	c1 e0 03             	shl    $0x3,%eax
f0113e4b:	01 d0                	add    %edx,%eax
f0113e4d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113e54:	01 d0                	add    %edx,%eax
f0113e56:	c1 e0 03             	shl    $0x3,%eax
f0113e59:	83 ec 0c             	sub    $0xc,%esp
f0113e5c:	6a 06                	push   $0x6
f0113e5e:	50                   	push   %eax
f0113e5f:	6a 00                	push   $0x0
f0113e61:	68 00 00 00 40       	push   $0x40000000
f0113e66:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e69:	e8 ab 4e ff ff       	call   f0108d19 <share_chunk>
f0113e6e:	83 c4 20             	add    $0x20,%esp
f0113e71:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113e74:	e8 2a 90 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0113e79:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113e7c:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113e80:	75 0b                	jne    f0113e8d <test_share_chunk+0x501>
f0113e82:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e85:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e88:	83 f8 01             	cmp    $0x1,%eax
f0113e8b:	74 28                	je     f0113eb5 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113e8d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e90:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e93:	83 ec 0c             	sub    $0xc,%esp
f0113e96:	50                   	push   %eax
f0113e97:	ff 75 a0             	pushl  -0x60(%ebp)
f0113e9a:	68 d4 a6 13 f0       	push   $0xf013a6d4
f0113e9f:	68 10 04 00 00       	push   $0x410
f0113ea4:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113ea9:	e8 65 c5 fe ff       	call   f0100413 <_warn>
f0113eae:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113eb1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113eb5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113eb9:	74 04                	je     f0113ebf <test_share_chunk+0x533>
f0113ebb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ebf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113ec3:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113eca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ecd:	05 00 80 02 00       	add    $0x28000,%eax
f0113ed2:	c1 e0 02             	shl    $0x2,%eax
f0113ed5:	83 ec 08             	sub    $0x8,%esp
f0113ed8:	6a 02                	push   $0x2
f0113eda:	6a 07                	push   $0x7
f0113edc:	6a 03                	push   $0x3
f0113ede:	6a 07                	push   $0x7
f0113ee0:	6a 07                	push   $0x7
f0113ee2:	6a ff                	push   $0xffffffff
f0113ee4:	50                   	push   %eax
f0113ee5:	6a 00                	push   $0x0
f0113ee7:	68 00 00 00 40       	push   $0x40000000
f0113eec:	ff 75 cc             	pushl  -0x34(%ebp)
f0113eef:	e8 96 25 00 00       	call   f011648a <CCP>
f0113ef4:	83 c4 30             	add    $0x30,%esp
f0113ef7:	85 c0                	test   %eax,%eax
f0113ef9:	75 25                	jne    f0113f20 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113efb:	83 ec 04             	sub    $0x4,%esp
f0113efe:	68 0c a6 13 f0       	push   $0xf013a60c
f0113f03:	68 19 04 00 00       	push   $0x419
f0113f08:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113f0d:	e8 01 c5 fe ff       	call   f0100413 <_warn>
f0113f12:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f15:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113f19:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113f20:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f23:	89 d0                	mov    %edx,%eax
f0113f25:	01 c0                	add    %eax,%eax
f0113f27:	01 d0                	add    %edx,%eax
f0113f29:	c1 e0 02             	shl    $0x2,%eax
f0113f2c:	83 ec 08             	sub    $0x8,%esp
f0113f2f:	6a 02                	push   $0x2
f0113f31:	6a 07                	push   $0x7
f0113f33:	6a 03                	push   $0x3
f0113f35:	6a 07                	push   $0x7
f0113f37:	6a 07                	push   $0x7
f0113f39:	6a 03                	push   $0x3
f0113f3b:	50                   	push   %eax
f0113f3c:	6a 00                	push   $0x0
f0113f3e:	68 00 00 00 40       	push   $0x40000000
f0113f43:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f46:	e8 3f 25 00 00       	call   f011648a <CCP>
f0113f4b:	83 c4 30             	add    $0x30,%esp
f0113f4e:	85 c0                	test   %eax,%eax
f0113f50:	75 1e                	jne    f0113f70 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113f52:	83 ec 04             	sub    $0x4,%esp
f0113f55:	68 0c a6 13 f0       	push   $0xf013a60c
f0113f5a:	68 20 04 00 00       	push   $0x420
f0113f5f:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113f64:	e8 aa c4 fe ff       	call   f0100413 <_warn>
f0113f69:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f6c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f70:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f74:	74 04                	je     f0113f7a <test_share_chunk+0x5ee>
f0113f76:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f7a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113f7e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f81:	89 d0                	mov    %edx,%eax
f0113f83:	01 c0                	add    %eax,%eax
f0113f85:	01 d0                	add    %edx,%eax
f0113f87:	c1 e0 02             	shl    $0x2,%eax
f0113f8a:	f7 d8                	neg    %eax
f0113f8c:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113f91:	83 ec 08             	sub    $0x8,%esp
f0113f94:	6a 02                	push   $0x2
f0113f96:	6a 07                	push   $0x7
f0113f98:	6a 03                	push   $0x3
f0113f9a:	6a 07                	push   $0x7
f0113f9c:	6a 07                	push   $0x7
f0113f9e:	6a 02                	push   $0x2
f0113fa0:	50                   	push   %eax
f0113fa1:	68 00 30 00 00       	push   $0x3000
f0113fa6:	68 00 30 00 40       	push   $0x40003000
f0113fab:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fae:	e8 d7 24 00 00       	call   f011648a <CCP>
f0113fb3:	83 c4 30             	add    $0x30,%esp
f0113fb6:	85 c0                	test   %eax,%eax
f0113fb8:	75 1e                	jne    f0113fd8 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113fba:	83 ec 04             	sub    $0x4,%esp
f0113fbd:	68 0c a6 13 f0       	push   $0xf013a60c
f0113fc2:	68 28 04 00 00       	push   $0x428
f0113fc7:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0113fcc:	e8 42 c4 fe ff       	call   f0100413 <_warn>
f0113fd1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113fd4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fd8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fdc:	74 04                	je     f0113fe2 <test_share_chunk+0x656>
f0113fde:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113fe2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113fe6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fe9:	c1 e0 02             	shl    $0x2,%eax
f0113fec:	83 ec 08             	sub    $0x8,%esp
f0113fef:	6a 02                	push   $0x2
f0113ff1:	6a 07                	push   $0x7
f0113ff3:	6a 03                	push   $0x3
f0113ff5:	6a 07                	push   $0x7
f0113ff7:	6a 07                	push   $0x7
f0113ff9:	6a 03                	push   $0x3
f0113ffb:	50                   	push   %eax
f0113ffc:	68 00 00 0a 00       	push   $0xa0000
f0114001:	68 00 00 0a 40       	push   $0x400a0000
f0114006:	ff 75 cc             	pushl  -0x34(%ebp)
f0114009:	e8 7c 24 00 00       	call   f011648a <CCP>
f011400e:	83 c4 30             	add    $0x30,%esp
f0114011:	85 c0                	test   %eax,%eax
f0114013:	75 1e                	jne    f0114033 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114015:	83 ec 04             	sub    $0x4,%esp
f0114018:	68 0c a6 13 f0       	push   $0xf013a60c
f011401d:	68 30 04 00 00       	push   $0x430
f0114022:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114027:	e8 e7 c3 fe ff       	call   f0100413 <_warn>
f011402c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011402f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114033:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114037:	74 04                	je     f011403d <test_share_chunk+0x6b1>
f0114039:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011403d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114041:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114045:	0f 84 92 00 00 00    	je     f01140dd <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f011404b:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114052:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0114059:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114060:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0114067:	8b 45 98             	mov    -0x68(%ebp),%eax
f011406a:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f011406d:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114074:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011407b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011407e:	8a 00                	mov    (%eax),%al
f0114080:	3c 41                	cmp    $0x41,%al
f0114082:	75 2d                	jne    f01140b1 <test_share_chunk+0x725>
f0114084:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114087:	8a 00                	mov    (%eax),%al
f0114089:	3c 41                	cmp    $0x41,%al
f011408b:	75 24                	jne    f01140b1 <test_share_chunk+0x725>
f011408d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114090:	8a 00                	mov    (%eax),%al
f0114092:	3c 41                	cmp    $0x41,%al
f0114094:	75 1b                	jne    f01140b1 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114096:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114099:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011409b:	3c 44                	cmp    $0x44,%al
f011409d:	75 12                	jne    f01140b1 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011409f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01140a2:	8a 00                	mov    (%eax),%al
f01140a4:	3c 44                	cmp    $0x44,%al
f01140a6:	75 09                	jne    f01140b1 <test_share_chunk+0x725>
f01140a8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01140ab:	8a 00                	mov    (%eax),%al
f01140ad:	3c 44                	cmp    $0x44,%al
f01140af:	74 1e                	je     f01140cf <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01140b1:	83 ec 04             	sub    $0x4,%esp
f01140b4:	68 54 a6 13 f0       	push   $0xf013a654
f01140b9:	68 42 04 00 00       	push   $0x442
f01140be:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01140c3:	e8 4b c3 fe ff       	call   f0100413 <_warn>
f01140c8:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01140cb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01140cf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140d3:	74 04                	je     f01140d9 <test_share_chunk+0x74d>
f01140d5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01140d9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01140dd:	83 ec 0c             	sub    $0xc,%esp
f01140e0:	68 c6 9c 13 f0       	push   $0xf0139cc6
f01140e5:	e8 24 cc fe ff       	call   f0100d0e <cprintf>
f01140ea:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01140ed:	83 ec 0c             	sub    $0xc,%esp
f01140f0:	68 60 a7 13 f0       	push   $0xf013a760
f01140f5:	e8 14 cc fe ff       	call   f0100d0e <cprintf>
f01140fa:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01140fd:	e8 a1 8d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114102:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114105:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114108:	89 d0                	mov    %edx,%eax
f011410a:	01 c0                	add    %eax,%eax
f011410c:	01 d0                	add    %edx,%eax
f011410e:	01 c0                	add    %eax,%eax
f0114110:	01 d0                	add    %edx,%eax
f0114112:	83 ec 0c             	sub    $0xc,%esp
f0114115:	6a 04                	push   $0x4
f0114117:	50                   	push   %eax
f0114118:	68 00 fc 3f 00       	push   $0x3ffc00
f011411d:	68 00 fc 09 00       	push   $0x9fc00
f0114122:	ff 75 cc             	pushl  -0x34(%ebp)
f0114125:	e8 ef 4b ff ff       	call   f0108d19 <share_chunk>
f011412a:	83 c4 20             	add    $0x20,%esp
f011412d:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114130:	e8 6e 8d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114135:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114138:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f011413c:	75 0b                	jne    f0114149 <test_share_chunk+0x7bd>
f011413e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114141:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114144:	83 f8 01             	cmp    $0x1,%eax
f0114147:	74 28                	je     f0114171 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114149:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011414c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011414f:	83 ec 0c             	sub    $0xc,%esp
f0114152:	50                   	push   %eax
f0114153:	ff 75 8c             	pushl  -0x74(%ebp)
f0114156:	68 d4 a6 13 f0       	push   $0xf013a6d4
f011415b:	68 58 04 00 00       	push   $0x458
f0114160:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114165:	e8 a9 c2 fe ff       	call   f0100413 <_warn>
f011416a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011416d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114171:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114175:	74 04                	je     f011417b <test_share_chunk+0x7ef>
f0114177:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011417b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011417f:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114186:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114189:	89 d0                	mov    %edx,%eax
f011418b:	01 c0                	add    %eax,%eax
f011418d:	01 d0                	add    %edx,%eax
f011418f:	c1 e0 02             	shl    $0x2,%eax
f0114192:	83 ec 08             	sub    $0x8,%esp
f0114195:	6a 02                	push   $0x2
f0114197:	6a 07                	push   $0x7
f0114199:	6a 07                	push   $0x7
f011419b:	6a 07                	push   $0x7
f011419d:	6a 05                	push   $0x5
f011419f:	6a ff                	push   $0xffffffff
f01141a1:	50                   	push   %eax
f01141a2:	68 00 f0 3f 00       	push   $0x3ff000
f01141a7:	68 00 f0 09 00       	push   $0x9f000
f01141ac:	ff 75 cc             	pushl  -0x34(%ebp)
f01141af:	e8 d6 22 00 00       	call   f011648a <CCP>
f01141b4:	83 c4 30             	add    $0x30,%esp
f01141b7:	85 c0                	test   %eax,%eax
f01141b9:	75 25                	jne    f01141e0 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01141bb:	83 ec 04             	sub    $0x4,%esp
f01141be:	68 0c a6 13 f0       	push   $0xf013a60c
f01141c3:	68 61 04 00 00       	push   $0x461
f01141c8:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01141cd:	e8 41 c2 fe ff       	call   f0100413 <_warn>
f01141d2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01141d9:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01141e0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141e4:	74 04                	je     f01141ea <test_share_chunk+0x85e>
f01141e6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141ea:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01141ee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141f1:	c1 e0 02             	shl    $0x2,%eax
f01141f4:	83 ec 08             	sub    $0x8,%esp
f01141f7:	6a 02                	push   $0x2
f01141f9:	6a 07                	push   $0x7
f01141fb:	6a 07                	push   $0x7
f01141fd:	6a 07                	push   $0x7
f01141ff:	6a 05                	push   $0x5
f0114201:	6a 03                	push   $0x3
f0114203:	50                   	push   %eax
f0114204:	68 00 f0 3f 00       	push   $0x3ff000
f0114209:	68 00 f0 09 00       	push   $0x9f000
f011420e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114211:	e8 74 22 00 00       	call   f011648a <CCP>
f0114216:	83 c4 30             	add    $0x30,%esp
f0114219:	85 c0                	test   %eax,%eax
f011421b:	75 1e                	jne    f011423b <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011421d:	83 ec 04             	sub    $0x4,%esp
f0114220:	68 0c a6 13 f0       	push   $0xf013a60c
f0114225:	68 6a 04 00 00       	push   $0x46a
f011422a:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011422f:	e8 df c1 fe ff       	call   f0100413 <_warn>
f0114234:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114237:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011423b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011423f:	74 04                	je     f0114245 <test_share_chunk+0x8b9>
f0114241:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114245:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114249:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011424c:	c1 e0 03             	shl    $0x3,%eax
f011424f:	83 ec 08             	sub    $0x8,%esp
f0114252:	6a 02                	push   $0x2
f0114254:	6a 07                	push   $0x7
f0114256:	6a 07                	push   $0x7
f0114258:	6a 07                	push   $0x7
f011425a:	6a 05                	push   $0x5
f011425c:	6a 04                	push   $0x4
f011425e:	50                   	push   %eax
f011425f:	68 00 00 40 00       	push   $0x400000
f0114264:	68 00 00 0a 00       	push   $0xa0000
f0114269:	ff 75 cc             	pushl  -0x34(%ebp)
f011426c:	e8 19 22 00 00       	call   f011648a <CCP>
f0114271:	83 c4 30             	add    $0x30,%esp
f0114274:	85 c0                	test   %eax,%eax
f0114276:	75 1e                	jne    f0114296 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114278:	83 ec 04             	sub    $0x4,%esp
f011427b:	68 0c a6 13 f0       	push   $0xf013a60c
f0114280:	68 72 04 00 00       	push   $0x472
f0114285:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011428a:	e8 84 c1 fe ff       	call   f0100413 <_warn>
f011428f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114292:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114296:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011429a:	74 04                	je     f01142a0 <test_share_chunk+0x914>
f011429c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142a0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01142a4:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01142a8:	0f 84 b2 00 00 00    	je     f0114360 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f01142ae:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01142b5:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01142bc:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01142c3:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01142ca:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01142d1:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01142d8:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01142df:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01142e6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142e9:	8a 00                	mov    (%eax),%al
f01142eb:	3c 44                	cmp    $0x44,%al
f01142ed:	75 45                	jne    f0114334 <test_share_chunk+0x9a8>
f01142ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142f2:	8a 00                	mov    (%eax),%al
f01142f4:	3c 44                	cmp    $0x44,%al
f01142f6:	75 3c                	jne    f0114334 <test_share_chunk+0x9a8>
f01142f8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01142fb:	8a 00                	mov    (%eax),%al
f01142fd:	3c 44                	cmp    $0x44,%al
f01142ff:	75 33                	jne    f0114334 <test_share_chunk+0x9a8>
f0114301:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114304:	8a 00                	mov    (%eax),%al
f0114306:	3c 44                	cmp    $0x44,%al
f0114308:	75 2a                	jne    f0114334 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011430a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011430d:	8a 10                	mov    (%eax),%dl
f011430f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114312:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114314:	38 c2                	cmp    %al,%dl
f0114316:	75 1c                	jne    f0114334 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114318:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011431b:	8a 10                	mov    (%eax),%dl
f011431d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114320:	8a 00                	mov    (%eax),%al
f0114322:	38 c2                	cmp    %al,%dl
f0114324:	75 0e                	jne    f0114334 <test_share_chunk+0x9a8>
f0114326:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114329:	8a 10                	mov    (%eax),%dl
f011432b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011432e:	8a 00                	mov    (%eax),%al
f0114330:	38 c2                	cmp    %al,%dl
f0114332:	74 1e                	je     f0114352 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114334:	83 ec 04             	sub    $0x4,%esp
f0114337:	68 54 a6 13 f0       	push   $0xf013a654
f011433c:	68 87 04 00 00       	push   $0x487
f0114341:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114346:	e8 c8 c0 fe ff       	call   f0100413 <_warn>
f011434b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011434e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114352:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114356:	74 04                	je     f011435c <test_share_chunk+0x9d0>
f0114358:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011435c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114360:	83 ec 0c             	sub    $0xc,%esp
f0114363:	68 98 a7 13 f0       	push   $0xf013a798
f0114368:	e8 a1 c9 fe ff       	call   f0100d0e <cprintf>
f011436d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114370:	83 ec 08             	sub    $0x8,%esp
f0114373:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114376:	68 a8 a7 13 f0       	push   $0xf013a7a8
f011437b:	e8 8e c9 fe ff       	call   f0100d0e <cprintf>
f0114380:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114383:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114387:	75 10                	jne    f0114399 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0114389:	83 ec 0c             	sub    $0xc,%esp
f011438c:	68 d8 a7 13 f0       	push   $0xf013a7d8
f0114391:	e8 78 c9 fe ff       	call   f0100d0e <cprintf>
f0114396:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114399:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f011439e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01143a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01143a4:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01143a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01143ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01143af:	5b                   	pop    %ebx
f01143b0:	5e                   	pop    %esi
f01143b1:	5f                   	pop    %edi
f01143b2:	5d                   	pop    %ebp
f01143b3:	c3                   	ret    

f01143b4 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01143b4:	55                   	push   %ebp
f01143b5:	89 e5                	mov    %esp,%ebp
f01143b7:	57                   	push   %edi
f01143b8:	56                   	push   %esi
f01143b9:	53                   	push   %ebx
f01143ba:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01143c0:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01143c6:	bb d8 99 13 f0       	mov    $0xf01399d8,%ebx
f01143cb:	ba 0f 00 00 00       	mov    $0xf,%edx
f01143d0:	89 c7                	mov    %eax,%edi
f01143d2:	89 de                	mov    %ebx,%esi
f01143d4:	89 d1                	mov    %edx,%ecx
f01143d6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01143d8:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01143de:	b9 23 00 00 00       	mov    $0x23,%ecx
f01143e3:	b0 00                	mov    $0x0,%al
f01143e5:	89 d7                	mov    %edx,%edi
f01143e7:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01143e9:	6a 00                	push   $0x0
f01143eb:	6a 0a                	push   $0xa
f01143ed:	6a 14                	push   $0x14
f01143ef:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01143f5:	50                   	push   %eax
f01143f6:	e8 6f 4d ff ff       	call   f010916a <env_create>
f01143fb:	83 c4 10             	add    $0x10,%esp
f01143fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114401:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114404:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114407:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f011440a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011440d:	8b 40 60             	mov    0x60(%eax),%eax
f0114410:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114413:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114416:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114419:	83 ec 0c             	sub    $0xc,%esp
f011441c:	ff 75 d0             	pushl  -0x30(%ebp)
f011441f:	e8 32 20 00 00       	call   f0116456 <ClearUserSpace>
f0114424:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114427:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011442e:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0114435:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011443c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114440:	83 ec 0c             	sub    $0xc,%esp
f0114443:	68 14 a8 13 f0       	push   $0xf013a814
f0114448:	e8 c1 c8 fe ff       	call   f0100d0e <cprintf>
f011444d:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114450:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114457:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f011445e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114461:	8a 00                	mov    (%eax),%al
f0114463:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114469:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011446c:	8a 00                	mov    (%eax),%al
f011446e:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114474:	83 ec 08             	sub    $0x8,%esp
f0114477:	68 00 f0 bf ef       	push   $0xefbff000
f011447c:	ff 75 d0             	pushl  -0x30(%ebp)
f011447f:	e8 b3 1f 00 00       	call   f0116437 <GP>
f0114484:	83 c4 10             	add    $0x10,%esp
f0114487:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011448a:	e8 14 8a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011448f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114492:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114495:	c1 e0 02             	shl    $0x2,%eax
f0114498:	6a 02                	push   $0x2
f011449a:	50                   	push   %eax
f011449b:	68 00 f0 bf ef       	push   $0xefbff000
f01144a0:	ff 75 d0             	pushl  -0x30(%ebp)
f01144a3:	e8 84 49 ff ff       	call   f0108e2c <allocate_chunk>
f01144a8:	83 c4 10             	add    $0x10,%esp
f01144ab:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01144ae:	e8 f0 89 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01144b3:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01144b6:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01144ba:	75 08                	jne    f01144c4 <test_allocate_chunk+0x110>
f01144bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01144bf:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01144c2:	74 2a                	je     f01144ee <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01144c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01144c7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01144ca:	83 ec 08             	sub    $0x8,%esp
f01144cd:	6a 00                	push   $0x0
f01144cf:	50                   	push   %eax
f01144d0:	ff 75 b0             	pushl  -0x50(%ebp)
f01144d3:	68 40 a8 13 f0       	push   $0xf013a840
f01144d8:	68 c3 04 00 00       	push   $0x4c3
f01144dd:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01144e2:	e8 2c bf fe ff       	call   f0100413 <_warn>
f01144e7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144ea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01144ee:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144f2:	74 04                	je     f01144f8 <test_allocate_chunk+0x144>
f01144f4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01144f8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01144fc:	e8 a2 89 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114501:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114504:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114507:	01 c0                	add    %eax,%eax
f0114509:	89 c1                	mov    %eax,%ecx
f011450b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011450e:	89 d0                	mov    %edx,%eax
f0114510:	c1 e0 02             	shl    $0x2,%eax
f0114513:	01 d0                	add    %edx,%eax
f0114515:	f7 d8                	neg    %eax
f0114517:	2d 00 00 40 10       	sub    $0x10400000,%eax
f011451c:	6a 02                	push   $0x2
f011451e:	51                   	push   %ecx
f011451f:	50                   	push   %eax
f0114520:	ff 75 d0             	pushl  -0x30(%ebp)
f0114523:	e8 04 49 ff ff       	call   f0108e2c <allocate_chunk>
f0114528:	83 c4 10             	add    $0x10,%esp
f011452b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011452e:	e8 70 89 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114533:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114536:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011453a:	75 08                	jne    f0114544 <test_allocate_chunk+0x190>
f011453c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011453f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114542:	74 2a                	je     f011456e <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114544:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114547:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011454a:	83 ec 08             	sub    $0x8,%esp
f011454d:	6a 00                	push   $0x0
f011454f:	50                   	push   %eax
f0114550:	ff 75 b0             	pushl  -0x50(%ebp)
f0114553:	68 40 a8 13 f0       	push   $0xf013a840
f0114558:	68 d1 04 00 00       	push   $0x4d1
f011455d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114562:	e8 ac be fe ff       	call   f0100413 <_warn>
f0114567:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011456a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011456e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114572:	74 04                	je     f0114578 <test_allocate_chunk+0x1c4>
f0114574:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114578:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f011457c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011457f:	c1 e0 02             	shl    $0x2,%eax
f0114582:	83 ec 08             	sub    $0x8,%esp
f0114585:	6a 03                	push   $0x3
f0114587:	6a 00                	push   $0x0
f0114589:	6a 00                	push   $0x0
f011458b:	68 ff 0f 00 00       	push   $0xfff
f0114590:	ff 75 b8             	pushl  -0x48(%ebp)
f0114593:	6a 01                	push   $0x1
f0114595:	50                   	push   %eax
f0114596:	68 00 f0 bf ef       	push   $0xefbff000
f011459b:	6a 00                	push   $0x0
f011459d:	ff 75 d0             	pushl  -0x30(%ebp)
f01145a0:	e8 e5 1e 00 00       	call   f011648a <CCP>
f01145a5:	83 c4 30             	add    $0x30,%esp
f01145a8:	85 c0                	test   %eax,%eax
f01145aa:	75 1e                	jne    f01145ca <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01145ac:	83 ec 04             	sub    $0x4,%esp
f01145af:	68 a8 a8 13 f0       	push   $0xf013a8a8
f01145b4:	68 d9 04 00 00       	push   $0x4d9
f01145b9:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01145be:	e8 50 be fe ff       	call   f0100413 <_warn>
f01145c3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01145c6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145ca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145ce:	74 04                	je     f01145d4 <test_allocate_chunk+0x220>
f01145d0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145d4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01145d8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01145db:	8a 10                	mov    (%eax),%dl
f01145dd:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01145e3:	38 c2                	cmp    %al,%dl
f01145e5:	75 0f                	jne    f01145f6 <test_allocate_chunk+0x242>
f01145e7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01145ea:	8a 10                	mov    (%eax),%dl
f01145ec:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01145f2:	38 c2                	cmp    %al,%dl
f01145f4:	74 1e                	je     f0114614 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01145f6:	83 ec 04             	sub    $0x4,%esp
f01145f9:	68 f4 a8 13 f0       	push   $0xf013a8f4
f01145fe:	68 e1 04 00 00       	push   $0x4e1
f0114603:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114608:	e8 06 be fe ff       	call   f0100413 <_warn>
f011460d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114610:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114614:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114618:	74 04                	je     f011461e <test_allocate_chunk+0x26a>
f011461a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011461e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114622:	83 ec 0c             	sub    $0xc,%esp
f0114625:	68 89 a6 13 f0       	push   $0xf013a689
f011462a:	e8 df c6 fe ff       	call   f0100d0e <cprintf>
f011462f:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114632:	83 ec 0c             	sub    $0xc,%esp
f0114635:	68 2c a9 13 f0       	push   $0xf013a92c
f011463a:	e8 cf c6 fe ff       	call   f0100d0e <cprintf>
f011463f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114642:	e8 5c 88 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114647:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011464a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011464d:	c1 e0 05             	shl    $0x5,%eax
f0114650:	68 02 0e 00 00       	push   $0xe02
f0114655:	50                   	push   %eax
f0114656:	6a 00                	push   $0x0
f0114658:	ff 75 d0             	pushl  -0x30(%ebp)
f011465b:	e8 cc 47 ff ff       	call   f0108e2c <allocate_chunk>
f0114660:	83 c4 10             	add    $0x10,%esp
f0114663:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114666:	e8 38 88 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011466b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f011466e:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114672:	75 36                	jne    f01146aa <test_allocate_chunk+0x2f6>
f0114674:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114677:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011467a:	89 c1                	mov    %eax,%ecx
f011467c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011467f:	c1 e0 05             	shl    $0x5,%eax
f0114682:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114685:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011468c:	99                   	cltd   
f011468d:	f7 fe                	idiv   %esi
f011468f:	89 c3                	mov    %eax,%ebx
f0114691:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114694:	c1 e0 05             	shl    $0x5,%eax
f0114697:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011469a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01146a1:	99                   	cltd   
f01146a2:	f7 fe                	idiv   %esi
f01146a4:	01 d8                	add    %ebx,%eax
f01146a6:	39 c1                	cmp    %eax,%ecx
f01146a8:	74 54                	je     f01146fe <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f01146aa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146ad:	c1 e0 05             	shl    $0x5,%eax
f01146b0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146b3:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01146ba:	99                   	cltd   
f01146bb:	f7 ff                	idiv   %edi
f01146bd:	89 c1                	mov    %eax,%ecx
f01146bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146c2:	c1 e0 05             	shl    $0x5,%eax
f01146c5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01146c8:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01146cf:	99                   	cltd   
f01146d0:	f7 fe                	idiv   %esi
f01146d2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01146d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146d8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01146db:	83 ec 08             	sub    $0x8,%esp
f01146de:	52                   	push   %edx
f01146df:	50                   	push   %eax
f01146e0:	ff 75 a8             	pushl  -0x58(%ebp)
f01146e3:	68 6c a9 13 f0       	push   $0xf013a96c
f01146e8:	68 f6 04 00 00       	push   $0x4f6
f01146ed:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01146f2:	e8 1c bd fe ff       	call   f0100413 <_warn>
f01146f7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114702:	74 04                	je     f0114708 <test_allocate_chunk+0x354>
f0114704:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114708:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011470c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114713:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114716:	c1 e0 05             	shl    $0x5,%eax
f0114719:	83 ec 08             	sub    $0x8,%esp
f011471c:	6a 03                	push   $0x3
f011471e:	6a 00                	push   $0x0
f0114720:	6a 00                	push   $0x0
f0114722:	68 07 0e 00 00       	push   $0xe07
f0114727:	68 03 0e 00 00       	push   $0xe03
f011472c:	6a 01                	push   $0x1
f011472e:	50                   	push   %eax
f011472f:	6a 00                	push   $0x0
f0114731:	6a 00                	push   $0x0
f0114733:	ff 75 d0             	pushl  -0x30(%ebp)
f0114736:	e8 4f 1d 00 00       	call   f011648a <CCP>
f011473b:	83 c4 30             	add    $0x30,%esp
f011473e:	85 c0                	test   %eax,%eax
f0114740:	75 25                	jne    f0114767 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114742:	83 ec 04             	sub    $0x4,%esp
f0114745:	68 a8 a8 13 f0       	push   $0xf013a8a8
f011474a:	68 ff 04 00 00       	push   $0x4ff
f011474f:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114754:	e8 ba bc fe ff       	call   f0100413 <_warn>
f0114759:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011475c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114760:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114767:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011476b:	74 04                	je     f0114771 <test_allocate_chunk+0x3bd>
f011476d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114771:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114775:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114779:	74 5a                	je     f01147d5 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f011477b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011477e:	01 c0                	add    %eax,%eax
f0114780:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114783:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114786:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114789:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011478c:	01 c0                	add    %eax,%eax
f011478e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114791:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114794:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114797:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011479a:	8a 00                	mov    (%eax),%al
f011479c:	3c 4b                	cmp    $0x4b,%al
f011479e:	75 09                	jne    f01147a9 <test_allocate_chunk+0x3f5>
f01147a0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147a3:	8a 00                	mov    (%eax),%al
f01147a5:	3c 4d                	cmp    $0x4d,%al
f01147a7:	74 1e                	je     f01147c7 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01147a9:	83 ec 04             	sub    $0x4,%esp
f01147ac:	68 f4 a8 13 f0       	push   $0xf013a8f4
f01147b1:	68 0d 05 00 00       	push   $0x50d
f01147b6:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01147bb:	e8 53 bc fe ff       	call   f0100413 <_warn>
f01147c0:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01147c3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01147c7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147cb:	74 04                	je     f01147d1 <test_allocate_chunk+0x41d>
f01147cd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01147d1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01147d5:	83 ec 0c             	sub    $0xc,%esp
f01147d8:	68 63 9c 13 f0       	push   $0xf0139c63
f01147dd:	e8 2c c5 fe ff       	call   f0100d0e <cprintf>
f01147e2:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f01147e5:	83 ec 0c             	sub    $0xc,%esp
f01147e8:	68 cc a9 13 f0       	push   $0xf013a9cc
f01147ed:	e8 1c c5 fe ff       	call   f0100d0e <cprintf>
f01147f2:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01147f5:	e8 a9 86 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01147fa:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f01147fd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114800:	c1 e0 06             	shl    $0x6,%eax
f0114803:	89 c2                	mov    %eax,%edx
f0114805:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114808:	c1 e0 05             	shl    $0x5,%eax
f011480b:	6a 00                	push   $0x0
f011480d:	52                   	push   %edx
f011480e:	50                   	push   %eax
f011480f:	ff 75 d0             	pushl  -0x30(%ebp)
f0114812:	e8 15 46 ff ff       	call   f0108e2c <allocate_chunk>
f0114817:	83 c4 10             	add    $0x10,%esp
f011481a:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011481d:	e8 81 86 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114822:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114825:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114829:	75 36                	jne    f0114861 <test_allocate_chunk+0x4ad>
f011482b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011482e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114831:	89 c1                	mov    %eax,%ecx
f0114833:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114836:	c1 e0 06             	shl    $0x6,%eax
f0114839:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011483c:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114843:	99                   	cltd   
f0114844:	f7 ff                	idiv   %edi
f0114846:	89 c3                	mov    %eax,%ebx
f0114848:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011484b:	c1 e0 06             	shl    $0x6,%eax
f011484e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114851:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114858:	99                   	cltd   
f0114859:	f7 fe                	idiv   %esi
f011485b:	01 d8                	add    %ebx,%eax
f011485d:	39 c1                	cmp    %eax,%ecx
f011485f:	74 54                	je     f01148b5 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114861:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114864:	c1 e0 06             	shl    $0x6,%eax
f0114867:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011486a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114871:	99                   	cltd   
f0114872:	f7 fb                	idiv   %ebx
f0114874:	89 c1                	mov    %eax,%ecx
f0114876:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114879:	c1 e0 06             	shl    $0x6,%eax
f011487c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011487f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114886:	99                   	cltd   
f0114887:	f7 ff                	idiv   %edi
f0114889:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011488c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011488f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114892:	83 ec 08             	sub    $0x8,%esp
f0114895:	52                   	push   %edx
f0114896:	50                   	push   %eax
f0114897:	ff 75 a4             	pushl  -0x5c(%ebp)
f011489a:	68 6c a9 13 f0       	push   $0xf013a96c
f011489f:	68 23 05 00 00       	push   $0x523
f01148a4:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01148a9:	e8 65 bb fe ff       	call   f0100413 <_warn>
f01148ae:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148b1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148b5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148b9:	74 04                	je     f01148bf <test_allocate_chunk+0x50b>
f01148bb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148bf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01148c3:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01148ca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148cd:	c1 e0 06             	shl    $0x6,%eax
f01148d0:	89 c2                	mov    %eax,%edx
f01148d2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148d5:	c1 e0 05             	shl    $0x5,%eax
f01148d8:	83 ec 08             	sub    $0x8,%esp
f01148db:	6a 03                	push   $0x3
f01148dd:	6a 00                	push   $0x0
f01148df:	6a 00                	push   $0x0
f01148e1:	68 07 0e 00 00       	push   $0xe07
f01148e6:	6a 01                	push   $0x1
f01148e8:	6a 01                	push   $0x1
f01148ea:	52                   	push   %edx
f01148eb:	50                   	push   %eax
f01148ec:	6a 00                	push   $0x0
f01148ee:	ff 75 d0             	pushl  -0x30(%ebp)
f01148f1:	e8 94 1b 00 00       	call   f011648a <CCP>
f01148f6:	83 c4 30             	add    $0x30,%esp
f01148f9:	85 c0                	test   %eax,%eax
f01148fb:	75 25                	jne    f0114922 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01148fd:	83 ec 04             	sub    $0x4,%esp
f0114900:	68 a8 a8 13 f0       	push   $0xf013a8a8
f0114905:	68 2c 05 00 00       	push   $0x52c
f011490a:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011490f:	e8 ff ba fe ff       	call   f0100413 <_warn>
f0114914:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114917:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011491b:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114922:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114926:	74 04                	je     f011492c <test_allocate_chunk+0x578>
f0114928:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011492c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114930:	83 ec 0c             	sub    $0xc,%esp
f0114933:	68 c6 9c 13 f0       	push   $0xf0139cc6
f0114938:	e8 d1 c3 fe ff       	call   f0100d0e <cprintf>
f011493d:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114940:	83 ec 0c             	sub    $0xc,%esp
f0114943:	68 0c aa 13 f0       	push   $0xf013aa0c
f0114948:	e8 c1 c3 fe ff       	call   f0100d0e <cprintf>
f011494d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114950:	e8 4e 85 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114955:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114958:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011495b:	c1 e0 06             	shl    $0x6,%eax
f011495e:	68 06 0e 00 00       	push   $0xe06
f0114963:	50                   	push   %eax
f0114964:	68 00 00 00 80       	push   $0x80000000
f0114969:	ff 75 d0             	pushl  -0x30(%ebp)
f011496c:	e8 bb 44 ff ff       	call   f0108e2c <allocate_chunk>
f0114971:	83 c4 10             	add    $0x10,%esp
f0114974:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114977:	e8 27 85 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011497c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f011497f:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114983:	75 36                	jne    f01149bb <test_allocate_chunk+0x607>
f0114985:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114988:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011498b:	89 c1                	mov    %eax,%ecx
f011498d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114990:	c1 e0 06             	shl    $0x6,%eax
f0114993:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114996:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011499d:	99                   	cltd   
f011499e:	f7 fb                	idiv   %ebx
f01149a0:	89 c3                	mov    %eax,%ebx
f01149a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149a5:	c1 e0 06             	shl    $0x6,%eax
f01149a8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01149ab:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01149b2:	99                   	cltd   
f01149b3:	f7 fe                	idiv   %esi
f01149b5:	01 d8                	add    %ebx,%eax
f01149b7:	39 c1                	cmp    %eax,%ecx
f01149b9:	74 54                	je     f0114a0f <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f01149bb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149be:	c1 e0 06             	shl    $0x6,%eax
f01149c1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01149c4:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01149cb:	99                   	cltd   
f01149cc:	f7 ff                	idiv   %edi
f01149ce:	89 c1                	mov    %eax,%ecx
f01149d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149d3:	c1 e0 06             	shl    $0x6,%eax
f01149d6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01149d9:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01149e0:	99                   	cltd   
f01149e1:	f7 fb                	idiv   %ebx
f01149e3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01149e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149e9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01149ec:	83 ec 08             	sub    $0x8,%esp
f01149ef:	52                   	push   %edx
f01149f0:	50                   	push   %eax
f01149f1:	ff 75 9c             	pushl  -0x64(%ebp)
f01149f4:	68 6c a9 13 f0       	push   $0xf013a96c
f01149f9:	68 42 05 00 00       	push   $0x542
f01149fe:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114a03:	e8 0b ba fe ff       	call   f0100413 <_warn>
f0114a08:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a0b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a0f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a13:	74 04                	je     f0114a19 <test_allocate_chunk+0x665>
f0114a15:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a19:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114a1d:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114a24:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a27:	c1 e0 06             	shl    $0x6,%eax
f0114a2a:	83 ec 08             	sub    $0x8,%esp
f0114a2d:	6a 03                	push   $0x3
f0114a2f:	6a 00                	push   $0x0
f0114a31:	6a 00                	push   $0x0
f0114a33:	68 07 0e 00 00       	push   $0xe07
f0114a38:	68 07 0e 00 00       	push   $0xe07
f0114a3d:	6a 01                	push   $0x1
f0114a3f:	50                   	push   %eax
f0114a40:	68 00 00 00 80       	push   $0x80000000
f0114a45:	6a 00                	push   $0x0
f0114a47:	ff 75 d0             	pushl  -0x30(%ebp)
f0114a4a:	e8 3b 1a 00 00       	call   f011648a <CCP>
f0114a4f:	83 c4 30             	add    $0x30,%esp
f0114a52:	85 c0                	test   %eax,%eax
f0114a54:	75 25                	jne    f0114a7b <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114a56:	83 ec 04             	sub    $0x4,%esp
f0114a59:	68 a8 a8 13 f0       	push   $0xf013a8a8
f0114a5e:	68 4b 05 00 00       	push   $0x54b
f0114a63:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114a68:	e8 a6 b9 fe ff       	call   f0100413 <_warn>
f0114a6d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a70:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114a74:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114a7b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a7f:	74 04                	je     f0114a85 <test_allocate_chunk+0x6d1>
f0114a81:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114a85:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114a89:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114a8d:	74 6f                	je     f0114afe <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114a8f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a92:	01 c0                	add    %eax,%eax
f0114a94:	05 00 00 00 80       	add    $0x80000000,%eax
f0114a99:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114a9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a9f:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114aa2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114aa5:	89 d0                	mov    %edx,%eax
f0114aa7:	c1 e0 02             	shl    $0x2,%eax
f0114aaa:	01 d0                	add    %edx,%eax
f0114aac:	01 c0                	add    %eax,%eax
f0114aae:	01 d0                	add    %edx,%eax
f0114ab0:	01 c0                	add    %eax,%eax
f0114ab2:	05 00 00 00 80       	add    $0x80000000,%eax
f0114ab7:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114aba:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114abd:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114ac0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ac3:	8a 00                	mov    (%eax),%al
f0114ac5:	3c 4b                	cmp    $0x4b,%al
f0114ac7:	75 09                	jne    f0114ad2 <test_allocate_chunk+0x71e>
f0114ac9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114acc:	8a 00                	mov    (%eax),%al
f0114ace:	3c 4d                	cmp    $0x4d,%al
f0114ad0:	74 1e                	je     f0114af0 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114ad2:	83 ec 04             	sub    $0x4,%esp
f0114ad5:	68 f4 a8 13 f0       	push   $0xf013a8f4
f0114ada:	68 59 05 00 00       	push   $0x559
f0114adf:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114ae4:	e8 2a b9 fe ff       	call   f0100413 <_warn>
f0114ae9:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114aec:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114af0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114af4:	74 04                	je     f0114afa <test_allocate_chunk+0x746>
f0114af6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114afa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114afe:	83 ec 0c             	sub    $0xc,%esp
f0114b01:	68 98 a7 13 f0       	push   $0xf013a798
f0114b06:	e8 03 c2 fe ff       	call   f0100d0e <cprintf>
f0114b0b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114b0e:	83 ec 0c             	sub    $0xc,%esp
f0114b11:	68 48 aa 13 f0       	push   $0xf013aa48
f0114b16:	e8 f3 c1 fe ff       	call   f0100d0e <cprintf>
f0114b1b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114b1e:	e8 80 83 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114b23:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114b26:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b29:	89 d0                	mov    %edx,%eax
f0114b2b:	01 c0                	add    %eax,%eax
f0114b2d:	01 d0                	add    %edx,%eax
f0114b2f:	01 c0                	add    %eax,%eax
f0114b31:	01 d0                	add    %edx,%eax
f0114b33:	68 04 0e 00 00       	push   $0xe04
f0114b38:	50                   	push   %eax
f0114b39:	68 00 fc 3f 40       	push   $0x403ffc00
f0114b3e:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b41:	e8 e6 42 ff ff       	call   f0108e2c <allocate_chunk>
f0114b46:	83 c4 10             	add    $0x10,%esp
f0114b49:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114b4c:	e8 52 83 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0114b51:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114b54:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114b58:	75 0b                	jne    f0114b65 <test_allocate_chunk+0x7b1>
f0114b5a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b5d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b60:	83 f8 05             	cmp    $0x5,%eax
f0114b63:	74 2a                	je     f0114b8f <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114b65:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b68:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b6b:	83 ec 08             	sub    $0x8,%esp
f0114b6e:	6a 05                	push   $0x5
f0114b70:	50                   	push   %eax
f0114b71:	ff 75 98             	pushl  -0x68(%ebp)
f0114b74:	68 6c a9 13 f0       	push   $0xf013a96c
f0114b79:	68 70 05 00 00       	push   $0x570
f0114b7e:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114b83:	e8 8b b8 fe ff       	call   f0100413 <_warn>
f0114b88:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b8b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114b8f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b93:	74 04                	je     f0114b99 <test_allocate_chunk+0x7e5>
f0114b95:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b99:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114b9d:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114ba4:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114ba7:	89 d0                	mov    %edx,%eax
f0114ba9:	01 c0                	add    %eax,%eax
f0114bab:	01 d0                	add    %edx,%eax
f0114bad:	c1 e0 02             	shl    $0x2,%eax
f0114bb0:	83 ec 08             	sub    $0x8,%esp
f0114bb3:	6a 03                	push   $0x3
f0114bb5:	6a 00                	push   $0x0
f0114bb7:	6a 00                	push   $0x0
f0114bb9:	68 07 0e 00 00       	push   $0xe07
f0114bbe:	68 05 0e 00 00       	push   $0xe05
f0114bc3:	6a 01                	push   $0x1
f0114bc5:	50                   	push   %eax
f0114bc6:	68 00 f0 3f 40       	push   $0x403ff000
f0114bcb:	6a 00                	push   $0x0
f0114bcd:	ff 75 d0             	pushl  -0x30(%ebp)
f0114bd0:	e8 b5 18 00 00       	call   f011648a <CCP>
f0114bd5:	83 c4 30             	add    $0x30,%esp
f0114bd8:	85 c0                	test   %eax,%eax
f0114bda:	75 25                	jne    f0114c01 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114bdc:	83 ec 04             	sub    $0x4,%esp
f0114bdf:	68 a8 a8 13 f0       	push   $0xf013a8a8
f0114be4:	68 79 05 00 00       	push   $0x579
f0114be9:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114bee:	e8 20 b8 fe ff       	call   f0100413 <_warn>
f0114bf3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114bf6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114bfa:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114c01:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c05:	74 04                	je     f0114c0b <test_allocate_chunk+0x857>
f0114c07:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114c0b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114c0f:	83 ec 0c             	sub    $0xc,%esp
f0114c12:	68 7f aa 13 f0       	push   $0xf013aa7f
f0114c17:	e8 f2 c0 fe ff       	call   f0100d0e <cprintf>
f0114c1c:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114c1f:	83 ec 08             	sub    $0x8,%esp
f0114c22:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114c25:	68 90 aa 13 f0       	push   $0xf013aa90
f0114c2a:	e8 df c0 fe ff       	call   f0100d0e <cprintf>
f0114c2f:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114c32:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114c36:	75 10                	jne    f0114c48 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114c38:	83 ec 0c             	sub    $0xc,%esp
f0114c3b:	68 c4 aa 13 f0       	push   $0xf013aac4
f0114c40:	e8 c9 c0 fe ff       	call   f0100d0e <cprintf>
f0114c45:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114c48:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f0114c4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114c50:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114c53:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114c56:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114c5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114c5e:	5b                   	pop    %ebx
f0114c5f:	5e                   	pop    %esi
f0114c60:	5f                   	pop    %edi
f0114c61:	5d                   	pop    %ebp
f0114c62:	c3                   	ret    

f0114c63 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114c63:	55                   	push   %ebp
f0114c64:	89 e5                	mov    %esp,%ebp
f0114c66:	57                   	push   %edi
f0114c67:	56                   	push   %esi
f0114c68:	53                   	push   %ebx
f0114c69:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114c6f:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114c72:	bb d8 99 13 f0       	mov    $0xf01399d8,%ebx
f0114c77:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114c7c:	89 c7                	mov    %eax,%edi
f0114c7e:	89 de                	mov    %ebx,%esi
f0114c80:	89 d1                	mov    %edx,%ecx
f0114c82:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114c84:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114c87:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114c8c:	b0 00                	mov    $0x0,%al
f0114c8e:	89 d7                	mov    %edx,%edi
f0114c90:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114c92:	6a 00                	push   $0x0
f0114c94:	6a 0a                	push   $0xa
f0114c96:	6a 14                	push   $0x14
f0114c98:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114c9b:	50                   	push   %eax
f0114c9c:	e8 c9 44 ff ff       	call   f010916a <env_create>
f0114ca1:	83 c4 10             	add    $0x10,%esp
f0114ca4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114ca7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114caa:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114cad:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114cb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114cb3:	8b 40 60             	mov    0x60(%eax),%eax
f0114cb6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114cb9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114cbc:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114cbf:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114cc6:	75 70 20 
f0114cc9:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114cd0:	00 00 00 
f0114cd3:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114cd6:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114cdb:	b8 00 00 00 00       	mov    $0x0,%eax
f0114ce0:	89 d7                	mov    %edx,%edi
f0114ce2:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114ce4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114ce7:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114cea:	83 ec 08             	sub    $0x8,%esp
f0114ced:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114cf3:	52                   	push   %edx
f0114cf4:	50                   	push   %eax
f0114cf5:	e8 5b cd 01 00       	call   f0131a55 <ltostr>
f0114cfa:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114cfd:	83 ec 04             	sub    $0x4,%esp
f0114d00:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114d06:	50                   	push   %eax
f0114d07:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114d0d:	50                   	push   %eax
f0114d0e:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114d14:	50                   	push   %eax
f0114d15:	e8 33 ce 01 00       	call   f0131b4d <strcconcat>
f0114d1a:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114d1d:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114d24:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114d2b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114d32:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114d39:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114d3d:	83 ec 0c             	sub    $0xc,%esp
f0114d40:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d43:	e8 0e 17 00 00       	call   f0116456 <ClearUserSpace>
f0114d48:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114d4b:	83 ec 0c             	sub    $0xc,%esp
f0114d4e:	68 04 ab 13 f0       	push   $0xf013ab04
f0114d53:	e8 b6 bf fe ff       	call   f0100d0e <cprintf>
f0114d58:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114d5b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114d5e:	c1 e0 03             	shl    $0x3,%eax
f0114d61:	83 ec 04             	sub    $0x4,%esp
f0114d64:	50                   	push   %eax
f0114d65:	6a 00                	push   $0x0
f0114d67:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d6a:	e8 d8 42 ff ff       	call   f0109047 <calculate_required_frames>
f0114d6f:	83 c4 10             	add    $0x10,%esp
f0114d72:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114d75:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114d79:	74 23                	je     f0114d9e <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114d7b:	83 ec 0c             	sub    $0xc,%esp
f0114d7e:	6a 03                	push   $0x3
f0114d80:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d83:	68 38 ab 13 f0       	push   $0xf013ab38
f0114d88:	68 b2 05 00 00       	push   $0x5b2
f0114d8d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114d92:	e8 7c b6 fe ff       	call   f0100413 <_warn>
f0114d97:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d9a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d9e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114da2:	74 04                	je     f0114da8 <test_calculate_required_frames+0x145>
f0114da4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114da8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114dac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114daf:	c1 e0 02             	shl    $0x2,%eax
f0114db2:	83 ec 04             	sub    $0x4,%esp
f0114db5:	50                   	push   %eax
f0114db6:	6a 00                	push   $0x0
f0114db8:	ff 75 d8             	pushl  -0x28(%ebp)
f0114dbb:	e8 87 42 ff ff       	call   f0109047 <calculate_required_frames>
f0114dc0:	83 c4 10             	add    $0x10,%esp
f0114dc3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114dc6:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114dcd:	74 26                	je     f0114df5 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114dcf:	83 ec 0c             	sub    $0xc,%esp
f0114dd2:	68 01 04 00 00       	push   $0x401
f0114dd7:	ff 75 c8             	pushl  -0x38(%ebp)
f0114dda:	68 38 ab 13 f0       	push   $0xf013ab38
f0114ddf:	68 bc 05 00 00       	push   $0x5bc
f0114de4:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114de9:	e8 25 b6 fe ff       	call   f0100413 <_warn>
f0114dee:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114df1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114df5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114df9:	74 04                	je     f0114dff <test_calculate_required_frames+0x19c>
f0114dfb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114dff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114e03:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e06:	c1 e0 0a             	shl    $0xa,%eax
f0114e09:	83 ec 04             	sub    $0x4,%esp
f0114e0c:	50                   	push   %eax
f0114e0d:	6a 00                	push   $0x0
f0114e0f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e12:	e8 30 42 ff ff       	call   f0109047 <calculate_required_frames>
f0114e17:	83 c4 10             	add    $0x10,%esp
f0114e1a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114e1d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e20:	c1 e0 0a             	shl    $0xa,%eax
f0114e23:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114e26:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e2d:	99                   	cltd   
f0114e2e:	f7 fb                	idiv   %ebx
f0114e30:	89 c1                	mov    %eax,%ecx
f0114e32:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e35:	c1 e0 0a             	shl    $0xa,%eax
f0114e38:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e3b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e42:	99                   	cltd   
f0114e43:	f7 fe                	idiv   %esi
f0114e45:	01 c8                	add    %ecx,%eax
f0114e47:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114e4a:	74 4c                	je     f0114e98 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114e4c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e4f:	c1 e0 0a             	shl    $0xa,%eax
f0114e52:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114e55:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e5c:	99                   	cltd   
f0114e5d:	f7 fb                	idiv   %ebx
f0114e5f:	89 c1                	mov    %eax,%ecx
f0114e61:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e64:	c1 e0 0a             	shl    $0xa,%eax
f0114e67:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e6a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e71:	99                   	cltd   
f0114e72:	f7 fe                	idiv   %esi
f0114e74:	01 c8                	add    %ecx,%eax
f0114e76:	83 ec 0c             	sub    $0xc,%esp
f0114e79:	50                   	push   %eax
f0114e7a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e7d:	68 38 ab 13 f0       	push   $0xf013ab38
f0114e82:	68 c6 05 00 00       	push   $0x5c6
f0114e87:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114e8c:	e8 82 b5 fe ff       	call   f0100413 <_warn>
f0114e91:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e94:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e98:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e9c:	74 04                	je     f0114ea2 <test_calculate_required_frames+0x23f>
f0114e9e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ea2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114ea6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114ea9:	89 d0                	mov    %edx,%eax
f0114eab:	01 c0                	add    %eax,%eax
f0114ead:	01 d0                	add    %edx,%eax
f0114eaf:	01 c0                	add    %eax,%eax
f0114eb1:	83 ec 04             	sub    $0x4,%esp
f0114eb4:	50                   	push   %eax
f0114eb5:	68 00 10 00 00       	push   $0x1000
f0114eba:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ebd:	e8 85 41 ff ff       	call   f0109047 <calculate_required_frames>
f0114ec2:	83 c4 10             	add    $0x10,%esp
f0114ec5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114ec8:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114ecc:	74 23                	je     f0114ef1 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114ece:	83 ec 0c             	sub    $0xc,%esp
f0114ed1:	6a 03                	push   $0x3
f0114ed3:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ed6:	68 38 ab 13 f0       	push   $0xf013ab38
f0114edb:	68 d2 05 00 00       	push   $0x5d2
f0114ee0:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114ee5:	e8 29 b5 fe ff       	call   f0100413 <_warn>
f0114eea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114eed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ef1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ef5:	74 04                	je     f0114efb <test_calculate_required_frames+0x298>
f0114ef7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114efb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114eff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f02:	89 c2                	mov    %eax,%edx
f0114f04:	01 d2                	add    %edx,%edx
f0114f06:	01 d0                	add    %edx,%eax
f0114f08:	83 ec 04             	sub    $0x4,%esp
f0114f0b:	50                   	push   %eax
f0114f0c:	68 00 18 00 00       	push   $0x1800
f0114f11:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f14:	e8 2e 41 ff ff       	call   f0109047 <calculate_required_frames>
f0114f19:	83 c4 10             	add    $0x10,%esp
f0114f1c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114f1f:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114f23:	74 23                	je     f0114f48 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114f25:	83 ec 0c             	sub    $0xc,%esp
f0114f28:	6a 03                	push   $0x3
f0114f2a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f2d:	68 38 ab 13 f0       	push   $0xf013ab38
f0114f32:	68 dc 05 00 00       	push   $0x5dc
f0114f37:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114f3c:	e8 d2 b4 fe ff       	call   f0100413 <_warn>
f0114f41:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f44:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f48:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f4c:	74 04                	je     f0114f52 <test_calculate_required_frames+0x2ef>
f0114f4e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f52:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114f56:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114f59:	89 d0                	mov    %edx,%eax
f0114f5b:	c1 e0 02             	shl    $0x2,%eax
f0114f5e:	01 d0                	add    %edx,%eax
f0114f60:	01 c0                	add    %eax,%eax
f0114f62:	83 ec 04             	sub    $0x4,%esp
f0114f65:	50                   	push   %eax
f0114f66:	68 00 00 40 00       	push   $0x400000
f0114f6b:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f6e:	e8 d4 40 ff ff       	call   f0109047 <calculate_required_frames>
f0114f73:	83 c4 10             	add    $0x10,%esp
f0114f76:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114f79:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114f80:	74 26                	je     f0114fa8 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114f82:	83 ec 0c             	sub    $0xc,%esp
f0114f85:	68 03 0a 00 00       	push   $0xa03
f0114f8a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f8d:	68 38 ab 13 f0       	push   $0xf013ab38
f0114f92:	68 e6 05 00 00       	push   $0x5e6
f0114f97:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114f9c:	e8 72 b4 fe ff       	call   f0100413 <_warn>
f0114fa1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fa4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114fa8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fac:	74 04                	je     f0114fb2 <test_calculate_required_frames+0x34f>
f0114fae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114fb2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114fb6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fb9:	01 c0                	add    %eax,%eax
f0114fbb:	83 ec 04             	sub    $0x4,%esp
f0114fbe:	50                   	push   %eax
f0114fbf:	68 00 00 70 00       	push   $0x700000
f0114fc4:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fc7:	e8 7b 40 ff ff       	call   f0109047 <calculate_required_frames>
f0114fcc:	83 c4 10             	add    $0x10,%esp
f0114fcf:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0114fd2:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114fd9:	74 26                	je     f0115001 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114fdb:	83 ec 0c             	sub    $0xc,%esp
f0114fde:	68 02 02 00 00       	push   $0x202
f0114fe3:	ff 75 c8             	pushl  -0x38(%ebp)
f0114fe6:	68 38 ab 13 f0       	push   $0xf013ab38
f0114feb:	68 f2 05 00 00       	push   $0x5f2
f0114ff0:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0114ff5:	e8 19 b4 fe ff       	call   f0100413 <_warn>
f0114ffa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ffd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115001:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115005:	74 04                	je     f011500b <test_calculate_required_frames+0x3a8>
f0115007:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011500b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011500f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115012:	83 ec 04             	sub    $0x4,%esp
f0115015:	50                   	push   %eax
f0115016:	68 ff ff 3f 00       	push   $0x3fffff
f011501b:	ff 75 d8             	pushl  -0x28(%ebp)
f011501e:	e8 24 40 ff ff       	call   f0109047 <calculate_required_frames>
f0115023:	83 c4 10             	add    $0x10,%esp
f0115026:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115029:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f011502d:	74 23                	je     f0115052 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f011502f:	83 ec 0c             	sub    $0xc,%esp
f0115032:	6a 04                	push   $0x4
f0115034:	ff 75 c8             	pushl  -0x38(%ebp)
f0115037:	68 38 ab 13 f0       	push   $0xf013ab38
f011503c:	68 fc 05 00 00       	push   $0x5fc
f0115041:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115046:	e8 c8 b3 fe ff       	call   f0100413 <_warn>
f011504b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011504e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115052:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115056:	74 04                	je     f011505c <test_calculate_required_frames+0x3f9>
f0115058:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011505c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115060:	83 ec 0c             	sub    $0xc,%esp
f0115063:	68 89 a6 13 f0       	push   $0xf013a689
f0115068:	e8 a1 bc fe ff       	call   f0100d0e <cprintf>
f011506d:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115070:	83 ec 0c             	sub    $0xc,%esp
f0115073:	68 90 ab 13 f0       	push   $0xf013ab90
f0115078:	e8 91 bc fe ff       	call   f0100d0e <cprintf>
f011507d:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115080:	83 ec 04             	sub    $0x4,%esp
f0115083:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115089:	50                   	push   %eax
f011508a:	68 42 9a 13 f0       	push   $0xf0139a42
f011508f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115095:	50                   	push   %eax
f0115096:	e8 b2 ca 01 00       	call   f0131b4d <strcconcat>
f011509b:	83 c4 10             	add    $0x10,%esp
f011509e:	83 ec 0c             	sub    $0xc,%esp
f01150a1:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01150a7:	50                   	push   %eax
f01150a8:	e8 c3 bc fe ff       	call   f0100d70 <execute_command>
f01150ad:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01150b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01150b3:	c1 e0 03             	shl    $0x3,%eax
f01150b6:	83 ec 04             	sub    $0x4,%esp
f01150b9:	50                   	push   %eax
f01150ba:	6a 00                	push   $0x0
f01150bc:	ff 75 d8             	pushl  -0x28(%ebp)
f01150bf:	e8 83 3f ff ff       	call   f0109047 <calculate_required_frames>
f01150c4:	83 c4 10             	add    $0x10,%esp
f01150c7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01150ca:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01150d1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01150d4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01150d7:	74 24                	je     f01150fd <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01150d9:	83 ec 0c             	sub    $0xc,%esp
f01150dc:	ff 75 c4             	pushl  -0x3c(%ebp)
f01150df:	ff 75 c8             	pushl  -0x38(%ebp)
f01150e2:	68 38 ab 13 f0       	push   $0xf013ab38
f01150e7:	68 10 06 00 00       	push   $0x610
f01150ec:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01150f1:	e8 1d b3 fe ff       	call   f0100413 <_warn>
f01150f6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150f9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150fd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115101:	74 04                	je     f0115107 <test_calculate_required_frames+0x4a4>
f0115103:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115107:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011510b:	83 ec 04             	sub    $0x4,%esp
f011510e:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115114:	50                   	push   %eax
f0115115:	68 4f 9a 13 f0       	push   $0xf0139a4f
f011511a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115120:	50                   	push   %eax
f0115121:	e8 27 ca 01 00       	call   f0131b4d <strcconcat>
f0115126:	83 c4 10             	add    $0x10,%esp
f0115129:	83 ec 0c             	sub    $0xc,%esp
f011512c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115132:	50                   	push   %eax
f0115133:	e8 38 bc fe ff       	call   f0100d70 <execute_command>
f0115138:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011513b:	83 ec 04             	sub    $0x4,%esp
f011513e:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115144:	50                   	push   %eax
f0115145:	68 c4 ab 13 f0       	push   $0xf013abc4
f011514a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115150:	50                   	push   %eax
f0115151:	e8 f7 c9 01 00       	call   f0131b4d <strcconcat>
f0115156:	83 c4 10             	add    $0x10,%esp
f0115159:	83 ec 0c             	sub    $0xc,%esp
f011515c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115162:	50                   	push   %eax
f0115163:	e8 08 bc fe ff       	call   f0100d70 <execute_command>
f0115168:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f011516b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011516e:	c1 e0 03             	shl    $0x3,%eax
f0115171:	83 ec 04             	sub    $0x4,%esp
f0115174:	50                   	push   %eax
f0115175:	6a 00                	push   $0x0
f0115177:	ff 75 d8             	pushl  -0x28(%ebp)
f011517a:	e8 c8 3e ff ff       	call   f0109047 <calculate_required_frames>
f011517f:	83 c4 10             	add    $0x10,%esp
f0115182:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0115185:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f011518c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011518f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115192:	74 24                	je     f01151b8 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115194:	83 ec 0c             	sub    $0xc,%esp
f0115197:	ff 75 c4             	pushl  -0x3c(%ebp)
f011519a:	ff 75 c8             	pushl  -0x38(%ebp)
f011519d:	68 38 ab 13 f0       	push   $0xf013ab38
f01151a2:	68 1e 06 00 00       	push   $0x61e
f01151a7:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01151ac:	e8 62 b2 fe ff       	call   f0100413 <_warn>
f01151b1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151b4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151b8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151bc:	74 04                	je     f01151c2 <test_calculate_required_frames+0x55f>
f01151be:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151c2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01151c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151c9:	c1 e0 0a             	shl    $0xa,%eax
f01151cc:	83 ec 04             	sub    $0x4,%esp
f01151cf:	50                   	push   %eax
f01151d0:	6a 00                	push   $0x0
f01151d2:	ff 75 d8             	pushl  -0x28(%ebp)
f01151d5:	e8 6d 3e ff ff       	call   f0109047 <calculate_required_frames>
f01151da:	83 c4 10             	add    $0x10,%esp
f01151dd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01151e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151e3:	c1 e0 0a             	shl    $0xa,%eax
f01151e6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01151e9:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01151f0:	99                   	cltd   
f01151f1:	f7 fb                	idiv   %ebx
f01151f3:	89 c1                	mov    %eax,%ecx
f01151f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151f8:	c1 e0 0a             	shl    $0xa,%eax
f01151fb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01151fe:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115205:	99                   	cltd   
f0115206:	f7 fe                	idiv   %esi
f0115208:	01 c8                	add    %ecx,%eax
f011520a:	83 e8 05             	sub    $0x5,%eax
f011520d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115210:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115213:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115216:	74 24                	je     f011523c <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115218:	83 ec 0c             	sub    $0xc,%esp
f011521b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011521e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115221:	68 38 ab 13 f0       	push   $0xf013ab38
f0115226:	68 29 06 00 00       	push   $0x629
f011522b:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115230:	e8 de b1 fe ff       	call   f0100413 <_warn>
f0115235:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115238:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011523c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115240:	74 04                	je     f0115246 <test_calculate_required_frames+0x5e3>
f0115242:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115246:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011524a:	83 ec 04             	sub    $0x4,%esp
f011524d:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115253:	50                   	push   %eax
f0115254:	68 d0 ab 13 f0       	push   $0xf013abd0
f0115259:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011525f:	50                   	push   %eax
f0115260:	e8 e8 c8 01 00       	call   f0131b4d <strcconcat>
f0115265:	83 c4 10             	add    $0x10,%esp
f0115268:	83 ec 0c             	sub    $0xc,%esp
f011526b:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115271:	50                   	push   %eax
f0115272:	e8 f9 ba fe ff       	call   f0100d70 <execute_command>
f0115277:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011527a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011527d:	89 c2                	mov    %eax,%edx
f011527f:	01 d2                	add    %edx,%edx
f0115281:	01 d0                	add    %edx,%eax
f0115283:	83 ec 04             	sub    $0x4,%esp
f0115286:	50                   	push   %eax
f0115287:	68 00 18 00 00       	push   $0x1800
f011528c:	ff 75 d8             	pushl  -0x28(%ebp)
f011528f:	e8 b3 3d ff ff       	call   f0109047 <calculate_required_frames>
f0115294:	83 c4 10             	add    $0x10,%esp
f0115297:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f011529a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01152a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01152a4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01152a7:	74 24                	je     f01152cd <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01152a9:	83 ec 0c             	sub    $0xc,%esp
f01152ac:	ff 75 c4             	pushl  -0x3c(%ebp)
f01152af:	ff 75 c8             	pushl  -0x38(%ebp)
f01152b2:	68 38 ab 13 f0       	push   $0xf013ab38
f01152b7:	68 38 06 00 00       	push   $0x638
f01152bc:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01152c1:	e8 4d b1 fe ff       	call   f0100413 <_warn>
f01152c6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152cd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152d1:	74 04                	je     f01152d7 <test_calculate_required_frames+0x674>
f01152d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152d7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01152db:	83 ec 04             	sub    $0x4,%esp
f01152de:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01152e4:	50                   	push   %eax
f01152e5:	68 a8 9c 13 f0       	push   $0xf0139ca8
f01152ea:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152f0:	50                   	push   %eax
f01152f1:	e8 57 c8 01 00       	call   f0131b4d <strcconcat>
f01152f6:	83 c4 10             	add    $0x10,%esp
f01152f9:	83 ec 0c             	sub    $0xc,%esp
f01152fc:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115302:	50                   	push   %eax
f0115303:	e8 68 ba fe ff       	call   f0100d70 <execute_command>
f0115308:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011530b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011530e:	89 d0                	mov    %edx,%eax
f0115310:	c1 e0 02             	shl    $0x2,%eax
f0115313:	01 d0                	add    %edx,%eax
f0115315:	01 c0                	add    %eax,%eax
f0115317:	83 ec 04             	sub    $0x4,%esp
f011531a:	50                   	push   %eax
f011531b:	68 00 00 40 00       	push   $0x400000
f0115320:	ff 75 d8             	pushl  -0x28(%ebp)
f0115323:	e8 1f 3d ff ff       	call   f0109047 <calculate_required_frames>
f0115328:	83 c4 10             	add    $0x10,%esp
f011532b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011532e:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115335:	74 26                	je     f011535d <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115337:	83 ec 0c             	sub    $0xc,%esp
f011533a:	68 03 0a 00 00       	push   $0xa03
f011533f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115342:	68 38 ab 13 f0       	push   $0xf013ab38
f0115347:	68 44 06 00 00       	push   $0x644
f011534c:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115351:	e8 bd b0 fe ff       	call   f0100413 <_warn>
f0115356:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115359:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011535d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115361:	74 04                	je     f0115367 <test_calculate_required_frames+0x704>
f0115363:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115367:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011536b:	83 ec 04             	sub    $0x4,%esp
f011536e:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115374:	50                   	push   %eax
f0115375:	68 b2 9c 13 f0       	push   $0xf0139cb2
f011537a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115380:	50                   	push   %eax
f0115381:	e8 c7 c7 01 00       	call   f0131b4d <strcconcat>
f0115386:	83 c4 10             	add    $0x10,%esp
f0115389:	83 ec 0c             	sub    $0xc,%esp
f011538c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115392:	50                   	push   %eax
f0115393:	e8 d8 b9 fe ff       	call   f0100d70 <execute_command>
f0115398:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011539b:	83 ec 04             	sub    $0x4,%esp
f011539e:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01153a4:	50                   	push   %eax
f01153a5:	68 d8 ab 13 f0       	push   $0xf013abd8
f01153aa:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01153b0:	50                   	push   %eax
f01153b1:	e8 97 c7 01 00       	call   f0131b4d <strcconcat>
f01153b6:	83 c4 10             	add    $0x10,%esp
f01153b9:	83 ec 0c             	sub    $0xc,%esp
f01153bc:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01153c2:	50                   	push   %eax
f01153c3:	e8 a8 b9 fe ff       	call   f0100d70 <execute_command>
f01153c8:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01153cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153ce:	01 c0                	add    %eax,%eax
f01153d0:	83 ec 04             	sub    $0x4,%esp
f01153d3:	50                   	push   %eax
f01153d4:	68 00 00 70 00       	push   $0x700000
f01153d9:	ff 75 d8             	pushl  -0x28(%ebp)
f01153dc:	e8 66 3c ff ff       	call   f0109047 <calculate_required_frames>
f01153e1:	83 c4 10             	add    $0x10,%esp
f01153e4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01153e7:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01153ee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01153f1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01153f4:	74 24                	je     f011541a <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01153f6:	83 ec 0c             	sub    $0xc,%esp
f01153f9:	ff 75 c4             	pushl  -0x3c(%ebp)
f01153fc:	ff 75 c8             	pushl  -0x38(%ebp)
f01153ff:	68 38 ab 13 f0       	push   $0xf013ab38
f0115404:	68 54 06 00 00       	push   $0x654
f0115409:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011540e:	e8 00 b0 fe ff       	call   f0100413 <_warn>
f0115413:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115416:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011541a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011541e:	74 04                	je     f0115424 <test_calculate_required_frames+0x7c1>
f0115420:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115424:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115428:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011542b:	83 ec 04             	sub    $0x4,%esp
f011542e:	50                   	push   %eax
f011542f:	68 ff ff 3f 00       	push   $0x3fffff
f0115434:	ff 75 d8             	pushl  -0x28(%ebp)
f0115437:	e8 0b 3c ff ff       	call   f0109047 <calculate_required_frames>
f011543c:	83 c4 10             	add    $0x10,%esp
f011543f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115442:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115449:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011544c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011544f:	74 24                	je     f0115475 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115451:	83 ec 0c             	sub    $0xc,%esp
f0115454:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115457:	ff 75 c8             	pushl  -0x38(%ebp)
f011545a:	68 38 ab 13 f0       	push   $0xf013ab38
f011545f:	68 5f 06 00 00       	push   $0x65f
f0115464:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115469:	e8 a5 af fe ff       	call   f0100413 <_warn>
f011546e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115471:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115475:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115479:	74 04                	je     f011547f <test_calculate_required_frames+0x81c>
f011547b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011547f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115483:	83 ec 0c             	sub    $0xc,%esp
f0115486:	68 63 9c 13 f0       	push   $0xf0139c63
f011548b:	e8 7e b8 fe ff       	call   f0100d0e <cprintf>
f0115490:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0115493:	83 ec 08             	sub    $0x8,%esp
f0115496:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115499:	68 e4 ab 13 f0       	push   $0xf013abe4
f011549e:	e8 6b b8 fe ff       	call   f0100d0e <cprintf>
f01154a3:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01154a6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01154aa:	75 10                	jne    f01154bc <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01154ac:	83 ec 0c             	sub    $0xc,%esp
f01154af:	68 24 ac 13 f0       	push   $0xf013ac24
f01154b4:	e8 55 b8 fe ff       	call   f0100d0e <cprintf>
f01154b9:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01154bc:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f01154c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01154c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01154c7:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01154ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01154cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01154d2:	5b                   	pop    %ebx
f01154d3:	5e                   	pop    %esi
f01154d4:	5f                   	pop    %edi
f01154d5:	5d                   	pop    %ebp
f01154d6:	c3                   	ret    

f01154d7 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01154d7:	55                   	push   %ebp
f01154d8:	89 e5                	mov    %esp,%ebp
f01154da:	57                   	push   %edi
f01154db:	56                   	push   %esi
f01154dc:	53                   	push   %ebx
f01154dd:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01154e3:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01154e6:	bb d8 99 13 f0       	mov    $0xf01399d8,%ebx
f01154eb:	ba 0f 00 00 00       	mov    $0xf,%edx
f01154f0:	89 c7                	mov    %eax,%edi
f01154f2:	89 de                	mov    %ebx,%esi
f01154f4:	89 d1                	mov    %edx,%ecx
f01154f6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01154f8:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01154fb:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115500:	b0 00                	mov    $0x0,%al
f0115502:	89 d7                	mov    %edx,%edi
f0115504:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115506:	6a 00                	push   $0x0
f0115508:	6a 0a                	push   $0xa
f011550a:	6a 14                	push   $0x14
f011550c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011550f:	50                   	push   %eax
f0115510:	e8 55 3c ff ff       	call   f010916a <env_create>
f0115515:	83 c4 10             	add    $0x10,%esp
f0115518:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011551b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011551e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115521:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115524:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115527:	8b 40 60             	mov    0x60(%eax),%eax
f011552a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011552d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115530:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115533:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011553a:	75 70 20 
f011553d:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115544:	00 00 00 
f0115547:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011554a:	b9 03 00 00 00       	mov    $0x3,%ecx
f011554f:	b8 00 00 00 00       	mov    $0x0,%eax
f0115554:	89 d7                	mov    %edx,%edi
f0115556:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115558:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011555b:	8b 40 4c             	mov    0x4c(%eax),%eax
f011555e:	83 ec 08             	sub    $0x8,%esp
f0115561:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115567:	52                   	push   %edx
f0115568:	50                   	push   %eax
f0115569:	e8 e7 c4 01 00       	call   f0131a55 <ltostr>
f011556e:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115571:	83 ec 04             	sub    $0x4,%esp
f0115574:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011557a:	50                   	push   %eax
f011557b:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115581:	50                   	push   %eax
f0115582:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115588:	50                   	push   %eax
f0115589:	e8 bf c5 01 00       	call   f0131b4d <strcconcat>
f011558e:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115591:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115598:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011559f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01155a6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f01155aa:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01155b1:	00 00 00 
	uint32 num_tables = 0;
f01155b4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01155bb:	00 00 00 
	ClearUserSpace(proc_directory);
f01155be:	83 ec 0c             	sub    $0xc,%esp
f01155c1:	ff 75 d8             	pushl  -0x28(%ebp)
f01155c4:	e8 8d 0e 00 00       	call   f0116456 <ClearUserSpace>
f01155c9:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01155cc:	83 ec 0c             	sub    $0xc,%esp
f01155cf:	68 04 ab 13 f0       	push   $0xf013ab04
f01155d4:	e8 35 b7 fe ff       	call   f0100d0e <cprintf>
f01155d9:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01155dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155df:	c1 e0 03             	shl    $0x3,%eax
f01155e2:	89 c2                	mov    %eax,%edx
f01155e4:	83 ec 0c             	sub    $0xc,%esp
f01155e7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01155ed:	50                   	push   %eax
f01155ee:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01155f4:	50                   	push   %eax
f01155f5:	52                   	push   %edx
f01155f6:	6a 00                	push   $0x0
f01155f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01155fb:	e8 52 39 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115600:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115603:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115609:	85 c0                	test   %eax,%eax
f011560b:	74 27                	je     f0115634 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011560d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115613:	83 ec 0c             	sub    $0xc,%esp
f0115616:	6a 00                	push   $0x0
f0115618:	50                   	push   %eax
f0115619:	68 70 ac 13 f0       	push   $0xf013ac70
f011561e:	68 94 06 00 00       	push   $0x694
f0115623:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115628:	e8 e6 ad fe ff       	call   f0100413 <_warn>
f011562d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115630:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115634:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011563a:	85 c0                	test   %eax,%eax
f011563c:	74 27                	je     f0115665 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011563e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115644:	83 ec 0c             	sub    $0xc,%esp
f0115647:	6a 00                	push   $0x0
f0115649:	50                   	push   %eax
f011564a:	68 d0 ac 13 f0       	push   $0xf013acd0
f011564f:	68 99 06 00 00       	push   $0x699
f0115654:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115659:	e8 b5 ad fe ff       	call   f0100413 <_warn>
f011565e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115661:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115665:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115669:	74 04                	je     f011566f <test_calculate_allocated_space+0x198>
f011566b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011566f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115673:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011567a:	00 00 00 
		num_pages = 0;
f011567d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115684:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115687:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011568a:	c1 e0 02             	shl    $0x2,%eax
f011568d:	89 c2                	mov    %eax,%edx
f011568f:	83 ec 0c             	sub    $0xc,%esp
f0115692:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115698:	50                   	push   %eax
f0115699:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011569f:	50                   	push   %eax
f01156a0:	52                   	push   %edx
f01156a1:	6a 00                	push   $0x0
f01156a3:	ff 75 d8             	pushl  -0x28(%ebp)
f01156a6:	e8 a7 38 ff ff       	call   f0108f52 <calculate_allocated_space>
f01156ab:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01156ae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156b4:	85 c0                	test   %eax,%eax
f01156b6:	74 27                	je     f01156df <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01156b8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156be:	83 ec 0c             	sub    $0xc,%esp
f01156c1:	6a 00                	push   $0x0
f01156c3:	50                   	push   %eax
f01156c4:	68 70 ac 13 f0       	push   $0xf013ac70
f01156c9:	68 a5 06 00 00       	push   $0x6a5
f01156ce:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01156d3:	e8 3b ad fe ff       	call   f0100413 <_warn>
f01156d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01156df:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156e5:	85 c0                	test   %eax,%eax
f01156e7:	74 27                	je     f0115710 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01156e9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156ef:	83 ec 0c             	sub    $0xc,%esp
f01156f2:	6a 00                	push   $0x0
f01156f4:	50                   	push   %eax
f01156f5:	68 d0 ac 13 f0       	push   $0xf013acd0
f01156fa:	68 aa 06 00 00       	push   $0x6aa
f01156ff:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115704:	e8 0a ad fe ff       	call   f0100413 <_warn>
f0115709:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011570c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115710:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115714:	74 04                	je     f011571a <test_calculate_allocated_space+0x243>
f0115716:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011571a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011571e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115725:	00 00 00 
		num_pages = 0;
f0115728:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011572f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115732:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115735:	c1 e0 0a             	shl    $0xa,%eax
f0115738:	89 c2                	mov    %eax,%edx
f011573a:	83 ec 0c             	sub    $0xc,%esp
f011573d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115743:	50                   	push   %eax
f0115744:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011574a:	50                   	push   %eax
f011574b:	52                   	push   %edx
f011574c:	6a 00                	push   $0x0
f011574e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115751:	e8 fc 37 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115756:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115759:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011575f:	85 c0                	test   %eax,%eax
f0115761:	74 27                	je     f011578a <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115763:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115769:	83 ec 0c             	sub    $0xc,%esp
f011576c:	6a 00                	push   $0x0
f011576e:	50                   	push   %eax
f011576f:	68 70 ac 13 f0       	push   $0xf013ac70
f0115774:	68 b6 06 00 00       	push   $0x6b6
f0115779:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011577e:	e8 90 ac fe ff       	call   f0100413 <_warn>
f0115783:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115786:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011578a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115790:	85 c0                	test   %eax,%eax
f0115792:	74 27                	je     f01157bb <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115794:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011579a:	83 ec 0c             	sub    $0xc,%esp
f011579d:	6a 00                	push   $0x0
f011579f:	50                   	push   %eax
f01157a0:	68 d0 ac 13 f0       	push   $0xf013acd0
f01157a5:	68 bb 06 00 00       	push   $0x6bb
f01157aa:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01157af:	e8 5f ac fe ff       	call   f0100413 <_warn>
f01157b4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157b7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01157bb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157bf:	74 04                	je     f01157c5 <test_calculate_allocated_space+0x2ee>
f01157c1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157c5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01157c9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01157d0:	00 00 00 
		num_pages = 0;
f01157d3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01157da:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01157dd:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01157e0:	89 d0                	mov    %edx,%eax
f01157e2:	01 c0                	add    %eax,%eax
f01157e4:	01 d0                	add    %edx,%eax
f01157e6:	01 c0                	add    %eax,%eax
f01157e8:	05 00 10 00 00       	add    $0x1000,%eax
f01157ed:	89 c2                	mov    %eax,%edx
f01157ef:	83 ec 0c             	sub    $0xc,%esp
f01157f2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01157f8:	50                   	push   %eax
f01157f9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01157ff:	50                   	push   %eax
f0115800:	52                   	push   %edx
f0115801:	68 00 10 00 00       	push   $0x1000
f0115806:	ff 75 d8             	pushl  -0x28(%ebp)
f0115809:	e8 44 37 ff ff       	call   f0108f52 <calculate_allocated_space>
f011580e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115811:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115817:	85 c0                	test   %eax,%eax
f0115819:	74 27                	je     f0115842 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011581b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115821:	83 ec 0c             	sub    $0xc,%esp
f0115824:	6a 00                	push   $0x0
f0115826:	50                   	push   %eax
f0115827:	68 70 ac 13 f0       	push   $0xf013ac70
f011582c:	68 c8 06 00 00       	push   $0x6c8
f0115831:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115836:	e8 d8 ab fe ff       	call   f0100413 <_warn>
f011583b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011583e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115842:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115848:	85 c0                	test   %eax,%eax
f011584a:	74 27                	je     f0115873 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011584c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115852:	83 ec 0c             	sub    $0xc,%esp
f0115855:	6a 00                	push   $0x0
f0115857:	50                   	push   %eax
f0115858:	68 d0 ac 13 f0       	push   $0xf013acd0
f011585d:	68 cd 06 00 00       	push   $0x6cd
f0115862:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115867:	e8 a7 ab fe ff       	call   f0100413 <_warn>
f011586c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011586f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115873:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115877:	74 04                	je     f011587d <test_calculate_allocated_space+0x3a6>
f0115879:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011587d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115881:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115888:	00 00 00 
		num_pages = 0;
f011588b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115892:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115895:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115898:	89 c2                	mov    %eax,%edx
f011589a:	01 d2                	add    %edx,%edx
f011589c:	01 d0                	add    %edx,%eax
f011589e:	05 00 18 00 00       	add    $0x1800,%eax
f01158a3:	89 c2                	mov    %eax,%edx
f01158a5:	83 ec 0c             	sub    $0xc,%esp
f01158a8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01158ae:	50                   	push   %eax
f01158af:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01158b5:	50                   	push   %eax
f01158b6:	52                   	push   %edx
f01158b7:	68 00 18 00 00       	push   $0x1800
f01158bc:	ff 75 d8             	pushl  -0x28(%ebp)
f01158bf:	e8 8e 36 ff ff       	call   f0108f52 <calculate_allocated_space>
f01158c4:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01158c7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158cd:	85 c0                	test   %eax,%eax
f01158cf:	74 27                	je     f01158f8 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01158d1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158d7:	83 ec 0c             	sub    $0xc,%esp
f01158da:	6a 00                	push   $0x0
f01158dc:	50                   	push   %eax
f01158dd:	68 70 ac 13 f0       	push   $0xf013ac70
f01158e2:	68 d9 06 00 00       	push   $0x6d9
f01158e7:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01158ec:	e8 22 ab fe ff       	call   f0100413 <_warn>
f01158f1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158f4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01158f8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158fe:	85 c0                	test   %eax,%eax
f0115900:	74 27                	je     f0115929 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115902:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115908:	83 ec 0c             	sub    $0xc,%esp
f011590b:	6a 00                	push   $0x0
f011590d:	50                   	push   %eax
f011590e:	68 d0 ac 13 f0       	push   $0xf013acd0
f0115913:	68 de 06 00 00       	push   $0x6de
f0115918:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011591d:	e8 f1 aa fe ff       	call   f0100413 <_warn>
f0115922:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115925:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115929:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011592d:	74 04                	je     f0115933 <test_calculate_allocated_space+0x45c>
f011592f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115933:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115937:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011593e:	00 00 00 
		num_pages = 0;
f0115941:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115948:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f011594b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011594e:	89 d0                	mov    %edx,%eax
f0115950:	c1 e0 02             	shl    $0x2,%eax
f0115953:	01 d0                	add    %edx,%eax
f0115955:	01 c0                	add    %eax,%eax
f0115957:	05 00 00 40 00       	add    $0x400000,%eax
f011595c:	89 c2                	mov    %eax,%edx
f011595e:	83 ec 0c             	sub    $0xc,%esp
f0115961:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115967:	50                   	push   %eax
f0115968:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011596e:	50                   	push   %eax
f011596f:	52                   	push   %edx
f0115970:	68 00 00 40 00       	push   $0x400000
f0115975:	ff 75 d8             	pushl  -0x28(%ebp)
f0115978:	e8 d5 35 ff ff       	call   f0108f52 <calculate_allocated_space>
f011597d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115980:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115986:	85 c0                	test   %eax,%eax
f0115988:	74 27                	je     f01159b1 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011598a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115990:	83 ec 0c             	sub    $0xc,%esp
f0115993:	6a 00                	push   $0x0
f0115995:	50                   	push   %eax
f0115996:	68 70 ac 13 f0       	push   $0xf013ac70
f011599b:	68 ea 06 00 00       	push   $0x6ea
f01159a0:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01159a5:	e8 69 aa fe ff       	call   f0100413 <_warn>
f01159aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01159b1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159b7:	85 c0                	test   %eax,%eax
f01159b9:	74 27                	je     f01159e2 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01159bb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159c1:	83 ec 0c             	sub    $0xc,%esp
f01159c4:	6a 00                	push   $0x0
f01159c6:	50                   	push   %eax
f01159c7:	68 d0 ac 13 f0       	push   $0xf013acd0
f01159cc:	68 ef 06 00 00       	push   $0x6ef
f01159d1:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01159d6:	e8 38 aa fe ff       	call   f0100413 <_warn>
f01159db:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159de:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01159e2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159e6:	74 04                	je     f01159ec <test_calculate_allocated_space+0x515>
f01159e8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01159ec:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f01159f0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159f7:	00 00 00 
		num_pages = 0;
f01159fa:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a01:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115a04:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115a07:	05 00 00 38 00       	add    $0x380000,%eax
f0115a0c:	01 c0                	add    %eax,%eax
f0115a0e:	89 c2                	mov    %eax,%edx
f0115a10:	83 ec 0c             	sub    $0xc,%esp
f0115a13:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a19:	50                   	push   %eax
f0115a1a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a20:	50                   	push   %eax
f0115a21:	52                   	push   %edx
f0115a22:	68 00 00 70 00       	push   $0x700000
f0115a27:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a2a:	e8 23 35 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115a2f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a32:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a38:	85 c0                	test   %eax,%eax
f0115a3a:	74 27                	je     f0115a63 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a3c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a42:	83 ec 0c             	sub    $0xc,%esp
f0115a45:	6a 00                	push   $0x0
f0115a47:	50                   	push   %eax
f0115a48:	68 70 ac 13 f0       	push   $0xf013ac70
f0115a4d:	68 fc 06 00 00       	push   $0x6fc
f0115a52:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115a57:	e8 b7 a9 fe ff       	call   f0100413 <_warn>
f0115a5c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a5f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a63:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a69:	85 c0                	test   %eax,%eax
f0115a6b:	74 27                	je     f0115a94 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a6d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a73:	83 ec 0c             	sub    $0xc,%esp
f0115a76:	6a 00                	push   $0x0
f0115a78:	50                   	push   %eax
f0115a79:	68 d0 ac 13 f0       	push   $0xf013acd0
f0115a7e:	68 01 07 00 00       	push   $0x701
f0115a83:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115a88:	e8 86 a9 fe ff       	call   f0100413 <_warn>
f0115a8d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a90:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115a94:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a98:	74 04                	je     f0115a9e <test_calculate_allocated_space+0x5c7>
f0115a9a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115a9e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115aa2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115aa9:	00 00 00 
		num_pages = 0;
f0115aac:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ab3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115ab6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ab9:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115abe:	89 c2                	mov    %eax,%edx
f0115ac0:	83 ec 0c             	sub    $0xc,%esp
f0115ac3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ac9:	50                   	push   %eax
f0115aca:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ad0:	50                   	push   %eax
f0115ad1:	52                   	push   %edx
f0115ad2:	68 ff ff 3f 00       	push   $0x3fffff
f0115ad7:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ada:	e8 73 34 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115adf:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ae2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ae8:	85 c0                	test   %eax,%eax
f0115aea:	74 27                	je     f0115b13 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115aec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115af2:	83 ec 0c             	sub    $0xc,%esp
f0115af5:	6a 00                	push   $0x0
f0115af7:	50                   	push   %eax
f0115af8:	68 70 ac 13 f0       	push   $0xf013ac70
f0115afd:	68 0d 07 00 00       	push   $0x70d
f0115b02:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115b07:	e8 07 a9 fe ff       	call   f0100413 <_warn>
f0115b0c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b0f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b13:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b19:	85 c0                	test   %eax,%eax
f0115b1b:	74 27                	je     f0115b44 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b1d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b23:	83 ec 0c             	sub    $0xc,%esp
f0115b26:	6a 00                	push   $0x0
f0115b28:	50                   	push   %eax
f0115b29:	68 d0 ac 13 f0       	push   $0xf013acd0
f0115b2e:	68 12 07 00 00       	push   $0x712
f0115b33:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115b38:	e8 d6 a8 fe ff       	call   f0100413 <_warn>
f0115b3d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b40:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115b44:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b48:	74 04                	je     f0115b4e <test_calculate_allocated_space+0x677>
f0115b4a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115b4e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115b52:	83 ec 0c             	sub    $0xc,%esp
f0115b55:	68 89 a6 13 f0       	push   $0xf013a689
f0115b5a:	e8 af b1 fe ff       	call   f0100d0e <cprintf>
f0115b5f:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115b62:	83 ec 0c             	sub    $0xc,%esp
f0115b65:	68 90 ab 13 f0       	push   $0xf013ab90
f0115b6a:	e8 9f b1 fe ff       	call   f0100d0e <cprintf>
f0115b6f:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115b72:	83 ec 04             	sub    $0x4,%esp
f0115b75:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115b7b:	50                   	push   %eax
f0115b7c:	68 42 9a 13 f0       	push   $0xf0139a42
f0115b81:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b87:	50                   	push   %eax
f0115b88:	e8 c0 bf 01 00       	call   f0131b4d <strcconcat>
f0115b8d:	83 c4 10             	add    $0x10,%esp
f0115b90:	83 ec 0c             	sub    $0xc,%esp
f0115b93:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115b99:	50                   	push   %eax
f0115b9a:	e8 d1 b1 fe ff       	call   f0100d70 <execute_command>
f0115b9f:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115ba2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ba9:	00 00 00 
		num_pages = 0;
f0115bac:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115bb3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115bb6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115bb9:	c1 e0 03             	shl    $0x3,%eax
f0115bbc:	89 c2                	mov    %eax,%edx
f0115bbe:	83 ec 0c             	sub    $0xc,%esp
f0115bc1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115bc7:	50                   	push   %eax
f0115bc8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115bce:	50                   	push   %eax
f0115bcf:	52                   	push   %edx
f0115bd0:	6a 00                	push   $0x0
f0115bd2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bd5:	e8 78 33 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115bda:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115bdd:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115be4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115beb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bf1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115bf4:	74 28                	je     f0115c1e <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115bf6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bfc:	83 ec 0c             	sub    $0xc,%esp
f0115bff:	ff 75 c8             	pushl  -0x38(%ebp)
f0115c02:	50                   	push   %eax
f0115c03:	68 70 ac 13 f0       	push   $0xf013ac70
f0115c08:	68 29 07 00 00       	push   $0x729
f0115c0d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115c12:	e8 fc a7 fe ff       	call   f0100413 <_warn>
f0115c17:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c1a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115c1e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c24:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115c27:	74 28                	je     f0115c51 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115c29:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c2f:	83 ec 0c             	sub    $0xc,%esp
f0115c32:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115c35:	50                   	push   %eax
f0115c36:	68 d0 ac 13 f0       	push   $0xf013acd0
f0115c3b:	68 2e 07 00 00       	push   $0x72e
f0115c40:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115c45:	e8 c9 a7 fe ff       	call   f0100413 <_warn>
f0115c4a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c4d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c51:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c55:	74 04                	je     f0115c5b <test_calculate_allocated_space+0x784>
f0115c57:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c5b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115c5f:	83 ec 04             	sub    $0x4,%esp
f0115c62:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115c68:	50                   	push   %eax
f0115c69:	68 4f 9a 13 f0       	push   $0xf0139a4f
f0115c6e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115c74:	50                   	push   %eax
f0115c75:	e8 d3 be 01 00       	call   f0131b4d <strcconcat>
f0115c7a:	83 c4 10             	add    $0x10,%esp
f0115c7d:	83 ec 0c             	sub    $0xc,%esp
f0115c80:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115c86:	50                   	push   %eax
f0115c87:	e8 e4 b0 fe ff       	call   f0100d70 <execute_command>
f0115c8c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115c8f:	83 ec 04             	sub    $0x4,%esp
f0115c92:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115c98:	50                   	push   %eax
f0115c99:	68 c4 ab 13 f0       	push   $0xf013abc4
f0115c9e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ca4:	50                   	push   %eax
f0115ca5:	e8 a3 be 01 00       	call   f0131b4d <strcconcat>
f0115caa:	83 c4 10             	add    $0x10,%esp
f0115cad:	83 ec 0c             	sub    $0xc,%esp
f0115cb0:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115cb6:	50                   	push   %eax
f0115cb7:	e8 b4 b0 fe ff       	call   f0100d70 <execute_command>
f0115cbc:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115cbf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cc6:	00 00 00 
		num_pages = 0;
f0115cc9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115cd0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115cd3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115cd6:	c1 e0 03             	shl    $0x3,%eax
f0115cd9:	89 c2                	mov    %eax,%edx
f0115cdb:	83 ec 0c             	sub    $0xc,%esp
f0115cde:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ce4:	50                   	push   %eax
f0115ce5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ceb:	50                   	push   %eax
f0115cec:	52                   	push   %edx
f0115ced:	6a 00                	push   $0x0
f0115cef:	ff 75 d8             	pushl  -0x28(%ebp)
f0115cf2:	e8 5b 32 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115cf7:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115cfa:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115d01:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115d08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d0e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115d11:	74 28                	je     f0115d3b <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115d13:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d19:	83 ec 0c             	sub    $0xc,%esp
f0115d1c:	ff 75 c8             	pushl  -0x38(%ebp)
f0115d1f:	50                   	push   %eax
f0115d20:	68 70 ac 13 f0       	push   $0xf013ac70
f0115d25:	68 3f 07 00 00       	push   $0x73f
f0115d2a:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115d2f:	e8 df a6 fe ff       	call   f0100413 <_warn>
f0115d34:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d37:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115d3b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d41:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115d44:	74 28                	je     f0115d6e <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115d46:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d4c:	83 ec 0c             	sub    $0xc,%esp
f0115d4f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115d52:	50                   	push   %eax
f0115d53:	68 d0 ac 13 f0       	push   $0xf013acd0
f0115d58:	68 44 07 00 00       	push   $0x744
f0115d5d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115d62:	e8 ac a6 fe ff       	call   f0100413 <_warn>
f0115d67:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d6a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d6e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d72:	74 04                	je     f0115d78 <test_calculate_allocated_space+0x8a1>
f0115d74:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d78:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115d7c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d83:	00 00 00 
		num_pages = 0;
f0115d86:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d8d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115d90:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115d93:	c1 e0 0a             	shl    $0xa,%eax
f0115d96:	89 c2                	mov    %eax,%edx
f0115d98:	83 ec 0c             	sub    $0xc,%esp
f0115d9b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115da1:	50                   	push   %eax
f0115da2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115da8:	50                   	push   %eax
f0115da9:	52                   	push   %edx
f0115daa:	6a 00                	push   $0x0
f0115dac:	ff 75 d8             	pushl  -0x28(%ebp)
f0115daf:	e8 9e 31 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115db4:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115db7:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115dbe:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115dc5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dcb:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115dce:	74 28                	je     f0115df8 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115dd0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dd6:	83 ec 0c             	sub    $0xc,%esp
f0115dd9:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ddc:	50                   	push   %eax
f0115ddd:	68 70 ac 13 f0       	push   $0xf013ac70
f0115de2:	68 52 07 00 00       	push   $0x752
f0115de7:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115dec:	e8 22 a6 fe ff       	call   f0100413 <_warn>
f0115df1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115df4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115df8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dfe:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115e01:	74 28                	je     f0115e2b <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115e03:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e09:	83 ec 0c             	sub    $0xc,%esp
f0115e0c:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115e0f:	50                   	push   %eax
f0115e10:	68 d0 ac 13 f0       	push   $0xf013acd0
f0115e15:	68 57 07 00 00       	push   $0x757
f0115e1a:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115e1f:	e8 ef a5 fe ff       	call   f0100413 <_warn>
f0115e24:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e27:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115e2b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e2f:	74 04                	je     f0115e35 <test_calculate_allocated_space+0x95e>
f0115e31:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115e35:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115e39:	83 ec 04             	sub    $0x4,%esp
f0115e3c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e42:	50                   	push   %eax
f0115e43:	68 d0 ab 13 f0       	push   $0xf013abd0
f0115e48:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115e4e:	50                   	push   %eax
f0115e4f:	e8 f9 bc 01 00       	call   f0131b4d <strcconcat>
f0115e54:	83 c4 10             	add    $0x10,%esp
f0115e57:	83 ec 0c             	sub    $0xc,%esp
f0115e5a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e60:	50                   	push   %eax
f0115e61:	e8 0a af fe ff       	call   f0100d70 <execute_command>
f0115e66:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115e69:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e70:	00 00 00 
		num_pages = 0;
f0115e73:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e7a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115e7d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115e80:	89 c2                	mov    %eax,%edx
f0115e82:	01 d2                	add    %edx,%edx
f0115e84:	01 d0                	add    %edx,%eax
f0115e86:	05 00 18 00 00       	add    $0x1800,%eax
f0115e8b:	89 c2                	mov    %eax,%edx
f0115e8d:	83 ec 0c             	sub    $0xc,%esp
f0115e90:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e96:	50                   	push   %eax
f0115e97:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e9d:	50                   	push   %eax
f0115e9e:	52                   	push   %edx
f0115e9f:	68 00 18 00 00       	push   $0x1800
f0115ea4:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ea7:	e8 a6 30 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115eac:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115eaf:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115eb6:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ebd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ec3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115ec6:	74 28                	je     f0115ef0 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115ec8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ece:	83 ec 0c             	sub    $0xc,%esp
f0115ed1:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ed4:	50                   	push   %eax
f0115ed5:	68 70 ac 13 f0       	push   $0xf013ac70
f0115eda:	68 68 07 00 00       	push   $0x768
f0115edf:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115ee4:	e8 2a a5 fe ff       	call   f0100413 <_warn>
f0115ee9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115eec:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115ef0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ef6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ef9:	74 28                	je     f0115f23 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115efb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f01:	83 ec 0c             	sub    $0xc,%esp
f0115f04:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115f07:	50                   	push   %eax
f0115f08:	68 d0 ac 13 f0       	push   $0xf013acd0
f0115f0d:	68 6d 07 00 00       	push   $0x76d
f0115f12:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115f17:	e8 f7 a4 fe ff       	call   f0100413 <_warn>
f0115f1c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f1f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f23:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f27:	74 04                	je     f0115f2d <test_calculate_allocated_space+0xa56>
f0115f29:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f2d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115f31:	83 ec 04             	sub    $0x4,%esp
f0115f34:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115f3a:	50                   	push   %eax
f0115f3b:	68 a8 9c 13 f0       	push   $0xf0139ca8
f0115f40:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115f46:	50                   	push   %eax
f0115f47:	e8 01 bc 01 00       	call   f0131b4d <strcconcat>
f0115f4c:	83 c4 10             	add    $0x10,%esp
f0115f4f:	83 ec 0c             	sub    $0xc,%esp
f0115f52:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115f58:	50                   	push   %eax
f0115f59:	e8 12 ae fe ff       	call   f0100d70 <execute_command>
f0115f5e:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0115f61:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f68:	00 00 00 
		num_pages = 0;
f0115f6b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f72:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115f75:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115f78:	89 d0                	mov    %edx,%eax
f0115f7a:	c1 e0 02             	shl    $0x2,%eax
f0115f7d:	01 d0                	add    %edx,%eax
f0115f7f:	01 c0                	add    %eax,%eax
f0115f81:	05 00 00 40 00       	add    $0x400000,%eax
f0115f86:	89 c2                	mov    %eax,%edx
f0115f88:	83 ec 0c             	sub    $0xc,%esp
f0115f8b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f91:	50                   	push   %eax
f0115f92:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f98:	50                   	push   %eax
f0115f99:	52                   	push   %edx
f0115f9a:	68 00 00 40 00       	push   $0x400000
f0115f9f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115fa2:	e8 ab 2f ff ff       	call   f0108f52 <calculate_allocated_space>
f0115fa7:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115faa:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115fb1:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115fb8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fbe:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115fc1:	74 28                	je     f0115feb <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115fc3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fc9:	83 ec 0c             	sub    $0xc,%esp
f0115fcc:	ff 75 c8             	pushl  -0x38(%ebp)
f0115fcf:	50                   	push   %eax
f0115fd0:	68 70 ac 13 f0       	push   $0xf013ac70
f0115fd5:	68 7d 07 00 00       	push   $0x77d
f0115fda:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0115fdf:	e8 2f a4 fe ff       	call   f0100413 <_warn>
f0115fe4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fe7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115feb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ff1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ff4:	74 28                	je     f011601e <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ff6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ffc:	83 ec 0c             	sub    $0xc,%esp
f0115fff:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116002:	50                   	push   %eax
f0116003:	68 d0 ac 13 f0       	push   $0xf013acd0
f0116008:	68 82 07 00 00       	push   $0x782
f011600d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116012:	e8 fc a3 fe ff       	call   f0100413 <_warn>
f0116017:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011601a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011601e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116022:	74 04                	je     f0116028 <test_calculate_allocated_space+0xb51>
f0116024:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116028:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011602c:	83 ec 04             	sub    $0x4,%esp
f011602f:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116035:	50                   	push   %eax
f0116036:	68 b2 9c 13 f0       	push   $0xf0139cb2
f011603b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116041:	50                   	push   %eax
f0116042:	e8 06 bb 01 00       	call   f0131b4d <strcconcat>
f0116047:	83 c4 10             	add    $0x10,%esp
f011604a:	83 ec 0c             	sub    $0xc,%esp
f011604d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116053:	50                   	push   %eax
f0116054:	e8 17 ad fe ff       	call   f0100d70 <execute_command>
f0116059:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011605c:	83 ec 04             	sub    $0x4,%esp
f011605f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116065:	50                   	push   %eax
f0116066:	68 d8 ab 13 f0       	push   $0xf013abd8
f011606b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116071:	50                   	push   %eax
f0116072:	e8 d6 ba 01 00       	call   f0131b4d <strcconcat>
f0116077:	83 c4 10             	add    $0x10,%esp
f011607a:	83 ec 0c             	sub    $0xc,%esp
f011607d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116083:	50                   	push   %eax
f0116084:	e8 e7 ac fe ff       	call   f0100d70 <execute_command>
f0116089:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f011608c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116093:	00 00 00 
		num_pages = 0;
f0116096:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011609d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01160a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01160a3:	05 00 00 38 00       	add    $0x380000,%eax
f01160a8:	01 c0                	add    %eax,%eax
f01160aa:	89 c2                	mov    %eax,%edx
f01160ac:	83 ec 0c             	sub    $0xc,%esp
f01160af:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01160b5:	50                   	push   %eax
f01160b6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01160bc:	50                   	push   %eax
f01160bd:	52                   	push   %edx
f01160be:	68 00 00 70 00       	push   $0x700000
f01160c3:	ff 75 d8             	pushl  -0x28(%ebp)
f01160c6:	e8 87 2e ff ff       	call   f0108f52 <calculate_allocated_space>
f01160cb:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01160ce:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01160d5:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01160dc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160e2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01160e5:	74 28                	je     f011610f <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01160e7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160ed:	83 ec 0c             	sub    $0xc,%esp
f01160f0:	ff 75 c8             	pushl  -0x38(%ebp)
f01160f3:	50                   	push   %eax
f01160f4:	68 70 ac 13 f0       	push   $0xf013ac70
f01160f9:	68 94 07 00 00       	push   $0x794
f01160fe:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116103:	e8 0b a3 fe ff       	call   f0100413 <_warn>
f0116108:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011610b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011610f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116115:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116118:	74 28                	je     f0116142 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011611a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116120:	83 ec 0c             	sub    $0xc,%esp
f0116123:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116126:	50                   	push   %eax
f0116127:	68 d0 ac 13 f0       	push   $0xf013acd0
f011612c:	68 99 07 00 00       	push   $0x799
f0116131:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116136:	e8 d8 a2 fe ff       	call   f0100413 <_warn>
f011613b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011613e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116142:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116146:	74 04                	je     f011614c <test_calculate_allocated_space+0xc75>
f0116148:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011614c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0116150:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116157:	00 00 00 
		num_pages = 0;
f011615a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116161:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116164:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116167:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011616c:	89 c2                	mov    %eax,%edx
f011616e:	83 ec 0c             	sub    $0xc,%esp
f0116171:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116177:	50                   	push   %eax
f0116178:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011617e:	50                   	push   %eax
f011617f:	52                   	push   %edx
f0116180:	68 ff ff 3f 00       	push   $0x3fffff
f0116185:	ff 75 d8             	pushl  -0x28(%ebp)
f0116188:	e8 c5 2d ff ff       	call   f0108f52 <calculate_allocated_space>
f011618d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116190:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116197:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011619e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161a4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01161a7:	74 28                	je     f01161d1 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01161a9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161af:	83 ec 0c             	sub    $0xc,%esp
f01161b2:	ff 75 c8             	pushl  -0x38(%ebp)
f01161b5:	50                   	push   %eax
f01161b6:	68 70 ac 13 f0       	push   $0xf013ac70
f01161bb:	68 a7 07 00 00       	push   $0x7a7
f01161c0:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01161c5:	e8 49 a2 fe ff       	call   f0100413 <_warn>
f01161ca:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161cd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01161d1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161d7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01161da:	74 28                	je     f0116204 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01161dc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161e2:	83 ec 0c             	sub    $0xc,%esp
f01161e5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01161e8:	50                   	push   %eax
f01161e9:	68 d0 ac 13 f0       	push   $0xf013acd0
f01161ee:	68 ac 07 00 00       	push   $0x7ac
f01161f3:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01161f8:	e8 16 a2 fe ff       	call   f0100413 <_warn>
f01161fd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116200:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116204:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116208:	74 04                	je     f011620e <test_calculate_allocated_space+0xd37>
f011620a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011620e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116212:	83 ec 0c             	sub    $0xc,%esp
f0116215:	68 63 9c 13 f0       	push   $0xf0139c63
f011621a:	e8 ef aa fe ff       	call   f0100d0e <cprintf>
f011621f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116222:	83 ec 08             	sub    $0x8,%esp
f0116225:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116228:	68 2c ad 13 f0       	push   $0xf013ad2c
f011622d:	e8 dc aa fe ff       	call   f0100d0e <cprintf>
f0116232:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116235:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116239:	75 10                	jne    f011624b <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011623b:	83 ec 0c             	sub    $0xc,%esp
f011623e:	68 6c ad 13 f0       	push   $0xf013ad6c
f0116243:	e8 c6 aa fe ff       	call   f0100d0e <cprintf>
f0116248:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011624b:	a1 ac ed 88 f0       	mov    0xf088edac,%eax
f0116250:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116253:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116256:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116259:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011625e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116261:	5b                   	pop    %ebx
f0116262:	5e                   	pop    %esi
f0116263:	5f                   	pop    %edi
f0116264:	5d                   	pop    %ebp
f0116265:	c3                   	ret    

f0116266 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116266:	55                   	push   %ebp
f0116267:	89 e5                	mov    %esp,%ebp
f0116269:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011626c:	8b 45 10             	mov    0x10(%ebp),%eax
f011626f:	ba 01 00 00 00       	mov    $0x1,%edx
f0116274:	88 c1                	mov    %al,%cl
f0116276:	d3 e2                	shl    %cl,%edx
f0116278:	89 d0                	mov    %edx,%eax
f011627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011627d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116280:	c1 e8 16             	shr    $0x16,%eax
f0116283:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011628a:	8b 45 08             	mov    0x8(%ebp),%eax
f011628d:	01 d0                	add    %edx,%eax
f011628f:	8b 00                	mov    (%eax),%eax
f0116291:	83 e0 01             	and    $0x1,%eax
f0116294:	85 c0                	test   %eax,%eax
f0116296:	75 07                	jne    f011629f <CB+0x39>
f0116298:	b8 00 00 00 00       	mov    $0x0,%eax
f011629d:	eb 76                	jmp    f0116315 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011629f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01162a2:	c1 e8 16             	shr    $0x16,%eax
f01162a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01162ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01162af:	01 d0                	add    %edx,%eax
f01162b1:	8b 00                	mov    (%eax),%eax
f01162b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01162b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01162bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01162be:	c1 e8 0c             	shr    $0xc,%eax
f01162c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01162c4:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01162c9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01162cc:	72 17                	jb     f01162e5 <CB+0x7f>
f01162ce:	ff 75 f0             	pushl  -0x10(%ebp)
f01162d1:	68 b8 ad 13 f0       	push   $0xf013adb8
f01162d6:	68 c7 07 00 00       	push   $0x7c7
f01162db:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01162e0:	e8 20 9f fe ff       	call   f0100205 <_panic>
f01162e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01162e8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01162ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01162f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01162f3:	c1 e8 0c             	shr    $0xc,%eax
f01162f6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01162fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116302:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116305:	01 d0                	add    %edx,%eax
f0116307:	8b 00                	mov    (%eax),%eax
f0116309:	23 45 f4             	and    -0xc(%ebp),%eax
f011630c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011630f:	0f 94 c0             	sete   %al
f0116312:	0f b6 c0             	movzbl %al,%eax
}
f0116315:	c9                   	leave  
f0116316:	c3                   	ret    

f0116317 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116317:	55                   	push   %ebp
f0116318:	89 e5                	mov    %esp,%ebp
f011631a:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011631d:	68 e7 ad 13 f0       	push   $0xf013ade7
f0116322:	68 f6 ad 13 f0       	push   $0xf013adf6
f0116327:	68 cc 07 00 00       	push   $0x7cc
f011632c:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116331:	e8 cf 9e fe ff       	call   f0100205 <_panic>

f0116336 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116336:	55                   	push   %ebp
f0116337:	89 e5                	mov    %esp,%ebp
f0116339:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011633c:	68 e7 ad 13 f0       	push   $0xf013ade7
f0116341:	68 f6 ad 13 f0       	push   $0xf013adf6
f0116346:	68 d6 07 00 00       	push   $0x7d6
f011634b:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116350:	e8 b0 9e fe ff       	call   f0100205 <_panic>

f0116355 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0116355:	55                   	push   %ebp
f0116356:	89 e5                	mov    %esp,%ebp
f0116358:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011635b:	68 e7 ad 13 f0       	push   $0xf013ade7
f0116360:	68 f6 ad 13 f0       	push   $0xf013adf6
f0116365:	68 e5 07 00 00       	push   $0x7e5
f011636a:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011636f:	e8 91 9e fe ff       	call   f0100205 <_panic>

f0116374 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0116374:	55                   	push   %ebp
f0116375:	89 e5                	mov    %esp,%ebp
f0116377:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011637a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011637d:	c1 e8 16             	shr    $0x16,%eax
f0116380:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116387:	8b 45 08             	mov    0x8(%ebp),%eax
f011638a:	01 d0                	add    %edx,%eax
f011638c:	8b 00                	mov    (%eax),%eax
f011638e:	83 e0 01             	and    $0x1,%eax
f0116391:	85 c0                	test   %eax,%eax
f0116393:	75 07                	jne    f011639c <CE+0x28>
f0116395:	b8 00 00 00 00       	mov    $0x0,%eax
f011639a:	eb 7a                	jmp    f0116416 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011639c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011639f:	c1 e8 16             	shr    $0x16,%eax
f01163a2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01163a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01163ac:	01 d0                	add    %edx,%eax
f01163ae:	8b 00                	mov    (%eax),%eax
f01163b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01163b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01163b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01163bb:	c1 e8 0c             	shr    $0xc,%eax
f01163be:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01163c1:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f01163c6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01163c9:	72 17                	jb     f01163e2 <CE+0x6e>
f01163cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01163ce:	68 b8 ad 13 f0       	push   $0xf013adb8
f01163d3:	68 ee 07 00 00       	push   $0x7ee
f01163d8:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01163dd:	e8 23 9e fe ff       	call   f0100205 <_panic>
f01163e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01163e5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01163ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01163ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01163f0:	c1 e8 0c             	shr    $0xc,%eax
f01163f3:	25 ff 03 00 00       	and    $0x3ff,%eax
f01163f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01163ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116402:	01 d0                	add    %edx,%eax
f0116404:	8b 00                	mov    (%eax),%eax
f0116406:	85 c0                	test   %eax,%eax
f0116408:	74 07                	je     f0116411 <CE+0x9d>
f011640a:	b8 00 00 00 00       	mov    $0x0,%eax
f011640f:	eb 05                	jmp    f0116416 <CE+0xa2>
	return 1;
f0116411:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116416:	c9                   	leave  
f0116417:	c3                   	ret    

f0116418 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116418:	55                   	push   %ebp
f0116419:	89 e5                	mov    %esp,%ebp
f011641b:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011641e:	68 e7 ad 13 f0       	push   $0xf013ade7
f0116423:	68 f6 ad 13 f0       	push   $0xf013adf6
f0116428:	68 f5 07 00 00       	push   $0x7f5
f011642d:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116432:	e8 ce 9d fe ff       	call   f0100205 <_panic>

f0116437 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116437:	55                   	push   %ebp
f0116438:	89 e5                	mov    %esp,%ebp
f011643a:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011643d:	68 e7 ad 13 f0       	push   $0xf013ade7
f0116442:	68 f6 ad 13 f0       	push   $0xf013adf6
f0116447:	68 05 08 00 00       	push   $0x805
f011644c:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116451:	e8 af 9d fe ff       	call   f0100205 <_panic>

f0116456 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0116456:	55                   	push   %ebp
f0116457:	89 e5                	mov    %esp,%ebp
f0116459:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011645c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116463:	eb 18                	jmp    f011647d <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116465:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116468:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011646f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116472:	01 d0                	add    %edx,%eax
f0116474:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011647a:	ff 45 fc             	incl   -0x4(%ebp)
f011647d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116480:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116485:	76 de                	jbe    f0116465 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116487:	90                   	nop
f0116488:	c9                   	leave  
f0116489:	c3                   	ret    

f011648a <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f011648a:	55                   	push   %ebp
f011648b:	89 e5                	mov    %esp,%ebp
f011648d:	83 ec 38             	sub    $0x38,%esp
f0116490:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116493:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116496:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116499:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011649e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01164a1:	8b 45 10             	mov    0x10(%ebp),%eax
f01164a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01164a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01164ac:	e9 ea 01 00 00       	jmp    f011669b <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01164b1:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01164b5:	74 44                	je     f01164fb <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01164b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01164ba:	83 ec 04             	sub    $0x4,%esp
f01164bd:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01164c0:	52                   	push   %edx
f01164c1:	50                   	push   %eax
f01164c2:	ff 75 08             	pushl  0x8(%ebp)
f01164c5:	e8 3c 09 ff ff       	call   f0106e06 <get_frame_info>
f01164ca:	83 c4 10             	add    $0x10,%esp
f01164cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01164d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01164d3:	85 c0                	test   %eax,%eax
f01164d5:	75 24                	jne    f01164fb <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01164d7:	83 ec 04             	sub    $0x4,%esp
f01164da:	68 0c ae 13 f0       	push   $0xf013ae0c
f01164df:	68 22 08 00 00       	push   $0x822
f01164e4:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01164e9:	e8 25 9f fe ff       	call   f0100413 <_warn>
f01164ee:	83 c4 10             	add    $0x10,%esp
				return 0;
f01164f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01164f6:	e9 b6 01 00 00       	jmp    f01166b1 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01164fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01164fe:	83 ec 04             	sub    $0x4,%esp
f0116501:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116504:	52                   	push   %edx
f0116505:	50                   	push   %eax
f0116506:	ff 75 08             	pushl  0x8(%ebp)
f0116509:	e8 f8 08 ff ff       	call   f0106e06 <get_frame_info>
f011650e:	83 c4 10             	add    $0x10,%esp
f0116511:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116514:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116517:	85 c0                	test   %eax,%eax
f0116519:	75 24                	jne    f011653f <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011651b:	83 ec 04             	sub    $0x4,%esp
f011651e:	68 38 ae 13 f0       	push   $0xf013ae38
f0116523:	68 29 08 00 00       	push   $0x829
f0116528:	68 3e 8f 13 f0       	push   $0xf0138f3e
f011652d:	e8 e1 9e fe ff       	call   f0100413 <_warn>
f0116532:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116535:	b8 00 00 00 00       	mov    $0x0,%eax
f011653a:	e9 72 01 00 00       	jmp    f01166b1 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f011653f:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116543:	75 70                	jne    f01165b5 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116545:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116548:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011654b:	c1 ea 0c             	shr    $0xc,%edx
f011654e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116554:	c1 e2 02             	shl    $0x2,%edx
f0116557:	01 d0                	add    %edx,%eax
f0116559:	8b 00                	mov    (%eax),%eax
f011655b:	c1 e8 0c             	shr    $0xc,%eax
f011655e:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116561:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116564:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116567:	c1 ea 0c             	shr    $0xc,%edx
f011656a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116570:	c1 e2 02             	shl    $0x2,%edx
f0116573:	01 d0                	add    %edx,%eax
f0116575:	8b 00                	mov    (%eax),%eax
f0116577:	c1 e8 0c             	shr    $0xc,%eax
f011657a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f011657d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116580:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116583:	74 30                	je     f01165b5 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116585:	83 ec 04             	sub    $0x4,%esp
f0116588:	ff 75 e4             	pushl  -0x1c(%ebp)
f011658b:	ff 75 e8             	pushl  -0x18(%ebp)
f011658e:	ff 75 f0             	pushl  -0x10(%ebp)
f0116591:	ff 75 f4             	pushl  -0xc(%ebp)
f0116594:	68 64 ae 13 f0       	push   $0xf013ae64
f0116599:	68 33 08 00 00       	push   $0x833
f011659e:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01165a3:	e8 6b 9e fe ff       	call   f0100413 <_warn>
f01165a8:	83 c4 20             	add    $0x20,%esp
				return 0;
f01165ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01165b0:	e9 fc 00 00 00       	jmp    f01166b1 <CCP+0x227>
			}
		}
		if (ref != -1)
f01165b5:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01165b9:	74 52                	je     f011660d <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01165bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01165bf:	74 0e                	je     f01165cf <CCP+0x145>
f01165c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01165c4:	8b 40 08             	mov    0x8(%eax),%eax
f01165c7:	0f b7 c0             	movzwl %ax,%eax
f01165ca:	3b 45 18             	cmp    0x18(%ebp),%eax
f01165cd:	74 3e                	je     f011660d <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01165cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01165d3:	74 0b                	je     f01165e0 <CCP+0x156>
f01165d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01165d8:	8b 40 08             	mov    0x8(%eax),%eax
f01165db:	0f b7 c0             	movzwl %ax,%eax
f01165de:	eb 05                	jmp    f01165e5 <CCP+0x15b>
f01165e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01165e5:	83 ec 0c             	sub    $0xc,%esp
f01165e8:	50                   	push   %eax
f01165e9:	ff 75 f0             	pushl  -0x10(%ebp)
f01165ec:	68 c0 ae 13 f0       	push   $0xf013aec0
f01165f1:	68 3b 08 00 00       	push   $0x83b
f01165f6:	68 3e 8f 13 f0       	push   $0xf0138f3e
f01165fb:	e8 13 9e fe ff       	call   f0100413 <_warn>
f0116600:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116603:	b8 00 00 00 00       	mov    $0x0,%eax
f0116608:	e9 a4 00 00 00       	jmp    f01166b1 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f011660d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116610:	ff 75 20             	pushl  0x20(%ebp)
f0116613:	ff 75 1c             	pushl  0x1c(%ebp)
f0116616:	50                   	push   %eax
f0116617:	ff 75 08             	pushl  0x8(%ebp)
f011661a:	e8 17 fd ff ff       	call   f0116336 <CPs>
f011661f:	83 c4 10             	add    $0x10,%esp
f0116622:	85 c0                	test   %eax,%eax
f0116624:	7f 21                	jg     f0116647 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116626:	83 ec 04             	sub    $0x4,%esp
f0116629:	68 30 af 13 f0       	push   $0xf013af30
f011662e:	68 41 08 00 00       	push   $0x841
f0116633:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116638:	e8 d6 9d fe ff       	call   f0100413 <_warn>
f011663d:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116640:	b8 00 00 00 00       	mov    $0x0,%eax
f0116645:	eb 6a                	jmp    f01166b1 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116647:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011664b:	74 3a                	je     f0116687 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f011664d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116650:	ff 75 28             	pushl  0x28(%ebp)
f0116653:	ff 75 24             	pushl  0x24(%ebp)
f0116656:	50                   	push   %eax
f0116657:	ff 75 08             	pushl  0x8(%ebp)
f011665a:	e8 d7 fc ff ff       	call   f0116336 <CPs>
f011665f:	83 c4 10             	add    $0x10,%esp
f0116662:	85 c0                	test   %eax,%eax
f0116664:	7f 21                	jg     f0116687 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116666:	83 ec 04             	sub    $0x4,%esp
f0116669:	68 78 af 13 f0       	push   $0xf013af78
f011666e:	68 48 08 00 00       	push   $0x848
f0116673:	68 3e 8f 13 f0       	push   $0xf0138f3e
f0116678:	e8 96 9d fe ff       	call   f0100413 <_warn>
f011667d:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116680:	b8 00 00 00 00       	mov    $0x0,%eax
f0116685:	eb 2a                	jmp    f01166b1 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116687:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011668b:	74 07                	je     f0116694 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f011668d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116694:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f011669b:	8b 55 10             	mov    0x10(%ebp),%edx
f011669e:	8b 45 14             	mov    0x14(%ebp),%eax
f01166a1:	01 d0                	add    %edx,%eax
f01166a3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01166a6:	0f 87 05 fe ff ff    	ja     f01164b1 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01166ac:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01166b1:	c9                   	leave  
f01166b2:	c3                   	ret    

f01166b3 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01166b3:	55                   	push   %ebp
f01166b4:	89 e5                	mov    %esp,%ebp
f01166b6:	57                   	push   %edi
f01166b7:	56                   	push   %esi
f01166b8:	53                   	push   %ebx
f01166b9:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f01166bf:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01166c4:	84 c0                	test   %al,%al
f01166c6:	0f 84 b4 09 00 00    	je     f0117080 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01166cc:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01166d3:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01166d9:	bb 18 b2 13 f0       	mov    $0xf013b218,%ebx
f01166de:	ba 04 00 00 00       	mov    $0x4,%edx
f01166e3:	89 c7                	mov    %eax,%edi
f01166e5:	89 de                	mov    %ebx,%esi
f01166e7:	89 d1                	mov    %edx,%ecx
f01166e9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01166eb:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f01166f1:	b9 15 00 00 00       	mov    $0x15,%ecx
f01166f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01166fb:	89 d7                	mov    %edx,%edi
f01166fd:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01166ff:	83 ec 0c             	sub    $0xc,%esp
f0116702:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116708:	50                   	push   %eax
f0116709:	e8 62 a6 fe ff       	call   f0100d70 <execute_command>
f011670e:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116711:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116717:	bb 7c b2 13 f0       	mov    $0xf013b27c,%ebx
f011671c:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116721:	89 c7                	mov    %eax,%edi
f0116723:	89 de                	mov    %ebx,%esi
f0116725:	89 d1                	mov    %edx,%ecx
f0116727:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116729:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f011672f:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116734:	b0 00                	mov    $0x0,%al
f0116736:	89 d7                	mov    %edx,%edi
f0116738:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011673a:	83 ec 0c             	sub    $0xc,%esp
f011673d:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116743:	50                   	push   %eax
f0116744:	e8 27 a6 fe ff       	call   f0100d70 <execute_command>
f0116749:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011674c:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116752:	bb e0 b2 13 f0       	mov    $0xf013b2e0,%ebx
f0116757:	ba 17 00 00 00       	mov    $0x17,%edx
f011675c:	89 c7                	mov    %eax,%edi
f011675e:	89 de                	mov    %ebx,%esi
f0116760:	89 d1                	mov    %edx,%ecx
f0116762:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116764:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f011676a:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011676f:	b0 00                	mov    $0x0,%al
f0116771:	89 d7                	mov    %edx,%edi
f0116773:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116775:	83 ec 0c             	sub    $0xc,%esp
f0116778:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011677e:	50                   	push   %eax
f011677f:	e8 ec a5 fe ff       	call   f0100d70 <execute_command>
f0116784:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116787:	83 ec 04             	sub    $0x4,%esp
f011678a:	6a 00                	push   $0x0
f011678c:	8d 45 ac             	lea    -0x54(%ebp),%eax
f011678f:	50                   	push   %eax
f0116790:	68 00 10 00 00       	push   $0x1000
f0116795:	e8 77 36 ff ff       	call   f0109e11 <envid2env>
f011679a:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011679d:	83 ec 04             	sub    $0x4,%esp
f01167a0:	6a 00                	push   $0x0
f01167a2:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01167a5:	50                   	push   %eax
f01167a6:	68 01 10 00 00       	push   $0x1001
f01167ab:	e8 61 36 ff ff       	call   f0109e11 <envid2env>
f01167b0:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01167b3:	83 ec 04             	sub    $0x4,%esp
f01167b6:	6a 00                	push   $0x0
f01167b8:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01167bb:	50                   	push   %eax
f01167bc:	68 02 10 00 00       	push   $0x1002
f01167c1:	e8 4b 36 ff ff       	call   f0109e11 <envid2env>
f01167c6:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01167c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01167cc:	85 c0                	test   %eax,%eax
f01167ce:	74 0e                	je     f01167de <test_priority_normal_and_higher+0x12b>
f01167d0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01167d3:	85 c0                	test   %eax,%eax
f01167d5:	74 07                	je     f01167de <test_priority_normal_and_higher+0x12b>
f01167d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167da:	85 c0                	test   %eax,%eax
f01167dc:	75 14                	jne    f01167f2 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01167de:	83 ec 04             	sub    $0x4,%esp
f01167e1:	68 b8 af 13 f0       	push   $0xf013afb8
f01167e6:	6a 26                	push   $0x26
f01167e8:	68 d1 af 13 f0       	push   $0xf013afd1
f01167ed:	e8 13 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01167f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01167f5:	8b 40 74             	mov    0x74(%eax),%eax
f01167f8:	83 f8 14             	cmp    $0x14,%eax
f01167fb:	75 16                	jne    f0116813 <test_priority_normal_and_higher+0x160>
f01167fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116800:	8b 40 74             	mov    0x74(%eax),%eax
f0116803:	83 f8 0f             	cmp    $0xf,%eax
f0116806:	75 0b                	jne    f0116813 <test_priority_normal_and_higher+0x160>
f0116808:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011680b:	8b 40 74             	mov    0x74(%eax),%eax
f011680e:	83 f8 0a             	cmp    $0xa,%eax
f0116811:	74 14                	je     f0116827 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116813:	83 ec 04             	sub    $0x4,%esp
f0116816:	68 ec af 13 f0       	push   $0xf013afec
f011681b:	6a 29                	push   $0x29
f011681d:	68 d1 af 13 f0       	push   $0xf013afd1
f0116822:	e8 de 99 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116827:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011682e:	eb 44                	jmp    f0116874 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116830:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116833:	8b 48 78             	mov    0x78(%eax),%ecx
f0116836:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116839:	89 d0                	mov    %edx,%eax
f011683b:	01 c0                	add    %eax,%eax
f011683d:	01 d0                	add    %edx,%eax
f011683f:	c1 e0 03             	shl    $0x3,%eax
f0116842:	01 c8                	add    %ecx,%eax
f0116844:	8b 10                	mov    (%eax),%edx
f0116846:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116849:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116850:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116853:	8b 48 78             	mov    0x78(%eax),%ecx
f0116856:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116859:	89 d0                	mov    %edx,%eax
f011685b:	01 c0                	add    %eax,%eax
f011685d:	01 d0                	add    %edx,%eax
f011685f:	c1 e0 03             	shl    $0x3,%eax
f0116862:	01 c8                	add    %ecx,%eax
f0116864:	8b 50 08             	mov    0x8(%eax),%edx
f0116867:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011686a:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116871:	ff 45 e4             	incl   -0x1c(%ebp)
f0116874:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116878:	7e b6                	jle    f0116830 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011687a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116881:	eb 44                	jmp    f01168c7 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116883:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116886:	8b 48 78             	mov    0x78(%eax),%ecx
f0116889:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011688c:	89 d0                	mov    %edx,%eax
f011688e:	01 c0                	add    %eax,%eax
f0116890:	01 d0                	add    %edx,%eax
f0116892:	c1 e0 03             	shl    $0x3,%eax
f0116895:	01 c8                	add    %ecx,%eax
f0116897:	8b 10                	mov    (%eax),%edx
f0116899:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011689c:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01168a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168a6:	8b 48 78             	mov    0x78(%eax),%ecx
f01168a9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01168ac:	89 d0                	mov    %edx,%eax
f01168ae:	01 c0                	add    %eax,%eax
f01168b0:	01 d0                	add    %edx,%eax
f01168b2:	c1 e0 03             	shl    $0x3,%eax
f01168b5:	01 c8                	add    %ecx,%eax
f01168b7:	8b 50 08             	mov    0x8(%eax),%edx
f01168ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01168bd:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01168c4:	ff 45 e0             	incl   -0x20(%ebp)
f01168c7:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01168cb:	7e b6                	jle    f0116883 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01168cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01168d4:	eb 44                	jmp    f011691a <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01168d6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168d9:	8b 48 78             	mov    0x78(%eax),%ecx
f01168dc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01168df:	89 d0                	mov    %edx,%eax
f01168e1:	01 c0                	add    %eax,%eax
f01168e3:	01 d0                	add    %edx,%eax
f01168e5:	c1 e0 03             	shl    $0x3,%eax
f01168e8:	01 c8                	add    %ecx,%eax
f01168ea:	8b 10                	mov    (%eax),%edx
f01168ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01168ef:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01168f6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168f9:	8b 48 78             	mov    0x78(%eax),%ecx
f01168fc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01168ff:	89 d0                	mov    %edx,%eax
f0116901:	01 c0                	add    %eax,%eax
f0116903:	01 d0                	add    %edx,%eax
f0116905:	c1 e0 03             	shl    $0x3,%eax
f0116908:	01 c8                	add    %ecx,%eax
f011690a:	8b 50 08             	mov    0x8(%eax),%edx
f011690d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116910:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116917:	ff 45 dc             	incl   -0x24(%ebp)
f011691a:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011691e:	7e b6                	jle    f01168d6 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116920:	e8 7e 65 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116925:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116928:	e8 9b d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011692d:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116930:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116933:	83 ec 08             	sub    $0x8,%esp
f0116936:	6a 03                	push   $0x3
f0116938:	50                   	push   %eax
f0116939:	e8 b1 49 ff ff       	call   f010b2ef <set_program_priority>
f011693e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116941:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116944:	83 ec 08             	sub    $0x8,%esp
f0116947:	6a 03                	push   $0x3
f0116949:	50                   	push   %eax
f011694a:	e8 a0 49 ff ff       	call   f010b2ef <set_program_priority>
f011694f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116952:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116955:	83 ec 08             	sub    $0x8,%esp
f0116958:	6a 03                	push   $0x3
f011695a:	50                   	push   %eax
f011695b:	e8 8f 49 ff ff       	call   f010b2ef <set_program_priority>
f0116960:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116963:	e8 60 d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116968:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011696b:	74 14                	je     f0116981 <test_priority_normal_and_higher+0x2ce>
f011696d:	83 ec 04             	sub    $0x4,%esp
f0116970:	68 38 b0 13 f0       	push   $0xf013b038
f0116975:	6a 45                	push   $0x45
f0116977:	68 d1 af 13 f0       	push   $0xf013afd1
f011697c:	e8 84 98 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116981:	e8 1d 65 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116986:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116989:	74 14                	je     f011699f <test_priority_normal_and_higher+0x2ec>
f011698b:	83 ec 04             	sub    $0x4,%esp
f011698e:	68 38 b0 13 f0       	push   $0xf013b038
f0116993:	6a 46                	push   $0x46
f0116995:	68 d1 af 13 f0       	push   $0xf013afd1
f011699a:	e8 66 98 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011699f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01169a2:	8b 40 74             	mov    0x74(%eax),%eax
f01169a5:	83 f8 14             	cmp    $0x14,%eax
f01169a8:	75 16                	jne    f01169c0 <test_priority_normal_and_higher+0x30d>
f01169aa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169ad:	8b 40 74             	mov    0x74(%eax),%eax
f01169b0:	83 f8 0f             	cmp    $0xf,%eax
f01169b3:	75 0b                	jne    f01169c0 <test_priority_normal_and_higher+0x30d>
f01169b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169b8:	8b 40 74             	mov    0x74(%eax),%eax
f01169bb:	83 f8 0a             	cmp    $0xa,%eax
f01169be:	74 14                	je     f01169d4 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01169c0:	83 ec 04             	sub    $0x4,%esp
f01169c3:	68 64 b0 13 f0       	push   $0xf013b064
f01169c8:	6a 49                	push   $0x49
f01169ca:	68 d1 af 13 f0       	push   $0xf013afd1
f01169cf:	e8 31 98 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01169d4:	e8 ca 64 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01169d9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01169dc:	e8 e7 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01169e1:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01169e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01169e7:	83 ec 08             	sub    $0x8,%esp
f01169ea:	6a 04                	push   $0x4
f01169ec:	50                   	push   %eax
f01169ed:	e8 fd 48 ff ff       	call   f010b2ef <set_program_priority>
f01169f2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01169f5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169f8:	83 ec 08             	sub    $0x8,%esp
f01169fb:	6a 04                	push   $0x4
f01169fd:	50                   	push   %eax
f01169fe:	e8 ec 48 ff ff       	call   f010b2ef <set_program_priority>
f0116a03:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116a06:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a09:	83 ec 08             	sub    $0x8,%esp
f0116a0c:	6a 04                	push   $0x4
f0116a0e:	50                   	push   %eax
f0116a0f:	e8 db 48 ff ff       	call   f010b2ef <set_program_priority>
f0116a14:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a17:	e8 ac d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a1c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116a1f:	74 14                	je     f0116a35 <test_priority_normal_and_higher+0x382>
f0116a21:	83 ec 04             	sub    $0x4,%esp
f0116a24:	68 38 b0 13 f0       	push   $0xf013b038
f0116a29:	6a 53                	push   $0x53
f0116a2b:	68 d1 af 13 f0       	push   $0xf013afd1
f0116a30:	e8 d0 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116a35:	e8 69 64 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116a3a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116a3d:	74 14                	je     f0116a53 <test_priority_normal_and_higher+0x3a0>
f0116a3f:	83 ec 04             	sub    $0x4,%esp
f0116a42:	68 b8 b0 13 f0       	push   $0xf013b0b8
f0116a47:	6a 54                	push   $0x54
f0116a49:	68 d1 af 13 f0       	push   $0xf013afd1
f0116a4e:	e8 b2 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116a53:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a56:	8b 40 74             	mov    0x74(%eax),%eax
f0116a59:	83 f8 14             	cmp    $0x14,%eax
f0116a5c:	75 16                	jne    f0116a74 <test_priority_normal_and_higher+0x3c1>
f0116a5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a61:	8b 40 74             	mov    0x74(%eax),%eax
f0116a64:	83 f8 0f             	cmp    $0xf,%eax
f0116a67:	75 0b                	jne    f0116a74 <test_priority_normal_and_higher+0x3c1>
f0116a69:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a6c:	8b 40 74             	mov    0x74(%eax),%eax
f0116a6f:	83 f8 14             	cmp    $0x14,%eax
f0116a72:	74 14                	je     f0116a88 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116a74:	83 ec 04             	sub    $0x4,%esp
f0116a77:	68 e8 b0 13 f0       	push   $0xf013b0e8
f0116a7c:	6a 57                	push   $0x57
f0116a7e:	68 d1 af 13 f0       	push   $0xf013afd1
f0116a83:	e8 7d 97 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116a88:	e8 16 64 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116a8d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a90:	e8 33 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a95:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116a98:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a9b:	83 ec 08             	sub    $0x8,%esp
f0116a9e:	6a 04                	push   $0x4
f0116aa0:	50                   	push   %eax
f0116aa1:	e8 49 48 ff ff       	call   f010b2ef <set_program_priority>
f0116aa6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116aa9:	e8 1a d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116aae:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116ab1:	74 14                	je     f0116ac7 <test_priority_normal_and_higher+0x414>
f0116ab3:	83 ec 04             	sub    $0x4,%esp
f0116ab6:	68 38 b0 13 f0       	push   $0xf013b038
f0116abb:	6a 5f                	push   $0x5f
f0116abd:	68 d1 af 13 f0       	push   $0xf013afd1
f0116ac2:	e8 3e 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116ac7:	e8 d7 63 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116acc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116acf:	74 14                	je     f0116ae5 <test_priority_normal_and_higher+0x432>
f0116ad1:	83 ec 04             	sub    $0x4,%esp
f0116ad4:	68 38 b0 13 f0       	push   $0xf013b038
f0116ad9:	6a 60                	push   $0x60
f0116adb:	68 d1 af 13 f0       	push   $0xf013afd1
f0116ae0:	e8 20 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116ae5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ae8:	8b 40 74             	mov    0x74(%eax),%eax
f0116aeb:	83 f8 14             	cmp    $0x14,%eax
f0116aee:	75 16                	jne    f0116b06 <test_priority_normal_and_higher+0x453>
f0116af0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116af3:	8b 40 74             	mov    0x74(%eax),%eax
f0116af6:	83 f8 0f             	cmp    $0xf,%eax
f0116af9:	75 0b                	jne    f0116b06 <test_priority_normal_and_higher+0x453>
f0116afb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116afe:	8b 40 74             	mov    0x74(%eax),%eax
f0116b01:	83 f8 14             	cmp    $0x14,%eax
f0116b04:	74 14                	je     f0116b1a <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116b06:	83 ec 04             	sub    $0x4,%esp
f0116b09:	68 30 b1 13 f0       	push   $0xf013b130
f0116b0e:	6a 63                	push   $0x63
f0116b10:	68 d1 af 13 f0       	push   $0xf013afd1
f0116b15:	e8 eb 96 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116b1a:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116b21:	eb 1b                	jmp    f0116b3e <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116b23:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b26:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b29:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116b2c:	89 d0                	mov    %edx,%eax
f0116b2e:	01 c0                	add    %eax,%eax
f0116b30:	01 d0                	add    %edx,%eax
f0116b32:	c1 e0 03             	shl    $0x3,%eax
f0116b35:	01 c8                	add    %ecx,%eax
f0116b37:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116b3b:	ff 45 d8             	incl   -0x28(%ebp)
f0116b3e:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116b42:	7e df                	jle    f0116b23 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116b44:	e8 5a 63 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116b49:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b4c:	e8 77 d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116b51:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116b54:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b57:	83 ec 08             	sub    $0x8,%esp
f0116b5a:	6a 04                	push   $0x4
f0116b5c:	50                   	push   %eax
f0116b5d:	e8 8d 47 ff ff       	call   f010b2ef <set_program_priority>
f0116b62:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b65:	e8 5e d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116b6a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116b6d:	74 14                	je     f0116b83 <test_priority_normal_and_higher+0x4d0>
f0116b6f:	83 ec 04             	sub    $0x4,%esp
f0116b72:	68 38 b0 13 f0       	push   $0xf013b038
f0116b77:	6a 70                	push   $0x70
f0116b79:	68 d1 af 13 f0       	push   $0xf013afd1
f0116b7e:	e8 82 96 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116b83:	e8 1b 63 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116b88:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116b8b:	74 14                	je     f0116ba1 <test_priority_normal_and_higher+0x4ee>
f0116b8d:	83 ec 04             	sub    $0x4,%esp
f0116b90:	68 38 b0 13 f0       	push   $0xf013b038
f0116b95:	6a 71                	push   $0x71
f0116b97:	68 d1 af 13 f0       	push   $0xf013afd1
f0116b9c:	e8 64 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116ba1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ba4:	8b 40 74             	mov    0x74(%eax),%eax
f0116ba7:	83 f8 14             	cmp    $0x14,%eax
f0116baa:	75 16                	jne    f0116bc2 <test_priority_normal_and_higher+0x50f>
f0116bac:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116baf:	8b 40 74             	mov    0x74(%eax),%eax
f0116bb2:	83 f8 0f             	cmp    $0xf,%eax
f0116bb5:	75 0b                	jne    f0116bc2 <test_priority_normal_and_higher+0x50f>
f0116bb7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116bba:	8b 40 74             	mov    0x74(%eax),%eax
f0116bbd:	83 f8 14             	cmp    $0x14,%eax
f0116bc0:	74 14                	je     f0116bd6 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116bc2:	83 ec 04             	sub    $0x4,%esp
f0116bc5:	68 30 b1 13 f0       	push   $0xf013b130
f0116bca:	6a 74                	push   $0x74
f0116bcc:	68 d1 af 13 f0       	push   $0xf013afd1
f0116bd1:	e8 2f 96 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116bd6:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116bdd:	eb 1b                	jmp    f0116bfa <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116bdf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116be2:	8b 48 78             	mov    0x78(%eax),%ecx
f0116be5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116be8:	89 d0                	mov    %edx,%eax
f0116bea:	01 c0                	add    %eax,%eax
f0116bec:	01 d0                	add    %edx,%eax
f0116bee:	c1 e0 03             	shl    $0x3,%eax
f0116bf1:	01 c8                	add    %ecx,%eax
f0116bf3:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116bf7:	ff 45 d4             	incl   -0x2c(%ebp)
f0116bfa:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116bfe:	7e df                	jle    f0116bdf <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116c00:	e8 9e 62 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116c05:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c08:	e8 bb d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c0d:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116c10:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c13:	83 ec 08             	sub    $0x8,%esp
f0116c16:	6a 05                	push   $0x5
f0116c18:	50                   	push   %eax
f0116c19:	e8 d1 46 ff ff       	call   f010b2ef <set_program_priority>
f0116c1e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116c21:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c24:	83 ec 08             	sub    $0x8,%esp
f0116c27:	6a 05                	push   $0x5
f0116c29:	50                   	push   %eax
f0116c2a:	e8 c0 46 ff ff       	call   f010b2ef <set_program_priority>
f0116c2f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116c32:	e8 91 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c37:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116c3a:	74 14                	je     f0116c50 <test_priority_normal_and_higher+0x59d>
f0116c3c:	83 ec 04             	sub    $0x4,%esp
f0116c3f:	68 38 b0 13 f0       	push   $0xf013b038
f0116c44:	6a 7f                	push   $0x7f
f0116c46:	68 d1 af 13 f0       	push   $0xf013afd1
f0116c4b:	e8 b5 95 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116c50:	e8 4e 62 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116c55:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116c58:	74 17                	je     f0116c71 <test_priority_normal_and_higher+0x5be>
f0116c5a:	83 ec 04             	sub    $0x4,%esp
f0116c5d:	68 38 b0 13 f0       	push   $0xf013b038
f0116c62:	68 80 00 00 00       	push   $0x80
f0116c67:	68 d1 af 13 f0       	push   $0xf013afd1
f0116c6c:	e8 94 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116c71:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c74:	8b 40 74             	mov    0x74(%eax),%eax
f0116c77:	83 f8 14             	cmp    $0x14,%eax
f0116c7a:	75 16                	jne    f0116c92 <test_priority_normal_and_higher+0x5df>
f0116c7c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c7f:	8b 40 74             	mov    0x74(%eax),%eax
f0116c82:	83 f8 1e             	cmp    $0x1e,%eax
f0116c85:	75 0b                	jne    f0116c92 <test_priority_normal_and_higher+0x5df>
f0116c87:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c8a:	8b 40 74             	mov    0x74(%eax),%eax
f0116c8d:	83 f8 28             	cmp    $0x28,%eax
f0116c90:	74 17                	je     f0116ca9 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f0116c92:	83 ec 04             	sub    $0x4,%esp
f0116c95:	68 6c b1 13 f0       	push   $0xf013b16c
f0116c9a:	68 83 00 00 00       	push   $0x83
f0116c9f:	68 d1 af 13 f0       	push   $0xf013afd1
f0116ca4:	e8 5c 95 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0116ca9:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0116cb0:	eb 1b                	jmp    f0116ccd <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116cb2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cb5:	8b 48 78             	mov    0x78(%eax),%ecx
f0116cb8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116cbb:	89 d0                	mov    %edx,%eax
f0116cbd:	01 c0                	add    %eax,%eax
f0116cbf:	01 d0                	add    %edx,%eax
f0116cc1:	c1 e0 03             	shl    $0x3,%eax
f0116cc4:	01 c8                	add    %ecx,%eax
f0116cc6:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116cca:	ff 45 d0             	incl   -0x30(%ebp)
f0116ccd:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0116cd1:	7e df                	jle    f0116cb2 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116cd3:	e8 cb 61 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116cd8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116cdb:	e8 e8 d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116ce0:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116ce3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ce6:	83 ec 08             	sub    $0x8,%esp
f0116ce9:	6a 05                	push   $0x5
f0116ceb:	50                   	push   %eax
f0116cec:	e8 fe 45 ff ff       	call   f010b2ef <set_program_priority>
f0116cf1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116cf4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cf7:	83 ec 08             	sub    $0x8,%esp
f0116cfa:	6a 04                	push   $0x4
f0116cfc:	50                   	push   %eax
f0116cfd:	e8 ed 45 ff ff       	call   f010b2ef <set_program_priority>
f0116d02:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116d05:	e8 be d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116d0a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116d0d:	74 17                	je     f0116d26 <test_priority_normal_and_higher+0x673>
f0116d0f:	83 ec 04             	sub    $0x4,%esp
f0116d12:	68 38 b0 13 f0       	push   $0xf013b038
f0116d17:	68 8e 00 00 00       	push   $0x8e
f0116d1c:	68 d1 af 13 f0       	push   $0xf013afd1
f0116d21:	e8 df 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116d26:	e8 78 61 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116d2b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116d2e:	74 17                	je     f0116d47 <test_priority_normal_and_higher+0x694>
f0116d30:	83 ec 04             	sub    $0x4,%esp
f0116d33:	68 38 b0 13 f0       	push   $0xf013b038
f0116d38:	68 8f 00 00 00       	push   $0x8f
f0116d3d:	68 d1 af 13 f0       	push   $0xf013afd1
f0116d42:	e8 be 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116d47:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d4a:	8b 40 74             	mov    0x74(%eax),%eax
f0116d4d:	83 f8 14             	cmp    $0x14,%eax
f0116d50:	75 16                	jne    f0116d68 <test_priority_normal_and_higher+0x6b5>
f0116d52:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d55:	8b 40 74             	mov    0x74(%eax),%eax
f0116d58:	83 f8 1e             	cmp    $0x1e,%eax
f0116d5b:	75 0b                	jne    f0116d68 <test_priority_normal_and_higher+0x6b5>
f0116d5d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d60:	8b 40 74             	mov    0x74(%eax),%eax
f0116d63:	83 f8 28             	cmp    $0x28,%eax
f0116d66:	74 17                	je     f0116d7f <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116d68:	83 ec 04             	sub    $0x4,%esp
f0116d6b:	68 6c b1 13 f0       	push   $0xf013b16c
f0116d70:	68 92 00 00 00       	push   $0x92
f0116d75:	68 d1 af 13 f0       	push   $0xf013afd1
f0116d7a:	e8 86 94 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f0116d7f:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116d86:	eb 1b                	jmp    f0116da3 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116d88:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d8b:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d8e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116d91:	89 d0                	mov    %edx,%eax
f0116d93:	01 c0                	add    %eax,%eax
f0116d95:	01 d0                	add    %edx,%eax
f0116d97:	c1 e0 03             	shl    $0x3,%eax
f0116d9a:	01 c8                	add    %ecx,%eax
f0116d9c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0116da0:	ff 45 cc             	incl   -0x34(%ebp)
f0116da3:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116da7:	7e df                	jle    f0116d88 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116da9:	e8 f5 60 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116dae:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116db1:	e8 12 d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116db6:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116db9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116dbc:	83 ec 08             	sub    $0x8,%esp
f0116dbf:	6a 05                	push   $0x5
f0116dc1:	50                   	push   %eax
f0116dc2:	e8 28 45 ff ff       	call   f010b2ef <set_program_priority>
f0116dc7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116dca:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116dcd:	83 ec 08             	sub    $0x8,%esp
f0116dd0:	6a 04                	push   $0x4
f0116dd2:	50                   	push   %eax
f0116dd3:	e8 17 45 ff ff       	call   f010b2ef <set_program_priority>
f0116dd8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ddb:	e8 e8 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116de0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116de3:	74 17                	je     f0116dfc <test_priority_normal_and_higher+0x749>
f0116de5:	83 ec 04             	sub    $0x4,%esp
f0116de8:	68 38 b0 13 f0       	push   $0xf013b038
f0116ded:	68 9d 00 00 00       	push   $0x9d
f0116df2:	68 d1 af 13 f0       	push   $0xf013afd1
f0116df7:	e8 09 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116dfc:	e8 a2 60 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0116e01:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e04:	74 17                	je     f0116e1d <test_priority_normal_and_higher+0x76a>
f0116e06:	83 ec 04             	sub    $0x4,%esp
f0116e09:	68 38 b0 13 f0       	push   $0xf013b038
f0116e0e:	68 9e 00 00 00       	push   $0x9e
f0116e13:	68 d1 af 13 f0       	push   $0xf013afd1
f0116e18:	e8 e8 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116e1d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e20:	8b 40 74             	mov    0x74(%eax),%eax
f0116e23:	83 f8 14             	cmp    $0x14,%eax
f0116e26:	75 16                	jne    f0116e3e <test_priority_normal_and_higher+0x78b>
f0116e28:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e2b:	8b 40 74             	mov    0x74(%eax),%eax
f0116e2e:	83 f8 3c             	cmp    $0x3c,%eax
f0116e31:	75 0b                	jne    f0116e3e <test_priority_normal_and_higher+0x78b>
f0116e33:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e36:	8b 40 74             	mov    0x74(%eax),%eax
f0116e39:	83 f8 28             	cmp    $0x28,%eax
f0116e3c:	74 17                	je     f0116e55 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116e3e:	83 ec 04             	sub    $0x4,%esp
f0116e41:	68 6c b1 13 f0       	push   $0xf013b16c
f0116e46:	68 a1 00 00 00       	push   $0xa1
f0116e4b:	68 d1 af 13 f0       	push   $0xf013afd1
f0116e50:	e8 b0 93 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0116e55:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116e5c:	eb 1b                	jmp    f0116e79 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116e5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e61:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e64:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116e67:	89 d0                	mov    %edx,%eax
f0116e69:	01 c0                	add    %eax,%eax
f0116e6b:	01 d0                	add    %edx,%eax
f0116e6d:	c1 e0 03             	shl    $0x3,%eax
f0116e70:	01 c8                	add    %ecx,%eax
f0116e72:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116e76:	ff 45 c8             	incl   -0x38(%ebp)
f0116e79:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116e7d:	7e df                	jle    f0116e5e <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116e7f:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116e86:	eb 1b                	jmp    f0116ea3 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116e88:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e8b:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e8e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116e91:	89 d0                	mov    %edx,%eax
f0116e93:	01 c0                	add    %eax,%eax
f0116e95:	01 d0                	add    %edx,%eax
f0116e97:	c1 e0 03             	shl    $0x3,%eax
f0116e9a:	01 c8                	add    %ecx,%eax
f0116e9c:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116ea0:	ff 45 c4             	incl   -0x3c(%ebp)
f0116ea3:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116ea7:	7e df                	jle    f0116e88 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116ea9:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116eb0:	eb 7a                	jmp    f0116f2c <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116eb2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116eb5:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116ebc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ebf:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ec2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116ec5:	89 d0                	mov    %edx,%eax
f0116ec7:	01 c0                	add    %eax,%eax
f0116ec9:	01 d0                	add    %edx,%eax
f0116ecb:	c1 e0 03             	shl    $0x3,%eax
f0116ece:	01 d8                	add    %ebx,%eax
f0116ed0:	8b 00                	mov    (%eax),%eax
f0116ed2:	39 c1                	cmp    %eax,%ecx
f0116ed4:	74 17                	je     f0116eed <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116ed6:	83 ec 04             	sub    $0x4,%esp
f0116ed9:	68 a8 b1 13 f0       	push   $0xf013b1a8
f0116ede:	68 af 00 00 00       	push   $0xaf
f0116ee3:	68 d1 af 13 f0       	push   $0xf013afd1
f0116ee8:	e8 18 93 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116eed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116ef0:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116ef7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116efa:	8b 58 78             	mov    0x78(%eax),%ebx
f0116efd:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116f00:	89 d0                	mov    %edx,%eax
f0116f02:	01 c0                	add    %eax,%eax
f0116f04:	01 d0                	add    %edx,%eax
f0116f06:	c1 e0 03             	shl    $0x3,%eax
f0116f09:	01 d8                	add    %ebx,%eax
f0116f0b:	8b 40 08             	mov    0x8(%eax),%eax
f0116f0e:	39 c1                	cmp    %eax,%ecx
f0116f10:	74 17                	je     f0116f29 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0116f12:	83 ec 04             	sub    $0x4,%esp
f0116f15:	68 a8 b1 13 f0       	push   $0xf013b1a8
f0116f1a:	68 b2 00 00 00       	push   $0xb2
f0116f1f:	68 d1 af 13 f0       	push   $0xf013afd1
f0116f24:	e8 dc 92 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116f29:	ff 45 c0             	incl   -0x40(%ebp)
f0116f2c:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116f30:	7e 80                	jle    f0116eb2 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116f32:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116f39:	eb 7a                	jmp    f0116fb5 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f3b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116f3e:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116f45:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f48:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f4b:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116f4e:	89 d0                	mov    %edx,%eax
f0116f50:	01 c0                	add    %eax,%eax
f0116f52:	01 d0                	add    %edx,%eax
f0116f54:	c1 e0 03             	shl    $0x3,%eax
f0116f57:	01 d8                	add    %ebx,%eax
f0116f59:	8b 00                	mov    (%eax),%eax
f0116f5b:	39 c1                	cmp    %eax,%ecx
f0116f5d:	74 17                	je     f0116f76 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0116f5f:	83 ec 04             	sub    $0x4,%esp
f0116f62:	68 a8 b1 13 f0       	push   $0xf013b1a8
f0116f67:	68 b8 00 00 00       	push   $0xb8
f0116f6c:	68 d1 af 13 f0       	push   $0xf013afd1
f0116f71:	e8 8f 92 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116f76:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116f79:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116f80:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f83:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f86:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116f89:	89 d0                	mov    %edx,%eax
f0116f8b:	01 c0                	add    %eax,%eax
f0116f8d:	01 d0                	add    %edx,%eax
f0116f8f:	c1 e0 03             	shl    $0x3,%eax
f0116f92:	01 d8                	add    %ebx,%eax
f0116f94:	8b 40 08             	mov    0x8(%eax),%eax
f0116f97:	39 c1                	cmp    %eax,%ecx
f0116f99:	74 17                	je     f0116fb2 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0116f9b:	83 ec 04             	sub    $0x4,%esp
f0116f9e:	68 a8 b1 13 f0       	push   $0xf013b1a8
f0116fa3:	68 bb 00 00 00       	push   $0xbb
f0116fa8:	68 d1 af 13 f0       	push   $0xf013afd1
f0116fad:	e8 53 92 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116fb2:	ff 45 bc             	incl   -0x44(%ebp)
f0116fb5:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116fb9:	7e 80                	jle    f0116f3b <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116fbb:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116fc2:	eb 7a                	jmp    f011703e <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116fc4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116fc7:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0116fce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fd1:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fd4:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116fd7:	89 d0                	mov    %edx,%eax
f0116fd9:	01 c0                	add    %eax,%eax
f0116fdb:	01 d0                	add    %edx,%eax
f0116fdd:	c1 e0 03             	shl    $0x3,%eax
f0116fe0:	01 d8                	add    %ebx,%eax
f0116fe2:	8b 00                	mov    (%eax),%eax
f0116fe4:	39 c1                	cmp    %eax,%ecx
f0116fe6:	74 17                	je     f0116fff <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116fe8:	83 ec 04             	sub    $0x4,%esp
f0116feb:	68 a8 b1 13 f0       	push   $0xf013b1a8
f0116ff0:	68 c1 00 00 00       	push   $0xc1
f0116ff5:	68 d1 af 13 f0       	push   $0xf013afd1
f0116ffa:	e8 06 92 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116fff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117002:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117009:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011700c:	8b 58 78             	mov    0x78(%eax),%ebx
f011700f:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117012:	89 d0                	mov    %edx,%eax
f0117014:	01 c0                	add    %eax,%eax
f0117016:	01 d0                	add    %edx,%eax
f0117018:	c1 e0 03             	shl    $0x3,%eax
f011701b:	01 d8                	add    %ebx,%eax
f011701d:	8b 40 08             	mov    0x8(%eax),%eax
f0117020:	39 c1                	cmp    %eax,%ecx
f0117022:	74 17                	je     f011703b <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0117024:	83 ec 04             	sub    $0x4,%esp
f0117027:	68 a8 b1 13 f0       	push   $0xf013b1a8
f011702c:	68 c4 00 00 00       	push   $0xc4
f0117031:	68 d1 af 13 f0       	push   $0xf013afd1
f0117036:	e8 ca 91 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011703b:	ff 45 b8             	incl   -0x48(%ebp)
f011703e:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117042:	7e 80                	jle    f0116fc4 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117044:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011704b:	75 6e 61 
f011704e:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117055:	6c 00 00 
f0117058:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011705e:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117063:	b8 00 00 00 00       	mov    $0x0,%eax
f0117068:	89 d7                	mov    %edx,%edi
f011706a:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011706c:	83 ec 0c             	sub    $0xc,%esp
f011706f:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117075:	50                   	push   %eax
f0117076:	e8 f5 9c fe ff       	call   f0100d70 <execute_command>
f011707b:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f011707e:	eb 10                	jmp    f0117090 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0117080:	83 ec 0c             	sub    $0xc,%esp
f0117083:	68 dc b1 13 f0       	push   $0xf013b1dc
f0117088:	e8 81 9c fe ff       	call   f0100d0e <cprintf>
f011708d:	83 c4 10             	add    $0x10,%esp
	}
}
f0117090:	90                   	nop
f0117091:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117094:	5b                   	pop    %ebx
f0117095:	5e                   	pop    %esi
f0117096:	5f                   	pop    %edi
f0117097:	5d                   	pop    %ebp
f0117098:	c3                   	ret    

f0117099 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117099:	55                   	push   %ebp
f011709a:	89 e5                	mov    %esp,%ebp
f011709c:	57                   	push   %edi
f011709d:	56                   	push   %esi
f011709e:	53                   	push   %ebx
f011709f:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01170a5:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01170aa:	84 c0                	test   %al,%al
f01170ac:	0f 84 be 09 00 00    	je     f0117a70 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01170b2:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01170b9:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01170bf:	bb 18 b2 13 f0       	mov    $0xf013b218,%ebx
f01170c4:	ba 04 00 00 00       	mov    $0x4,%edx
f01170c9:	89 c7                	mov    %eax,%edi
f01170cb:	89 de                	mov    %ebx,%esi
f01170cd:	89 d1                	mov    %edx,%ecx
f01170cf:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01170d1:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01170d7:	b9 15 00 00 00       	mov    $0x15,%ecx
f01170dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01170e1:	89 d7                	mov    %edx,%edi
f01170e3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01170e5:	83 ec 0c             	sub    $0xc,%esp
f01170e8:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01170ee:	50                   	push   %eax
f01170ef:	e8 7c 9c fe ff       	call   f0100d70 <execute_command>
f01170f4:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01170f7:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01170fd:	bb d4 b4 13 f0       	mov    $0xf013b4d4,%ebx
f0117102:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117107:	89 c7                	mov    %eax,%edi
f0117109:	89 de                	mov    %ebx,%esi
f011710b:	89 d1                	mov    %edx,%ecx
f011710d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011710f:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117115:	b9 57 00 00 00       	mov    $0x57,%ecx
f011711a:	b0 00                	mov    $0x0,%al
f011711c:	89 d7                	mov    %edx,%edi
f011711e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117120:	83 ec 0c             	sub    $0xc,%esp
f0117123:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117129:	50                   	push   %eax
f011712a:	e8 41 9c fe ff       	call   f0100d70 <execute_command>
f011712f:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117132:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117138:	bb 38 b5 13 f0       	mov    $0xf013b538,%ebx
f011713d:	ba 17 00 00 00       	mov    $0x17,%edx
f0117142:	89 c7                	mov    %eax,%edi
f0117144:	89 de                	mov    %ebx,%esi
f0117146:	89 d1                	mov    %edx,%ecx
f0117148:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011714a:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117150:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117155:	b0 00                	mov    $0x0,%al
f0117157:	89 d7                	mov    %edx,%edi
f0117159:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011715b:	83 ec 0c             	sub    $0xc,%esp
f011715e:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117164:	50                   	push   %eax
f0117165:	e8 06 9c fe ff       	call   f0100d70 <execute_command>
f011716a:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011716d:	83 ec 04             	sub    $0x4,%esp
f0117170:	6a 00                	push   $0x0
f0117172:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117175:	50                   	push   %eax
f0117176:	68 00 10 00 00       	push   $0x1000
f011717b:	e8 91 2c ff ff       	call   f0109e11 <envid2env>
f0117180:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117183:	83 ec 04             	sub    $0x4,%esp
f0117186:	6a 00                	push   $0x0
f0117188:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011718b:	50                   	push   %eax
f011718c:	68 01 10 00 00       	push   $0x1001
f0117191:	e8 7b 2c ff ff       	call   f0109e11 <envid2env>
f0117196:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117199:	83 ec 04             	sub    $0x4,%esp
f011719c:	6a 00                	push   $0x0
f011719e:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01171a1:	50                   	push   %eax
f01171a2:	68 02 10 00 00       	push   $0x1002
f01171a7:	e8 65 2c ff ff       	call   f0109e11 <envid2env>
f01171ac:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01171af:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171b2:	85 c0                	test   %eax,%eax
f01171b4:	74 0e                	je     f01171c4 <test_priority_normal_and_lower+0x12b>
f01171b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01171b9:	85 c0                	test   %eax,%eax
f01171bb:	74 07                	je     f01171c4 <test_priority_normal_and_lower+0x12b>
f01171bd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171c0:	85 c0                	test   %eax,%eax
f01171c2:	75 17                	jne    f01171db <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01171c4:	83 ec 04             	sub    $0x4,%esp
f01171c7:	68 b8 af 13 f0       	push   $0xf013afb8
f01171cc:	68 eb 00 00 00       	push   $0xeb
f01171d1:	68 d1 af 13 f0       	push   $0xf013afd1
f01171d6:	e8 2a 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01171db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171de:	8b 40 74             	mov    0x74(%eax),%eax
f01171e1:	83 f8 14             	cmp    $0x14,%eax
f01171e4:	75 16                	jne    f01171fc <test_priority_normal_and_lower+0x163>
f01171e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01171e9:	8b 40 74             	mov    0x74(%eax),%eax
f01171ec:	83 f8 1e             	cmp    $0x1e,%eax
f01171ef:	75 0b                	jne    f01171fc <test_priority_normal_and_lower+0x163>
f01171f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171f4:	8b 40 74             	mov    0x74(%eax),%eax
f01171f7:	83 f8 28             	cmp    $0x28,%eax
f01171fa:	74 17                	je     f0117213 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01171fc:	83 ec 04             	sub    $0x4,%esp
f01171ff:	68 ec af 13 f0       	push   $0xf013afec
f0117204:	68 ee 00 00 00       	push   $0xee
f0117209:	68 d1 af 13 f0       	push   $0xf013afd1
f011720e:	e8 f2 8f fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0117213:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011721a:	eb 44                	jmp    f0117260 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011721c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011721f:	8b 48 78             	mov    0x78(%eax),%ecx
f0117222:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117225:	89 d0                	mov    %edx,%eax
f0117227:	01 c0                	add    %eax,%eax
f0117229:	01 d0                	add    %edx,%eax
f011722b:	c1 e0 03             	shl    $0x3,%eax
f011722e:	01 c8                	add    %ecx,%eax
f0117230:	8b 10                	mov    (%eax),%edx
f0117232:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117235:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011723c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011723f:	8b 48 78             	mov    0x78(%eax),%ecx
f0117242:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117245:	89 d0                	mov    %edx,%eax
f0117247:	01 c0                	add    %eax,%eax
f0117249:	01 d0                	add    %edx,%eax
f011724b:	c1 e0 03             	shl    $0x3,%eax
f011724e:	01 c8                	add    %ecx,%eax
f0117250:	8b 50 08             	mov    0x8(%eax),%edx
f0117253:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117256:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011725d:	ff 45 e4             	incl   -0x1c(%ebp)
f0117260:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117264:	7e b6                	jle    f011721c <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117266:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011726d:	eb 44                	jmp    f01172b3 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011726f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117272:	8b 48 78             	mov    0x78(%eax),%ecx
f0117275:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117278:	89 d0                	mov    %edx,%eax
f011727a:	01 c0                	add    %eax,%eax
f011727c:	01 d0                	add    %edx,%eax
f011727e:	c1 e0 03             	shl    $0x3,%eax
f0117281:	01 c8                	add    %ecx,%eax
f0117283:	8b 10                	mov    (%eax),%edx
f0117285:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117288:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011728f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117292:	8b 48 78             	mov    0x78(%eax),%ecx
f0117295:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117298:	89 d0                	mov    %edx,%eax
f011729a:	01 c0                	add    %eax,%eax
f011729c:	01 d0                	add    %edx,%eax
f011729e:	c1 e0 03             	shl    $0x3,%eax
f01172a1:	01 c8                	add    %ecx,%eax
f01172a3:	8b 50 08             	mov    0x8(%eax),%edx
f01172a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01172a9:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01172b0:	ff 45 e0             	incl   -0x20(%ebp)
f01172b3:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01172b7:	7e b6                	jle    f011726f <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01172b9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01172c0:	eb 44                	jmp    f0117306 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01172c2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172c5:	8b 48 78             	mov    0x78(%eax),%ecx
f01172c8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01172cb:	89 d0                	mov    %edx,%eax
f01172cd:	01 c0                	add    %eax,%eax
f01172cf:	01 d0                	add    %edx,%eax
f01172d1:	c1 e0 03             	shl    $0x3,%eax
f01172d4:	01 c8                	add    %ecx,%eax
f01172d6:	8b 10                	mov    (%eax),%edx
f01172d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01172db:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01172e2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172e5:	8b 48 78             	mov    0x78(%eax),%ecx
f01172e8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01172eb:	89 d0                	mov    %edx,%eax
f01172ed:	01 c0                	add    %eax,%eax
f01172ef:	01 d0                	add    %edx,%eax
f01172f1:	c1 e0 03             	shl    $0x3,%eax
f01172f4:	01 c8                	add    %ecx,%eax
f01172f6:	8b 50 08             	mov    0x8(%eax),%edx
f01172f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01172fc:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117303:	ff 45 dc             	incl   -0x24(%ebp)
f0117306:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f011730a:	7e b6                	jle    f01172c2 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011730c:	e8 92 5b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117311:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117314:	e8 af ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117319:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011731c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011731f:	83 ec 08             	sub    $0x8,%esp
f0117322:	6a 03                	push   $0x3
f0117324:	50                   	push   %eax
f0117325:	e8 c5 3f ff ff       	call   f010b2ef <set_program_priority>
f011732a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011732d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117330:	83 ec 08             	sub    $0x8,%esp
f0117333:	6a 03                	push   $0x3
f0117335:	50                   	push   %eax
f0117336:	e8 b4 3f ff ff       	call   f010b2ef <set_program_priority>
f011733b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011733e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117341:	83 ec 08             	sub    $0x8,%esp
f0117344:	6a 03                	push   $0x3
f0117346:	50                   	push   %eax
f0117347:	e8 a3 3f ff ff       	call   f010b2ef <set_program_priority>
f011734c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011734f:	e8 74 ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117354:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117357:	74 17                	je     f0117370 <test_priority_normal_and_lower+0x2d7>
f0117359:	83 ec 04             	sub    $0x4,%esp
f011735c:	68 38 b0 13 f0       	push   $0xf013b038
f0117361:	68 0a 01 00 00       	push   $0x10a
f0117366:	68 d1 af 13 f0       	push   $0xf013afd1
f011736b:	e8 95 8e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117370:	e8 2e 5b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117375:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117378:	74 17                	je     f0117391 <test_priority_normal_and_lower+0x2f8>
f011737a:	83 ec 04             	sub    $0x4,%esp
f011737d:	68 38 b0 13 f0       	push   $0xf013b038
f0117382:	68 0b 01 00 00       	push   $0x10b
f0117387:	68 d1 af 13 f0       	push   $0xf013afd1
f011738c:	e8 74 8e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117391:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117394:	8b 40 74             	mov    0x74(%eax),%eax
f0117397:	83 f8 14             	cmp    $0x14,%eax
f011739a:	75 16                	jne    f01173b2 <test_priority_normal_and_lower+0x319>
f011739c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011739f:	8b 40 74             	mov    0x74(%eax),%eax
f01173a2:	83 f8 1e             	cmp    $0x1e,%eax
f01173a5:	75 0b                	jne    f01173b2 <test_priority_normal_and_lower+0x319>
f01173a7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01173aa:	8b 40 74             	mov    0x74(%eax),%eax
f01173ad:	83 f8 28             	cmp    $0x28,%eax
f01173b0:	74 17                	je     f01173c9 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01173b2:	83 ec 04             	sub    $0x4,%esp
f01173b5:	68 64 b0 13 f0       	push   $0xf013b064
f01173ba:	68 0e 01 00 00       	push   $0x10e
f01173bf:	68 d1 af 13 f0       	push   $0xf013afd1
f01173c4:	e8 3c 8e fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01173c9:	e8 d5 5a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01173ce:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173d1:	e8 f2 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01173d6:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01173d9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01173dc:	83 ec 08             	sub    $0x8,%esp
f01173df:	6a 02                	push   $0x2
f01173e1:	50                   	push   %eax
f01173e2:	e8 08 3f ff ff       	call   f010b2ef <set_program_priority>
f01173e7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01173ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01173ed:	83 ec 08             	sub    $0x8,%esp
f01173f0:	6a 02                	push   $0x2
f01173f2:	50                   	push   %eax
f01173f3:	e8 f7 3e ff ff       	call   f010b2ef <set_program_priority>
f01173f8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01173fb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01173fe:	83 ec 08             	sub    $0x8,%esp
f0117401:	6a 02                	push   $0x2
f0117403:	50                   	push   %eax
f0117404:	e8 e6 3e ff ff       	call   f010b2ef <set_program_priority>
f0117409:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011740c:	e8 b7 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117411:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117414:	74 17                	je     f011742d <test_priority_normal_and_lower+0x394>
f0117416:	83 ec 04             	sub    $0x4,%esp
f0117419:	68 38 b0 13 f0       	push   $0xf013b038
f011741e:	68 18 01 00 00       	push   $0x118
f0117423:	68 d1 af 13 f0       	push   $0xf013afd1
f0117428:	e8 d8 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011742d:	e8 71 5a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117432:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117435:	74 21                	je     f0117458 <test_priority_normal_and_lower+0x3bf>
f0117437:	e8 67 5a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011743c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011743f:	29 c2                	sub    %eax,%edx
f0117441:	89 d0                	mov    %edx,%eax
f0117443:	50                   	push   %eax
f0117444:	68 b8 b0 13 f0       	push   $0xf013b0b8
f0117449:	68 19 01 00 00       	push   $0x119
f011744e:	68 d1 af 13 f0       	push   $0xf013afd1
f0117453:	e8 ad 8d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117458:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011745b:	8b 40 74             	mov    0x74(%eax),%eax
f011745e:	83 f8 0a             	cmp    $0xa,%eax
f0117461:	75 16                	jne    f0117479 <test_priority_normal_and_lower+0x3e0>
f0117463:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117466:	8b 40 74             	mov    0x74(%eax),%eax
f0117469:	83 f8 0f             	cmp    $0xf,%eax
f011746c:	75 0b                	jne    f0117479 <test_priority_normal_and_lower+0x3e0>
f011746e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117471:	8b 40 74             	mov    0x74(%eax),%eax
f0117474:	83 f8 14             	cmp    $0x14,%eax
f0117477:	74 17                	je     f0117490 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117479:	83 ec 04             	sub    $0x4,%esp
f011747c:	68 e8 b0 13 f0       	push   $0xf013b0e8
f0117481:	68 1c 01 00 00       	push   $0x11c
f0117486:	68 d1 af 13 f0       	push   $0xf013afd1
f011748b:	e8 75 8d fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117490:	e8 0e 5a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117495:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117498:	e8 2b c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011749d:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01174a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174a3:	83 ec 08             	sub    $0x8,%esp
f01174a6:	6a 02                	push   $0x2
f01174a8:	50                   	push   %eax
f01174a9:	e8 41 3e ff ff       	call   f010b2ef <set_program_priority>
f01174ae:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01174b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01174b4:	83 ec 08             	sub    $0x8,%esp
f01174b7:	6a 02                	push   $0x2
f01174b9:	50                   	push   %eax
f01174ba:	e8 30 3e ff ff       	call   f010b2ef <set_program_priority>
f01174bf:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01174c2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01174c5:	83 ec 08             	sub    $0x8,%esp
f01174c8:	6a 02                	push   $0x2
f01174ca:	50                   	push   %eax
f01174cb:	e8 1f 3e ff ff       	call   f010b2ef <set_program_priority>
f01174d0:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01174d3:	e8 f0 c8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01174d8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01174db:	74 17                	je     f01174f4 <test_priority_normal_and_lower+0x45b>
f01174dd:	83 ec 04             	sub    $0x4,%esp
f01174e0:	68 38 b0 13 f0       	push   $0xf013b038
f01174e5:	68 26 01 00 00       	push   $0x126
f01174ea:	68 d1 af 13 f0       	push   $0xf013afd1
f01174ef:	e8 11 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01174f4:	e8 aa 59 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01174f9:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01174fc:	74 21                	je     f011751f <test_priority_normal_and_lower+0x486>
f01174fe:	e8 a0 59 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117503:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117506:	29 c2                	sub    %eax,%edx
f0117508:	89 d0                	mov    %edx,%eax
f011750a:	50                   	push   %eax
f011750b:	68 b8 b0 13 f0       	push   $0xf013b0b8
f0117510:	68 27 01 00 00       	push   $0x127
f0117515:	68 d1 af 13 f0       	push   $0xf013afd1
f011751a:	e8 e6 8c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011751f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117522:	8b 40 74             	mov    0x74(%eax),%eax
f0117525:	83 f8 0a             	cmp    $0xa,%eax
f0117528:	75 16                	jne    f0117540 <test_priority_normal_and_lower+0x4a7>
f011752a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011752d:	8b 40 74             	mov    0x74(%eax),%eax
f0117530:	83 f8 0f             	cmp    $0xf,%eax
f0117533:	75 0b                	jne    f0117540 <test_priority_normal_and_lower+0x4a7>
f0117535:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117538:	8b 40 74             	mov    0x74(%eax),%eax
f011753b:	83 f8 0a             	cmp    $0xa,%eax
f011753e:	74 17                	je     f0117557 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117540:	83 ec 04             	sub    $0x4,%esp
f0117543:	68 e8 b0 13 f0       	push   $0xf013b0e8
f0117548:	68 2a 01 00 00       	push   $0x12a
f011754d:	68 d1 af 13 f0       	push   $0xf013afd1
f0117552:	e8 ae 8c fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f0117557:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011755e:	eb 7a                	jmp    f01175da <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117563:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011756a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011756d:	8b 58 78             	mov    0x78(%eax),%ebx
f0117570:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117573:	89 d0                	mov    %edx,%eax
f0117575:	01 c0                	add    %eax,%eax
f0117577:	01 d0                	add    %edx,%eax
f0117579:	c1 e0 03             	shl    $0x3,%eax
f011757c:	01 d8                	add    %ebx,%eax
f011757e:	8b 00                	mov    (%eax),%eax
f0117580:	39 c1                	cmp    %eax,%ecx
f0117582:	74 17                	je     f011759b <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0117584:	83 ec 04             	sub    $0x4,%esp
f0117587:	68 a8 b1 13 f0       	push   $0xf013b1a8
f011758c:	68 2f 01 00 00       	push   $0x12f
f0117591:	68 d1 af 13 f0       	push   $0xf013afd1
f0117596:	e8 6a 8c fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011759b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011759e:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01175a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01175a8:	8b 58 78             	mov    0x78(%eax),%ebx
f01175ab:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01175ae:	89 d0                	mov    %edx,%eax
f01175b0:	01 c0                	add    %eax,%eax
f01175b2:	01 d0                	add    %edx,%eax
f01175b4:	c1 e0 03             	shl    $0x3,%eax
f01175b7:	01 d8                	add    %ebx,%eax
f01175b9:	8b 40 08             	mov    0x8(%eax),%eax
f01175bc:	39 c1                	cmp    %eax,%ecx
f01175be:	74 17                	je     f01175d7 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f01175c0:	83 ec 04             	sub    $0x4,%esp
f01175c3:	68 a8 b1 13 f0       	push   $0xf013b1a8
f01175c8:	68 32 01 00 00       	push   $0x132
f01175cd:	68 d1 af 13 f0       	push   $0xf013afd1
f01175d2:	e8 2e 8c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01175d7:	ff 45 d8             	incl   -0x28(%ebp)
f01175da:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01175de:	7e 80                	jle    f0117560 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01175e0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01175e7:	eb 7a                	jmp    f0117663 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01175e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01175ec:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01175f3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175f6:	8b 58 78             	mov    0x78(%eax),%ebx
f01175f9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01175fc:	89 d0                	mov    %edx,%eax
f01175fe:	01 c0                	add    %eax,%eax
f0117600:	01 d0                	add    %edx,%eax
f0117602:	c1 e0 03             	shl    $0x3,%eax
f0117605:	01 d8                	add    %ebx,%eax
f0117607:	8b 00                	mov    (%eax),%eax
f0117609:	39 c1                	cmp    %eax,%ecx
f011760b:	74 17                	je     f0117624 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f011760d:	83 ec 04             	sub    $0x4,%esp
f0117610:	68 a8 b1 13 f0       	push   $0xf013b1a8
f0117615:	68 38 01 00 00       	push   $0x138
f011761a:	68 d1 af 13 f0       	push   $0xf013afd1
f011761f:	e8 e1 8b fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117624:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117627:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011762e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117631:	8b 58 78             	mov    0x78(%eax),%ebx
f0117634:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117637:	89 d0                	mov    %edx,%eax
f0117639:	01 c0                	add    %eax,%eax
f011763b:	01 d0                	add    %edx,%eax
f011763d:	c1 e0 03             	shl    $0x3,%eax
f0117640:	01 d8                	add    %ebx,%eax
f0117642:	8b 40 08             	mov    0x8(%eax),%eax
f0117645:	39 c1                	cmp    %eax,%ecx
f0117647:	74 17                	je     f0117660 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0117649:	83 ec 04             	sub    $0x4,%esp
f011764c:	68 a8 b1 13 f0       	push   $0xf013b1a8
f0117651:	68 3b 01 00 00       	push   $0x13b
f0117656:	68 d1 af 13 f0       	push   $0xf013afd1
f011765b:	e8 a5 8b fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117660:	ff 45 d4             	incl   -0x2c(%ebp)
f0117663:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117667:	7e 80                	jle    f01175e9 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117669:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117670:	eb 7a                	jmp    f01176ec <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117672:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117675:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011767c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011767f:	8b 58 78             	mov    0x78(%eax),%ebx
f0117682:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117685:	89 d0                	mov    %edx,%eax
f0117687:	01 c0                	add    %eax,%eax
f0117689:	01 d0                	add    %edx,%eax
f011768b:	c1 e0 03             	shl    $0x3,%eax
f011768e:	01 d8                	add    %ebx,%eax
f0117690:	8b 00                	mov    (%eax),%eax
f0117692:	39 c1                	cmp    %eax,%ecx
f0117694:	74 17                	je     f01176ad <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117696:	83 ec 04             	sub    $0x4,%esp
f0117699:	68 a8 b1 13 f0       	push   $0xf013b1a8
f011769e:	68 41 01 00 00       	push   $0x141
f01176a3:	68 d1 af 13 f0       	push   $0xf013afd1
f01176a8:	e8 58 8b fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01176ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01176b0:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01176b7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01176ba:	8b 58 78             	mov    0x78(%eax),%ebx
f01176bd:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01176c0:	89 d0                	mov    %edx,%eax
f01176c2:	01 c0                	add    %eax,%eax
f01176c4:	01 d0                	add    %edx,%eax
f01176c6:	c1 e0 03             	shl    $0x3,%eax
f01176c9:	01 d8                	add    %ebx,%eax
f01176cb:	8b 40 08             	mov    0x8(%eax),%eax
f01176ce:	39 c1                	cmp    %eax,%ecx
f01176d0:	74 17                	je     f01176e9 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f01176d2:	83 ec 04             	sub    $0x4,%esp
f01176d5:	68 a8 b1 13 f0       	push   $0xf013b1a8
f01176da:	68 44 01 00 00       	push   $0x144
f01176df:	68 d1 af 13 f0       	push   $0xf013afd1
f01176e4:	e8 1c 8b fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01176e9:	ff 45 d0             	incl   -0x30(%ebp)
f01176ec:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01176f0:	7e 80                	jle    f0117672 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01176f2:	e8 ac 57 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01176f7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176fa:	e8 c9 c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01176ff:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117702:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117705:	83 ec 08             	sub    $0x8,%esp
f0117708:	6a 01                	push   $0x1
f011770a:	50                   	push   %eax
f011770b:	e8 df 3b ff ff       	call   f010b2ef <set_program_priority>
f0117710:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117713:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117716:	83 ec 08             	sub    $0x8,%esp
f0117719:	6a 01                	push   $0x1
f011771b:	50                   	push   %eax
f011771c:	e8 ce 3b ff ff       	call   f010b2ef <set_program_priority>
f0117721:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117724:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117727:	83 ec 08             	sub    $0x8,%esp
f011772a:	6a 01                	push   $0x1
f011772c:	50                   	push   %eax
f011772d:	e8 bd 3b ff ff       	call   f010b2ef <set_program_priority>
f0117732:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117735:	e8 8e c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011773a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011773d:	74 17                	je     f0117756 <test_priority_normal_and_lower+0x6bd>
f011773f:	83 ec 04             	sub    $0x4,%esp
f0117742:	68 38 b0 13 f0       	push   $0xf013b038
f0117747:	68 4d 01 00 00       	push   $0x14d
f011774c:	68 d1 af 13 f0       	push   $0xf013afd1
f0117751:	e8 af 8a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117756:	e8 48 57 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011775b:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011775e:	83 f8 0d             	cmp    $0xd,%eax
f0117761:	74 17                	je     f011777a <test_priority_normal_and_lower+0x6e1>
f0117763:	83 ec 04             	sub    $0x4,%esp
f0117766:	68 44 b3 13 f0       	push   $0xf013b344
f011776b:	68 4e 01 00 00       	push   $0x14e
f0117770:	68 d1 af 13 f0       	push   $0xf013afd1
f0117775:	e8 8b 8a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011777a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011777d:	8b 40 74             	mov    0x74(%eax),%eax
f0117780:	83 f8 05             	cmp    $0x5,%eax
f0117783:	75 16                	jne    f011779b <test_priority_normal_and_lower+0x702>
f0117785:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117788:	8b 40 74             	mov    0x74(%eax),%eax
f011778b:	83 f8 07             	cmp    $0x7,%eax
f011778e:	75 0b                	jne    f011779b <test_priority_normal_and_lower+0x702>
f0117790:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117793:	8b 40 74             	mov    0x74(%eax),%eax
f0117796:	83 f8 05             	cmp    $0x5,%eax
f0117799:	74 17                	je     f01177b2 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f011779b:	83 ec 04             	sub    $0x4,%esp
f011779e:	68 8c b3 13 f0       	push   $0xf013b38c
f01177a3:	68 51 01 00 00       	push   $0x151
f01177a8:	68 d1 af 13 f0       	push   $0xf013afd1
f01177ad:	e8 53 8a fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f01177b2:	e8 ec 56 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01177b7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177ba:	e8 09 c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01177bf:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01177c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177c5:	83 ec 08             	sub    $0x8,%esp
f01177c8:	6a 01                	push   $0x1
f01177ca:	50                   	push   %eax
f01177cb:	e8 1f 3b ff ff       	call   f010b2ef <set_program_priority>
f01177d0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01177d3:	e8 f0 c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01177d8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01177db:	74 17                	je     f01177f4 <test_priority_normal_and_lower+0x75b>
f01177dd:	83 ec 04             	sub    $0x4,%esp
f01177e0:	68 38 b0 13 f0       	push   $0xf013b038
f01177e5:	68 57 01 00 00       	push   $0x157
f01177ea:	68 d1 af 13 f0       	push   $0xf013afd1
f01177ef:	e8 11 8a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01177f4:	e8 aa 56 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01177f9:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01177fc:	83 f8 03             	cmp    $0x3,%eax
f01177ff:	74 17                	je     f0117818 <test_priority_normal_and_lower+0x77f>
f0117801:	83 ec 04             	sub    $0x4,%esp
f0117804:	68 38 b0 13 f0       	push   $0xf013b038
f0117809:	68 58 01 00 00       	push   $0x158
f011780e:	68 d1 af 13 f0       	push   $0xf013afd1
f0117813:	e8 ed 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117818:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011781b:	8b 40 74             	mov    0x74(%eax),%eax
f011781e:	83 f8 02             	cmp    $0x2,%eax
f0117821:	75 16                	jne    f0117839 <test_priority_normal_and_lower+0x7a0>
f0117823:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117826:	8b 40 74             	mov    0x74(%eax),%eax
f0117829:	83 f8 07             	cmp    $0x7,%eax
f011782c:	75 0b                	jne    f0117839 <test_priority_normal_and_lower+0x7a0>
f011782e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117831:	8b 40 74             	mov    0x74(%eax),%eax
f0117834:	83 f8 05             	cmp    $0x5,%eax
f0117837:	74 17                	je     f0117850 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117839:	83 ec 04             	sub    $0x4,%esp
f011783c:	68 6c b1 13 f0       	push   $0xf013b16c
f0117841:	68 5b 01 00 00       	push   $0x15b
f0117846:	68 d1 af 13 f0       	push   $0xf013afd1
f011784b:	e8 b5 89 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f0117850:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117857:	e9 80 00 00 00       	jmp    f01178dc <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011785c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011785f:	83 c0 08             	add    $0x8,%eax
f0117862:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117869:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011786c:	8b 58 78             	mov    0x78(%eax),%ebx
f011786f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117872:	89 d0                	mov    %edx,%eax
f0117874:	01 c0                	add    %eax,%eax
f0117876:	01 d0                	add    %edx,%eax
f0117878:	c1 e0 03             	shl    $0x3,%eax
f011787b:	01 d8                	add    %ebx,%eax
f011787d:	8b 00                	mov    (%eax),%eax
f011787f:	39 c1                	cmp    %eax,%ecx
f0117881:	74 17                	je     f011789a <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117883:	83 ec 04             	sub    $0x4,%esp
f0117886:	68 bc b3 13 f0       	push   $0xf013b3bc
f011788b:	68 60 01 00 00       	push   $0x160
f0117890:	68 d1 af 13 f0       	push   $0xf013afd1
f0117895:	e8 6b 89 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011789a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011789d:	83 c0 08             	add    $0x8,%eax
f01178a0:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01178a7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178aa:	8b 58 78             	mov    0x78(%eax),%ebx
f01178ad:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01178b0:	89 d0                	mov    %edx,%eax
f01178b2:	01 c0                	add    %eax,%eax
f01178b4:	01 d0                	add    %edx,%eax
f01178b6:	c1 e0 03             	shl    $0x3,%eax
f01178b9:	01 d8                	add    %ebx,%eax
f01178bb:	8b 40 08             	mov    0x8(%eax),%eax
f01178be:	39 c1                	cmp    %eax,%ecx
f01178c0:	74 17                	je     f01178d9 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01178c2:	83 ec 04             	sub    $0x4,%esp
f01178c5:	68 bc b3 13 f0       	push   $0xf013b3bc
f01178ca:	68 63 01 00 00       	push   $0x163
f01178cf:	68 d1 af 13 f0       	push   $0xf013afd1
f01178d4:	e8 2c 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01178d9:	ff 45 cc             	incl   -0x34(%ebp)
f01178dc:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01178e0:	0f 8e 76 ff ff ff    	jle    f011785c <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01178e6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01178ed:	e9 80 00 00 00       	jmp    f0117972 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01178f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01178f5:	83 c0 03             	add    $0x3,%eax
f01178f8:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01178ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117902:	8b 58 78             	mov    0x78(%eax),%ebx
f0117905:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117908:	89 d0                	mov    %edx,%eax
f011790a:	01 c0                	add    %eax,%eax
f011790c:	01 d0                	add    %edx,%eax
f011790e:	c1 e0 03             	shl    $0x3,%eax
f0117911:	01 d8                	add    %ebx,%eax
f0117913:	8b 00                	mov    (%eax),%eax
f0117915:	39 c1                	cmp    %eax,%ecx
f0117917:	74 17                	je     f0117930 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117919:	ff 75 c8             	pushl  -0x38(%ebp)
f011791c:	68 28 b4 13 f0       	push   $0xf013b428
f0117921:	68 69 01 00 00       	push   $0x169
f0117926:	68 d1 af 13 f0       	push   $0xf013afd1
f011792b:	e8 d5 88 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117930:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117933:	83 c0 03             	add    $0x3,%eax
f0117936:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011793d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117940:	8b 58 78             	mov    0x78(%eax),%ebx
f0117943:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117946:	89 d0                	mov    %edx,%eax
f0117948:	01 c0                	add    %eax,%eax
f011794a:	01 d0                	add    %edx,%eax
f011794c:	c1 e0 03             	shl    $0x3,%eax
f011794f:	01 d8                	add    %ebx,%eax
f0117951:	8b 40 08             	mov    0x8(%eax),%eax
f0117954:	39 c1                	cmp    %eax,%ecx
f0117956:	74 17                	je     f011796f <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117958:	83 ec 04             	sub    $0x4,%esp
f011795b:	68 bc b3 13 f0       	push   $0xf013b3bc
f0117960:	68 6c 01 00 00       	push   $0x16c
f0117965:	68 d1 af 13 f0       	push   $0xf013afd1
f011796a:	e8 96 88 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011796f:	ff 45 c8             	incl   -0x38(%ebp)
f0117972:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117976:	0f 8e 76 ff ff ff    	jle    f01178f2 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011797c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117983:	e9 80 00 00 00       	jmp    f0117a08 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117988:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011798b:	83 c0 05             	add    $0x5,%eax
f011798e:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117995:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117998:	8b 58 78             	mov    0x78(%eax),%ebx
f011799b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011799e:	89 d0                	mov    %edx,%eax
f01179a0:	01 c0                	add    %eax,%eax
f01179a2:	01 d0                	add    %edx,%eax
f01179a4:	c1 e0 03             	shl    $0x3,%eax
f01179a7:	01 d8                	add    %ebx,%eax
f01179a9:	8b 00                	mov    (%eax),%eax
f01179ab:	39 c1                	cmp    %eax,%ecx
f01179ad:	74 17                	je     f01179c6 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01179af:	83 ec 04             	sub    $0x4,%esp
f01179b2:	68 bc b3 13 f0       	push   $0xf013b3bc
f01179b7:	68 72 01 00 00       	push   $0x172
f01179bc:	68 d1 af 13 f0       	push   $0xf013afd1
f01179c1:	e8 3f 88 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01179c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01179c9:	83 c0 05             	add    $0x5,%eax
f01179cc:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01179d3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01179d6:	8b 58 78             	mov    0x78(%eax),%ebx
f01179d9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01179dc:	89 d0                	mov    %edx,%eax
f01179de:	01 c0                	add    %eax,%eax
f01179e0:	01 d0                	add    %edx,%eax
f01179e2:	c1 e0 03             	shl    $0x3,%eax
f01179e5:	01 d8                	add    %ebx,%eax
f01179e7:	8b 40 08             	mov    0x8(%eax),%eax
f01179ea:	39 c1                	cmp    %eax,%ecx
f01179ec:	74 17                	je     f0117a05 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01179ee:	83 ec 04             	sub    $0x4,%esp
f01179f1:	68 bc b3 13 f0       	push   $0xf013b3bc
f01179f6:	68 75 01 00 00       	push   $0x175
f01179fb:	68 d1 af 13 f0       	push   $0xf013afd1
f0117a00:	e8 00 88 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117a05:	ff 45 c4             	incl   -0x3c(%ebp)
f0117a08:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117a0c:	0f 8e 76 ff ff ff    	jle    f0117988 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117a12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a15:	83 ec 08             	sub    $0x8,%esp
f0117a18:	6a 05                	push   $0x5
f0117a1a:	50                   	push   %eax
f0117a1b:	e8 cf 38 ff ff       	call   f010b2ef <set_program_priority>
f0117a20:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117a23:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a26:	83 ec 08             	sub    $0x8,%esp
f0117a29:	6a 05                	push   $0x5
f0117a2b:	50                   	push   %eax
f0117a2c:	e8 be 38 ff ff       	call   f010b2ef <set_program_priority>
f0117a31:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117a34:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117a3b:	75 6e 61 
f0117a3e:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117a45:	6c 00 00 
f0117a48:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117a4e:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117a53:	b8 00 00 00 00       	mov    $0x0,%eax
f0117a58:	89 d7                	mov    %edx,%edi
f0117a5a:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117a5c:	83 ec 0c             	sub    $0xc,%esp
f0117a5f:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117a65:	50                   	push   %eax
f0117a66:	e8 05 93 fe ff       	call   f0100d70 <execute_command>
f0117a6b:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117a6e:	eb 10                	jmp    f0117a80 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117a70:	83 ec 0c             	sub    $0xc,%esp
f0117a73:	68 98 b4 13 f0       	push   $0xf013b498
f0117a78:	e8 91 92 fe ff       	call   f0100d0e <cprintf>
f0117a7d:	83 c4 10             	add    $0x10,%esp
	}
}
f0117a80:	90                   	nop
f0117a81:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117a84:	5b                   	pop    %ebx
f0117a85:	5e                   	pop    %esi
f0117a86:	5f                   	pop    %edi
f0117a87:	5d                   	pop    %ebp
f0117a88:	c3                   	ret    

f0117a89 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117a89:	55                   	push   %ebp
f0117a8a:	89 e5                	mov    %esp,%ebp
f0117a8c:	a1 5c ed 88 f0       	mov    0xf088ed5c,%eax
f0117a91:	83 f8 03             	cmp    $0x3,%eax
f0117a94:	75 04                	jne    f0117a9a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117a96:	b0 01                	mov    $0x1,%al
f0117a98:	eb 02                	jmp    f0117a9c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117a9a:	b0 00                	mov    $0x0,%al
f0117a9c:	5d                   	pop    %ebp
f0117a9d:	c3                   	ret    

f0117a9e <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117a9e:	55                   	push   %ebp
f0117a9f:	89 e5                	mov    %esp,%ebp
f0117aa1:	57                   	push   %edi
f0117aa2:	53                   	push   %ebx
f0117aa3:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117aa9:	83 ec 0c             	sub    $0xc,%esp
f0117aac:	68 9c b5 13 f0       	push   $0xf013b59c
f0117ab1:	e8 58 92 fe ff       	call   f0100d0e <cprintf>
f0117ab6:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117ab9:	83 ec 0c             	sub    $0xc,%esp
f0117abc:	68 cc b5 13 f0       	push   $0xf013b5cc
f0117ac1:	e8 48 92 fe ff       	call   f0100d0e <cprintf>
f0117ac6:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117ac9:	83 ec 0c             	sub    $0xc,%esp
f0117acc:	68 9c b5 13 f0       	push   $0xf013b59c
f0117ad1:	e8 38 92 fe ff       	call   f0100d0e <cprintf>
f0117ad6:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117ad9:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117add:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117ae1:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117ae7:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117aed:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117af4:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117afb:	e8 a3 53 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117b00:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117b03:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117b09:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117b0e:	b8 00 00 00 00       	mov    $0x0,%eax
f0117b13:	89 d7                	mov    %edx,%edi
f0117b15:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117b17:	e8 87 53 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117b1c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117b1f:	e8 a4 c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117b24:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117b27:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117b2e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117b31:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b36:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117b39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b41:	f7 75 d4             	divl   -0x2c(%ebp)
f0117b44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b47:	29 d0                	sub    %edx,%eax
f0117b49:	89 c1                	mov    %eax,%ecx
f0117b4b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117b52:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117b57:	0f b6 d0             	movzbl %al,%edx
f0117b5a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117b5d:	01 d0                	add    %edx,%eax
f0117b5f:	48                   	dec    %eax
f0117b60:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117b63:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117b66:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b6b:	f7 75 cc             	divl   -0x34(%ebp)
f0117b6e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117b71:	29 d0                	sub    %edx,%eax
f0117b73:	01 c1                	add    %eax,%ecx
f0117b75:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117b7c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117b81:	0f b6 c0             	movzbl %al,%eax
f0117b84:	c1 e0 04             	shl    $0x4,%eax
f0117b87:	89 c2                	mov    %eax,%edx
f0117b89:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117b8c:	01 d0                	add    %edx,%eax
f0117b8e:	48                   	dec    %eax
f0117b8f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117b92:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117b95:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b9a:	f7 75 c4             	divl   -0x3c(%ebp)
f0117b9d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117ba0:	29 d0                	sub    %edx,%eax
f0117ba2:	01 c8                	add    %ecx,%eax
f0117ba4:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117ba9:	29 c2                	sub    %eax,%edx
f0117bab:	89 d0                	mov    %edx,%eax
f0117bad:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117bb0:	83 ec 0c             	sub    $0xc,%esp
f0117bb3:	ff 75 bc             	pushl  -0x44(%ebp)
f0117bb6:	e8 d1 ff fe ff       	call   f0107b8c <kmalloc>
f0117bbb:	83 c4 10             	add    $0x10,%esp
f0117bbe:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117bc4:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117bca:	85 c0                	test   %eax,%eax
f0117bcc:	74 14                	je     f0117be2 <test_kmalloc+0x144>
f0117bce:	83 ec 04             	sub    $0x4,%esp
f0117bd1:	68 28 b6 13 f0       	push   $0xf013b628
f0117bd6:	6a 40                	push   $0x40
f0117bd8:	68 5a b6 13 f0       	push   $0xf013b65a
f0117bdd:	e8 23 86 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117be2:	e8 e1 c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117be7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117bea:	74 14                	je     f0117c00 <test_kmalloc+0x162>
f0117bec:	83 ec 04             	sub    $0x4,%esp
f0117bef:	68 74 b6 13 f0       	push   $0xf013b674
f0117bf4:	6a 41                	push   $0x41
f0117bf6:	68 5a b6 13 f0       	push   $0xf013b65a
f0117bfb:	e8 05 86 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117c00:	e8 9e 52 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117c05:	89 c2                	mov    %eax,%edx
f0117c07:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c0a:	39 c2                	cmp    %eax,%edx
f0117c0c:	74 14                	je     f0117c22 <test_kmalloc+0x184>
f0117c0e:	83 ec 04             	sub    $0x4,%esp
f0117c11:	68 dc b6 13 f0       	push   $0xf013b6dc
f0117c16:	6a 42                	push   $0x42
f0117c18:	68 5a b6 13 f0       	push   $0xf013b65a
f0117c1d:	e8 e3 85 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0117c22:	83 ec 0c             	sub    $0xc,%esp
f0117c25:	68 1c b7 13 f0       	push   $0xf013b71c
f0117c2a:	e8 df 90 fe ff       	call   f0100d0e <cprintf>
f0117c2f:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117c32:	e8 6c 52 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117c37:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c3a:	e8 89 c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c3f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117c42:	83 ec 0c             	sub    $0xc,%esp
f0117c45:	68 00 fc 1f 00       	push   $0x1ffc00
f0117c4a:	e8 3d ff fe ff       	call   f0107b8c <kmalloc>
f0117c4f:	83 c4 10             	add    $0x10,%esp
f0117c52:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117c58:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117c5e:	89 c1                	mov    %eax,%ecx
f0117c60:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117c67:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c6f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117c72:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c75:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c7a:	f7 75 b8             	divl   -0x48(%ebp)
f0117c7d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c80:	29 d0                	sub    %edx,%eax
f0117c82:	89 c3                	mov    %eax,%ebx
f0117c84:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117c8b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117c90:	0f b6 d0             	movzbl %al,%edx
f0117c93:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c96:	01 d0                	add    %edx,%eax
f0117c98:	48                   	dec    %eax
f0117c99:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117c9c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117c9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ca4:	f7 75 b0             	divl   -0x50(%ebp)
f0117ca7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117caa:	29 d0                	sub    %edx,%eax
f0117cac:	01 c3                	add    %eax,%ebx
f0117cae:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117cb5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117cba:	0f b6 c0             	movzbl %al,%eax
f0117cbd:	c1 e0 04             	shl    $0x4,%eax
f0117cc0:	89 c2                	mov    %eax,%edx
f0117cc2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117cc5:	01 d0                	add    %edx,%eax
f0117cc7:	48                   	dec    %eax
f0117cc8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117ccb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117cce:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cd3:	f7 75 a8             	divl   -0x58(%ebp)
f0117cd6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117cd9:	29 d0                	sub    %edx,%eax
f0117cdb:	01 d8                	add    %ebx,%eax
f0117cdd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117ce2:	39 c1                	cmp    %eax,%ecx
f0117ce4:	74 14                	je     f0117cfa <test_kmalloc+0x25c>
f0117ce6:	83 ec 04             	sub    $0x4,%esp
f0117ce9:	68 40 b7 13 f0       	push   $0xf013b740
f0117cee:	6a 49                	push   $0x49
f0117cf0:	68 5a b6 13 f0       	push   $0xf013b65a
f0117cf5:	e8 0b 85 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117cfa:	e8 c9 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117cff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117d02:	74 14                	je     f0117d18 <test_kmalloc+0x27a>
f0117d04:	83 ec 04             	sub    $0x4,%esp
f0117d07:	68 74 b6 13 f0       	push   $0xf013b674
f0117d0c:	6a 4a                	push   $0x4a
f0117d0e:	68 5a b6 13 f0       	push   $0xf013b65a
f0117d13:	e8 ed 84 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d18:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117d1b:	e8 83 51 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117d20:	29 c3                	sub    %eax,%ebx
f0117d22:	89 d8                	mov    %ebx,%eax
f0117d24:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117d29:	74 14                	je     f0117d3f <test_kmalloc+0x2a1>
f0117d2b:	83 ec 04             	sub    $0x4,%esp
f0117d2e:	68 dc b6 13 f0       	push   $0xf013b6dc
f0117d33:	6a 4b                	push   $0x4b
f0117d35:	68 5a b6 13 f0       	push   $0xf013b65a
f0117d3a:	e8 c6 84 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117d3f:	e8 5f 51 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117d44:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d47:	e8 7c c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d4c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117d4f:	83 ec 0c             	sub    $0xc,%esp
f0117d52:	68 00 fc 1f 00       	push   $0x1ffc00
f0117d57:	e8 30 fe fe ff       	call   f0107b8c <kmalloc>
f0117d5c:	83 c4 10             	add    $0x10,%esp
f0117d5f:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117d65:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117d6b:	89 c1                	mov    %eax,%ecx
f0117d6d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117d74:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117d77:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117d7c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117d7f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117d82:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d87:	f7 75 a0             	divl   -0x60(%ebp)
f0117d8a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117d8d:	29 d0                	sub    %edx,%eax
f0117d8f:	89 c3                	mov    %eax,%ebx
f0117d91:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117d98:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117d9d:	0f b6 d0             	movzbl %al,%edx
f0117da0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117da3:	01 d0                	add    %edx,%eax
f0117da5:	48                   	dec    %eax
f0117da6:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117da9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117dac:	ba 00 00 00 00       	mov    $0x0,%edx
f0117db1:	f7 75 98             	divl   -0x68(%ebp)
f0117db4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117db7:	29 d0                	sub    %edx,%eax
f0117db9:	01 c3                	add    %eax,%ebx
f0117dbb:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117dc2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117dc7:	0f b6 c0             	movzbl %al,%eax
f0117dca:	c1 e0 04             	shl    $0x4,%eax
f0117dcd:	89 c2                	mov    %eax,%edx
f0117dcf:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117dd2:	01 d0                	add    %edx,%eax
f0117dd4:	48                   	dec    %eax
f0117dd5:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117dd8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117ddb:	ba 00 00 00 00       	mov    $0x0,%edx
f0117de0:	f7 75 90             	divl   -0x70(%ebp)
f0117de3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117de6:	29 d0                	sub    %edx,%eax
f0117de8:	01 d8                	add    %ebx,%eax
f0117dea:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117def:	39 c1                	cmp    %eax,%ecx
f0117df1:	74 14                	je     f0117e07 <test_kmalloc+0x369>
f0117df3:	83 ec 04             	sub    $0x4,%esp
f0117df6:	68 40 b7 13 f0       	push   $0xf013b740
f0117dfb:	6a 51                	push   $0x51
f0117dfd:	68 5a b6 13 f0       	push   $0xf013b65a
f0117e02:	e8 fe 83 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117e07:	e8 bc bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117e0f:	74 14                	je     f0117e25 <test_kmalloc+0x387>
f0117e11:	83 ec 04             	sub    $0x4,%esp
f0117e14:	68 74 b6 13 f0       	push   $0xf013b674
f0117e19:	6a 52                	push   $0x52
f0117e1b:	68 5a b6 13 f0       	push   $0xf013b65a
f0117e20:	e8 e0 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117e25:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117e28:	e8 76 50 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117e2d:	29 c3                	sub    %eax,%ebx
f0117e2f:	89 d8                	mov    %ebx,%eax
f0117e31:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117e36:	74 14                	je     f0117e4c <test_kmalloc+0x3ae>
f0117e38:	83 ec 04             	sub    $0x4,%esp
f0117e3b:	68 dc b6 13 f0       	push   $0xf013b6dc
f0117e40:	6a 53                	push   $0x53
f0117e42:	68 5a b6 13 f0       	push   $0xf013b65a
f0117e47:	e8 b9 83 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117e4c:	e8 52 50 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117e51:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117e54:	e8 6f bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e59:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117e5c:	83 ec 0c             	sub    $0xc,%esp
f0117e5f:	68 00 08 00 00       	push   $0x800
f0117e64:	e8 23 fd fe ff       	call   f0107b8c <kmalloc>
f0117e69:	83 c4 10             	add    $0x10,%esp
f0117e6c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117e72:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117e78:	89 c1                	mov    %eax,%ecx
f0117e7a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117e81:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117e84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e89:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117e8c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117e8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e94:	f7 75 88             	divl   -0x78(%ebp)
f0117e97:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117e9a:	29 d0                	sub    %edx,%eax
f0117e9c:	89 c3                	mov    %eax,%ebx
f0117e9e:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117ea5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117eaa:	0f b6 d0             	movzbl %al,%edx
f0117ead:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117eb0:	01 d0                	add    %edx,%eax
f0117eb2:	48                   	dec    %eax
f0117eb3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117eb9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117ebf:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ec4:	f7 75 80             	divl   -0x80(%ebp)
f0117ec7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117ecd:	29 d0                	sub    %edx,%eax
f0117ecf:	01 c3                	add    %eax,%ebx
f0117ed1:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117ed8:	10 00 00 
f0117edb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117ee0:	0f b6 c0             	movzbl %al,%eax
f0117ee3:	c1 e0 04             	shl    $0x4,%eax
f0117ee6:	89 c2                	mov    %eax,%edx
f0117ee8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117eee:	01 d0                	add    %edx,%eax
f0117ef0:	48                   	dec    %eax
f0117ef1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117ef7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117efd:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f02:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117f08:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117f0e:	29 d0                	sub    %edx,%eax
f0117f10:	01 d8                	add    %ebx,%eax
f0117f12:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117f17:	39 c1                	cmp    %eax,%ecx
f0117f19:	74 14                	je     f0117f2f <test_kmalloc+0x491>
f0117f1b:	83 ec 04             	sub    $0x4,%esp
f0117f1e:	68 40 b7 13 f0       	push   $0xf013b740
f0117f23:	6a 59                	push   $0x59
f0117f25:	68 5a b6 13 f0       	push   $0xf013b65a
f0117f2a:	e8 d6 82 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117f2f:	e8 94 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f34:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117f37:	74 14                	je     f0117f4d <test_kmalloc+0x4af>
f0117f39:	83 ec 04             	sub    $0x4,%esp
f0117f3c:	68 74 b6 13 f0       	push   $0xf013b674
f0117f41:	6a 5a                	push   $0x5a
f0117f43:	68 5a b6 13 f0       	push   $0xf013b65a
f0117f48:	e8 b8 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117f4d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117f50:	e8 4e 4f ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117f55:	29 c3                	sub    %eax,%ebx
f0117f57:	89 d8                	mov    %ebx,%eax
f0117f59:	83 f8 01             	cmp    $0x1,%eax
f0117f5c:	74 14                	je     f0117f72 <test_kmalloc+0x4d4>
f0117f5e:	83 ec 04             	sub    $0x4,%esp
f0117f61:	68 dc b6 13 f0       	push   $0xf013b6dc
f0117f66:	6a 5b                	push   $0x5b
f0117f68:	68 5a b6 13 f0       	push   $0xf013b65a
f0117f6d:	e8 93 82 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117f72:	e8 2c 4f ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0117f77:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f7a:	e8 49 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f7f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117f82:	83 ec 0c             	sub    $0xc,%esp
f0117f85:	68 00 08 00 00       	push   $0x800
f0117f8a:	e8 fd fb fe ff       	call   f0107b8c <kmalloc>
f0117f8f:	83 c4 10             	add    $0x10,%esp
f0117f92:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117f98:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117f9e:	89 c1                	mov    %eax,%ecx
f0117fa0:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117fa7:	10 00 00 
f0117faa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117fb0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117fb5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117fbb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117fc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fc6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117fcc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117fd2:	29 d0                	sub    %edx,%eax
f0117fd4:	89 c3                	mov    %eax,%ebx
f0117fd6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117fdd:	10 00 00 
f0117fe0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0117fe5:	0f b6 d0             	movzbl %al,%edx
f0117fe8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117fee:	01 d0                	add    %edx,%eax
f0117ff0:	48                   	dec    %eax
f0117ff1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117ff7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117ffd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118002:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118008:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011800e:	29 d0                	sub    %edx,%eax
f0118010:	01 c3                	add    %eax,%ebx
f0118012:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118019:	10 00 00 
f011801c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118021:	0f b6 c0             	movzbl %al,%eax
f0118024:	c1 e0 04             	shl    $0x4,%eax
f0118027:	89 c2                	mov    %eax,%edx
f0118029:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011802f:	01 d0                	add    %edx,%eax
f0118031:	48                   	dec    %eax
f0118032:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118038:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011803e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118043:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118049:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011804f:	29 d0                	sub    %edx,%eax
f0118051:	01 d8                	add    %ebx,%eax
f0118053:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118058:	39 c1                	cmp    %eax,%ecx
f011805a:	74 14                	je     f0118070 <test_kmalloc+0x5d2>
f011805c:	83 ec 04             	sub    $0x4,%esp
f011805f:	68 40 b7 13 f0       	push   $0xf013b740
f0118064:	6a 61                	push   $0x61
f0118066:	68 5a b6 13 f0       	push   $0xf013b65a
f011806b:	e8 95 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118070:	e8 53 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118075:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118078:	74 14                	je     f011808e <test_kmalloc+0x5f0>
f011807a:	83 ec 04             	sub    $0x4,%esp
f011807d:	68 74 b6 13 f0       	push   $0xf013b674
f0118082:	6a 62                	push   $0x62
f0118084:	68 5a b6 13 f0       	push   $0xf013b65a
f0118089:	e8 77 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011808e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118091:	e8 0d 4e ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0118096:	29 c3                	sub    %eax,%ebx
f0118098:	89 d8                	mov    %ebx,%eax
f011809a:	83 f8 01             	cmp    $0x1,%eax
f011809d:	74 14                	je     f01180b3 <test_kmalloc+0x615>
f011809f:	83 ec 04             	sub    $0x4,%esp
f01180a2:	68 dc b6 13 f0       	push   $0xf013b6dc
f01180a7:	6a 63                	push   $0x63
f01180a9:	68 5a b6 13 f0       	push   $0xf013b65a
f01180ae:	e8 52 81 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01180b3:	e8 eb 4d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01180b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01180bb:	e8 08 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01180c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01180c3:	83 ec 0c             	sub    $0xc,%esp
f01180c6:	68 00 1c 00 00       	push   $0x1c00
f01180cb:	e8 bc fa fe ff       	call   f0107b8c <kmalloc>
f01180d0:	83 c4 10             	add    $0x10,%esp
f01180d3:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01180d9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01180df:	89 c1                	mov    %eax,%ecx
f01180e1:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01180e8:	10 00 00 
f01180eb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01180f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180f6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01180fc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118102:	ba 00 00 00 00       	mov    $0x0,%edx
f0118107:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011810d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118113:	29 d0                	sub    %edx,%eax
f0118115:	89 c3                	mov    %eax,%ebx
f0118117:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011811e:	10 00 00 
f0118121:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118126:	0f b6 d0             	movzbl %al,%edx
f0118129:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011812f:	01 d0                	add    %edx,%eax
f0118131:	48                   	dec    %eax
f0118132:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118138:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011813e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118143:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118149:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011814f:	29 d0                	sub    %edx,%eax
f0118151:	01 c3                	add    %eax,%ebx
f0118153:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011815a:	10 00 00 
f011815d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118162:	0f b6 c0             	movzbl %al,%eax
f0118165:	c1 e0 04             	shl    $0x4,%eax
f0118168:	89 c2                	mov    %eax,%edx
f011816a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118170:	01 d0                	add    %edx,%eax
f0118172:	48                   	dec    %eax
f0118173:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118179:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011817f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118184:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011818a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118190:	29 d0                	sub    %edx,%eax
f0118192:	01 d8                	add    %ebx,%eax
f0118194:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118199:	39 c1                	cmp    %eax,%ecx
f011819b:	74 14                	je     f01181b1 <test_kmalloc+0x713>
f011819d:	83 ec 04             	sub    $0x4,%esp
f01181a0:	68 40 b7 13 f0       	push   $0xf013b740
f01181a5:	6a 69                	push   $0x69
f01181a7:	68 5a b6 13 f0       	push   $0xf013b65a
f01181ac:	e8 54 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01181b1:	e8 12 bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01181b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01181b9:	74 14                	je     f01181cf <test_kmalloc+0x731>
f01181bb:	83 ec 04             	sub    $0x4,%esp
f01181be:	68 74 b6 13 f0       	push   $0xf013b674
f01181c3:	6a 6a                	push   $0x6a
f01181c5:	68 5a b6 13 f0       	push   $0xf013b65a
f01181ca:	e8 36 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181cf:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01181d2:	e8 cc 4c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01181d7:	29 c3                	sub    %eax,%ebx
f01181d9:	89 d8                	mov    %ebx,%eax
f01181db:	83 f8 02             	cmp    $0x2,%eax
f01181de:	74 14                	je     f01181f4 <test_kmalloc+0x756>
f01181e0:	83 ec 04             	sub    $0x4,%esp
f01181e3:	68 dc b6 13 f0       	push   $0xf013b6dc
f01181e8:	6a 6b                	push   $0x6b
f01181ea:	68 5a b6 13 f0       	push   $0xf013b65a
f01181ef:	e8 11 80 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01181f4:	e8 aa 4c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01181f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01181fc:	e8 c7 bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118201:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118204:	83 ec 0c             	sub    $0xc,%esp
f0118207:	68 00 fc 2f 00       	push   $0x2ffc00
f011820c:	e8 7b f9 fe ff       	call   f0107b8c <kmalloc>
f0118211:	83 c4 10             	add    $0x10,%esp
f0118214:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011821a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118220:	89 c1                	mov    %eax,%ecx
f0118222:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118229:	10 00 00 
f011822c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118232:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118237:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011823d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118243:	ba 00 00 00 00       	mov    $0x0,%edx
f0118248:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011824e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118254:	29 d0                	sub    %edx,%eax
f0118256:	89 c3                	mov    %eax,%ebx
f0118258:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011825f:	10 00 00 
f0118262:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118267:	0f b6 d0             	movzbl %al,%edx
f011826a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118270:	01 d0                	add    %edx,%eax
f0118272:	48                   	dec    %eax
f0118273:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118279:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011827f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118284:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011828a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118290:	29 d0                	sub    %edx,%eax
f0118292:	01 c3                	add    %eax,%ebx
f0118294:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011829b:	10 00 00 
f011829e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01182a3:	0f b6 c0             	movzbl %al,%eax
f01182a6:	c1 e0 04             	shl    $0x4,%eax
f01182a9:	89 c2                	mov    %eax,%edx
f01182ab:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01182b1:	01 d0                	add    %edx,%eax
f01182b3:	48                   	dec    %eax
f01182b4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01182ba:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01182c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01182c5:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01182cb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01182d1:	29 d0                	sub    %edx,%eax
f01182d3:	01 d8                	add    %ebx,%eax
f01182d5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01182da:	39 c1                	cmp    %eax,%ecx
f01182dc:	74 14                	je     f01182f2 <test_kmalloc+0x854>
f01182de:	83 ec 04             	sub    $0x4,%esp
f01182e1:	68 40 b7 13 f0       	push   $0xf013b740
f01182e6:	6a 71                	push   $0x71
f01182e8:	68 5a b6 13 f0       	push   $0xf013b65a
f01182ed:	e8 13 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01182f2:	e8 d1 ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01182f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01182fa:	74 14                	je     f0118310 <test_kmalloc+0x872>
f01182fc:	83 ec 04             	sub    $0x4,%esp
f01182ff:	68 74 b6 13 f0       	push   $0xf013b674
f0118304:	6a 72                	push   $0x72
f0118306:	68 5a b6 13 f0       	push   $0xf013b65a
f011830b:	e8 f5 7e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118310:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118313:	e8 8b 4b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0118318:	29 c3                	sub    %eax,%ebx
f011831a:	89 d8                	mov    %ebx,%eax
f011831c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118321:	74 14                	je     f0118337 <test_kmalloc+0x899>
f0118323:	83 ec 04             	sub    $0x4,%esp
f0118326:	68 dc b6 13 f0       	push   $0xf013b6dc
f011832b:	6a 73                	push   $0x73
f011832d:	68 5a b6 13 f0       	push   $0xf013b65a
f0118332:	e8 ce 7e fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118337:	e8 67 4b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011833c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011833f:	e8 84 ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118344:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118347:	83 ec 0c             	sub    $0xc,%esp
f011834a:	68 00 fc 5f 00       	push   $0x5ffc00
f011834f:	e8 38 f8 fe ff       	call   f0107b8c <kmalloc>
f0118354:	83 c4 10             	add    $0x10,%esp
f0118357:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011835d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118363:	89 c1                	mov    %eax,%ecx
f0118365:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011836c:	10 00 00 
f011836f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118375:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011837a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118380:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118386:	ba 00 00 00 00       	mov    $0x0,%edx
f011838b:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118391:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118397:	29 d0                	sub    %edx,%eax
f0118399:	89 c3                	mov    %eax,%ebx
f011839b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01183a2:	10 00 00 
f01183a5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01183aa:	0f b6 d0             	movzbl %al,%edx
f01183ad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01183b3:	01 d0                	add    %edx,%eax
f01183b5:	48                   	dec    %eax
f01183b6:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01183bc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01183c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01183c7:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01183cd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01183d3:	29 d0                	sub    %edx,%eax
f01183d5:	01 c3                	add    %eax,%ebx
f01183d7:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01183de:	10 00 00 
f01183e1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01183e6:	0f b6 c0             	movzbl %al,%eax
f01183e9:	c1 e0 04             	shl    $0x4,%eax
f01183ec:	89 c2                	mov    %eax,%edx
f01183ee:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01183f4:	01 d0                	add    %edx,%eax
f01183f6:	48                   	dec    %eax
f01183f7:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01183fd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118403:	ba 00 00 00 00       	mov    $0x0,%edx
f0118408:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011840e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118414:	29 d0                	sub    %edx,%eax
f0118416:	01 d8                	add    %ebx,%eax
f0118418:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011841d:	39 c1                	cmp    %eax,%ecx
f011841f:	74 14                	je     f0118435 <test_kmalloc+0x997>
f0118421:	83 ec 04             	sub    $0x4,%esp
f0118424:	68 40 b7 13 f0       	push   $0xf013b740
f0118429:	6a 79                	push   $0x79
f011842b:	68 5a b6 13 f0       	push   $0xf013b65a
f0118430:	e8 d0 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118435:	e8 8e b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011843a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011843d:	74 14                	je     f0118453 <test_kmalloc+0x9b5>
f011843f:	83 ec 04             	sub    $0x4,%esp
f0118442:	68 74 b6 13 f0       	push   $0xf013b674
f0118447:	6a 7a                	push   $0x7a
f0118449:	68 5a b6 13 f0       	push   $0xf013b65a
f011844e:	e8 b2 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118453:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118456:	e8 48 4a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011845b:	29 c3                	sub    %eax,%ebx
f011845d:	89 d8                	mov    %ebx,%eax
f011845f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118464:	74 14                	je     f011847a <test_kmalloc+0x9dc>
f0118466:	83 ec 04             	sub    $0x4,%esp
f0118469:	68 dc b6 13 f0       	push   $0xf013b6dc
f011846e:	6a 7b                	push   $0x7b
f0118470:	68 5a b6 13 f0       	push   $0xf013b65a
f0118475:	e8 8b 7d fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011847a:	e8 24 4a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011847f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118482:	e8 41 b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118487:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011848a:	83 ec 0c             	sub    $0xc,%esp
f011848d:	68 00 38 00 00       	push   $0x3800
f0118492:	e8 f5 f6 fe ff       	call   f0107b8c <kmalloc>
f0118497:	83 c4 10             	add    $0x10,%esp
f011849a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01184a0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01184a6:	89 c1                	mov    %eax,%ecx
f01184a8:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01184af:	10 00 00 
f01184b2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01184b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01184bd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01184c3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01184c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01184ce:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01184d4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01184da:	29 d0                	sub    %edx,%eax
f01184dc:	89 c3                	mov    %eax,%ebx
f01184de:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01184e5:	10 00 00 
f01184e8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01184ed:	0f b6 d0             	movzbl %al,%edx
f01184f0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01184f6:	01 d0                	add    %edx,%eax
f01184f8:	48                   	dec    %eax
f01184f9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01184ff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118505:	ba 00 00 00 00       	mov    $0x0,%edx
f011850a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118510:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118516:	29 d0                	sub    %edx,%eax
f0118518:	01 c3                	add    %eax,%ebx
f011851a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118521:	10 00 00 
f0118524:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118529:	0f b6 c0             	movzbl %al,%eax
f011852c:	c1 e0 04             	shl    $0x4,%eax
f011852f:	89 c2                	mov    %eax,%edx
f0118531:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118537:	01 d0                	add    %edx,%eax
f0118539:	48                   	dec    %eax
f011853a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118540:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118546:	ba 00 00 00 00       	mov    $0x0,%edx
f011854b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118551:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118557:	29 d0                	sub    %edx,%eax
f0118559:	01 d8                	add    %ebx,%eax
f011855b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118560:	39 c1                	cmp    %eax,%ecx
f0118562:	74 17                	je     f011857b <test_kmalloc+0xadd>
f0118564:	83 ec 04             	sub    $0x4,%esp
f0118567:	68 40 b7 13 f0       	push   $0xf013b740
f011856c:	68 81 00 00 00       	push   $0x81
f0118571:	68 5a b6 13 f0       	push   $0xf013b65a
f0118576:	e8 8a 7c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011857b:	e8 48 b8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118580:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118583:	74 17                	je     f011859c <test_kmalloc+0xafe>
f0118585:	83 ec 04             	sub    $0x4,%esp
f0118588:	68 74 b6 13 f0       	push   $0xf013b674
f011858d:	68 82 00 00 00       	push   $0x82
f0118592:	68 5a b6 13 f0       	push   $0xf013b65a
f0118597:	e8 69 7c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011859c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011859f:	e8 ff 48 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01185a4:	29 c3                	sub    %eax,%ebx
f01185a6:	89 d8                	mov    %ebx,%eax
f01185a8:	83 f8 04             	cmp    $0x4,%eax
f01185ab:	74 17                	je     f01185c4 <test_kmalloc+0xb26>
f01185ad:	83 ec 04             	sub    $0x4,%esp
f01185b0:	68 dc b6 13 f0       	push   $0xf013b6dc
f01185b5:	68 83 00 00 00       	push   $0x83
f01185ba:	68 5a b6 13 f0       	push   $0xf013b65a
f01185bf:	e8 41 7c fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f01185c4:	83 ec 0c             	sub    $0xc,%esp
f01185c7:	68 a6 b7 13 f0       	push   $0xf013b7a6
f01185cc:	e8 3d 87 fe ff       	call   f0100d0e <cprintf>
f01185d1:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01185d4:	e8 ca 48 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01185d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01185dc:	e8 e7 b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01185e1:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01185e4:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f01185eb:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01185ee:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01185f4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01185fa:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118600:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118603:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118605:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f011860b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118611:	01 c2                	add    %eax,%edx
f0118613:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118616:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118618:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011861e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118624:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f011862b:	fd 0f 00 
			shortArr[0] = minShort;
f011862e:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118634:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118637:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f011863a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118640:	01 c0                	add    %eax,%eax
f0118642:	89 c2                	mov    %eax,%edx
f0118644:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011864a:	01 c2                	add    %eax,%edx
f011864c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118650:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118653:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118659:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f011865f:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0118666:	01 00 00 
			intArr[0] = minInt;
f0118669:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011866f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118672:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118674:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011867a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118681:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118687:	01 c2                	add    %eax,%edx
f0118689:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011868c:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f011868e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118694:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011869a:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f01186a1:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f01186a4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01186aa:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01186ad:	88 10                	mov    %dl,(%eax)
f01186af:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01186b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01186b8:	66 89 42 02          	mov    %ax,0x2(%edx)
f01186bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01186c2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01186c5:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f01186c8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01186ce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01186d5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01186db:	01 c2                	add    %eax,%edx
f01186dd:	8a 45 f2             	mov    -0xe(%ebp),%al
f01186e0:	88 02                	mov    %al,(%edx)
f01186e2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01186e8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01186ef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01186f5:	01 c2                	add    %eax,%edx
f01186f7:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01186fb:	66 89 42 02          	mov    %ax,0x2(%edx)
f01186ff:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118705:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011870c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118712:	01 c2                	add    %eax,%edx
f0118714:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118717:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f011871a:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0118721:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118724:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011872a:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118730:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118736:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118739:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f011873b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118741:	89 c2                	mov    %eax,%edx
f0118743:	c1 ea 1f             	shr    $0x1f,%edx
f0118746:	01 d0                	add    %edx,%eax
f0118748:	d1 f8                	sar    %eax
f011874a:	89 c2                	mov    %eax,%edx
f011874c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118752:	01 c2                	add    %eax,%edx
f0118754:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118757:	88 c1                	mov    %al,%cl
f0118759:	c0 e9 07             	shr    $0x7,%cl
f011875c:	01 c8                	add    %ecx,%eax
f011875e:	d0 f8                	sar    %al
f0118760:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118762:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118768:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011876e:	01 c2                	add    %eax,%edx
f0118770:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118773:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118775:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011877b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118781:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118788:	1b 00 00 
			shortArr2[0] = minShort;
f011878b:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0118791:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118794:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118797:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011879d:	01 c0                	add    %eax,%eax
f011879f:	89 c2                	mov    %eax,%edx
f01187a1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01187a7:	01 c2                	add    %eax,%edx
f01187a9:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01187ad:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01187b0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01187b6:	8a 00                	mov    (%eax),%al
f01187b8:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01187bb:	75 15                	jne    f01187d2 <test_kmalloc+0xd34>
f01187bd:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01187c3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01187c9:	01 d0                	add    %edx,%eax
f01187cb:	8a 00                	mov    (%eax),%al
f01187cd:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01187d0:	74 17                	je     f01187e9 <test_kmalloc+0xd4b>
f01187d2:	83 ec 04             	sub    $0x4,%esp
f01187d5:	68 b0 b7 13 f0       	push   $0xf013b7b0
f01187da:	68 b2 00 00 00       	push   $0xb2
f01187df:	68 5a b6 13 f0       	push   $0xf013b65a
f01187e4:	e8 1c 7a fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01187e9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01187ef:	66 8b 00             	mov    (%eax),%ax
f01187f2:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01187f6:	75 1b                	jne    f0118813 <test_kmalloc+0xd75>
f01187f8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01187fe:	01 c0                	add    %eax,%eax
f0118800:	89 c2                	mov    %eax,%edx
f0118802:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118808:	01 d0                	add    %edx,%eax
f011880a:	66 8b 00             	mov    (%eax),%ax
f011880d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118811:	74 17                	je     f011882a <test_kmalloc+0xd8c>
f0118813:	83 ec 04             	sub    $0x4,%esp
f0118816:	68 b0 b7 13 f0       	push   $0xf013b7b0
f011881b:	68 b3 00 00 00       	push   $0xb3
f0118820:	68 5a b6 13 f0       	push   $0xf013b65a
f0118825:	e8 db 79 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f011882a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118830:	8b 00                	mov    (%eax),%eax
f0118832:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118835:	75 1c                	jne    f0118853 <test_kmalloc+0xdb5>
f0118837:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011883d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118844:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011884a:	01 d0                	add    %edx,%eax
f011884c:	8b 00                	mov    (%eax),%eax
f011884e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118851:	74 17                	je     f011886a <test_kmalloc+0xdcc>
f0118853:	83 ec 04             	sub    $0x4,%esp
f0118856:	68 b0 b7 13 f0       	push   $0xf013b7b0
f011885b:	68 b4 00 00 00       	push   $0xb4
f0118860:	68 5a b6 13 f0       	push   $0xf013b65a
f0118865:	e8 9b 79 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011886a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118870:	8a 00                	mov    (%eax),%al
f0118872:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118875:	75 1c                	jne    f0118893 <test_kmalloc+0xdf5>
f0118877:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011887d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118884:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011888a:	01 d0                	add    %edx,%eax
f011888c:	8a 00                	mov    (%eax),%al
f011888e:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118891:	74 17                	je     f01188aa <test_kmalloc+0xe0c>
f0118893:	83 ec 04             	sub    $0x4,%esp
f0118896:	68 b0 b7 13 f0       	push   $0xf013b7b0
f011889b:	68 b6 00 00 00       	push   $0xb6
f01188a0:	68 5a b6 13 f0       	push   $0xf013b65a
f01188a5:	e8 5b 79 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f01188aa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01188b0:	66 8b 40 02          	mov    0x2(%eax),%ax
f01188b4:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01188b8:	75 1f                	jne    f01188d9 <test_kmalloc+0xe3b>
f01188ba:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01188c0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01188c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01188cd:	01 d0                	add    %edx,%eax
f01188cf:	66 8b 40 02          	mov    0x2(%eax),%ax
f01188d3:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01188d7:	74 17                	je     f01188f0 <test_kmalloc+0xe52>
f01188d9:	83 ec 04             	sub    $0x4,%esp
f01188dc:	68 b0 b7 13 f0       	push   $0xf013b7b0
f01188e1:	68 b7 00 00 00       	push   $0xb7
f01188e6:	68 5a b6 13 f0       	push   $0xf013b65a
f01188eb:	e8 15 79 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01188f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01188f6:	8b 40 04             	mov    0x4(%eax),%eax
f01188f9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01188fc:	75 1d                	jne    f011891b <test_kmalloc+0xe7d>
f01188fe:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118904:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011890b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118911:	01 d0                	add    %edx,%eax
f0118913:	8b 40 04             	mov    0x4(%eax),%eax
f0118916:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118919:	74 17                	je     f0118932 <test_kmalloc+0xe94>
f011891b:	83 ec 04             	sub    $0x4,%esp
f011891e:	68 b0 b7 13 f0       	push   $0xf013b7b0
f0118923:	68 b8 00 00 00       	push   $0xb8
f0118928:	68 5a b6 13 f0       	push   $0xf013b65a
f011892d:	e8 d3 78 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118932:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118938:	8a 00                	mov    (%eax),%al
f011893a:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011893d:	75 40                	jne    f011897f <test_kmalloc+0xee1>
f011893f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118945:	89 c2                	mov    %eax,%edx
f0118947:	c1 ea 1f             	shr    $0x1f,%edx
f011894a:	01 d0                	add    %edx,%eax
f011894c:	d1 f8                	sar    %eax
f011894e:	89 c2                	mov    %eax,%edx
f0118950:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118956:	01 d0                	add    %edx,%eax
f0118958:	8a 10                	mov    (%eax),%dl
f011895a:	8a 45 f2             	mov    -0xe(%ebp),%al
f011895d:	88 c1                	mov    %al,%cl
f011895f:	c0 e9 07             	shr    $0x7,%cl
f0118962:	01 c8                	add    %ecx,%eax
f0118964:	d0 f8                	sar    %al
f0118966:	38 c2                	cmp    %al,%dl
f0118968:	75 15                	jne    f011897f <test_kmalloc+0xee1>
f011896a:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118970:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118976:	01 d0                	add    %edx,%eax
f0118978:	8a 00                	mov    (%eax),%al
f011897a:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011897d:	74 17                	je     f0118996 <test_kmalloc+0xef8>
f011897f:	83 ec 04             	sub    $0x4,%esp
f0118982:	68 b0 b7 13 f0       	push   $0xf013b7b0
f0118987:	68 ba 00 00 00       	push   $0xba
f011898c:	68 5a b6 13 f0       	push   $0xf013b65a
f0118991:	e8 6f 78 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118996:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011899c:	66 8b 00             	mov    (%eax),%ax
f011899f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01189a3:	75 1b                	jne    f01189c0 <test_kmalloc+0xf22>
f01189a5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01189ab:	01 c0                	add    %eax,%eax
f01189ad:	89 c2                	mov    %eax,%edx
f01189af:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01189b5:	01 d0                	add    %edx,%eax
f01189b7:	66 8b 00             	mov    (%eax),%ax
f01189ba:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01189be:	74 17                	je     f01189d7 <test_kmalloc+0xf39>
f01189c0:	83 ec 04             	sub    $0x4,%esp
f01189c3:	68 b0 b7 13 f0       	push   $0xf013b7b0
f01189c8:	68 bb 00 00 00       	push   $0xbb
f01189cd:	68 5a b6 13 f0       	push   $0xf013b65a
f01189d2:	e8 2e 78 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01189d7:	e8 c7 44 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01189dc:	89 c2                	mov    %eax,%edx
f01189de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01189e1:	39 c2                	cmp    %eax,%edx
f01189e3:	74 17                	je     f01189fc <test_kmalloc+0xf5e>
f01189e5:	83 ec 04             	sub    $0x4,%esp
f01189e8:	68 dc b6 13 f0       	push   $0xf013b6dc
f01189ed:	68 bd 00 00 00       	push   $0xbd
f01189f2:	68 5a b6 13 f0       	push   $0xf013b65a
f01189f7:	e8 09 78 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189fc:	e8 c7 b3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118a01:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118a04:	74 17                	je     f0118a1d <test_kmalloc+0xf7f>
f0118a06:	83 ec 04             	sub    $0x4,%esp
f0118a09:	68 74 b6 13 f0       	push   $0xf013b674
f0118a0e:	68 be 00 00 00       	push   $0xbe
f0118a13:	68 5a b6 13 f0       	push   $0xf013b65a
f0118a18:	e8 e8 77 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118a1d:	83 ec 0c             	sub    $0xc,%esp
f0118a20:	68 e5 b7 13 f0       	push   $0xf013b7e5
f0118a25:	e8 e4 82 fe ff       	call   f0100d0e <cprintf>
f0118a2a:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118a2d:	e8 71 44 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0118a32:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a35:	e8 8e b3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118a3a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118a3d:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118a44:	10 00 00 
f0118a47:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118a4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a52:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118a58:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118a5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a63:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118a69:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118a6f:	29 d0                	sub    %edx,%eax
f0118a71:	89 c1                	mov    %eax,%ecx
f0118a73:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118a7a:	10 00 00 
f0118a7d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118a82:	0f b6 d0             	movzbl %al,%edx
f0118a85:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118a8b:	01 d0                	add    %edx,%eax
f0118a8d:	48                   	dec    %eax
f0118a8e:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118a94:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118a9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a9f:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118aa5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118aab:	29 d0                	sub    %edx,%eax
f0118aad:	01 c1                	add    %eax,%ecx
f0118aaf:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118ab6:	10 00 00 
f0118ab9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118abe:	0f b6 c0             	movzbl %al,%eax
f0118ac1:	c1 e0 04             	shl    $0x4,%eax
f0118ac4:	89 c2                	mov    %eax,%edx
f0118ac6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118acc:	01 d0                	add    %edx,%eax
f0118ace:	48                   	dec    %eax
f0118acf:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118ad5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118adb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ae0:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118ae6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118aec:	29 d0                	sub    %edx,%eax
f0118aee:	01 c8                	add    %ecx,%eax
f0118af0:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118af5:	29 c2                	sub    %eax,%edx
f0118af7:	89 d0                	mov    %edx,%eax
f0118af9:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118aff:	83 ec 0c             	sub    $0xc,%esp
f0118b02:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118b08:	e8 7f f0 fe ff       	call   f0107b8c <kmalloc>
f0118b0d:	83 c4 10             	add    $0x10,%esp
f0118b10:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118b16:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118b1c:	85 c0                	test   %eax,%eax
f0118b1e:	74 17                	je     f0118b37 <test_kmalloc+0x1099>
f0118b20:	83 ec 04             	sub    $0x4,%esp
f0118b23:	68 28 b6 13 f0       	push   $0xf013b628
f0118b28:	68 c8 00 00 00       	push   $0xc8
f0118b2d:	68 5a b6 13 f0       	push   $0xf013b65a
f0118b32:	e8 ce 76 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b37:	e8 8c b2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118b3c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118b3f:	74 17                	je     f0118b58 <test_kmalloc+0x10ba>
f0118b41:	83 ec 04             	sub    $0x4,%esp
f0118b44:	68 74 b6 13 f0       	push   $0xf013b674
f0118b49:	68 c9 00 00 00       	push   $0xc9
f0118b4e:	68 5a b6 13 f0       	push   $0xf013b65a
f0118b53:	e8 ad 76 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118b58:	e8 46 43 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0118b5d:	89 c2                	mov    %eax,%edx
f0118b5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118b62:	39 c2                	cmp    %eax,%edx
f0118b64:	74 17                	je     f0118b7d <test_kmalloc+0x10df>
f0118b66:	83 ec 04             	sub    $0x4,%esp
f0118b69:	68 dc b6 13 f0       	push   $0xf013b6dc
f0118b6e:	68 ca 00 00 00       	push   $0xca
f0118b73:	68 5a b6 13 f0       	push   $0xf013b65a
f0118b78:	e8 88 76 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118b7d:	83 ec 0c             	sub    $0xc,%esp
f0118b80:	68 ec b7 13 f0       	push   $0xf013b7ec
f0118b85:	e8 84 81 fe ff       	call   f0100d0e <cprintf>
f0118b8a:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118b8d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118b93:	05 00 40 00 00       	add    $0x4000,%eax
f0118b98:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118b9e:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118ba5:	10 00 00 
f0118ba8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118bae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118bb3:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118bb9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118bbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bc4:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118bca:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118bd0:	29 d0                	sub    %edx,%eax
f0118bd2:	89 c1                	mov    %eax,%ecx
f0118bd4:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118bdb:	10 00 00 
f0118bde:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118be3:	0f b6 d0             	movzbl %al,%edx
f0118be6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118bec:	01 d0                	add    %edx,%eax
f0118bee:	48                   	dec    %eax
f0118bef:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118bf5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118bfb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c00:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118c06:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118c0c:	29 d0                	sub    %edx,%eax
f0118c0e:	01 c1                	add    %eax,%ecx
f0118c10:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118c17:	10 00 00 
f0118c1a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118c1f:	0f b6 c0             	movzbl %al,%eax
f0118c22:	c1 e0 04             	shl    $0x4,%eax
f0118c25:	89 c2                	mov    %eax,%edx
f0118c27:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118c2d:	01 d0                	add    %edx,%eax
f0118c2f:	48                   	dec    %eax
f0118c30:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118c36:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118c3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c41:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118c47:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118c4d:	29 d0                	sub    %edx,%eax
f0118c4f:	01 c8                	add    %ecx,%eax
f0118c51:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118c56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118c59:	eb 6a                	jmp    f0118cc5 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118c5b:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0118c60:	83 ec 04             	sub    $0x4,%esp
f0118c63:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118c69:	52                   	push   %edx
f0118c6a:	ff 75 f4             	pushl  -0xc(%ebp)
f0118c6d:	50                   	push   %eax
f0118c6e:	e8 3e de fe ff       	call   f0106ab1 <get_page_table>
f0118c73:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118c76:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118c7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118c7f:	c1 ea 0c             	shr    $0xc,%edx
f0118c82:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118c88:	c1 e2 02             	shl    $0x2,%edx
f0118c8b:	01 d0                	add    %edx,%eax
f0118c8d:	8b 00                	mov    (%eax),%eax
f0118c8f:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118c94:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118c9a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118ca0:	83 e0 04             	and    $0x4,%eax
f0118ca3:	85 c0                	test   %eax,%eax
f0118ca5:	74 17                	je     f0118cbe <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118ca7:	83 ec 04             	sub    $0x4,%esp
f0118caa:	68 f4 b7 13 f0       	push   $0xf013b7f4
f0118caf:	68 d7 00 00 00       	push   $0xd7
f0118cb4:	68 5a b6 13 f0       	push   $0xf013b65a
f0118cb9:	e8 47 75 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118cbe:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118cc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118cc8:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118cce:	72 8b                	jb     f0118c5b <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118cd0:	83 ec 0c             	sub    $0xc,%esp
f0118cd3:	68 3e b8 13 f0       	push   $0xf013b83e
f0118cd8:	e8 31 80 fe ff       	call   f0100d0e <cprintf>
f0118cdd:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0118ce0:	83 ec 0c             	sub    $0xc,%esp
f0118ce3:	68 48 b8 13 f0       	push   $0xf013b848
f0118ce8:	e8 21 80 fe ff       	call   f0100d0e <cprintf>
f0118ced:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118cf0:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118cf5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118cf8:	5b                   	pop    %ebx
f0118cf9:	5f                   	pop    %edi
f0118cfa:	5d                   	pop    %ebp
f0118cfb:	c3                   	ret    

f0118cfc <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118cfc:	55                   	push   %ebp
f0118cfd:	89 e5                	mov    %esp,%ebp
f0118cff:	57                   	push   %edi
f0118d00:	53                   	push   %ebx
f0118d01:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118d07:	83 ec 0c             	sub    $0xc,%esp
f0118d0a:	68 9c b5 13 f0       	push   $0xf013b59c
f0118d0f:	e8 fa 7f fe ff       	call   f0100d0e <cprintf>
f0118d14:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118d17:	83 ec 0c             	sub    $0xc,%esp
f0118d1a:	68 cc b5 13 f0       	push   $0xf013b5cc
f0118d1f:	e8 ea 7f fe ff       	call   f0100d0e <cprintf>
f0118d24:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118d27:	83 ec 0c             	sub    $0xc,%esp
f0118d2a:	68 9c b5 13 f0       	push   $0xf013b59c
f0118d2f:	e8 da 7f fe ff       	call   f0100d0e <cprintf>
f0118d34:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118d37:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118d3d:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118d42:	b8 00 00 00 00       	mov    $0x0,%eax
f0118d47:	89 d7                	mov    %edx,%edi
f0118d49:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118d4b:	83 ec 0c             	sub    $0xc,%esp
f0118d4e:	68 84 b8 13 f0       	push   $0xf013b884
f0118d53:	e8 b6 7f fe ff       	call   f0100d0e <cprintf>
f0118d58:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0118d5b:	e8 43 41 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0118d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118d63:	e8 60 b0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118d68:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118d6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118d72:	eb 1f                	jmp    f0118d93 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118d74:	83 ec 0c             	sub    $0xc,%esp
f0118d77:	68 00 00 20 00       	push   $0x200000
f0118d7c:	e8 0b ee fe ff       	call   f0107b8c <kmalloc>
f0118d81:	83 c4 10             	add    $0x10,%esp
f0118d84:	89 c2                	mov    %eax,%edx
f0118d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118d89:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118d90:	ff 45 f4             	incl   -0xc(%ebp)
f0118d93:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118d97:	7e db                	jle    f0118d74 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118d99:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118da0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118da3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118da8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118dab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118dae:	ba 00 00 00 00       	mov    $0x0,%edx
f0118db3:	f7 75 e8             	divl   -0x18(%ebp)
f0118db6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118db9:	29 d0                	sub    %edx,%eax
f0118dbb:	89 c1                	mov    %eax,%ecx
f0118dbd:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118dc4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118dc9:	0f b6 d0             	movzbl %al,%edx
f0118dcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118dcf:	01 d0                	add    %edx,%eax
f0118dd1:	48                   	dec    %eax
f0118dd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118dd5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118dd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ddd:	f7 75 e0             	divl   -0x20(%ebp)
f0118de0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118de3:	29 d0                	sub    %edx,%eax
f0118de5:	01 c1                	add    %eax,%ecx
f0118de7:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118dee:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118df3:	0f b6 c0             	movzbl %al,%eax
f0118df6:	c1 e0 04             	shl    $0x4,%eax
f0118df9:	89 c2                	mov    %eax,%edx
f0118dfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118dfe:	01 d0                	add    %edx,%eax
f0118e00:	48                   	dec    %eax
f0118e01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118e04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118e07:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e0c:	f7 75 d8             	divl   -0x28(%ebp)
f0118e0f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118e12:	29 d0                	sub    %edx,%eax
f0118e14:	01 c8                	add    %ecx,%eax
f0118e16:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118e1b:	29 c2                	sub    %eax,%edx
f0118e1d:	89 d0                	mov    %edx,%eax
f0118e1f:	83 ec 0c             	sub    $0xc,%esp
f0118e22:	50                   	push   %eax
f0118e23:	e8 64 ed fe ff       	call   f0107b8c <kmalloc>
f0118e28:	83 c4 10             	add    $0x10,%esp
f0118e2b:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118e31:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118e37:	89 c1                	mov    %eax,%ecx
f0118e39:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118e40:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118e43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e48:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118e4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118e4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e53:	f7 75 d0             	divl   -0x30(%ebp)
f0118e56:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118e59:	29 d0                	sub    %edx,%eax
f0118e5b:	89 c3                	mov    %eax,%ebx
f0118e5d:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118e64:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118e69:	0f b6 d0             	movzbl %al,%edx
f0118e6c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118e6f:	01 d0                	add    %edx,%eax
f0118e71:	48                   	dec    %eax
f0118e72:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118e75:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118e78:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e7d:	f7 75 c8             	divl   -0x38(%ebp)
f0118e80:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118e83:	29 d0                	sub    %edx,%eax
f0118e85:	01 c3                	add    %eax,%ebx
f0118e87:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118e8e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118e93:	0f b6 c0             	movzbl %al,%eax
f0118e96:	c1 e0 04             	shl    $0x4,%eax
f0118e99:	89 c2                	mov    %eax,%edx
f0118e9b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118e9e:	01 d0                	add    %edx,%eax
f0118ea0:	48                   	dec    %eax
f0118ea1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118ea4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118ea7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eac:	f7 75 c0             	divl   -0x40(%ebp)
f0118eaf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118eb2:	29 d0                	sub    %edx,%eax
f0118eb4:	01 d8                	add    %ebx,%eax
f0118eb6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118ebb:	39 c1                	cmp    %eax,%ecx
f0118ebd:	0f 85 ed 04 00 00    	jne    f01193b0 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118ec3:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118ec9:	89 c1                	mov    %eax,%ecx
f0118ecb:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118ed2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118ed5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118eda:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118edd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118ee0:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ee5:	f7 75 b8             	divl   -0x48(%ebp)
f0118ee8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118eeb:	29 d0                	sub    %edx,%eax
f0118eed:	89 c3                	mov    %eax,%ebx
f0118eef:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118ef6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118efb:	0f b6 d0             	movzbl %al,%edx
f0118efe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118f01:	01 d0                	add    %edx,%eax
f0118f03:	48                   	dec    %eax
f0118f04:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118f07:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f0f:	f7 75 b0             	divl   -0x50(%ebp)
f0118f12:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f15:	29 d0                	sub    %edx,%eax
f0118f17:	01 c3                	add    %eax,%ebx
f0118f19:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118f20:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118f25:	0f b6 c0             	movzbl %al,%eax
f0118f28:	c1 e0 04             	shl    $0x4,%eax
f0118f2b:	89 c2                	mov    %eax,%edx
f0118f2d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118f30:	01 d0                	add    %edx,%eax
f0118f32:	48                   	dec    %eax
f0118f33:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118f36:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f39:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f3e:	f7 75 a8             	divl   -0x58(%ebp)
f0118f41:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f44:	29 d0                	sub    %edx,%eax
f0118f46:	01 d8                	add    %ebx,%eax
f0118f48:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118f4d:	39 c1                	cmp    %eax,%ecx
f0118f4f:	0f 85 5b 04 00 00    	jne    f01193b0 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118f55:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118f5b:	89 c1                	mov    %eax,%ecx
f0118f5d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118f64:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118f67:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f6c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118f6f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118f72:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f77:	f7 75 a0             	divl   -0x60(%ebp)
f0118f7a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118f7d:	29 d0                	sub    %edx,%eax
f0118f7f:	89 c3                	mov    %eax,%ebx
f0118f81:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118f88:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118f8d:	0f b6 d0             	movzbl %al,%edx
f0118f90:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118f93:	01 d0                	add    %edx,%eax
f0118f95:	48                   	dec    %eax
f0118f96:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118f99:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118f9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fa1:	f7 75 98             	divl   -0x68(%ebp)
f0118fa4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118fa7:	29 d0                	sub    %edx,%eax
f0118fa9:	01 c3                	add    %eax,%ebx
f0118fab:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118fb2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0118fb7:	0f b6 c0             	movzbl %al,%eax
f0118fba:	c1 e0 04             	shl    $0x4,%eax
f0118fbd:	89 c2                	mov    %eax,%edx
f0118fbf:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118fc2:	01 d0                	add    %edx,%eax
f0118fc4:	48                   	dec    %eax
f0118fc5:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118fc8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118fcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fd0:	f7 75 90             	divl   -0x70(%ebp)
f0118fd3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118fd6:	29 d0                	sub    %edx,%eax
f0118fd8:	01 d8                	add    %ebx,%eax
f0118fda:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118fdf:	39 c1                	cmp    %eax,%ecx
f0118fe1:	0f 85 c9 03 00 00    	jne    f01193b0 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118fe7:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118fed:	89 c1                	mov    %eax,%ecx
f0118fef:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118ff6:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118ff9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ffe:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0119001:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119004:	ba 00 00 00 00       	mov    $0x0,%edx
f0119009:	f7 75 88             	divl   -0x78(%ebp)
f011900c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011900f:	29 d0                	sub    %edx,%eax
f0119011:	89 c3                	mov    %eax,%ebx
f0119013:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011901a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011901f:	0f b6 d0             	movzbl %al,%edx
f0119022:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119025:	01 d0                	add    %edx,%eax
f0119027:	48                   	dec    %eax
f0119028:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011902e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119034:	ba 00 00 00 00       	mov    $0x0,%edx
f0119039:	f7 75 80             	divl   -0x80(%ebp)
f011903c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119042:	29 d0                	sub    %edx,%eax
f0119044:	01 c3                	add    %eax,%ebx
f0119046:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011904d:	10 00 00 
f0119050:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119055:	0f b6 c0             	movzbl %al,%eax
f0119058:	c1 e0 04             	shl    $0x4,%eax
f011905b:	89 c2                	mov    %eax,%edx
f011905d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119063:	01 d0                	add    %edx,%eax
f0119065:	48                   	dec    %eax
f0119066:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011906c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119072:	ba 00 00 00 00       	mov    $0x0,%edx
f0119077:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011907d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119083:	29 d0                	sub    %edx,%eax
f0119085:	01 d8                	add    %ebx,%eax
f0119087:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011908c:	39 c1                	cmp    %eax,%ecx
f011908e:	0f 85 1c 03 00 00    	jne    f01193b0 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119094:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011909a:	89 c1                	mov    %eax,%ecx
f011909c:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01190a3:	10 00 00 
f01190a6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01190ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01190b1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01190b7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01190bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01190c2:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01190c8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01190ce:	29 d0                	sub    %edx,%eax
f01190d0:	89 c3                	mov    %eax,%ebx
f01190d2:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01190d9:	10 00 00 
f01190dc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01190e1:	0f b6 d0             	movzbl %al,%edx
f01190e4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01190ea:	01 d0                	add    %edx,%eax
f01190ec:	48                   	dec    %eax
f01190ed:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01190f3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01190f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01190fe:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0119104:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011910a:	29 d0                	sub    %edx,%eax
f011910c:	01 c3                	add    %eax,%ebx
f011910e:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119115:	10 00 00 
f0119118:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011911d:	0f b6 c0             	movzbl %al,%eax
f0119120:	c1 e0 04             	shl    $0x4,%eax
f0119123:	89 c2                	mov    %eax,%edx
f0119125:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011912b:	01 d0                	add    %edx,%eax
f011912d:	48                   	dec    %eax
f011912e:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119134:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011913a:	ba 00 00 00 00       	mov    $0x0,%edx
f011913f:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119145:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011914b:	29 d0                	sub    %edx,%eax
f011914d:	01 d8                	add    %ebx,%eax
f011914f:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119154:	39 c1                	cmp    %eax,%ecx
f0119156:	0f 85 54 02 00 00    	jne    f01193b0 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011915c:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119162:	89 c1                	mov    %eax,%ecx
f0119164:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011916b:	10 00 00 
f011916e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119174:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119179:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011917f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119185:	ba 00 00 00 00       	mov    $0x0,%edx
f011918a:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119190:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119196:	29 d0                	sub    %edx,%eax
f0119198:	89 c3                	mov    %eax,%ebx
f011919a:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01191a1:	10 00 00 
f01191a4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01191a9:	0f b6 d0             	movzbl %al,%edx
f01191ac:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01191b2:	01 d0                	add    %edx,%eax
f01191b4:	48                   	dec    %eax
f01191b5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01191bb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01191c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01191c6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01191cc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01191d2:	29 d0                	sub    %edx,%eax
f01191d4:	01 c3                	add    %eax,%ebx
f01191d6:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01191dd:	10 00 00 
f01191e0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01191e5:	0f b6 c0             	movzbl %al,%eax
f01191e8:	c1 e0 04             	shl    $0x4,%eax
f01191eb:	89 c2                	mov    %eax,%edx
f01191ed:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01191f3:	01 d0                	add    %edx,%eax
f01191f5:	48                   	dec    %eax
f01191f6:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01191fc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119202:	ba 00 00 00 00       	mov    $0x0,%edx
f0119207:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011920d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119213:	29 d0                	sub    %edx,%eax
f0119215:	01 d8                	add    %ebx,%eax
f0119217:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011921c:	39 c1                	cmp    %eax,%ecx
f011921e:	0f 85 8c 01 00 00    	jne    f01193b0 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119224:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f011922a:	89 c1                	mov    %eax,%ecx
f011922c:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119233:	10 00 00 
f0119236:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011923c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119241:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119247:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011924d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119252:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119258:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011925e:	29 d0                	sub    %edx,%eax
f0119260:	89 c3                	mov    %eax,%ebx
f0119262:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0119269:	10 00 00 
f011926c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119271:	0f b6 d0             	movzbl %al,%edx
f0119274:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011927a:	01 d0                	add    %edx,%eax
f011927c:	48                   	dec    %eax
f011927d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0119283:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119289:	ba 00 00 00 00       	mov    $0x0,%edx
f011928e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0119294:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011929a:	29 d0                	sub    %edx,%eax
f011929c:	01 c3                	add    %eax,%ebx
f011929e:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01192a5:	10 00 00 
f01192a8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01192ad:	0f b6 c0             	movzbl %al,%eax
f01192b0:	c1 e0 04             	shl    $0x4,%eax
f01192b3:	89 c2                	mov    %eax,%edx
f01192b5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01192bb:	01 d0                	add    %edx,%eax
f01192bd:	48                   	dec    %eax
f01192be:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01192c4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01192ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01192cf:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01192d5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01192db:	29 d0                	sub    %edx,%eax
f01192dd:	01 d8                	add    %ebx,%eax
f01192df:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01192e4:	39 c1                	cmp    %eax,%ecx
f01192e6:	0f 85 c4 00 00 00    	jne    f01193b0 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01192ec:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01192f2:	89 c1                	mov    %eax,%ecx
f01192f4:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01192fb:	10 00 00 
f01192fe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119304:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119309:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011930f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119315:	ba 00 00 00 00       	mov    $0x0,%edx
f011931a:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0119320:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119326:	29 d0                	sub    %edx,%eax
f0119328:	89 c3                	mov    %eax,%ebx
f011932a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0119331:	10 00 00 
f0119334:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119339:	0f b6 d0             	movzbl %al,%edx
f011933c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119342:	01 d0                	add    %edx,%eax
f0119344:	48                   	dec    %eax
f0119345:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011934b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119351:	ba 00 00 00 00       	mov    $0x0,%edx
f0119356:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011935c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119362:	29 d0                	sub    %edx,%eax
f0119364:	01 c3                	add    %eax,%ebx
f0119366:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011936d:	10 00 00 
f0119370:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119375:	0f b6 c0             	movzbl %al,%eax
f0119378:	c1 e0 04             	shl    $0x4,%eax
f011937b:	89 c2                	mov    %eax,%edx
f011937d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119383:	01 d0                	add    %edx,%eax
f0119385:	48                   	dec    %eax
f0119386:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011938c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119392:	ba 00 00 00 00       	mov    $0x0,%edx
f0119397:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011939d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01193a3:	29 d0                	sub    %edx,%eax
f01193a5:	01 d8                	add    %ebx,%eax
f01193a7:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01193ac:	39 c1                	cmp    %eax,%ecx
f01193ae:	74 17                	je     f01193c7 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01193b0:	83 ec 04             	sub    $0x4,%esp
f01193b3:	68 d4 b8 13 f0       	push   $0xf013b8d4
f01193b8:	68 03 01 00 00       	push   $0x103
f01193bd:	68 5a b6 13 f0       	push   $0xf013b65a
f01193c2:	e8 3e 6e fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01193c7:	e8 fc a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01193cc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01193cf:	74 17                	je     f01193e8 <test_kmalloc_nextfit+0x6ec>
f01193d1:	83 ec 04             	sub    $0x4,%esp
f01193d4:	68 74 b6 13 f0       	push   $0xf013b674
f01193d9:	68 05 01 00 00       	push   $0x105
f01193de:	68 5a b6 13 f0       	push   $0xf013b65a
f01193e3:	e8 1d 6e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01193e8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01193eb:	e8 b3 3a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01193f0:	29 c3                	sub    %eax,%ebx
f01193f2:	89 d9                	mov    %ebx,%ecx
f01193f4:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01193fb:	10 00 00 
f01193fe:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119404:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119409:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011940f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119415:	ba 00 00 00 00       	mov    $0x0,%edx
f011941a:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119420:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119426:	29 d0                	sub    %edx,%eax
f0119428:	89 c3                	mov    %eax,%ebx
f011942a:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119431:	10 00 00 
f0119434:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119439:	0f b6 d0             	movzbl %al,%edx
f011943c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119442:	01 d0                	add    %edx,%eax
f0119444:	48                   	dec    %eax
f0119445:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011944b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119451:	ba 00 00 00 00       	mov    $0x0,%edx
f0119456:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011945c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119462:	29 d0                	sub    %edx,%eax
f0119464:	01 c3                	add    %eax,%ebx
f0119466:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011946d:	10 00 00 
f0119470:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119475:	0f b6 c0             	movzbl %al,%eax
f0119478:	c1 e0 04             	shl    $0x4,%eax
f011947b:	89 c2                	mov    %eax,%edx
f011947d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119483:	01 d0                	add    %edx,%eax
f0119485:	48                   	dec    %eax
f0119486:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011948c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119492:	ba 00 00 00 00       	mov    $0x0,%edx
f0119497:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011949d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01194a3:	29 d0                	sub    %edx,%eax
f01194a5:	01 d8                	add    %ebx,%eax
f01194a7:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01194ac:	29 c2                	sub    %eax,%edx
f01194ae:	89 d0                	mov    %edx,%eax
f01194b0:	c1 e8 0c             	shr    $0xc,%eax
f01194b3:	39 c1                	cmp    %eax,%ecx
f01194b5:	74 17                	je     f01194ce <test_kmalloc_nextfit+0x7d2>
f01194b7:	83 ec 04             	sub    $0x4,%esp
f01194ba:	68 17 b9 13 f0       	push   $0xf013b917
f01194bf:	68 06 01 00 00       	push   $0x106
f01194c4:	68 5a b6 13 f0       	push   $0xf013b65a
f01194c9:	e8 37 6d fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01194ce:	e8 f5 a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01194d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01194d6:	e8 c8 39 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01194db:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01194de:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01194e4:	83 ec 0c             	sub    $0xc,%esp
f01194e7:	50                   	push   %eax
f01194e8:	e8 6a e7 fe ff       	call   f0107c57 <kfree>
f01194ed:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01194f0:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01194f6:	83 ec 0c             	sub    $0xc,%esp
f01194f9:	50                   	push   %eax
f01194fa:	e8 58 e7 fe ff       	call   f0107c57 <kfree>
f01194ff:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119502:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0119508:	83 ec 0c             	sub    $0xc,%esp
f011950b:	50                   	push   %eax
f011950c:	e8 46 e7 fe ff       	call   f0107c57 <kfree>
f0119511:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119514:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f011951a:	83 ec 0c             	sub    $0xc,%esp
f011951d:	50                   	push   %eax
f011951e:	e8 34 e7 fe ff       	call   f0107c57 <kfree>
f0119523:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119526:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011952c:	83 ec 0c             	sub    $0xc,%esp
f011952f:	50                   	push   %eax
f0119530:	e8 22 e7 fe ff       	call   f0107c57 <kfree>
f0119535:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119538:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f011953e:	83 ec 0c             	sub    $0xc,%esp
f0119541:	50                   	push   %eax
f0119542:	e8 10 e7 fe ff       	call   f0107c57 <kfree>
f0119547:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011954a:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0119550:	83 ec 0c             	sub    $0xc,%esp
f0119553:	50                   	push   %eax
f0119554:	e8 fe e6 fe ff       	call   f0107c57 <kfree>
f0119559:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f011955c:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119562:	83 ec 0c             	sub    $0xc,%esp
f0119565:	50                   	push   %eax
f0119566:	e8 ec e6 fe ff       	call   f0107c57 <kfree>
f011956b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f011956e:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119574:	83 ec 0c             	sub    $0xc,%esp
f0119577:	50                   	push   %eax
f0119578:	e8 da e6 fe ff       	call   f0107c57 <kfree>
f011957d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119580:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119586:	83 ec 0c             	sub    $0xc,%esp
f0119589:	50                   	push   %eax
f011958a:	e8 c8 e6 fe ff       	call   f0107c57 <kfree>
f011958f:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119592:	e8 31 a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119597:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011959a:	74 17                	je     f01195b3 <test_kmalloc_nextfit+0x8b7>
f011959c:	83 ec 04             	sub    $0x4,%esp
f011959f:	68 74 b6 13 f0       	push   $0xf013b674
f01195a4:	68 17 01 00 00       	push   $0x117
f01195a9:	68 5a b6 13 f0       	push   $0xf013b65a
f01195ae:	e8 52 6c fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01195b3:	e8 eb 38 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01195b8:	89 c2                	mov    %eax,%edx
f01195ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01195bd:	89 d1                	mov    %edx,%ecx
f01195bf:	29 c1                	sub    %eax,%ecx
f01195c1:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01195c8:	10 00 00 
f01195cb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01195d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195d6:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01195dc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01195e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01195e7:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01195ed:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01195f3:	29 d0                	sub    %edx,%eax
f01195f5:	89 c3                	mov    %eax,%ebx
f01195f7:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01195fe:	10 00 00 
f0119601:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119606:	0f b6 d0             	movzbl %al,%edx
f0119609:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011960f:	01 d0                	add    %edx,%eax
f0119611:	48                   	dec    %eax
f0119612:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119618:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011961e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119623:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119629:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011962f:	29 d0                	sub    %edx,%eax
f0119631:	01 c3                	add    %eax,%ebx
f0119633:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011963a:	10 00 00 
f011963d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119642:	0f b6 c0             	movzbl %al,%eax
f0119645:	c1 e0 04             	shl    $0x4,%eax
f0119648:	89 c2                	mov    %eax,%edx
f011964a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119650:	01 d0                	add    %edx,%eax
f0119652:	48                   	dec    %eax
f0119653:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0119659:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011965f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119664:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011966a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119670:	29 d0                	sub    %edx,%eax
f0119672:	01 d8                	add    %ebx,%eax
f0119674:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119679:	29 c2                	sub    %eax,%edx
f011967b:	89 d0                	mov    %edx,%eax
f011967d:	c1 e8 0c             	shr    $0xc,%eax
f0119680:	39 c1                	cmp    %eax,%ecx
f0119682:	74 17                	je     f011969b <test_kmalloc_nextfit+0x99f>
f0119684:	83 ec 04             	sub    $0x4,%esp
f0119687:	68 28 b9 13 f0       	push   $0xf013b928
f011968c:	68 18 01 00 00       	push   $0x118
f0119691:	68 5a b6 13 f0       	push   $0xf013b65a
f0119696:	e8 6a 6b fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f011969b:	e8 28 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01196a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01196a3:	e8 fb 37 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01196a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f01196ab:	83 ec 0c             	sub    $0xc,%esp
f01196ae:	68 00 fc 0f 00       	push   $0xffc00
f01196b3:	e8 d4 e4 fe ff       	call   f0107b8c <kmalloc>
f01196b8:	83 c4 10             	add    $0x10,%esp
f01196bb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f01196c1:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01196c8:	10 00 00 
f01196cb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01196d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196d6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01196dc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01196e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01196e7:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01196ed:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01196f3:	29 d0                	sub    %edx,%eax
f01196f5:	89 c1                	mov    %eax,%ecx
f01196f7:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01196fe:	10 00 00 
f0119701:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119706:	0f b6 d0             	movzbl %al,%edx
f0119709:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011970f:	01 d0                	add    %edx,%eax
f0119711:	48                   	dec    %eax
f0119712:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119718:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011971e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119723:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119729:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011972f:	29 d0                	sub    %edx,%eax
f0119731:	01 c1                	add    %eax,%ecx
f0119733:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011973a:	10 00 00 
f011973d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119742:	0f b6 c0             	movzbl %al,%eax
f0119745:	c1 e0 04             	shl    $0x4,%eax
f0119748:	89 c2                	mov    %eax,%edx
f011974a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119750:	01 d0                	add    %edx,%eax
f0119752:	48                   	dec    %eax
f0119753:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119759:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011975f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119764:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011976a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119770:	29 d0                	sub    %edx,%eax
f0119772:	01 c8                	add    %ecx,%eax
f0119774:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011977a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119780:	39 c2                	cmp    %eax,%edx
f0119782:	74 17                	je     f011979b <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119784:	83 ec 04             	sub    $0x4,%esp
f0119787:	68 68 b9 13 f0       	push   $0xf013b968
f011978c:	68 1f 01 00 00       	push   $0x11f
f0119791:	68 5a b6 13 f0       	push   $0xf013b65a
f0119796:	e8 6a 6a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011979b:	e8 28 a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01197a0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197a3:	74 17                	je     f01197bc <test_kmalloc_nextfit+0xac0>
f01197a5:	83 ec 04             	sub    $0x4,%esp
f01197a8:	68 74 b6 13 f0       	push   $0xf013b674
f01197ad:	68 20 01 00 00       	push   $0x120
f01197b2:	68 5a b6 13 f0       	push   $0xf013b65a
f01197b7:	e8 49 6a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01197bc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01197bf:	e8 df 36 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01197c4:	29 c3                	sub    %eax,%ebx
f01197c6:	89 d8                	mov    %ebx,%eax
f01197c8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01197cd:	74 17                	je     f01197e6 <test_kmalloc_nextfit+0xaea>
f01197cf:	83 ec 04             	sub    $0x4,%esp
f01197d2:	68 17 b9 13 f0       	push   $0xf013b917
f01197d7:	68 21 01 00 00       	push   $0x121
f01197dc:	68 5a b6 13 f0       	push   $0xf013b65a
f01197e1:	e8 1f 6a fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01197e6:	e8 dd a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01197eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197ee:	e8 b0 36 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f01197f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01197f6:	83 ec 0c             	sub    $0xc,%esp
f01197f9:	68 00 04 00 00       	push   $0x400
f01197fe:	e8 89 e3 fe ff       	call   f0107b8c <kmalloc>
f0119803:	83 c4 10             	add    $0x10,%esp
f0119806:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f011980c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119813:	10 00 00 
f0119816:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011981c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119821:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119827:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011982d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119832:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119838:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011983e:	29 d0                	sub    %edx,%eax
f0119840:	89 c1                	mov    %eax,%ecx
f0119842:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119849:	10 00 00 
f011984c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119851:	0f b6 d0             	movzbl %al,%edx
f0119854:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011985a:	01 d0                	add    %edx,%eax
f011985c:	48                   	dec    %eax
f011985d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119863:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119869:	ba 00 00 00 00       	mov    $0x0,%edx
f011986e:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119874:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011987a:	29 d0                	sub    %edx,%eax
f011987c:	01 c1                	add    %eax,%ecx
f011987e:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119885:	10 00 00 
f0119888:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011988d:	0f b6 c0             	movzbl %al,%eax
f0119890:	c1 e0 04             	shl    $0x4,%eax
f0119893:	89 c2                	mov    %eax,%edx
f0119895:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011989b:	01 d0                	add    %edx,%eax
f011989d:	48                   	dec    %eax
f011989e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01198a4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01198aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01198af:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01198b5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01198bb:	29 d0                	sub    %edx,%eax
f01198bd:	01 c8                	add    %ecx,%eax
f01198bf:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f01198c5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01198cb:	39 c2                	cmp    %eax,%edx
f01198cd:	74 17                	je     f01198e6 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01198cf:	83 ec 04             	sub    $0x4,%esp
f01198d2:	68 68 b9 13 f0       	push   $0xf013b968
f01198d7:	68 27 01 00 00       	push   $0x127
f01198dc:	68 5a b6 13 f0       	push   $0xf013b65a
f01198e1:	e8 1f 69 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198e6:	e8 dd a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198eb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198ee:	74 17                	je     f0119907 <test_kmalloc_nextfit+0xc0b>
f01198f0:	83 ec 04             	sub    $0x4,%esp
f01198f3:	68 74 b6 13 f0       	push   $0xf013b674
f01198f8:	68 28 01 00 00       	push   $0x128
f01198fd:	68 5a b6 13 f0       	push   $0xf013b65a
f0119902:	e8 fe 68 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119907:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011990a:	e8 94 35 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011990f:	29 c3                	sub    %eax,%ebx
f0119911:	89 d8                	mov    %ebx,%eax
f0119913:	83 f8 01             	cmp    $0x1,%eax
f0119916:	74 17                	je     f011992f <test_kmalloc_nextfit+0xc33>
f0119918:	83 ec 04             	sub    $0x4,%esp
f011991b:	68 17 b9 13 f0       	push   $0xf013b917
f0119920:	68 29 01 00 00       	push   $0x129
f0119925:	68 5a b6 13 f0       	push   $0xf013b65a
f011992a:	e8 d6 68 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011992f:	e8 94 a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119934:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119937:	e8 67 35 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011993c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011993f:	83 ec 0c             	sub    $0xc,%esp
f0119942:	68 00 00 50 00       	push   $0x500000
f0119947:	e8 40 e2 fe ff       	call   f0107b8c <kmalloc>
f011994c:	83 c4 10             	add    $0x10,%esp
f011994f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119955:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011995c:	10 00 00 
f011995f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119965:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011996a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119970:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119976:	ba 00 00 00 00       	mov    $0x0,%edx
f011997b:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119981:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119987:	29 d0                	sub    %edx,%eax
f0119989:	89 c1                	mov    %eax,%ecx
f011998b:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119992:	10 00 00 
f0119995:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011999a:	0f b6 d0             	movzbl %al,%edx
f011999d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01199a3:	01 d0                	add    %edx,%eax
f01199a5:	48                   	dec    %eax
f01199a6:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01199ac:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01199b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01199b7:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01199bd:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01199c3:	29 d0                	sub    %edx,%eax
f01199c5:	01 c1                	add    %eax,%ecx
f01199c7:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01199ce:	10 00 00 
f01199d1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01199d6:	0f b6 c0             	movzbl %al,%eax
f01199d9:	c1 e0 04             	shl    $0x4,%eax
f01199dc:	89 c2                	mov    %eax,%edx
f01199de:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01199e4:	01 d0                	add    %edx,%eax
f01199e6:	48                   	dec    %eax
f01199e7:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01199ed:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01199f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01199f8:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01199fe:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119a04:	29 d0                	sub    %edx,%eax
f0119a06:	01 c8                	add    %ecx,%eax
f0119a08:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119a0e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119a14:	39 c2                	cmp    %eax,%edx
f0119a16:	74 17                	je     f0119a2f <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119a18:	83 ec 04             	sub    $0x4,%esp
f0119a1b:	68 68 b9 13 f0       	push   $0xf013b968
f0119a20:	68 2f 01 00 00       	push   $0x12f
f0119a25:	68 5a b6 13 f0       	push   $0xf013b65a
f0119a2a:	e8 d6 67 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a2f:	e8 94 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a34:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a37:	74 17                	je     f0119a50 <test_kmalloc_nextfit+0xd54>
f0119a39:	83 ec 04             	sub    $0x4,%esp
f0119a3c:	68 74 b6 13 f0       	push   $0xf013b674
f0119a41:	68 30 01 00 00       	push   $0x130
f0119a46:	68 5a b6 13 f0       	push   $0xf013b65a
f0119a4b:	e8 b5 67 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119a50:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119a53:	e8 4b 34 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119a58:	29 c3                	sub    %eax,%ebx
f0119a5a:	89 d8                	mov    %ebx,%eax
f0119a5c:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119a61:	74 17                	je     f0119a7a <test_kmalloc_nextfit+0xd7e>
f0119a63:	83 ec 04             	sub    $0x4,%esp
f0119a66:	68 17 b9 13 f0       	push   $0xf013b917
f0119a6b:	68 31 01 00 00       	push   $0x131
f0119a70:	68 5a b6 13 f0       	push   $0xf013b65a
f0119a75:	e8 8b 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119a7a:	e8 49 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a82:	e8 1c 34 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119a87:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119a8a:	83 ec 0c             	sub    $0xc,%esp
f0119a8d:	68 00 00 10 00       	push   $0x100000
f0119a92:	e8 f5 e0 fe ff       	call   f0107b8c <kmalloc>
f0119a97:	83 c4 10             	add    $0x10,%esp
f0119a9a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119aa0:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119aa7:	10 00 00 
f0119aaa:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119ab0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ab5:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119abb:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119ac1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ac6:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119acc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119ad2:	29 d0                	sub    %edx,%eax
f0119ad4:	89 c1                	mov    %eax,%ecx
f0119ad6:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119add:	10 00 00 
f0119ae0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119ae5:	0f b6 d0             	movzbl %al,%edx
f0119ae8:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119aee:	01 d0                	add    %edx,%eax
f0119af0:	48                   	dec    %eax
f0119af1:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119af7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119afd:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b02:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119b08:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119b0e:	29 d0                	sub    %edx,%eax
f0119b10:	01 c1                	add    %eax,%ecx
f0119b12:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119b19:	10 00 00 
f0119b1c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119b21:	0f b6 c0             	movzbl %al,%eax
f0119b24:	c1 e0 04             	shl    $0x4,%eax
f0119b27:	89 c2                	mov    %eax,%edx
f0119b29:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119b2f:	01 d0                	add    %edx,%eax
f0119b31:	48                   	dec    %eax
f0119b32:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119b38:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119b3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b43:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119b49:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119b4f:	29 d0                	sub    %edx,%eax
f0119b51:	01 c8                	add    %ecx,%eax
f0119b53:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119b59:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119b5f:	39 c2                	cmp    %eax,%edx
f0119b61:	74 17                	je     f0119b7a <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119b63:	83 ec 04             	sub    $0x4,%esp
f0119b66:	68 68 b9 13 f0       	push   $0xf013b968
f0119b6b:	68 37 01 00 00       	push   $0x137
f0119b70:	68 5a b6 13 f0       	push   $0xf013b65a
f0119b75:	e8 8b 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b7a:	e8 49 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b7f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119b82:	74 17                	je     f0119b9b <test_kmalloc_nextfit+0xe9f>
f0119b84:	83 ec 04             	sub    $0x4,%esp
f0119b87:	68 74 b6 13 f0       	push   $0xf013b674
f0119b8c:	68 38 01 00 00       	push   $0x138
f0119b91:	68 5a b6 13 f0       	push   $0xf013b65a
f0119b96:	e8 6a 66 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119b9b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119b9e:	e8 00 33 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119ba3:	29 c3                	sub    %eax,%ebx
f0119ba5:	89 d8                	mov    %ebx,%eax
f0119ba7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119bac:	74 17                	je     f0119bc5 <test_kmalloc_nextfit+0xec9>
f0119bae:	83 ec 04             	sub    $0x4,%esp
f0119bb1:	68 17 b9 13 f0       	push   $0xf013b917
f0119bb6:	68 39 01 00 00       	push   $0x139
f0119bbb:	68 5a b6 13 f0       	push   $0xf013b65a
f0119bc0:	e8 40 66 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119bc5:	e8 fe a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119bca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119bcd:	e8 d1 32 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119bd5:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119bdb:	83 ec 0c             	sub    $0xc,%esp
f0119bde:	50                   	push   %eax
f0119bdf:	e8 73 e0 fe ff       	call   f0107c57 <kfree>
f0119be4:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119be7:	e8 dc a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119bec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119bef:	74 17                	je     f0119c08 <test_kmalloc_nextfit+0xf0c>
f0119bf1:	83 ec 04             	sub    $0x4,%esp
f0119bf4:	68 74 b6 13 f0       	push   $0xf013b674
f0119bf9:	68 3e 01 00 00       	push   $0x13e
f0119bfe:	68 5a b6 13 f0       	push   $0xf013b65a
f0119c03:	e8 fd 65 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119c08:	e8 96 32 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119c0d:	89 c2                	mov    %eax,%edx
f0119c0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119c12:	29 c2                	sub    %eax,%edx
f0119c14:	89 d0                	mov    %edx,%eax
f0119c16:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119c1b:	74 17                	je     f0119c34 <test_kmalloc_nextfit+0xf38>
f0119c1d:	83 ec 04             	sub    $0x4,%esp
f0119c20:	68 28 b9 13 f0       	push   $0xf013b928
f0119c25:	68 3f 01 00 00       	push   $0x13f
f0119c2a:	68 5a b6 13 f0       	push   $0xf013b65a
f0119c2f:	e8 d1 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c34:	e8 8f a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c39:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c3c:	e8 62 32 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119c41:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119c44:	83 ec 0c             	sub    $0xc,%esp
f0119c47:	68 00 04 00 00       	push   $0x400
f0119c4c:	e8 3b df fe ff       	call   f0107b8c <kmalloc>
f0119c51:	83 c4 10             	add    $0x10,%esp
f0119c54:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119c5a:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0119c61:	10 00 00 
f0119c64:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119c6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c6f:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119c75:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119c7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c80:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119c86:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119c8c:	29 d0                	sub    %edx,%eax
f0119c8e:	89 c1                	mov    %eax,%ecx
f0119c90:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119c97:	10 00 00 
f0119c9a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119c9f:	0f b6 d0             	movzbl %al,%edx
f0119ca2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119ca8:	01 d0                	add    %edx,%eax
f0119caa:	48                   	dec    %eax
f0119cab:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0119cb1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119cb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cbc:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119cc2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119cc8:	29 d0                	sub    %edx,%eax
f0119cca:	01 c1                	add    %eax,%ecx
f0119ccc:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0119cd3:	10 00 00 
f0119cd6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119cdb:	0f b6 c0             	movzbl %al,%eax
f0119cde:	c1 e0 04             	shl    $0x4,%eax
f0119ce1:	89 c2                	mov    %eax,%edx
f0119ce3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119ce9:	01 d0                	add    %edx,%eax
f0119ceb:	48                   	dec    %eax
f0119cec:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0119cf2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119cf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cfd:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0119d03:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119d09:	29 d0                	sub    %edx,%eax
f0119d0b:	01 c8                	add    %ecx,%eax
f0119d0d:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119d13:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d19:	39 c2                	cmp    %eax,%edx
f0119d1b:	74 17                	je     f0119d34 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119d1d:	83 ec 04             	sub    $0x4,%esp
f0119d20:	68 68 b9 13 f0       	push   $0xf013b968
f0119d25:	68 45 01 00 00       	push   $0x145
f0119d2a:	68 5a b6 13 f0       	push   $0xf013b65a
f0119d2f:	e8 d1 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d34:	e8 8f a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d39:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d3c:	74 17                	je     f0119d55 <test_kmalloc_nextfit+0x1059>
f0119d3e:	83 ec 04             	sub    $0x4,%esp
f0119d41:	68 74 b6 13 f0       	push   $0xf013b674
f0119d46:	68 46 01 00 00       	push   $0x146
f0119d4b:	68 5a b6 13 f0       	push   $0xf013b65a
f0119d50:	e8 b0 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d55:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d58:	e8 46 31 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119d5d:	29 c3                	sub    %eax,%ebx
f0119d5f:	89 d8                	mov    %ebx,%eax
f0119d61:	83 f8 01             	cmp    $0x1,%eax
f0119d64:	74 17                	je     f0119d7d <test_kmalloc_nextfit+0x1081>
f0119d66:	83 ec 04             	sub    $0x4,%esp
f0119d69:	68 17 b9 13 f0       	push   $0xf013b917
f0119d6e:	68 47 01 00 00       	push   $0x147
f0119d73:	68 5a b6 13 f0       	push   $0xf013b65a
f0119d78:	e8 88 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d7d:	e8 46 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d82:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d85:	e8 19 31 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119d8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119d8d:	83 ec 0c             	sub    $0xc,%esp
f0119d90:	68 00 e0 1f 00       	push   $0x1fe000
f0119d95:	e8 f2 dd fe ff       	call   f0107b8c <kmalloc>
f0119d9a:	83 c4 10             	add    $0x10,%esp
f0119d9d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119da3:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119daa:	10 00 00 
f0119dad:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119db3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119db8:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119dbe:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119dc4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dc9:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119dcf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119dd5:	29 d0                	sub    %edx,%eax
f0119dd7:	89 c1                	mov    %eax,%ecx
f0119dd9:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119de0:	10 00 00 
f0119de3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119de8:	0f b6 d0             	movzbl %al,%edx
f0119deb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0119df1:	01 d0                	add    %edx,%eax
f0119df3:	48                   	dec    %eax
f0119df4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119dfa:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119e00:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e05:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119e0b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119e11:	29 d0                	sub    %edx,%eax
f0119e13:	01 c1                	add    %eax,%ecx
f0119e15:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119e1c:	10 00 00 
f0119e1f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119e24:	0f b6 c0             	movzbl %al,%eax
f0119e27:	c1 e0 04             	shl    $0x4,%eax
f0119e2a:	89 c2                	mov    %eax,%edx
f0119e2c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119e32:	01 d0                	add    %edx,%eax
f0119e34:	48                   	dec    %eax
f0119e35:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119e3b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119e41:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e46:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119e4c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119e52:	29 d0                	sub    %edx,%eax
f0119e54:	01 c8                	add    %ecx,%eax
f0119e56:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119e5c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e62:	39 c2                	cmp    %eax,%edx
f0119e64:	74 17                	je     f0119e7d <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119e66:	83 ec 04             	sub    $0x4,%esp
f0119e69:	68 68 b9 13 f0       	push   $0xf013b968
f0119e6e:	68 4d 01 00 00       	push   $0x14d
f0119e73:	68 5a b6 13 f0       	push   $0xf013b65a
f0119e78:	e8 88 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e7d:	e8 46 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e82:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e85:	74 17                	je     f0119e9e <test_kmalloc_nextfit+0x11a2>
f0119e87:	83 ec 04             	sub    $0x4,%esp
f0119e8a:	68 74 b6 13 f0       	push   $0xf013b674
f0119e8f:	68 4e 01 00 00       	push   $0x14e
f0119e94:	68 5a b6 13 f0       	push   $0xf013b65a
f0119e99:	e8 67 63 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119e9e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ea1:	e8 fd 2f ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119ea6:	29 c3                	sub    %eax,%ebx
f0119ea8:	89 d8                	mov    %ebx,%eax
f0119eaa:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119eaf:	74 17                	je     f0119ec8 <test_kmalloc_nextfit+0x11cc>
f0119eb1:	83 ec 04             	sub    $0x4,%esp
f0119eb4:	68 17 b9 13 f0       	push   $0xf013b917
f0119eb9:	68 50 01 00 00       	push   $0x150
f0119ebe:	68 5a b6 13 f0       	push   $0xf013b65a
f0119ec3:	e8 3d 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ec8:	e8 fb 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119ecd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ed0:	e8 ce 2f ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119ed5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119ed8:	83 ec 0c             	sub    $0xc,%esp
f0119edb:	68 00 00 08 00       	push   $0x80000
f0119ee0:	e8 a7 dc fe ff       	call   f0107b8c <kmalloc>
f0119ee5:	83 c4 10             	add    $0x10,%esp
f0119ee8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119eee:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119ef5:	10 00 00 
f0119ef8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119efe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f03:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119f09:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119f0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f14:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119f1a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119f20:	29 d0                	sub    %edx,%eax
f0119f22:	89 c1                	mov    %eax,%ecx
f0119f24:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119f2b:	10 00 00 
f0119f2e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119f33:	0f b6 d0             	movzbl %al,%edx
f0119f36:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119f3c:	01 d0                	add    %edx,%eax
f0119f3e:	48                   	dec    %eax
f0119f3f:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119f45:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119f4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f50:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119f56:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119f5c:	29 d0                	sub    %edx,%eax
f0119f5e:	01 c1                	add    %eax,%ecx
f0119f60:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119f67:	10 00 00 
f0119f6a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0119f6f:	0f b6 c0             	movzbl %al,%eax
f0119f72:	c1 e0 04             	shl    $0x4,%eax
f0119f75:	89 c2                	mov    %eax,%edx
f0119f77:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119f7d:	01 d0                	add    %edx,%eax
f0119f7f:	48                   	dec    %eax
f0119f80:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119f86:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119f8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f91:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119f97:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119f9d:	29 d0                	sub    %edx,%eax
f0119f9f:	01 c8                	add    %ecx,%eax
f0119fa1:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119fa7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119fad:	39 c2                	cmp    %eax,%edx
f0119faf:	74 17                	je     f0119fc8 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0119fb1:	83 ec 04             	sub    $0x4,%esp
f0119fb4:	68 68 b9 13 f0       	push   $0xf013b968
f0119fb9:	68 56 01 00 00       	push   $0x156
f0119fbe:	68 5a b6 13 f0       	push   $0xf013b65a
f0119fc3:	e8 3d 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fc8:	e8 fb 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119fcd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fd0:	74 17                	je     f0119fe9 <test_kmalloc_nextfit+0x12ed>
f0119fd2:	83 ec 04             	sub    $0x4,%esp
f0119fd5:	68 74 b6 13 f0       	push   $0xf013b674
f0119fda:	68 57 01 00 00       	push   $0x157
f0119fdf:	68 5a b6 13 f0       	push   $0xf013b65a
f0119fe4:	e8 1c 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119fe9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119fec:	e8 b2 2e ff ff       	call   f010cea3 <sys_calculate_free_frames>
f0119ff1:	29 c3                	sub    %eax,%ebx
f0119ff3:	89 d8                	mov    %ebx,%eax
f0119ff5:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119ffa:	74 17                	je     f011a013 <test_kmalloc_nextfit+0x1317>
f0119ffc:	83 ec 04             	sub    $0x4,%esp
f0119fff:	68 17 b9 13 f0       	push   $0xf013b917
f011a004:	68 58 01 00 00       	push   $0x158
f011a009:	68 5a b6 13 f0       	push   $0xf013b65a
f011a00e:	e8 f2 61 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a013:	83 ec 0c             	sub    $0xc,%esp
f011a016:	68 88 b9 13 f0       	push   $0xf013b988
f011a01b:	e8 ee 6c fe ff       	call   f0100d0e <cprintf>
f011a020:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a023:	e8 a0 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a028:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a02b:	e8 73 2e ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a030:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a033:	83 ec 0c             	sub    $0xc,%esp
f011a036:	68 00 00 38 00       	push   $0x380000
f011a03b:	e8 4c db fe ff       	call   f0107b8c <kmalloc>
f011a040:	83 c4 10             	add    $0x10,%esp
f011a043:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a049:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a050:	10 00 00 
f011a053:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a059:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a05e:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a064:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a06a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a06f:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a075:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a07b:	29 d0                	sub    %edx,%eax
f011a07d:	89 c1                	mov    %eax,%ecx
f011a07f:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a086:	10 00 00 
f011a089:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a08e:	0f b6 d0             	movzbl %al,%edx
f011a091:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a097:	01 d0                	add    %edx,%eax
f011a099:	48                   	dec    %eax
f011a09a:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a0a0:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a0a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0ab:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a0b1:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a0b7:	29 d0                	sub    %edx,%eax
f011a0b9:	01 c1                	add    %eax,%ecx
f011a0bb:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a0c2:	10 00 00 
f011a0c5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a0ca:	0f b6 c0             	movzbl %al,%eax
f011a0cd:	c1 e0 04             	shl    $0x4,%eax
f011a0d0:	89 c2                	mov    %eax,%edx
f011a0d2:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a0d8:	01 d0                	add    %edx,%eax
f011a0da:	48                   	dec    %eax
f011a0db:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a0e1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a0e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0ec:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a0f2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a0f8:	29 d0                	sub    %edx,%eax
f011a0fa:	01 c8                	add    %ecx,%eax
f011a0fc:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a102:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a108:	39 c2                	cmp    %eax,%edx
f011a10a:	74 17                	je     f011a123 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a10c:	83 ec 04             	sub    $0x4,%esp
f011a10f:	68 68 b9 13 f0       	push   $0xf013b968
f011a114:	68 62 01 00 00       	push   $0x162
f011a119:	68 5a b6 13 f0       	push   $0xf013b65a
f011a11e:	e8 e2 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a123:	e8 a0 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a128:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a12b:	74 17                	je     f011a144 <test_kmalloc_nextfit+0x1448>
f011a12d:	83 ec 04             	sub    $0x4,%esp
f011a130:	68 74 b6 13 f0       	push   $0xf013b674
f011a135:	68 63 01 00 00       	push   $0x163
f011a13a:	68 5a b6 13 f0       	push   $0xf013b65a
f011a13f:	e8 c1 60 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a144:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a147:	e8 57 2d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a14c:	29 c3                	sub    %eax,%ebx
f011a14e:	89 d8                	mov    %ebx,%eax
f011a150:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a155:	74 17                	je     f011a16e <test_kmalloc_nextfit+0x1472>
f011a157:	83 ec 04             	sub    $0x4,%esp
f011a15a:	68 17 b9 13 f0       	push   $0xf013b917
f011a15f:	68 64 01 00 00       	push   $0x164
f011a164:	68 5a b6 13 f0       	push   $0xf013b65a
f011a169:	e8 97 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a16e:	e8 55 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a173:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a176:	e8 28 2d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a17b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a17e:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a184:	83 ec 0c             	sub    $0xc,%esp
f011a187:	50                   	push   %eax
f011a188:	e8 ca da fe ff       	call   f0107c57 <kfree>
f011a18d:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a190:	e8 33 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a195:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a198:	74 17                	je     f011a1b1 <test_kmalloc_nextfit+0x14b5>
f011a19a:	83 ec 04             	sub    $0x4,%esp
f011a19d:	68 74 b6 13 f0       	push   $0xf013b674
f011a1a2:	68 69 01 00 00       	push   $0x169
f011a1a7:	68 5a b6 13 f0       	push   $0xf013b65a
f011a1ac:	e8 54 60 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a1b1:	e8 ed 2c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a1b6:	89 c2                	mov    %eax,%edx
f011a1b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a1bb:	29 c2                	sub    %eax,%edx
f011a1bd:	89 d0                	mov    %edx,%eax
f011a1bf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a1c4:	74 17                	je     f011a1dd <test_kmalloc_nextfit+0x14e1>
f011a1c6:	83 ec 04             	sub    $0x4,%esp
f011a1c9:	68 28 b9 13 f0       	push   $0xf013b928
f011a1ce:	68 6a 01 00 00       	push   $0x16a
f011a1d3:	68 5a b6 13 f0       	push   $0xf013b65a
f011a1d8:	e8 28 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1dd:	e8 e6 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a1e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a1e5:	e8 b9 2c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a1ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a1ed:	83 ec 0c             	sub    $0xc,%esp
f011a1f0:	68 00 fc 3f 00       	push   $0x3ffc00
f011a1f5:	e8 92 d9 fe ff       	call   f0107b8c <kmalloc>
f011a1fa:	83 c4 10             	add    $0x10,%esp
f011a1fd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a203:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a20a:	10 00 00 
f011a20d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a213:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a218:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a21e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a224:	ba 00 00 00 00       	mov    $0x0,%edx
f011a229:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a22f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a235:	29 d0                	sub    %edx,%eax
f011a237:	89 c1                	mov    %eax,%ecx
f011a239:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a240:	10 00 00 
f011a243:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a248:	0f b6 d0             	movzbl %al,%edx
f011a24b:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a251:	01 d0                	add    %edx,%eax
f011a253:	48                   	dec    %eax
f011a254:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a25a:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a260:	ba 00 00 00 00       	mov    $0x0,%edx
f011a265:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a26b:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a271:	29 d0                	sub    %edx,%eax
f011a273:	01 c1                	add    %eax,%ecx
f011a275:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a27c:	10 00 00 
f011a27f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a284:	0f b6 c0             	movzbl %al,%eax
f011a287:	c1 e0 04             	shl    $0x4,%eax
f011a28a:	89 c2                	mov    %eax,%edx
f011a28c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a292:	01 d0                	add    %edx,%eax
f011a294:	48                   	dec    %eax
f011a295:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a29b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a2a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2a6:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a2ac:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a2b2:	29 d0                	sub    %edx,%eax
f011a2b4:	01 c8                	add    %ecx,%eax
f011a2b6:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a2bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a2c2:	39 c2                	cmp    %eax,%edx
f011a2c4:	74 17                	je     f011a2dd <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a2c6:	83 ec 04             	sub    $0x4,%esp
f011a2c9:	68 68 b9 13 f0       	push   $0xf013b968
f011a2ce:	68 70 01 00 00       	push   $0x170
f011a2d3:	68 5a b6 13 f0       	push   $0xf013b65a
f011a2d8:	e8 28 5f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2dd:	e8 e6 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a2e2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a2e5:	74 17                	je     f011a2fe <test_kmalloc_nextfit+0x1602>
f011a2e7:	83 ec 04             	sub    $0x4,%esp
f011a2ea:	68 74 b6 13 f0       	push   $0xf013b674
f011a2ef:	68 71 01 00 00       	push   $0x171
f011a2f4:	68 5a b6 13 f0       	push   $0xf013b65a
f011a2f9:	e8 07 5f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a2fe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a301:	e8 9d 2b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a306:	29 c3                	sub    %eax,%ebx
f011a308:	89 d8                	mov    %ebx,%eax
f011a30a:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a30f:	74 17                	je     f011a328 <test_kmalloc_nextfit+0x162c>
f011a311:	83 ec 04             	sub    $0x4,%esp
f011a314:	68 17 b9 13 f0       	push   $0xf013b917
f011a319:	68 72 01 00 00       	push   $0x172
f011a31e:	68 5a b6 13 f0       	push   $0xf013b65a
f011a323:	e8 dd 5e fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a328:	83 ec 0c             	sub    $0xc,%esp
f011a32b:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011a330:	e8 d9 69 fe ff       	call   f0100d0e <cprintf>
f011a335:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a338:	e8 8b 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a33d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a340:	e8 5e 2b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a345:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a348:	83 ec 0c             	sub    $0xc,%esp
f011a34b:	68 00 00 60 00       	push   $0x600000
f011a350:	e8 37 d8 fe ff       	call   f0107b8c <kmalloc>
f011a355:	83 c4 10             	add    $0x10,%esp
f011a358:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a35e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a364:	85 c0                	test   %eax,%eax
f011a366:	74 17                	je     f011a37f <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a368:	83 ec 04             	sub    $0x4,%esp
f011a36b:	68 68 b9 13 f0       	push   $0xf013b968
f011a370:	68 7c 01 00 00       	push   $0x17c
f011a375:	68 5a b6 13 f0       	push   $0xf013b65a
f011a37a:	e8 86 5e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a37f:	e8 44 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a384:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a387:	74 17                	je     f011a3a0 <test_kmalloc_nextfit+0x16a4>
f011a389:	83 ec 04             	sub    $0x4,%esp
f011a38c:	68 74 b6 13 f0       	push   $0xf013b674
f011a391:	68 7d 01 00 00       	push   $0x17d
f011a396:	68 5a b6 13 f0       	push   $0xf013b65a
f011a39b:	e8 65 5e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a3a0:	e8 fe 2a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a3a5:	89 c2                	mov    %eax,%edx
f011a3a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a3aa:	39 c2                	cmp    %eax,%edx
f011a3ac:	74 17                	je     f011a3c5 <test_kmalloc_nextfit+0x16c9>
f011a3ae:	83 ec 04             	sub    $0x4,%esp
f011a3b1:	68 17 b9 13 f0       	push   $0xf013b917
f011a3b6:	68 7e 01 00 00       	push   $0x17e
f011a3bb:	68 5a b6 13 f0       	push   $0xf013b65a
f011a3c0:	e8 40 5e fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a3c5:	83 ec 0c             	sub    $0xc,%esp
f011a3c8:	68 fc b9 13 f0       	push   $0xf013b9fc
f011a3cd:	e8 3c 69 fe ff       	call   f0100d0e <cprintf>
f011a3d2:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a3d5:	83 ec 0c             	sub    $0xc,%esp
f011a3d8:	68 38 ba 13 f0       	push   $0xf013ba38
f011a3dd:	e8 2c 69 fe ff       	call   f0100d0e <cprintf>
f011a3e2:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a3e5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a3ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a3ed:	5b                   	pop    %ebx
f011a3ee:	5f                   	pop    %edi
f011a3ef:	5d                   	pop    %ebp
f011a3f0:	c3                   	ret    

f011a3f1 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a3f1:	55                   	push   %ebp
f011a3f2:	89 e5                	mov    %esp,%ebp
f011a3f4:	57                   	push   %edi
f011a3f5:	53                   	push   %ebx
f011a3f6:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a3fc:	83 ec 0c             	sub    $0xc,%esp
f011a3ff:	68 9c b5 13 f0       	push   $0xf013b59c
f011a404:	e8 05 69 fe ff       	call   f0100d0e <cprintf>
f011a409:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a40c:	83 ec 0c             	sub    $0xc,%esp
f011a40f:	68 cc b5 13 f0       	push   $0xf013b5cc
f011a414:	e8 f5 68 fe ff       	call   f0100d0e <cprintf>
f011a419:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a41c:	83 ec 0c             	sub    $0xc,%esp
f011a41f:	68 9c b5 13 f0       	push   $0xf013b59c
f011a424:	e8 e5 68 fe ff       	call   f0100d0e <cprintf>
f011a429:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a42c:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a432:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a437:	b8 00 00 00 00       	mov    $0x0,%eax
f011a43c:	89 d7                	mov    %edx,%edi
f011a43e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a440:	e8 5e 2a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a445:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a448:	e8 7b 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a44d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a450:	83 ec 0c             	sub    $0xc,%esp
f011a453:	68 00 fc 2f 00       	push   $0x2ffc00
f011a458:	e8 2f d7 fe ff       	call   f0107b8c <kmalloc>
f011a45d:	83 c4 10             	add    $0x10,%esp
f011a460:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a466:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a46c:	89 c1                	mov    %eax,%ecx
f011a46e:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a475:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a478:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a47d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a480:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a483:	ba 00 00 00 00       	mov    $0x0,%edx
f011a488:	f7 75 ec             	divl   -0x14(%ebp)
f011a48b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a48e:	29 d0                	sub    %edx,%eax
f011a490:	89 c3                	mov    %eax,%ebx
f011a492:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a499:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a49e:	0f b6 d0             	movzbl %al,%edx
f011a4a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a4a4:	01 d0                	add    %edx,%eax
f011a4a6:	48                   	dec    %eax
f011a4a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a4aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a4ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4b2:	f7 75 e4             	divl   -0x1c(%ebp)
f011a4b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a4b8:	29 d0                	sub    %edx,%eax
f011a4ba:	01 c3                	add    %eax,%ebx
f011a4bc:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a4c3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a4c8:	0f b6 c0             	movzbl %al,%eax
f011a4cb:	c1 e0 04             	shl    $0x4,%eax
f011a4ce:	89 c2                	mov    %eax,%edx
f011a4d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a4d3:	01 d0                	add    %edx,%eax
f011a4d5:	48                   	dec    %eax
f011a4d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a4d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a4dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4e1:	f7 75 dc             	divl   -0x24(%ebp)
f011a4e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a4e7:	29 d0                	sub    %edx,%eax
f011a4e9:	01 d8                	add    %ebx,%eax
f011a4eb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a4f0:	39 c1                	cmp    %eax,%ecx
f011a4f2:	74 17                	je     f011a50b <test_kmalloc_bestfit1+0x11a>
f011a4f4:	83 ec 04             	sub    $0x4,%esp
f011a4f7:	68 74 ba 13 f0       	push   $0xf013ba74
f011a4fc:	68 98 01 00 00       	push   $0x198
f011a501:	68 5a b6 13 f0       	push   $0xf013b65a
f011a506:	e8 fa 5c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a50b:	e8 b8 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a510:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a513:	74 17                	je     f011a52c <test_kmalloc_bestfit1+0x13b>
f011a515:	83 ec 04             	sub    $0x4,%esp
f011a518:	68 74 b6 13 f0       	push   $0xf013b674
f011a51d:	68 99 01 00 00       	push   $0x199
f011a522:	68 5a b6 13 f0       	push   $0xf013b65a
f011a527:	e8 d9 5c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a52c:	e8 72 29 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a531:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a534:	29 c2                	sub    %eax,%edx
f011a536:	89 d0                	mov    %edx,%eax
f011a538:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a53d:	74 17                	je     f011a556 <test_kmalloc_bestfit1+0x165>
f011a53f:	83 ec 04             	sub    $0x4,%esp
f011a542:	68 a4 ba 13 f0       	push   $0xf013baa4
f011a547:	68 9a 01 00 00       	push   $0x19a
f011a54c:	68 5a b6 13 f0       	push   $0xf013b65a
f011a551:	e8 af 5c fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a556:	e8 48 29 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a55b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a55e:	e8 65 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a563:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a566:	83 ec 0c             	sub    $0xc,%esp
f011a569:	68 00 fc 2f 00       	push   $0x2ffc00
f011a56e:	e8 19 d6 fe ff       	call   f0107b8c <kmalloc>
f011a573:	83 c4 10             	add    $0x10,%esp
f011a576:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a57c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a582:	89 c1                	mov    %eax,%ecx
f011a584:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a58b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a58e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a593:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a596:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a599:	ba 00 00 00 00       	mov    $0x0,%edx
f011a59e:	f7 75 d4             	divl   -0x2c(%ebp)
f011a5a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a5a4:	29 d0                	sub    %edx,%eax
f011a5a6:	89 c3                	mov    %eax,%ebx
f011a5a8:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a5af:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a5b4:	0f b6 d0             	movzbl %al,%edx
f011a5b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a5ba:	01 d0                	add    %edx,%eax
f011a5bc:	48                   	dec    %eax
f011a5bd:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a5c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a5c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5c8:	f7 75 cc             	divl   -0x34(%ebp)
f011a5cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a5ce:	29 d0                	sub    %edx,%eax
f011a5d0:	01 c3                	add    %eax,%ebx
f011a5d2:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a5d9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a5de:	0f b6 c0             	movzbl %al,%eax
f011a5e1:	c1 e0 04             	shl    $0x4,%eax
f011a5e4:	89 c2                	mov    %eax,%edx
f011a5e6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a5e9:	01 d0                	add    %edx,%eax
f011a5eb:	48                   	dec    %eax
f011a5ec:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a5ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a5f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5f7:	f7 75 c4             	divl   -0x3c(%ebp)
f011a5fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a5fd:	29 d0                	sub    %edx,%eax
f011a5ff:	01 d8                	add    %ebx,%eax
f011a601:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a606:	39 c1                	cmp    %eax,%ecx
f011a608:	74 17                	je     f011a621 <test_kmalloc_bestfit1+0x230>
f011a60a:	83 ec 04             	sub    $0x4,%esp
f011a60d:	68 74 ba 13 f0       	push   $0xf013ba74
f011a612:	68 a0 01 00 00       	push   $0x1a0
f011a617:	68 5a b6 13 f0       	push   $0xf013b65a
f011a61c:	e8 e4 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a621:	e8 a2 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a626:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a629:	74 17                	je     f011a642 <test_kmalloc_bestfit1+0x251>
f011a62b:	83 ec 04             	sub    $0x4,%esp
f011a62e:	68 74 b6 13 f0       	push   $0xf013b674
f011a633:	68 a1 01 00 00       	push   $0x1a1
f011a638:	68 5a b6 13 f0       	push   $0xf013b65a
f011a63d:	e8 c3 5b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a642:	e8 5c 28 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a647:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a64a:	29 c2                	sub    %eax,%edx
f011a64c:	89 d0                	mov    %edx,%eax
f011a64e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a653:	74 17                	je     f011a66c <test_kmalloc_bestfit1+0x27b>
f011a655:	83 ec 04             	sub    $0x4,%esp
f011a658:	68 a4 ba 13 f0       	push   $0xf013baa4
f011a65d:	68 a2 01 00 00       	push   $0x1a2
f011a662:	68 5a b6 13 f0       	push   $0xf013b65a
f011a667:	e8 99 5b fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a66c:	e8 32 28 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a671:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a674:	e8 4f 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a679:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a67c:	83 ec 0c             	sub    $0xc,%esp
f011a67f:	68 00 fc 1f 00       	push   $0x1ffc00
f011a684:	e8 03 d5 fe ff       	call   f0107b8c <kmalloc>
f011a689:	83 c4 10             	add    $0x10,%esp
f011a68c:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a692:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a698:	89 c1                	mov    %eax,%ecx
f011a69a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a6a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a6a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a6a9:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a6ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a6af:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6b4:	f7 75 bc             	divl   -0x44(%ebp)
f011a6b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a6ba:	29 d0                	sub    %edx,%eax
f011a6bc:	89 c3                	mov    %eax,%ebx
f011a6be:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a6c5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a6ca:	0f b6 d0             	movzbl %al,%edx
f011a6cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a6d0:	01 d0                	add    %edx,%eax
f011a6d2:	48                   	dec    %eax
f011a6d3:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a6d6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a6d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6de:	f7 75 b4             	divl   -0x4c(%ebp)
f011a6e1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a6e4:	29 d0                	sub    %edx,%eax
f011a6e6:	01 c3                	add    %eax,%ebx
f011a6e8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a6ef:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a6f4:	0f b6 c0             	movzbl %al,%eax
f011a6f7:	c1 e0 04             	shl    $0x4,%eax
f011a6fa:	89 c2                	mov    %eax,%edx
f011a6fc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a6ff:	01 d0                	add    %edx,%eax
f011a701:	48                   	dec    %eax
f011a702:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a705:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a708:	ba 00 00 00 00       	mov    $0x0,%edx
f011a70d:	f7 75 ac             	divl   -0x54(%ebp)
f011a710:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a713:	29 d0                	sub    %edx,%eax
f011a715:	01 d8                	add    %ebx,%eax
f011a717:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a71c:	39 c1                	cmp    %eax,%ecx
f011a71e:	74 17                	je     f011a737 <test_kmalloc_bestfit1+0x346>
f011a720:	83 ec 04             	sub    $0x4,%esp
f011a723:	68 74 ba 13 f0       	push   $0xf013ba74
f011a728:	68 a8 01 00 00       	push   $0x1a8
f011a72d:	68 5a b6 13 f0       	push   $0xf013b65a
f011a732:	e8 ce 5a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a737:	e8 8c 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a73c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a73f:	74 17                	je     f011a758 <test_kmalloc_bestfit1+0x367>
f011a741:	83 ec 04             	sub    $0x4,%esp
f011a744:	68 74 b6 13 f0       	push   $0xf013b674
f011a749:	68 a9 01 00 00       	push   $0x1a9
f011a74e:	68 5a b6 13 f0       	push   $0xf013b65a
f011a753:	e8 ad 5a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a758:	e8 46 27 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a75d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a760:	29 c2                	sub    %eax,%edx
f011a762:	89 d0                	mov    %edx,%eax
f011a764:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a769:	74 17                	je     f011a782 <test_kmalloc_bestfit1+0x391>
f011a76b:	83 ec 04             	sub    $0x4,%esp
f011a76e:	68 a4 ba 13 f0       	push   $0xf013baa4
f011a773:	68 aa 01 00 00       	push   $0x1aa
f011a778:	68 5a b6 13 f0       	push   $0xf013b65a
f011a77d:	e8 83 5a fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a782:	e8 1c 27 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a787:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a78a:	e8 39 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a78f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a792:	83 ec 0c             	sub    $0xc,%esp
f011a795:	68 00 fc 1f 00       	push   $0x1ffc00
f011a79a:	e8 ed d3 fe ff       	call   f0107b8c <kmalloc>
f011a79f:	83 c4 10             	add    $0x10,%esp
f011a7a2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a7a8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a7ae:	89 c1                	mov    %eax,%ecx
f011a7b0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a7b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a7ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a7bf:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a7c2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a7c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7ca:	f7 75 a4             	divl   -0x5c(%ebp)
f011a7cd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a7d0:	29 d0                	sub    %edx,%eax
f011a7d2:	89 c3                	mov    %eax,%ebx
f011a7d4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a7db:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a7e0:	0f b6 d0             	movzbl %al,%edx
f011a7e3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a7e6:	01 d0                	add    %edx,%eax
f011a7e8:	48                   	dec    %eax
f011a7e9:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a7ec:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a7ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7f4:	f7 75 9c             	divl   -0x64(%ebp)
f011a7f7:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a7fa:	29 d0                	sub    %edx,%eax
f011a7fc:	01 c3                	add    %eax,%ebx
f011a7fe:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a805:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a80a:	0f b6 c0             	movzbl %al,%eax
f011a80d:	c1 e0 04             	shl    $0x4,%eax
f011a810:	89 c2                	mov    %eax,%edx
f011a812:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a815:	01 d0                	add    %edx,%eax
f011a817:	48                   	dec    %eax
f011a818:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a81b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a81e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a823:	f7 75 94             	divl   -0x6c(%ebp)
f011a826:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a829:	29 d0                	sub    %edx,%eax
f011a82b:	01 d8                	add    %ebx,%eax
f011a82d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a832:	39 c1                	cmp    %eax,%ecx
f011a834:	74 17                	je     f011a84d <test_kmalloc_bestfit1+0x45c>
f011a836:	83 ec 04             	sub    $0x4,%esp
f011a839:	68 74 ba 13 f0       	push   $0xf013ba74
f011a83e:	68 b0 01 00 00       	push   $0x1b0
f011a843:	68 5a b6 13 f0       	push   $0xf013b65a
f011a848:	e8 b8 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a84d:	e8 76 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a852:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a855:	74 17                	je     f011a86e <test_kmalloc_bestfit1+0x47d>
f011a857:	83 ec 04             	sub    $0x4,%esp
f011a85a:	68 74 b6 13 f0       	push   $0xf013b674
f011a85f:	68 b1 01 00 00       	push   $0x1b1
f011a864:	68 5a b6 13 f0       	push   $0xf013b65a
f011a869:	e8 97 59 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a86e:	e8 30 26 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a873:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a876:	29 c2                	sub    %eax,%edx
f011a878:	89 d0                	mov    %edx,%eax
f011a87a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a87f:	74 17                	je     f011a898 <test_kmalloc_bestfit1+0x4a7>
f011a881:	83 ec 04             	sub    $0x4,%esp
f011a884:	68 a4 ba 13 f0       	push   $0xf013baa4
f011a889:	68 b2 01 00 00       	push   $0x1b2
f011a88e:	68 5a b6 13 f0       	push   $0xf013b65a
f011a893:	e8 6d 59 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a898:	e8 06 26 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a89d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a8a0:	e8 23 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a8a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a8a8:	83 ec 0c             	sub    $0xc,%esp
f011a8ab:	68 00 fc 0f 00       	push   $0xffc00
f011a8b0:	e8 d7 d2 fe ff       	call   f0107b8c <kmalloc>
f011a8b5:	83 c4 10             	add    $0x10,%esp
f011a8b8:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a8be:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a8c4:	89 c1                	mov    %eax,%ecx
f011a8c6:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a8cd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a8d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8d5:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a8d8:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a8db:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8e0:	f7 75 8c             	divl   -0x74(%ebp)
f011a8e3:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a8e6:	29 d0                	sub    %edx,%eax
f011a8e8:	89 c3                	mov    %eax,%ebx
f011a8ea:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a8f1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a8f6:	0f b6 d0             	movzbl %al,%edx
f011a8f9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a8fc:	01 d0                	add    %edx,%eax
f011a8fe:	48                   	dec    %eax
f011a8ff:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a902:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a905:	ba 00 00 00 00       	mov    $0x0,%edx
f011a90a:	f7 75 84             	divl   -0x7c(%ebp)
f011a90d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a910:	29 d0                	sub    %edx,%eax
f011a912:	01 c3                	add    %eax,%ebx
f011a914:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a91b:	10 00 00 
f011a91e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011a923:	0f b6 c0             	movzbl %al,%eax
f011a926:	c1 e0 04             	shl    $0x4,%eax
f011a929:	89 c2                	mov    %eax,%edx
f011a92b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a931:	01 d0                	add    %edx,%eax
f011a933:	48                   	dec    %eax
f011a934:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a93a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a940:	ba 00 00 00 00       	mov    $0x0,%edx
f011a945:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a94b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a951:	29 d0                	sub    %edx,%eax
f011a953:	01 d8                	add    %ebx,%eax
f011a955:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a95a:	39 c1                	cmp    %eax,%ecx
f011a95c:	74 17                	je     f011a975 <test_kmalloc_bestfit1+0x584>
f011a95e:	83 ec 04             	sub    $0x4,%esp
f011a961:	68 74 ba 13 f0       	push   $0xf013ba74
f011a966:	68 b8 01 00 00       	push   $0x1b8
f011a96b:	68 5a b6 13 f0       	push   $0xf013b65a
f011a970:	e8 90 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a975:	e8 4e 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a97a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a97d:	74 17                	je     f011a996 <test_kmalloc_bestfit1+0x5a5>
f011a97f:	83 ec 04             	sub    $0x4,%esp
f011a982:	68 74 b6 13 f0       	push   $0xf013b674
f011a987:	68 b9 01 00 00       	push   $0x1b9
f011a98c:	68 5a b6 13 f0       	push   $0xf013b65a
f011a991:	e8 6f 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a996:	e8 08 25 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a99b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a99e:	29 c2                	sub    %eax,%edx
f011a9a0:	89 d0                	mov    %edx,%eax
f011a9a2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a9a7:	74 17                	je     f011a9c0 <test_kmalloc_bestfit1+0x5cf>
f011a9a9:	83 ec 04             	sub    $0x4,%esp
f011a9ac:	68 a4 ba 13 f0       	push   $0xf013baa4
f011a9b1:	68 ba 01 00 00       	push   $0x1ba
f011a9b6:	68 5a b6 13 f0       	push   $0xf013b65a
f011a9bb:	e8 45 58 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a9c0:	e8 de 24 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011a9c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9c8:	e8 fb 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a9d0:	83 ec 0c             	sub    $0xc,%esp
f011a9d3:	68 00 fc 0f 00       	push   $0xffc00
f011a9d8:	e8 af d1 fe ff       	call   f0107b8c <kmalloc>
f011a9dd:	83 c4 10             	add    $0x10,%esp
f011a9e0:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a9e6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a9ec:	89 c1                	mov    %eax,%ecx
f011a9ee:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a9f5:	10 00 00 
f011a9f8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a9fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aa03:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011aa09:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aa0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa14:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011aa1a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aa20:	29 d0                	sub    %edx,%eax
f011aa22:	89 c3                	mov    %eax,%ebx
f011aa24:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011aa2b:	10 00 00 
f011aa2e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011aa33:	0f b6 d0             	movzbl %al,%edx
f011aa36:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011aa3c:	01 d0                	add    %edx,%eax
f011aa3e:	48                   	dec    %eax
f011aa3f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011aa45:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aa4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa50:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011aa56:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aa5c:	29 d0                	sub    %edx,%eax
f011aa5e:	01 c3                	add    %eax,%ebx
f011aa60:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011aa67:	10 00 00 
f011aa6a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011aa6f:	0f b6 c0             	movzbl %al,%eax
f011aa72:	c1 e0 04             	shl    $0x4,%eax
f011aa75:	89 c2                	mov    %eax,%edx
f011aa77:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011aa7d:	01 d0                	add    %edx,%eax
f011aa7f:	48                   	dec    %eax
f011aa80:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011aa86:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aa8c:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa91:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011aa97:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aa9d:	29 d0                	sub    %edx,%eax
f011aa9f:	01 d8                	add    %ebx,%eax
f011aaa1:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011aaa6:	39 c1                	cmp    %eax,%ecx
f011aaa8:	74 17                	je     f011aac1 <test_kmalloc_bestfit1+0x6d0>
f011aaaa:	83 ec 04             	sub    $0x4,%esp
f011aaad:	68 74 ba 13 f0       	push   $0xf013ba74
f011aab2:	68 c0 01 00 00       	push   $0x1c0
f011aab7:	68 5a b6 13 f0       	push   $0xf013b65a
f011aabc:	e8 44 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aac1:	e8 02 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aac6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aac9:	74 17                	je     f011aae2 <test_kmalloc_bestfit1+0x6f1>
f011aacb:	83 ec 04             	sub    $0x4,%esp
f011aace:	68 74 b6 13 f0       	push   $0xf013b674
f011aad3:	68 c1 01 00 00       	push   $0x1c1
f011aad8:	68 5a b6 13 f0       	push   $0xf013b65a
f011aadd:	e8 23 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aae2:	e8 bc 23 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011aae7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aaea:	29 c2                	sub    %eax,%edx
f011aaec:	89 d0                	mov    %edx,%eax
f011aaee:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aaf3:	74 17                	je     f011ab0c <test_kmalloc_bestfit1+0x71b>
f011aaf5:	83 ec 04             	sub    $0x4,%esp
f011aaf8:	68 a4 ba 13 f0       	push   $0xf013baa4
f011aafd:	68 c2 01 00 00       	push   $0x1c2
f011ab02:	68 5a b6 13 f0       	push   $0xf013b65a
f011ab07:	e8 f9 56 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab0c:	e8 92 23 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ab11:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab14:	e8 af 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab19:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011ab1c:	83 ec 0c             	sub    $0xc,%esp
f011ab1f:	68 00 fc 0f 00       	push   $0xffc00
f011ab24:	e8 63 d0 fe ff       	call   f0107b8c <kmalloc>
f011ab29:	83 c4 10             	add    $0x10,%esp
f011ab2c:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011ab32:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ab38:	89 c1                	mov    %eax,%ecx
f011ab3a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ab41:	10 00 00 
f011ab44:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ab4a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab4f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ab55:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ab5b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab60:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ab66:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ab6c:	29 d0                	sub    %edx,%eax
f011ab6e:	89 c3                	mov    %eax,%ebx
f011ab70:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ab77:	10 00 00 
f011ab7a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ab7f:	0f b6 d0             	movzbl %al,%edx
f011ab82:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ab88:	01 d0                	add    %edx,%eax
f011ab8a:	48                   	dec    %eax
f011ab8b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ab91:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ab97:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab9c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011aba2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011aba8:	29 d0                	sub    %edx,%eax
f011abaa:	01 c3                	add    %eax,%ebx
f011abac:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011abb3:	10 00 00 
f011abb6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011abbb:	0f b6 c0             	movzbl %al,%eax
f011abbe:	c1 e0 04             	shl    $0x4,%eax
f011abc1:	89 c2                	mov    %eax,%edx
f011abc3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011abc9:	01 d0                	add    %edx,%eax
f011abcb:	48                   	dec    %eax
f011abcc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011abd2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011abd8:	ba 00 00 00 00       	mov    $0x0,%edx
f011abdd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011abe3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011abe9:	29 d0                	sub    %edx,%eax
f011abeb:	01 d8                	add    %ebx,%eax
f011abed:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011abf2:	39 c1                	cmp    %eax,%ecx
f011abf4:	74 17                	je     f011ac0d <test_kmalloc_bestfit1+0x81c>
f011abf6:	83 ec 04             	sub    $0x4,%esp
f011abf9:	68 74 ba 13 f0       	push   $0xf013ba74
f011abfe:	68 c8 01 00 00       	push   $0x1c8
f011ac03:	68 5a b6 13 f0       	push   $0xf013b65a
f011ac08:	e8 f8 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac0d:	e8 b6 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac12:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac15:	74 17                	je     f011ac2e <test_kmalloc_bestfit1+0x83d>
f011ac17:	83 ec 04             	sub    $0x4,%esp
f011ac1a:	68 74 b6 13 f0       	push   $0xf013b674
f011ac1f:	68 c9 01 00 00       	push   $0x1c9
f011ac24:	68 5a b6 13 f0       	push   $0xf013b65a
f011ac29:	e8 d7 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ac2e:	e8 70 22 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ac33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac36:	29 c2                	sub    %eax,%edx
f011ac38:	89 d0                	mov    %edx,%eax
f011ac3a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ac3f:	74 17                	je     f011ac58 <test_kmalloc_bestfit1+0x867>
f011ac41:	83 ec 04             	sub    $0x4,%esp
f011ac44:	68 a4 ba 13 f0       	push   $0xf013baa4
f011ac49:	68 ca 01 00 00       	push   $0x1ca
f011ac4e:	68 5a b6 13 f0       	push   $0xf013b65a
f011ac53:	e8 ad 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac58:	e8 46 22 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ac5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac60:	e8 63 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac65:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011ac68:	83 ec 0c             	sub    $0xc,%esp
f011ac6b:	68 00 fc 0f 00       	push   $0xffc00
f011ac70:	e8 17 cf fe ff       	call   f0107b8c <kmalloc>
f011ac75:	83 c4 10             	add    $0x10,%esp
f011ac78:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011ac7e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ac84:	89 c1                	mov    %eax,%ecx
f011ac86:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ac8d:	10 00 00 
f011ac90:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ac96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac9b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011aca1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011aca7:	ba 00 00 00 00       	mov    $0x0,%edx
f011acac:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011acb2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011acb8:	29 d0                	sub    %edx,%eax
f011acba:	89 c3                	mov    %eax,%ebx
f011acbc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011acc3:	10 00 00 
f011acc6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011accb:	0f b6 d0             	movzbl %al,%edx
f011acce:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011acd4:	01 d0                	add    %edx,%eax
f011acd6:	48                   	dec    %eax
f011acd7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011acdd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ace3:	ba 00 00 00 00       	mov    $0x0,%edx
f011ace8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011acee:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011acf4:	29 d0                	sub    %edx,%eax
f011acf6:	01 c3                	add    %eax,%ebx
f011acf8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011acff:	10 00 00 
f011ad02:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ad07:	0f b6 c0             	movzbl %al,%eax
f011ad0a:	c1 e0 04             	shl    $0x4,%eax
f011ad0d:	89 c2                	mov    %eax,%edx
f011ad0f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ad15:	01 d0                	add    %edx,%eax
f011ad17:	48                   	dec    %eax
f011ad18:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ad1e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ad24:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad29:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ad2f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ad35:	29 d0                	sub    %edx,%eax
f011ad37:	01 d8                	add    %ebx,%eax
f011ad39:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ad3e:	39 c1                	cmp    %eax,%ecx
f011ad40:	74 17                	je     f011ad59 <test_kmalloc_bestfit1+0x968>
f011ad42:	83 ec 04             	sub    $0x4,%esp
f011ad45:	68 74 ba 13 f0       	push   $0xf013ba74
f011ad4a:	68 d0 01 00 00       	push   $0x1d0
f011ad4f:	68 5a b6 13 f0       	push   $0xf013b65a
f011ad54:	e8 ac 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad59:	e8 6a 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad5e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad61:	74 17                	je     f011ad7a <test_kmalloc_bestfit1+0x989>
f011ad63:	83 ec 04             	sub    $0x4,%esp
f011ad66:	68 74 b6 13 f0       	push   $0xf013b674
f011ad6b:	68 d1 01 00 00       	push   $0x1d1
f011ad70:	68 5a b6 13 f0       	push   $0xf013b65a
f011ad75:	e8 8b 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ad7a:	e8 24 21 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ad7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad82:	29 c2                	sub    %eax,%edx
f011ad84:	89 d0                	mov    %edx,%eax
f011ad86:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ad8b:	74 17                	je     f011ada4 <test_kmalloc_bestfit1+0x9b3>
f011ad8d:	83 ec 04             	sub    $0x4,%esp
f011ad90:	68 a4 ba 13 f0       	push   $0xf013baa4
f011ad95:	68 d2 01 00 00       	push   $0x1d2
f011ad9a:	68 5a b6 13 f0       	push   $0xf013b65a
f011ad9f:	e8 61 54 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ada4:	e8 fa 20 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ada9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011adac:	e8 17 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011adb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011adb4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011adba:	83 ec 0c             	sub    $0xc,%esp
f011adbd:	50                   	push   %eax
f011adbe:	e8 94 ce fe ff       	call   f0107c57 <kfree>
f011adc3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adc6:	e8 fd 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011adcb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adce:	74 17                	je     f011ade7 <test_kmalloc_bestfit1+0x9f6>
f011add0:	83 ec 04             	sub    $0x4,%esp
f011add3:	68 74 b6 13 f0       	push   $0xf013b674
f011add8:	68 db 01 00 00       	push   $0x1db
f011addd:	68 5a b6 13 f0       	push   $0xf013b65a
f011ade2:	e8 1e 54 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011ade7:	e8 b7 20 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011adec:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011adef:	3d 00 03 00 00       	cmp    $0x300,%eax
f011adf4:	74 17                	je     f011ae0d <test_kmalloc_bestfit1+0xa1c>
f011adf6:	83 ec 04             	sub    $0x4,%esp
f011adf9:	68 b7 ba 13 f0       	push   $0xf013bab7
f011adfe:	68 dc 01 00 00       	push   $0x1dc
f011ae03:	68 5a b6 13 f0       	push   $0xf013b65a
f011ae08:	e8 f8 53 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ae0d:	e8 91 20 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ae12:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae15:	e8 ae 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011ae1d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ae23:	83 ec 0c             	sub    $0xc,%esp
f011ae26:	50                   	push   %eax
f011ae27:	e8 2b ce fe ff       	call   f0107c57 <kfree>
f011ae2c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae2f:	e8 94 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae37:	74 17                	je     f011ae50 <test_kmalloc_bestfit1+0xa5f>
f011ae39:	83 ec 04             	sub    $0x4,%esp
f011ae3c:	68 74 b6 13 f0       	push   $0xf013b674
f011ae41:	68 e2 01 00 00       	push   $0x1e2
f011ae46:	68 5a b6 13 f0       	push   $0xf013b65a
f011ae4b:	e8 b5 53 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011ae50:	e8 4e 20 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ae55:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ae58:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ae5d:	74 17                	je     f011ae76 <test_kmalloc_bestfit1+0xa85>
f011ae5f:	83 ec 04             	sub    $0x4,%esp
f011ae62:	68 b7 ba 13 f0       	push   $0xf013bab7
f011ae67:	68 e3 01 00 00       	push   $0x1e3
f011ae6c:	68 5a b6 13 f0       	push   $0xf013b65a
f011ae71:	e8 8f 53 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ae76:	e8 28 20 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ae7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae7e:	e8 45 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae83:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011ae86:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ae8c:	83 ec 0c             	sub    $0xc,%esp
f011ae8f:	50                   	push   %eax
f011ae90:	e8 c2 cd fe ff       	call   f0107c57 <kfree>
f011ae95:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae98:	e8 2b 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aea0:	74 17                	je     f011aeb9 <test_kmalloc_bestfit1+0xac8>
f011aea2:	83 ec 04             	sub    $0x4,%esp
f011aea5:	68 74 b6 13 f0       	push   $0xf013b674
f011aeaa:	68 e9 01 00 00       	push   $0x1e9
f011aeaf:	68 5a b6 13 f0       	push   $0xf013b65a
f011aeb4:	e8 4c 53 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011aeb9:	e8 e5 1f ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011aebe:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aec1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aec6:	74 17                	je     f011aedf <test_kmalloc_bestfit1+0xaee>
f011aec8:	83 ec 04             	sub    $0x4,%esp
f011aecb:	68 b7 ba 13 f0       	push   $0xf013bab7
f011aed0:	68 ea 01 00 00       	push   $0x1ea
f011aed5:	68 5a b6 13 f0       	push   $0xf013b65a
f011aeda:	e8 26 53 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011aedf:	e8 bf 1f ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011aee4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aee7:	e8 dc 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aeec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011aeef:	83 ec 0c             	sub    $0xc,%esp
f011aef2:	68 00 00 08 00       	push   $0x80000
f011aef7:	e8 90 cc fe ff       	call   f0107b8c <kmalloc>
f011aefc:	83 c4 10             	add    $0x10,%esp
f011aeff:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011af05:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011af0b:	89 c1                	mov    %eax,%ecx
f011af0d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011af14:	10 00 00 
f011af17:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011af1d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af22:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011af28:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011af2e:	ba 00 00 00 00       	mov    $0x0,%edx
f011af33:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011af39:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011af3f:	29 d0                	sub    %edx,%eax
f011af41:	89 c3                	mov    %eax,%ebx
f011af43:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011af4a:	10 00 00 
f011af4d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011af52:	0f b6 d0             	movzbl %al,%edx
f011af55:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011af5b:	01 d0                	add    %edx,%eax
f011af5d:	48                   	dec    %eax
f011af5e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011af64:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011af6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011af6f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011af75:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011af7b:	29 d0                	sub    %edx,%eax
f011af7d:	01 c3                	add    %eax,%ebx
f011af7f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011af86:	10 00 00 
f011af89:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011af8e:	0f b6 c0             	movzbl %al,%eax
f011af91:	c1 e0 04             	shl    $0x4,%eax
f011af94:	89 c2                	mov    %eax,%edx
f011af96:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011af9c:	01 d0                	add    %edx,%eax
f011af9e:	48                   	dec    %eax
f011af9f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011afa5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011afab:	ba 00 00 00 00       	mov    $0x0,%edx
f011afb0:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011afb6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011afbc:	29 d0                	sub    %edx,%eax
f011afbe:	01 d8                	add    %ebx,%eax
f011afc0:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011afc5:	39 c1                	cmp    %eax,%ecx
f011afc7:	74 17                	je     f011afe0 <test_kmalloc_bestfit1+0xbef>
f011afc9:	83 ec 04             	sub    $0x4,%esp
f011afcc:	68 74 ba 13 f0       	push   $0xf013ba74
f011afd1:	68 f3 01 00 00       	push   $0x1f3
f011afd6:	68 5a b6 13 f0       	push   $0xf013b65a
f011afdb:	e8 25 52 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011afe0:	e8 e3 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011afe5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011afe8:	74 17                	je     f011b001 <test_kmalloc_bestfit1+0xc10>
f011afea:	83 ec 04             	sub    $0x4,%esp
f011afed:	68 74 b6 13 f0       	push   $0xf013b674
f011aff2:	68 f4 01 00 00       	push   $0x1f4
f011aff7:	68 5a b6 13 f0       	push   $0xf013b65a
f011affc:	e8 04 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b001:	e8 9d 1e ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b006:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b009:	29 c2                	sub    %eax,%edx
f011b00b:	89 d0                	mov    %edx,%eax
f011b00d:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b012:	74 17                	je     f011b02b <test_kmalloc_bestfit1+0xc3a>
f011b014:	83 ec 04             	sub    $0x4,%esp
f011b017:	68 a4 ba 13 f0       	push   $0xf013baa4
f011b01c:	68 f5 01 00 00       	push   $0x1f5
f011b021:	68 5a b6 13 f0       	push   $0xf013b65a
f011b026:	e8 da 51 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b02b:	e8 73 1e ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b030:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b033:	e8 90 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b038:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b03b:	83 ec 0c             	sub    $0xc,%esp
f011b03e:	68 00 fc 0f 00       	push   $0xffc00
f011b043:	e8 44 cb fe ff       	call   f0107b8c <kmalloc>
f011b048:	83 c4 10             	add    $0x10,%esp
f011b04b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b051:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b057:	89 c1                	mov    %eax,%ecx
f011b059:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b060:	10 00 00 
f011b063:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b069:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b06e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b074:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b07a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b07f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b085:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b08b:	29 d0                	sub    %edx,%eax
f011b08d:	89 c3                	mov    %eax,%ebx
f011b08f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b096:	10 00 00 
f011b099:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b09e:	0f b6 d0             	movzbl %al,%edx
f011b0a1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b0a7:	01 d0                	add    %edx,%eax
f011b0a9:	48                   	dec    %eax
f011b0aa:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b0b0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b0b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0bb:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b0c1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b0c7:	29 d0                	sub    %edx,%eax
f011b0c9:	01 c3                	add    %eax,%ebx
f011b0cb:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b0d2:	10 00 00 
f011b0d5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b0da:	0f b6 c0             	movzbl %al,%eax
f011b0dd:	c1 e0 04             	shl    $0x4,%eax
f011b0e0:	89 c2                	mov    %eax,%edx
f011b0e2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b0e8:	01 d0                	add    %edx,%eax
f011b0ea:	48                   	dec    %eax
f011b0eb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b0f1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b0f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0fc:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b102:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b108:	29 d0                	sub    %edx,%eax
f011b10a:	01 d8                	add    %ebx,%eax
f011b10c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b111:	39 c1                	cmp    %eax,%ecx
f011b113:	74 17                	je     f011b12c <test_kmalloc_bestfit1+0xd3b>
f011b115:	83 ec 04             	sub    $0x4,%esp
f011b118:	68 74 ba 13 f0       	push   $0xf013ba74
f011b11d:	68 fb 01 00 00       	push   $0x1fb
f011b122:	68 5a b6 13 f0       	push   $0xf013b65a
f011b127:	e8 d9 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b12c:	e8 97 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b131:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b134:	74 17                	je     f011b14d <test_kmalloc_bestfit1+0xd5c>
f011b136:	83 ec 04             	sub    $0x4,%esp
f011b139:	68 74 b6 13 f0       	push   $0xf013b674
f011b13e:	68 fc 01 00 00       	push   $0x1fc
f011b143:	68 5a b6 13 f0       	push   $0xf013b65a
f011b148:	e8 b8 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b14d:	e8 51 1d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b152:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b155:	29 c2                	sub    %eax,%edx
f011b157:	89 d0                	mov    %edx,%eax
f011b159:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b15e:	74 17                	je     f011b177 <test_kmalloc_bestfit1+0xd86>
f011b160:	83 ec 04             	sub    $0x4,%esp
f011b163:	68 a4 ba 13 f0       	push   $0xf013baa4
f011b168:	68 fd 01 00 00       	push   $0x1fd
f011b16d:	68 5a b6 13 f0       	push   $0xf013b65a
f011b172:	e8 8e 50 fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b177:	e8 27 1d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b17c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b17f:	e8 44 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b184:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b187:	83 ec 0c             	sub    $0xc,%esp
f011b18a:	68 00 fc 03 00       	push   $0x3fc00
f011b18f:	e8 f8 c9 fe ff       	call   f0107b8c <kmalloc>
f011b194:	83 c4 10             	add    $0x10,%esp
f011b197:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b19d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b1a3:	89 c1                	mov    %eax,%ecx
f011b1a5:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b1ac:	10 00 00 
f011b1af:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b1b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b1ba:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b1c0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b1c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1cb:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b1d1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b1d7:	29 d0                	sub    %edx,%eax
f011b1d9:	89 c3                	mov    %eax,%ebx
f011b1db:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b1e2:	10 00 00 
f011b1e5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b1ea:	0f b6 d0             	movzbl %al,%edx
f011b1ed:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b1f3:	01 d0                	add    %edx,%eax
f011b1f5:	48                   	dec    %eax
f011b1f6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b1fc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b202:	ba 00 00 00 00       	mov    $0x0,%edx
f011b207:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b20d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b213:	29 d0                	sub    %edx,%eax
f011b215:	01 c3                	add    %eax,%ebx
f011b217:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b21e:	10 00 00 
f011b221:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b226:	0f b6 c0             	movzbl %al,%eax
f011b229:	c1 e0 04             	shl    $0x4,%eax
f011b22c:	89 c2                	mov    %eax,%edx
f011b22e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b234:	01 d0                	add    %edx,%eax
f011b236:	48                   	dec    %eax
f011b237:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b23d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b243:	ba 00 00 00 00       	mov    $0x0,%edx
f011b248:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b24e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b254:	29 d0                	sub    %edx,%eax
f011b256:	01 d8                	add    %ebx,%eax
f011b258:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b25d:	39 c1                	cmp    %eax,%ecx
f011b25f:	74 17                	je     f011b278 <test_kmalloc_bestfit1+0xe87>
f011b261:	83 ec 04             	sub    $0x4,%esp
f011b264:	68 74 ba 13 f0       	push   $0xf013ba74
f011b269:	68 03 02 00 00       	push   $0x203
f011b26e:	68 5a b6 13 f0       	push   $0xf013b65a
f011b273:	e8 8d 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b278:	e8 4b 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b27d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b280:	74 17                	je     f011b299 <test_kmalloc_bestfit1+0xea8>
f011b282:	83 ec 04             	sub    $0x4,%esp
f011b285:	68 74 b6 13 f0       	push   $0xf013b674
f011b28a:	68 04 02 00 00       	push   $0x204
f011b28f:	68 5a b6 13 f0       	push   $0xf013b65a
f011b294:	e8 6c 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b299:	e8 05 1c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b29e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b2a1:	29 c2                	sub    %eax,%edx
f011b2a3:	89 d0                	mov    %edx,%eax
f011b2a5:	83 f8 40             	cmp    $0x40,%eax
f011b2a8:	74 17                	je     f011b2c1 <test_kmalloc_bestfit1+0xed0>
f011b2aa:	83 ec 04             	sub    $0x4,%esp
f011b2ad:	68 a4 ba 13 f0       	push   $0xf013baa4
f011b2b2:	68 05 02 00 00       	push   $0x205
f011b2b7:	68 5a b6 13 f0       	push   $0xf013b65a
f011b2bc:	e8 44 4f fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b2c1:	e8 dd 1b ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b2c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2c9:	e8 fa 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b2ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b2d1:	83 ec 0c             	sub    $0xc,%esp
f011b2d4:	68 00 fc 3f 00       	push   $0x3ffc00
f011b2d9:	e8 ae c8 fe ff       	call   f0107b8c <kmalloc>
f011b2de:	83 c4 10             	add    $0x10,%esp
f011b2e1:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b2e7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b2ed:	89 c1                	mov    %eax,%ecx
f011b2ef:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b2f6:	10 00 00 
f011b2f9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b2ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b304:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b30a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b310:	ba 00 00 00 00       	mov    $0x0,%edx
f011b315:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b31b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b321:	29 d0                	sub    %edx,%eax
f011b323:	89 c3                	mov    %eax,%ebx
f011b325:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b32c:	10 00 00 
f011b32f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b334:	0f b6 d0             	movzbl %al,%edx
f011b337:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b33d:	01 d0                	add    %edx,%eax
f011b33f:	48                   	dec    %eax
f011b340:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b346:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b34c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b351:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b357:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b35d:	29 d0                	sub    %edx,%eax
f011b35f:	01 c3                	add    %eax,%ebx
f011b361:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b368:	10 00 00 
f011b36b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b370:	0f b6 c0             	movzbl %al,%eax
f011b373:	c1 e0 04             	shl    $0x4,%eax
f011b376:	89 c2                	mov    %eax,%edx
f011b378:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b37e:	01 d0                	add    %edx,%eax
f011b380:	48                   	dec    %eax
f011b381:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b387:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b38d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b392:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b398:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b39e:	29 d0                	sub    %edx,%eax
f011b3a0:	01 d8                	add    %ebx,%eax
f011b3a2:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b3a7:	39 c1                	cmp    %eax,%ecx
f011b3a9:	74 17                	je     f011b3c2 <test_kmalloc_bestfit1+0xfd1>
f011b3ab:	83 ec 04             	sub    $0x4,%esp
f011b3ae:	68 74 ba 13 f0       	push   $0xf013ba74
f011b3b3:	68 0b 02 00 00       	push   $0x20b
f011b3b8:	68 5a b6 13 f0       	push   $0xf013b65a
f011b3bd:	e8 43 4e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b3c2:	e8 01 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b3c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b3ca:	74 17                	je     f011b3e3 <test_kmalloc_bestfit1+0xff2>
f011b3cc:	83 ec 04             	sub    $0x4,%esp
f011b3cf:	68 74 b6 13 f0       	push   $0xf013b674
f011b3d4:	68 0c 02 00 00       	push   $0x20c
f011b3d9:	68 5a b6 13 f0       	push   $0xf013b65a
f011b3de:	e8 22 4e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b3e3:	e8 bb 1a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b3e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b3eb:	29 c2                	sub    %eax,%edx
f011b3ed:	89 d0                	mov    %edx,%eax
f011b3ef:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b3f4:	74 17                	je     f011b40d <test_kmalloc_bestfit1+0x101c>
f011b3f6:	83 ec 04             	sub    $0x4,%esp
f011b3f9:	68 a4 ba 13 f0       	push   $0xf013baa4
f011b3fe:	68 0d 02 00 00       	push   $0x20d
f011b403:	68 5a b6 13 f0       	push   $0xf013b65a
f011b408:	e8 f8 4d fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b40d:	e8 91 1a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b412:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b415:	e8 ae 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b41a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b41d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b423:	83 ec 0c             	sub    $0xc,%esp
f011b426:	50                   	push   %eax
f011b427:	e8 2b c8 fe ff       	call   f0107c57 <kfree>
f011b42c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b42f:	e8 94 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b434:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b437:	74 17                	je     f011b450 <test_kmalloc_bestfit1+0x105f>
f011b439:	83 ec 04             	sub    $0x4,%esp
f011b43c:	68 74 b6 13 f0       	push   $0xf013b674
f011b441:	68 16 02 00 00       	push   $0x216
f011b446:	68 5a b6 13 f0       	push   $0xf013b65a
f011b44b:	e8 b5 4d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b450:	e8 4e 1a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b455:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b458:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b45d:	74 17                	je     f011b476 <test_kmalloc_bestfit1+0x1085>
f011b45f:	83 ec 04             	sub    $0x4,%esp
f011b462:	68 b7 ba 13 f0       	push   $0xf013bab7
f011b467:	68 17 02 00 00       	push   $0x217
f011b46c:	68 5a b6 13 f0       	push   $0xf013b65a
f011b471:	e8 8f 4d fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b476:	e8 28 1a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b47b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b47e:	e8 45 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b483:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b486:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b48c:	83 ec 0c             	sub    $0xc,%esp
f011b48f:	50                   	push   %eax
f011b490:	e8 c2 c7 fe ff       	call   f0107c57 <kfree>
f011b495:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b498:	e8 2b 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b49d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4a0:	74 17                	je     f011b4b9 <test_kmalloc_bestfit1+0x10c8>
f011b4a2:	83 ec 04             	sub    $0x4,%esp
f011b4a5:	68 74 b6 13 f0       	push   $0xf013b674
f011b4aa:	68 1d 02 00 00       	push   $0x21d
f011b4af:	68 5a b6 13 f0       	push   $0xf013b65a
f011b4b4:	e8 4c 4d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b4b9:	e8 e5 19 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b4be:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b4c1:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b4c6:	74 17                	je     f011b4df <test_kmalloc_bestfit1+0x10ee>
f011b4c8:	83 ec 04             	sub    $0x4,%esp
f011b4cb:	68 b7 ba 13 f0       	push   $0xf013bab7
f011b4d0:	68 1e 02 00 00       	push   $0x21e
f011b4d5:	68 5a b6 13 f0       	push   $0xf013b65a
f011b4da:	e8 26 4d fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b4df:	e8 bf 19 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b4e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4e7:	e8 dc 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b4ef:	83 ec 0c             	sub    $0xc,%esp
f011b4f2:	68 00 fc 1f 00       	push   $0x1ffc00
f011b4f7:	e8 90 c6 fe ff       	call   f0107b8c <kmalloc>
f011b4fc:	83 c4 10             	add    $0x10,%esp
f011b4ff:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b505:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b50b:	89 c1                	mov    %eax,%ecx
f011b50d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b514:	10 00 00 
f011b517:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b51d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b522:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b528:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b52e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b533:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b539:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b53f:	29 d0                	sub    %edx,%eax
f011b541:	89 c3                	mov    %eax,%ebx
f011b543:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b54a:	10 00 00 
f011b54d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b552:	0f b6 d0             	movzbl %al,%edx
f011b555:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b55b:	01 d0                	add    %edx,%eax
f011b55d:	48                   	dec    %eax
f011b55e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b564:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b56a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b56f:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b575:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b57b:	29 d0                	sub    %edx,%eax
f011b57d:	01 c3                	add    %eax,%ebx
f011b57f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b586:	10 00 00 
f011b589:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b58e:	0f b6 c0             	movzbl %al,%eax
f011b591:	c1 e0 04             	shl    $0x4,%eax
f011b594:	89 c2                	mov    %eax,%edx
f011b596:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b59c:	01 d0                	add    %edx,%eax
f011b59e:	48                   	dec    %eax
f011b59f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b5a5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b5ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5b0:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b5b6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b5bc:	29 d0                	sub    %edx,%eax
f011b5be:	01 d8                	add    %ebx,%eax
f011b5c0:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b5c5:	39 c1                	cmp    %eax,%ecx
f011b5c7:	74 17                	je     f011b5e0 <test_kmalloc_bestfit1+0x11ef>
f011b5c9:	83 ec 04             	sub    $0x4,%esp
f011b5cc:	68 74 ba 13 f0       	push   $0xf013ba74
f011b5d1:	68 27 02 00 00       	push   $0x227
f011b5d6:	68 5a b6 13 f0       	push   $0xf013b65a
f011b5db:	e8 25 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5e0:	e8 e3 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b5e5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b5e8:	74 17                	je     f011b601 <test_kmalloc_bestfit1+0x1210>
f011b5ea:	83 ec 04             	sub    $0x4,%esp
f011b5ed:	68 74 b6 13 f0       	push   $0xf013b674
f011b5f2:	68 28 02 00 00       	push   $0x228
f011b5f7:	68 5a b6 13 f0       	push   $0xf013b65a
f011b5fc:	e8 04 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b601:	e8 9d 18 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b606:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b609:	29 c2                	sub    %eax,%edx
f011b60b:	89 d0                	mov    %edx,%eax
f011b60d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b612:	74 17                	je     f011b62b <test_kmalloc_bestfit1+0x123a>
f011b614:	83 ec 04             	sub    $0x4,%esp
f011b617:	68 a4 ba 13 f0       	push   $0xf013baa4
f011b61c:	68 29 02 00 00       	push   $0x229
f011b621:	68 5a b6 13 f0       	push   $0xf013b65a
f011b626:	e8 da 4b fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b62b:	83 ec 0c             	sub    $0xc,%esp
f011b62e:	68 c4 ba 13 f0       	push   $0xf013bac4
f011b633:	e8 d6 56 fe ff       	call   f0100d0e <cprintf>
f011b638:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b63b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b640:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b643:	5b                   	pop    %ebx
f011b644:	5f                   	pop    %edi
f011b645:	5d                   	pop    %ebp
f011b646:	c3                   	ret    

f011b647 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b647:	55                   	push   %ebp
f011b648:	89 e5                	mov    %esp,%ebp
f011b64a:	57                   	push   %edi
f011b64b:	53                   	push   %ebx
f011b64c:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b652:	83 ec 0c             	sub    $0xc,%esp
f011b655:	68 9c b5 13 f0       	push   $0xf013b59c
f011b65a:	e8 af 56 fe ff       	call   f0100d0e <cprintf>
f011b65f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b662:	83 ec 0c             	sub    $0xc,%esp
f011b665:	68 cc b5 13 f0       	push   $0xf013b5cc
f011b66a:	e8 9f 56 fe ff       	call   f0100d0e <cprintf>
f011b66f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b672:	83 ec 0c             	sub    $0xc,%esp
f011b675:	68 9c b5 13 f0       	push   $0xf013b59c
f011b67a:	e8 8f 56 fe ff       	call   f0100d0e <cprintf>
f011b67f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b682:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b688:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b68d:	b8 00 00 00 00       	mov    $0x0,%eax
f011b692:	89 d7                	mov    %edx,%edi
f011b694:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b696:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b69d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b6a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b6a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b6a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b6ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6b0:	f7 75 f4             	divl   -0xc(%ebp)
f011b6b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b6b6:	29 d0                	sub    %edx,%eax
f011b6b8:	89 c1                	mov    %eax,%ecx
f011b6ba:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b6c1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b6c6:	0f b6 d0             	movzbl %al,%edx
f011b6c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b6cc:	01 d0                	add    %edx,%eax
f011b6ce:	48                   	dec    %eax
f011b6cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b6d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b6d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6da:	f7 75 ec             	divl   -0x14(%ebp)
f011b6dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b6e0:	29 d0                	sub    %edx,%eax
f011b6e2:	01 c1                	add    %eax,%ecx
f011b6e4:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b6eb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b6f0:	0f b6 c0             	movzbl %al,%eax
f011b6f3:	c1 e0 04             	shl    $0x4,%eax
f011b6f6:	89 c2                	mov    %eax,%edx
f011b6f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b6fb:	01 d0                	add    %edx,%eax
f011b6fd:	48                   	dec    %eax
f011b6fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b701:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b704:	ba 00 00 00 00       	mov    $0x0,%edx
f011b709:	f7 75 e4             	divl   -0x1c(%ebp)
f011b70c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b70f:	29 d0                	sub    %edx,%eax
f011b711:	01 c8                	add    %ecx,%eax
f011b713:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b718:	29 c2                	sub    %eax,%edx
f011b71a:	89 d0                	mov    %edx,%eax
f011b71c:	83 ec 0c             	sub    $0xc,%esp
f011b71f:	50                   	push   %eax
f011b720:	e8 67 c4 fe ff       	call   f0107b8c <kmalloc>
f011b725:	83 c4 10             	add    $0x10,%esp
f011b728:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b72e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b734:	85 c0                	test   %eax,%eax
f011b736:	74 17                	je     f011b74f <test_kmalloc_bestfit2+0x108>
f011b738:	83 ec 04             	sub    $0x4,%esp
f011b73b:	68 0c bb 13 f0       	push   $0xf013bb0c
f011b740:	68 3f 02 00 00       	push   $0x23f
f011b745:	68 5a b6 13 f0       	push   $0xf013b65a
f011b74a:	e8 b6 4a fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b74f:	e8 4f 17 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b754:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b757:	e8 6c 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b75c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b75f:	83 ec 0c             	sub    $0xc,%esp
f011b762:	68 00 fc 1f 00       	push   $0x1ffc00
f011b767:	e8 20 c4 fe ff       	call   f0107b8c <kmalloc>
f011b76c:	83 c4 10             	add    $0x10,%esp
f011b76f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b775:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b77b:	89 c1                	mov    %eax,%ecx
f011b77d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b784:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b787:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b78c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b78f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b792:	ba 00 00 00 00       	mov    $0x0,%edx
f011b797:	f7 75 d4             	divl   -0x2c(%ebp)
f011b79a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b79d:	29 d0                	sub    %edx,%eax
f011b79f:	89 c3                	mov    %eax,%ebx
f011b7a1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b7a8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b7ad:	0f b6 d0             	movzbl %al,%edx
f011b7b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b7b3:	01 d0                	add    %edx,%eax
f011b7b5:	48                   	dec    %eax
f011b7b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b7b9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b7bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7c1:	f7 75 cc             	divl   -0x34(%ebp)
f011b7c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b7c7:	29 d0                	sub    %edx,%eax
f011b7c9:	01 c3                	add    %eax,%ebx
f011b7cb:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b7d2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b7d7:	0f b6 c0             	movzbl %al,%eax
f011b7da:	c1 e0 04             	shl    $0x4,%eax
f011b7dd:	89 c2                	mov    %eax,%edx
f011b7df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b7e2:	01 d0                	add    %edx,%eax
f011b7e4:	48                   	dec    %eax
f011b7e5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b7e8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b7eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7f0:	f7 75 c4             	divl   -0x3c(%ebp)
f011b7f3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b7f6:	29 d0                	sub    %edx,%eax
f011b7f8:	01 d8                	add    %ebx,%eax
f011b7fa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b7ff:	39 c1                	cmp    %eax,%ecx
f011b801:	74 17                	je     f011b81a <test_kmalloc_bestfit2+0x1d3>
f011b803:	83 ec 04             	sub    $0x4,%esp
f011b806:	68 74 ba 13 f0       	push   $0xf013ba74
f011b80b:	68 49 02 00 00       	push   $0x249
f011b810:	68 5a b6 13 f0       	push   $0xf013b65a
f011b815:	e8 eb 49 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b81a:	e8 a9 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b81f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b822:	74 17                	je     f011b83b <test_kmalloc_bestfit2+0x1f4>
f011b824:	83 ec 04             	sub    $0x4,%esp
f011b827:	68 74 b6 13 f0       	push   $0xf013b674
f011b82c:	68 4a 02 00 00       	push   $0x24a
f011b831:	68 5a b6 13 f0       	push   $0xf013b65a
f011b836:	e8 ca 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b83b:	e8 63 16 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b840:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b843:	29 c2                	sub    %eax,%edx
f011b845:	89 d0                	mov    %edx,%eax
f011b847:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b84c:	74 17                	je     f011b865 <test_kmalloc_bestfit2+0x21e>
f011b84e:	83 ec 04             	sub    $0x4,%esp
f011b851:	68 a4 ba 13 f0       	push   $0xf013baa4
f011b856:	68 4b 02 00 00       	push   $0x24b
f011b85b:	68 5a b6 13 f0       	push   $0xf013b65a
f011b860:	e8 a0 49 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b865:	e8 39 16 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b86a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b86d:	e8 56 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b872:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b875:	83 ec 0c             	sub    $0xc,%esp
f011b878:	68 00 fc 1f 00       	push   $0x1ffc00
f011b87d:	e8 0a c3 fe ff       	call   f0107b8c <kmalloc>
f011b882:	83 c4 10             	add    $0x10,%esp
f011b885:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b88b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b891:	89 c1                	mov    %eax,%ecx
f011b893:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b89a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b89d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b8a2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b8a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b8a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8ad:	f7 75 bc             	divl   -0x44(%ebp)
f011b8b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b8b3:	29 d0                	sub    %edx,%eax
f011b8b5:	89 c3                	mov    %eax,%ebx
f011b8b7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b8be:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b8c3:	0f b6 d0             	movzbl %al,%edx
f011b8c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b8c9:	01 d0                	add    %edx,%eax
f011b8cb:	48                   	dec    %eax
f011b8cc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b8cf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b8d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8d7:	f7 75 b4             	divl   -0x4c(%ebp)
f011b8da:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b8dd:	29 d0                	sub    %edx,%eax
f011b8df:	01 c3                	add    %eax,%ebx
f011b8e1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b8e8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b8ed:	0f b6 c0             	movzbl %al,%eax
f011b8f0:	c1 e0 04             	shl    $0x4,%eax
f011b8f3:	89 c2                	mov    %eax,%edx
f011b8f5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b8f8:	01 d0                	add    %edx,%eax
f011b8fa:	48                   	dec    %eax
f011b8fb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b8fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b901:	ba 00 00 00 00       	mov    $0x0,%edx
f011b906:	f7 75 ac             	divl   -0x54(%ebp)
f011b909:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b90c:	29 d0                	sub    %edx,%eax
f011b90e:	01 d8                	add    %ebx,%eax
f011b910:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b915:	39 c1                	cmp    %eax,%ecx
f011b917:	74 17                	je     f011b930 <test_kmalloc_bestfit2+0x2e9>
f011b919:	83 ec 04             	sub    $0x4,%esp
f011b91c:	68 74 ba 13 f0       	push   $0xf013ba74
f011b921:	68 51 02 00 00       	push   $0x251
f011b926:	68 5a b6 13 f0       	push   $0xf013b65a
f011b92b:	e8 d5 48 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b930:	e8 93 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b935:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b938:	74 17                	je     f011b951 <test_kmalloc_bestfit2+0x30a>
f011b93a:	83 ec 04             	sub    $0x4,%esp
f011b93d:	68 74 b6 13 f0       	push   $0xf013b674
f011b942:	68 52 02 00 00       	push   $0x252
f011b947:	68 5a b6 13 f0       	push   $0xf013b65a
f011b94c:	e8 b4 48 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b951:	e8 4d 15 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b956:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b959:	29 c2                	sub    %eax,%edx
f011b95b:	89 d0                	mov    %edx,%eax
f011b95d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b962:	74 17                	je     f011b97b <test_kmalloc_bestfit2+0x334>
f011b964:	83 ec 04             	sub    $0x4,%esp
f011b967:	68 a4 ba 13 f0       	push   $0xf013baa4
f011b96c:	68 53 02 00 00       	push   $0x253
f011b971:	68 5a b6 13 f0       	push   $0xf013b65a
f011b976:	e8 8a 48 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b97b:	e8 23 15 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011b980:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b983:	e8 40 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b988:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b98b:	83 ec 0c             	sub    $0xc,%esp
f011b98e:	68 00 08 00 00       	push   $0x800
f011b993:	e8 f4 c1 fe ff       	call   f0107b8c <kmalloc>
f011b998:	83 c4 10             	add    $0x10,%esp
f011b99b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b9a1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b9a7:	89 c1                	mov    %eax,%ecx
f011b9a9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b9b0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b9b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9b8:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b9bb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b9be:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9c3:	f7 75 a4             	divl   -0x5c(%ebp)
f011b9c6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b9c9:	29 d0                	sub    %edx,%eax
f011b9cb:	89 c3                	mov    %eax,%ebx
f011b9cd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b9d4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011b9d9:	0f b6 d0             	movzbl %al,%edx
f011b9dc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b9df:	01 d0                	add    %edx,%eax
f011b9e1:	48                   	dec    %eax
f011b9e2:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b9e5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b9e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9ed:	f7 75 9c             	divl   -0x64(%ebp)
f011b9f0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b9f3:	29 d0                	sub    %edx,%eax
f011b9f5:	01 c3                	add    %eax,%ebx
f011b9f7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b9fe:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ba03:	0f b6 c0             	movzbl %al,%eax
f011ba06:	c1 e0 04             	shl    $0x4,%eax
f011ba09:	89 c2                	mov    %eax,%edx
f011ba0b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ba0e:	01 d0                	add    %edx,%eax
f011ba10:	48                   	dec    %eax
f011ba11:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ba14:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba17:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba1c:	f7 75 94             	divl   -0x6c(%ebp)
f011ba1f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba22:	29 d0                	sub    %edx,%eax
f011ba24:	01 d8                	add    %ebx,%eax
f011ba26:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ba2b:	39 c1                	cmp    %eax,%ecx
f011ba2d:	74 17                	je     f011ba46 <test_kmalloc_bestfit2+0x3ff>
f011ba2f:	83 ec 04             	sub    $0x4,%esp
f011ba32:	68 74 ba 13 f0       	push   $0xf013ba74
f011ba37:	68 59 02 00 00       	push   $0x259
f011ba3c:	68 5a b6 13 f0       	push   $0xf013b65a
f011ba41:	e8 bf 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba46:	e8 7d 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba4b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba4e:	74 17                	je     f011ba67 <test_kmalloc_bestfit2+0x420>
f011ba50:	83 ec 04             	sub    $0x4,%esp
f011ba53:	68 74 b6 13 f0       	push   $0xf013b674
f011ba58:	68 5a 02 00 00       	push   $0x25a
f011ba5d:	68 5a b6 13 f0       	push   $0xf013b65a
f011ba62:	e8 9e 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ba67:	e8 37 14 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ba6c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ba6f:	29 c2                	sub    %eax,%edx
f011ba71:	89 d0                	mov    %edx,%eax
f011ba73:	83 f8 01             	cmp    $0x1,%eax
f011ba76:	74 17                	je     f011ba8f <test_kmalloc_bestfit2+0x448>
f011ba78:	83 ec 04             	sub    $0x4,%esp
f011ba7b:	68 a4 ba 13 f0       	push   $0xf013baa4
f011ba80:	68 5b 02 00 00       	push   $0x25b
f011ba85:	68 5a b6 13 f0       	push   $0xf013b65a
f011ba8a:	e8 76 47 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba8f:	e8 0f 14 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ba94:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba97:	e8 2c 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba9c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ba9f:	83 ec 0c             	sub    $0xc,%esp
f011baa2:	68 00 08 00 00       	push   $0x800
f011baa7:	e8 e0 c0 fe ff       	call   f0107b8c <kmalloc>
f011baac:	83 c4 10             	add    $0x10,%esp
f011baaf:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bab5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011babb:	89 c1                	mov    %eax,%ecx
f011babd:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bac4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bac7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bacc:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bacf:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bad2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bad7:	f7 75 8c             	divl   -0x74(%ebp)
f011bada:	8b 45 88             	mov    -0x78(%ebp),%eax
f011badd:	29 d0                	sub    %edx,%eax
f011badf:	89 c3                	mov    %eax,%ebx
f011bae1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bae8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011baed:	0f b6 d0             	movzbl %al,%edx
f011baf0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011baf3:	01 d0                	add    %edx,%eax
f011baf5:	48                   	dec    %eax
f011baf6:	89 45 80             	mov    %eax,-0x80(%ebp)
f011baf9:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bafc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb01:	f7 75 84             	divl   -0x7c(%ebp)
f011bb04:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bb07:	29 d0                	sub    %edx,%eax
f011bb09:	01 c3                	add    %eax,%ebx
f011bb0b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bb12:	10 00 00 
f011bb15:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bb1a:	0f b6 c0             	movzbl %al,%eax
f011bb1d:	c1 e0 04             	shl    $0x4,%eax
f011bb20:	89 c2                	mov    %eax,%edx
f011bb22:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bb28:	01 d0                	add    %edx,%eax
f011bb2a:	48                   	dec    %eax
f011bb2b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bb31:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb37:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb3c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bb42:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb48:	29 d0                	sub    %edx,%eax
f011bb4a:	01 d8                	add    %ebx,%eax
f011bb4c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bb51:	39 c1                	cmp    %eax,%ecx
f011bb53:	74 17                	je     f011bb6c <test_kmalloc_bestfit2+0x525>
f011bb55:	83 ec 04             	sub    $0x4,%esp
f011bb58:	68 74 ba 13 f0       	push   $0xf013ba74
f011bb5d:	68 61 02 00 00       	push   $0x261
f011bb62:	68 5a b6 13 f0       	push   $0xf013b65a
f011bb67:	e8 99 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb6c:	e8 57 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb71:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb74:	74 17                	je     f011bb8d <test_kmalloc_bestfit2+0x546>
f011bb76:	83 ec 04             	sub    $0x4,%esp
f011bb79:	68 74 b6 13 f0       	push   $0xf013b674
f011bb7e:	68 62 02 00 00       	push   $0x262
f011bb83:	68 5a b6 13 f0       	push   $0xf013b65a
f011bb88:	e8 78 46 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bb8d:	e8 11 13 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bb92:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb95:	29 c2                	sub    %eax,%edx
f011bb97:	89 d0                	mov    %edx,%eax
f011bb99:	83 f8 01             	cmp    $0x1,%eax
f011bb9c:	74 17                	je     f011bbb5 <test_kmalloc_bestfit2+0x56e>
f011bb9e:	83 ec 04             	sub    $0x4,%esp
f011bba1:	68 a4 ba 13 f0       	push   $0xf013baa4
f011bba6:	68 63 02 00 00       	push   $0x263
f011bbab:	68 5a b6 13 f0       	push   $0xf013b65a
f011bbb0:	e8 50 46 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bbb5:	e8 e9 12 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bbba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbbd:	e8 06 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bbc2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011bbc5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bbcb:	83 ec 0c             	sub    $0xc,%esp
f011bbce:	50                   	push   %eax
f011bbcf:	e8 83 c0 fe ff       	call   f0107c57 <kfree>
f011bbd4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbd7:	e8 ec 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bbdc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bbdf:	74 17                	je     f011bbf8 <test_kmalloc_bestfit2+0x5b1>
f011bbe1:	83 ec 04             	sub    $0x4,%esp
f011bbe4:	68 74 b6 13 f0       	push   $0xf013b674
f011bbe9:	68 69 02 00 00       	push   $0x269
f011bbee:	68 5a b6 13 f0       	push   $0xf013b65a
f011bbf3:	e8 0d 46 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bbf8:	e8 a6 12 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bbfd:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bc00:	83 f8 01             	cmp    $0x1,%eax
f011bc03:	74 17                	je     f011bc1c <test_kmalloc_bestfit2+0x5d5>
f011bc05:	83 ec 04             	sub    $0x4,%esp
f011bc08:	68 a4 ba 13 f0       	push   $0xf013baa4
f011bc0d:	68 6a 02 00 00       	push   $0x26a
f011bc12:	68 5a b6 13 f0       	push   $0xf013b65a
f011bc17:	e8 e9 45 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bc1c:	e8 82 12 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bc21:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc24:	e8 9f 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc29:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bc2c:	83 ec 0c             	sub    $0xc,%esp
f011bc2f:	68 00 1c 00 00       	push   $0x1c00
f011bc34:	e8 53 bf fe ff       	call   f0107b8c <kmalloc>
f011bc39:	83 c4 10             	add    $0x10,%esp
f011bc3c:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bc42:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011bc48:	89 c1                	mov    %eax,%ecx
f011bc4a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bc51:	10 00 00 
f011bc54:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bc5a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc5f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bc65:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bc6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc70:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bc76:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bc7c:	29 d0                	sub    %edx,%eax
f011bc7e:	89 c3                	mov    %eax,%ebx
f011bc80:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bc87:	10 00 00 
f011bc8a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bc8f:	0f b6 d0             	movzbl %al,%edx
f011bc92:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bc98:	01 d0                	add    %edx,%eax
f011bc9a:	48                   	dec    %eax
f011bc9b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bca1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bca7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcac:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bcb2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bcb8:	29 d0                	sub    %edx,%eax
f011bcba:	01 c3                	add    %eax,%ebx
f011bcbc:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bcc3:	10 00 00 
f011bcc6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bccb:	0f b6 c0             	movzbl %al,%eax
f011bcce:	c1 e0 04             	shl    $0x4,%eax
f011bcd1:	89 c2                	mov    %eax,%edx
f011bcd3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bcd9:	01 d0                	add    %edx,%eax
f011bcdb:	48                   	dec    %eax
f011bcdc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bce2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bce8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bced:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bcf3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bcf9:	29 d0                	sub    %edx,%eax
f011bcfb:	01 d8                	add    %ebx,%eax
f011bcfd:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bd02:	39 c1                	cmp    %eax,%ecx
f011bd04:	74 17                	je     f011bd1d <test_kmalloc_bestfit2+0x6d6>
f011bd06:	83 ec 04             	sub    $0x4,%esp
f011bd09:	68 74 ba 13 f0       	push   $0xf013ba74
f011bd0e:	68 70 02 00 00       	push   $0x270
f011bd13:	68 5a b6 13 f0       	push   $0xf013b65a
f011bd18:	e8 e8 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd1d:	e8 a6 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd22:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd25:	74 17                	je     f011bd3e <test_kmalloc_bestfit2+0x6f7>
f011bd27:	83 ec 04             	sub    $0x4,%esp
f011bd2a:	68 74 b6 13 f0       	push   $0xf013b674
f011bd2f:	68 71 02 00 00       	push   $0x271
f011bd34:	68 5a b6 13 f0       	push   $0xf013b65a
f011bd39:	e8 c7 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011bd3e:	e8 60 11 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bd43:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bd46:	29 c2                	sub    %eax,%edx
f011bd48:	89 d0                	mov    %edx,%eax
f011bd4a:	83 f8 02             	cmp    $0x2,%eax
f011bd4d:	74 17                	je     f011bd66 <test_kmalloc_bestfit2+0x71f>
f011bd4f:	83 ec 04             	sub    $0x4,%esp
f011bd52:	68 a4 ba 13 f0       	push   $0xf013baa4
f011bd57:	68 72 02 00 00       	push   $0x272
f011bd5c:	68 5a b6 13 f0       	push   $0xf013b65a
f011bd61:	e8 9f 44 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bd66:	e8 38 11 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bd6b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd6e:	e8 55 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd73:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011bd76:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bd7c:	83 ec 0c             	sub    $0xc,%esp
f011bd7f:	50                   	push   %eax
f011bd80:	e8 d2 be fe ff       	call   f0107c57 <kfree>
f011bd85:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd88:	e8 3b 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd8d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd90:	74 17                	je     f011bda9 <test_kmalloc_bestfit2+0x762>
f011bd92:	83 ec 04             	sub    $0x4,%esp
f011bd95:	68 74 b6 13 f0       	push   $0xf013b674
f011bd9a:	68 78 02 00 00       	push   $0x278
f011bd9f:	68 5a b6 13 f0       	push   $0xf013b65a
f011bda4:	e8 5c 44 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bda9:	e8 f5 10 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bdae:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bdb1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bdb6:	74 17                	je     f011bdcf <test_kmalloc_bestfit2+0x788>
f011bdb8:	83 ec 04             	sub    $0x4,%esp
f011bdbb:	68 28 b9 13 f0       	push   $0xf013b928
f011bdc0:	68 79 02 00 00       	push   $0x279
f011bdc5:	68 5a b6 13 f0       	push   $0xf013b65a
f011bdca:	e8 36 44 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bdcf:	e8 cf 10 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bdd4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdd7:	e8 ec 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bddc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bddf:	83 ec 0c             	sub    $0xc,%esp
f011bde2:	68 00 fc 2f 00       	push   $0x2ffc00
f011bde7:	e8 a0 bd fe ff       	call   f0107b8c <kmalloc>
f011bdec:	83 c4 10             	add    $0x10,%esp
f011bdef:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bdf5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bdfb:	89 c1                	mov    %eax,%ecx
f011bdfd:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011be04:	10 00 00 
f011be07:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011be0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be12:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011be18:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011be1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011be23:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011be29:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011be2f:	29 d0                	sub    %edx,%eax
f011be31:	89 c3                	mov    %eax,%ebx
f011be33:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011be3a:	10 00 00 
f011be3d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011be42:	0f b6 d0             	movzbl %al,%edx
f011be45:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011be4b:	01 d0                	add    %edx,%eax
f011be4d:	48                   	dec    %eax
f011be4e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011be54:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011be5a:	ba 00 00 00 00       	mov    $0x0,%edx
f011be5f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011be65:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011be6b:	29 d0                	sub    %edx,%eax
f011be6d:	01 c3                	add    %eax,%ebx
f011be6f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011be76:	10 00 00 
f011be79:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011be7e:	0f b6 c0             	movzbl %al,%eax
f011be81:	c1 e0 04             	shl    $0x4,%eax
f011be84:	89 c2                	mov    %eax,%edx
f011be86:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011be8c:	01 d0                	add    %edx,%eax
f011be8e:	48                   	dec    %eax
f011be8f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011be95:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011be9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bea0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011bea6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011beac:	29 d0                	sub    %edx,%eax
f011beae:	01 d8                	add    %ebx,%eax
f011beb0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011beb5:	39 c1                	cmp    %eax,%ecx
f011beb7:	74 17                	je     f011bed0 <test_kmalloc_bestfit2+0x889>
f011beb9:	83 ec 04             	sub    $0x4,%esp
f011bebc:	68 74 ba 13 f0       	push   $0xf013ba74
f011bec1:	68 7f 02 00 00       	push   $0x27f
f011bec6:	68 5a b6 13 f0       	push   $0xf013b65a
f011becb:	e8 35 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bed0:	e8 f3 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bed5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bed8:	74 17                	je     f011bef1 <test_kmalloc_bestfit2+0x8aa>
f011beda:	83 ec 04             	sub    $0x4,%esp
f011bedd:	68 74 b6 13 f0       	push   $0xf013b674
f011bee2:	68 80 02 00 00       	push   $0x280
f011bee7:	68 5a b6 13 f0       	push   $0xf013b65a
f011beec:	e8 14 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bef1:	e8 ad 0f ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bef6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bef9:	29 c2                	sub    %eax,%edx
f011befb:	89 d0                	mov    %edx,%eax
f011befd:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bf02:	74 17                	je     f011bf1b <test_kmalloc_bestfit2+0x8d4>
f011bf04:	83 ec 04             	sub    $0x4,%esp
f011bf07:	68 a4 ba 13 f0       	push   $0xf013baa4
f011bf0c:	68 81 02 00 00       	push   $0x281
f011bf11:	68 5a b6 13 f0       	push   $0xf013b65a
f011bf16:	e8 ea 42 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bf1b:	e8 83 0f ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011bf20:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf23:	e8 a0 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf28:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011bf2b:	83 ec 0c             	sub    $0xc,%esp
f011bf2e:	68 00 18 20 00       	push   $0x201800
f011bf33:	e8 54 bc fe ff       	call   f0107b8c <kmalloc>
f011bf38:	83 c4 10             	add    $0x10,%esp
f011bf3b:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bf41:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bf47:	89 c1                	mov    %eax,%ecx
f011bf49:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011bf50:	10 00 00 
f011bf53:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bf59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf5e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011bf64:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bf6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf6f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bf75:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bf7b:	29 d0                	sub    %edx,%eax
f011bf7d:	89 c3                	mov    %eax,%ebx
f011bf7f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011bf86:	10 00 00 
f011bf89:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bf8e:	0f b6 d0             	movzbl %al,%edx
f011bf91:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bf97:	01 d0                	add    %edx,%eax
f011bf99:	48                   	dec    %eax
f011bf9a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011bfa0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bfa6:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfab:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011bfb1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bfb7:	29 d0                	sub    %edx,%eax
f011bfb9:	01 c3                	add    %eax,%ebx
f011bfbb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011bfc2:	10 00 00 
f011bfc5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011bfca:	0f b6 c0             	movzbl %al,%eax
f011bfcd:	c1 e0 04             	shl    $0x4,%eax
f011bfd0:	89 c2                	mov    %eax,%edx
f011bfd2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011bfd8:	01 d0                	add    %edx,%eax
f011bfda:	48                   	dec    %eax
f011bfdb:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011bfe1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bfe7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfec:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011bff2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bff8:	29 d0                	sub    %edx,%eax
f011bffa:	01 d8                	add    %ebx,%eax
f011bffc:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c001:	39 c1                	cmp    %eax,%ecx
f011c003:	74 17                	je     f011c01c <test_kmalloc_bestfit2+0x9d5>
f011c005:	83 ec 04             	sub    $0x4,%esp
f011c008:	68 74 ba 13 f0       	push   $0xf013ba74
f011c00d:	68 87 02 00 00       	push   $0x287
f011c012:	68 5a b6 13 f0       	push   $0xf013b65a
f011c017:	e8 e9 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c01c:	e8 a7 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c021:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c024:	74 17                	je     f011c03d <test_kmalloc_bestfit2+0x9f6>
f011c026:	83 ec 04             	sub    $0x4,%esp
f011c029:	68 74 b6 13 f0       	push   $0xf013b674
f011c02e:	68 88 02 00 00       	push   $0x288
f011c033:	68 5a b6 13 f0       	push   $0xf013b65a
f011c038:	e8 c8 41 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c03d:	e8 61 0e ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c042:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c045:	29 c2                	sub    %eax,%edx
f011c047:	89 d0                	mov    %edx,%eax
f011c049:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c04e:	74 17                	je     f011c067 <test_kmalloc_bestfit2+0xa20>
f011c050:	83 ec 04             	sub    $0x4,%esp
f011c053:	68 a4 ba 13 f0       	push   $0xf013baa4
f011c058:	68 89 02 00 00       	push   $0x289
f011c05d:	68 5a b6 13 f0       	push   $0xf013b65a
f011c062:	e8 9e 41 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c067:	e8 37 0e ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c06c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c06f:	e8 54 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c074:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c077:	83 ec 0c             	sub    $0xc,%esp
f011c07a:	68 00 fc 4f 00       	push   $0x4ffc00
f011c07f:	e8 08 bb fe ff       	call   f0107b8c <kmalloc>
f011c084:	83 c4 10             	add    $0x10,%esp
f011c087:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c08d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c093:	89 c1                	mov    %eax,%ecx
f011c095:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c09c:	10 00 00 
f011c09f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c0a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c0aa:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c0b0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c0b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0bb:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c0c1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c0c7:	29 d0                	sub    %edx,%eax
f011c0c9:	89 c3                	mov    %eax,%ebx
f011c0cb:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c0d2:	10 00 00 
f011c0d5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c0da:	0f b6 d0             	movzbl %al,%edx
f011c0dd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c0e3:	01 d0                	add    %edx,%eax
f011c0e5:	48                   	dec    %eax
f011c0e6:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c0ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c0f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0f7:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c0fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c103:	29 d0                	sub    %edx,%eax
f011c105:	01 c3                	add    %eax,%ebx
f011c107:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c10e:	10 00 00 
f011c111:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c116:	0f b6 c0             	movzbl %al,%eax
f011c119:	c1 e0 04             	shl    $0x4,%eax
f011c11c:	89 c2                	mov    %eax,%edx
f011c11e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c124:	01 d0                	add    %edx,%eax
f011c126:	48                   	dec    %eax
f011c127:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c12d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c133:	ba 00 00 00 00       	mov    $0x0,%edx
f011c138:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c13e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c144:	29 d0                	sub    %edx,%eax
f011c146:	01 d8                	add    %ebx,%eax
f011c148:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c14d:	39 c1                	cmp    %eax,%ecx
f011c14f:	74 17                	je     f011c168 <test_kmalloc_bestfit2+0xb21>
f011c151:	83 ec 04             	sub    $0x4,%esp
f011c154:	68 74 ba 13 f0       	push   $0xf013ba74
f011c159:	68 8f 02 00 00       	push   $0x28f
f011c15e:	68 5a b6 13 f0       	push   $0xf013b65a
f011c163:	e8 9d 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c168:	e8 5b 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c16d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c170:	74 17                	je     f011c189 <test_kmalloc_bestfit2+0xb42>
f011c172:	83 ec 04             	sub    $0x4,%esp
f011c175:	68 74 b6 13 f0       	push   $0xf013b674
f011c17a:	68 90 02 00 00       	push   $0x290
f011c17f:	68 5a b6 13 f0       	push   $0xf013b65a
f011c184:	e8 7c 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c189:	e8 15 0d ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c18e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c191:	29 c2                	sub    %eax,%edx
f011c193:	89 d0                	mov    %edx,%eax
f011c195:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c19a:	74 17                	je     f011c1b3 <test_kmalloc_bestfit2+0xb6c>
f011c19c:	83 ec 04             	sub    $0x4,%esp
f011c19f:	68 a4 ba 13 f0       	push   $0xf013baa4
f011c1a4:	68 91 02 00 00       	push   $0x291
f011c1a9:	68 5a b6 13 f0       	push   $0xf013b65a
f011c1ae:	e8 52 40 fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c1b3:	e8 eb 0c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c1b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1bb:	e8 08 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c1c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c1c3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c1c9:	83 ec 0c             	sub    $0xc,%esp
f011c1cc:	50                   	push   %eax
f011c1cd:	e8 85 ba fe ff       	call   f0107c57 <kfree>
f011c1d2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1d5:	e8 ee 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c1da:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1dd:	74 17                	je     f011c1f6 <test_kmalloc_bestfit2+0xbaf>
f011c1df:	83 ec 04             	sub    $0x4,%esp
f011c1e2:	68 74 b6 13 f0       	push   $0xf013b674
f011c1e7:	68 97 02 00 00       	push   $0x297
f011c1ec:	68 5a b6 13 f0       	push   $0xf013b65a
f011c1f1:	e8 0f 40 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c1f6:	e8 a8 0c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c1fb:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c1fe:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c203:	74 17                	je     f011c21c <test_kmalloc_bestfit2+0xbd5>
f011c205:	83 ec 04             	sub    $0x4,%esp
f011c208:	68 28 b9 13 f0       	push   $0xf013b928
f011c20d:	68 98 02 00 00       	push   $0x298
f011c212:	68 5a b6 13 f0       	push   $0xf013b65a
f011c217:	e8 e9 3f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c21c:	e8 82 0c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c221:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c224:	e8 9f 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c229:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c22c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c232:	83 ec 0c             	sub    $0xc,%esp
f011c235:	50                   	push   %eax
f011c236:	e8 1c ba fe ff       	call   f0107c57 <kfree>
f011c23b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c23e:	e8 85 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c243:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c246:	74 17                	je     f011c25f <test_kmalloc_bestfit2+0xc18>
f011c248:	83 ec 04             	sub    $0x4,%esp
f011c24b:	68 74 b6 13 f0       	push   $0xf013b674
f011c250:	68 9e 02 00 00       	push   $0x29e
f011c255:	68 5a b6 13 f0       	push   $0xf013b65a
f011c25a:	e8 a6 3f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c25f:	e8 3f 0c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c264:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c267:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c26c:	74 17                	je     f011c285 <test_kmalloc_bestfit2+0xc3e>
f011c26e:	83 ec 04             	sub    $0x4,%esp
f011c271:	68 54 bb 13 f0       	push   $0xf013bb54
f011c276:	68 9f 02 00 00       	push   $0x29f
f011c27b:	68 5a b6 13 f0       	push   $0xf013b65a
f011c280:	e8 80 3f fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c285:	e8 19 0c ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c28a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c28d:	e8 36 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c292:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c295:	83 ec 0c             	sub    $0xc,%esp
f011c298:	68 00 fc 1f 00       	push   $0x1ffc00
f011c29d:	e8 ea b8 fe ff       	call   f0107b8c <kmalloc>
f011c2a2:	83 c4 10             	add    $0x10,%esp
f011c2a5:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c2ab:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c2b1:	89 c1                	mov    %eax,%ecx
f011c2b3:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c2ba:	10 00 00 
f011c2bd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c2c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2c8:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c2ce:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c2d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2d9:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c2df:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c2e5:	29 d0                	sub    %edx,%eax
f011c2e7:	89 c3                	mov    %eax,%ebx
f011c2e9:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c2f0:	10 00 00 
f011c2f3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c2f8:	0f b6 d0             	movzbl %al,%edx
f011c2fb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c301:	01 d0                	add    %edx,%eax
f011c303:	48                   	dec    %eax
f011c304:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c30a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c310:	ba 00 00 00 00       	mov    $0x0,%edx
f011c315:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c31b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c321:	29 d0                	sub    %edx,%eax
f011c323:	01 c3                	add    %eax,%ebx
f011c325:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c32c:	10 00 00 
f011c32f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c334:	0f b6 c0             	movzbl %al,%eax
f011c337:	c1 e0 04             	shl    $0x4,%eax
f011c33a:	89 c2                	mov    %eax,%edx
f011c33c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c342:	01 d0                	add    %edx,%eax
f011c344:	48                   	dec    %eax
f011c345:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c34b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c351:	ba 00 00 00 00       	mov    $0x0,%edx
f011c356:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c35c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c362:	29 d0                	sub    %edx,%eax
f011c364:	01 d8                	add    %ebx,%eax
f011c366:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c36b:	39 c1                	cmp    %eax,%ecx
f011c36d:	74 17                	je     f011c386 <test_kmalloc_bestfit2+0xd3f>
f011c36f:	83 ec 04             	sub    $0x4,%esp
f011c372:	68 74 ba 13 f0       	push   $0xf013ba74
f011c377:	68 a5 02 00 00       	push   $0x2a5
f011c37c:	68 5a b6 13 f0       	push   $0xf013b65a
f011c381:	e8 7f 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c386:	e8 3d 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c38b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c38e:	74 17                	je     f011c3a7 <test_kmalloc_bestfit2+0xd60>
f011c390:	83 ec 04             	sub    $0x4,%esp
f011c393:	68 74 b6 13 f0       	push   $0xf013b674
f011c398:	68 a6 02 00 00       	push   $0x2a6
f011c39d:	68 5a b6 13 f0       	push   $0xf013b65a
f011c3a2:	e8 5e 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c3a7:	e8 f7 0a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c3ac:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c3af:	29 c2                	sub    %eax,%edx
f011c3b1:	89 d0                	mov    %edx,%eax
f011c3b3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c3b8:	74 17                	je     f011c3d1 <test_kmalloc_bestfit2+0xd8a>
f011c3ba:	83 ec 04             	sub    $0x4,%esp
f011c3bd:	68 92 bb 13 f0       	push   $0xf013bb92
f011c3c2:	68 a7 02 00 00       	push   $0x2a7
f011c3c7:	68 5a b6 13 f0       	push   $0xf013b65a
f011c3cc:	e8 34 3e fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c3d1:	e8 cd 0a ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c3d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c3d9:	e8 ea 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c3de:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c3e1:	83 ec 0c             	sub    $0xc,%esp
f011c3e4:	68 00 18 00 00       	push   $0x1800
f011c3e9:	e8 9e b7 fe ff       	call   f0107b8c <kmalloc>
f011c3ee:	83 c4 10             	add    $0x10,%esp
f011c3f1:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c3f7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c3fd:	89 c1                	mov    %eax,%ecx
f011c3ff:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c406:	10 00 00 
f011c409:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c40f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c414:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c41a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c420:	ba 00 00 00 00       	mov    $0x0,%edx
f011c425:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c42b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c431:	29 d0                	sub    %edx,%eax
f011c433:	89 c3                	mov    %eax,%ebx
f011c435:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c43c:	10 00 00 
f011c43f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c444:	0f b6 d0             	movzbl %al,%edx
f011c447:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c44d:	01 d0                	add    %edx,%eax
f011c44f:	48                   	dec    %eax
f011c450:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c456:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c45c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c461:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c467:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c46d:	29 d0                	sub    %edx,%eax
f011c46f:	01 c3                	add    %eax,%ebx
f011c471:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c478:	10 00 00 
f011c47b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c480:	0f b6 c0             	movzbl %al,%eax
f011c483:	c1 e0 04             	shl    $0x4,%eax
f011c486:	89 c2                	mov    %eax,%edx
f011c488:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c48e:	01 d0                	add    %edx,%eax
f011c490:	48                   	dec    %eax
f011c491:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c497:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c49d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4a2:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c4a8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c4ae:	29 d0                	sub    %edx,%eax
f011c4b0:	01 d8                	add    %ebx,%eax
f011c4b2:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c4b7:	39 c1                	cmp    %eax,%ecx
f011c4b9:	74 17                	je     f011c4d2 <test_kmalloc_bestfit2+0xe8b>
f011c4bb:	83 ec 04             	sub    $0x4,%esp
f011c4be:	68 74 ba 13 f0       	push   $0xf013ba74
f011c4c3:	68 ad 02 00 00       	push   $0x2ad
f011c4c8:	68 5a b6 13 f0       	push   $0xf013b65a
f011c4cd:	e8 33 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4d2:	e8 f1 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c4d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c4da:	74 17                	je     f011c4f3 <test_kmalloc_bestfit2+0xeac>
f011c4dc:	83 ec 04             	sub    $0x4,%esp
f011c4df:	68 74 b6 13 f0       	push   $0xf013b674
f011c4e4:	68 ae 02 00 00       	push   $0x2ae
f011c4e9:	68 5a b6 13 f0       	push   $0xf013b65a
f011c4ee:	e8 12 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c4f3:	e8 ab 09 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c4f8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c4fb:	29 c2                	sub    %eax,%edx
f011c4fd:	89 d0                	mov    %edx,%eax
f011c4ff:	83 f8 02             	cmp    $0x2,%eax
f011c502:	74 17                	je     f011c51b <test_kmalloc_bestfit2+0xed4>
f011c504:	83 ec 04             	sub    $0x4,%esp
f011c507:	68 92 bb 13 f0       	push   $0xf013bb92
f011c50c:	68 af 02 00 00       	push   $0x2af
f011c511:	68 5a b6 13 f0       	push   $0xf013b65a
f011c516:	e8 ea 3c fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c51b:	e8 83 09 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c520:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c523:	e8 a0 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c528:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c52b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c531:	83 ec 0c             	sub    $0xc,%esp
f011c534:	50                   	push   %eax
f011c535:	e8 1d b7 fe ff       	call   f0107c57 <kfree>
f011c53a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c53d:	e8 86 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c542:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c545:	74 17                	je     f011c55e <test_kmalloc_bestfit2+0xf17>
f011c547:	83 ec 04             	sub    $0x4,%esp
f011c54a:	68 74 b6 13 f0       	push   $0xf013b674
f011c54f:	68 b5 02 00 00       	push   $0x2b5
f011c554:	68 5a b6 13 f0       	push   $0xf013b65a
f011c559:	e8 a7 3c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c55e:	e8 40 09 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c563:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c566:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c56b:	74 17                	je     f011c584 <test_kmalloc_bestfit2+0xf3d>
f011c56d:	83 ec 04             	sub    $0x4,%esp
f011c570:	68 54 bb 13 f0       	push   $0xf013bb54
f011c575:	68 b6 02 00 00       	push   $0x2b6
f011c57a:	68 5a b6 13 f0       	push   $0xf013b65a
f011c57f:	e8 81 3c fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c584:	e8 1a 09 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c589:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c58c:	e8 37 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c591:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c594:	83 ec 0c             	sub    $0xc,%esp
f011c597:	68 00 fc 2f 00       	push   $0x2ffc00
f011c59c:	e8 eb b5 fe ff       	call   f0107b8c <kmalloc>
f011c5a1:	83 c4 10             	add    $0x10,%esp
f011c5a4:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c5aa:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c5b0:	89 c1                	mov    %eax,%ecx
f011c5b2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c5b9:	10 00 00 
f011c5bc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c5c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c5c7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c5cd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c5d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5d8:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c5de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c5e4:	29 d0                	sub    %edx,%eax
f011c5e6:	89 c3                	mov    %eax,%ebx
f011c5e8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c5ef:	10 00 00 
f011c5f2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c5f7:	0f b6 d0             	movzbl %al,%edx
f011c5fa:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c600:	01 d0                	add    %edx,%eax
f011c602:	48                   	dec    %eax
f011c603:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c609:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c60f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c614:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c61a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c620:	29 d0                	sub    %edx,%eax
f011c622:	01 c3                	add    %eax,%ebx
f011c624:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c62b:	10 00 00 
f011c62e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c633:	0f b6 c0             	movzbl %al,%eax
f011c636:	c1 e0 04             	shl    $0x4,%eax
f011c639:	89 c2                	mov    %eax,%edx
f011c63b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c641:	01 d0                	add    %edx,%eax
f011c643:	48                   	dec    %eax
f011c644:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c64a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c650:	ba 00 00 00 00       	mov    $0x0,%edx
f011c655:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c65b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c661:	29 d0                	sub    %edx,%eax
f011c663:	01 d8                	add    %ebx,%eax
f011c665:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c66a:	39 c1                	cmp    %eax,%ecx
f011c66c:	74 17                	je     f011c685 <test_kmalloc_bestfit2+0x103e>
f011c66e:	83 ec 04             	sub    $0x4,%esp
f011c671:	68 74 ba 13 f0       	push   $0xf013ba74
f011c676:	68 bc 02 00 00       	push   $0x2bc
f011c67b:	68 5a b6 13 f0       	push   $0xf013b65a
f011c680:	e8 80 3b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c685:	e8 3e 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c68a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c68d:	74 17                	je     f011c6a6 <test_kmalloc_bestfit2+0x105f>
f011c68f:	83 ec 04             	sub    $0x4,%esp
f011c692:	68 74 b6 13 f0       	push   $0xf013b674
f011c697:	68 bd 02 00 00       	push   $0x2bd
f011c69c:	68 5a b6 13 f0       	push   $0xf013b65a
f011c6a1:	e8 5f 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c6a6:	e8 f8 07 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c6ab:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c6ae:	29 c2                	sub    %eax,%edx
f011c6b0:	89 d0                	mov    %edx,%eax
f011c6b2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c6b7:	74 17                	je     f011c6d0 <test_kmalloc_bestfit2+0x1089>
f011c6b9:	83 ec 04             	sub    $0x4,%esp
f011c6bc:	68 54 bb 13 f0       	push   $0xf013bb54
f011c6c1:	68 be 02 00 00       	push   $0x2be
f011c6c6:	68 5a b6 13 f0       	push   $0xf013b65a
f011c6cb:	e8 35 3b fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6d0:	e8 ce 07 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c6d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c6d8:	e8 eb 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c6dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c6e0:	83 ec 0c             	sub    $0xc,%esp
f011c6e3:	68 00 fc 3f 00       	push   $0x3ffc00
f011c6e8:	e8 9f b4 fe ff       	call   f0107b8c <kmalloc>
f011c6ed:	83 c4 10             	add    $0x10,%esp
f011c6f0:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c6f6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c6fc:	89 c1                	mov    %eax,%ecx
f011c6fe:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c705:	10 00 00 
f011c708:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c70e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c713:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c719:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c71f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c724:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c72a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c730:	29 d0                	sub    %edx,%eax
f011c732:	89 c3                	mov    %eax,%ebx
f011c734:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c73b:	10 00 00 
f011c73e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c743:	0f b6 d0             	movzbl %al,%edx
f011c746:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c74c:	01 d0                	add    %edx,%eax
f011c74e:	48                   	dec    %eax
f011c74f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c755:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c75b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c760:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c766:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c76c:	29 d0                	sub    %edx,%eax
f011c76e:	01 c3                	add    %eax,%ebx
f011c770:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c777:	10 00 00 
f011c77a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c77f:	0f b6 c0             	movzbl %al,%eax
f011c782:	c1 e0 04             	shl    $0x4,%eax
f011c785:	89 c2                	mov    %eax,%edx
f011c787:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c78d:	01 d0                	add    %edx,%eax
f011c78f:	48                   	dec    %eax
f011c790:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c796:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c79c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7a1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c7a7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c7ad:	29 d0                	sub    %edx,%eax
f011c7af:	01 d8                	add    %ebx,%eax
f011c7b1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c7b6:	39 c1                	cmp    %eax,%ecx
f011c7b8:	74 17                	je     f011c7d1 <test_kmalloc_bestfit2+0x118a>
f011c7ba:	83 ec 04             	sub    $0x4,%esp
f011c7bd:	68 74 ba 13 f0       	push   $0xf013ba74
f011c7c2:	68 c4 02 00 00       	push   $0x2c4
f011c7c7:	68 5a b6 13 f0       	push   $0xf013b65a
f011c7cc:	e8 34 3a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7d1:	e8 f2 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c7d6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c7d9:	74 17                	je     f011c7f2 <test_kmalloc_bestfit2+0x11ab>
f011c7db:	83 ec 04             	sub    $0x4,%esp
f011c7de:	68 74 b6 13 f0       	push   $0xf013b674
f011c7e3:	68 c5 02 00 00       	push   $0x2c5
f011c7e8:	68 5a b6 13 f0       	push   $0xf013b65a
f011c7ed:	e8 13 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c7f2:	e8 ac 06 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c7f7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c7fa:	29 c2                	sub    %eax,%edx
f011c7fc:	89 d0                	mov    %edx,%eax
f011c7fe:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c803:	74 17                	je     f011c81c <test_kmalloc_bestfit2+0x11d5>
f011c805:	83 ec 04             	sub    $0x4,%esp
f011c808:	68 54 bb 13 f0       	push   $0xf013bb54
f011c80d:	68 c6 02 00 00       	push   $0x2c6
f011c812:	68 5a b6 13 f0       	push   $0xf013b65a
f011c817:	e8 e9 39 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c81c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c823:	10 00 00 
f011c826:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c82c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c831:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c837:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c83d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c842:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c848:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c84e:	29 d0                	sub    %edx,%eax
f011c850:	89 c1                	mov    %eax,%ecx
f011c852:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c859:	10 00 00 
f011c85c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c861:	0f b6 d0             	movzbl %al,%edx
f011c864:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c86a:	01 d0                	add    %edx,%eax
f011c86c:	48                   	dec    %eax
f011c86d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c873:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c879:	ba 00 00 00 00       	mov    $0x0,%edx
f011c87e:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c884:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c88a:	29 d0                	sub    %edx,%eax
f011c88c:	01 c1                	add    %eax,%ecx
f011c88e:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c895:	10 00 00 
f011c898:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c89d:	0f b6 c0             	movzbl %al,%eax
f011c8a0:	c1 e0 04             	shl    $0x4,%eax
f011c8a3:	89 c2                	mov    %eax,%edx
f011c8a5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c8ab:	01 d0                	add    %edx,%eax
f011c8ad:	48                   	dec    %eax
f011c8ae:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c8b4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c8ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8bf:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c8c5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c8cb:	29 d0                	sub    %edx,%eax
f011c8cd:	01 c8                	add    %ecx,%eax
f011c8cf:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c8d4:	29 c2                	sub    %eax,%edx
f011c8d6:	89 d0                	mov    %edx,%eax
f011c8d8:	83 ec 0c             	sub    $0xc,%esp
f011c8db:	50                   	push   %eax
f011c8dc:	e8 ab b2 fe ff       	call   f0107b8c <kmalloc>
f011c8e1:	83 c4 10             	add    $0x10,%esp
f011c8e4:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c8ea:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c8f0:	85 c0                	test   %eax,%eax
f011c8f2:	74 17                	je     f011c90b <test_kmalloc_bestfit2+0x12c4>
f011c8f4:	83 ec 04             	sub    $0x4,%esp
f011c8f7:	68 a4 bb 13 f0       	push   $0xf013bba4
f011c8fc:	68 ce 02 00 00       	push   $0x2ce
f011c901:	68 5a b6 13 f0       	push   $0xf013b65a
f011c906:	e8 fa 38 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c90b:	83 ec 0c             	sub    $0xc,%esp
f011c90e:	68 08 bc 13 f0       	push   $0xf013bc08
f011c913:	e8 f6 43 fe ff       	call   f0100d0e <cprintf>
f011c918:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c91b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c920:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c923:	5b                   	pop    %ebx
f011c924:	5f                   	pop    %edi
f011c925:	5d                   	pop    %ebp
f011c926:	c3                   	ret    

f011c927 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c927:	55                   	push   %ebp
f011c928:	89 e5                	mov    %esp,%ebp
f011c92a:	57                   	push   %edi
f011c92b:	53                   	push   %ebx
f011c92c:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c932:	83 ec 0c             	sub    $0xc,%esp
f011c935:	68 9c b5 13 f0       	push   $0xf013b59c
f011c93a:	e8 cf 43 fe ff       	call   f0100d0e <cprintf>
f011c93f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c942:	83 ec 0c             	sub    $0xc,%esp
f011c945:	68 cc b5 13 f0       	push   $0xf013b5cc
f011c94a:	e8 bf 43 fe ff       	call   f0100d0e <cprintf>
f011c94f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c952:	83 ec 0c             	sub    $0xc,%esp
f011c955:	68 9c b5 13 f0       	push   $0xf013b59c
f011c95a:	e8 af 43 fe ff       	call   f0100d0e <cprintf>
f011c95f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c962:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c968:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c96d:	b8 00 00 00 00       	mov    $0x0,%eax
f011c972:	89 d7                	mov    %edx,%edi
f011c974:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c976:	e8 28 05 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011c97b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c97e:	e8 45 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c983:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c986:	83 ec 0c             	sub    $0xc,%esp
f011c989:	68 00 fc 0f 00       	push   $0xffc00
f011c98e:	e8 f9 b1 fe ff       	call   f0107b8c <kmalloc>
f011c993:	83 c4 10             	add    $0x10,%esp
f011c996:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c99c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c9a2:	89 c1                	mov    %eax,%ecx
f011c9a4:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c9ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c9ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c9b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c9b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9be:	f7 75 ec             	divl   -0x14(%ebp)
f011c9c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c9c4:	29 d0                	sub    %edx,%eax
f011c9c6:	89 c3                	mov    %eax,%ebx
f011c9c8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c9cf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c9d4:	0f b6 d0             	movzbl %al,%edx
f011c9d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c9da:	01 d0                	add    %edx,%eax
f011c9dc:	48                   	dec    %eax
f011c9dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c9e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c9e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9e8:	f7 75 e4             	divl   -0x1c(%ebp)
f011c9eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c9ee:	29 d0                	sub    %edx,%eax
f011c9f0:	01 c3                	add    %eax,%ebx
f011c9f2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c9f9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011c9fe:	0f b6 c0             	movzbl %al,%eax
f011ca01:	c1 e0 04             	shl    $0x4,%eax
f011ca04:	89 c2                	mov    %eax,%edx
f011ca06:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ca09:	01 d0                	add    %edx,%eax
f011ca0b:	48                   	dec    %eax
f011ca0c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ca0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca12:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca17:	f7 75 dc             	divl   -0x24(%ebp)
f011ca1a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca1d:	29 d0                	sub    %edx,%eax
f011ca1f:	01 d8                	add    %ebx,%eax
f011ca21:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ca26:	39 c1                	cmp    %eax,%ecx
f011ca28:	74 17                	je     f011ca41 <test_kmalloc_firstfit1+0x11a>
f011ca2a:	83 ec 04             	sub    $0x4,%esp
f011ca2d:	68 74 ba 13 f0       	push   $0xf013ba74
f011ca32:	68 e6 02 00 00       	push   $0x2e6
f011ca37:	68 5a b6 13 f0       	push   $0xf013b65a
f011ca3c:	e8 c4 37 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca41:	e8 82 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca46:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca49:	74 17                	je     f011ca62 <test_kmalloc_firstfit1+0x13b>
f011ca4b:	83 ec 04             	sub    $0x4,%esp
f011ca4e:	68 74 b6 13 f0       	push   $0xf013b674
f011ca53:	68 e7 02 00 00       	push   $0x2e7
f011ca58:	68 5a b6 13 f0       	push   $0xf013b65a
f011ca5d:	e8 a3 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca62:	e8 3c 04 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ca67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca6a:	29 c2                	sub    %eax,%edx
f011ca6c:	89 d0                	mov    %edx,%eax
f011ca6e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca73:	74 17                	je     f011ca8c <test_kmalloc_firstfit1+0x165>
f011ca75:	83 ec 04             	sub    $0x4,%esp
f011ca78:	68 a4 ba 13 f0       	push   $0xf013baa4
f011ca7d:	68 e8 02 00 00       	push   $0x2e8
f011ca82:	68 5a b6 13 f0       	push   $0xf013b65a
f011ca87:	e8 79 37 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca8c:	e8 12 04 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ca91:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca94:	e8 2f 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca99:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011ca9c:	83 ec 0c             	sub    $0xc,%esp
f011ca9f:	68 00 fc 0f 00       	push   $0xffc00
f011caa4:	e8 e3 b0 fe ff       	call   f0107b8c <kmalloc>
f011caa9:	83 c4 10             	add    $0x10,%esp
f011caac:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cab2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cab8:	89 c1                	mov    %eax,%ecx
f011caba:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cac1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cac4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cac9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cacc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cacf:	ba 00 00 00 00       	mov    $0x0,%edx
f011cad4:	f7 75 d4             	divl   -0x2c(%ebp)
f011cad7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cada:	29 d0                	sub    %edx,%eax
f011cadc:	89 c3                	mov    %eax,%ebx
f011cade:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cae5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011caea:	0f b6 d0             	movzbl %al,%edx
f011caed:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011caf0:	01 d0                	add    %edx,%eax
f011caf2:	48                   	dec    %eax
f011caf3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011caf6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011caf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cafe:	f7 75 cc             	divl   -0x34(%ebp)
f011cb01:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb04:	29 d0                	sub    %edx,%eax
f011cb06:	01 c3                	add    %eax,%ebx
f011cb08:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cb0f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cb14:	0f b6 c0             	movzbl %al,%eax
f011cb17:	c1 e0 04             	shl    $0x4,%eax
f011cb1a:	89 c2                	mov    %eax,%edx
f011cb1c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cb1f:	01 d0                	add    %edx,%eax
f011cb21:	48                   	dec    %eax
f011cb22:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cb25:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb28:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb2d:	f7 75 c4             	divl   -0x3c(%ebp)
f011cb30:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb33:	29 d0                	sub    %edx,%eax
f011cb35:	01 d8                	add    %ebx,%eax
f011cb37:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cb3c:	39 c1                	cmp    %eax,%ecx
f011cb3e:	74 17                	je     f011cb57 <test_kmalloc_firstfit1+0x230>
f011cb40:	83 ec 04             	sub    $0x4,%esp
f011cb43:	68 74 ba 13 f0       	push   $0xf013ba74
f011cb48:	68 ee 02 00 00       	push   $0x2ee
f011cb4d:	68 5a b6 13 f0       	push   $0xf013b65a
f011cb52:	e8 ae 36 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb57:	e8 6c 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb5c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb5f:	74 17                	je     f011cb78 <test_kmalloc_firstfit1+0x251>
f011cb61:	83 ec 04             	sub    $0x4,%esp
f011cb64:	68 74 b6 13 f0       	push   $0xf013b674
f011cb69:	68 ef 02 00 00       	push   $0x2ef
f011cb6e:	68 5a b6 13 f0       	push   $0xf013b65a
f011cb73:	e8 8d 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cb78:	e8 26 03 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011cb7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb80:	29 c2                	sub    %eax,%edx
f011cb82:	89 d0                	mov    %edx,%eax
f011cb84:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb89:	74 17                	je     f011cba2 <test_kmalloc_firstfit1+0x27b>
f011cb8b:	83 ec 04             	sub    $0x4,%esp
f011cb8e:	68 a4 ba 13 f0       	push   $0xf013baa4
f011cb93:	68 f0 02 00 00       	push   $0x2f0
f011cb98:	68 5a b6 13 f0       	push   $0xf013b65a
f011cb9d:	e8 63 36 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cba2:	e8 fc 02 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011cba7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbaa:	e8 19 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cbaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cbb2:	83 ec 0c             	sub    $0xc,%esp
f011cbb5:	68 00 fc 0f 00       	push   $0xffc00
f011cbba:	e8 cd af fe ff       	call   f0107b8c <kmalloc>
f011cbbf:	83 c4 10             	add    $0x10,%esp
f011cbc2:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cbc8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cbce:	89 c1                	mov    %eax,%ecx
f011cbd0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cbd7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cbda:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbdf:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cbe2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cbe5:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbea:	f7 75 bc             	divl   -0x44(%ebp)
f011cbed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cbf0:	29 d0                	sub    %edx,%eax
f011cbf2:	89 c3                	mov    %eax,%ebx
f011cbf4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cbfb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cc00:	0f b6 d0             	movzbl %al,%edx
f011cc03:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cc06:	01 d0                	add    %edx,%eax
f011cc08:	48                   	dec    %eax
f011cc09:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cc0c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc14:	f7 75 b4             	divl   -0x4c(%ebp)
f011cc17:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc1a:	29 d0                	sub    %edx,%eax
f011cc1c:	01 c3                	add    %eax,%ebx
f011cc1e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cc25:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cc2a:	0f b6 c0             	movzbl %al,%eax
f011cc2d:	c1 e0 04             	shl    $0x4,%eax
f011cc30:	89 c2                	mov    %eax,%edx
f011cc32:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cc35:	01 d0                	add    %edx,%eax
f011cc37:	48                   	dec    %eax
f011cc38:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cc3b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc43:	f7 75 ac             	divl   -0x54(%ebp)
f011cc46:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc49:	29 d0                	sub    %edx,%eax
f011cc4b:	01 d8                	add    %ebx,%eax
f011cc4d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cc52:	39 c1                	cmp    %eax,%ecx
f011cc54:	74 17                	je     f011cc6d <test_kmalloc_firstfit1+0x346>
f011cc56:	83 ec 04             	sub    $0x4,%esp
f011cc59:	68 74 ba 13 f0       	push   $0xf013ba74
f011cc5e:	68 f6 02 00 00       	push   $0x2f6
f011cc63:	68 5a b6 13 f0       	push   $0xf013b65a
f011cc68:	e8 98 35 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc6d:	e8 56 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc72:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc75:	74 17                	je     f011cc8e <test_kmalloc_firstfit1+0x367>
f011cc77:	83 ec 04             	sub    $0x4,%esp
f011cc7a:	68 74 b6 13 f0       	push   $0xf013b674
f011cc7f:	68 f7 02 00 00       	push   $0x2f7
f011cc84:	68 5a b6 13 f0       	push   $0xf013b65a
f011cc89:	e8 77 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cc8e:	e8 10 02 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011cc93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc96:	29 c2                	sub    %eax,%edx
f011cc98:	89 d0                	mov    %edx,%eax
f011cc9a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cc9f:	74 17                	je     f011ccb8 <test_kmalloc_firstfit1+0x391>
f011cca1:	83 ec 04             	sub    $0x4,%esp
f011cca4:	68 a4 ba 13 f0       	push   $0xf013baa4
f011cca9:	68 f8 02 00 00       	push   $0x2f8
f011ccae:	68 5a b6 13 f0       	push   $0xf013b65a
f011ccb3:	e8 4d 35 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ccb8:	e8 e6 01 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011ccbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccc0:	e8 03 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ccc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011ccc8:	83 ec 0c             	sub    $0xc,%esp
f011cccb:	68 00 fc 0f 00       	push   $0xffc00
f011ccd0:	e8 b7 ae fe ff       	call   f0107b8c <kmalloc>
f011ccd5:	83 c4 10             	add    $0x10,%esp
f011ccd8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011ccde:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011cce4:	89 c1                	mov    %eax,%ecx
f011cce6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cced:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ccf0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ccf5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ccf8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ccfb:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd00:	f7 75 a4             	divl   -0x5c(%ebp)
f011cd03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd06:	29 d0                	sub    %edx,%eax
f011cd08:	89 c3                	mov    %eax,%ebx
f011cd0a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cd11:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cd16:	0f b6 d0             	movzbl %al,%edx
f011cd19:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cd1c:	01 d0                	add    %edx,%eax
f011cd1e:	48                   	dec    %eax
f011cd1f:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cd22:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd25:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd2a:	f7 75 9c             	divl   -0x64(%ebp)
f011cd2d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd30:	29 d0                	sub    %edx,%eax
f011cd32:	01 c3                	add    %eax,%ebx
f011cd34:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cd3b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cd40:	0f b6 c0             	movzbl %al,%eax
f011cd43:	c1 e0 04             	shl    $0x4,%eax
f011cd46:	89 c2                	mov    %eax,%edx
f011cd48:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cd4b:	01 d0                	add    %edx,%eax
f011cd4d:	48                   	dec    %eax
f011cd4e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cd51:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cd54:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd59:	f7 75 94             	divl   -0x6c(%ebp)
f011cd5c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cd5f:	29 d0                	sub    %edx,%eax
f011cd61:	01 d8                	add    %ebx,%eax
f011cd63:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011cd68:	39 c1                	cmp    %eax,%ecx
f011cd6a:	74 17                	je     f011cd83 <test_kmalloc_firstfit1+0x45c>
f011cd6c:	83 ec 04             	sub    $0x4,%esp
f011cd6f:	68 74 ba 13 f0       	push   $0xf013ba74
f011cd74:	68 fe 02 00 00       	push   $0x2fe
f011cd79:	68 5a b6 13 f0       	push   $0xf013b65a
f011cd7e:	e8 82 34 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd83:	e8 40 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd88:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd8b:	74 17                	je     f011cda4 <test_kmalloc_firstfit1+0x47d>
f011cd8d:	83 ec 04             	sub    $0x4,%esp
f011cd90:	68 74 b6 13 f0       	push   $0xf013b674
f011cd95:	68 ff 02 00 00       	push   $0x2ff
f011cd9a:	68 5a b6 13 f0       	push   $0xf013b65a
f011cd9f:	e8 61 34 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cda4:	e8 fa 00 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011cda9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cdac:	29 c2                	sub    %eax,%edx
f011cdae:	89 d0                	mov    %edx,%eax
f011cdb0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cdb5:	74 17                	je     f011cdce <test_kmalloc_firstfit1+0x4a7>
f011cdb7:	83 ec 04             	sub    $0x4,%esp
f011cdba:	68 a4 ba 13 f0       	push   $0xf013baa4
f011cdbf:	68 00 03 00 00       	push   $0x300
f011cdc4:	68 5a b6 13 f0       	push   $0xf013b65a
f011cdc9:	e8 37 34 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cdce:	e8 d0 00 ff ff       	call   f010cea3 <sys_calculate_free_frames>
f011cdd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdd6:	e8 ed 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cddb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011cdde:	83 ec 0c             	sub    $0xc,%esp
f011cde1:	68 00 fc 1f 00       	push   $0x1ffc00
f011cde6:	e8 a1 ad fe ff       	call   f0107b8c <kmalloc>
f011cdeb:	83 c4 10             	add    $0x10,%esp
f011cdee:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cdf4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011cdfa:	89 c1                	mov    %eax,%ecx
f011cdfc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ce03:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ce06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce0b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ce0e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce11:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce16:	f7 75 8c             	divl   -0x74(%ebp)
f011ce19:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce1c:	29 d0                	sub    %edx,%eax
f011ce1e:	89 c3                	mov    %eax,%ebx
f011ce20:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ce27:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ce2c:	0f b6 d0             	movzbl %al,%edx
f011ce2f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ce32:	01 d0                	add    %edx,%eax
f011ce34:	48                   	dec    %eax
f011ce35:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ce38:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce40:	f7 75 84             	divl   -0x7c(%ebp)
f011ce43:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce46:	29 d0                	sub    %edx,%eax
f011ce48:	01 c3                	add    %eax,%ebx
f011ce4a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ce51:	10 00 00 
f011ce54:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ce59:	0f b6 c0             	movzbl %al,%eax
f011ce5c:	c1 e0 04             	shl    $0x4,%eax
f011ce5f:	89 c2                	mov    %eax,%edx
f011ce61:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ce67:	01 d0                	add    %edx,%eax
f011ce69:	48                   	dec    %eax
f011ce6a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ce70:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ce76:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce7b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ce81:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ce87:	29 d0                	sub    %edx,%eax
f011ce89:	01 d8                	add    %ebx,%eax
f011ce8b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ce90:	39 c1                	cmp    %eax,%ecx
f011ce92:	74 17                	je     f011ceab <test_kmalloc_firstfit1+0x584>
f011ce94:	83 ec 04             	sub    $0x4,%esp
f011ce97:	68 74 ba 13 f0       	push   $0xf013ba74
f011ce9c:	68 06 03 00 00       	push   $0x306
f011cea1:	68 5a b6 13 f0       	push   $0xf013b65a
f011cea6:	e8 5a 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ceab:	e8 18 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ceb0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ceb3:	74 17                	je     f011cecc <test_kmalloc_firstfit1+0x5a5>
f011ceb5:	83 ec 04             	sub    $0x4,%esp
f011ceb8:	68 74 b6 13 f0       	push   $0xf013b674
f011cebd:	68 07 03 00 00       	push   $0x307
f011cec2:	68 5a b6 13 f0       	push   $0xf013b65a
f011cec7:	e8 39 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cecc:	e8 d2 ff fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011ced1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ced4:	29 c2                	sub    %eax,%edx
f011ced6:	89 d0                	mov    %edx,%eax
f011ced8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cedd:	74 17                	je     f011cef6 <test_kmalloc_firstfit1+0x5cf>
f011cedf:	83 ec 04             	sub    $0x4,%esp
f011cee2:	68 a4 ba 13 f0       	push   $0xf013baa4
f011cee7:	68 08 03 00 00       	push   $0x308
f011ceec:	68 5a b6 13 f0       	push   $0xf013b65a
f011cef1:	e8 0f 33 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cef6:	e8 a8 ff fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011cefb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cefe:	e8 c5 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf03:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cf06:	83 ec 0c             	sub    $0xc,%esp
f011cf09:	68 00 fc 1f 00       	push   $0x1ffc00
f011cf0e:	e8 79 ac fe ff       	call   f0107b8c <kmalloc>
f011cf13:	83 c4 10             	add    $0x10,%esp
f011cf16:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cf1c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011cf22:	89 c1                	mov    %eax,%ecx
f011cf24:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cf2b:	10 00 00 
f011cf2e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cf34:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf39:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cf3f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cf45:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf4a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cf50:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cf56:	29 d0                	sub    %edx,%eax
f011cf58:	89 c3                	mov    %eax,%ebx
f011cf5a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cf61:	10 00 00 
f011cf64:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cf69:	0f b6 d0             	movzbl %al,%edx
f011cf6c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cf72:	01 d0                	add    %edx,%eax
f011cf74:	48                   	dec    %eax
f011cf75:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cf7b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cf81:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf86:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011cf8c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cf92:	29 d0                	sub    %edx,%eax
f011cf94:	01 c3                	add    %eax,%ebx
f011cf96:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011cf9d:	10 00 00 
f011cfa0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011cfa5:	0f b6 c0             	movzbl %al,%eax
f011cfa8:	c1 e0 04             	shl    $0x4,%eax
f011cfab:	89 c2                	mov    %eax,%edx
f011cfad:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011cfb3:	01 d0                	add    %edx,%eax
f011cfb5:	48                   	dec    %eax
f011cfb6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011cfbc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cfc2:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfc7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011cfcd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cfd3:	29 d0                	sub    %edx,%eax
f011cfd5:	01 d8                	add    %ebx,%eax
f011cfd7:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cfdc:	39 c1                	cmp    %eax,%ecx
f011cfde:	74 17                	je     f011cff7 <test_kmalloc_firstfit1+0x6d0>
f011cfe0:	83 ec 04             	sub    $0x4,%esp
f011cfe3:	68 74 ba 13 f0       	push   $0xf013ba74
f011cfe8:	68 0e 03 00 00       	push   $0x30e
f011cfed:	68 5a b6 13 f0       	push   $0xf013b65a
f011cff2:	e8 0e 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cff7:	e8 cc 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cffc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfff:	74 17                	je     f011d018 <test_kmalloc_firstfit1+0x6f1>
f011d001:	83 ec 04             	sub    $0x4,%esp
f011d004:	68 74 b6 13 f0       	push   $0xf013b674
f011d009:	68 0f 03 00 00       	push   $0x30f
f011d00e:	68 5a b6 13 f0       	push   $0xf013b65a
f011d013:	e8 ed 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d018:	e8 86 fe fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d01d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d020:	29 c2                	sub    %eax,%edx
f011d022:	89 d0                	mov    %edx,%eax
f011d024:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d029:	74 17                	je     f011d042 <test_kmalloc_firstfit1+0x71b>
f011d02b:	83 ec 04             	sub    $0x4,%esp
f011d02e:	68 a4 ba 13 f0       	push   $0xf013baa4
f011d033:	68 10 03 00 00       	push   $0x310
f011d038:	68 5a b6 13 f0       	push   $0xf013b65a
f011d03d:	e8 c3 31 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d042:	e8 5c fe fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d047:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d04a:	e8 79 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d04f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d052:	83 ec 0c             	sub    $0xc,%esp
f011d055:	68 00 fc 2f 00       	push   $0x2ffc00
f011d05a:	e8 2d ab fe ff       	call   f0107b8c <kmalloc>
f011d05f:	83 c4 10             	add    $0x10,%esp
f011d062:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d068:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d06e:	89 c1                	mov    %eax,%ecx
f011d070:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d077:	10 00 00 
f011d07a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d080:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d085:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d08b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d091:	ba 00 00 00 00       	mov    $0x0,%edx
f011d096:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d09c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d0a2:	29 d0                	sub    %edx,%eax
f011d0a4:	89 c3                	mov    %eax,%ebx
f011d0a6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d0ad:	10 00 00 
f011d0b0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d0b5:	0f b6 d0             	movzbl %al,%edx
f011d0b8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d0be:	01 d0                	add    %edx,%eax
f011d0c0:	48                   	dec    %eax
f011d0c1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d0c7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d0cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0d2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d0d8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d0de:	29 d0                	sub    %edx,%eax
f011d0e0:	01 c3                	add    %eax,%ebx
f011d0e2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d0e9:	10 00 00 
f011d0ec:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d0f1:	0f b6 c0             	movzbl %al,%eax
f011d0f4:	c1 e0 04             	shl    $0x4,%eax
f011d0f7:	89 c2                	mov    %eax,%edx
f011d0f9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d0ff:	01 d0                	add    %edx,%eax
f011d101:	48                   	dec    %eax
f011d102:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d108:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d10e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d113:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d119:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d11f:	29 d0                	sub    %edx,%eax
f011d121:	01 d8                	add    %ebx,%eax
f011d123:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d128:	39 c1                	cmp    %eax,%ecx
f011d12a:	74 17                	je     f011d143 <test_kmalloc_firstfit1+0x81c>
f011d12c:	83 ec 04             	sub    $0x4,%esp
f011d12f:	68 74 ba 13 f0       	push   $0xf013ba74
f011d134:	68 16 03 00 00       	push   $0x316
f011d139:	68 5a b6 13 f0       	push   $0xf013b65a
f011d13e:	e8 c2 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d143:	e8 80 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d148:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d14b:	74 17                	je     f011d164 <test_kmalloc_firstfit1+0x83d>
f011d14d:	83 ec 04             	sub    $0x4,%esp
f011d150:	68 74 b6 13 f0       	push   $0xf013b674
f011d155:	68 17 03 00 00       	push   $0x317
f011d15a:	68 5a b6 13 f0       	push   $0xf013b65a
f011d15f:	e8 a1 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d164:	e8 3a fd fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d169:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d16c:	29 c2                	sub    %eax,%edx
f011d16e:	89 d0                	mov    %edx,%eax
f011d170:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d175:	74 17                	je     f011d18e <test_kmalloc_firstfit1+0x867>
f011d177:	83 ec 04             	sub    $0x4,%esp
f011d17a:	68 a4 ba 13 f0       	push   $0xf013baa4
f011d17f:	68 18 03 00 00       	push   $0x318
f011d184:	68 5a b6 13 f0       	push   $0xf013b65a
f011d189:	e8 77 30 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d18e:	e8 10 fd fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d193:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d196:	e8 2d 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d19b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d19e:	83 ec 0c             	sub    $0xc,%esp
f011d1a1:	68 00 fc 2f 00       	push   $0x2ffc00
f011d1a6:	e8 e1 a9 fe ff       	call   f0107b8c <kmalloc>
f011d1ab:	83 c4 10             	add    $0x10,%esp
f011d1ae:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d1b4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d1ba:	89 c1                	mov    %eax,%ecx
f011d1bc:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d1c3:	10 00 00 
f011d1c6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d1cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1d1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d1d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d1dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1e2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d1e8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d1ee:	29 d0                	sub    %edx,%eax
f011d1f0:	89 c3                	mov    %eax,%ebx
f011d1f2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d1f9:	10 00 00 
f011d1fc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d201:	0f b6 d0             	movzbl %al,%edx
f011d204:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d20a:	01 d0                	add    %edx,%eax
f011d20c:	48                   	dec    %eax
f011d20d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d213:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d219:	ba 00 00 00 00       	mov    $0x0,%edx
f011d21e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d224:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d22a:	29 d0                	sub    %edx,%eax
f011d22c:	01 c3                	add    %eax,%ebx
f011d22e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d235:	10 00 00 
f011d238:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d23d:	0f b6 c0             	movzbl %al,%eax
f011d240:	c1 e0 04             	shl    $0x4,%eax
f011d243:	89 c2                	mov    %eax,%edx
f011d245:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d24b:	01 d0                	add    %edx,%eax
f011d24d:	48                   	dec    %eax
f011d24e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d254:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d25a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d25f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d265:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d26b:	29 d0                	sub    %edx,%eax
f011d26d:	01 d8                	add    %ebx,%eax
f011d26f:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d274:	39 c1                	cmp    %eax,%ecx
f011d276:	74 17                	je     f011d28f <test_kmalloc_firstfit1+0x968>
f011d278:	83 ec 04             	sub    $0x4,%esp
f011d27b:	68 74 ba 13 f0       	push   $0xf013ba74
f011d280:	68 1e 03 00 00       	push   $0x31e
f011d285:	68 5a b6 13 f0       	push   $0xf013b65a
f011d28a:	e8 76 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d28f:	e8 34 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d294:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d297:	74 17                	je     f011d2b0 <test_kmalloc_firstfit1+0x989>
f011d299:	83 ec 04             	sub    $0x4,%esp
f011d29c:	68 74 b6 13 f0       	push   $0xf013b674
f011d2a1:	68 1f 03 00 00       	push   $0x31f
f011d2a6:	68 5a b6 13 f0       	push   $0xf013b65a
f011d2ab:	e8 55 2f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d2b0:	e8 ee fb fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d2b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2b8:	29 c2                	sub    %eax,%edx
f011d2ba:	89 d0                	mov    %edx,%eax
f011d2bc:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d2c1:	74 17                	je     f011d2da <test_kmalloc_firstfit1+0x9b3>
f011d2c3:	83 ec 04             	sub    $0x4,%esp
f011d2c6:	68 a4 ba 13 f0       	push   $0xf013baa4
f011d2cb:	68 20 03 00 00       	push   $0x320
f011d2d0:	68 5a b6 13 f0       	push   $0xf013b65a
f011d2d5:	e8 2b 2f fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d2da:	e8 c4 fb fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d2df:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2e2:	e8 e1 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d2e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d2ea:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d2f0:	83 ec 0c             	sub    $0xc,%esp
f011d2f3:	50                   	push   %eax
f011d2f4:	e8 5e a9 fe ff       	call   f0107c57 <kfree>
f011d2f9:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2fc:	e8 c7 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d301:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d304:	74 17                	je     f011d31d <test_kmalloc_firstfit1+0x9f6>
f011d306:	83 ec 04             	sub    $0x4,%esp
f011d309:	68 74 b6 13 f0       	push   $0xf013b674
f011d30e:	68 29 03 00 00       	push   $0x329
f011d313:	68 5a b6 13 f0       	push   $0xf013b65a
f011d318:	e8 e8 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d31d:	e8 81 fb fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d322:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d325:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d32a:	74 17                	je     f011d343 <test_kmalloc_firstfit1+0xa1c>
f011d32c:	83 ec 04             	sub    $0x4,%esp
f011d32f:	68 b7 ba 13 f0       	push   $0xf013bab7
f011d334:	68 2a 03 00 00       	push   $0x32a
f011d339:	68 5a b6 13 f0       	push   $0xf013b65a
f011d33e:	e8 c2 2e fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d343:	e8 5b fb fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d348:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d34b:	e8 78 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d350:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d353:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d359:	83 ec 0c             	sub    $0xc,%esp
f011d35c:	50                   	push   %eax
f011d35d:	e8 f5 a8 fe ff       	call   f0107c57 <kfree>
f011d362:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d365:	e8 5e 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d36a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d36d:	74 17                	je     f011d386 <test_kmalloc_firstfit1+0xa5f>
f011d36f:	83 ec 04             	sub    $0x4,%esp
f011d372:	68 74 b6 13 f0       	push   $0xf013b674
f011d377:	68 30 03 00 00       	push   $0x330
f011d37c:	68 5a b6 13 f0       	push   $0xf013b65a
f011d381:	e8 7f 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d386:	e8 18 fb fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d38b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d38e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d393:	74 17                	je     f011d3ac <test_kmalloc_firstfit1+0xa85>
f011d395:	83 ec 04             	sub    $0x4,%esp
f011d398:	68 b7 ba 13 f0       	push   $0xf013bab7
f011d39d:	68 31 03 00 00       	push   $0x331
f011d3a2:	68 5a b6 13 f0       	push   $0xf013b65a
f011d3a7:	e8 59 2e fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d3ac:	e8 f2 fa fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d3b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3b4:	e8 0f 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d3bc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d3c2:	83 ec 0c             	sub    $0xc,%esp
f011d3c5:	50                   	push   %eax
f011d3c6:	e8 8c a8 fe ff       	call   f0107c57 <kfree>
f011d3cb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3ce:	e8 f5 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3d6:	74 17                	je     f011d3ef <test_kmalloc_firstfit1+0xac8>
f011d3d8:	83 ec 04             	sub    $0x4,%esp
f011d3db:	68 74 b6 13 f0       	push   $0xf013b674
f011d3e0:	68 37 03 00 00       	push   $0x337
f011d3e5:	68 5a b6 13 f0       	push   $0xf013b65a
f011d3ea:	e8 16 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d3ef:	e8 af fa fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d3f4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d3f7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d3fc:	74 17                	je     f011d415 <test_kmalloc_firstfit1+0xaee>
f011d3fe:	83 ec 04             	sub    $0x4,%esp
f011d401:	68 b7 ba 13 f0       	push   $0xf013bab7
f011d406:	68 38 03 00 00       	push   $0x338
f011d40b:	68 5a b6 13 f0       	push   $0xf013b65a
f011d410:	e8 f0 2d fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d415:	e8 89 fa fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d41a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d41d:	e8 a6 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d422:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d425:	83 ec 0c             	sub    $0xc,%esp
f011d428:	68 00 fc 07 00       	push   $0x7fc00
f011d42d:	e8 5a a7 fe ff       	call   f0107b8c <kmalloc>
f011d432:	83 c4 10             	add    $0x10,%esp
f011d435:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d43b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d441:	89 c1                	mov    %eax,%ecx
f011d443:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d44a:	10 00 00 
f011d44d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d453:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d458:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d45e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d464:	ba 00 00 00 00       	mov    $0x0,%edx
f011d469:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d46f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d475:	29 d0                	sub    %edx,%eax
f011d477:	89 c3                	mov    %eax,%ebx
f011d479:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d480:	10 00 00 
f011d483:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d488:	0f b6 d0             	movzbl %al,%edx
f011d48b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d491:	01 d0                	add    %edx,%eax
f011d493:	48                   	dec    %eax
f011d494:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d49a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4a5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d4ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4b1:	29 d0                	sub    %edx,%eax
f011d4b3:	01 c3                	add    %eax,%ebx
f011d4b5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d4bc:	10 00 00 
f011d4bf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d4c4:	0f b6 c0             	movzbl %al,%eax
f011d4c7:	c1 e0 04             	shl    $0x4,%eax
f011d4ca:	89 c2                	mov    %eax,%edx
f011d4cc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d4d2:	01 d0                	add    %edx,%eax
f011d4d4:	48                   	dec    %eax
f011d4d5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d4db:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d4e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4e6:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d4ec:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d4f2:	29 d0                	sub    %edx,%eax
f011d4f4:	01 d8                	add    %ebx,%eax
f011d4f6:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d4fb:	39 c1                	cmp    %eax,%ecx
f011d4fd:	74 17                	je     f011d516 <test_kmalloc_firstfit1+0xbef>
f011d4ff:	83 ec 04             	sub    $0x4,%esp
f011d502:	68 74 ba 13 f0       	push   $0xf013ba74
f011d507:	68 41 03 00 00       	push   $0x341
f011d50c:	68 5a b6 13 f0       	push   $0xf013b65a
f011d511:	e8 ef 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d516:	e8 ad 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d51b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d51e:	74 17                	je     f011d537 <test_kmalloc_firstfit1+0xc10>
f011d520:	83 ec 04             	sub    $0x4,%esp
f011d523:	68 74 b6 13 f0       	push   $0xf013b674
f011d528:	68 42 03 00 00       	push   $0x342
f011d52d:	68 5a b6 13 f0       	push   $0xf013b65a
f011d532:	e8 ce 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d537:	e8 67 f9 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d53c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d53f:	29 c2                	sub    %eax,%edx
f011d541:	89 d0                	mov    %edx,%eax
f011d543:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d548:	74 17                	je     f011d561 <test_kmalloc_firstfit1+0xc3a>
f011d54a:	83 ec 04             	sub    $0x4,%esp
f011d54d:	68 a4 ba 13 f0       	push   $0xf013baa4
f011d552:	68 43 03 00 00       	push   $0x343
f011d557:	68 5a b6 13 f0       	push   $0xf013b65a
f011d55c:	e8 a4 2c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d561:	e8 3d f9 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d566:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d569:	e8 5a 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d56e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d571:	83 ec 0c             	sub    $0xc,%esp
f011d574:	68 00 fc 0f 00       	push   $0xffc00
f011d579:	e8 0e a6 fe ff       	call   f0107b8c <kmalloc>
f011d57e:	83 c4 10             	add    $0x10,%esp
f011d581:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d587:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d58d:	89 c1                	mov    %eax,%ecx
f011d58f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d596:	10 00 00 
f011d599:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d59f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d5a4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d5aa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d5b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5b5:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d5bb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d5c1:	29 d0                	sub    %edx,%eax
f011d5c3:	89 c3                	mov    %eax,%ebx
f011d5c5:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d5cc:	10 00 00 
f011d5cf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d5d4:	0f b6 d0             	movzbl %al,%edx
f011d5d7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d5dd:	01 d0                	add    %edx,%eax
f011d5df:	48                   	dec    %eax
f011d5e0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d5e6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d5ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5f1:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d5f7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d5fd:	29 d0                	sub    %edx,%eax
f011d5ff:	01 c3                	add    %eax,%ebx
f011d601:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d608:	10 00 00 
f011d60b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d610:	0f b6 c0             	movzbl %al,%eax
f011d613:	c1 e0 04             	shl    $0x4,%eax
f011d616:	89 c2                	mov    %eax,%edx
f011d618:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d61e:	01 d0                	add    %edx,%eax
f011d620:	48                   	dec    %eax
f011d621:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d627:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d62d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d632:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d638:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d63e:	29 d0                	sub    %edx,%eax
f011d640:	01 d8                	add    %ebx,%eax
f011d642:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d647:	39 c1                	cmp    %eax,%ecx
f011d649:	74 17                	je     f011d662 <test_kmalloc_firstfit1+0xd3b>
f011d64b:	83 ec 04             	sub    $0x4,%esp
f011d64e:	68 74 ba 13 f0       	push   $0xf013ba74
f011d653:	68 49 03 00 00       	push   $0x349
f011d658:	68 5a b6 13 f0       	push   $0xf013b65a
f011d65d:	e8 a3 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d662:	e8 61 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d667:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d66a:	74 17                	je     f011d683 <test_kmalloc_firstfit1+0xd5c>
f011d66c:	83 ec 04             	sub    $0x4,%esp
f011d66f:	68 74 b6 13 f0       	push   $0xf013b674
f011d674:	68 4a 03 00 00       	push   $0x34a
f011d679:	68 5a b6 13 f0       	push   $0xf013b65a
f011d67e:	e8 82 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d683:	e8 1b f8 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d688:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d68b:	29 c2                	sub    %eax,%edx
f011d68d:	89 d0                	mov    %edx,%eax
f011d68f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d694:	74 17                	je     f011d6ad <test_kmalloc_firstfit1+0xd86>
f011d696:	83 ec 04             	sub    $0x4,%esp
f011d699:	68 a4 ba 13 f0       	push   $0xf013baa4
f011d69e:	68 4b 03 00 00       	push   $0x34b
f011d6a3:	68 5a b6 13 f0       	push   $0xf013b65a
f011d6a8:	e8 58 2b fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d6ad:	e8 f1 f7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d6b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6b5:	e8 0e 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d6ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d6bd:	83 ec 0c             	sub    $0xc,%esp
f011d6c0:	68 00 fc 03 00       	push   $0x3fc00
f011d6c5:	e8 c2 a4 fe ff       	call   f0107b8c <kmalloc>
f011d6ca:	83 c4 10             	add    $0x10,%esp
f011d6cd:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d6d3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d6d9:	89 c1                	mov    %eax,%ecx
f011d6db:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d6e2:	10 00 00 
f011d6e5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d6eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d6f0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d6f6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d6fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011d701:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d707:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d70d:	29 d0                	sub    %edx,%eax
f011d70f:	89 c3                	mov    %eax,%ebx
f011d711:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d718:	10 00 00 
f011d71b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d720:	0f b6 d0             	movzbl %al,%edx
f011d723:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d729:	01 d0                	add    %edx,%eax
f011d72b:	48                   	dec    %eax
f011d72c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d732:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d738:	ba 00 00 00 00       	mov    $0x0,%edx
f011d73d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d743:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d749:	29 d0                	sub    %edx,%eax
f011d74b:	01 c3                	add    %eax,%ebx
f011d74d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d754:	10 00 00 
f011d757:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d75c:	0f b6 c0             	movzbl %al,%eax
f011d75f:	c1 e0 04             	shl    $0x4,%eax
f011d762:	89 c2                	mov    %eax,%edx
f011d764:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d76a:	01 d0                	add    %edx,%eax
f011d76c:	48                   	dec    %eax
f011d76d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d773:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d779:	ba 00 00 00 00       	mov    $0x0,%edx
f011d77e:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d784:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d78a:	29 d0                	sub    %edx,%eax
f011d78c:	01 d8                	add    %ebx,%eax
f011d78e:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d793:	39 c1                	cmp    %eax,%ecx
f011d795:	74 17                	je     f011d7ae <test_kmalloc_firstfit1+0xe87>
f011d797:	83 ec 04             	sub    $0x4,%esp
f011d79a:	68 74 ba 13 f0       	push   $0xf013ba74
f011d79f:	68 52 03 00 00       	push   $0x352
f011d7a4:	68 5a b6 13 f0       	push   $0xf013b65a
f011d7a9:	e8 57 2a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7ae:	e8 15 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7b3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7b6:	74 17                	je     f011d7cf <test_kmalloc_firstfit1+0xea8>
f011d7b8:	83 ec 04             	sub    $0x4,%esp
f011d7bb:	68 74 b6 13 f0       	push   $0xf013b674
f011d7c0:	68 53 03 00 00       	push   $0x353
f011d7c5:	68 5a b6 13 f0       	push   $0xf013b65a
f011d7ca:	e8 36 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d7cf:	e8 cf f6 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d7d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d7d7:	29 c2                	sub    %eax,%edx
f011d7d9:	89 d0                	mov    %edx,%eax
f011d7db:	83 f8 40             	cmp    $0x40,%eax
f011d7de:	74 17                	je     f011d7f7 <test_kmalloc_firstfit1+0xed0>
f011d7e0:	83 ec 04             	sub    $0x4,%esp
f011d7e3:	68 a4 ba 13 f0       	push   $0xf013baa4
f011d7e8:	68 54 03 00 00       	push   $0x354
f011d7ed:	68 5a b6 13 f0       	push   $0xf013b65a
f011d7f2:	e8 0e 2a fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d7f7:	e8 a7 f6 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d7fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7ff:	e8 c4 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d804:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d807:	83 ec 0c             	sub    $0xc,%esp
f011d80a:	68 00 00 20 00       	push   $0x200000
f011d80f:	e8 78 a3 fe ff       	call   f0107b8c <kmalloc>
f011d814:	83 c4 10             	add    $0x10,%esp
f011d817:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d81d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d823:	89 c1                	mov    %eax,%ecx
f011d825:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d82c:	10 00 00 
f011d82f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d835:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d83a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d840:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d846:	ba 00 00 00 00       	mov    $0x0,%edx
f011d84b:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d851:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d857:	29 d0                	sub    %edx,%eax
f011d859:	89 c3                	mov    %eax,%ebx
f011d85b:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d862:	10 00 00 
f011d865:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d86a:	0f b6 d0             	movzbl %al,%edx
f011d86d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d873:	01 d0                	add    %edx,%eax
f011d875:	48                   	dec    %eax
f011d876:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d87c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d882:	ba 00 00 00 00       	mov    $0x0,%edx
f011d887:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d88d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d893:	29 d0                	sub    %edx,%eax
f011d895:	01 c3                	add    %eax,%ebx
f011d897:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d89e:	10 00 00 
f011d8a1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d8a6:	0f b6 c0             	movzbl %al,%eax
f011d8a9:	c1 e0 04             	shl    $0x4,%eax
f011d8ac:	89 c2                	mov    %eax,%edx
f011d8ae:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d8b4:	01 d0                	add    %edx,%eax
f011d8b6:	48                   	dec    %eax
f011d8b7:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d8bd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d8c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8c8:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d8ce:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d8d4:	29 d0                	sub    %edx,%eax
f011d8d6:	01 d8                	add    %ebx,%eax
f011d8d8:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d8dd:	39 c1                	cmp    %eax,%ecx
f011d8df:	74 17                	je     f011d8f8 <test_kmalloc_firstfit1+0xfd1>
f011d8e1:	83 ec 04             	sub    $0x4,%esp
f011d8e4:	68 74 ba 13 f0       	push   $0xf013ba74
f011d8e9:	68 5a 03 00 00       	push   $0x35a
f011d8ee:	68 5a b6 13 f0       	push   $0xf013b65a
f011d8f3:	e8 0d 29 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d8f8:	e8 a6 f5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d8fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d900:	29 c2                	sub    %eax,%edx
f011d902:	89 d0                	mov    %edx,%eax
f011d904:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d909:	74 17                	je     f011d922 <test_kmalloc_firstfit1+0xffb>
f011d90b:	83 ec 04             	sub    $0x4,%esp
f011d90e:	68 a4 ba 13 f0       	push   $0xf013baa4
f011d913:	68 5b 03 00 00       	push   $0x35b
f011d918:	68 5a b6 13 f0       	push   $0xf013b65a
f011d91d:	e8 e3 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d922:	e8 a1 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d927:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d92a:	74 17                	je     f011d943 <test_kmalloc_firstfit1+0x101c>
f011d92c:	83 ec 04             	sub    $0x4,%esp
f011d92f:	68 74 b6 13 f0       	push   $0xf013b674
f011d934:	68 5c 03 00 00       	push   $0x35c
f011d939:	68 5a b6 13 f0       	push   $0xf013b65a
f011d93e:	e8 c2 28 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d943:	e8 5b f5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011d948:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d94b:	e8 78 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d950:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d953:	83 ec 0c             	sub    $0xc,%esp
f011d956:	68 00 fc 3f 00       	push   $0x3ffc00
f011d95b:	e8 2c a2 fe ff       	call   f0107b8c <kmalloc>
f011d960:	83 c4 10             	add    $0x10,%esp
f011d963:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d969:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d96f:	89 c1                	mov    %eax,%ecx
f011d971:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d978:	10 00 00 
f011d97b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d981:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d986:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d98c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d992:	ba 00 00 00 00       	mov    $0x0,%edx
f011d997:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d99d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d9a3:	29 d0                	sub    %edx,%eax
f011d9a5:	89 c3                	mov    %eax,%ebx
f011d9a7:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d9ae:	10 00 00 
f011d9b1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d9b6:	0f b6 d0             	movzbl %al,%edx
f011d9b9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d9bf:	01 d0                	add    %edx,%eax
f011d9c1:	48                   	dec    %eax
f011d9c2:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d9c8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d9ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9d3:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d9d9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d9df:	29 d0                	sub    %edx,%eax
f011d9e1:	01 c3                	add    %eax,%ebx
f011d9e3:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d9ea:	10 00 00 
f011d9ed:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011d9f2:	0f b6 c0             	movzbl %al,%eax
f011d9f5:	c1 e0 04             	shl    $0x4,%eax
f011d9f8:	89 c2                	mov    %eax,%edx
f011d9fa:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011da00:	01 d0                	add    %edx,%eax
f011da02:	48                   	dec    %eax
f011da03:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011da09:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011da0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011da14:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011da1a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011da20:	29 d0                	sub    %edx,%eax
f011da22:	01 d8                	add    %ebx,%eax
f011da24:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011da29:	39 c1                	cmp    %eax,%ecx
f011da2b:	74 17                	je     f011da44 <test_kmalloc_firstfit1+0x111d>
f011da2d:	83 ec 04             	sub    $0x4,%esp
f011da30:	68 74 ba 13 f0       	push   $0xf013ba74
f011da35:	68 63 03 00 00       	push   $0x363
f011da3a:	68 5a b6 13 f0       	push   $0xf013b65a
f011da3f:	e8 c1 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da44:	e8 7f 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da49:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011da4c:	74 17                	je     f011da65 <test_kmalloc_firstfit1+0x113e>
f011da4e:	83 ec 04             	sub    $0x4,%esp
f011da51:	68 74 b6 13 f0       	push   $0xf013b674
f011da56:	68 64 03 00 00       	push   $0x364
f011da5b:	68 5a b6 13 f0       	push   $0xf013b65a
f011da60:	e8 a0 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011da65:	e8 39 f4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011da6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011da6d:	29 c2                	sub    %eax,%edx
f011da6f:	89 d0                	mov    %edx,%eax
f011da71:	3d 00 04 00 00       	cmp    $0x400,%eax
f011da76:	74 17                	je     f011da8f <test_kmalloc_firstfit1+0x1168>
f011da78:	83 ec 04             	sub    $0x4,%esp
f011da7b:	68 a4 ba 13 f0       	push   $0xf013baa4
f011da80:	68 65 03 00 00       	push   $0x365
f011da85:	68 5a b6 13 f0       	push   $0xf013b65a
f011da8a:	e8 76 27 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011da8f:	e8 0f f4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011da94:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da97:	e8 2c 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011da9f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011daa5:	83 ec 0c             	sub    $0xc,%esp
f011daa8:	50                   	push   %eax
f011daa9:	e8 a9 a1 fe ff       	call   f0107c57 <kfree>
f011daae:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dab1:	e8 12 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dab6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dab9:	74 17                	je     f011dad2 <test_kmalloc_firstfit1+0x11ab>
f011dabb:	83 ec 04             	sub    $0x4,%esp
f011dabe:	68 74 b6 13 f0       	push   $0xf013b674
f011dac3:	68 6e 03 00 00       	push   $0x36e
f011dac8:	68 5a b6 13 f0       	push   $0xf013b65a
f011dacd:	e8 33 27 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011dad2:	e8 cc f3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011dad7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011dada:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dadf:	74 17                	je     f011daf8 <test_kmalloc_firstfit1+0x11d1>
f011dae1:	83 ec 04             	sub    $0x4,%esp
f011dae4:	68 b7 ba 13 f0       	push   $0xf013bab7
f011dae9:	68 6f 03 00 00       	push   $0x36f
f011daee:	68 5a b6 13 f0       	push   $0xf013b65a
f011daf3:	e8 0d 27 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011daf8:	e8 a6 f3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011dafd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db00:	e8 c3 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db05:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011db08:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011db0e:	83 ec 0c             	sub    $0xc,%esp
f011db11:	50                   	push   %eax
f011db12:	e8 40 a1 fe ff       	call   f0107c57 <kfree>
f011db17:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db1a:	e8 a9 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011db22:	74 17                	je     f011db3b <test_kmalloc_firstfit1+0x1214>
f011db24:	83 ec 04             	sub    $0x4,%esp
f011db27:	68 74 b6 13 f0       	push   $0xf013b674
f011db2c:	68 75 03 00 00       	push   $0x375
f011db31:	68 5a b6 13 f0       	push   $0xf013b65a
f011db36:	e8 ca 26 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011db3b:	e8 63 f3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011db40:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011db43:	3d 00 01 00 00       	cmp    $0x100,%eax
f011db48:	74 17                	je     f011db61 <test_kmalloc_firstfit1+0x123a>
f011db4a:	83 ec 04             	sub    $0x4,%esp
f011db4d:	68 b7 ba 13 f0       	push   $0xf013bab7
f011db52:	68 76 03 00 00       	push   $0x376
f011db57:	68 5a b6 13 f0       	push   $0xf013b65a
f011db5c:	e8 a4 26 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011db61:	e8 3d f3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011db66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db69:	e8 5a 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011db71:	83 ec 0c             	sub    $0xc,%esp
f011db74:	68 00 00 10 00       	push   $0x100000
f011db79:	e8 0e a0 fe ff       	call   f0107b8c <kmalloc>
f011db7e:	83 c4 10             	add    $0x10,%esp
f011db81:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011db87:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011db8d:	89 c1                	mov    %eax,%ecx
f011db8f:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011db96:	10 00 00 
f011db99:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011db9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dba4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011dbaa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dbb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbb5:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011dbbb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dbc1:	29 d0                	sub    %edx,%eax
f011dbc3:	89 c3                	mov    %eax,%ebx
f011dbc5:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011dbcc:	10 00 00 
f011dbcf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011dbd4:	0f b6 d0             	movzbl %al,%edx
f011dbd7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dbdd:	01 d0                	add    %edx,%eax
f011dbdf:	48                   	dec    %eax
f011dbe0:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011dbe6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dbec:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbf1:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011dbf7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dbfd:	29 d0                	sub    %edx,%eax
f011dbff:	01 c3                	add    %eax,%ebx
f011dc01:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011dc08:	10 00 00 
f011dc0b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011dc10:	0f b6 c0             	movzbl %al,%eax
f011dc13:	c1 e0 04             	shl    $0x4,%eax
f011dc16:	89 c2                	mov    %eax,%edx
f011dc18:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011dc1e:	01 d0                	add    %edx,%eax
f011dc20:	48                   	dec    %eax
f011dc21:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011dc27:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dc2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc32:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011dc38:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dc3e:	29 d0                	sub    %edx,%eax
f011dc40:	01 d8                	add    %ebx,%eax
f011dc42:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011dc47:	39 c1                	cmp    %eax,%ecx
f011dc49:	74 17                	je     f011dc62 <test_kmalloc_firstfit1+0x133b>
f011dc4b:	83 ec 04             	sub    $0x4,%esp
f011dc4e:	68 74 ba 13 f0       	push   $0xf013ba74
f011dc53:	68 80 03 00 00       	push   $0x380
f011dc58:	68 5a b6 13 f0       	push   $0xf013b65a
f011dc5d:	e8 a3 25 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc62:	e8 61 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc67:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dc6a:	74 17                	je     f011dc83 <test_kmalloc_firstfit1+0x135c>
f011dc6c:	83 ec 04             	sub    $0x4,%esp
f011dc6f:	68 74 b6 13 f0       	push   $0xf013b674
f011dc74:	68 81 03 00 00       	push   $0x381
f011dc79:	68 5a b6 13 f0       	push   $0xf013b65a
f011dc7e:	e8 82 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011dc83:	e8 1b f2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011dc88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dc8b:	29 c2                	sub    %eax,%edx
f011dc8d:	89 d0                	mov    %edx,%eax
f011dc8f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dc94:	74 17                	je     f011dcad <test_kmalloc_firstfit1+0x1386>
f011dc96:	83 ec 04             	sub    $0x4,%esp
f011dc99:	68 a4 ba 13 f0       	push   $0xf013baa4
f011dc9e:	68 82 03 00 00       	push   $0x382
f011dca3:	68 5a b6 13 f0       	push   $0xf013b65a
f011dca8:	e8 58 25 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011dcad:	83 ec 0c             	sub    $0xc,%esp
f011dcb0:	68 50 bc 13 f0       	push   $0xf013bc50
f011dcb5:	e8 54 30 fe ff       	call   f0100d0e <cprintf>
f011dcba:	83 c4 10             	add    $0x10,%esp

	return 1;
f011dcbd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dcc2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dcc5:	5b                   	pop    %ebx
f011dcc6:	5f                   	pop    %edi
f011dcc7:	5d                   	pop    %ebp
f011dcc8:	c3                   	ret    

f011dcc9 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011dcc9:	55                   	push   %ebp
f011dcca:	89 e5                	mov    %esp,%ebp
f011dccc:	57                   	push   %edi
f011dccd:	53                   	push   %ebx
f011dcce:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011dcd4:	83 ec 0c             	sub    $0xc,%esp
f011dcd7:	68 9c b5 13 f0       	push   $0xf013b59c
f011dcdc:	e8 2d 30 fe ff       	call   f0100d0e <cprintf>
f011dce1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011dce4:	83 ec 0c             	sub    $0xc,%esp
f011dce7:	68 cc b5 13 f0       	push   $0xf013b5cc
f011dcec:	e8 1d 30 fe ff       	call   f0100d0e <cprintf>
f011dcf1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011dcf4:	83 ec 0c             	sub    $0xc,%esp
f011dcf7:	68 9c b5 13 f0       	push   $0xf013b59c
f011dcfc:	e8 0d 30 fe ff       	call   f0100d0e <cprintf>
f011dd01:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011dd04:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011dd0a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011dd0f:	b8 00 00 00 00       	mov    $0x0,%eax
f011dd14:	89 d7                	mov    %edx,%edi
f011dd16:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011dd18:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011dd1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dd22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd27:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011dd2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dd2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd32:	f7 75 f4             	divl   -0xc(%ebp)
f011dd35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dd38:	29 d0                	sub    %edx,%eax
f011dd3a:	89 c1                	mov    %eax,%ecx
f011dd3c:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011dd43:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011dd48:	0f b6 d0             	movzbl %al,%edx
f011dd4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011dd4e:	01 d0                	add    %edx,%eax
f011dd50:	48                   	dec    %eax
f011dd51:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dd54:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd57:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd5c:	f7 75 ec             	divl   -0x14(%ebp)
f011dd5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd62:	29 d0                	sub    %edx,%eax
f011dd64:	01 c1                	add    %eax,%ecx
f011dd66:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011dd6d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011dd72:	0f b6 c0             	movzbl %al,%eax
f011dd75:	c1 e0 04             	shl    $0x4,%eax
f011dd78:	89 c2                	mov    %eax,%edx
f011dd7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011dd7d:	01 d0                	add    %edx,%eax
f011dd7f:	48                   	dec    %eax
f011dd80:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011dd83:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dd86:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd8b:	f7 75 e4             	divl   -0x1c(%ebp)
f011dd8e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dd91:	29 d0                	sub    %edx,%eax
f011dd93:	01 c8                	add    %ecx,%eax
f011dd95:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011dd9a:	29 c2                	sub    %eax,%edx
f011dd9c:	89 d0                	mov    %edx,%eax
f011dd9e:	83 ec 0c             	sub    $0xc,%esp
f011dda1:	50                   	push   %eax
f011dda2:	e8 e5 9d fe ff       	call   f0107b8c <kmalloc>
f011dda7:	83 c4 10             	add    $0x10,%esp
f011ddaa:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011ddb0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ddb6:	85 c0                	test   %eax,%eax
f011ddb8:	74 17                	je     f011ddd1 <test_kmalloc_firstfit2+0x108>
f011ddba:	83 ec 04             	sub    $0x4,%esp
f011ddbd:	68 9c bc 13 f0       	push   $0xf013bc9c
f011ddc2:	68 97 03 00 00       	push   $0x397
f011ddc7:	68 5a b6 13 f0       	push   $0xf013b65a
f011ddcc:	e8 34 24 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ddd1:	e8 cd f0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011ddd6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddd9:	e8 ea 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ddde:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011dde1:	83 ec 0c             	sub    $0xc,%esp
f011dde4:	68 00 fc 1f 00       	push   $0x1ffc00
f011dde9:	e8 9e 9d fe ff       	call   f0107b8c <kmalloc>
f011ddee:	83 c4 10             	add    $0x10,%esp
f011ddf1:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ddf7:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ddfd:	89 c1                	mov    %eax,%ecx
f011ddff:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011de06:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011de09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011de11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011de14:	ba 00 00 00 00       	mov    $0x0,%edx
f011de19:	f7 75 d4             	divl   -0x2c(%ebp)
f011de1c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011de1f:	29 d0                	sub    %edx,%eax
f011de21:	89 c3                	mov    %eax,%ebx
f011de23:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011de2a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011de2f:	0f b6 d0             	movzbl %al,%edx
f011de32:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011de35:	01 d0                	add    %edx,%eax
f011de37:	48                   	dec    %eax
f011de38:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011de3b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011de3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011de43:	f7 75 cc             	divl   -0x34(%ebp)
f011de46:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011de49:	29 d0                	sub    %edx,%eax
f011de4b:	01 c3                	add    %eax,%ebx
f011de4d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011de54:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011de59:	0f b6 c0             	movzbl %al,%eax
f011de5c:	c1 e0 04             	shl    $0x4,%eax
f011de5f:	89 c2                	mov    %eax,%edx
f011de61:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011de64:	01 d0                	add    %edx,%eax
f011de66:	48                   	dec    %eax
f011de67:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011de6a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011de6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011de72:	f7 75 c4             	divl   -0x3c(%ebp)
f011de75:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011de78:	29 d0                	sub    %edx,%eax
f011de7a:	01 d8                	add    %ebx,%eax
f011de7c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011de81:	39 c1                	cmp    %eax,%ecx
f011de83:	74 17                	je     f011de9c <test_kmalloc_firstfit2+0x1d3>
f011de85:	83 ec 04             	sub    $0x4,%esp
f011de88:	68 74 ba 13 f0       	push   $0xf013ba74
f011de8d:	68 a1 03 00 00       	push   $0x3a1
f011de92:	68 5a b6 13 f0       	push   $0xf013b65a
f011de97:	e8 69 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de9c:	e8 27 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dea1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dea4:	74 17                	je     f011debd <test_kmalloc_firstfit2+0x1f4>
f011dea6:	83 ec 04             	sub    $0x4,%esp
f011dea9:	68 74 b6 13 f0       	push   $0xf013b674
f011deae:	68 a2 03 00 00       	push   $0x3a2
f011deb3:	68 5a b6 13 f0       	push   $0xf013b65a
f011deb8:	e8 48 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011debd:	e8 e1 ef fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011dec2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dec5:	29 c2                	sub    %eax,%edx
f011dec7:	89 d0                	mov    %edx,%eax
f011dec9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dece:	74 17                	je     f011dee7 <test_kmalloc_firstfit2+0x21e>
f011ded0:	83 ec 04             	sub    $0x4,%esp
f011ded3:	68 a4 ba 13 f0       	push   $0xf013baa4
f011ded8:	68 a3 03 00 00       	push   $0x3a3
f011dedd:	68 5a b6 13 f0       	push   $0xf013b65a
f011dee2:	e8 1e 23 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011dee7:	e8 b7 ef fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011deec:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011deef:	e8 d4 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011def4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011def7:	83 ec 0c             	sub    $0xc,%esp
f011defa:	68 00 fc 1f 00       	push   $0x1ffc00
f011deff:	e8 88 9c fe ff       	call   f0107b8c <kmalloc>
f011df04:	83 c4 10             	add    $0x10,%esp
f011df07:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011df0d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011df13:	89 c1                	mov    %eax,%ecx
f011df15:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011df1c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011df1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df24:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011df27:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011df2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011df2f:	f7 75 bc             	divl   -0x44(%ebp)
f011df32:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011df35:	29 d0                	sub    %edx,%eax
f011df37:	89 c3                	mov    %eax,%ebx
f011df39:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011df40:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011df45:	0f b6 d0             	movzbl %al,%edx
f011df48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011df4b:	01 d0                	add    %edx,%eax
f011df4d:	48                   	dec    %eax
f011df4e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011df51:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011df54:	ba 00 00 00 00       	mov    $0x0,%edx
f011df59:	f7 75 b4             	divl   -0x4c(%ebp)
f011df5c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011df5f:	29 d0                	sub    %edx,%eax
f011df61:	01 c3                	add    %eax,%ebx
f011df63:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011df6a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011df6f:	0f b6 c0             	movzbl %al,%eax
f011df72:	c1 e0 04             	shl    $0x4,%eax
f011df75:	89 c2                	mov    %eax,%edx
f011df77:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011df7a:	01 d0                	add    %edx,%eax
f011df7c:	48                   	dec    %eax
f011df7d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011df80:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011df83:	ba 00 00 00 00       	mov    $0x0,%edx
f011df88:	f7 75 ac             	divl   -0x54(%ebp)
f011df8b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011df8e:	29 d0                	sub    %edx,%eax
f011df90:	01 d8                	add    %ebx,%eax
f011df92:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011df97:	39 c1                	cmp    %eax,%ecx
f011df99:	74 17                	je     f011dfb2 <test_kmalloc_firstfit2+0x2e9>
f011df9b:	83 ec 04             	sub    $0x4,%esp
f011df9e:	68 74 ba 13 f0       	push   $0xf013ba74
f011dfa3:	68 a9 03 00 00       	push   $0x3a9
f011dfa8:	68 5a b6 13 f0       	push   $0xf013b65a
f011dfad:	e8 53 22 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfb2:	e8 11 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dfb7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dfba:	74 17                	je     f011dfd3 <test_kmalloc_firstfit2+0x30a>
f011dfbc:	83 ec 04             	sub    $0x4,%esp
f011dfbf:	68 74 b6 13 f0       	push   $0xf013b674
f011dfc4:	68 aa 03 00 00       	push   $0x3aa
f011dfc9:	68 5a b6 13 f0       	push   $0xf013b65a
f011dfce:	e8 32 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dfd3:	e8 cb ee fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011dfd8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dfdb:	29 c2                	sub    %eax,%edx
f011dfdd:	89 d0                	mov    %edx,%eax
f011dfdf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dfe4:	74 17                	je     f011dffd <test_kmalloc_firstfit2+0x334>
f011dfe6:	83 ec 04             	sub    $0x4,%esp
f011dfe9:	68 a4 ba 13 f0       	push   $0xf013baa4
f011dfee:	68 ab 03 00 00       	push   $0x3ab
f011dff3:	68 5a b6 13 f0       	push   $0xf013b65a
f011dff8:	e8 08 22 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dffd:	e8 a1 ee fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e002:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e005:	e8 be 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e00a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e00d:	83 ec 0c             	sub    $0xc,%esp
f011e010:	68 00 08 00 00       	push   $0x800
f011e015:	e8 72 9b fe ff       	call   f0107b8c <kmalloc>
f011e01a:	83 c4 10             	add    $0x10,%esp
f011e01d:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e023:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e029:	89 c1                	mov    %eax,%ecx
f011e02b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e032:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e035:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e03a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e03d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e040:	ba 00 00 00 00       	mov    $0x0,%edx
f011e045:	f7 75 a4             	divl   -0x5c(%ebp)
f011e048:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e04b:	29 d0                	sub    %edx,%eax
f011e04d:	89 c3                	mov    %eax,%ebx
f011e04f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e056:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e05b:	0f b6 d0             	movzbl %al,%edx
f011e05e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e061:	01 d0                	add    %edx,%eax
f011e063:	48                   	dec    %eax
f011e064:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e067:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e06a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e06f:	f7 75 9c             	divl   -0x64(%ebp)
f011e072:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e075:	29 d0                	sub    %edx,%eax
f011e077:	01 c3                	add    %eax,%ebx
f011e079:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e080:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e085:	0f b6 c0             	movzbl %al,%eax
f011e088:	c1 e0 04             	shl    $0x4,%eax
f011e08b:	89 c2                	mov    %eax,%edx
f011e08d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e090:	01 d0                	add    %edx,%eax
f011e092:	48                   	dec    %eax
f011e093:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e096:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e099:	ba 00 00 00 00       	mov    $0x0,%edx
f011e09e:	f7 75 94             	divl   -0x6c(%ebp)
f011e0a1:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e0a4:	29 d0                	sub    %edx,%eax
f011e0a6:	01 d8                	add    %ebx,%eax
f011e0a8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e0ad:	39 c1                	cmp    %eax,%ecx
f011e0af:	73 17                	jae    f011e0c8 <test_kmalloc_firstfit2+0x3ff>
f011e0b1:	83 ec 04             	sub    $0x4,%esp
f011e0b4:	68 74 ba 13 f0       	push   $0xf013ba74
f011e0b9:	68 b1 03 00 00       	push   $0x3b1
f011e0be:	68 5a b6 13 f0       	push   $0xf013b65a
f011e0c3:	e8 3d 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0c8:	e8 fb 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0cd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e0d0:	74 17                	je     f011e0e9 <test_kmalloc_firstfit2+0x420>
f011e0d2:	83 ec 04             	sub    $0x4,%esp
f011e0d5:	68 74 b6 13 f0       	push   $0xf013b674
f011e0da:	68 b2 03 00 00       	push   $0x3b2
f011e0df:	68 5a b6 13 f0       	push   $0xf013b65a
f011e0e4:	e8 1c 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e0e9:	e8 b5 ed fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e0ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e0f1:	29 c2                	sub    %eax,%edx
f011e0f3:	89 d0                	mov    %edx,%eax
f011e0f5:	83 f8 01             	cmp    $0x1,%eax
f011e0f8:	74 17                	je     f011e111 <test_kmalloc_firstfit2+0x448>
f011e0fa:	83 ec 04             	sub    $0x4,%esp
f011e0fd:	68 a4 ba 13 f0       	push   $0xf013baa4
f011e102:	68 b3 03 00 00       	push   $0x3b3
f011e107:	68 5a b6 13 f0       	push   $0xf013b65a
f011e10c:	e8 f4 20 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e111:	e8 8d ed fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e116:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e119:	e8 aa 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e11e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e121:	83 ec 0c             	sub    $0xc,%esp
f011e124:	68 00 08 00 00       	push   $0x800
f011e129:	e8 5e 9a fe ff       	call   f0107b8c <kmalloc>
f011e12e:	83 c4 10             	add    $0x10,%esp
f011e131:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e137:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e13d:	89 c1                	mov    %eax,%ecx
f011e13f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e146:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e149:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e14e:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e151:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e154:	ba 00 00 00 00       	mov    $0x0,%edx
f011e159:	f7 75 8c             	divl   -0x74(%ebp)
f011e15c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e15f:	29 d0                	sub    %edx,%eax
f011e161:	89 c3                	mov    %eax,%ebx
f011e163:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e16a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e16f:	0f b6 d0             	movzbl %al,%edx
f011e172:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e175:	01 d0                	add    %edx,%eax
f011e177:	48                   	dec    %eax
f011e178:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e17b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e17e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e183:	f7 75 84             	divl   -0x7c(%ebp)
f011e186:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e189:	29 d0                	sub    %edx,%eax
f011e18b:	01 c3                	add    %eax,%ebx
f011e18d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e194:	10 00 00 
f011e197:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e19c:	0f b6 c0             	movzbl %al,%eax
f011e19f:	c1 e0 04             	shl    $0x4,%eax
f011e1a2:	89 c2                	mov    %eax,%edx
f011e1a4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e1aa:	01 d0                	add    %edx,%eax
f011e1ac:	48                   	dec    %eax
f011e1ad:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e1b3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e1b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1be:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e1c4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e1ca:	29 d0                	sub    %edx,%eax
f011e1cc:	01 d8                	add    %ebx,%eax
f011e1ce:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e1d3:	39 c1                	cmp    %eax,%ecx
f011e1d5:	74 17                	je     f011e1ee <test_kmalloc_firstfit2+0x525>
f011e1d7:	83 ec 04             	sub    $0x4,%esp
f011e1da:	68 74 ba 13 f0       	push   $0xf013ba74
f011e1df:	68 b9 03 00 00       	push   $0x3b9
f011e1e4:	68 5a b6 13 f0       	push   $0xf013b65a
f011e1e9:	e8 17 20 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1ee:	e8 d5 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e1f3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e1f6:	74 17                	je     f011e20f <test_kmalloc_firstfit2+0x546>
f011e1f8:	83 ec 04             	sub    $0x4,%esp
f011e1fb:	68 74 b6 13 f0       	push   $0xf013b674
f011e200:	68 ba 03 00 00       	push   $0x3ba
f011e205:	68 5a b6 13 f0       	push   $0xf013b65a
f011e20a:	e8 f6 1f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e20f:	e8 8f ec fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e214:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e217:	29 c2                	sub    %eax,%edx
f011e219:	89 d0                	mov    %edx,%eax
f011e21b:	83 f8 01             	cmp    $0x1,%eax
f011e21e:	74 17                	je     f011e237 <test_kmalloc_firstfit2+0x56e>
f011e220:	83 ec 04             	sub    $0x4,%esp
f011e223:	68 a4 ba 13 f0       	push   $0xf013baa4
f011e228:	68 bb 03 00 00       	push   $0x3bb
f011e22d:	68 5a b6 13 f0       	push   $0xf013b65a
f011e232:	e8 ce 1f fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e237:	e8 67 ec fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e23c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e23f:	e8 84 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e244:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e247:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e24d:	83 ec 0c             	sub    $0xc,%esp
f011e250:	50                   	push   %eax
f011e251:	e8 01 9a fe ff       	call   f0107c57 <kfree>
f011e256:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e259:	e8 6a 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e25e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e261:	74 17                	je     f011e27a <test_kmalloc_firstfit2+0x5b1>
f011e263:	83 ec 04             	sub    $0x4,%esp
f011e266:	68 74 b6 13 f0       	push   $0xf013b674
f011e26b:	68 c1 03 00 00       	push   $0x3c1
f011e270:	68 5a b6 13 f0       	push   $0xf013b65a
f011e275:	e8 8b 1f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e27a:	e8 24 ec fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e27f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e282:	83 f8 01             	cmp    $0x1,%eax
f011e285:	74 17                	je     f011e29e <test_kmalloc_firstfit2+0x5d5>
f011e287:	83 ec 04             	sub    $0x4,%esp
f011e28a:	68 b7 ba 13 f0       	push   $0xf013bab7
f011e28f:	68 c2 03 00 00       	push   $0x3c2
f011e294:	68 5a b6 13 f0       	push   $0xf013b65a
f011e299:	e8 67 1f fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e29e:	e8 00 ec fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e2a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e2a6:	e8 1d 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e2ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e2ae:	83 ec 0c             	sub    $0xc,%esp
f011e2b1:	68 00 1c 00 00       	push   $0x1c00
f011e2b6:	e8 d1 98 fe ff       	call   f0107b8c <kmalloc>
f011e2bb:	83 c4 10             	add    $0x10,%esp
f011e2be:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e2c4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e2ca:	89 c1                	mov    %eax,%ecx
f011e2cc:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e2d3:	10 00 00 
f011e2d6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e2dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2e1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e2e7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e2ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2f2:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e2f8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e2fe:	29 d0                	sub    %edx,%eax
f011e300:	89 c3                	mov    %eax,%ebx
f011e302:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e309:	10 00 00 
f011e30c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e311:	0f b6 d0             	movzbl %al,%edx
f011e314:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e31a:	01 d0                	add    %edx,%eax
f011e31c:	48                   	dec    %eax
f011e31d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e323:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e329:	ba 00 00 00 00       	mov    $0x0,%edx
f011e32e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e334:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e33a:	29 d0                	sub    %edx,%eax
f011e33c:	01 c3                	add    %eax,%ebx
f011e33e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e345:	10 00 00 
f011e348:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e34d:	0f b6 c0             	movzbl %al,%eax
f011e350:	c1 e0 04             	shl    $0x4,%eax
f011e353:	89 c2                	mov    %eax,%edx
f011e355:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e35b:	01 d0                	add    %edx,%eax
f011e35d:	48                   	dec    %eax
f011e35e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e364:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e36a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e36f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e375:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e37b:	29 d0                	sub    %edx,%eax
f011e37d:	01 d8                	add    %ebx,%eax
f011e37f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e384:	39 c1                	cmp    %eax,%ecx
f011e386:	74 17                	je     f011e39f <test_kmalloc_firstfit2+0x6d6>
f011e388:	83 ec 04             	sub    $0x4,%esp
f011e38b:	68 74 ba 13 f0       	push   $0xf013ba74
f011e390:	68 c8 03 00 00       	push   $0x3c8
f011e395:	68 5a b6 13 f0       	push   $0xf013b65a
f011e39a:	e8 66 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e39f:	e8 24 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e3a4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e3a7:	74 17                	je     f011e3c0 <test_kmalloc_firstfit2+0x6f7>
f011e3a9:	83 ec 04             	sub    $0x4,%esp
f011e3ac:	68 74 b6 13 f0       	push   $0xf013b674
f011e3b1:	68 c9 03 00 00       	push   $0x3c9
f011e3b6:	68 5a b6 13 f0       	push   $0xf013b65a
f011e3bb:	e8 45 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e3c0:	e8 de ea fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e3c5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e3c8:	29 c2                	sub    %eax,%edx
f011e3ca:	89 d0                	mov    %edx,%eax
f011e3cc:	83 f8 02             	cmp    $0x2,%eax
f011e3cf:	74 17                	je     f011e3e8 <test_kmalloc_firstfit2+0x71f>
f011e3d1:	83 ec 04             	sub    $0x4,%esp
f011e3d4:	68 a4 ba 13 f0       	push   $0xf013baa4
f011e3d9:	68 ca 03 00 00       	push   $0x3ca
f011e3de:	68 5a b6 13 f0       	push   $0xf013b65a
f011e3e3:	e8 1d 1e fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e3e8:	e8 b6 ea fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e3ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e3f0:	e8 d3 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e3f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e3f8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e3fe:	83 ec 0c             	sub    $0xc,%esp
f011e401:	50                   	push   %eax
f011e402:	e8 50 98 fe ff       	call   f0107c57 <kfree>
f011e407:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e40a:	e8 b9 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e40f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e412:	74 17                	je     f011e42b <test_kmalloc_firstfit2+0x762>
f011e414:	83 ec 04             	sub    $0x4,%esp
f011e417:	68 74 b6 13 f0       	push   $0xf013b674
f011e41c:	68 d0 03 00 00       	push   $0x3d0
f011e421:	68 5a b6 13 f0       	push   $0xf013b65a
f011e426:	e8 da 1d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e42b:	e8 73 ea fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e430:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e433:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e438:	74 17                	je     f011e451 <test_kmalloc_firstfit2+0x788>
f011e43a:	83 ec 04             	sub    $0x4,%esp
f011e43d:	68 b7 ba 13 f0       	push   $0xf013bab7
f011e442:	68 d1 03 00 00       	push   $0x3d1
f011e447:	68 5a b6 13 f0       	push   $0xf013b65a
f011e44c:	e8 b4 1d fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e451:	e8 4d ea fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e456:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e459:	e8 6a 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e45e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e461:	83 ec 0c             	sub    $0xc,%esp
f011e464:	68 00 fc 2f 00       	push   $0x2ffc00
f011e469:	e8 1e 97 fe ff       	call   f0107b8c <kmalloc>
f011e46e:	83 c4 10             	add    $0x10,%esp
f011e471:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e477:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e47d:	89 c1                	mov    %eax,%ecx
f011e47f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e486:	10 00 00 
f011e489:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e48f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e494:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e49a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e4a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4a5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e4ab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e4b1:	29 d0                	sub    %edx,%eax
f011e4b3:	89 c3                	mov    %eax,%ebx
f011e4b5:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e4bc:	10 00 00 
f011e4bf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e4c4:	0f b6 d0             	movzbl %al,%edx
f011e4c7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e4cd:	01 d0                	add    %edx,%eax
f011e4cf:	48                   	dec    %eax
f011e4d0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e4d6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e4dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4e1:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e4e7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e4ed:	29 d0                	sub    %edx,%eax
f011e4ef:	01 c3                	add    %eax,%ebx
f011e4f1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e4f8:	10 00 00 
f011e4fb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e500:	0f b6 c0             	movzbl %al,%eax
f011e503:	c1 e0 04             	shl    $0x4,%eax
f011e506:	89 c2                	mov    %eax,%edx
f011e508:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e50e:	01 d0                	add    %edx,%eax
f011e510:	48                   	dec    %eax
f011e511:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e517:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e51d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e522:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e528:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e52e:	29 d0                	sub    %edx,%eax
f011e530:	01 d8                	add    %ebx,%eax
f011e532:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e537:	39 c1                	cmp    %eax,%ecx
f011e539:	74 17                	je     f011e552 <test_kmalloc_firstfit2+0x889>
f011e53b:	83 ec 04             	sub    $0x4,%esp
f011e53e:	68 74 ba 13 f0       	push   $0xf013ba74
f011e543:	68 d7 03 00 00       	push   $0x3d7
f011e548:	68 5a b6 13 f0       	push   $0xf013b65a
f011e54d:	e8 b3 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e552:	e8 71 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e557:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e55a:	74 17                	je     f011e573 <test_kmalloc_firstfit2+0x8aa>
f011e55c:	83 ec 04             	sub    $0x4,%esp
f011e55f:	68 74 b6 13 f0       	push   $0xf013b674
f011e564:	68 d8 03 00 00       	push   $0x3d8
f011e569:	68 5a b6 13 f0       	push   $0xf013b65a
f011e56e:	e8 92 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e573:	e8 2b e9 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e578:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e57b:	29 c2                	sub    %eax,%edx
f011e57d:	89 d0                	mov    %edx,%eax
f011e57f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e584:	74 17                	je     f011e59d <test_kmalloc_firstfit2+0x8d4>
f011e586:	83 ec 04             	sub    $0x4,%esp
f011e589:	68 a4 ba 13 f0       	push   $0xf013baa4
f011e58e:	68 d9 03 00 00       	push   $0x3d9
f011e593:	68 5a b6 13 f0       	push   $0xf013b65a
f011e598:	e8 68 1c fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e59d:	e8 01 e9 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e5a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e5a5:	e8 1e 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e5aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e5ad:	83 ec 0c             	sub    $0xc,%esp
f011e5b0:	68 00 18 20 00       	push   $0x201800
f011e5b5:	e8 d2 95 fe ff       	call   f0107b8c <kmalloc>
f011e5ba:	83 c4 10             	add    $0x10,%esp
f011e5bd:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e5c3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e5c9:	89 c1                	mov    %eax,%ecx
f011e5cb:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e5d2:	10 00 00 
f011e5d5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e5db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5e0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e5e6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e5ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5f1:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e5f7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e5fd:	29 d0                	sub    %edx,%eax
f011e5ff:	89 c3                	mov    %eax,%ebx
f011e601:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e608:	10 00 00 
f011e60b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e610:	0f b6 d0             	movzbl %al,%edx
f011e613:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e619:	01 d0                	add    %edx,%eax
f011e61b:	48                   	dec    %eax
f011e61c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e622:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e628:	ba 00 00 00 00       	mov    $0x0,%edx
f011e62d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e633:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e639:	29 d0                	sub    %edx,%eax
f011e63b:	01 c3                	add    %eax,%ebx
f011e63d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e644:	10 00 00 
f011e647:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e64c:	0f b6 c0             	movzbl %al,%eax
f011e64f:	c1 e0 04             	shl    $0x4,%eax
f011e652:	89 c2                	mov    %eax,%edx
f011e654:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e65a:	01 d0                	add    %edx,%eax
f011e65c:	48                   	dec    %eax
f011e65d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e663:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e669:	ba 00 00 00 00       	mov    $0x0,%edx
f011e66e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e674:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e67a:	29 d0                	sub    %edx,%eax
f011e67c:	01 d8                	add    %ebx,%eax
f011e67e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e683:	39 c1                	cmp    %eax,%ecx
f011e685:	74 17                	je     f011e69e <test_kmalloc_firstfit2+0x9d5>
f011e687:	83 ec 04             	sub    $0x4,%esp
f011e68a:	68 74 ba 13 f0       	push   $0xf013ba74
f011e68f:	68 df 03 00 00       	push   $0x3df
f011e694:	68 5a b6 13 f0       	push   $0xf013b65a
f011e699:	e8 67 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e69e:	e8 25 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e6a3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e6a6:	74 17                	je     f011e6bf <test_kmalloc_firstfit2+0x9f6>
f011e6a8:	83 ec 04             	sub    $0x4,%esp
f011e6ab:	68 74 b6 13 f0       	push   $0xf013b674
f011e6b0:	68 e0 03 00 00       	push   $0x3e0
f011e6b5:	68 5a b6 13 f0       	push   $0xf013b65a
f011e6ba:	e8 46 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e6bf:	e8 df e7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e6c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e6c7:	29 c2                	sub    %eax,%edx
f011e6c9:	89 d0                	mov    %edx,%eax
f011e6cb:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e6d0:	74 17                	je     f011e6e9 <test_kmalloc_firstfit2+0xa20>
f011e6d2:	83 ec 04             	sub    $0x4,%esp
f011e6d5:	68 a4 ba 13 f0       	push   $0xf013baa4
f011e6da:	68 e1 03 00 00       	push   $0x3e1
f011e6df:	68 5a b6 13 f0       	push   $0xf013b65a
f011e6e4:	e8 1c 1b fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e6e9:	e8 b5 e7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e6ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6f1:	e8 d2 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e6f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e6f9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e6ff:	83 ec 0c             	sub    $0xc,%esp
f011e702:	50                   	push   %eax
f011e703:	e8 4f 95 fe ff       	call   f0107c57 <kfree>
f011e708:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e70b:	e8 b8 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e710:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e713:	74 17                	je     f011e72c <test_kmalloc_firstfit2+0xa63>
f011e715:	83 ec 04             	sub    $0x4,%esp
f011e718:	68 74 b6 13 f0       	push   $0xf013b674
f011e71d:	68 e7 03 00 00       	push   $0x3e7
f011e722:	68 5a b6 13 f0       	push   $0xf013b65a
f011e727:	e8 d9 1a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e72c:	e8 72 e7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e731:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e734:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e739:	74 17                	je     f011e752 <test_kmalloc_firstfit2+0xa89>
f011e73b:	83 ec 04             	sub    $0x4,%esp
f011e73e:	68 b7 ba 13 f0       	push   $0xf013bab7
f011e743:	68 e8 03 00 00       	push   $0x3e8
f011e748:	68 5a b6 13 f0       	push   $0xf013b65a
f011e74d:	e8 b3 1a fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e752:	e8 4c e7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e757:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e75a:	e8 69 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e75f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e762:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e768:	83 ec 0c             	sub    $0xc,%esp
f011e76b:	50                   	push   %eax
f011e76c:	e8 e6 94 fe ff       	call   f0107c57 <kfree>
f011e771:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e774:	e8 2a e7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e779:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e77c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e781:	74 17                	je     f011e79a <test_kmalloc_firstfit2+0xad1>
f011e783:	83 ec 04             	sub    $0x4,%esp
f011e786:	68 b7 ba 13 f0       	push   $0xf013bab7
f011e78b:	68 ee 03 00 00       	push   $0x3ee
f011e790:	68 5a b6 13 f0       	push   $0xf013b65a
f011e795:	e8 6b 1a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e79a:	e8 29 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e79f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e7a2:	74 17                	je     f011e7bb <test_kmalloc_firstfit2+0xaf2>
f011e7a4:	83 ec 04             	sub    $0x4,%esp
f011e7a7:	68 74 b6 13 f0       	push   $0xf013b674
f011e7ac:	68 ef 03 00 00       	push   $0x3ef
f011e7b1:	68 5a b6 13 f0       	push   $0xf013b65a
f011e7b6:	e8 4a 1a fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e7bb:	e8 e3 e6 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e7c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e7c3:	e8 00 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e7c8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e7cb:	83 ec 0c             	sub    $0xc,%esp
f011e7ce:	68 00 fc 4f 00       	push   $0x4ffc00
f011e7d3:	e8 b4 93 fe ff       	call   f0107b8c <kmalloc>
f011e7d8:	83 c4 10             	add    $0x10,%esp
f011e7db:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e7e1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e7e7:	89 c1                	mov    %eax,%ecx
f011e7e9:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e7f0:	10 00 00 
f011e7f3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e7f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e7fe:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e804:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e80a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e80f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e815:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e81b:	29 d0                	sub    %edx,%eax
f011e81d:	89 c3                	mov    %eax,%ebx
f011e81f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e826:	10 00 00 
f011e829:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e82e:	0f b6 d0             	movzbl %al,%edx
f011e831:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e837:	01 d0                	add    %edx,%eax
f011e839:	48                   	dec    %eax
f011e83a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e840:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e846:	ba 00 00 00 00       	mov    $0x0,%edx
f011e84b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e851:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e857:	29 d0                	sub    %edx,%eax
f011e859:	01 c3                	add    %eax,%ebx
f011e85b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e862:	10 00 00 
f011e865:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e86a:	0f b6 c0             	movzbl %al,%eax
f011e86d:	c1 e0 04             	shl    $0x4,%eax
f011e870:	89 c2                	mov    %eax,%edx
f011e872:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e878:	01 d0                	add    %edx,%eax
f011e87a:	48                   	dec    %eax
f011e87b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e881:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e887:	ba 00 00 00 00       	mov    $0x0,%edx
f011e88c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e892:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e898:	29 d0                	sub    %edx,%eax
f011e89a:	01 d8                	add    %ebx,%eax
f011e89c:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e8a1:	39 c1                	cmp    %eax,%ecx
f011e8a3:	74 17                	je     f011e8bc <test_kmalloc_firstfit2+0xbf3>
f011e8a5:	83 ec 04             	sub    $0x4,%esp
f011e8a8:	68 74 ba 13 f0       	push   $0xf013ba74
f011e8ad:	68 f5 03 00 00       	push   $0x3f5
f011e8b2:	68 5a b6 13 f0       	push   $0xf013b65a
f011e8b7:	e8 49 19 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8bc:	e8 07 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e8c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e8c4:	74 17                	je     f011e8dd <test_kmalloc_firstfit2+0xc14>
f011e8c6:	83 ec 04             	sub    $0x4,%esp
f011e8c9:	68 74 b6 13 f0       	push   $0xf013b674
f011e8ce:	68 f6 03 00 00       	push   $0x3f6
f011e8d3:	68 5a b6 13 f0       	push   $0xf013b65a
f011e8d8:	e8 28 19 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e8dd:	e8 c1 e5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e8e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e8e5:	29 c2                	sub    %eax,%edx
f011e8e7:	89 d0                	mov    %edx,%eax
f011e8e9:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e8ee:	74 17                	je     f011e907 <test_kmalloc_firstfit2+0xc3e>
f011e8f0:	83 ec 04             	sub    $0x4,%esp
f011e8f3:	68 a4 ba 13 f0       	push   $0xf013baa4
f011e8f8:	68 f7 03 00 00       	push   $0x3f7
f011e8fd:	68 5a b6 13 f0       	push   $0xf013b65a
f011e902:	e8 fe 18 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e907:	e8 97 e5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011e90c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e90f:	e8 b4 54 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e914:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e917:	83 ec 0c             	sub    $0xc,%esp
f011e91a:	68 00 fc 2f 00       	push   $0x2ffc00
f011e91f:	e8 68 92 fe ff       	call   f0107b8c <kmalloc>
f011e924:	83 c4 10             	add    $0x10,%esp
f011e927:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e92d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e933:	89 c1                	mov    %eax,%ecx
f011e935:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e93c:	10 00 00 
f011e93f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e945:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e94a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e950:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e956:	ba 00 00 00 00       	mov    $0x0,%edx
f011e95b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e961:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e967:	29 d0                	sub    %edx,%eax
f011e969:	89 c3                	mov    %eax,%ebx
f011e96b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e972:	10 00 00 
f011e975:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e97a:	0f b6 d0             	movzbl %al,%edx
f011e97d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e983:	01 d0                	add    %edx,%eax
f011e985:	48                   	dec    %eax
f011e986:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e98c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e992:	ba 00 00 00 00       	mov    $0x0,%edx
f011e997:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e99d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e9a3:	29 d0                	sub    %edx,%eax
f011e9a5:	01 c3                	add    %eax,%ebx
f011e9a7:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e9ae:	10 00 00 
f011e9b1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011e9b6:	0f b6 c0             	movzbl %al,%eax
f011e9b9:	c1 e0 04             	shl    $0x4,%eax
f011e9bc:	89 c2                	mov    %eax,%edx
f011e9be:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e9c4:	01 d0                	add    %edx,%eax
f011e9c6:	48                   	dec    %eax
f011e9c7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e9cd:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e9d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9d8:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e9de:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e9e4:	29 d0                	sub    %edx,%eax
f011e9e6:	01 d8                	add    %ebx,%eax
f011e9e8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e9ed:	39 c1                	cmp    %eax,%ecx
f011e9ef:	74 17                	je     f011ea08 <test_kmalloc_firstfit2+0xd3f>
f011e9f1:	83 ec 04             	sub    $0x4,%esp
f011e9f4:	68 74 ba 13 f0       	push   $0xf013ba74
f011e9f9:	68 05 04 00 00       	push   $0x405
f011e9fe:	68 5a b6 13 f0       	push   $0xf013b65a
f011ea03:	e8 fd 17 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea08:	e8 bb 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ea0d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ea10:	74 17                	je     f011ea29 <test_kmalloc_firstfit2+0xd60>
f011ea12:	83 ec 04             	sub    $0x4,%esp
f011ea15:	68 74 b6 13 f0       	push   $0xf013b674
f011ea1a:	68 06 04 00 00       	push   $0x406
f011ea1f:	68 5a b6 13 f0       	push   $0xf013b65a
f011ea24:	e8 dc 17 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ea29:	e8 75 e4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011ea2e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ea31:	29 c2                	sub    %eax,%edx
f011ea33:	89 d0                	mov    %edx,%eax
f011ea35:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ea3a:	74 17                	je     f011ea53 <test_kmalloc_firstfit2+0xd8a>
f011ea3c:	83 ec 04             	sub    $0x4,%esp
f011ea3f:	68 a4 ba 13 f0       	push   $0xf013baa4
f011ea44:	68 07 04 00 00       	push   $0x407
f011ea49:	68 5a b6 13 f0       	push   $0xf013b65a
f011ea4e:	e8 b2 17 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ea53:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ea5a:	10 00 00 
f011ea5d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ea63:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea68:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ea6e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ea74:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea79:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ea7f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ea85:	29 d0                	sub    %edx,%eax
f011ea87:	89 c1                	mov    %eax,%ecx
f011ea89:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011ea90:	10 00 00 
f011ea93:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ea98:	0f b6 d0             	movzbl %al,%edx
f011ea9b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eaa1:	01 d0                	add    %edx,%eax
f011eaa3:	48                   	dec    %eax
f011eaa4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011eaaa:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eab0:	ba 00 00 00 00       	mov    $0x0,%edx
f011eab5:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011eabb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eac1:	29 d0                	sub    %edx,%eax
f011eac3:	01 c1                	add    %eax,%ecx
f011eac5:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011eacc:	10 00 00 
f011eacf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ead4:	0f b6 c0             	movzbl %al,%eax
f011ead7:	c1 e0 04             	shl    $0x4,%eax
f011eada:	89 c2                	mov    %eax,%edx
f011eadc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011eae2:	01 d0                	add    %edx,%eax
f011eae4:	48                   	dec    %eax
f011eae5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011eaeb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eaf1:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaf6:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011eafc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eb02:	29 d0                	sub    %edx,%eax
f011eb04:	01 c8                	add    %ecx,%eax
f011eb06:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011eb0b:	29 c2                	sub    %eax,%edx
f011eb0d:	89 d0                	mov    %edx,%eax
f011eb0f:	83 ec 0c             	sub    $0xc,%esp
f011eb12:	50                   	push   %eax
f011eb13:	e8 74 90 fe ff       	call   f0107b8c <kmalloc>
f011eb18:	83 c4 10             	add    $0x10,%esp
f011eb1b:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011eb21:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011eb27:	85 c0                	test   %eax,%eax
f011eb29:	74 17                	je     f011eb42 <test_kmalloc_firstfit2+0xe79>
f011eb2b:	83 ec 04             	sub    $0x4,%esp
f011eb2e:	68 a4 bb 13 f0       	push   $0xf013bba4
f011eb33:	68 0d 04 00 00       	push   $0x40d
f011eb38:	68 5a b6 13 f0       	push   $0xf013b65a
f011eb3d:	e8 c3 16 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011eb42:	83 ec 0c             	sub    $0xc,%esp
f011eb45:	68 e4 bc 13 f0       	push   $0xf013bce4
f011eb4a:	e8 bf 21 fe ff       	call   f0100d0e <cprintf>
f011eb4f:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011eb52:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011eb57:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011eb5a:	5b                   	pop    %ebx
f011eb5b:	5f                   	pop    %edi
f011eb5c:	5d                   	pop    %ebp
f011eb5d:	c3                   	ret    

f011eb5e <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011eb5e:	55                   	push   %ebp
f011eb5f:	89 e5                	mov    %esp,%ebp
f011eb61:	57                   	push   %edi
f011eb62:	53                   	push   %ebx
f011eb63:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011eb69:	83 ec 0c             	sub    $0xc,%esp
f011eb6c:	68 9c b5 13 f0       	push   $0xf013b59c
f011eb71:	e8 98 21 fe ff       	call   f0100d0e <cprintf>
f011eb76:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011eb79:	83 ec 0c             	sub    $0xc,%esp
f011eb7c:	68 cc b5 13 f0       	push   $0xf013b5cc
f011eb81:	e8 88 21 fe ff       	call   f0100d0e <cprintf>
f011eb86:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011eb89:	83 ec 0c             	sub    $0xc,%esp
f011eb8c:	68 9c b5 13 f0       	push   $0xf013b59c
f011eb91:	e8 78 21 fe ff       	call   f0100d0e <cprintf>
f011eb96:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011eb99:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011eb9f:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011eba4:	b8 00 00 00 00       	mov    $0x0,%eax
f011eba9:	89 d7                	mov    %edx,%edi
f011ebab:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011ebad:	e8 f1 e2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011ebb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011ebb5:	e8 0e 52 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ebba:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011ebbd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011ebc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ebcb:	eb 1f                	jmp    f011ebec <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011ebcd:	83 ec 0c             	sub    $0xc,%esp
f011ebd0:	68 00 00 20 00       	push   $0x200000
f011ebd5:	e8 b2 8f fe ff       	call   f0107b8c <kmalloc>
f011ebda:	83 c4 10             	add    $0x10,%esp
f011ebdd:	89 c2                	mov    %eax,%edx
f011ebdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ebe2:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011ebe9:	ff 45 f4             	incl   -0xc(%ebp)
f011ebec:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011ebf0:	7e db                	jle    f011ebcd <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011ebf2:	83 ec 0c             	sub    $0xc,%esp
f011ebf5:	68 00 b0 1f 00       	push   $0x1fb000
f011ebfa:	e8 8d 8f fe ff       	call   f0107b8c <kmalloc>
f011ebff:	83 c4 10             	add    $0x10,%esp
f011ec02:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ec08:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011ec0e:	89 c1                	mov    %eax,%ecx
f011ec10:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ec17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ec1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec1f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ec22:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ec25:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec2a:	f7 75 e4             	divl   -0x1c(%ebp)
f011ec2d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ec30:	29 d0                	sub    %edx,%eax
f011ec32:	89 c3                	mov    %eax,%ebx
f011ec34:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ec3b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ec40:	0f b6 d0             	movzbl %al,%edx
f011ec43:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ec46:	01 d0                	add    %edx,%eax
f011ec48:	48                   	dec    %eax
f011ec49:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ec4c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ec4f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec54:	f7 75 dc             	divl   -0x24(%ebp)
f011ec57:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ec5a:	29 d0                	sub    %edx,%eax
f011ec5c:	01 c3                	add    %eax,%ebx
f011ec5e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ec65:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ec6a:	0f b6 c0             	movzbl %al,%eax
f011ec6d:	c1 e0 04             	shl    $0x4,%eax
f011ec70:	89 c2                	mov    %eax,%edx
f011ec72:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ec75:	01 d0                	add    %edx,%eax
f011ec77:	48                   	dec    %eax
f011ec78:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ec7b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ec7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec83:	f7 75 d4             	divl   -0x2c(%ebp)
f011ec86:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ec89:	29 d0                	sub    %edx,%eax
f011ec8b:	01 d8                	add    %ebx,%eax
f011ec8d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ec92:	39 c1                	cmp    %eax,%ecx
f011ec94:	0f 85 c0 04 00 00    	jne    f011f15a <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011ec9a:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011eca0:	89 c1                	mov    %eax,%ecx
f011eca2:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011eca9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ecac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ecb1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ecb4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ecb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecbc:	f7 75 cc             	divl   -0x34(%ebp)
f011ecbf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ecc2:	29 d0                	sub    %edx,%eax
f011ecc4:	89 c3                	mov    %eax,%ebx
f011ecc6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011eccd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ecd2:	0f b6 d0             	movzbl %al,%edx
f011ecd5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ecd8:	01 d0                	add    %edx,%eax
f011ecda:	48                   	dec    %eax
f011ecdb:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ecde:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ece1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ece6:	f7 75 c4             	divl   -0x3c(%ebp)
f011ece9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ecec:	29 d0                	sub    %edx,%eax
f011ecee:	01 c3                	add    %eax,%ebx
f011ecf0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ecf7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ecfc:	0f b6 c0             	movzbl %al,%eax
f011ecff:	c1 e0 04             	shl    $0x4,%eax
f011ed02:	89 c2                	mov    %eax,%edx
f011ed04:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ed07:	01 d0                	add    %edx,%eax
f011ed09:	48                   	dec    %eax
f011ed0a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ed0d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ed10:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed15:	f7 75 bc             	divl   -0x44(%ebp)
f011ed18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ed1b:	29 d0                	sub    %edx,%eax
f011ed1d:	01 d8                	add    %ebx,%eax
f011ed1f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ed24:	39 c1                	cmp    %eax,%ecx
f011ed26:	0f 85 2e 04 00 00    	jne    f011f15a <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ed2c:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011ed32:	89 c1                	mov    %eax,%ecx
f011ed34:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ed3b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ed3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed43:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ed46:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ed49:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed4e:	f7 75 b4             	divl   -0x4c(%ebp)
f011ed51:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ed54:	29 d0                	sub    %edx,%eax
f011ed56:	89 c3                	mov    %eax,%ebx
f011ed58:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ed5f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ed64:	0f b6 d0             	movzbl %al,%edx
f011ed67:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ed6a:	01 d0                	add    %edx,%eax
f011ed6c:	48                   	dec    %eax
f011ed6d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ed70:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ed73:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed78:	f7 75 ac             	divl   -0x54(%ebp)
f011ed7b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ed7e:	29 d0                	sub    %edx,%eax
f011ed80:	01 c3                	add    %eax,%ebx
f011ed82:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ed89:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ed8e:	0f b6 c0             	movzbl %al,%eax
f011ed91:	c1 e0 04             	shl    $0x4,%eax
f011ed94:	89 c2                	mov    %eax,%edx
f011ed96:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ed99:	01 d0                	add    %edx,%eax
f011ed9b:	48                   	dec    %eax
f011ed9c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ed9f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eda2:	ba 00 00 00 00       	mov    $0x0,%edx
f011eda7:	f7 75 a4             	divl   -0x5c(%ebp)
f011edaa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011edad:	29 d0                	sub    %edx,%eax
f011edaf:	01 d8                	add    %ebx,%eax
f011edb1:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011edb6:	39 c1                	cmp    %eax,%ecx
f011edb8:	0f 85 9c 03 00 00    	jne    f011f15a <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011edbe:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011edc4:	89 c1                	mov    %eax,%ecx
f011edc6:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011edcd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011edd0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011edd5:	89 45 98             	mov    %eax,-0x68(%ebp)
f011edd8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011eddb:	ba 00 00 00 00       	mov    $0x0,%edx
f011ede0:	f7 75 9c             	divl   -0x64(%ebp)
f011ede3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ede6:	29 d0                	sub    %edx,%eax
f011ede8:	89 c3                	mov    %eax,%ebx
f011edea:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011edf1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011edf6:	0f b6 d0             	movzbl %al,%edx
f011edf9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011edfc:	01 d0                	add    %edx,%eax
f011edfe:	48                   	dec    %eax
f011edff:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ee02:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ee05:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee0a:	f7 75 94             	divl   -0x6c(%ebp)
f011ee0d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ee10:	29 d0                	sub    %edx,%eax
f011ee12:	01 c3                	add    %eax,%ebx
f011ee14:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ee1b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ee20:	0f b6 c0             	movzbl %al,%eax
f011ee23:	c1 e0 04             	shl    $0x4,%eax
f011ee26:	89 c2                	mov    %eax,%edx
f011ee28:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ee2b:	01 d0                	add    %edx,%eax
f011ee2d:	48                   	dec    %eax
f011ee2e:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ee31:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ee34:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee39:	f7 75 8c             	divl   -0x74(%ebp)
f011ee3c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ee3f:	29 d0                	sub    %edx,%eax
f011ee41:	01 d8                	add    %ebx,%eax
f011ee43:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ee48:	39 c1                	cmp    %eax,%ecx
f011ee4a:	0f 85 0a 03 00 00    	jne    f011f15a <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ee50:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011ee56:	89 c1                	mov    %eax,%ecx
f011ee58:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ee5f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ee62:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ee67:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ee6a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ee6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee72:	f7 75 84             	divl   -0x7c(%ebp)
f011ee75:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ee78:	29 d0                	sub    %edx,%eax
f011ee7a:	89 c3                	mov    %eax,%ebx
f011ee7c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ee83:	10 00 00 
f011ee86:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ee8b:	0f b6 d0             	movzbl %al,%edx
f011ee8e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ee94:	01 d0                	add    %edx,%eax
f011ee96:	48                   	dec    %eax
f011ee97:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ee9d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eea3:	ba 00 00 00 00       	mov    $0x0,%edx
f011eea8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011eeae:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eeb4:	29 d0                	sub    %edx,%eax
f011eeb6:	01 c3                	add    %eax,%ebx
f011eeb8:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011eebf:	10 00 00 
f011eec2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011eec7:	0f b6 c0             	movzbl %al,%eax
f011eeca:	c1 e0 04             	shl    $0x4,%eax
f011eecd:	89 c2                	mov    %eax,%edx
f011eecf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011eed5:	01 d0                	add    %edx,%eax
f011eed7:	48                   	dec    %eax
f011eed8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011eede:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011eee4:	ba 00 00 00 00       	mov    $0x0,%edx
f011eee9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011eeef:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011eef5:	29 d0                	sub    %edx,%eax
f011eef7:	01 d8                	add    %ebx,%eax
f011eef9:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011eefe:	39 c1                	cmp    %eax,%ecx
f011ef00:	0f 85 54 02 00 00    	jne    f011f15a <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ef06:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011ef0c:	89 c1                	mov    %eax,%ecx
f011ef0e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ef15:	10 00 00 
f011ef18:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ef1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef23:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ef29:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ef2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef34:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ef3a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ef40:	29 d0                	sub    %edx,%eax
f011ef42:	89 c3                	mov    %eax,%ebx
f011ef44:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ef4b:	10 00 00 
f011ef4e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ef53:	0f b6 d0             	movzbl %al,%edx
f011ef56:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ef5c:	01 d0                	add    %edx,%eax
f011ef5e:	48                   	dec    %eax
f011ef5f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ef65:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ef6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef70:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ef76:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ef7c:	29 d0                	sub    %edx,%eax
f011ef7e:	01 c3                	add    %eax,%ebx
f011ef80:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ef87:	10 00 00 
f011ef8a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011ef8f:	0f b6 c0             	movzbl %al,%eax
f011ef92:	c1 e0 04             	shl    $0x4,%eax
f011ef95:	89 c2                	mov    %eax,%edx
f011ef97:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ef9d:	01 d0                	add    %edx,%eax
f011ef9f:	48                   	dec    %eax
f011efa0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011efa6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011efac:	ba 00 00 00 00       	mov    $0x0,%edx
f011efb1:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011efb7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011efbd:	29 d0                	sub    %edx,%eax
f011efbf:	01 d8                	add    %ebx,%eax
f011efc1:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011efc6:	39 c1                	cmp    %eax,%ecx
f011efc8:	0f 85 8c 01 00 00    	jne    f011f15a <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011efce:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011efd4:	89 c1                	mov    %eax,%ecx
f011efd6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011efdd:	10 00 00 
f011efe0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011efe6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011efeb:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011eff1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011eff7:	ba 00 00 00 00       	mov    $0x0,%edx
f011effc:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f002:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f008:	29 d0                	sub    %edx,%eax
f011f00a:	89 c3                	mov    %eax,%ebx
f011f00c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f013:	10 00 00 
f011f016:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f01b:	0f b6 d0             	movzbl %al,%edx
f011f01e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f024:	01 d0                	add    %edx,%eax
f011f026:	48                   	dec    %eax
f011f027:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f02d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f033:	ba 00 00 00 00       	mov    $0x0,%edx
f011f038:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f03e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f044:	29 d0                	sub    %edx,%eax
f011f046:	01 c3                	add    %eax,%ebx
f011f048:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f04f:	10 00 00 
f011f052:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f057:	0f b6 c0             	movzbl %al,%eax
f011f05a:	c1 e0 04             	shl    $0x4,%eax
f011f05d:	89 c2                	mov    %eax,%edx
f011f05f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f065:	01 d0                	add    %edx,%eax
f011f067:	48                   	dec    %eax
f011f068:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f06e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f074:	ba 00 00 00 00       	mov    $0x0,%edx
f011f079:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f07f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f085:	29 d0                	sub    %edx,%eax
f011f087:	01 d8                	add    %ebx,%eax
f011f089:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f08e:	39 c1                	cmp    %eax,%ecx
f011f090:	0f 85 c4 00 00 00    	jne    f011f15a <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f096:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f09c:	89 c1                	mov    %eax,%ecx
f011f09e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f0a5:	10 00 00 
f011f0a8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f0ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0b3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f0b9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f0bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0c4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f0ca:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f0d0:	29 d0                	sub    %edx,%eax
f011f0d2:	89 c3                	mov    %eax,%ebx
f011f0d4:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f0db:	10 00 00 
f011f0de:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f0e3:	0f b6 d0             	movzbl %al,%edx
f011f0e6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f0ec:	01 d0                	add    %edx,%eax
f011f0ee:	48                   	dec    %eax
f011f0ef:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f0f5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f0fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f100:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f106:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f10c:	29 d0                	sub    %edx,%eax
f011f10e:	01 c3                	add    %eax,%ebx
f011f110:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f117:	10 00 00 
f011f11a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f11f:	0f b6 c0             	movzbl %al,%eax
f011f122:	c1 e0 04             	shl    $0x4,%eax
f011f125:	89 c2                	mov    %eax,%edx
f011f127:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f12d:	01 d0                	add    %edx,%eax
f011f12f:	48                   	dec    %eax
f011f130:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f136:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f13c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f141:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f147:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f14d:	29 d0                	sub    %edx,%eax
f011f14f:	01 d8                	add    %ebx,%eax
f011f151:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f156:	39 c1                	cmp    %eax,%ecx
f011f158:	74 17                	je     f011f171 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f15a:	83 ec 04             	sub    $0x4,%esp
f011f15d:	68 30 bd 13 f0       	push   $0xf013bd30
f011f162:	68 31 04 00 00       	push   $0x431
f011f167:	68 5a b6 13 f0       	push   $0xf013b65a
f011f16c:	e8 94 10 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f171:	e8 52 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f176:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f179:	74 17                	je     f011f192 <test_kmalloc_worstfit+0x634>
f011f17b:	83 ec 04             	sub    $0x4,%esp
f011f17e:	68 74 b6 13 f0       	push   $0xf013b674
f011f183:	68 33 04 00 00       	push   $0x433
f011f188:	68 5a b6 13 f0       	push   $0xf013b65a
f011f18d:	e8 73 10 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f192:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f195:	e8 09 dd fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f19a:	29 c3                	sub    %eax,%ebx
f011f19c:	89 d8                	mov    %ebx,%eax
f011f19e:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f1a3:	74 17                	je     f011f1bc <test_kmalloc_worstfit+0x65e>
f011f1a5:	83 ec 04             	sub    $0x4,%esp
f011f1a8:	68 17 b9 13 f0       	push   $0xf013b917
f011f1ad:	68 34 04 00 00       	push   $0x434
f011f1b2:	68 5a b6 13 f0       	push   $0xf013b65a
f011f1b7:	e8 49 10 fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f1bc:	e8 e2 dc fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f1c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f1c4:	e8 ff 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f1c9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f1cc:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f1d2:	83 ec 0c             	sub    $0xc,%esp
f011f1d5:	50                   	push   %eax
f011f1d6:	e8 7c 8a fe ff       	call   f0107c57 <kfree>
f011f1db:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f1de:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f1e4:	83 ec 0c             	sub    $0xc,%esp
f011f1e7:	50                   	push   %eax
f011f1e8:	e8 6a 8a fe ff       	call   f0107c57 <kfree>
f011f1ed:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f1f0:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f1f6:	83 ec 0c             	sub    $0xc,%esp
f011f1f9:	50                   	push   %eax
f011f1fa:	e8 58 8a fe ff       	call   f0107c57 <kfree>
f011f1ff:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f202:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f208:	83 ec 0c             	sub    $0xc,%esp
f011f20b:	50                   	push   %eax
f011f20c:	e8 46 8a fe ff       	call   f0107c57 <kfree>
f011f211:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f214:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f21a:	83 ec 0c             	sub    $0xc,%esp
f011f21d:	50                   	push   %eax
f011f21e:	e8 34 8a fe ff       	call   f0107c57 <kfree>
f011f223:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f226:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f22c:	83 ec 0c             	sub    $0xc,%esp
f011f22f:	50                   	push   %eax
f011f230:	e8 22 8a fe ff       	call   f0107c57 <kfree>
f011f235:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f238:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f23e:	83 ec 0c             	sub    $0xc,%esp
f011f241:	50                   	push   %eax
f011f242:	e8 10 8a fe ff       	call   f0107c57 <kfree>
f011f247:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f24a:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f250:	83 ec 0c             	sub    $0xc,%esp
f011f253:	50                   	push   %eax
f011f254:	e8 fe 89 fe ff       	call   f0107c57 <kfree>
f011f259:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f25c:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f262:	83 ec 0c             	sub    $0xc,%esp
f011f265:	50                   	push   %eax
f011f266:	e8 ec 89 fe ff       	call   f0107c57 <kfree>
f011f26b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f26e:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f274:	83 ec 0c             	sub    $0xc,%esp
f011f277:	50                   	push   %eax
f011f278:	e8 da 89 fe ff       	call   f0107c57 <kfree>
f011f27d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f280:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f286:	83 ec 0c             	sub    $0xc,%esp
f011f289:	50                   	push   %eax
f011f28a:	e8 c8 89 fe ff       	call   f0107c57 <kfree>
f011f28f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f292:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f298:	83 ec 0c             	sub    $0xc,%esp
f011f29b:	50                   	push   %eax
f011f29c:	e8 b6 89 fe ff       	call   f0107c57 <kfree>
f011f2a1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f2a4:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f2aa:	83 ec 0c             	sub    $0xc,%esp
f011f2ad:	50                   	push   %eax
f011f2ae:	e8 a4 89 fe ff       	call   f0107c57 <kfree>
f011f2b3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f2b6:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f2bc:	83 ec 0c             	sub    $0xc,%esp
f011f2bf:	50                   	push   %eax
f011f2c0:	e8 92 89 fe ff       	call   f0107c57 <kfree>
f011f2c5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f2c8:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f2ce:	83 ec 0c             	sub    $0xc,%esp
f011f2d1:	50                   	push   %eax
f011f2d2:	e8 80 89 fe ff       	call   f0107c57 <kfree>
f011f2d7:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2da:	e8 e9 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f2df:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2e2:	74 17                	je     f011f2fb <test_kmalloc_worstfit+0x79d>
f011f2e4:	83 ec 04             	sub    $0x4,%esp
f011f2e7:	68 74 b6 13 f0       	push   $0xf013b674
f011f2ec:	68 4a 04 00 00       	push   $0x44a
f011f2f1:	68 5a b6 13 f0       	push   $0xf013b65a
f011f2f6:	e8 0a 0f fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f2fb:	e8 a3 db fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f300:	89 c2                	mov    %eax,%edx
f011f302:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f305:	29 c2                	sub    %eax,%edx
f011f307:	89 d0                	mov    %edx,%eax
f011f309:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f30e:	74 17                	je     f011f327 <test_kmalloc_worstfit+0x7c9>
f011f310:	83 ec 04             	sub    $0x4,%esp
f011f313:	68 28 b9 13 f0       	push   $0xf013b928
f011f318:	68 4b 04 00 00       	push   $0x44b
f011f31d:	68 5a b6 13 f0       	push   $0xf013b65a
f011f322:	e8 de 0e fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f327:	e8 77 db fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f32c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f32f:	e8 94 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f334:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f337:	83 ec 0c             	sub    $0xc,%esp
f011f33a:	68 00 00 10 00       	push   $0x100000
f011f33f:	e8 48 88 fe ff       	call   f0107b8c <kmalloc>
f011f344:	83 c4 10             	add    $0x10,%esp
f011f347:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f34d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f354:	10 00 00 
f011f357:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f35d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f362:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f368:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f36e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f373:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f379:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f37f:	29 d0                	sub    %edx,%eax
f011f381:	89 c1                	mov    %eax,%ecx
f011f383:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f38a:	10 00 00 
f011f38d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f392:	0f b6 d0             	movzbl %al,%edx
f011f395:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f39b:	01 d0                	add    %edx,%eax
f011f39d:	48                   	dec    %eax
f011f39e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f3a4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f3aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3af:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f3b5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f3bb:	29 d0                	sub    %edx,%eax
f011f3bd:	01 c1                	add    %eax,%ecx
f011f3bf:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f3c6:	10 00 00 
f011f3c9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f3ce:	0f b6 c0             	movzbl %al,%eax
f011f3d1:	c1 e0 04             	shl    $0x4,%eax
f011f3d4:	89 c2                	mov    %eax,%edx
f011f3d6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f3dc:	01 d0                	add    %edx,%eax
f011f3de:	48                   	dec    %eax
f011f3df:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f3e5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f3eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3f0:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f3f6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f3fc:	29 d0                	sub    %edx,%eax
f011f3fe:	01 c8                	add    %ecx,%eax
f011f400:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f406:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f40c:	39 c2                	cmp    %eax,%edx
f011f40e:	74 17                	je     f011f427 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f410:	83 ec 04             	sub    $0x4,%esp
f011f413:	68 74 bd 13 f0       	push   $0xf013bd74
f011f418:	68 52 04 00 00       	push   $0x452
f011f41d:	68 5a b6 13 f0       	push   $0xf013b65a
f011f422:	e8 de 0d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f427:	e8 9c 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f42c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f42f:	74 17                	je     f011f448 <test_kmalloc_worstfit+0x8ea>
f011f431:	83 ec 04             	sub    $0x4,%esp
f011f434:	68 74 b6 13 f0       	push   $0xf013b674
f011f439:	68 53 04 00 00       	push   $0x453
f011f43e:	68 5a b6 13 f0       	push   $0xf013b65a
f011f443:	e8 bd 0d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f448:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f44b:	e8 53 da fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f450:	29 c3                	sub    %eax,%ebx
f011f452:	89 d8                	mov    %ebx,%eax
f011f454:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f459:	74 17                	je     f011f472 <test_kmalloc_worstfit+0x914>
f011f45b:	83 ec 04             	sub    $0x4,%esp
f011f45e:	68 92 bb 13 f0       	push   $0xf013bb92
f011f463:	68 54 04 00 00       	push   $0x454
f011f468:	68 5a b6 13 f0       	push   $0xf013b65a
f011f46d:	e8 93 0d fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f472:	ff 45 e8             	incl   -0x18(%ebp)
f011f475:	83 ec 08             	sub    $0x8,%esp
f011f478:	ff 75 e8             	pushl  -0x18(%ebp)
f011f47b:	68 94 bd 13 f0       	push   $0xf013bd94
f011f480:	e8 89 18 fe ff       	call   f0100d0e <cprintf>
f011f485:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f488:	e8 16 da fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f48d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f490:	e8 33 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f495:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f498:	83 ec 0c             	sub    $0xc,%esp
f011f49b:	68 00 00 40 00       	push   $0x400000
f011f4a0:	e8 e7 86 fe ff       	call   f0107b8c <kmalloc>
f011f4a5:	83 c4 10             	add    $0x10,%esp
f011f4a8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f4ae:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f4b5:	10 00 00 
f011f4b8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f4be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4c3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f4c9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f4cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4d4:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f4da:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f4e0:	29 d0                	sub    %edx,%eax
f011f4e2:	89 c1                	mov    %eax,%ecx
f011f4e4:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f4eb:	10 00 00 
f011f4ee:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f4f3:	0f b6 d0             	movzbl %al,%edx
f011f4f6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f4fc:	01 d0                	add    %edx,%eax
f011f4fe:	48                   	dec    %eax
f011f4ff:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f505:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f50b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f510:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f516:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f51c:	29 d0                	sub    %edx,%eax
f011f51e:	01 c1                	add    %eax,%ecx
f011f520:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f527:	10 00 00 
f011f52a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f52f:	0f b6 c0             	movzbl %al,%eax
f011f532:	c1 e0 04             	shl    $0x4,%eax
f011f535:	89 c2                	mov    %eax,%edx
f011f537:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f53d:	01 d0                	add    %edx,%eax
f011f53f:	48                   	dec    %eax
f011f540:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f546:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f54c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f551:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f557:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f55d:	29 d0                	sub    %edx,%eax
f011f55f:	01 c8                	add    %ecx,%eax
f011f561:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f567:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f56d:	39 c2                	cmp    %eax,%edx
f011f56f:	74 17                	je     f011f588 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f571:	83 ec 04             	sub    $0x4,%esp
f011f574:	68 74 bd 13 f0       	push   $0xf013bd74
f011f579:	68 5b 04 00 00       	push   $0x45b
f011f57e:	68 5a b6 13 f0       	push   $0xf013b65a
f011f583:	e8 7d 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f588:	e8 3b 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f58d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f590:	74 17                	je     f011f5a9 <test_kmalloc_worstfit+0xa4b>
f011f592:	83 ec 04             	sub    $0x4,%esp
f011f595:	68 74 b6 13 f0       	push   $0xf013b674
f011f59a:	68 5c 04 00 00       	push   $0x45c
f011f59f:	68 5a b6 13 f0       	push   $0xf013b65a
f011f5a4:	e8 5c 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f5a9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5ac:	e8 f2 d8 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f5b1:	29 c3                	sub    %eax,%ebx
f011f5b3:	89 d8                	mov    %ebx,%eax
f011f5b5:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f5ba:	74 17                	je     f011f5d3 <test_kmalloc_worstfit+0xa75>
f011f5bc:	83 ec 04             	sub    $0x4,%esp
f011f5bf:	68 92 bb 13 f0       	push   $0xf013bb92
f011f5c4:	68 5d 04 00 00       	push   $0x45d
f011f5c9:	68 5a b6 13 f0       	push   $0xf013b65a
f011f5ce:	e8 32 0c fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5d3:	ff 45 e8             	incl   -0x18(%ebp)
f011f5d6:	83 ec 08             	sub    $0x8,%esp
f011f5d9:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5dc:	68 94 bd 13 f0       	push   $0xf013bd94
f011f5e1:	e8 28 17 fe ff       	call   f0100d0e <cprintf>
f011f5e6:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f5e9:	e8 b5 d8 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f5ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f5f1:	e8 d2 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f5f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f5f9:	83 ec 0c             	sub    $0xc,%esp
f011f5fc:	68 00 00 60 00       	push   $0x600000
f011f601:	e8 86 85 fe ff       	call   f0107b8c <kmalloc>
f011f606:	83 c4 10             	add    $0x10,%esp
f011f609:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f60f:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f616:	10 00 00 
f011f619:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f61f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f624:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f62a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f630:	ba 00 00 00 00       	mov    $0x0,%edx
f011f635:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f63b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f641:	29 d0                	sub    %edx,%eax
f011f643:	89 c1                	mov    %eax,%ecx
f011f645:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f64c:	10 00 00 
f011f64f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f654:	0f b6 d0             	movzbl %al,%edx
f011f657:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f65d:	01 d0                	add    %edx,%eax
f011f65f:	48                   	dec    %eax
f011f660:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f666:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f66c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f671:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f677:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f67d:	29 d0                	sub    %edx,%eax
f011f67f:	01 c1                	add    %eax,%ecx
f011f681:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f688:	10 00 00 
f011f68b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f690:	0f b6 c0             	movzbl %al,%eax
f011f693:	c1 e0 04             	shl    $0x4,%eax
f011f696:	89 c2                	mov    %eax,%edx
f011f698:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f69e:	01 d0                	add    %edx,%eax
f011f6a0:	48                   	dec    %eax
f011f6a1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f6a7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f6ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6b2:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f6b8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f6be:	29 d0                	sub    %edx,%eax
f011f6c0:	01 c8                	add    %ecx,%eax
f011f6c2:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f6c8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f6ce:	39 c2                	cmp    %eax,%edx
f011f6d0:	74 17                	je     f011f6e9 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011f6d2:	83 ec 04             	sub    $0x4,%esp
f011f6d5:	68 74 bd 13 f0       	push   $0xf013bd74
f011f6da:	68 64 04 00 00       	push   $0x464
f011f6df:	68 5a b6 13 f0       	push   $0xf013b65a
f011f6e4:	e8 1c 0b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6e9:	e8 da 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f6ee:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f6f1:	74 17                	je     f011f70a <test_kmalloc_worstfit+0xbac>
f011f6f3:	83 ec 04             	sub    $0x4,%esp
f011f6f6:	68 74 b6 13 f0       	push   $0xf013b674
f011f6fb:	68 65 04 00 00       	push   $0x465
f011f700:	68 5a b6 13 f0       	push   $0xf013b65a
f011f705:	e8 fb 0a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f70a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f70d:	e8 91 d7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f712:	29 c3                	sub    %eax,%ebx
f011f714:	89 d8                	mov    %ebx,%eax
f011f716:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f71b:	74 17                	je     f011f734 <test_kmalloc_worstfit+0xbd6>
f011f71d:	83 ec 04             	sub    $0x4,%esp
f011f720:	68 92 bb 13 f0       	push   $0xf013bb92
f011f725:	68 66 04 00 00       	push   $0x466
f011f72a:	68 5a b6 13 f0       	push   $0xf013b65a
f011f72f:	e8 d1 0a fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f734:	ff 45 e8             	incl   -0x18(%ebp)
f011f737:	83 ec 08             	sub    $0x8,%esp
f011f73a:	ff 75 e8             	pushl  -0x18(%ebp)
f011f73d:	68 94 bd 13 f0       	push   $0xf013bd94
f011f742:	e8 c7 15 fe ff       	call   f0100d0e <cprintf>
f011f747:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f74a:	e8 54 d7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f74f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f752:	e8 71 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f757:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f75a:	83 ec 0c             	sub    $0xc,%esp
f011f75d:	68 00 00 50 00       	push   $0x500000
f011f762:	e8 25 84 fe ff       	call   f0107b8c <kmalloc>
f011f767:	83 c4 10             	add    $0x10,%esp
f011f76a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f770:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f777:	10 00 00 
f011f77a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f780:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f785:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f78b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f791:	ba 00 00 00 00       	mov    $0x0,%edx
f011f796:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f79c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f7a2:	29 d0                	sub    %edx,%eax
f011f7a4:	89 c1                	mov    %eax,%ecx
f011f7a6:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f7ad:	10 00 00 
f011f7b0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f7b5:	0f b6 d0             	movzbl %al,%edx
f011f7b8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f7be:	01 d0                	add    %edx,%eax
f011f7c0:	48                   	dec    %eax
f011f7c1:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f7c7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f7cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7d2:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f7d8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f7de:	29 d0                	sub    %edx,%eax
f011f7e0:	01 c1                	add    %eax,%ecx
f011f7e2:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f7e9:	10 00 00 
f011f7ec:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f7f1:	0f b6 c0             	movzbl %al,%eax
f011f7f4:	c1 e0 04             	shl    $0x4,%eax
f011f7f7:	89 c2                	mov    %eax,%edx
f011f7f9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f7ff:	01 d0                	add    %edx,%eax
f011f801:	48                   	dec    %eax
f011f802:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f808:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f80e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f813:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f819:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f81f:	29 d0                	sub    %edx,%eax
f011f821:	01 c8                	add    %ecx,%eax
f011f823:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f829:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f82f:	39 c2                	cmp    %eax,%edx
f011f831:	74 17                	je     f011f84a <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f833:	83 ec 04             	sub    $0x4,%esp
f011f836:	68 74 bd 13 f0       	push   $0xf013bd74
f011f83b:	68 6d 04 00 00       	push   $0x46d
f011f840:	68 5a b6 13 f0       	push   $0xf013b65a
f011f845:	e8 bb 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f84a:	e8 79 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f84f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f852:	74 17                	je     f011f86b <test_kmalloc_worstfit+0xd0d>
f011f854:	83 ec 04             	sub    $0x4,%esp
f011f857:	68 74 b6 13 f0       	push   $0xf013b674
f011f85c:	68 6e 04 00 00       	push   $0x46e
f011f861:	68 5a b6 13 f0       	push   $0xf013b65a
f011f866:	e8 9a 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f86b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f86e:	e8 30 d6 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f873:	29 c3                	sub    %eax,%ebx
f011f875:	89 d8                	mov    %ebx,%eax
f011f877:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f87c:	74 17                	je     f011f895 <test_kmalloc_worstfit+0xd37>
f011f87e:	83 ec 04             	sub    $0x4,%esp
f011f881:	68 92 bb 13 f0       	push   $0xf013bb92
f011f886:	68 6f 04 00 00       	push   $0x46f
f011f88b:	68 5a b6 13 f0       	push   $0xf013b65a
f011f890:	e8 70 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f895:	ff 45 e8             	incl   -0x18(%ebp)
f011f898:	83 ec 08             	sub    $0x8,%esp
f011f89b:	ff 75 e8             	pushl  -0x18(%ebp)
f011f89e:	68 94 bd 13 f0       	push   $0xf013bd94
f011f8a3:	e8 66 14 fe ff       	call   f0100d0e <cprintf>
f011f8a8:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f8ab:	e8 f3 d5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f8b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f8b3:	e8 10 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f8b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f8bb:	83 ec 0c             	sub    $0xc,%esp
f011f8be:	68 00 00 40 00       	push   $0x400000
f011f8c3:	e8 c4 82 fe ff       	call   f0107b8c <kmalloc>
f011f8c8:	83 c4 10             	add    $0x10,%esp
f011f8cb:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f8d1:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f8d8:	10 00 00 
f011f8db:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f8e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f8e6:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f8ec:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f8f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8f7:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f8fd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f903:	29 d0                	sub    %edx,%eax
f011f905:	89 c1                	mov    %eax,%ecx
f011f907:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f90e:	10 00 00 
f011f911:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f916:	0f b6 d0             	movzbl %al,%edx
f011f919:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f91f:	01 d0                	add    %edx,%eax
f011f921:	48                   	dec    %eax
f011f922:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f928:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f92e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f933:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f939:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f93f:	29 d0                	sub    %edx,%eax
f011f941:	01 c1                	add    %eax,%ecx
f011f943:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f94a:	10 00 00 
f011f94d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011f952:	0f b6 c0             	movzbl %al,%eax
f011f955:	c1 e0 04             	shl    $0x4,%eax
f011f958:	89 c2                	mov    %eax,%edx
f011f95a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f960:	01 d0                	add    %edx,%eax
f011f962:	48                   	dec    %eax
f011f963:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f969:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f96f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f974:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f97a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f980:	29 d0                	sub    %edx,%eax
f011f982:	01 c8                	add    %ecx,%eax
f011f984:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f98a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f990:	39 c2                	cmp    %eax,%edx
f011f992:	74 17                	je     f011f9ab <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f994:	83 ec 04             	sub    $0x4,%esp
f011f997:	68 74 bd 13 f0       	push   $0xf013bd74
f011f99c:	68 76 04 00 00       	push   $0x476
f011f9a1:	68 5a b6 13 f0       	push   $0xf013b65a
f011f9a6:	e8 5a 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9ab:	e8 18 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f9b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f9b3:	74 17                	je     f011f9cc <test_kmalloc_worstfit+0xe6e>
f011f9b5:	83 ec 04             	sub    $0x4,%esp
f011f9b8:	68 74 b6 13 f0       	push   $0xf013b674
f011f9bd:	68 77 04 00 00       	push   $0x477
f011f9c2:	68 5a b6 13 f0       	push   $0xf013b65a
f011f9c7:	e8 39 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f9cc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f9cf:	e8 cf d4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011f9d4:	29 c3                	sub    %eax,%ebx
f011f9d6:	89 d8                	mov    %ebx,%eax
f011f9d8:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f9dd:	74 17                	je     f011f9f6 <test_kmalloc_worstfit+0xe98>
f011f9df:	83 ec 04             	sub    $0x4,%esp
f011f9e2:	68 92 bb 13 f0       	push   $0xf013bb92
f011f9e7:	68 78 04 00 00       	push   $0x478
f011f9ec:	68 5a b6 13 f0       	push   $0xf013b65a
f011f9f1:	e8 0f 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f9f6:	ff 45 e8             	incl   -0x18(%ebp)
f011f9f9:	83 ec 08             	sub    $0x8,%esp
f011f9fc:	ff 75 e8             	pushl  -0x18(%ebp)
f011f9ff:	68 94 bd 13 f0       	push   $0xf013bd94
f011fa04:	e8 05 13 fe ff       	call   f0100d0e <cprintf>
f011fa09:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa0c:	e8 92 d4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011fa11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa14:	e8 af 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa19:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fa1c:	83 ec 0c             	sub    $0xc,%esp
f011fa1f:	68 00 00 20 00       	push   $0x200000
f011fa24:	e8 63 81 fe ff       	call   f0107b8c <kmalloc>
f011fa29:	83 c4 10             	add    $0x10,%esp
f011fa2c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011fa32:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fa39:	10 00 00 
f011fa3c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fa42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fa47:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011fa4d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fa53:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa58:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011fa5e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fa64:	29 d0                	sub    %edx,%eax
f011fa66:	89 c1                	mov    %eax,%ecx
f011fa68:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011fa6f:	10 00 00 
f011fa72:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fa77:	0f b6 d0             	movzbl %al,%edx
f011fa7a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011fa80:	01 d0                	add    %edx,%eax
f011fa82:	48                   	dec    %eax
f011fa83:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011fa89:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fa8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa94:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011fa9a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011faa0:	29 d0                	sub    %edx,%eax
f011faa2:	01 c1                	add    %eax,%ecx
f011faa4:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011faab:	10 00 00 
f011faae:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fab3:	0f b6 c0             	movzbl %al,%eax
f011fab6:	c1 e0 04             	shl    $0x4,%eax
f011fab9:	89 c2                	mov    %eax,%edx
f011fabb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011fac1:	01 d0                	add    %edx,%eax
f011fac3:	48                   	dec    %eax
f011fac4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011faca:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fad0:	ba 00 00 00 00       	mov    $0x0,%edx
f011fad5:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011fadb:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fae1:	29 d0                	sub    %edx,%eax
f011fae3:	01 c8                	add    %ecx,%eax
f011fae5:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011faeb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011faf1:	39 c2                	cmp    %eax,%edx
f011faf3:	74 17                	je     f011fb0c <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011faf5:	83 ec 04             	sub    $0x4,%esp
f011faf8:	68 74 bd 13 f0       	push   $0xf013bd74
f011fafd:	68 7f 04 00 00       	push   $0x47f
f011fb02:	68 5a b6 13 f0       	push   $0xf013b65a
f011fb07:	e8 f9 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb0c:	e8 b7 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb11:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb14:	74 17                	je     f011fb2d <test_kmalloc_worstfit+0xfcf>
f011fb16:	83 ec 04             	sub    $0x4,%esp
f011fb19:	68 74 b6 13 f0       	push   $0xf013b674
f011fb1e:	68 80 04 00 00       	push   $0x480
f011fb23:	68 5a b6 13 f0       	push   $0xf013b65a
f011fb28:	e8 d8 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fb2d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb30:	e8 6e d3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011fb35:	29 c3                	sub    %eax,%ebx
f011fb37:	89 d8                	mov    %ebx,%eax
f011fb39:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fb3e:	74 17                	je     f011fb57 <test_kmalloc_worstfit+0xff9>
f011fb40:	83 ec 04             	sub    $0x4,%esp
f011fb43:	68 92 bb 13 f0       	push   $0xf013bb92
f011fb48:	68 81 04 00 00       	push   $0x481
f011fb4d:	68 5a b6 13 f0       	push   $0xf013b65a
f011fb52:	e8 ae 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fb57:	ff 45 e8             	incl   -0x18(%ebp)
f011fb5a:	83 ec 08             	sub    $0x8,%esp
f011fb5d:	ff 75 e8             	pushl  -0x18(%ebp)
f011fb60:	68 94 bd 13 f0       	push   $0xf013bd94
f011fb65:	e8 a4 11 fe ff       	call   f0100d0e <cprintf>
f011fb6a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fb6d:	e8 31 d3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011fb72:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fb75:	e8 4e 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011fb7d:	83 ec 0c             	sub    $0xc,%esp
f011fb80:	68 00 00 18 00       	push   $0x180000
f011fb85:	e8 02 80 fe ff       	call   f0107b8c <kmalloc>
f011fb8a:	83 c4 10             	add    $0x10,%esp
f011fb8d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011fb93:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011fb9a:	10 00 00 
f011fb9d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011fba3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fba8:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011fbae:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fbb4:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbb9:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011fbbf:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fbc5:	29 d0                	sub    %edx,%eax
f011fbc7:	89 c1                	mov    %eax,%ecx
f011fbc9:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011fbd0:	10 00 00 
f011fbd3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fbd8:	0f b6 d0             	movzbl %al,%edx
f011fbdb:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011fbe1:	01 d0                	add    %edx,%eax
f011fbe3:	48                   	dec    %eax
f011fbe4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011fbea:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fbf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbf5:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011fbfb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fc01:	29 d0                	sub    %edx,%eax
f011fc03:	01 c1                	add    %eax,%ecx
f011fc05:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011fc0c:	10 00 00 
f011fc0f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fc14:	0f b6 c0             	movzbl %al,%eax
f011fc17:	c1 e0 04             	shl    $0x4,%eax
f011fc1a:	89 c2                	mov    %eax,%edx
f011fc1c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011fc22:	01 d0                	add    %edx,%eax
f011fc24:	48                   	dec    %eax
f011fc25:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011fc2b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fc31:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc36:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011fc3c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fc42:	29 d0                	sub    %edx,%eax
f011fc44:	01 c8                	add    %ecx,%eax
f011fc46:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011fc4c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fc52:	39 c2                	cmp    %eax,%edx
f011fc54:	74 17                	je     f011fc6d <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011fc56:	83 ec 04             	sub    $0x4,%esp
f011fc59:	68 74 bd 13 f0       	push   $0xf013bd74
f011fc5e:	68 88 04 00 00       	push   $0x488
f011fc63:	68 5a b6 13 f0       	push   $0xf013b65a
f011fc68:	e8 98 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc6d:	e8 56 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc72:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fc75:	74 17                	je     f011fc8e <test_kmalloc_worstfit+0x1130>
f011fc77:	83 ec 04             	sub    $0x4,%esp
f011fc7a:	68 74 b6 13 f0       	push   $0xf013b674
f011fc7f:	68 89 04 00 00       	push   $0x489
f011fc84:	68 5a b6 13 f0       	push   $0xf013b65a
f011fc89:	e8 77 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fc8e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fc91:	e8 0d d2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011fc96:	29 c3                	sub    %eax,%ebx
f011fc98:	89 d8                	mov    %ebx,%eax
f011fc9a:	3d 80 01 00 00       	cmp    $0x180,%eax
f011fc9f:	74 17                	je     f011fcb8 <test_kmalloc_worstfit+0x115a>
f011fca1:	83 ec 04             	sub    $0x4,%esp
f011fca4:	68 92 bb 13 f0       	push   $0xf013bb92
f011fca9:	68 8a 04 00 00       	push   $0x48a
f011fcae:	68 5a b6 13 f0       	push   $0xf013b65a
f011fcb3:	e8 4d 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fcb8:	ff 45 e8             	incl   -0x18(%ebp)
f011fcbb:	83 ec 08             	sub    $0x8,%esp
f011fcbe:	ff 75 e8             	pushl  -0x18(%ebp)
f011fcc1:	68 94 bd 13 f0       	push   $0xf013bd94
f011fcc6:	e8 43 10 fe ff       	call   f0100d0e <cprintf>
f011fccb:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fcce:	e8 d0 d1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011fcd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fcd6:	e8 ed 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fcdb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011fcde:	83 ec 0c             	sub    $0xc,%esp
f011fce1:	68 00 00 08 00       	push   $0x80000
f011fce6:	e8 a1 7e fe ff       	call   f0107b8c <kmalloc>
f011fceb:	83 c4 10             	add    $0x10,%esp
f011fcee:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011fcf4:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011fcfb:	10 00 00 
f011fcfe:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fd04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fd09:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011fd0f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fd15:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd1a:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011fd20:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fd26:	29 d0                	sub    %edx,%eax
f011fd28:	89 c1                	mov    %eax,%ecx
f011fd2a:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011fd31:	10 00 00 
f011fd34:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fd39:	0f b6 d0             	movzbl %al,%edx
f011fd3c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011fd42:	01 d0                	add    %edx,%eax
f011fd44:	48                   	dec    %eax
f011fd45:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011fd4b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fd51:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd56:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011fd5c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fd62:	29 d0                	sub    %edx,%eax
f011fd64:	01 c1                	add    %eax,%ecx
f011fd66:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011fd6d:	10 00 00 
f011fd70:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fd75:	0f b6 c0             	movzbl %al,%eax
f011fd78:	c1 e0 04             	shl    $0x4,%eax
f011fd7b:	89 c2                	mov    %eax,%edx
f011fd7d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011fd83:	01 d0                	add    %edx,%eax
f011fd85:	48                   	dec    %eax
f011fd86:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011fd8c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fd92:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd97:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011fd9d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fda3:	29 d0                	sub    %edx,%eax
f011fda5:	01 c8                	add    %ecx,%eax
f011fda7:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011fdad:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fdb3:	39 c2                	cmp    %eax,%edx
f011fdb5:	74 17                	je     f011fdce <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011fdb7:	83 ec 04             	sub    $0x4,%esp
f011fdba:	68 74 bd 13 f0       	push   $0xf013bd74
f011fdbf:	68 91 04 00 00       	push   $0x491
f011fdc4:	68 5a b6 13 f0       	push   $0xf013b65a
f011fdc9:	e8 37 04 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdce:	e8 f5 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fdd3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fdd6:	74 17                	je     f011fdef <test_kmalloc_worstfit+0x1291>
f011fdd8:	83 ec 04             	sub    $0x4,%esp
f011fddb:	68 74 b6 13 f0       	push   $0xf013b674
f011fde0:	68 92 04 00 00       	push   $0x492
f011fde5:	68 5a b6 13 f0       	push   $0xf013b65a
f011fdea:	e8 16 04 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fdef:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fdf2:	e8 ac d0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011fdf7:	29 c3                	sub    %eax,%ebx
f011fdf9:	89 d8                	mov    %ebx,%eax
f011fdfb:	3d 80 00 00 00       	cmp    $0x80,%eax
f011fe00:	74 17                	je     f011fe19 <test_kmalloc_worstfit+0x12bb>
f011fe02:	83 ec 04             	sub    $0x4,%esp
f011fe05:	68 92 bb 13 f0       	push   $0xf013bb92
f011fe0a:	68 93 04 00 00       	push   $0x493
f011fe0f:	68 5a b6 13 f0       	push   $0xf013b65a
f011fe14:	e8 ec 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe19:	ff 45 e8             	incl   -0x18(%ebp)
f011fe1c:	83 ec 08             	sub    $0x8,%esp
f011fe1f:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe22:	68 94 bd 13 f0       	push   $0xf013bd94
f011fe27:	e8 e2 0e fe ff       	call   f0100d0e <cprintf>
f011fe2c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fe2f:	e8 6f d0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011fe34:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fe37:	e8 8c 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011fe3f:	83 ec 0c             	sub    $0xc,%esp
f011fe42:	68 00 04 00 00       	push   $0x400
f011fe47:	e8 40 7d fe ff       	call   f0107b8c <kmalloc>
f011fe4c:	83 c4 10             	add    $0x10,%esp
f011fe4f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011fe55:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011fe5c:	10 00 00 
f011fe5f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011fe65:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe6a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011fe70:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fe76:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe7b:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011fe81:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fe87:	29 d0                	sub    %edx,%eax
f011fe89:	89 c1                	mov    %eax,%ecx
f011fe8b:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011fe92:	10 00 00 
f011fe95:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fe9a:	0f b6 d0             	movzbl %al,%edx
f011fe9d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011fea3:	01 d0                	add    %edx,%eax
f011fea5:	48                   	dec    %eax
f011fea6:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011feac:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011feb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011feb7:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011febd:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fec3:	29 d0                	sub    %edx,%eax
f011fec5:	01 c1                	add    %eax,%ecx
f011fec7:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011fece:	10 00 00 
f011fed1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fed6:	0f b6 c0             	movzbl %al,%eax
f011fed9:	c1 e0 04             	shl    $0x4,%eax
f011fedc:	89 c2                	mov    %eax,%edx
f011fede:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011fee4:	01 d0                	add    %edx,%eax
f011fee6:	48                   	dec    %eax
f011fee7:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011feed:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fef3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fef8:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011fefe:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ff04:	29 d0                	sub    %edx,%eax
f011ff06:	01 c8                	add    %ecx,%eax
f011ff08:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011ff0e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ff14:	39 c2                	cmp    %eax,%edx
f011ff16:	74 17                	je     f011ff2f <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011ff18:	83 ec 04             	sub    $0x4,%esp
f011ff1b:	68 74 bd 13 f0       	push   $0xf013bd74
f011ff20:	68 9a 04 00 00       	push   $0x49a
f011ff25:	68 5a b6 13 f0       	push   $0xf013b65a
f011ff2a:	e8 d6 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff2f:	e8 94 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff34:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ff37:	74 17                	je     f011ff50 <test_kmalloc_worstfit+0x13f2>
f011ff39:	83 ec 04             	sub    $0x4,%esp
f011ff3c:	68 74 b6 13 f0       	push   $0xf013b674
f011ff41:	68 9b 04 00 00       	push   $0x49b
f011ff46:	68 5a b6 13 f0       	push   $0xf013b65a
f011ff4b:	e8 b5 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ff50:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ff53:	e8 4b cf fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011ff58:	29 c3                	sub    %eax,%ebx
f011ff5a:	89 d8                	mov    %ebx,%eax
f011ff5c:	83 f8 01             	cmp    $0x1,%eax
f011ff5f:	74 17                	je     f011ff78 <test_kmalloc_worstfit+0x141a>
f011ff61:	83 ec 04             	sub    $0x4,%esp
f011ff64:	68 92 bb 13 f0       	push   $0xf013bb92
f011ff69:	68 9c 04 00 00       	push   $0x49c
f011ff6e:	68 5a b6 13 f0       	push   $0xf013b65a
f011ff73:	e8 8d 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ff78:	ff 45 e8             	incl   -0x18(%ebp)
f011ff7b:	83 ec 08             	sub    $0x8,%esp
f011ff7e:	ff 75 e8             	pushl  -0x18(%ebp)
f011ff81:	68 94 bd 13 f0       	push   $0xf013bd94
f011ff86:	e8 83 0d fe ff       	call   f0100d0e <cprintf>
f011ff8b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ff8e:	e8 10 cf fe ff       	call   f010cea3 <sys_calculate_free_frames>
f011ff93:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ff96:	e8 2d 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011ff9e:	83 ec 0c             	sub    $0xc,%esp
f011ffa1:	68 00 f0 1f 00       	push   $0x1ff000
f011ffa6:	e8 e1 7b fe ff       	call   f0107b8c <kmalloc>
f011ffab:	83 c4 10             	add    $0x10,%esp
f011ffae:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011ffb4:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011ffbb:	10 00 00 
f011ffbe:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011ffc4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ffc9:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011ffcf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011ffd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffda:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011ffe0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011ffe6:	29 d0                	sub    %edx,%eax
f011ffe8:	89 c1                	mov    %eax,%ecx
f011ffea:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011fff1:	10 00 00 
f011fff4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f011fff9:	0f b6 d0             	movzbl %al,%edx
f011fffc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120002:	01 d0                	add    %edx,%eax
f0120004:	48                   	dec    %eax
f0120005:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f012000b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120011:	ba 00 00 00 00       	mov    $0x0,%edx
f0120016:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012001c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120022:	29 d0                	sub    %edx,%eax
f0120024:	01 c1                	add    %eax,%ecx
f0120026:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f012002d:	10 00 00 
f0120030:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120035:	0f b6 c0             	movzbl %al,%eax
f0120038:	c1 e0 04             	shl    $0x4,%eax
f012003b:	89 c2                	mov    %eax,%edx
f012003d:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120043:	01 d0                	add    %edx,%eax
f0120045:	48                   	dec    %eax
f0120046:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f012004c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120052:	ba 00 00 00 00       	mov    $0x0,%edx
f0120057:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f012005d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120063:	29 d0                	sub    %edx,%eax
f0120065:	01 c8                	add    %ecx,%eax
f0120067:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f012006d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120073:	39 c2                	cmp    %eax,%edx
f0120075:	74 17                	je     f012008e <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f0120077:	83 ec 04             	sub    $0x4,%esp
f012007a:	68 74 bd 13 f0       	push   $0xf013bd74
f012007f:	68 a3 04 00 00       	push   $0x4a3
f0120084:	68 5a b6 13 f0       	push   $0xf013b65a
f0120089:	e8 77 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012008e:	e8 35 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120093:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120096:	74 17                	je     f01200af <test_kmalloc_worstfit+0x1551>
f0120098:	83 ec 04             	sub    $0x4,%esp
f012009b:	68 74 b6 13 f0       	push   $0xf013b674
f01200a0:	68 a4 04 00 00       	push   $0x4a4
f01200a5:	68 5a b6 13 f0       	push   $0xf013b65a
f01200aa:	e8 56 01 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01200af:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01200b2:	e8 ec cd fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01200b7:	29 c3                	sub    %eax,%ebx
f01200b9:	89 d8                	mov    %ebx,%eax
f01200bb:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01200c0:	74 17                	je     f01200d9 <test_kmalloc_worstfit+0x157b>
f01200c2:	83 ec 04             	sub    $0x4,%esp
f01200c5:	68 92 bb 13 f0       	push   $0xf013bb92
f01200ca:	68 a5 04 00 00       	push   $0x4a5
f01200cf:	68 5a b6 13 f0       	push   $0xf013b65a
f01200d4:	e8 2c 01 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01200d9:	ff 45 e8             	incl   -0x18(%ebp)
f01200dc:	83 ec 08             	sub    $0x8,%esp
f01200df:	ff 75 e8             	pushl  -0x18(%ebp)
f01200e2:	68 94 bd 13 f0       	push   $0xf013bd94
f01200e7:	e8 22 0c fe ff       	call   f0100d0e <cprintf>
f01200ec:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f01200ef:	e8 af cd fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01200f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01200f7:	e8 cc 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01200fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f01200ff:	83 ec 0c             	sub    $0xc,%esp
f0120102:	68 00 00 40 00       	push   $0x400000
f0120107:	e8 80 7a fe ff       	call   f0107b8c <kmalloc>
f012010c:	83 c4 10             	add    $0x10,%esp
f012010f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f0120115:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012011b:	85 c0                	test   %eax,%eax
f012011d:	74 17                	je     f0120136 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f012011f:	83 ec 04             	sub    $0x4,%esp
f0120122:	68 74 bd 13 f0       	push   $0xf013bd74
f0120127:	68 ad 04 00 00       	push   $0x4ad
f012012c:	68 5a b6 13 f0       	push   $0xf013b65a
f0120131:	e8 cf 00 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120136:	e8 8d 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012013b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012013e:	74 17                	je     f0120157 <test_kmalloc_worstfit+0x15f9>
f0120140:	83 ec 04             	sub    $0x4,%esp
f0120143:	68 74 b6 13 f0       	push   $0xf013b674
f0120148:	68 ae 04 00 00       	push   $0x4ae
f012014d:	68 5a b6 13 f0       	push   $0xf013b65a
f0120152:	e8 ae 00 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f0120157:	e8 47 cd fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012015c:	89 c2                	mov    %eax,%edx
f012015e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120161:	39 c2                	cmp    %eax,%edx
f0120163:	74 17                	je     f012017c <test_kmalloc_worstfit+0x161e>
f0120165:	83 ec 04             	sub    $0x4,%esp
f0120168:	68 92 bb 13 f0       	push   $0xf013bb92
f012016d:	68 af 04 00 00       	push   $0x4af
f0120172:	68 5a b6 13 f0       	push   $0xf013b65a
f0120177:	e8 89 00 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012017c:	ff 45 e8             	incl   -0x18(%ebp)
f012017f:	83 ec 08             	sub    $0x8,%esp
f0120182:	ff 75 e8             	pushl  -0x18(%ebp)
f0120185:	68 94 bd 13 f0       	push   $0xf013bd94
f012018a:	e8 7f 0b fe ff       	call   f0100d0e <cprintf>
f012018f:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f0120192:	83 ec 0c             	sub    $0xc,%esp
f0120195:	68 a8 bd 13 f0       	push   $0xf013bda8
f012019a:	e8 6f 0b fe ff       	call   f0100d0e <cprintf>
f012019f:	83 c4 10             	add    $0x10,%esp


	return 1;
f01201a2:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01201a7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01201aa:	5b                   	pop    %ebx
f01201ab:	5f                   	pop    %edi
f01201ac:	5d                   	pop    %ebp
f01201ad:	c3                   	ret    

f01201ae <test_kfree>:

int test_kfree()
{
f01201ae:	55                   	push   %ebp
f01201af:	89 e5                	mov    %esp,%ebp
f01201b1:	57                   	push   %edi
f01201b2:	53                   	push   %ebx
f01201b3:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f01201b9:	83 ec 0c             	sub    $0xc,%esp
f01201bc:	68 9c b5 13 f0       	push   $0xf013b59c
f01201c1:	e8 48 0b fe ff       	call   f0100d0e <cprintf>
f01201c6:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01201c9:	83 ec 0c             	sub    $0xc,%esp
f01201cc:	68 cc b5 13 f0       	push   $0xf013b5cc
f01201d1:	e8 38 0b fe ff       	call   f0100d0e <cprintf>
f01201d6:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01201d9:	83 ec 0c             	sub    $0xc,%esp
f01201dc:	68 9c b5 13 f0       	push   $0xf013b59c
f01201e1:	e8 28 0b fe ff       	call   f0100d0e <cprintf>
f01201e6:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01201e9:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01201ed:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01201f1:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01201f7:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01201fd:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0120204:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012020b:	e8 93 cc fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120210:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0120213:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f0120219:	b9 14 00 00 00       	mov    $0x14,%ecx
f012021e:	b8 00 00 00 00       	mov    $0x0,%eax
f0120223:	89 d7                	mov    %edx,%edi
f0120225:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0120227:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f012022d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120232:	b8 00 00 00 00       	mov    $0x0,%eax
f0120237:	89 d7                	mov    %edx,%edi
f0120239:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012023b:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f0120241:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120246:	b8 00 00 00 00       	mov    $0x0,%eax
f012024b:	89 d7                	mov    %edx,%edi
f012024d:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012024f:	e8 4f cc fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120254:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120257:	e8 6c 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012025c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012025f:	83 ec 0c             	sub    $0xc,%esp
f0120262:	68 00 fc 1f 00       	push   $0x1ffc00
f0120267:	e8 20 79 fe ff       	call   f0107b8c <kmalloc>
f012026c:	83 c4 10             	add    $0x10,%esp
f012026f:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120275:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012027b:	89 c1                	mov    %eax,%ecx
f012027d:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0120284:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0120287:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012028c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012028f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120292:	ba 00 00 00 00       	mov    $0x0,%edx
f0120297:	f7 75 c8             	divl   -0x38(%ebp)
f012029a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012029d:	29 d0                	sub    %edx,%eax
f012029f:	89 c3                	mov    %eax,%ebx
f01202a1:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01202a8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01202ad:	0f b6 d0             	movzbl %al,%edx
f01202b0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01202b3:	01 d0                	add    %edx,%eax
f01202b5:	48                   	dec    %eax
f01202b6:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01202b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01202bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01202c1:	f7 75 c0             	divl   -0x40(%ebp)
f01202c4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01202c7:	29 d0                	sub    %edx,%eax
f01202c9:	01 c3                	add    %eax,%ebx
f01202cb:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01202d2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01202d7:	0f b6 c0             	movzbl %al,%eax
f01202da:	c1 e0 04             	shl    $0x4,%eax
f01202dd:	89 c2                	mov    %eax,%edx
f01202df:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01202e2:	01 d0                	add    %edx,%eax
f01202e4:	48                   	dec    %eax
f01202e5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01202e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01202eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01202f0:	f7 75 b8             	divl   -0x48(%ebp)
f01202f3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01202f6:	29 d0                	sub    %edx,%eax
f01202f8:	01 d8                	add    %ebx,%eax
f01202fa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01202ff:	39 c1                	cmp    %eax,%ecx
f0120301:	74 17                	je     f012031a <test_kfree+0x16c>
f0120303:	83 ec 04             	sub    $0x4,%esp
f0120306:	68 40 b7 13 f0       	push   $0xf013b740
f012030b:	68 d7 04 00 00       	push   $0x4d7
f0120310:	68 5a b6 13 f0       	push   $0xf013b65a
f0120315:	e8 eb fe fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012031a:	e8 a9 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012031f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120322:	74 17                	je     f012033b <test_kfree+0x18d>
f0120324:	83 ec 04             	sub    $0x4,%esp
f0120327:	68 74 b6 13 f0       	push   $0xf013b674
f012032c:	68 d8 04 00 00       	push   $0x4d8
f0120331:	68 5a b6 13 f0       	push   $0xf013b65a
f0120336:	e8 ca fe fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012033b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012033e:	e8 60 cb fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120343:	29 c3                	sub    %eax,%ebx
f0120345:	89 d8                	mov    %ebx,%eax
f0120347:	3d 00 02 00 00       	cmp    $0x200,%eax
f012034c:	74 17                	je     f0120365 <test_kfree+0x1b7>
f012034e:	83 ec 04             	sub    $0x4,%esp
f0120351:	68 dc b6 13 f0       	push   $0xf013b6dc
f0120356:	68 d9 04 00 00       	push   $0x4d9
f012035b:	68 5a b6 13 f0       	push   $0xf013b65a
f0120360:	e8 a0 fe fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0120365:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f012036c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012036f:	e8 2f cb fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120374:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120377:	e8 4c 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012037c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012037f:	83 ec 0c             	sub    $0xc,%esp
f0120382:	68 00 fc 1f 00       	push   $0x1ffc00
f0120387:	e8 00 78 fe ff       	call   f0107b8c <kmalloc>
f012038c:	83 c4 10             	add    $0x10,%esp
f012038f:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120395:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f012039b:	89 c1                	mov    %eax,%ecx
f012039d:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01203a4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01203a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01203ac:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01203af:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01203b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01203b7:	f7 75 b0             	divl   -0x50(%ebp)
f01203ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01203bd:	29 d0                	sub    %edx,%eax
f01203bf:	89 c3                	mov    %eax,%ebx
f01203c1:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01203c8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01203cd:	0f b6 d0             	movzbl %al,%edx
f01203d0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01203d3:	01 d0                	add    %edx,%eax
f01203d5:	48                   	dec    %eax
f01203d6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01203d9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01203dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01203e1:	f7 75 a8             	divl   -0x58(%ebp)
f01203e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01203e7:	29 d0                	sub    %edx,%eax
f01203e9:	01 c3                	add    %eax,%ebx
f01203eb:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01203f2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01203f7:	0f b6 c0             	movzbl %al,%eax
f01203fa:	c1 e0 04             	shl    $0x4,%eax
f01203fd:	89 c2                	mov    %eax,%edx
f01203ff:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120402:	01 d0                	add    %edx,%eax
f0120404:	48                   	dec    %eax
f0120405:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0120408:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012040b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120410:	f7 75 a0             	divl   -0x60(%ebp)
f0120413:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120416:	29 d0                	sub    %edx,%eax
f0120418:	01 d8                	add    %ebx,%eax
f012041a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012041f:	39 c1                	cmp    %eax,%ecx
f0120421:	74 17                	je     f012043a <test_kfree+0x28c>
f0120423:	83 ec 04             	sub    $0x4,%esp
f0120426:	68 40 b7 13 f0       	push   $0xf013b740
f012042b:	68 e0 04 00 00       	push   $0x4e0
f0120430:	68 5a b6 13 f0       	push   $0xf013b65a
f0120435:	e8 cb fd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012043a:	e8 89 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012043f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120442:	74 17                	je     f012045b <test_kfree+0x2ad>
f0120444:	83 ec 04             	sub    $0x4,%esp
f0120447:	68 74 b6 13 f0       	push   $0xf013b674
f012044c:	68 e1 04 00 00       	push   $0x4e1
f0120451:	68 5a b6 13 f0       	push   $0xf013b65a
f0120456:	e8 aa fd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012045b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012045e:	e8 40 ca fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120463:	29 c3                	sub    %eax,%ebx
f0120465:	89 d8                	mov    %ebx,%eax
f0120467:	3d 00 02 00 00       	cmp    $0x200,%eax
f012046c:	74 17                	je     f0120485 <test_kfree+0x2d7>
f012046e:	83 ec 04             	sub    $0x4,%esp
f0120471:	68 dc b6 13 f0       	push   $0xf013b6dc
f0120476:	68 e2 04 00 00       	push   $0x4e2
f012047b:	68 5a b6 13 f0       	push   $0xf013b65a
f0120480:	e8 80 fd fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0120485:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f012048c:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012048f:	e8 0f ca fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120494:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120497:	e8 2c 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012049c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012049f:	83 ec 0c             	sub    $0xc,%esp
f01204a2:	68 00 08 00 00       	push   $0x800
f01204a7:	e8 e0 76 fe ff       	call   f0107b8c <kmalloc>
f01204ac:	83 c4 10             	add    $0x10,%esp
f01204af:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01204b5:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01204bb:	89 c1                	mov    %eax,%ecx
f01204bd:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01204c4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01204c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01204cc:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01204cf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01204d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01204d7:	f7 75 98             	divl   -0x68(%ebp)
f01204da:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01204dd:	29 d0                	sub    %edx,%eax
f01204df:	89 c3                	mov    %eax,%ebx
f01204e1:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01204e8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01204ed:	0f b6 d0             	movzbl %al,%edx
f01204f0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01204f3:	01 d0                	add    %edx,%eax
f01204f5:	48                   	dec    %eax
f01204f6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01204f9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01204fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120501:	f7 75 90             	divl   -0x70(%ebp)
f0120504:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120507:	29 d0                	sub    %edx,%eax
f0120509:	01 c3                	add    %eax,%ebx
f012050b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0120512:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120517:	0f b6 c0             	movzbl %al,%eax
f012051a:	c1 e0 04             	shl    $0x4,%eax
f012051d:	89 c2                	mov    %eax,%edx
f012051f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120522:	01 d0                	add    %edx,%eax
f0120524:	48                   	dec    %eax
f0120525:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0120528:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012052b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120530:	f7 75 88             	divl   -0x78(%ebp)
f0120533:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120536:	29 d0                	sub    %edx,%eax
f0120538:	01 d8                	add    %ebx,%eax
f012053a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012053f:	39 c1                	cmp    %eax,%ecx
f0120541:	74 17                	je     f012055a <test_kfree+0x3ac>
f0120543:	83 ec 04             	sub    $0x4,%esp
f0120546:	68 40 b7 13 f0       	push   $0xf013b740
f012054b:	68 e9 04 00 00       	push   $0x4e9
f0120550:	68 5a b6 13 f0       	push   $0xf013b65a
f0120555:	e8 ab fc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012055a:	e8 69 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012055f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120562:	74 17                	je     f012057b <test_kfree+0x3cd>
f0120564:	83 ec 04             	sub    $0x4,%esp
f0120567:	68 74 b6 13 f0       	push   $0xf013b674
f012056c:	68 ea 04 00 00       	push   $0x4ea
f0120571:	68 5a b6 13 f0       	push   $0xf013b65a
f0120576:	e8 8a fc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012057b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012057e:	e8 20 c9 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120583:	29 c3                	sub    %eax,%ebx
f0120585:	89 d8                	mov    %ebx,%eax
f0120587:	83 f8 01             	cmp    $0x1,%eax
f012058a:	74 17                	je     f01205a3 <test_kfree+0x3f5>
f012058c:	83 ec 04             	sub    $0x4,%esp
f012058f:	68 dc b6 13 f0       	push   $0xf013b6dc
f0120594:	68 eb 04 00 00       	push   $0x4eb
f0120599:	68 5a b6 13 f0       	push   $0xf013b65a
f012059e:	e8 62 fc fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01205a3:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f01205aa:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01205ad:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01205b3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01205b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205bd:	eb 0e                	jmp    f01205cd <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f01205bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205c2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01205c5:	01 d0                	add    %edx,%eax
f01205c7:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01205ca:	ff 45 f4             	incl   -0xc(%ebp)
f01205cd:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01205d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205d6:	7f e7                	jg     f01205bf <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01205d8:	e8 c6 c8 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01205dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01205e0:	e8 e3 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01205e5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01205e8:	83 ec 0c             	sub    $0xc,%esp
f01205eb:	68 00 08 00 00       	push   $0x800
f01205f0:	e8 97 75 fe ff       	call   f0107b8c <kmalloc>
f01205f5:	83 c4 10             	add    $0x10,%esp
f01205f8:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01205fe:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120604:	89 c1                	mov    %eax,%ecx
f0120606:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012060d:	10 00 00 
f0120610:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120616:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012061b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0120621:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120627:	ba 00 00 00 00       	mov    $0x0,%edx
f012062c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120632:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120638:	29 d0                	sub    %edx,%eax
f012063a:	89 c3                	mov    %eax,%ebx
f012063c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120643:	10 00 00 
f0120646:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012064b:	0f b6 d0             	movzbl %al,%edx
f012064e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120654:	01 d0                	add    %edx,%eax
f0120656:	48                   	dec    %eax
f0120657:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012065d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120663:	ba 00 00 00 00       	mov    $0x0,%edx
f0120668:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012066e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120674:	29 d0                	sub    %edx,%eax
f0120676:	01 c3                	add    %eax,%ebx
f0120678:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012067f:	10 00 00 
f0120682:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120687:	0f b6 c0             	movzbl %al,%eax
f012068a:	c1 e0 04             	shl    $0x4,%eax
f012068d:	89 c2                	mov    %eax,%edx
f012068f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120695:	01 d0                	add    %edx,%eax
f0120697:	48                   	dec    %eax
f0120698:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012069e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01206a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01206a9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01206af:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01206b5:	29 d0                	sub    %edx,%eax
f01206b7:	01 d8                	add    %ebx,%eax
f01206b9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01206be:	39 c1                	cmp    %eax,%ecx
f01206c0:	74 17                	je     f01206d9 <test_kfree+0x52b>
f01206c2:	83 ec 04             	sub    $0x4,%esp
f01206c5:	68 40 b7 13 f0       	push   $0xf013b740
f01206ca:	68 f7 04 00 00       	push   $0x4f7
f01206cf:	68 5a b6 13 f0       	push   $0xf013b65a
f01206d4:	e8 2c fb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206d9:	e8 ea 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206de:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01206e1:	74 17                	je     f01206fa <test_kfree+0x54c>
f01206e3:	83 ec 04             	sub    $0x4,%esp
f01206e6:	68 74 b6 13 f0       	push   $0xf013b674
f01206eb:	68 f8 04 00 00       	push   $0x4f8
f01206f0:	68 5a b6 13 f0       	push   $0xf013b65a
f01206f5:	e8 0b fb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01206fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01206fd:	e8 a1 c7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120702:	29 c3                	sub    %eax,%ebx
f0120704:	89 d8                	mov    %ebx,%eax
f0120706:	83 f8 01             	cmp    $0x1,%eax
f0120709:	74 17                	je     f0120722 <test_kfree+0x574>
f012070b:	83 ec 04             	sub    $0x4,%esp
f012070e:	68 dc b6 13 f0       	push   $0xf013b6dc
f0120713:	68 f9 04 00 00       	push   $0x4f9
f0120718:	68 5a b6 13 f0       	push   $0xf013b65a
f012071d:	e8 e3 fa fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120722:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120729:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012072c:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120732:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120735:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012073c:	eb 0e                	jmp    f012074c <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f012073e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120741:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120744:	01 d0                	add    %edx,%eax
f0120746:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120749:	ff 45 f4             	incl   -0xc(%ebp)
f012074c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120752:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120755:	7f e7                	jg     f012073e <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120757:	e8 47 c7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012075f:	e8 64 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120764:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120767:	83 ec 0c             	sub    $0xc,%esp
f012076a:	68 00 1c 00 00       	push   $0x1c00
f012076f:	e8 18 74 fe ff       	call   f0107b8c <kmalloc>
f0120774:	83 c4 10             	add    $0x10,%esp
f0120777:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012077d:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120783:	89 c1                	mov    %eax,%ecx
f0120785:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012078c:	10 00 00 
f012078f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120795:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012079a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01207a0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01207a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01207ab:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01207b1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01207b7:	29 d0                	sub    %edx,%eax
f01207b9:	89 c3                	mov    %eax,%ebx
f01207bb:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01207c2:	10 00 00 
f01207c5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01207ca:	0f b6 d0             	movzbl %al,%edx
f01207cd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01207d3:	01 d0                	add    %edx,%eax
f01207d5:	48                   	dec    %eax
f01207d6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01207dc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01207e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01207e7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01207ed:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01207f3:	29 d0                	sub    %edx,%eax
f01207f5:	01 c3                	add    %eax,%ebx
f01207f7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01207fe:	10 00 00 
f0120801:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120806:	0f b6 c0             	movzbl %al,%eax
f0120809:	c1 e0 04             	shl    $0x4,%eax
f012080c:	89 c2                	mov    %eax,%edx
f012080e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120814:	01 d0                	add    %edx,%eax
f0120816:	48                   	dec    %eax
f0120817:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012081d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120823:	ba 00 00 00 00       	mov    $0x0,%edx
f0120828:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012082e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120834:	29 d0                	sub    %edx,%eax
f0120836:	01 d8                	add    %ebx,%eax
f0120838:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012083d:	39 c1                	cmp    %eax,%ecx
f012083f:	74 17                	je     f0120858 <test_kfree+0x6aa>
f0120841:	83 ec 04             	sub    $0x4,%esp
f0120844:	68 40 b7 13 f0       	push   $0xf013b740
f0120849:	68 05 05 00 00       	push   $0x505
f012084e:	68 5a b6 13 f0       	push   $0xf013b65a
f0120853:	e8 ad f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120858:	e8 6b 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012085d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120860:	74 17                	je     f0120879 <test_kfree+0x6cb>
f0120862:	83 ec 04             	sub    $0x4,%esp
f0120865:	68 74 b6 13 f0       	push   $0xf013b674
f012086a:	68 06 05 00 00       	push   $0x506
f012086f:	68 5a b6 13 f0       	push   $0xf013b65a
f0120874:	e8 8c f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120879:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012087c:	e8 22 c6 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120881:	29 c3                	sub    %eax,%ebx
f0120883:	89 d8                	mov    %ebx,%eax
f0120885:	83 f8 02             	cmp    $0x2,%eax
f0120888:	74 17                	je     f01208a1 <test_kfree+0x6f3>
f012088a:	83 ec 04             	sub    $0x4,%esp
f012088d:	68 dc b6 13 f0       	push   $0xf013b6dc
f0120892:	68 07 05 00 00       	push   $0x507
f0120897:	68 5a b6 13 f0       	push   $0xf013b65a
f012089c:	e8 64 f9 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01208a1:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f01208a8:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01208ab:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01208b1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01208b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01208bb:	eb 0e                	jmp    f01208cb <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f01208bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01208c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01208c3:	01 d0                	add    %edx,%eax
f01208c5:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01208c8:	ff 45 f4             	incl   -0xc(%ebp)
f01208cb:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01208d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01208d4:	7f e7                	jg     f01208bd <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01208d6:	e8 c8 c5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01208db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208de:	e8 e5 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01208e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01208e6:	83 ec 0c             	sub    $0xc,%esp
f01208e9:	68 00 fc 2f 00       	push   $0x2ffc00
f01208ee:	e8 99 72 fe ff       	call   f0107b8c <kmalloc>
f01208f3:	83 c4 10             	add    $0x10,%esp
f01208f6:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208fc:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120902:	89 c1                	mov    %eax,%ecx
f0120904:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012090b:	10 00 00 
f012090e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120914:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120919:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012091f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120925:	ba 00 00 00 00       	mov    $0x0,%edx
f012092a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120930:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120936:	29 d0                	sub    %edx,%eax
f0120938:	89 c3                	mov    %eax,%ebx
f012093a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120941:	10 00 00 
f0120944:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120949:	0f b6 d0             	movzbl %al,%edx
f012094c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120952:	01 d0                	add    %edx,%eax
f0120954:	48                   	dec    %eax
f0120955:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012095b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120961:	ba 00 00 00 00       	mov    $0x0,%edx
f0120966:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012096c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120972:	29 d0                	sub    %edx,%eax
f0120974:	01 c3                	add    %eax,%ebx
f0120976:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012097d:	10 00 00 
f0120980:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120985:	0f b6 c0             	movzbl %al,%eax
f0120988:	c1 e0 04             	shl    $0x4,%eax
f012098b:	89 c2                	mov    %eax,%edx
f012098d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120993:	01 d0                	add    %edx,%eax
f0120995:	48                   	dec    %eax
f0120996:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012099c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01209a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01209a7:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01209ad:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01209b3:	29 d0                	sub    %edx,%eax
f01209b5:	01 d8                	add    %ebx,%eax
f01209b7:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01209bc:	39 c1                	cmp    %eax,%ecx
f01209be:	74 17                	je     f01209d7 <test_kfree+0x829>
f01209c0:	83 ec 04             	sub    $0x4,%esp
f01209c3:	68 40 b7 13 f0       	push   $0xf013b740
f01209c8:	68 13 05 00 00       	push   $0x513
f01209cd:	68 5a b6 13 f0       	push   $0xf013b65a
f01209d2:	e8 2e f8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209d7:	e8 ec 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01209dc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209df:	74 17                	je     f01209f8 <test_kfree+0x84a>
f01209e1:	83 ec 04             	sub    $0x4,%esp
f01209e4:	68 74 b6 13 f0       	push   $0xf013b674
f01209e9:	68 14 05 00 00       	push   $0x514
f01209ee:	68 5a b6 13 f0       	push   $0xf013b65a
f01209f3:	e8 0d f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209f8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209fb:	e8 a3 c4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120a00:	29 c3                	sub    %eax,%ebx
f0120a02:	89 d8                	mov    %ebx,%eax
f0120a04:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120a09:	74 17                	je     f0120a22 <test_kfree+0x874>
f0120a0b:	83 ec 04             	sub    $0x4,%esp
f0120a0e:	68 dc b6 13 f0       	push   $0xf013b6dc
f0120a13:	68 15 05 00 00       	push   $0x515
f0120a18:	68 5a b6 13 f0       	push   $0xf013b65a
f0120a1d:	e8 e3 f7 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120a22:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120a29:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120a2c:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120a32:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120a35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a3c:	eb 0e                	jmp    f0120a4c <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120a3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a41:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a44:	01 d0                	add    %edx,%eax
f0120a46:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120a49:	ff 45 f4             	incl   -0xc(%ebp)
f0120a4c:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120a52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a55:	7f e7                	jg     f0120a3e <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120a57:	e8 47 c4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120a5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a5f:	e8 64 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a64:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120a67:	83 ec 0c             	sub    $0xc,%esp
f0120a6a:	68 00 fc 5f 00       	push   $0x5ffc00
f0120a6f:	e8 18 71 fe ff       	call   f0107b8c <kmalloc>
f0120a74:	83 c4 10             	add    $0x10,%esp
f0120a77:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a7d:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120a83:	89 c1                	mov    %eax,%ecx
f0120a85:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120a8c:	10 00 00 
f0120a8f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120a95:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a9a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120aa0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120aa6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aab:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120ab1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120ab7:	29 d0                	sub    %edx,%eax
f0120ab9:	89 c3                	mov    %eax,%ebx
f0120abb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120ac2:	10 00 00 
f0120ac5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120aca:	0f b6 d0             	movzbl %al,%edx
f0120acd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120ad3:	01 d0                	add    %edx,%eax
f0120ad5:	48                   	dec    %eax
f0120ad6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120adc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120ae2:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ae7:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120aed:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120af3:	29 d0                	sub    %edx,%eax
f0120af5:	01 c3                	add    %eax,%ebx
f0120af7:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120afe:	10 00 00 
f0120b01:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120b06:	0f b6 c0             	movzbl %al,%eax
f0120b09:	c1 e0 04             	shl    $0x4,%eax
f0120b0c:	89 c2                	mov    %eax,%edx
f0120b0e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120b14:	01 d0                	add    %edx,%eax
f0120b16:	48                   	dec    %eax
f0120b17:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120b1d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120b23:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b28:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120b2e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120b34:	29 d0                	sub    %edx,%eax
f0120b36:	01 d8                	add    %ebx,%eax
f0120b38:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120b3d:	39 c1                	cmp    %eax,%ecx
f0120b3f:	74 17                	je     f0120b58 <test_kfree+0x9aa>
f0120b41:	83 ec 04             	sub    $0x4,%esp
f0120b44:	68 40 b7 13 f0       	push   $0xf013b740
f0120b49:	68 21 05 00 00       	push   $0x521
f0120b4e:	68 5a b6 13 f0       	push   $0xf013b65a
f0120b53:	e8 ad f6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b58:	e8 6b 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b5d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b60:	74 17                	je     f0120b79 <test_kfree+0x9cb>
f0120b62:	83 ec 04             	sub    $0x4,%esp
f0120b65:	68 74 b6 13 f0       	push   $0xf013b674
f0120b6a:	68 22 05 00 00       	push   $0x522
f0120b6f:	68 5a b6 13 f0       	push   $0xf013b65a
f0120b74:	e8 8c f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b79:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b7c:	e8 22 c3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120b81:	29 c3                	sub    %eax,%ebx
f0120b83:	89 d8                	mov    %ebx,%eax
f0120b85:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120b8a:	74 17                	je     f0120ba3 <test_kfree+0x9f5>
f0120b8c:	83 ec 04             	sub    $0x4,%esp
f0120b8f:	68 dc b6 13 f0       	push   $0xf013b6dc
f0120b94:	68 23 05 00 00       	push   $0x523
f0120b99:	68 5a b6 13 f0       	push   $0xf013b65a
f0120b9e:	e8 62 f6 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120ba3:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120baa:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120bad:	e8 f1 c2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120bb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120bb5:	e8 0e 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120bba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120bbd:	83 ec 0c             	sub    $0xc,%esp
f0120bc0:	68 00 38 00 00       	push   $0x3800
f0120bc5:	e8 c2 6f fe ff       	call   f0107b8c <kmalloc>
f0120bca:	83 c4 10             	add    $0x10,%esp
f0120bcd:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120bd3:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120bd9:	89 c1                	mov    %eax,%ecx
f0120bdb:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120be2:	10 00 00 
f0120be5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120beb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120bf0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120bf6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120bfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c01:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120c07:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120c0d:	29 d0                	sub    %edx,%eax
f0120c0f:	89 c3                	mov    %eax,%ebx
f0120c11:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120c18:	10 00 00 
f0120c1b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120c20:	0f b6 d0             	movzbl %al,%edx
f0120c23:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120c29:	01 d0                	add    %edx,%eax
f0120c2b:	48                   	dec    %eax
f0120c2c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120c32:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120c38:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c3d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120c43:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120c49:	29 d0                	sub    %edx,%eax
f0120c4b:	01 c3                	add    %eax,%ebx
f0120c4d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120c54:	10 00 00 
f0120c57:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0120c5c:	0f b6 c0             	movzbl %al,%eax
f0120c5f:	c1 e0 04             	shl    $0x4,%eax
f0120c62:	89 c2                	mov    %eax,%edx
f0120c64:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120c6a:	01 d0                	add    %edx,%eax
f0120c6c:	48                   	dec    %eax
f0120c6d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120c73:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120c79:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c7e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0120c84:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120c8a:	29 d0                	sub    %edx,%eax
f0120c8c:	01 d8                	add    %ebx,%eax
f0120c8e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120c93:	39 c1                	cmp    %eax,%ecx
f0120c95:	74 17                	je     f0120cae <test_kfree+0xb00>
f0120c97:	83 ec 04             	sub    $0x4,%esp
f0120c9a:	68 40 b7 13 f0       	push   $0xf013b740
f0120c9f:	68 2a 05 00 00       	push   $0x52a
f0120ca4:	68 5a b6 13 f0       	push   $0xf013b65a
f0120ca9:	e8 57 f5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120cae:	e8 15 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120cb3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120cb6:	74 17                	je     f0120ccf <test_kfree+0xb21>
f0120cb8:	83 ec 04             	sub    $0x4,%esp
f0120cbb:	68 74 b6 13 f0       	push   $0xf013b674
f0120cc0:	68 2b 05 00 00       	push   $0x52b
f0120cc5:	68 5a b6 13 f0       	push   $0xf013b65a
f0120cca:	e8 36 f5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ccf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120cd2:	e8 cc c1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120cd7:	29 c3                	sub    %eax,%ebx
f0120cd9:	89 d8                	mov    %ebx,%eax
f0120cdb:	83 f8 04             	cmp    $0x4,%eax
f0120cde:	74 17                	je     f0120cf7 <test_kfree+0xb49>
f0120ce0:	83 ec 04             	sub    $0x4,%esp
f0120ce3:	68 dc b6 13 f0       	push   $0xf013b6dc
f0120ce8:	68 2c 05 00 00       	push   $0x52c
f0120ced:	68 5a b6 13 f0       	push   $0xf013b65a
f0120cf2:	e8 0e f5 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120cf7:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120cfe:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0120d01:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120d07:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d11:	eb 0e                	jmp    f0120d21 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0120d13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120d16:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d19:	01 d0                	add    %edx,%eax
f0120d1b:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120d1e:	ff 45 f4             	incl   -0xc(%ebp)
f0120d21:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120d27:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d2a:	7f e7                	jg     f0120d13 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120d2c:	e8 72 c1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120d31:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120d37:	e8 8c 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d3c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120d42:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120d48:	83 ec 0c             	sub    $0xc,%esp
f0120d4b:	50                   	push   %eax
f0120d4c:	e8 06 6f fe ff       	call   f0107c57 <kfree>
f0120d51:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d54:	e8 6f 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d59:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120d5f:	74 17                	je     f0120d78 <test_kfree+0xbca>
f0120d61:	83 ec 04             	sub    $0x4,%esp
f0120d64:	68 74 b6 13 f0       	push   $0xf013b674
f0120d69:	68 3b 05 00 00       	push   $0x53b
f0120d6e:	68 5a b6 13 f0       	push   $0xf013b65a
f0120d73:	e8 8d f4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d78:	e8 26 c1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120d7d:	89 c2                	mov    %eax,%edx
f0120d7f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120d85:	29 c2                	sub    %eax,%edx
f0120d87:	89 d0                	mov    %edx,%eax
f0120d89:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120d8e:	74 17                	je     f0120da7 <test_kfree+0xbf9>
f0120d90:	83 ec 04             	sub    $0x4,%esp
f0120d93:	68 e4 bd 13 f0       	push   $0xf013bde4
f0120d98:	68 3c 05 00 00       	push   $0x53c
f0120d9d:	68 5a b6 13 f0       	push   $0xf013b65a
f0120da2:	e8 5e f4 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120da7:	e8 f7 c0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120dac:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120db2:	e8 11 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120db7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120dbd:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120dc3:	83 ec 0c             	sub    $0xc,%esp
f0120dc6:	50                   	push   %eax
f0120dc7:	e8 8b 6e fe ff       	call   f0107c57 <kfree>
f0120dcc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dcf:	e8 f4 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120dd4:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120dda:	74 17                	je     f0120df3 <test_kfree+0xc45>
f0120ddc:	83 ec 04             	sub    $0x4,%esp
f0120ddf:	68 74 b6 13 f0       	push   $0xf013b674
f0120de4:	68 42 05 00 00       	push   $0x542
f0120de9:	68 5a b6 13 f0       	push   $0xf013b65a
f0120dee:	e8 12 f4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120df3:	e8 ab c0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120df8:	89 c2                	mov    %eax,%edx
f0120dfa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120e00:	29 c2                	sub    %eax,%edx
f0120e02:	89 d0                	mov    %edx,%eax
f0120e04:	83 f8 01             	cmp    $0x1,%eax
f0120e07:	74 17                	je     f0120e20 <test_kfree+0xc72>
f0120e09:	83 ec 04             	sub    $0x4,%esp
f0120e0c:	68 e4 bd 13 f0       	push   $0xf013bde4
f0120e11:	68 43 05 00 00       	push   $0x543
f0120e16:	68 5a b6 13 f0       	push   $0xf013b65a
f0120e1b:	e8 e5 f3 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e20:	e8 7e c0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120e25:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e2b:	e8 98 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e30:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120e36:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120e3c:	83 ec 0c             	sub    $0xc,%esp
f0120e3f:	50                   	push   %eax
f0120e40:	e8 12 6e fe ff       	call   f0107c57 <kfree>
f0120e45:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e48:	e8 7b 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e4d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120e53:	74 17                	je     f0120e6c <test_kfree+0xcbe>
f0120e55:	83 ec 04             	sub    $0x4,%esp
f0120e58:	68 74 b6 13 f0       	push   $0xf013b674
f0120e5d:	68 49 05 00 00       	push   $0x549
f0120e62:	68 5a b6 13 f0       	push   $0xf013b65a
f0120e67:	e8 99 f3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e6c:	e8 32 c0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120e71:	89 c2                	mov    %eax,%edx
f0120e73:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120e79:	29 c2                	sub    %eax,%edx
f0120e7b:	89 d0                	mov    %edx,%eax
f0120e7d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120e82:	74 17                	je     f0120e9b <test_kfree+0xced>
f0120e84:	83 ec 04             	sub    $0x4,%esp
f0120e87:	68 e4 bd 13 f0       	push   $0xf013bde4
f0120e8c:	68 4a 05 00 00       	push   $0x54a
f0120e91:	68 5a b6 13 f0       	push   $0xf013b65a
f0120e96:	e8 6a f3 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e9b:	e8 03 c0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120ea0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ea6:	e8 1d 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120eab:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120eb1:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120eb7:	83 ec 0c             	sub    $0xc,%esp
f0120eba:	50                   	push   %eax
f0120ebb:	e8 97 6d fe ff       	call   f0107c57 <kfree>
f0120ec0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ec3:	e8 00 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ec8:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120ece:	74 17                	je     f0120ee7 <test_kfree+0xd39>
f0120ed0:	83 ec 04             	sub    $0x4,%esp
f0120ed3:	68 74 b6 13 f0       	push   $0xf013b674
f0120ed8:	68 50 05 00 00       	push   $0x550
f0120edd:	68 5a b6 13 f0       	push   $0xf013b65a
f0120ee2:	e8 1e f3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ee7:	e8 b7 bf fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0120eec:	89 c2                	mov    %eax,%edx
f0120eee:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120ef4:	29 c2                	sub    %eax,%edx
f0120ef6:	89 d0                	mov    %edx,%eax
f0120ef8:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120efd:	74 17                	je     f0120f16 <test_kfree+0xd68>
f0120eff:	83 ec 04             	sub    $0x4,%esp
f0120f02:	68 e4 bd 13 f0       	push   $0xf013bde4
f0120f07:	68 51 05 00 00       	push   $0x551
f0120f0c:	68 5a b6 13 f0       	push   $0xf013b65a
f0120f11:	e8 ef f2 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120f16:	83 ec 0c             	sub    $0xc,%esp
f0120f19:	68 1c be 13 f0       	push   $0xf013be1c
f0120f1e:	e8 eb fd fd ff       	call   f0100d0e <cprintf>
f0120f23:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120f26:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120f2c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120f2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f36:	eb 1e                	jmp    f0120f56 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120f38:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120f3e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120f41:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f44:	01 c8                	add    %ecx,%eax
f0120f46:	8a 00                	mov    (%eax),%al
f0120f48:	0f be c0             	movsbl %al,%eax
f0120f4b:	01 d0                	add    %edx,%eax
f0120f4d:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120f53:	ff 45 f4             	incl   -0xc(%ebp)
f0120f56:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120f5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f5f:	7f d7                	jg     f0120f38 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120f61:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120f67:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120f6d:	89 c1                	mov    %eax,%ecx
f0120f6f:	01 c9                	add    %ecx,%ecx
f0120f71:	01 c8                	add    %ecx,%eax
f0120f73:	39 c2                	cmp    %eax,%edx
f0120f75:	74 17                	je     f0120f8e <test_kfree+0xde0>
f0120f77:	83 ec 04             	sub    $0x4,%esp
f0120f7a:	68 40 be 13 f0       	push   $0xf013be40
f0120f7f:	68 5e 05 00 00       	push   $0x55e
f0120f84:	68 5a b6 13 f0       	push   $0xf013b65a
f0120f89:	e8 77 f2 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120f8e:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120f94:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120f97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f9e:	eb 1e                	jmp    f0120fbe <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120fa0:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120fa6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120fa9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120fac:	01 c8                	add    %ecx,%eax
f0120fae:	8a 00                	mov    (%eax),%al
f0120fb0:	0f be c0             	movsbl %al,%eax
f0120fb3:	01 d0                	add    %edx,%eax
f0120fb5:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120fbb:	ff 45 f4             	incl   -0xc(%ebp)
f0120fbe:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120fc4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120fc7:	7f d7                	jg     f0120fa0 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120fc9:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120fcf:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120fd5:	c1 e2 02             	shl    $0x2,%edx
f0120fd8:	39 d0                	cmp    %edx,%eax
f0120fda:	74 17                	je     f0120ff3 <test_kfree+0xe45>
f0120fdc:	83 ec 04             	sub    $0x4,%esp
f0120fdf:	68 40 be 13 f0       	push   $0xf013be40
f0120fe4:	68 66 05 00 00       	push   $0x566
f0120fe9:	68 5a b6 13 f0       	push   $0xf013b65a
f0120fee:	e8 12 f2 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120ff3:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120ff9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120ffc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121003:	eb 1e                	jmp    f0121023 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0121005:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012100b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012100e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121011:	01 c8                	add    %ecx,%eax
f0121013:	8a 00                	mov    (%eax),%al
f0121015:	0f be c0             	movsbl %al,%eax
f0121018:	01 d0                	add    %edx,%eax
f012101a:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121020:	ff 45 f4             	incl   -0xc(%ebp)
f0121023:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0121029:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012102c:	7f d7                	jg     f0121005 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012102e:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0121034:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012103a:	89 d0                	mov    %edx,%eax
f012103c:	c1 e0 02             	shl    $0x2,%eax
f012103f:	01 d0                	add    %edx,%eax
f0121041:	39 c1                	cmp    %eax,%ecx
f0121043:	74 17                	je     f012105c <test_kfree+0xeae>
f0121045:	83 ec 04             	sub    $0x4,%esp
f0121048:	68 40 be 13 f0       	push   $0xf013be40
f012104d:	68 6e 05 00 00       	push   $0x56e
f0121052:	68 5a b6 13 f0       	push   $0xf013b65a
f0121057:	e8 a9 f1 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012105c:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121062:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121065:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012106c:	eb 1e                	jmp    f012108c <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f012106e:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0121074:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121077:	8b 45 80             	mov    -0x80(%ebp),%eax
f012107a:	01 c8                	add    %ecx,%eax
f012107c:	8a 00                	mov    (%eax),%al
f012107e:	0f be c0             	movsbl %al,%eax
f0121081:	01 d0                	add    %edx,%eax
f0121083:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121089:	ff 45 f4             	incl   -0xc(%ebp)
f012108c:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0121092:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121095:	7f d7                	jg     f012106e <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0121097:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012109d:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01210a3:	89 d0                	mov    %edx,%eax
f01210a5:	01 c0                	add    %eax,%eax
f01210a7:	01 d0                	add    %edx,%eax
f01210a9:	01 c0                	add    %eax,%eax
f01210ab:	01 d0                	add    %edx,%eax
f01210ad:	39 c1                	cmp    %eax,%ecx
f01210af:	74 17                	je     f01210c8 <test_kfree+0xf1a>
f01210b1:	83 ec 04             	sub    $0x4,%esp
f01210b4:	68 40 be 13 f0       	push   $0xf013be40
f01210b9:	68 76 05 00 00       	push   $0x576
f01210be:	68 5a b6 13 f0       	push   $0xf013b65a
f01210c3:	e8 3d f1 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f01210c8:	83 ec 0c             	sub    $0xc,%esp
f01210cb:	68 73 be 13 f0       	push   $0xf013be73
f01210d0:	e8 39 fc fd ff       	call   f0100d0e <cprintf>
f01210d5:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01210d8:	e8 c6 bd fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01210dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01210e0:	e8 e3 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01210e5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01210e8:	83 ec 0c             	sub    $0xc,%esp
f01210eb:	68 00 50 00 00       	push   $0x5000
f01210f0:	e8 97 6a fe ff       	call   f0107b8c <kmalloc>
f01210f5:	83 c4 10             	add    $0x10,%esp
f01210f8:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01210fe:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121104:	89 c1                	mov    %eax,%ecx
f0121106:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012110d:	10 00 00 
f0121110:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0121116:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012111b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0121121:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121127:	ba 00 00 00 00       	mov    $0x0,%edx
f012112c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121132:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121138:	29 d0                	sub    %edx,%eax
f012113a:	89 c3                	mov    %eax,%ebx
f012113c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121143:	10 00 00 
f0121146:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012114b:	0f b6 d0             	movzbl %al,%edx
f012114e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121154:	01 d0                	add    %edx,%eax
f0121156:	48                   	dec    %eax
f0121157:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012115d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121163:	ba 00 00 00 00       	mov    $0x0,%edx
f0121168:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012116e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121174:	29 d0                	sub    %edx,%eax
f0121176:	01 c3                	add    %eax,%ebx
f0121178:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012117f:	10 00 00 
f0121182:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121187:	0f b6 c0             	movzbl %al,%eax
f012118a:	c1 e0 04             	shl    $0x4,%eax
f012118d:	89 c2                	mov    %eax,%edx
f012118f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0121195:	01 d0                	add    %edx,%eax
f0121197:	48                   	dec    %eax
f0121198:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012119e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01211a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01211a9:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01211af:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01211b5:	29 d0                	sub    %edx,%eax
f01211b7:	01 d8                	add    %ebx,%eax
f01211b9:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01211be:	39 c1                	cmp    %eax,%ecx
f01211c0:	74 17                	je     f01211d9 <test_kfree+0x102b>
f01211c2:	83 ec 04             	sub    $0x4,%esp
f01211c5:	68 40 b7 13 f0       	push   $0xf013b740
f01211ca:	68 80 05 00 00       	push   $0x580
f01211cf:	68 5a b6 13 f0       	push   $0xf013b65a
f01211d4:	e8 2c f0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211d9:	e8 ea 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01211de:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211e1:	74 17                	je     f01211fa <test_kfree+0x104c>
f01211e3:	83 ec 04             	sub    $0x4,%esp
f01211e6:	68 74 b6 13 f0       	push   $0xf013b674
f01211eb:	68 81 05 00 00       	push   $0x581
f01211f0:	68 5a b6 13 f0       	push   $0xf013b65a
f01211f5:	e8 0b f0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01211fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01211fd:	e8 a1 bc fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121202:	29 c3                	sub    %eax,%ebx
f0121204:	89 d8                	mov    %ebx,%eax
f0121206:	83 f8 05             	cmp    $0x5,%eax
f0121209:	74 17                	je     f0121222 <test_kfree+0x1074>
f012120b:	83 ec 04             	sub    $0x4,%esp
f012120e:	68 dc b6 13 f0       	push   $0xf013b6dc
f0121213:	68 82 05 00 00       	push   $0x582
f0121218:	68 5a b6 13 f0       	push   $0xf013b65a
f012121d:	e8 e3 ef fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0121222:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0121229:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012122c:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121232:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0121235:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012123c:	eb 0e                	jmp    f012124c <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f012123e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121241:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121244:	01 d0                	add    %edx,%eax
f0121246:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0121249:	ff 45 f4             	incl   -0xc(%ebp)
f012124c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0121252:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121255:	7f e7                	jg     f012123e <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121257:	e8 47 bc fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012125c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012125f:	e8 64 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121264:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0121267:	83 ec 0c             	sub    $0xc,%esp
f012126a:	68 00 00 10 00       	push   $0x100000
f012126f:	e8 18 69 fe ff       	call   f0107b8c <kmalloc>
f0121274:	83 c4 10             	add    $0x10,%esp
f0121277:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012127d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121283:	89 c1                	mov    %eax,%ecx
f0121285:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012128c:	10 00 00 
f012128f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0121295:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012129a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01212a0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01212a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01212ab:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01212b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01212b7:	29 d0                	sub    %edx,%eax
f01212b9:	89 c3                	mov    %eax,%ebx
f01212bb:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01212c2:	10 00 00 
f01212c5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01212ca:	0f b6 d0             	movzbl %al,%edx
f01212cd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01212d3:	01 d0                	add    %edx,%eax
f01212d5:	48                   	dec    %eax
f01212d6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01212dc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01212e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01212e7:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01212ed:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01212f3:	29 d0                	sub    %edx,%eax
f01212f5:	01 c3                	add    %eax,%ebx
f01212f7:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01212fe:	10 00 00 
f0121301:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121306:	0f b6 c0             	movzbl %al,%eax
f0121309:	c1 e0 04             	shl    $0x4,%eax
f012130c:	89 c2                	mov    %eax,%edx
f012130e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121314:	01 d0                	add    %edx,%eax
f0121316:	48                   	dec    %eax
f0121317:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012131d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121323:	ba 00 00 00 00       	mov    $0x0,%edx
f0121328:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012132e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121334:	29 d0                	sub    %edx,%eax
f0121336:	01 d8                	add    %ebx,%eax
f0121338:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012133d:	39 c1                	cmp    %eax,%ecx
f012133f:	74 17                	je     f0121358 <test_kfree+0x11aa>
f0121341:	83 ec 04             	sub    $0x4,%esp
f0121344:	68 40 b7 13 f0       	push   $0xf013b740
f0121349:	68 8e 05 00 00       	push   $0x58e
f012134e:	68 5a b6 13 f0       	push   $0xf013b65a
f0121353:	e8 ad ee fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121358:	e8 6b 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012135d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121360:	74 17                	je     f0121379 <test_kfree+0x11cb>
f0121362:	83 ec 04             	sub    $0x4,%esp
f0121365:	68 74 b6 13 f0       	push   $0xf013b674
f012136a:	68 8f 05 00 00       	push   $0x58f
f012136f:	68 5a b6 13 f0       	push   $0xf013b65a
f0121374:	e8 8c ee fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121379:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012137c:	e8 22 bb fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121381:	29 c3                	sub    %eax,%ebx
f0121383:	89 d8                	mov    %ebx,%eax
f0121385:	3d 00 01 00 00       	cmp    $0x100,%eax
f012138a:	74 17                	je     f01213a3 <test_kfree+0x11f5>
f012138c:	83 ec 04             	sub    $0x4,%esp
f012138f:	68 dc b6 13 f0       	push   $0xf013b6dc
f0121394:	68 90 05 00 00       	push   $0x590
f0121399:	68 5a b6 13 f0       	push   $0xf013b65a
f012139e:	e8 62 ee fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01213a3:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f01213aa:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01213ad:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01213b3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01213b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213bd:	eb 0e                	jmp    f01213cd <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f01213bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01213c2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213c5:	01 d0                	add    %edx,%eax
f01213c7:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01213ca:	ff 45 f4             	incl   -0xc(%ebp)
f01213cd:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01213d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213d6:	7f e7                	jg     f01213bf <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01213d8:	e8 ac 66 ff ff       	call   f0117a89 <isKHeapPlacementStrategyNEXTFIT>
f01213dd:	84 c0                	test   %al,%al
f01213df:	0f 84 ac 06 00 00    	je     f0121a91 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01213e5:	e8 b9 ba fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01213ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01213ed:	e8 d6 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01213f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01213f5:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01213fc:	10 00 00 
f01213ff:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121405:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012140a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0121410:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121416:	ba 00 00 00 00       	mov    $0x0,%edx
f012141b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0121421:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121427:	29 d0                	sub    %edx,%eax
f0121429:	89 c1                	mov    %eax,%ecx
f012142b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121432:	10 00 00 
f0121435:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012143a:	0f b6 d0             	movzbl %al,%edx
f012143d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121443:	01 d0                	add    %edx,%eax
f0121445:	48                   	dec    %eax
f0121446:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012144c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121452:	ba 00 00 00 00       	mov    $0x0,%edx
f0121457:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012145d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121463:	29 d0                	sub    %edx,%eax
f0121465:	01 c1                	add    %eax,%ecx
f0121467:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012146e:	10 00 00 
f0121471:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121476:	0f b6 c0             	movzbl %al,%eax
f0121479:	c1 e0 04             	shl    $0x4,%eax
f012147c:	89 c2                	mov    %eax,%edx
f012147e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0121484:	01 d0                	add    %edx,%eax
f0121486:	48                   	dec    %eax
f0121487:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012148d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0121493:	ba 00 00 00 00       	mov    $0x0,%edx
f0121498:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012149e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01214a4:	29 d0                	sub    %edx,%eax
f01214a6:	01 c8                	add    %ecx,%eax
f01214a8:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01214ad:	29 c2                	sub    %eax,%edx
f01214af:	89 d0                	mov    %edx,%eax
f01214b1:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01214b7:	83 ec 0c             	sub    $0xc,%esp
f01214ba:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f01214c0:	e8 c7 66 fe ff       	call   f0107b8c <kmalloc>
f01214c5:	83 c4 10             	add    $0x10,%esp
f01214c8:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01214ce:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01214d4:	89 c1                	mov    %eax,%ecx
f01214d6:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01214dd:	10 00 00 
f01214e0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01214e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01214eb:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01214f1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01214f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01214fc:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0121502:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0121508:	29 d0                	sub    %edx,%eax
f012150a:	89 c3                	mov    %eax,%ebx
f012150c:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0121513:	10 00 00 
f0121516:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012151b:	0f b6 d0             	movzbl %al,%edx
f012151e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0121524:	01 d0                	add    %edx,%eax
f0121526:	48                   	dec    %eax
f0121527:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012152d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121533:	ba 00 00 00 00       	mov    $0x0,%edx
f0121538:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012153e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121544:	29 d0                	sub    %edx,%eax
f0121546:	01 c3                	add    %eax,%ebx
f0121548:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012154f:	10 00 00 
f0121552:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121557:	0f b6 c0             	movzbl %al,%eax
f012155a:	c1 e0 04             	shl    $0x4,%eax
f012155d:	89 c2                	mov    %eax,%edx
f012155f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0121565:	01 d0                	add    %edx,%eax
f0121567:	48                   	dec    %eax
f0121568:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012156e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121574:	ba 00 00 00 00       	mov    $0x0,%edx
f0121579:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012157f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121585:	29 d0                	sub    %edx,%eax
f0121587:	01 d8                	add    %ebx,%eax
f0121589:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f012158e:	39 c1                	cmp    %eax,%ecx
f0121590:	74 17                	je     f01215a9 <test_kfree+0x13fb>
f0121592:	83 ec 04             	sub    $0x4,%esp
f0121595:	68 40 b7 13 f0       	push   $0xf013b740
f012159a:	68 9f 05 00 00       	push   $0x59f
f012159f:	68 5a b6 13 f0       	push   $0xf013b65a
f01215a4:	e8 5c ec fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215a9:	e8 1a 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01215ae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215b1:	74 17                	je     f01215ca <test_kfree+0x141c>
f01215b3:	83 ec 04             	sub    $0x4,%esp
f01215b6:	68 74 b6 13 f0       	push   $0xf013b674
f01215bb:	68 a0 05 00 00       	push   $0x5a0
f01215c0:	68 5a b6 13 f0       	push   $0xf013b65a
f01215c5:	e8 3b ec fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01215ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01215cd:	e8 d1 b8 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01215d2:	29 c3                	sub    %eax,%ebx
f01215d4:	89 da                	mov    %ebx,%edx
f01215d6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01215dc:	c1 e8 0c             	shr    $0xc,%eax
f01215df:	39 c2                	cmp    %eax,%edx
f01215e1:	74 17                	je     f01215fa <test_kfree+0x144c>
f01215e3:	83 ec 04             	sub    $0x4,%esp
f01215e6:	68 dc b6 13 f0       	push   $0xf013b6dc
f01215eb:	68 a1 05 00 00       	push   $0x5a1
f01215f0:	68 5a b6 13 f0       	push   $0xf013b65a
f01215f5:	e8 0b ec fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01215fa:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121600:	48                   	dec    %eax
f0121601:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0121607:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012160d:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121610:	e8 8e b8 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121615:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121618:	e8 ab 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012161d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121620:	83 ec 0c             	sub    $0xc,%esp
f0121623:	68 00 00 30 00       	push   $0x300000
f0121628:	e8 5f 65 fe ff       	call   f0107b8c <kmalloc>
f012162d:	83 c4 10             	add    $0x10,%esp
f0121630:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121636:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012163c:	89 c1                	mov    %eax,%ecx
f012163e:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121645:	10 00 00 
f0121648:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012164e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121653:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0121659:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012165f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121664:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012166a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121670:	29 d0                	sub    %edx,%eax
f0121672:	89 c3                	mov    %eax,%ebx
f0121674:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012167b:	10 00 00 
f012167e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121683:	0f b6 d0             	movzbl %al,%edx
f0121686:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012168c:	01 d0                	add    %edx,%eax
f012168e:	48                   	dec    %eax
f012168f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121695:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012169b:	ba 00 00 00 00       	mov    $0x0,%edx
f01216a0:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f01216a6:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01216ac:	29 d0                	sub    %edx,%eax
f01216ae:	01 c3                	add    %eax,%ebx
f01216b0:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01216b7:	10 00 00 
f01216ba:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01216bf:	0f b6 c0             	movzbl %al,%eax
f01216c2:	c1 e0 04             	shl    $0x4,%eax
f01216c5:	89 c2                	mov    %eax,%edx
f01216c7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01216cd:	01 d0                	add    %edx,%eax
f01216cf:	48                   	dec    %eax
f01216d0:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01216d6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01216dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01216e1:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01216e7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01216ed:	29 d0                	sub    %edx,%eax
f01216ef:	01 d8                	add    %ebx,%eax
f01216f1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01216f6:	39 c1                	cmp    %eax,%ecx
f01216f8:	74 17                	je     f0121711 <test_kfree+0x1563>
f01216fa:	83 ec 04             	sub    $0x4,%esp
f01216fd:	68 40 b7 13 f0       	push   $0xf013b740
f0121702:	68 ae 05 00 00       	push   $0x5ae
f0121707:	68 5a b6 13 f0       	push   $0xf013b65a
f012170c:	e8 f4 ea fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121711:	e8 b2 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121716:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121719:	74 17                	je     f0121732 <test_kfree+0x1584>
f012171b:	83 ec 04             	sub    $0x4,%esp
f012171e:	68 74 b6 13 f0       	push   $0xf013b674
f0121723:	68 af 05 00 00       	push   $0x5af
f0121728:	68 5a b6 13 f0       	push   $0xf013b65a
f012172d:	e8 d3 ea fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121732:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121735:	e8 69 b7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012173a:	29 c3                	sub    %eax,%ebx
f012173c:	89 d8                	mov    %ebx,%eax
f012173e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121743:	74 17                	je     f012175c <test_kfree+0x15ae>
f0121745:	83 ec 04             	sub    $0x4,%esp
f0121748:	68 dc b6 13 f0       	push   $0xf013b6dc
f012174d:	68 b0 05 00 00       	push   $0x5b0
f0121752:	68 5a b6 13 f0       	push   $0xf013b65a
f0121757:	e8 a9 ea fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f012175c:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121763:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121766:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012176c:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f012176f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121776:	eb 0e                	jmp    f0121786 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121778:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012177b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012177e:	01 d0                	add    %edx,%eax
f0121780:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121783:	ff 45 f4             	incl   -0xc(%ebp)
f0121786:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012178c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012178f:	7f e7                	jg     f0121778 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121791:	e8 0d b7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121796:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121799:	e8 2a 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012179e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f01217a1:	83 ec 0c             	sub    $0xc,%esp
f01217a4:	68 00 08 00 00       	push   $0x800
f01217a9:	e8 de 63 fe ff       	call   f0107b8c <kmalloc>
f01217ae:	83 c4 10             	add    $0x10,%esp
f01217b1:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217b7:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01217bd:	89 c1                	mov    %eax,%ecx
f01217bf:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01217c6:	10 00 00 
f01217c9:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01217cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01217d4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01217da:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01217e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01217e5:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01217eb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01217f1:	29 d0                	sub    %edx,%eax
f01217f3:	89 c3                	mov    %eax,%ebx
f01217f5:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01217fc:	10 00 00 
f01217ff:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121804:	0f b6 d0             	movzbl %al,%edx
f0121807:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012180d:	01 d0                	add    %edx,%eax
f012180f:	48                   	dec    %eax
f0121810:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121816:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012181c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121821:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121827:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012182d:	29 d0                	sub    %edx,%eax
f012182f:	01 c3                	add    %eax,%ebx
f0121831:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121838:	10 00 00 
f012183b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121840:	0f b6 c0             	movzbl %al,%eax
f0121843:	c1 e0 04             	shl    $0x4,%eax
f0121846:	89 c2                	mov    %eax,%edx
f0121848:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012184e:	01 d0                	add    %edx,%eax
f0121850:	48                   	dec    %eax
f0121851:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121857:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012185d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121862:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121868:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012186e:	29 d0                	sub    %edx,%eax
f0121870:	01 d8                	add    %ebx,%eax
f0121872:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121877:	39 c1                	cmp    %eax,%ecx
f0121879:	74 17                	je     f0121892 <test_kfree+0x16e4>
f012187b:	83 ec 04             	sub    $0x4,%esp
f012187e:	68 40 b7 13 f0       	push   $0xf013b740
f0121883:	68 bc 05 00 00       	push   $0x5bc
f0121888:	68 5a b6 13 f0       	push   $0xf013b65a
f012188d:	e8 73 e9 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121892:	e8 31 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121897:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012189a:	74 17                	je     f01218b3 <test_kfree+0x1705>
f012189c:	83 ec 04             	sub    $0x4,%esp
f012189f:	68 74 b6 13 f0       	push   $0xf013b674
f01218a4:	68 bd 05 00 00       	push   $0x5bd
f01218a9:	68 5a b6 13 f0       	push   $0xf013b65a
f01218ae:	e8 52 e9 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01218b3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01218b6:	e8 e8 b5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01218bb:	29 c3                	sub    %eax,%ebx
f01218bd:	89 d8                	mov    %ebx,%eax
f01218bf:	83 f8 01             	cmp    $0x1,%eax
f01218c2:	74 17                	je     f01218db <test_kfree+0x172d>
f01218c4:	83 ec 04             	sub    $0x4,%esp
f01218c7:	68 dc b6 13 f0       	push   $0xf013b6dc
f01218cc:	68 be 05 00 00       	push   $0x5be
f01218d1:	68 5a b6 13 f0       	push   $0xf013b65a
f01218d6:	e8 2a e9 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01218db:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01218e2:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01218e5:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01218eb:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01218ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01218f5:	eb 0e                	jmp    f0121905 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01218f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01218fa:	8b 45 80             	mov    -0x80(%ebp),%eax
f01218fd:	01 d0                	add    %edx,%eax
f01218ff:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0121902:	ff 45 f4             	incl   -0xc(%ebp)
f0121905:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012190b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012190e:	7f e7                	jg     f01218f7 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121910:	e8 8e b5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121915:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121918:	e8 ab 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012191d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121920:	83 ec 0c             	sub    $0xc,%esp
f0121923:	68 00 00 10 00       	push   $0x100000
f0121928:	e8 5f 62 fe ff       	call   f0107b8c <kmalloc>
f012192d:	83 c4 10             	add    $0x10,%esp
f0121930:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121936:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012193c:	89 c1                	mov    %eax,%ecx
f012193e:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121945:	10 00 00 
f0121948:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012194e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121953:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121959:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012195f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121964:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012196a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121970:	29 d0                	sub    %edx,%eax
f0121972:	89 c3                	mov    %eax,%ebx
f0121974:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012197b:	10 00 00 
f012197e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121983:	0f b6 d0             	movzbl %al,%edx
f0121986:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012198c:	01 d0                	add    %edx,%eax
f012198e:	48                   	dec    %eax
f012198f:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121995:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012199b:	ba 00 00 00 00       	mov    $0x0,%edx
f01219a0:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01219a6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01219ac:	29 d0                	sub    %edx,%eax
f01219ae:	01 c3                	add    %eax,%ebx
f01219b0:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01219b7:	10 00 00 
f01219ba:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01219bf:	0f b6 c0             	movzbl %al,%eax
f01219c2:	c1 e0 04             	shl    $0x4,%eax
f01219c5:	89 c2                	mov    %eax,%edx
f01219c7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01219cd:	01 d0                	add    %edx,%eax
f01219cf:	48                   	dec    %eax
f01219d0:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01219d6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01219dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01219e1:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01219e7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01219ed:	29 d0                	sub    %edx,%eax
f01219ef:	01 d8                	add    %ebx,%eax
f01219f1:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01219f6:	39 c1                	cmp    %eax,%ecx
f01219f8:	74 17                	je     f0121a11 <test_kfree+0x1863>
f01219fa:	83 ec 04             	sub    $0x4,%esp
f01219fd:	68 40 b7 13 f0       	push   $0xf013b740
f0121a02:	68 ca 05 00 00       	push   $0x5ca
f0121a07:	68 5a b6 13 f0       	push   $0xf013b65a
f0121a0c:	e8 f4 e7 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a11:	e8 b2 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a16:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a19:	74 17                	je     f0121a32 <test_kfree+0x1884>
f0121a1b:	83 ec 04             	sub    $0x4,%esp
f0121a1e:	68 74 b6 13 f0       	push   $0xf013b674
f0121a23:	68 cb 05 00 00       	push   $0x5cb
f0121a28:	68 5a b6 13 f0       	push   $0xf013b65a
f0121a2d:	e8 d3 e7 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a32:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a35:	e8 69 b4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121a3a:	29 c3                	sub    %eax,%ebx
f0121a3c:	89 d8                	mov    %ebx,%eax
f0121a3e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121a43:	74 17                	je     f0121a5c <test_kfree+0x18ae>
f0121a45:	83 ec 04             	sub    $0x4,%esp
f0121a48:	68 dc b6 13 f0       	push   $0xf013b6dc
f0121a4d:	68 cc 05 00 00       	push   $0x5cc
f0121a52:	68 5a b6 13 f0       	push   $0xf013b65a
f0121a57:	e8 a9 e7 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121a5c:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121a63:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121a66:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121a6c:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121a6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a76:	eb 0e                	jmp    f0121a86 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121a78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121a7b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121a7e:	01 d0                	add    %edx,%eax
f0121a80:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121a83:	ff 45 f4             	incl   -0xc(%ebp)
f0121a86:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121a8c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121a8f:	7f e7                	jg     f0121a78 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121a91:	83 ec 0c             	sub    $0xc,%esp
f0121a94:	68 7a be 13 f0       	push   $0xf013be7a
f0121a99:	e8 70 f2 fd ff       	call   f0100d0e <cprintf>
f0121a9e:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121aa1:	e8 fd b3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121aa6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121aa9:	e8 1a 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121aae:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121ab1:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121ab7:	83 ec 0c             	sub    $0xc,%esp
f0121aba:	50                   	push   %eax
f0121abb:	e8 97 61 fe ff       	call   f0107c57 <kfree>
f0121ac0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ac3:	e8 00 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ac8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121acb:	74 17                	je     f0121ae4 <test_kfree+0x1936>
f0121acd:	83 ec 04             	sub    $0x4,%esp
f0121ad0:	68 74 b6 13 f0       	push   $0xf013b674
f0121ad5:	68 dd 05 00 00       	push   $0x5dd
f0121ada:	68 5a b6 13 f0       	push   $0xf013b65a
f0121adf:	e8 21 e7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ae4:	e8 ba b3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121ae9:	89 c2                	mov    %eax,%edx
f0121aeb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121aee:	29 c2                	sub    %eax,%edx
f0121af0:	89 d0                	mov    %edx,%eax
f0121af2:	83 f8 02             	cmp    $0x2,%eax
f0121af5:	74 17                	je     f0121b0e <test_kfree+0x1960>
f0121af7:	83 ec 04             	sub    $0x4,%esp
f0121afa:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121aff:	68 de 05 00 00       	push   $0x5de
f0121b04:	68 5a b6 13 f0       	push   $0xf013b65a
f0121b09:	e8 f7 e6 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b0e:	e8 90 b3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121b13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b16:	e8 ad 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121b1e:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121b24:	83 ec 0c             	sub    $0xc,%esp
f0121b27:	50                   	push   %eax
f0121b28:	e8 2a 61 fe ff       	call   f0107c57 <kfree>
f0121b2d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b30:	e8 93 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b35:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b38:	74 17                	je     f0121b51 <test_kfree+0x19a3>
f0121b3a:	83 ec 04             	sub    $0x4,%esp
f0121b3d:	68 74 b6 13 f0       	push   $0xf013b674
f0121b42:	68 e4 05 00 00       	push   $0x5e4
f0121b47:	68 5a b6 13 f0       	push   $0xf013b65a
f0121b4c:	e8 b4 e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b51:	e8 4d b3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121b56:	89 c2                	mov    %eax,%edx
f0121b58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b5b:	29 c2                	sub    %eax,%edx
f0121b5d:	89 d0                	mov    %edx,%eax
f0121b5f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121b64:	74 17                	je     f0121b7d <test_kfree+0x19cf>
f0121b66:	83 ec 04             	sub    $0x4,%esp
f0121b69:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121b6e:	68 e5 05 00 00       	push   $0x5e5
f0121b73:	68 5a b6 13 f0       	push   $0xf013b65a
f0121b78:	e8 88 e6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121b7d:	e8 21 b3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121b82:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b85:	e8 3e 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b8a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121b8d:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121b93:	83 ec 0c             	sub    $0xc,%esp
f0121b96:	50                   	push   %eax
f0121b97:	e8 bb 60 fe ff       	call   f0107c57 <kfree>
f0121b9c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b9f:	e8 24 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ba4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ba7:	74 17                	je     f0121bc0 <test_kfree+0x1a12>
f0121ba9:	83 ec 04             	sub    $0x4,%esp
f0121bac:	68 74 b6 13 f0       	push   $0xf013b674
f0121bb1:	68 eb 05 00 00       	push   $0x5eb
f0121bb6:	68 5a b6 13 f0       	push   $0xf013b65a
f0121bbb:	e8 45 e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121bc0:	e8 de b2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121bc5:	89 c2                	mov    %eax,%edx
f0121bc7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121bca:	29 c2                	sub    %eax,%edx
f0121bcc:	89 d0                	mov    %edx,%eax
f0121bce:	83 f8 01             	cmp    $0x1,%eax
f0121bd1:	74 17                	je     f0121bea <test_kfree+0x1a3c>
f0121bd3:	83 ec 04             	sub    $0x4,%esp
f0121bd6:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121bdb:	68 ec 05 00 00       	push   $0x5ec
f0121be0:	68 5a b6 13 f0       	push   $0xf013b65a
f0121be5:	e8 1b e6 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121bea:	e8 b4 b2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121bef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121bf2:	e8 d1 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121bf7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121bfa:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121c00:	83 ec 0c             	sub    $0xc,%esp
f0121c03:	50                   	push   %eax
f0121c04:	e8 4e 60 fe ff       	call   f0107c57 <kfree>
f0121c09:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c0c:	e8 b7 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c11:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c14:	74 17                	je     f0121c2d <test_kfree+0x1a7f>
f0121c16:	83 ec 04             	sub    $0x4,%esp
f0121c19:	68 74 b6 13 f0       	push   $0xf013b674
f0121c1e:	68 f2 05 00 00       	push   $0x5f2
f0121c23:	68 5a b6 13 f0       	push   $0xf013b65a
f0121c28:	e8 d8 e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c2d:	e8 71 b2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121c32:	89 c2                	mov    %eax,%edx
f0121c34:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c37:	29 c2                	sub    %eax,%edx
f0121c39:	89 d0                	mov    %edx,%eax
f0121c3b:	83 f8 04             	cmp    $0x4,%eax
f0121c3e:	74 17                	je     f0121c57 <test_kfree+0x1aa9>
f0121c40:	83 ec 04             	sub    $0x4,%esp
f0121c43:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121c48:	68 f3 05 00 00       	push   $0x5f3
f0121c4d:	68 5a b6 13 f0       	push   $0xf013b65a
f0121c52:	e8 ae e5 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c57:	e8 47 b2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121c5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c5f:	e8 64 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c64:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121c67:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121c6d:	83 ec 0c             	sub    $0xc,%esp
f0121c70:	50                   	push   %eax
f0121c71:	e8 e1 5f fe ff       	call   f0107c57 <kfree>
f0121c76:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c79:	e8 4a 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c7e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c81:	74 17                	je     f0121c9a <test_kfree+0x1aec>
f0121c83:	83 ec 04             	sub    $0x4,%esp
f0121c86:	68 74 b6 13 f0       	push   $0xf013b674
f0121c8b:	68 f9 05 00 00       	push   $0x5f9
f0121c90:	68 5a b6 13 f0       	push   $0xf013b65a
f0121c95:	e8 6b e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c9a:	e8 04 b2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121c9f:	89 c2                	mov    %eax,%edx
f0121ca1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121ca4:	29 c2                	sub    %eax,%edx
f0121ca6:	89 d0                	mov    %edx,%eax
f0121ca8:	83 f8 05             	cmp    $0x5,%eax
f0121cab:	74 17                	je     f0121cc4 <test_kfree+0x1b16>
f0121cad:	83 ec 04             	sub    $0x4,%esp
f0121cb0:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121cb5:	68 fa 05 00 00       	push   $0x5fa
f0121cba:	68 5a b6 13 f0       	push   $0xf013b65a
f0121cbf:	e8 41 e5 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121cc4:	e8 da b1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121cc9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ccc:	e8 f7 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121cd1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121cd4:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121cda:	83 ec 0c             	sub    $0xc,%esp
f0121cdd:	50                   	push   %eax
f0121cde:	e8 74 5f fe ff       	call   f0107c57 <kfree>
f0121ce3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ce6:	e8 dd 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ceb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cee:	74 17                	je     f0121d07 <test_kfree+0x1b59>
f0121cf0:	83 ec 04             	sub    $0x4,%esp
f0121cf3:	68 74 b6 13 f0       	push   $0xf013b674
f0121cf8:	68 00 06 00 00       	push   $0x600
f0121cfd:	68 5a b6 13 f0       	push   $0xf013b65a
f0121d02:	e8 fe e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121d07:	e8 97 b1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121d0c:	89 c2                	mov    %eax,%edx
f0121d0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121d11:	29 c2                	sub    %eax,%edx
f0121d13:	89 d0                	mov    %edx,%eax
f0121d15:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121d1a:	74 17                	je     f0121d33 <test_kfree+0x1b85>
f0121d1c:	83 ec 04             	sub    $0x4,%esp
f0121d1f:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121d24:	68 01 06 00 00       	push   $0x601
f0121d29:	68 5a b6 13 f0       	push   $0xf013b65a
f0121d2e:	e8 d2 e4 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121d33:	e8 51 5d ff ff       	call   f0117a89 <isKHeapPlacementStrategyNEXTFIT>
f0121d38:	84 c0                	test   %al,%al
f0121d3a:	0f 84 80 02 00 00    	je     f0121fc0 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121d40:	e8 5e b1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121d45:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121d48:	e8 7b 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121d50:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121d56:	83 ec 0c             	sub    $0xc,%esp
f0121d59:	50                   	push   %eax
f0121d5a:	e8 f8 5e fe ff       	call   f0107c57 <kfree>
f0121d5f:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121d62:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121d69:	10 00 00 
f0121d6c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0121d72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121d77:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121d7d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121d83:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d88:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121d8e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121d94:	29 d0                	sub    %edx,%eax
f0121d96:	89 c1                	mov    %eax,%ecx
f0121d98:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121d9f:	10 00 00 
f0121da2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121da7:	0f b6 d0             	movzbl %al,%edx
f0121daa:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121db0:	01 d0                	add    %edx,%eax
f0121db2:	48                   	dec    %eax
f0121db3:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121db9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121dbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dc4:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121dca:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121dd0:	29 d0                	sub    %edx,%eax
f0121dd2:	01 c1                	add    %eax,%ecx
f0121dd4:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121ddb:	10 00 00 
f0121dde:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0121de3:	0f b6 c0             	movzbl %al,%eax
f0121de6:	c1 e0 04             	shl    $0x4,%eax
f0121de9:	89 c2                	mov    %eax,%edx
f0121deb:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121df1:	01 d0                	add    %edx,%eax
f0121df3:	48                   	dec    %eax
f0121df4:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121dfa:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121e00:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e05:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121e0b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121e11:	29 d0                	sub    %edx,%eax
f0121e13:	01 c8                	add    %ecx,%eax
f0121e15:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121e1a:	29 c2                	sub    %eax,%edx
f0121e1c:	89 d0                	mov    %edx,%eax
f0121e1e:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e24:	e8 9f 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e29:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e2c:	74 17                	je     f0121e45 <test_kfree+0x1c97>
f0121e2e:	83 ec 04             	sub    $0x4,%esp
f0121e31:	68 74 b6 13 f0       	push   $0xf013b674
f0121e36:	68 0b 06 00 00       	push   $0x60b
f0121e3b:	68 5a b6 13 f0       	push   $0xf013b65a
f0121e40:	e8 c0 e3 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e45:	e8 59 b0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121e4a:	89 c2                	mov    %eax,%edx
f0121e4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e4f:	29 c2                	sub    %eax,%edx
f0121e51:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121e57:	c1 e8 0c             	shr    $0xc,%eax
f0121e5a:	39 c2                	cmp    %eax,%edx
f0121e5c:	74 17                	je     f0121e75 <test_kfree+0x1cc7>
f0121e5e:	83 ec 04             	sub    $0x4,%esp
f0121e61:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121e66:	68 0c 06 00 00       	push   $0x60c
f0121e6b:	68 5a b6 13 f0       	push   $0xf013b65a
f0121e70:	e8 90 e3 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121e75:	e8 29 b0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121e7a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121e7d:	e8 46 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e82:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121e85:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121e8b:	83 ec 0c             	sub    $0xc,%esp
f0121e8e:	50                   	push   %eax
f0121e8f:	e8 c3 5d fe ff       	call   f0107c57 <kfree>
f0121e94:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e97:	e8 2c 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e9c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e9f:	74 17                	je     f0121eb8 <test_kfree+0x1d0a>
f0121ea1:	83 ec 04             	sub    $0x4,%esp
f0121ea4:	68 74 b6 13 f0       	push   $0xf013b674
f0121ea9:	68 12 06 00 00       	push   $0x612
f0121eae:	68 5a b6 13 f0       	push   $0xf013b65a
f0121eb3:	e8 4d e3 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121eb8:	e8 e6 af fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121ebd:	89 c2                	mov    %eax,%edx
f0121ebf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121ec2:	29 c2                	sub    %eax,%edx
f0121ec4:	89 d0                	mov    %edx,%eax
f0121ec6:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121ecb:	74 17                	je     f0121ee4 <test_kfree+0x1d36>
f0121ecd:	83 ec 04             	sub    $0x4,%esp
f0121ed0:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121ed5:	68 13 06 00 00       	push   $0x613
f0121eda:	68 5a b6 13 f0       	push   $0xf013b65a
f0121edf:	e8 21 e3 fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121ee4:	e8 ba af fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121ee9:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121eec:	e8 d7 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ef1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121ef4:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121efa:	83 ec 0c             	sub    $0xc,%esp
f0121efd:	50                   	push   %eax
f0121efe:	e8 54 5d fe ff       	call   f0107c57 <kfree>
f0121f03:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f06:	e8 bd 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f0b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f0e:	74 17                	je     f0121f27 <test_kfree+0x1d79>
f0121f10:	83 ec 04             	sub    $0x4,%esp
f0121f13:	68 74 b6 13 f0       	push   $0xf013b674
f0121f18:	68 19 06 00 00       	push   $0x619
f0121f1d:	68 5a b6 13 f0       	push   $0xf013b65a
f0121f22:	e8 de e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f27:	e8 77 af fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121f2c:	89 c2                	mov    %eax,%edx
f0121f2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f31:	29 c2                	sub    %eax,%edx
f0121f33:	89 d0                	mov    %edx,%eax
f0121f35:	83 f8 01             	cmp    $0x1,%eax
f0121f38:	74 17                	je     f0121f51 <test_kfree+0x1da3>
f0121f3a:	83 ec 04             	sub    $0x4,%esp
f0121f3d:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121f42:	68 1a 06 00 00       	push   $0x61a
f0121f47:	68 5a b6 13 f0       	push   $0xf013b65a
f0121f4c:	e8 b4 e2 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121f51:	e8 4d af fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121f56:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121f59:	e8 6a 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f5e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121f61:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121f67:	83 ec 0c             	sub    $0xc,%esp
f0121f6a:	50                   	push   %eax
f0121f6b:	e8 e7 5c fe ff       	call   f0107c57 <kfree>
f0121f70:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f73:	e8 50 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f78:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f7b:	74 17                	je     f0121f94 <test_kfree+0x1de6>
f0121f7d:	83 ec 04             	sub    $0x4,%esp
f0121f80:	68 74 b6 13 f0       	push   $0xf013b674
f0121f85:	68 20 06 00 00       	push   $0x620
f0121f8a:	68 5a b6 13 f0       	push   $0xf013b65a
f0121f8f:	e8 71 e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f94:	e8 0a af fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121f99:	89 c2                	mov    %eax,%edx
f0121f9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f9e:	29 c2                	sub    %eax,%edx
f0121fa0:	89 d0                	mov    %edx,%eax
f0121fa2:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121fa7:	74 17                	je     f0121fc0 <test_kfree+0x1e12>
f0121fa9:	83 ec 04             	sub    $0x4,%esp
f0121fac:	68 e4 bd 13 f0       	push   $0xf013bde4
f0121fb1:	68 21 06 00 00       	push   $0x621
f0121fb6:	68 5a b6 13 f0       	push   $0xf013b65a
f0121fbb:	e8 45 e2 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121fc0:	e8 de ae fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0121fc5:	89 c2                	mov    %eax,%edx
f0121fc7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121fca:	39 c2                	cmp    %eax,%edx
f0121fcc:	74 17                	je     f0121fe5 <test_kfree+0x1e37>
f0121fce:	83 ec 04             	sub    $0x4,%esp
f0121fd1:	68 84 be 13 f0       	push   $0xf013be84
f0121fd6:	68 24 06 00 00       	push   $0x624
f0121fdb:	68 5a b6 13 f0       	push   $0xf013b65a
f0121fe0:	e8 20 e2 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0121fe5:	83 ec 0c             	sub    $0xc,%esp
f0121fe8:	68 b8 be 13 f0       	push   $0xf013beb8
f0121fed:	e8 1c ed fd ff       	call   f0100d0e <cprintf>
f0121ff2:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121ff5:	83 ec 0c             	sub    $0xc,%esp
f0121ff8:	6a 03                	push   $0x3
f0121ffa:	e8 44 b3 fe ff       	call   f010d343 <sys_bypassPageFault>
f0121fff:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122002:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122009:	e9 82 00 00 00       	jmp    f0122090 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f012200e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122011:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0122018:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012201b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012201e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122021:	e8 0b b3 fe ff       	call   f010d331 <sys_rcr2>
f0122026:	89 c2                	mov    %eax,%edx
f0122028:	8b 45 80             	mov    -0x80(%ebp),%eax
f012202b:	39 c2                	cmp    %eax,%edx
f012202d:	74 17                	je     f0122046 <test_kfree+0x1e98>
f012202f:	83 ec 04             	sub    $0x4,%esp
f0122032:	68 c0 be 13 f0       	push   $0xf013bec0
f0122037:	68 33 06 00 00       	push   $0x633
f012203c:	68 5a b6 13 f0       	push   $0xf013b65a
f0122041:	e8 bf e1 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0122046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122049:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122050:	89 c2                	mov    %eax,%edx
f0122052:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122055:	01 d0                	add    %edx,%eax
f0122057:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012205a:	e8 d2 b2 fe ff       	call   f010d331 <sys_rcr2>
f012205f:	89 c2                	mov    %eax,%edx
f0122061:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122064:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012206b:	89 c1                	mov    %eax,%ecx
f012206d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122070:	01 c8                	add    %ecx,%eax
f0122072:	39 c2                	cmp    %eax,%edx
f0122074:	74 17                	je     f012208d <test_kfree+0x1edf>
f0122076:	83 ec 04             	sub    $0x4,%esp
f0122079:	68 c0 be 13 f0       	push   $0xf013bec0
f012207e:	68 35 06 00 00       	push   $0x635
f0122083:	68 5a b6 13 f0       	push   $0xf013b65a
f0122088:	e8 78 e1 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012208d:	ff 45 f4             	incl   -0xc(%ebp)
f0122090:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122094:	0f 8e 74 ff ff ff    	jle    f012200e <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012209a:	83 ec 0c             	sub    $0xc,%esp
f012209d:	6a 00                	push   $0x0
f012209f:	e8 9f b2 fe ff       	call   f010d343 <sys_bypassPageFault>
f01220a4:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01220a7:	83 ec 0c             	sub    $0xc,%esp
f01220aa:	68 05 bf 13 f0       	push   $0xf013bf05
f01220af:	e8 5a ec fd ff       	call   f0100d0e <cprintf>
f01220b4:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01220b7:	e8 e7 ad fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01220bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220bf:	e8 04 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01220c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01220c7:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01220cd:	83 ec 0c             	sub    $0xc,%esp
f01220d0:	50                   	push   %eax
f01220d1:	e8 81 5b fe ff       	call   f0107c57 <kfree>
f01220d6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220d9:	e8 ea 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01220de:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220e1:	74 17                	je     f01220fa <test_kfree+0x1f4c>
f01220e3:	83 ec 04             	sub    $0x4,%esp
f01220e6:	68 74 b6 13 f0       	push   $0xf013b674
f01220eb:	68 43 06 00 00       	push   $0x643
f01220f0:	68 5a b6 13 f0       	push   $0xf013b65a
f01220f5:	e8 0b e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01220fa:	e8 a4 ad fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01220ff:	89 c2                	mov    %eax,%edx
f0122101:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122104:	39 c2                	cmp    %eax,%edx
f0122106:	74 17                	je     f012211f <test_kfree+0x1f71>
f0122108:	83 ec 04             	sub    $0x4,%esp
f012210b:	68 0c bf 13 f0       	push   $0xf013bf0c
f0122110:	68 44 06 00 00       	push   $0x644
f0122115:	68 5a b6 13 f0       	push   $0xf013b65a
f012211a:	e8 e6 e0 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012211f:	e8 7f ad fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122124:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122127:	e8 9c 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012212c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012212f:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0122135:	83 ec 0c             	sub    $0xc,%esp
f0122138:	50                   	push   %eax
f0122139:	e8 19 5b fe ff       	call   f0107c57 <kfree>
f012213e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122141:	e8 82 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122146:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122149:	74 17                	je     f0122162 <test_kfree+0x1fb4>
f012214b:	83 ec 04             	sub    $0x4,%esp
f012214e:	68 74 b6 13 f0       	push   $0xf013b674
f0122153:	68 4a 06 00 00       	push   $0x64a
f0122158:	68 5a b6 13 f0       	push   $0xf013b65a
f012215d:	e8 a3 e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122162:	e8 3c ad fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122167:	89 c2                	mov    %eax,%edx
f0122169:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012216c:	39 c2                	cmp    %eax,%edx
f012216e:	74 17                	je     f0122187 <test_kfree+0x1fd9>
f0122170:	83 ec 04             	sub    $0x4,%esp
f0122173:	68 0c bf 13 f0       	push   $0xf013bf0c
f0122178:	68 4b 06 00 00       	push   $0x64b
f012217d:	68 5a b6 13 f0       	push   $0xf013b65a
f0122182:	e8 7e e0 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122187:	e8 17 ad fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012218c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012218f:	e8 34 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122194:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122197:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012219d:	83 ec 0c             	sub    $0xc,%esp
f01221a0:	50                   	push   %eax
f01221a1:	e8 b1 5a fe ff       	call   f0107c57 <kfree>
f01221a6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221a9:	e8 1a 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221ae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221b1:	74 17                	je     f01221ca <test_kfree+0x201c>
f01221b3:	83 ec 04             	sub    $0x4,%esp
f01221b6:	68 74 b6 13 f0       	push   $0xf013b674
f01221bb:	68 51 06 00 00       	push   $0x651
f01221c0:	68 5a b6 13 f0       	push   $0xf013b65a
f01221c5:	e8 3b e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01221ca:	e8 d4 ac fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01221cf:	89 c2                	mov    %eax,%edx
f01221d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01221d4:	39 c2                	cmp    %eax,%edx
f01221d6:	74 17                	je     f01221ef <test_kfree+0x2041>
f01221d8:	83 ec 04             	sub    $0x4,%esp
f01221db:	68 0c bf 13 f0       	push   $0xf013bf0c
f01221e0:	68 52 06 00 00       	push   $0x652
f01221e5:	68 5a b6 13 f0       	push   $0xf013b65a
f01221ea:	e8 16 e0 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01221ef:	e8 af ac fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01221f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221f7:	e8 cc 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01221ff:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0122205:	83 ec 0c             	sub    $0xc,%esp
f0122208:	50                   	push   %eax
f0122209:	e8 49 5a fe ff       	call   f0107c57 <kfree>
f012220e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122211:	e8 b2 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122216:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122219:	74 17                	je     f0122232 <test_kfree+0x2084>
f012221b:	83 ec 04             	sub    $0x4,%esp
f012221e:	68 74 b6 13 f0       	push   $0xf013b674
f0122223:	68 58 06 00 00       	push   $0x658
f0122228:	68 5a b6 13 f0       	push   $0xf013b65a
f012222d:	e8 d3 df fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122232:	e8 6c ac fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122237:	89 c2                	mov    %eax,%edx
f0122239:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012223c:	39 c2                	cmp    %eax,%edx
f012223e:	74 17                	je     f0122257 <test_kfree+0x20a9>
f0122240:	83 ec 04             	sub    $0x4,%esp
f0122243:	68 0c bf 13 f0       	push   $0xf013bf0c
f0122248:	68 59 06 00 00       	push   $0x659
f012224d:	68 5a b6 13 f0       	push   $0xf013b65a
f0122252:	e8 ae df fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0122257:	83 ec 0c             	sub    $0xc,%esp
f012225a:	68 53 bf 13 f0       	push   $0xf013bf53
f012225f:	e8 aa ea fd ff       	call   f0100d0e <cprintf>
f0122264:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122267:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012226e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122275:	eb 48                	jmp    f01222bf <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122277:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012227a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f012227f:	83 ec 04             	sub    $0x4,%esp
f0122282:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0122288:	51                   	push   %ecx
f0122289:	52                   	push   %edx
f012228a:	50                   	push   %eax
f012228b:	e8 21 48 fe ff       	call   f0106ab1 <get_page_table>
f0122290:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122293:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0122299:	85 c0                	test   %eax,%eax
f012229b:	75 17                	jne    f01222b4 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012229d:	83 ec 04             	sub    $0x4,%esp
f01222a0:	68 5c bf 13 f0       	push   $0xf013bf5c
f01222a5:	68 67 06 00 00       	push   $0x667
f01222aa:	68 5a b6 13 f0       	push   $0xf013b65a
f01222af:	e8 51 df fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01222b4:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01222bb:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01222bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01222c3:	78 b2                	js     f0122277 <test_kfree+0x20c9>
f01222c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01222c9:	7f 09                	jg     f01222d4 <test_kfree+0x2126>
f01222cb:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01222d2:	76 a3                	jbe    f0122277 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01222d4:	83 ec 0c             	sub    $0xc,%esp
f01222d7:	68 3e b8 13 f0       	push   $0xf013b83e
f01222dc:	e8 2d ea fd ff       	call   f0100d0e <cprintf>
f01222e1:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01222e4:	83 ec 0c             	sub    $0xc,%esp
f01222e7:	68 c4 bf 13 f0       	push   $0xf013bfc4
f01222ec:	e8 1d ea fd ff       	call   f0100d0e <cprintf>
f01222f1:	83 c4 10             	add    $0x10,%esp

	return 1;
f01222f4:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01222f9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01222fc:	5b                   	pop    %ebx
f01222fd:	5f                   	pop    %edi
f01222fe:	5d                   	pop    %ebp
f01222ff:	c3                   	ret    

f0122300 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0122300:	55                   	push   %ebp
f0122301:	89 e5                	mov    %esp,%ebp
f0122303:	57                   	push   %edi
f0122304:	53                   	push   %ebx
f0122305:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f012230b:	83 ec 0c             	sub    $0xc,%esp
f012230e:	68 9c b5 13 f0       	push   $0xf013b59c
f0122313:	e8 f6 e9 fd ff       	call   f0100d0e <cprintf>
f0122318:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012231b:	83 ec 0c             	sub    $0xc,%esp
f012231e:	68 cc b5 13 f0       	push   $0xf013b5cc
f0122323:	e8 e6 e9 fd ff       	call   f0100d0e <cprintf>
f0122328:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012232b:	83 ec 0c             	sub    $0xc,%esp
f012232e:	68 9c b5 13 f0       	push   $0xf013b59c
f0122333:	e8 d6 e9 fd ff       	call   f0100d0e <cprintf>
f0122338:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012233b:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012233f:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0122343:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0122349:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012234f:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122356:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012235d:	e8 41 ab fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122362:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122365:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f012236b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122370:	b8 00 00 00 00       	mov    $0x0,%eax
f0122375:	89 d7                	mov    %edx,%edi
f0122377:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122379:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012237f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122384:	b8 00 00 00 00       	mov    $0x0,%eax
f0122389:	89 d7                	mov    %edx,%edi
f012238b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012238d:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0122393:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122398:	b8 00 00 00 00       	mov    $0x0,%eax
f012239d:	89 d7                	mov    %edx,%edi
f012239f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01223a1:	e8 fd aa fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01223a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223a9:	e8 1a 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01223ae:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01223b1:	83 ec 0c             	sub    $0xc,%esp
f01223b4:	68 00 fc 1f 00       	push   $0x1ffc00
f01223b9:	e8 ce 57 fe ff       	call   f0107b8c <kmalloc>
f01223be:	83 c4 10             	add    $0x10,%esp
f01223c1:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01223c7:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01223cd:	89 c1                	mov    %eax,%ecx
f01223cf:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01223d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01223d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01223de:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01223e1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01223e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01223e9:	f7 75 c8             	divl   -0x38(%ebp)
f01223ec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01223ef:	29 d0                	sub    %edx,%eax
f01223f1:	89 c3                	mov    %eax,%ebx
f01223f3:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01223fa:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01223ff:	0f b6 d0             	movzbl %al,%edx
f0122402:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0122405:	01 d0                	add    %edx,%eax
f0122407:	48                   	dec    %eax
f0122408:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012240b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012240e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122413:	f7 75 c0             	divl   -0x40(%ebp)
f0122416:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122419:	29 d0                	sub    %edx,%eax
f012241b:	01 c3                	add    %eax,%ebx
f012241d:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0122424:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122429:	0f b6 c0             	movzbl %al,%eax
f012242c:	c1 e0 04             	shl    $0x4,%eax
f012242f:	89 c2                	mov    %eax,%edx
f0122431:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0122434:	01 d0                	add    %edx,%eax
f0122436:	48                   	dec    %eax
f0122437:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012243a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012243d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122442:	f7 75 b8             	divl   -0x48(%ebp)
f0122445:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122448:	29 d0                	sub    %edx,%eax
f012244a:	01 d8                	add    %ebx,%eax
f012244c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122451:	39 c1                	cmp    %eax,%ecx
f0122453:	74 17                	je     f012246c <test_kfree_bestfirstfit+0x16c>
f0122455:	83 ec 04             	sub    $0x4,%esp
f0122458:	68 40 b7 13 f0       	push   $0xf013b740
f012245d:	68 95 06 00 00       	push   $0x695
f0122462:	68 5a b6 13 f0       	push   $0xf013b65a
f0122467:	e8 99 dd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012246c:	e8 57 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122471:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122474:	74 17                	je     f012248d <test_kfree_bestfirstfit+0x18d>
f0122476:	83 ec 04             	sub    $0x4,%esp
f0122479:	68 74 b6 13 f0       	push   $0xf013b674
f012247e:	68 96 06 00 00       	push   $0x696
f0122483:	68 5a b6 13 f0       	push   $0xf013b65a
f0122488:	e8 78 dd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012248d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122490:	e8 0e aa fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122495:	29 c3                	sub    %eax,%ebx
f0122497:	89 d8                	mov    %ebx,%eax
f0122499:	3d 00 02 00 00       	cmp    $0x200,%eax
f012249e:	74 17                	je     f01224b7 <test_kfree_bestfirstfit+0x1b7>
f01224a0:	83 ec 04             	sub    $0x4,%esp
f01224a3:	68 dc b6 13 f0       	push   $0xf013b6dc
f01224a8:	68 97 06 00 00       	push   $0x697
f01224ad:	68 5a b6 13 f0       	push   $0xf013b65a
f01224b2:	e8 4e dd fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01224b7:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01224be:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01224c1:	e8 dd a9 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01224c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224c9:	e8 fa 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01224ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01224d1:	83 ec 0c             	sub    $0xc,%esp
f01224d4:	68 00 fc 1f 00       	push   $0x1ffc00
f01224d9:	e8 ae 56 fe ff       	call   f0107b8c <kmalloc>
f01224de:	83 c4 10             	add    $0x10,%esp
f01224e1:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01224e7:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01224ed:	89 c1                	mov    %eax,%ecx
f01224ef:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01224f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01224f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01224fe:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0122501:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122504:	ba 00 00 00 00       	mov    $0x0,%edx
f0122509:	f7 75 b0             	divl   -0x50(%ebp)
f012250c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012250f:	29 d0                	sub    %edx,%eax
f0122511:	89 c3                	mov    %eax,%ebx
f0122513:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012251a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012251f:	0f b6 d0             	movzbl %al,%edx
f0122522:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122525:	01 d0                	add    %edx,%eax
f0122527:	48                   	dec    %eax
f0122528:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012252b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012252e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122533:	f7 75 a8             	divl   -0x58(%ebp)
f0122536:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122539:	29 d0                	sub    %edx,%eax
f012253b:	01 c3                	add    %eax,%ebx
f012253d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122544:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122549:	0f b6 c0             	movzbl %al,%eax
f012254c:	c1 e0 04             	shl    $0x4,%eax
f012254f:	89 c2                	mov    %eax,%edx
f0122551:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122554:	01 d0                	add    %edx,%eax
f0122556:	48                   	dec    %eax
f0122557:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012255a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012255d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122562:	f7 75 a0             	divl   -0x60(%ebp)
f0122565:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122568:	29 d0                	sub    %edx,%eax
f012256a:	01 d8                	add    %ebx,%eax
f012256c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122571:	39 c1                	cmp    %eax,%ecx
f0122573:	74 17                	je     f012258c <test_kfree_bestfirstfit+0x28c>
f0122575:	83 ec 04             	sub    $0x4,%esp
f0122578:	68 40 b7 13 f0       	push   $0xf013b740
f012257d:	68 9e 06 00 00       	push   $0x69e
f0122582:	68 5a b6 13 f0       	push   $0xf013b65a
f0122587:	e8 79 dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012258c:	e8 37 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122591:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122594:	74 17                	je     f01225ad <test_kfree_bestfirstfit+0x2ad>
f0122596:	83 ec 04             	sub    $0x4,%esp
f0122599:	68 74 b6 13 f0       	push   $0xf013b674
f012259e:	68 9f 06 00 00       	push   $0x69f
f01225a3:	68 5a b6 13 f0       	push   $0xf013b65a
f01225a8:	e8 58 dc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01225ad:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01225b0:	e8 ee a8 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01225b5:	29 c3                	sub    %eax,%ebx
f01225b7:	89 d8                	mov    %ebx,%eax
f01225b9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01225be:	74 17                	je     f01225d7 <test_kfree_bestfirstfit+0x2d7>
f01225c0:	83 ec 04             	sub    $0x4,%esp
f01225c3:	68 dc b6 13 f0       	push   $0xf013b6dc
f01225c8:	68 a0 06 00 00       	push   $0x6a0
f01225cd:	68 5a b6 13 f0       	push   $0xf013b65a
f01225d2:	e8 2e dc fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01225d7:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01225de:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01225e1:	e8 bd a8 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01225e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225e9:	e8 da 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01225ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01225f1:	83 ec 0c             	sub    $0xc,%esp
f01225f4:	68 00 08 00 00       	push   $0x800
f01225f9:	e8 8e 55 fe ff       	call   f0107b8c <kmalloc>
f01225fe:	83 c4 10             	add    $0x10,%esp
f0122601:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122607:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012260d:	89 c1                	mov    %eax,%ecx
f012260f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122616:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122619:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012261e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122621:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122624:	ba 00 00 00 00       	mov    $0x0,%edx
f0122629:	f7 75 98             	divl   -0x68(%ebp)
f012262c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012262f:	29 d0                	sub    %edx,%eax
f0122631:	89 c3                	mov    %eax,%ebx
f0122633:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012263a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012263f:	0f b6 d0             	movzbl %al,%edx
f0122642:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122645:	01 d0                	add    %edx,%eax
f0122647:	48                   	dec    %eax
f0122648:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012264b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012264e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122653:	f7 75 90             	divl   -0x70(%ebp)
f0122656:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122659:	29 d0                	sub    %edx,%eax
f012265b:	01 c3                	add    %eax,%ebx
f012265d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122664:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122669:	0f b6 c0             	movzbl %al,%eax
f012266c:	c1 e0 04             	shl    $0x4,%eax
f012266f:	89 c2                	mov    %eax,%edx
f0122671:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122674:	01 d0                	add    %edx,%eax
f0122676:	48                   	dec    %eax
f0122677:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012267a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012267d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122682:	f7 75 88             	divl   -0x78(%ebp)
f0122685:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122688:	29 d0                	sub    %edx,%eax
f012268a:	01 d8                	add    %ebx,%eax
f012268c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122691:	39 c1                	cmp    %eax,%ecx
f0122693:	74 17                	je     f01226ac <test_kfree_bestfirstfit+0x3ac>
f0122695:	83 ec 04             	sub    $0x4,%esp
f0122698:	68 40 b7 13 f0       	push   $0xf013b740
f012269d:	68 a7 06 00 00       	push   $0x6a7
f01226a2:	68 5a b6 13 f0       	push   $0xf013b65a
f01226a7:	e8 59 db fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226ac:	e8 17 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01226b1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226b4:	74 17                	je     f01226cd <test_kfree_bestfirstfit+0x3cd>
f01226b6:	83 ec 04             	sub    $0x4,%esp
f01226b9:	68 74 b6 13 f0       	push   $0xf013b674
f01226be:	68 a8 06 00 00       	push   $0x6a8
f01226c3:	68 5a b6 13 f0       	push   $0xf013b65a
f01226c8:	e8 38 db fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226cd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226d0:	e8 ce a7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01226d5:	29 c3                	sub    %eax,%ebx
f01226d7:	89 d8                	mov    %ebx,%eax
f01226d9:	83 f8 01             	cmp    $0x1,%eax
f01226dc:	74 17                	je     f01226f5 <test_kfree_bestfirstfit+0x3f5>
f01226de:	83 ec 04             	sub    $0x4,%esp
f01226e1:	68 dc b6 13 f0       	push   $0xf013b6dc
f01226e6:	68 a9 06 00 00       	push   $0x6a9
f01226eb:	68 5a b6 13 f0       	push   $0xf013b65a
f01226f0:	e8 10 db fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01226f5:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01226fc:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01226ff:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122705:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122708:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012270f:	eb 0e                	jmp    f012271f <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0122711:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122714:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122717:	01 d0                	add    %edx,%eax
f0122719:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012271c:	ff 45 f4             	incl   -0xc(%ebp)
f012271f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122725:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122728:	7f e7                	jg     f0122711 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012272a:	e8 74 a7 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012272f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122732:	e8 91 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122737:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012273a:	83 ec 0c             	sub    $0xc,%esp
f012273d:	68 00 08 00 00       	push   $0x800
f0122742:	e8 45 54 fe ff       	call   f0107b8c <kmalloc>
f0122747:	83 c4 10             	add    $0x10,%esp
f012274a:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122750:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122756:	89 c1                	mov    %eax,%ecx
f0122758:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012275f:	10 00 00 
f0122762:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122768:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012276d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122773:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122779:	ba 00 00 00 00       	mov    $0x0,%edx
f012277e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122784:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012278a:	29 d0                	sub    %edx,%eax
f012278c:	89 c3                	mov    %eax,%ebx
f012278e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122795:	10 00 00 
f0122798:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012279d:	0f b6 d0             	movzbl %al,%edx
f01227a0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01227a6:	01 d0                	add    %edx,%eax
f01227a8:	48                   	dec    %eax
f01227a9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01227af:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01227b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01227ba:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01227c0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01227c6:	29 d0                	sub    %edx,%eax
f01227c8:	01 c3                	add    %eax,%ebx
f01227ca:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01227d1:	10 00 00 
f01227d4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01227d9:	0f b6 c0             	movzbl %al,%eax
f01227dc:	c1 e0 04             	shl    $0x4,%eax
f01227df:	89 c2                	mov    %eax,%edx
f01227e1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01227e7:	01 d0                	add    %edx,%eax
f01227e9:	48                   	dec    %eax
f01227ea:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01227f0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01227f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01227fb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0122801:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122807:	29 d0                	sub    %edx,%eax
f0122809:	01 d8                	add    %ebx,%eax
f012280b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122810:	39 c1                	cmp    %eax,%ecx
f0122812:	74 17                	je     f012282b <test_kfree_bestfirstfit+0x52b>
f0122814:	83 ec 04             	sub    $0x4,%esp
f0122817:	68 40 b7 13 f0       	push   $0xf013b740
f012281c:	68 b5 06 00 00       	push   $0x6b5
f0122821:	68 5a b6 13 f0       	push   $0xf013b65a
f0122826:	e8 da d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012282b:	e8 98 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122830:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122833:	74 17                	je     f012284c <test_kfree_bestfirstfit+0x54c>
f0122835:	83 ec 04             	sub    $0x4,%esp
f0122838:	68 74 b6 13 f0       	push   $0xf013b674
f012283d:	68 b6 06 00 00       	push   $0x6b6
f0122842:	68 5a b6 13 f0       	push   $0xf013b65a
f0122847:	e8 b9 d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012284c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012284f:	e8 4f a6 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122854:	29 c3                	sub    %eax,%ebx
f0122856:	89 d8                	mov    %ebx,%eax
f0122858:	83 f8 01             	cmp    $0x1,%eax
f012285b:	74 17                	je     f0122874 <test_kfree_bestfirstfit+0x574>
f012285d:	83 ec 04             	sub    $0x4,%esp
f0122860:	68 dc b6 13 f0       	push   $0xf013b6dc
f0122865:	68 b7 06 00 00       	push   $0x6b7
f012286a:	68 5a b6 13 f0       	push   $0xf013b65a
f012286f:	e8 91 d9 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122874:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f012287b:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012287e:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122884:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122887:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012288e:	eb 0e                	jmp    f012289e <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0122890:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122893:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122896:	01 d0                	add    %edx,%eax
f0122898:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012289b:	ff 45 f4             	incl   -0xc(%ebp)
f012289e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01228a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01228a7:	7f e7                	jg     f0122890 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01228a9:	e8 f5 a5 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01228ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228b1:	e8 12 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01228b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01228b9:	83 ec 0c             	sub    $0xc,%esp
f01228bc:	68 00 1c 00 00       	push   $0x1c00
f01228c1:	e8 c6 52 fe ff       	call   f0107b8c <kmalloc>
f01228c6:	83 c4 10             	add    $0x10,%esp
f01228c9:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01228cf:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01228d5:	89 c1                	mov    %eax,%ecx
f01228d7:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01228de:	10 00 00 
f01228e1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01228e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01228ec:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01228f2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01228f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01228fd:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122903:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122909:	29 d0                	sub    %edx,%eax
f012290b:	89 c3                	mov    %eax,%ebx
f012290d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122914:	10 00 00 
f0122917:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012291c:	0f b6 d0             	movzbl %al,%edx
f012291f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122925:	01 d0                	add    %edx,%eax
f0122927:	48                   	dec    %eax
f0122928:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012292e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122934:	ba 00 00 00 00       	mov    $0x0,%edx
f0122939:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012293f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122945:	29 d0                	sub    %edx,%eax
f0122947:	01 c3                	add    %eax,%ebx
f0122949:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122950:	10 00 00 
f0122953:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122958:	0f b6 c0             	movzbl %al,%eax
f012295b:	c1 e0 04             	shl    $0x4,%eax
f012295e:	89 c2                	mov    %eax,%edx
f0122960:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122966:	01 d0                	add    %edx,%eax
f0122968:	48                   	dec    %eax
f0122969:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012296f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122975:	ba 00 00 00 00       	mov    $0x0,%edx
f012297a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122980:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122986:	29 d0                	sub    %edx,%eax
f0122988:	01 d8                	add    %ebx,%eax
f012298a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012298f:	39 c1                	cmp    %eax,%ecx
f0122991:	74 17                	je     f01229aa <test_kfree_bestfirstfit+0x6aa>
f0122993:	83 ec 04             	sub    $0x4,%esp
f0122996:	68 40 b7 13 f0       	push   $0xf013b740
f012299b:	68 c3 06 00 00       	push   $0x6c3
f01229a0:	68 5a b6 13 f0       	push   $0xf013b65a
f01229a5:	e8 5b d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229aa:	e8 19 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01229af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229b2:	74 17                	je     f01229cb <test_kfree_bestfirstfit+0x6cb>
f01229b4:	83 ec 04             	sub    $0x4,%esp
f01229b7:	68 74 b6 13 f0       	push   $0xf013b674
f01229bc:	68 c4 06 00 00       	push   $0x6c4
f01229c1:	68 5a b6 13 f0       	push   $0xf013b65a
f01229c6:	e8 3a d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01229cb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01229ce:	e8 d0 a4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01229d3:	29 c3                	sub    %eax,%ebx
f01229d5:	89 d8                	mov    %ebx,%eax
f01229d7:	83 f8 02             	cmp    $0x2,%eax
f01229da:	74 17                	je     f01229f3 <test_kfree_bestfirstfit+0x6f3>
f01229dc:	83 ec 04             	sub    $0x4,%esp
f01229df:	68 dc b6 13 f0       	push   $0xf013b6dc
f01229e4:	68 c5 06 00 00       	push   $0x6c5
f01229e9:	68 5a b6 13 f0       	push   $0xf013b65a
f01229ee:	e8 12 d8 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01229f3:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01229fa:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01229fd:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122a03:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a0d:	eb 0e                	jmp    f0122a1d <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122a0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a12:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a15:	01 d0                	add    %edx,%eax
f0122a17:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122a1a:	ff 45 f4             	incl   -0xc(%ebp)
f0122a1d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122a23:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a26:	7f e7                	jg     f0122a0f <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a28:	e8 76 a4 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122a2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a30:	e8 93 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a35:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122a38:	83 ec 0c             	sub    $0xc,%esp
f0122a3b:	68 00 fc 2f 00       	push   $0x2ffc00
f0122a40:	e8 47 51 fe ff       	call   f0107b8c <kmalloc>
f0122a45:	83 c4 10             	add    $0x10,%esp
f0122a48:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a4e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122a54:	89 c1                	mov    %eax,%ecx
f0122a56:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122a5d:	10 00 00 
f0122a60:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122a66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a6b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122a71:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122a77:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a7c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122a82:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122a88:	29 d0                	sub    %edx,%eax
f0122a8a:	89 c3                	mov    %eax,%ebx
f0122a8c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122a93:	10 00 00 
f0122a96:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122a9b:	0f b6 d0             	movzbl %al,%edx
f0122a9e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122aa4:	01 d0                	add    %edx,%eax
f0122aa6:	48                   	dec    %eax
f0122aa7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122aad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122ab3:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ab8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122abe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122ac4:	29 d0                	sub    %edx,%eax
f0122ac6:	01 c3                	add    %eax,%ebx
f0122ac8:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122acf:	10 00 00 
f0122ad2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122ad7:	0f b6 c0             	movzbl %al,%eax
f0122ada:	c1 e0 04             	shl    $0x4,%eax
f0122add:	89 c2                	mov    %eax,%edx
f0122adf:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122ae5:	01 d0                	add    %edx,%eax
f0122ae7:	48                   	dec    %eax
f0122ae8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122aee:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122af4:	ba 00 00 00 00       	mov    $0x0,%edx
f0122af9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122aff:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122b05:	29 d0                	sub    %edx,%eax
f0122b07:	01 d8                	add    %ebx,%eax
f0122b09:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122b0e:	39 c1                	cmp    %eax,%ecx
f0122b10:	74 17                	je     f0122b29 <test_kfree_bestfirstfit+0x829>
f0122b12:	83 ec 04             	sub    $0x4,%esp
f0122b15:	68 40 b7 13 f0       	push   $0xf013b740
f0122b1a:	68 d1 06 00 00       	push   $0x6d1
f0122b1f:	68 5a b6 13 f0       	push   $0xf013b65a
f0122b24:	e8 dc d6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b29:	e8 9a 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b2e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b31:	74 17                	je     f0122b4a <test_kfree_bestfirstfit+0x84a>
f0122b33:	83 ec 04             	sub    $0x4,%esp
f0122b36:	68 74 b6 13 f0       	push   $0xf013b674
f0122b3b:	68 d2 06 00 00       	push   $0x6d2
f0122b40:	68 5a b6 13 f0       	push   $0xf013b65a
f0122b45:	e8 bb d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b4a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b4d:	e8 51 a3 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122b52:	29 c3                	sub    %eax,%ebx
f0122b54:	89 d8                	mov    %ebx,%eax
f0122b56:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122b5b:	74 17                	je     f0122b74 <test_kfree_bestfirstfit+0x874>
f0122b5d:	83 ec 04             	sub    $0x4,%esp
f0122b60:	68 dc b6 13 f0       	push   $0xf013b6dc
f0122b65:	68 d3 06 00 00       	push   $0x6d3
f0122b6a:	68 5a b6 13 f0       	push   $0xf013b65a
f0122b6f:	e8 91 d6 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122b74:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122b7b:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122b7e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122b84:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122b87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b8e:	eb 0e                	jmp    f0122b9e <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122b90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b93:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b96:	01 d0                	add    %edx,%eax
f0122b98:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122b9b:	ff 45 f4             	incl   -0xc(%ebp)
f0122b9e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122ba4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ba7:	7f e7                	jg     f0122b90 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ba9:	e8 f5 a2 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122bae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bb1:	e8 12 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122bb6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122bb9:	83 ec 0c             	sub    $0xc,%esp
f0122bbc:	68 00 fc 5f 00       	push   $0x5ffc00
f0122bc1:	e8 c6 4f fe ff       	call   f0107b8c <kmalloc>
f0122bc6:	83 c4 10             	add    $0x10,%esp
f0122bc9:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122bcf:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122bd5:	89 c1                	mov    %eax,%ecx
f0122bd7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122bde:	10 00 00 
f0122be1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122be7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122bec:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122bf2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122bf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bfd:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122c03:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122c09:	29 d0                	sub    %edx,%eax
f0122c0b:	89 c3                	mov    %eax,%ebx
f0122c0d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122c14:	10 00 00 
f0122c17:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122c1c:	0f b6 d0             	movzbl %al,%edx
f0122c1f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122c25:	01 d0                	add    %edx,%eax
f0122c27:	48                   	dec    %eax
f0122c28:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122c2e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122c34:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c39:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122c3f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122c45:	29 d0                	sub    %edx,%eax
f0122c47:	01 c3                	add    %eax,%ebx
f0122c49:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122c50:	10 00 00 
f0122c53:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122c58:	0f b6 c0             	movzbl %al,%eax
f0122c5b:	c1 e0 04             	shl    $0x4,%eax
f0122c5e:	89 c2                	mov    %eax,%edx
f0122c60:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122c66:	01 d0                	add    %edx,%eax
f0122c68:	48                   	dec    %eax
f0122c69:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122c6f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122c75:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c7a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122c80:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122c86:	29 d0                	sub    %edx,%eax
f0122c88:	01 d8                	add    %ebx,%eax
f0122c8a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122c8f:	39 c1                	cmp    %eax,%ecx
f0122c91:	74 17                	je     f0122caa <test_kfree_bestfirstfit+0x9aa>
f0122c93:	83 ec 04             	sub    $0x4,%esp
f0122c96:	68 40 b7 13 f0       	push   $0xf013b740
f0122c9b:	68 df 06 00 00       	push   $0x6df
f0122ca0:	68 5a b6 13 f0       	push   $0xf013b65a
f0122ca5:	e8 5b d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122caa:	e8 19 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122caf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122cb2:	74 17                	je     f0122ccb <test_kfree_bestfirstfit+0x9cb>
f0122cb4:	83 ec 04             	sub    $0x4,%esp
f0122cb7:	68 74 b6 13 f0       	push   $0xf013b674
f0122cbc:	68 e0 06 00 00       	push   $0x6e0
f0122cc1:	68 5a b6 13 f0       	push   $0xf013b65a
f0122cc6:	e8 3a d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ccb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122cce:	e8 d0 a1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122cd3:	29 c3                	sub    %eax,%ebx
f0122cd5:	89 d8                	mov    %ebx,%eax
f0122cd7:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122cdc:	74 17                	je     f0122cf5 <test_kfree_bestfirstfit+0x9f5>
f0122cde:	83 ec 04             	sub    $0x4,%esp
f0122ce1:	68 dc b6 13 f0       	push   $0xf013b6dc
f0122ce6:	68 e1 06 00 00       	push   $0x6e1
f0122ceb:	68 5a b6 13 f0       	push   $0xf013b65a
f0122cf0:	e8 10 d5 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122cf5:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122cfc:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cff:	e8 9f a1 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122d04:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d07:	e8 bc 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122d0c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0122d0f:	83 ec 0c             	sub    $0xc,%esp
f0122d12:	68 00 38 00 00       	push   $0x3800
f0122d17:	e8 70 4e fe ff       	call   f0107b8c <kmalloc>
f0122d1c:	83 c4 10             	add    $0x10,%esp
f0122d1f:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d25:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122d2b:	89 c1                	mov    %eax,%ecx
f0122d2d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122d34:	10 00 00 
f0122d37:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122d3d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d42:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122d48:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122d4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d53:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122d59:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122d5f:	29 d0                	sub    %edx,%eax
f0122d61:	89 c3                	mov    %eax,%ebx
f0122d63:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122d6a:	10 00 00 
f0122d6d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122d72:	0f b6 d0             	movzbl %al,%edx
f0122d75:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122d7b:	01 d0                	add    %edx,%eax
f0122d7d:	48                   	dec    %eax
f0122d7e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122d84:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122d8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d8f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122d95:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122d9b:	29 d0                	sub    %edx,%eax
f0122d9d:	01 c3                	add    %eax,%ebx
f0122d9f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122da6:	10 00 00 
f0122da9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0122dae:	0f b6 c0             	movzbl %al,%eax
f0122db1:	c1 e0 04             	shl    $0x4,%eax
f0122db4:	89 c2                	mov    %eax,%edx
f0122db6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122dbc:	01 d0                	add    %edx,%eax
f0122dbe:	48                   	dec    %eax
f0122dbf:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122dc5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122dcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dd0:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122dd6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122ddc:	29 d0                	sub    %edx,%eax
f0122dde:	01 d8                	add    %ebx,%eax
f0122de0:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122de5:	39 c1                	cmp    %eax,%ecx
f0122de7:	74 17                	je     f0122e00 <test_kfree_bestfirstfit+0xb00>
f0122de9:	83 ec 04             	sub    $0x4,%esp
f0122dec:	68 40 b7 13 f0       	push   $0xf013b740
f0122df1:	68 e8 06 00 00       	push   $0x6e8
f0122df6:	68 5a b6 13 f0       	push   $0xf013b65a
f0122dfb:	e8 05 d4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e00:	e8 c3 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e05:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e08:	74 17                	je     f0122e21 <test_kfree_bestfirstfit+0xb21>
f0122e0a:	83 ec 04             	sub    $0x4,%esp
f0122e0d:	68 74 b6 13 f0       	push   $0xf013b674
f0122e12:	68 e9 06 00 00       	push   $0x6e9
f0122e17:	68 5a b6 13 f0       	push   $0xf013b65a
f0122e1c:	e8 e4 d3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e21:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122e24:	e8 7a a0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122e29:	29 c3                	sub    %eax,%ebx
f0122e2b:	89 d8                	mov    %ebx,%eax
f0122e2d:	83 f8 04             	cmp    $0x4,%eax
f0122e30:	74 17                	je     f0122e49 <test_kfree_bestfirstfit+0xb49>
f0122e32:	83 ec 04             	sub    $0x4,%esp
f0122e35:	68 dc b6 13 f0       	push   $0xf013b6dc
f0122e3a:	68 ea 06 00 00       	push   $0x6ea
f0122e3f:	68 5a b6 13 f0       	push   $0xf013b65a
f0122e44:	e8 bc d3 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122e49:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122e50:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122e53:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122e59:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122e5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e63:	eb 0e                	jmp    f0122e73 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122e65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e68:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e6b:	01 d0                	add    %edx,%eax
f0122e6d:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122e70:	ff 45 f4             	incl   -0xc(%ebp)
f0122e73:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122e79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e7c:	7f e7                	jg     f0122e65 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122e7e:	e8 20 a0 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122e83:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122e89:	e8 3a 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e8e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122e94:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122e9a:	83 ec 0c             	sub    $0xc,%esp
f0122e9d:	50                   	push   %eax
f0122e9e:	e8 b4 4d fe ff       	call   f0107c57 <kfree>
f0122ea3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ea6:	e8 1d 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122eab:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122eb1:	74 17                	je     f0122eca <test_kfree_bestfirstfit+0xbca>
f0122eb3:	83 ec 04             	sub    $0x4,%esp
f0122eb6:	68 74 b6 13 f0       	push   $0xf013b674
f0122ebb:	68 f9 06 00 00       	push   $0x6f9
f0122ec0:	68 5a b6 13 f0       	push   $0xf013b65a
f0122ec5:	e8 3b d3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122eca:	e8 d4 9f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122ecf:	89 c2                	mov    %eax,%edx
f0122ed1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122ed7:	29 c2                	sub    %eax,%edx
f0122ed9:	89 d0                	mov    %edx,%eax
f0122edb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122ee0:	74 17                	je     f0122ef9 <test_kfree_bestfirstfit+0xbf9>
f0122ee2:	83 ec 04             	sub    $0x4,%esp
f0122ee5:	68 e4 bd 13 f0       	push   $0xf013bde4
f0122eea:	68 fa 06 00 00       	push   $0x6fa
f0122eef:	68 5a b6 13 f0       	push   $0xf013b65a
f0122ef4:	e8 0c d3 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122ef9:	e8 a5 9f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122efe:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f04:	e8 bf 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f09:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0122f0f:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122f15:	83 ec 0c             	sub    $0xc,%esp
f0122f18:	50                   	push   %eax
f0122f19:	e8 39 4d fe ff       	call   f0107c57 <kfree>
f0122f1e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f21:	e8 a2 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f26:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122f2c:	74 17                	je     f0122f45 <test_kfree_bestfirstfit+0xc45>
f0122f2e:	83 ec 04             	sub    $0x4,%esp
f0122f31:	68 74 b6 13 f0       	push   $0xf013b674
f0122f36:	68 00 07 00 00       	push   $0x700
f0122f3b:	68 5a b6 13 f0       	push   $0xf013b65a
f0122f40:	e8 c0 d2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f45:	e8 59 9f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122f4a:	89 c2                	mov    %eax,%edx
f0122f4c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122f52:	29 c2                	sub    %eax,%edx
f0122f54:	89 d0                	mov    %edx,%eax
f0122f56:	83 f8 01             	cmp    $0x1,%eax
f0122f59:	74 17                	je     f0122f72 <test_kfree_bestfirstfit+0xc72>
f0122f5b:	83 ec 04             	sub    $0x4,%esp
f0122f5e:	68 e4 bd 13 f0       	push   $0xf013bde4
f0122f63:	68 01 07 00 00       	push   $0x701
f0122f68:	68 5a b6 13 f0       	push   $0xf013b65a
f0122f6d:	e8 93 d2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f72:	e8 2c 9f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122f77:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f7d:	e8 46 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f82:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122f88:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122f8e:	83 ec 0c             	sub    $0xc,%esp
f0122f91:	50                   	push   %eax
f0122f92:	e8 c0 4c fe ff       	call   f0107c57 <kfree>
f0122f97:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f9a:	e8 29 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f9f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122fa5:	74 17                	je     f0122fbe <test_kfree_bestfirstfit+0xcbe>
f0122fa7:	83 ec 04             	sub    $0x4,%esp
f0122faa:	68 74 b6 13 f0       	push   $0xf013b674
f0122faf:	68 07 07 00 00       	push   $0x707
f0122fb4:	68 5a b6 13 f0       	push   $0xf013b65a
f0122fb9:	e8 47 d2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122fbe:	e8 e0 9e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122fc3:	89 c2                	mov    %eax,%edx
f0122fc5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122fcb:	29 c2                	sub    %eax,%edx
f0122fcd:	89 d0                	mov    %edx,%eax
f0122fcf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122fd4:	74 17                	je     f0122fed <test_kfree_bestfirstfit+0xced>
f0122fd6:	83 ec 04             	sub    $0x4,%esp
f0122fd9:	68 e4 bd 13 f0       	push   $0xf013bde4
f0122fde:	68 08 07 00 00       	push   $0x708
f0122fe3:	68 5a b6 13 f0       	push   $0xf013b65a
f0122fe8:	e8 18 d2 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122fed:	e8 b1 9e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0122ff2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ff8:	e8 cb 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ffd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0123003:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0123009:	83 ec 0c             	sub    $0xc,%esp
f012300c:	50                   	push   %eax
f012300d:	e8 45 4c fe ff       	call   f0107c57 <kfree>
f0123012:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123015:	e8 ae 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012301a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123020:	74 17                	je     f0123039 <test_kfree_bestfirstfit+0xd39>
f0123022:	83 ec 04             	sub    $0x4,%esp
f0123025:	68 74 b6 13 f0       	push   $0xf013b674
f012302a:	68 0e 07 00 00       	push   $0x70e
f012302f:	68 5a b6 13 f0       	push   $0xf013b65a
f0123034:	e8 cc d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123039:	e8 65 9e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012303e:	89 c2                	mov    %eax,%edx
f0123040:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123046:	29 c2                	sub    %eax,%edx
f0123048:	89 d0                	mov    %edx,%eax
f012304a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012304f:	74 17                	je     f0123068 <test_kfree_bestfirstfit+0xd68>
f0123051:	83 ec 04             	sub    $0x4,%esp
f0123054:	68 e4 bd 13 f0       	push   $0xf013bde4
f0123059:	68 0f 07 00 00       	push   $0x70f
f012305e:	68 5a b6 13 f0       	push   $0xf013b65a
f0123063:	e8 9d d1 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0123068:	83 ec 0c             	sub    $0xc,%esp
f012306b:	68 1c be 13 f0       	push   $0xf013be1c
f0123070:	e8 99 dc fd ff       	call   f0100d0e <cprintf>
f0123075:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0123078:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012307e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0123081:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123088:	eb 1e                	jmp    f01230a8 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f012308a:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0123090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123093:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123096:	01 c8                	add    %ecx,%eax
f0123098:	8a 00                	mov    (%eax),%al
f012309a:	0f be c0             	movsbl %al,%eax
f012309d:	01 d0                	add    %edx,%eax
f012309f:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01230a5:	ff 45 f4             	incl   -0xc(%ebp)
f01230a8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01230ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01230b1:	7f d7                	jg     f012308a <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01230b3:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01230b9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01230bf:	89 c1                	mov    %eax,%ecx
f01230c1:	01 c9                	add    %ecx,%ecx
f01230c3:	01 c8                	add    %ecx,%eax
f01230c5:	39 c2                	cmp    %eax,%edx
f01230c7:	74 17                	je     f01230e0 <test_kfree_bestfirstfit+0xde0>
f01230c9:	83 ec 04             	sub    $0x4,%esp
f01230cc:	68 40 be 13 f0       	push   $0xf013be40
f01230d1:	68 1c 07 00 00       	push   $0x71c
f01230d6:	68 5a b6 13 f0       	push   $0xf013b65a
f01230db:	e8 25 d1 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01230e0:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01230e6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01230e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01230f0:	eb 1e                	jmp    f0123110 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f01230f2:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01230f8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01230fb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01230fe:	01 c8                	add    %ecx,%eax
f0123100:	8a 00                	mov    (%eax),%al
f0123102:	0f be c0             	movsbl %al,%eax
f0123105:	01 d0                	add    %edx,%eax
f0123107:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012310d:	ff 45 f4             	incl   -0xc(%ebp)
f0123110:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0123116:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123119:	7f d7                	jg     f01230f2 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012311b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123121:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0123127:	c1 e2 02             	shl    $0x2,%edx
f012312a:	39 d0                	cmp    %edx,%eax
f012312c:	74 17                	je     f0123145 <test_kfree_bestfirstfit+0xe45>
f012312e:	83 ec 04             	sub    $0x4,%esp
f0123131:	68 40 be 13 f0       	push   $0xf013be40
f0123136:	68 24 07 00 00       	push   $0x724
f012313b:	68 5a b6 13 f0       	push   $0xf013b65a
f0123140:	e8 c0 d0 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0123145:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012314b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012314e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123155:	eb 1e                	jmp    f0123175 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0123157:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f012315d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123160:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123163:	01 c8                	add    %ecx,%eax
f0123165:	8a 00                	mov    (%eax),%al
f0123167:	0f be c0             	movsbl %al,%eax
f012316a:	01 d0                	add    %edx,%eax
f012316c:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0123172:	ff 45 f4             	incl   -0xc(%ebp)
f0123175:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012317b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012317e:	7f d7                	jg     f0123157 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0123180:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0123186:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012318c:	89 d0                	mov    %edx,%eax
f012318e:	c1 e0 02             	shl    $0x2,%eax
f0123191:	01 d0                	add    %edx,%eax
f0123193:	39 c1                	cmp    %eax,%ecx
f0123195:	74 17                	je     f01231ae <test_kfree_bestfirstfit+0xeae>
f0123197:	83 ec 04             	sub    $0x4,%esp
f012319a:	68 40 be 13 f0       	push   $0xf013be40
f012319f:	68 2c 07 00 00       	push   $0x72c
f01231a4:	68 5a b6 13 f0       	push   $0xf013b65a
f01231a9:	e8 57 d0 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01231ae:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01231b4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01231b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01231be:	eb 1e                	jmp    f01231de <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f01231c0:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01231c6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01231c9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01231cc:	01 c8                	add    %ecx,%eax
f01231ce:	8a 00                	mov    (%eax),%al
f01231d0:	0f be c0             	movsbl %al,%eax
f01231d3:	01 d0                	add    %edx,%eax
f01231d5:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01231db:	ff 45 f4             	incl   -0xc(%ebp)
f01231de:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01231e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01231e7:	7f d7                	jg     f01231c0 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01231e9:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01231ef:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01231f5:	89 d0                	mov    %edx,%eax
f01231f7:	01 c0                	add    %eax,%eax
f01231f9:	01 d0                	add    %edx,%eax
f01231fb:	01 c0                	add    %eax,%eax
f01231fd:	01 d0                	add    %edx,%eax
f01231ff:	39 c1                	cmp    %eax,%ecx
f0123201:	74 17                	je     f012321a <test_kfree_bestfirstfit+0xf1a>
f0123203:	83 ec 04             	sub    $0x4,%esp
f0123206:	68 40 be 13 f0       	push   $0xf013be40
f012320b:	68 34 07 00 00       	push   $0x734
f0123210:	68 5a b6 13 f0       	push   $0xf013b65a
f0123215:	e8 eb cf fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f012321a:	83 ec 0c             	sub    $0xc,%esp
f012321d:	68 73 be 13 f0       	push   $0xf013be73
f0123222:	e8 e7 da fd ff       	call   f0100d0e <cprintf>
f0123227:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012322a:	e8 74 9c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012322f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123232:	e8 91 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123237:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f012323a:	83 ec 0c             	sub    $0xc,%esp
f012323d:	68 00 00 30 00       	push   $0x300000
f0123242:	e8 45 49 fe ff       	call   f0107b8c <kmalloc>
f0123247:	83 c4 10             	add    $0x10,%esp
f012324a:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123250:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123256:	89 c1                	mov    %eax,%ecx
f0123258:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012325f:	10 00 00 
f0123262:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123268:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012326d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0123273:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123279:	ba 00 00 00 00       	mov    $0x0,%edx
f012327e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0123284:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012328a:	29 d0                	sub    %edx,%eax
f012328c:	89 c3                	mov    %eax,%ebx
f012328e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0123295:	10 00 00 
f0123298:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012329d:	0f b6 d0             	movzbl %al,%edx
f01232a0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01232a6:	01 d0                	add    %edx,%eax
f01232a8:	48                   	dec    %eax
f01232a9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01232af:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01232b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01232ba:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01232c0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01232c6:	29 d0                	sub    %edx,%eax
f01232c8:	01 c3                	add    %eax,%ebx
f01232ca:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01232d1:	10 00 00 
f01232d4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01232d9:	0f b6 c0             	movzbl %al,%eax
f01232dc:	c1 e0 04             	shl    $0x4,%eax
f01232df:	89 c2                	mov    %eax,%edx
f01232e1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01232e7:	01 d0                	add    %edx,%eax
f01232e9:	48                   	dec    %eax
f01232ea:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01232f0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01232f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01232fb:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0123301:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123307:	29 d0                	sub    %edx,%eax
f0123309:	01 d8                	add    %ebx,%eax
f012330b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123310:	39 c1                	cmp    %eax,%ecx
f0123312:	74 17                	je     f012332b <test_kfree_bestfirstfit+0x102b>
f0123314:	83 ec 04             	sub    $0x4,%esp
f0123317:	68 40 b7 13 f0       	push   $0xf013b740
f012331c:	68 3f 07 00 00       	push   $0x73f
f0123321:	68 5a b6 13 f0       	push   $0xf013b65a
f0123326:	e8 da ce fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012332b:	e8 98 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123330:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123333:	74 17                	je     f012334c <test_kfree_bestfirstfit+0x104c>
f0123335:	83 ec 04             	sub    $0x4,%esp
f0123338:	68 74 b6 13 f0       	push   $0xf013b674
f012333d:	68 40 07 00 00       	push   $0x740
f0123342:	68 5a b6 13 f0       	push   $0xf013b65a
f0123347:	e8 b9 ce fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012334c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012334f:	e8 4f 9b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123354:	29 c3                	sub    %eax,%ebx
f0123356:	89 d8                	mov    %ebx,%eax
f0123358:	3d 00 03 00 00       	cmp    $0x300,%eax
f012335d:	74 17                	je     f0123376 <test_kfree_bestfirstfit+0x1076>
f012335f:	83 ec 04             	sub    $0x4,%esp
f0123362:	68 dc b6 13 f0       	push   $0xf013b6dc
f0123367:	68 41 07 00 00       	push   $0x741
f012336c:	68 5a b6 13 f0       	push   $0xf013b65a
f0123371:	e8 8f ce fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0123376:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f012337d:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0123380:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123386:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0123389:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123390:	eb 0e                	jmp    f01233a0 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0123392:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123395:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123398:	01 d0                	add    %edx,%eax
f012339a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012339d:	ff 45 f4             	incl   -0xc(%ebp)
f01233a0:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01233a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01233a9:	7f e7                	jg     f0123392 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01233ab:	e8 f3 9a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01233b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233b3:	e8 10 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01233b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01233bb:	83 ec 0c             	sub    $0xc,%esp
f01233be:	68 00 08 00 00       	push   $0x800
f01233c3:	e8 c4 47 fe ff       	call   f0107b8c <kmalloc>
f01233c8:	83 c4 10             	add    $0x10,%esp
f01233cb:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01233d1:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01233d7:	89 c1                	mov    %eax,%ecx
f01233d9:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01233e0:	10 00 00 
f01233e3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01233e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01233ee:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01233f4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01233fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01233ff:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0123405:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012340b:	29 d0                	sub    %edx,%eax
f012340d:	89 c3                	mov    %eax,%ebx
f012340f:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0123416:	10 00 00 
f0123419:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012341e:	0f b6 d0             	movzbl %al,%edx
f0123421:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123427:	01 d0                	add    %edx,%eax
f0123429:	48                   	dec    %eax
f012342a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0123430:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123436:	ba 00 00 00 00       	mov    $0x0,%edx
f012343b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0123441:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123447:	29 d0                	sub    %edx,%eax
f0123449:	01 c3                	add    %eax,%ebx
f012344b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123452:	10 00 00 
f0123455:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012345a:	0f b6 c0             	movzbl %al,%eax
f012345d:	c1 e0 04             	shl    $0x4,%eax
f0123460:	89 c2                	mov    %eax,%edx
f0123462:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123468:	01 d0                	add    %edx,%eax
f012346a:	48                   	dec    %eax
f012346b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123471:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123477:	ba 00 00 00 00       	mov    $0x0,%edx
f012347c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123482:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123488:	29 d0                	sub    %edx,%eax
f012348a:	01 d8                	add    %ebx,%eax
f012348c:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0123491:	39 c1                	cmp    %eax,%ecx
f0123493:	74 17                	je     f01234ac <test_kfree_bestfirstfit+0x11ac>
f0123495:	83 ec 04             	sub    $0x4,%esp
f0123498:	68 40 b7 13 f0       	push   $0xf013b740
f012349d:	68 4d 07 00 00       	push   $0x74d
f01234a2:	68 5a b6 13 f0       	push   $0xf013b65a
f01234a7:	e8 59 cd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234ac:	e8 17 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234b1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01234b4:	74 17                	je     f01234cd <test_kfree_bestfirstfit+0x11cd>
f01234b6:	83 ec 04             	sub    $0x4,%esp
f01234b9:	68 74 b6 13 f0       	push   $0xf013b674
f01234be:	68 4e 07 00 00       	push   $0x74e
f01234c3:	68 5a b6 13 f0       	push   $0xf013b65a
f01234c8:	e8 38 cd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01234cd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01234d0:	e8 ce 99 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01234d5:	29 c3                	sub    %eax,%ebx
f01234d7:	89 d8                	mov    %ebx,%eax
f01234d9:	83 f8 01             	cmp    $0x1,%eax
f01234dc:	74 17                	je     f01234f5 <test_kfree_bestfirstfit+0x11f5>
f01234de:	83 ec 04             	sub    $0x4,%esp
f01234e1:	68 dc b6 13 f0       	push   $0xf013b6dc
f01234e6:	68 4f 07 00 00       	push   $0x74f
f01234eb:	68 5a b6 13 f0       	push   $0xf013b65a
f01234f0:	e8 10 cd fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01234f5:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01234fc:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01234ff:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123505:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0123508:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012350f:	eb 0e                	jmp    f012351f <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0123511:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123514:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123517:	01 d0                	add    %edx,%eax
f0123519:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012351c:	ff 45 f4             	incl   -0xc(%ebp)
f012351f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123525:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123528:	7f e7                	jg     f0123511 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012352a:	e8 74 99 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012352f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123532:	e8 91 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123537:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f012353a:	83 ec 0c             	sub    $0xc,%esp
f012353d:	68 00 00 10 00       	push   $0x100000
f0123542:	e8 45 46 fe ff       	call   f0107b8c <kmalloc>
f0123547:	83 c4 10             	add    $0x10,%esp
f012354a:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123550:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123556:	89 c1                	mov    %eax,%ecx
f0123558:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012355f:	10 00 00 
f0123562:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123568:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012356d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123573:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123579:	ba 00 00 00 00       	mov    $0x0,%edx
f012357e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123584:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012358a:	29 d0                	sub    %edx,%eax
f012358c:	89 c3                	mov    %eax,%ebx
f012358e:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123595:	10 00 00 
f0123598:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012359d:	0f b6 d0             	movzbl %al,%edx
f01235a0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01235a6:	01 d0                	add    %edx,%eax
f01235a8:	48                   	dec    %eax
f01235a9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01235af:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01235b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ba:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01235c0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01235c6:	29 d0                	sub    %edx,%eax
f01235c8:	01 c3                	add    %eax,%ebx
f01235ca:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01235d1:	10 00 00 
f01235d4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01235d9:	0f b6 c0             	movzbl %al,%eax
f01235dc:	c1 e0 04             	shl    $0x4,%eax
f01235df:	89 c2                	mov    %eax,%edx
f01235e1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01235e7:	01 d0                	add    %edx,%eax
f01235e9:	48                   	dec    %eax
f01235ea:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01235f0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01235f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01235fb:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123601:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123607:	29 d0                	sub    %edx,%eax
f0123609:	01 d8                	add    %ebx,%eax
f012360b:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123610:	39 c1                	cmp    %eax,%ecx
f0123612:	74 17                	je     f012362b <test_kfree_bestfirstfit+0x132b>
f0123614:	83 ec 04             	sub    $0x4,%esp
f0123617:	68 40 b7 13 f0       	push   $0xf013b740
f012361c:	68 5b 07 00 00       	push   $0x75b
f0123621:	68 5a b6 13 f0       	push   $0xf013b65a
f0123626:	e8 da cb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012362b:	e8 98 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123630:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123633:	74 17                	je     f012364c <test_kfree_bestfirstfit+0x134c>
f0123635:	83 ec 04             	sub    $0x4,%esp
f0123638:	68 74 b6 13 f0       	push   $0xf013b674
f012363d:	68 5c 07 00 00       	push   $0x75c
f0123642:	68 5a b6 13 f0       	push   $0xf013b65a
f0123647:	e8 b9 cb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012364c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012364f:	e8 4f 98 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123654:	29 c3                	sub    %eax,%ebx
f0123656:	89 d8                	mov    %ebx,%eax
f0123658:	3d 00 01 00 00       	cmp    $0x100,%eax
f012365d:	74 17                	je     f0123676 <test_kfree_bestfirstfit+0x1376>
f012365f:	83 ec 04             	sub    $0x4,%esp
f0123662:	68 dc b6 13 f0       	push   $0xf013b6dc
f0123667:	68 5d 07 00 00       	push   $0x75d
f012366c:	68 5a b6 13 f0       	push   $0xf013b65a
f0123671:	e8 8f cb fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0123676:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f012367d:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0123680:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123686:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123689:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123690:	eb 0e                	jmp    f01236a0 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0123692:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123695:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123698:	01 d0                	add    %edx,%eax
f012369a:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012369d:	ff 45 f4             	incl   -0xc(%ebp)
f01236a0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01236a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01236a9:	7f e7                	jg     f0123692 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f01236ab:	83 ec 0c             	sub    $0xc,%esp
f01236ae:	68 7a be 13 f0       	push   $0xf013be7a
f01236b3:	e8 56 d6 fd ff       	call   f0100d0e <cprintf>
f01236b8:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01236bb:	e8 e3 97 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01236c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236c3:	e8 00 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01236cb:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01236d1:	83 ec 0c             	sub    $0xc,%esp
f01236d4:	50                   	push   %eax
f01236d5:	e8 7d 45 fe ff       	call   f0107c57 <kfree>
f01236da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01236dd:	e8 e6 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236e2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01236e5:	74 17                	je     f01236fe <test_kfree_bestfirstfit+0x13fe>
f01236e7:	83 ec 04             	sub    $0x4,%esp
f01236ea:	68 74 b6 13 f0       	push   $0xf013b674
f01236ef:	68 6d 07 00 00       	push   $0x76d
f01236f4:	68 5a b6 13 f0       	push   $0xf013b65a
f01236f9:	e8 07 cb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01236fe:	e8 a0 97 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123703:	89 c2                	mov    %eax,%edx
f0123705:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123708:	29 c2                	sub    %eax,%edx
f012370a:	89 d0                	mov    %edx,%eax
f012370c:	83 f8 02             	cmp    $0x2,%eax
f012370f:	74 17                	je     f0123728 <test_kfree_bestfirstfit+0x1428>
f0123711:	83 ec 04             	sub    $0x4,%esp
f0123714:	68 e4 bd 13 f0       	push   $0xf013bde4
f0123719:	68 6e 07 00 00       	push   $0x76e
f012371e:	68 5a b6 13 f0       	push   $0xf013b65a
f0123723:	e8 dd ca fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123728:	e8 76 97 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012372d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123730:	e8 93 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123735:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123738:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012373e:	83 ec 0c             	sub    $0xc,%esp
f0123741:	50                   	push   %eax
f0123742:	e8 10 45 fe ff       	call   f0107c57 <kfree>
f0123747:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012374a:	e8 79 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012374f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123752:	74 17                	je     f012376b <test_kfree_bestfirstfit+0x146b>
f0123754:	83 ec 04             	sub    $0x4,%esp
f0123757:	68 74 b6 13 f0       	push   $0xf013b674
f012375c:	68 74 07 00 00       	push   $0x774
f0123761:	68 5a b6 13 f0       	push   $0xf013b65a
f0123766:	e8 9a ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012376b:	e8 33 97 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123770:	89 c2                	mov    %eax,%edx
f0123772:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123775:	29 c2                	sub    %eax,%edx
f0123777:	89 d0                	mov    %edx,%eax
f0123779:	3d 00 03 00 00       	cmp    $0x300,%eax
f012377e:	74 17                	je     f0123797 <test_kfree_bestfirstfit+0x1497>
f0123780:	83 ec 04             	sub    $0x4,%esp
f0123783:	68 e4 bd 13 f0       	push   $0xf013bde4
f0123788:	68 75 07 00 00       	push   $0x775
f012378d:	68 5a b6 13 f0       	push   $0xf013b65a
f0123792:	e8 6e ca fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123797:	e8 07 97 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012379c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012379f:	e8 24 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01237a7:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01237ad:	83 ec 0c             	sub    $0xc,%esp
f01237b0:	50                   	push   %eax
f01237b1:	e8 a1 44 fe ff       	call   f0107c57 <kfree>
f01237b6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237b9:	e8 0a 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237be:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237c1:	74 17                	je     f01237da <test_kfree_bestfirstfit+0x14da>
f01237c3:	83 ec 04             	sub    $0x4,%esp
f01237c6:	68 74 b6 13 f0       	push   $0xf013b674
f01237cb:	68 7b 07 00 00       	push   $0x77b
f01237d0:	68 5a b6 13 f0       	push   $0xf013b65a
f01237d5:	e8 2b ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01237da:	e8 c4 96 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01237df:	89 c2                	mov    %eax,%edx
f01237e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01237e4:	29 c2                	sub    %eax,%edx
f01237e6:	89 d0                	mov    %edx,%eax
f01237e8:	83 f8 01             	cmp    $0x1,%eax
f01237eb:	74 17                	je     f0123804 <test_kfree_bestfirstfit+0x1504>
f01237ed:	83 ec 04             	sub    $0x4,%esp
f01237f0:	68 e4 bd 13 f0       	push   $0xf013bde4
f01237f5:	68 7c 07 00 00       	push   $0x77c
f01237fa:	68 5a b6 13 f0       	push   $0xf013b65a
f01237ff:	e8 01 ca fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123804:	e8 9a 96 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123809:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012380c:	e8 b7 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123811:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123814:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012381a:	83 ec 0c             	sub    $0xc,%esp
f012381d:	50                   	push   %eax
f012381e:	e8 34 44 fe ff       	call   f0107c57 <kfree>
f0123823:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123826:	e8 9d 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012382b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012382e:	74 17                	je     f0123847 <test_kfree_bestfirstfit+0x1547>
f0123830:	83 ec 04             	sub    $0x4,%esp
f0123833:	68 74 b6 13 f0       	push   $0xf013b674
f0123838:	68 82 07 00 00       	push   $0x782
f012383d:	68 5a b6 13 f0       	push   $0xf013b65a
f0123842:	e8 be c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123847:	e8 57 96 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012384c:	89 c2                	mov    %eax,%edx
f012384e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123851:	29 c2                	sub    %eax,%edx
f0123853:	89 d0                	mov    %edx,%eax
f0123855:	83 f8 04             	cmp    $0x4,%eax
f0123858:	74 17                	je     f0123871 <test_kfree_bestfirstfit+0x1571>
f012385a:	83 ec 04             	sub    $0x4,%esp
f012385d:	68 e4 bd 13 f0       	push   $0xf013bde4
f0123862:	68 83 07 00 00       	push   $0x783
f0123867:	68 5a b6 13 f0       	push   $0xf013b65a
f012386c:	e8 94 c9 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123871:	e8 2d 96 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123876:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123879:	e8 4a 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012387e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123881:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123887:	83 ec 0c             	sub    $0xc,%esp
f012388a:	50                   	push   %eax
f012388b:	e8 c7 43 fe ff       	call   f0107c57 <kfree>
f0123890:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123893:	e8 30 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123898:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012389b:	74 17                	je     f01238b4 <test_kfree_bestfirstfit+0x15b4>
f012389d:	83 ec 04             	sub    $0x4,%esp
f01238a0:	68 74 b6 13 f0       	push   $0xf013b674
f01238a5:	68 89 07 00 00       	push   $0x789
f01238aa:	68 5a b6 13 f0       	push   $0xf013b65a
f01238af:	e8 51 c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01238b4:	e8 ea 95 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01238b9:	89 c2                	mov    %eax,%edx
f01238bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01238be:	29 c2                	sub    %eax,%edx
f01238c0:	89 d0                	mov    %edx,%eax
f01238c2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01238c7:	74 17                	je     f01238e0 <test_kfree_bestfirstfit+0x15e0>
f01238c9:	83 ec 04             	sub    $0x4,%esp
f01238cc:	68 e4 bd 13 f0       	push   $0xf013bde4
f01238d1:	68 8a 07 00 00       	push   $0x78a
f01238d6:	68 5a b6 13 f0       	push   $0xf013b65a
f01238db:	e8 25 c9 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01238e0:	e8 be 95 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01238e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238e8:	e8 db 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01238ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01238f0:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01238f6:	83 ec 0c             	sub    $0xc,%esp
f01238f9:	50                   	push   %eax
f01238fa:	e8 58 43 fe ff       	call   f0107c57 <kfree>
f01238ff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123902:	e8 c1 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123907:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012390a:	74 17                	je     f0123923 <test_kfree_bestfirstfit+0x1623>
f012390c:	83 ec 04             	sub    $0x4,%esp
f012390f:	68 74 b6 13 f0       	push   $0xf013b674
f0123914:	68 90 07 00 00       	push   $0x790
f0123919:	68 5a b6 13 f0       	push   $0xf013b65a
f012391e:	e8 e2 c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123923:	e8 7b 95 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123928:	89 c2                	mov    %eax,%edx
f012392a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012392d:	29 c2                	sub    %eax,%edx
f012392f:	89 d0                	mov    %edx,%eax
f0123931:	83 f8 01             	cmp    $0x1,%eax
f0123934:	74 17                	je     f012394d <test_kfree_bestfirstfit+0x164d>
f0123936:	83 ec 04             	sub    $0x4,%esp
f0123939:	68 e4 bd 13 f0       	push   $0xf013bde4
f012393e:	68 91 07 00 00       	push   $0x791
f0123943:	68 5a b6 13 f0       	push   $0xf013b65a
f0123948:	e8 b8 c8 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012394d:	e8 51 95 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123952:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123955:	e8 6e 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012395a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f012395d:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123963:	83 ec 0c             	sub    $0xc,%esp
f0123966:	50                   	push   %eax
f0123967:	e8 eb 42 fe ff       	call   f0107c57 <kfree>
f012396c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012396f:	e8 54 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123974:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123977:	74 17                	je     f0123990 <test_kfree_bestfirstfit+0x1690>
f0123979:	83 ec 04             	sub    $0x4,%esp
f012397c:	68 74 b6 13 f0       	push   $0xf013b674
f0123981:	68 97 07 00 00       	push   $0x797
f0123986:	68 5a b6 13 f0       	push   $0xf013b65a
f012398b:	e8 75 c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123990:	e8 0e 95 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123995:	89 c2                	mov    %eax,%edx
f0123997:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012399a:	29 c2                	sub    %eax,%edx
f012399c:	89 d0                	mov    %edx,%eax
f012399e:	3d 00 01 00 00       	cmp    $0x100,%eax
f01239a3:	74 17                	je     f01239bc <test_kfree_bestfirstfit+0x16bc>
f01239a5:	83 ec 04             	sub    $0x4,%esp
f01239a8:	68 e4 bd 13 f0       	push   $0xf013bde4
f01239ad:	68 98 07 00 00       	push   $0x798
f01239b2:	68 5a b6 13 f0       	push   $0xf013b65a
f01239b7:	e8 49 c8 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01239bc:	e8 e2 94 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01239c1:	89 c2                	mov    %eax,%edx
f01239c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01239c6:	39 c2                	cmp    %eax,%edx
f01239c8:	74 17                	je     f01239e1 <test_kfree_bestfirstfit+0x16e1>
f01239ca:	83 ec 04             	sub    $0x4,%esp
f01239cd:	68 84 be 13 f0       	push   $0xf013be84
f01239d2:	68 9a 07 00 00       	push   $0x79a
f01239d7:	68 5a b6 13 f0       	push   $0xf013b65a
f01239dc:	e8 24 c8 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f01239e1:	83 ec 0c             	sub    $0xc,%esp
f01239e4:	68 b8 be 13 f0       	push   $0xf013beb8
f01239e9:	e8 20 d3 fd ff       	call   f0100d0e <cprintf>
f01239ee:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01239f1:	83 ec 0c             	sub    $0xc,%esp
f01239f4:	6a 03                	push   $0x3
f01239f6:	e8 48 99 fe ff       	call   f010d343 <sys_bypassPageFault>
f01239fb:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01239fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123a05:	e9 82 00 00 00       	jmp    f0123a8c <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123a0d:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123a14:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123a17:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a1a:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123a1d:	e8 0f 99 fe ff       	call   f010d331 <sys_rcr2>
f0123a22:	89 c2                	mov    %eax,%edx
f0123a24:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a27:	39 c2                	cmp    %eax,%edx
f0123a29:	74 17                	je     f0123a42 <test_kfree_bestfirstfit+0x1742>
f0123a2b:	83 ec 04             	sub    $0x4,%esp
f0123a2e:	68 c0 be 13 f0       	push   $0xf013bec0
f0123a33:	68 a9 07 00 00       	push   $0x7a9
f0123a38:	68 5a b6 13 f0       	push   $0xf013b65a
f0123a3d:	e8 c3 c7 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123a42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123a45:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123a4c:	89 c2                	mov    %eax,%edx
f0123a4e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a51:	01 d0                	add    %edx,%eax
f0123a53:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123a56:	e8 d6 98 fe ff       	call   f010d331 <sys_rcr2>
f0123a5b:	89 c2                	mov    %eax,%edx
f0123a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123a60:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123a67:	89 c1                	mov    %eax,%ecx
f0123a69:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a6c:	01 c8                	add    %ecx,%eax
f0123a6e:	39 c2                	cmp    %eax,%edx
f0123a70:	74 17                	je     f0123a89 <test_kfree_bestfirstfit+0x1789>
f0123a72:	83 ec 04             	sub    $0x4,%esp
f0123a75:	68 c0 be 13 f0       	push   $0xf013bec0
f0123a7a:	68 ab 07 00 00       	push   $0x7ab
f0123a7f:	68 5a b6 13 f0       	push   $0xf013b65a
f0123a84:	e8 7c c7 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123a89:	ff 45 f4             	incl   -0xc(%ebp)
f0123a8c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123a90:	0f 8e 74 ff ff ff    	jle    f0123a0a <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123a96:	83 ec 0c             	sub    $0xc,%esp
f0123a99:	6a 00                	push   $0x0
f0123a9b:	e8 a3 98 fe ff       	call   f010d343 <sys_bypassPageFault>
f0123aa0:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123aa3:	83 ec 0c             	sub    $0xc,%esp
f0123aa6:	68 05 bf 13 f0       	push   $0xf013bf05
f0123aab:	e8 5e d2 fd ff       	call   f0100d0e <cprintf>
f0123ab0:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ab3:	e8 eb 93 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123ab8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123abb:	e8 08 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ac0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123ac3:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123ac9:	83 ec 0c             	sub    $0xc,%esp
f0123acc:	50                   	push   %eax
f0123acd:	e8 85 41 fe ff       	call   f0107c57 <kfree>
f0123ad2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ad5:	e8 ee 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ada:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123add:	74 17                	je     f0123af6 <test_kfree_bestfirstfit+0x17f6>
f0123adf:	83 ec 04             	sub    $0x4,%esp
f0123ae2:	68 74 b6 13 f0       	push   $0xf013b674
f0123ae7:	68 b9 07 00 00       	push   $0x7b9
f0123aec:	68 5a b6 13 f0       	push   $0xf013b65a
f0123af1:	e8 0f c7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123af6:	e8 a8 93 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123afb:	89 c2                	mov    %eax,%edx
f0123afd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b00:	39 c2                	cmp    %eax,%edx
f0123b02:	74 17                	je     f0123b1b <test_kfree_bestfirstfit+0x181b>
f0123b04:	83 ec 04             	sub    $0x4,%esp
f0123b07:	68 0c bf 13 f0       	push   $0xf013bf0c
f0123b0c:	68 ba 07 00 00       	push   $0x7ba
f0123b11:	68 5a b6 13 f0       	push   $0xf013b65a
f0123b16:	e8 ea c6 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b1b:	e8 83 93 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123b20:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b23:	e8 a0 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b28:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123b2b:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123b31:	83 ec 0c             	sub    $0xc,%esp
f0123b34:	50                   	push   %eax
f0123b35:	e8 1d 41 fe ff       	call   f0107c57 <kfree>
f0123b3a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b3d:	e8 86 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b42:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b45:	74 17                	je     f0123b5e <test_kfree_bestfirstfit+0x185e>
f0123b47:	83 ec 04             	sub    $0x4,%esp
f0123b4a:	68 74 b6 13 f0       	push   $0xf013b674
f0123b4f:	68 c0 07 00 00       	push   $0x7c0
f0123b54:	68 5a b6 13 f0       	push   $0xf013b65a
f0123b59:	e8 a7 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123b5e:	e8 40 93 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123b63:	89 c2                	mov    %eax,%edx
f0123b65:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b68:	39 c2                	cmp    %eax,%edx
f0123b6a:	74 17                	je     f0123b83 <test_kfree_bestfirstfit+0x1883>
f0123b6c:	83 ec 04             	sub    $0x4,%esp
f0123b6f:	68 0c bf 13 f0       	push   $0xf013bf0c
f0123b74:	68 c1 07 00 00       	push   $0x7c1
f0123b79:	68 5a b6 13 f0       	push   $0xf013b65a
f0123b7e:	e8 82 c6 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b83:	e8 1b 93 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123b88:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b8b:	e8 38 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b90:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123b93:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123b99:	83 ec 0c             	sub    $0xc,%esp
f0123b9c:	50                   	push   %eax
f0123b9d:	e8 b5 40 fe ff       	call   f0107c57 <kfree>
f0123ba2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ba5:	e8 1e 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123baa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123bad:	74 17                	je     f0123bc6 <test_kfree_bestfirstfit+0x18c6>
f0123baf:	83 ec 04             	sub    $0x4,%esp
f0123bb2:	68 74 b6 13 f0       	push   $0xf013b674
f0123bb7:	68 c7 07 00 00       	push   $0x7c7
f0123bbc:	68 5a b6 13 f0       	push   $0xf013b65a
f0123bc1:	e8 3f c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123bc6:	e8 d8 92 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123bcb:	89 c2                	mov    %eax,%edx
f0123bcd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123bd0:	39 c2                	cmp    %eax,%edx
f0123bd2:	74 17                	je     f0123beb <test_kfree_bestfirstfit+0x18eb>
f0123bd4:	83 ec 04             	sub    $0x4,%esp
f0123bd7:	68 0c bf 13 f0       	push   $0xf013bf0c
f0123bdc:	68 c8 07 00 00       	push   $0x7c8
f0123be1:	68 5a b6 13 f0       	push   $0xf013b65a
f0123be6:	e8 1a c6 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123beb:	e8 b3 92 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123bf0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123bf3:	e8 d0 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123bf8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123bfb:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123c01:	83 ec 0c             	sub    $0xc,%esp
f0123c04:	50                   	push   %eax
f0123c05:	e8 4d 40 fe ff       	call   f0107c57 <kfree>
f0123c0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c0d:	e8 b6 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c12:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c15:	74 17                	je     f0123c2e <test_kfree_bestfirstfit+0x192e>
f0123c17:	83 ec 04             	sub    $0x4,%esp
f0123c1a:	68 74 b6 13 f0       	push   $0xf013b674
f0123c1f:	68 ce 07 00 00       	push   $0x7ce
f0123c24:	68 5a b6 13 f0       	push   $0xf013b65a
f0123c29:	e8 d7 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123c2e:	e8 70 92 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123c33:	89 c2                	mov    %eax,%edx
f0123c35:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c38:	39 c2                	cmp    %eax,%edx
f0123c3a:	74 17                	je     f0123c53 <test_kfree_bestfirstfit+0x1953>
f0123c3c:	83 ec 04             	sub    $0x4,%esp
f0123c3f:	68 0c bf 13 f0       	push   $0xf013bf0c
f0123c44:	68 cf 07 00 00       	push   $0x7cf
f0123c49:	68 5a b6 13 f0       	push   $0xf013b65a
f0123c4e:	e8 b2 c5 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0123c53:	83 ec 0c             	sub    $0xc,%esp
f0123c56:	68 53 bf 13 f0       	push   $0xf013bf53
f0123c5b:	e8 ae d0 fd ff       	call   f0100d0e <cprintf>
f0123c60:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123c63:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123c6a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123c71:	eb 48                	jmp    f0123cbb <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123c73:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123c76:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0123c7b:	83 ec 04             	sub    $0x4,%esp
f0123c7e:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0123c84:	51                   	push   %ecx
f0123c85:	52                   	push   %edx
f0123c86:	50                   	push   %eax
f0123c87:	e8 25 2e fe ff       	call   f0106ab1 <get_page_table>
f0123c8c:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123c8f:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123c95:	85 c0                	test   %eax,%eax
f0123c97:	75 17                	jne    f0123cb0 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123c99:	83 ec 04             	sub    $0x4,%esp
f0123c9c:	68 5c bf 13 f0       	push   $0xf013bf5c
f0123ca1:	68 dd 07 00 00       	push   $0x7dd
f0123ca6:	68 5a b6 13 f0       	push   $0xf013b65a
f0123cab:	e8 55 c5 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123cb0:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123cb7:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123cbb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123cbf:	78 b2                	js     f0123c73 <test_kfree_bestfirstfit+0x1973>
f0123cc1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123cc5:	7f 09                	jg     f0123cd0 <test_kfree_bestfirstfit+0x19d0>
f0123cc7:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123cce:	76 a3                	jbe    f0123c73 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123cd0:	83 ec 0c             	sub    $0xc,%esp
f0123cd3:	68 3e b8 13 f0       	push   $0xf013b83e
f0123cd8:	e8 31 d0 fd ff       	call   f0100d0e <cprintf>
f0123cdd:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0123ce0:	83 ec 0c             	sub    $0xc,%esp
f0123ce3:	68 c4 bf 13 f0       	push   $0xf013bfc4
f0123ce8:	e8 21 d0 fd ff       	call   f0100d0e <cprintf>
f0123ced:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123cf0:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123cf5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123cf8:	5b                   	pop    %ebx
f0123cf9:	5f                   	pop    %edi
f0123cfa:	5d                   	pop    %ebp
f0123cfb:	c3                   	ret    

f0123cfc <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123cfc:	55                   	push   %ebp
f0123cfd:	89 e5                	mov    %esp,%ebp
f0123cff:	57                   	push   %edi
f0123d00:	56                   	push   %esi
f0123d01:	53                   	push   %ebx
f0123d02:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123d08:	83 ec 0c             	sub    $0xc,%esp
f0123d0b:	68 9c b5 13 f0       	push   $0xf013b59c
f0123d10:	e8 f9 cf fd ff       	call   f0100d0e <cprintf>
f0123d15:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123d18:	83 ec 0c             	sub    $0xc,%esp
f0123d1b:	68 cc b5 13 f0       	push   $0xf013b5cc
f0123d20:	e8 e9 cf fd ff       	call   f0100d0e <cprintf>
f0123d25:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123d28:	83 ec 0c             	sub    $0xc,%esp
f0123d2b:	68 9c b5 13 f0       	push   $0xf013b59c
f0123d30:	e8 d9 cf fd ff       	call   f0100d0e <cprintf>
f0123d35:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123d38:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123d3c:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123d40:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123d46:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123d4c:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123d53:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123d5a:	e8 44 91 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123d5f:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123d62:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123d68:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d72:	89 d7                	mov    %edx,%edi
f0123d74:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123d76:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123d7c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d81:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d86:	89 d7                	mov    %edx,%edi
f0123d88:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123d8a:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123d90:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d95:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d9a:	89 d7                	mov    %edx,%edi
f0123d9c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d9e:	e8 00 91 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123da3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123da6:	e8 1d 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123dab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123dae:	83 ec 0c             	sub    $0xc,%esp
f0123db1:	68 00 fc 1f 00       	push   $0x1ffc00
f0123db6:	e8 d1 3d fe ff       	call   f0107b8c <kmalloc>
f0123dbb:	83 c4 10             	add    $0x10,%esp
f0123dbe:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123dc4:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123dca:	89 c1                	mov    %eax,%ecx
f0123dcc:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123dd3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123dd6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ddb:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123dde:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123de1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123de6:	f7 75 a0             	divl   -0x60(%ebp)
f0123de9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123dec:	29 d0                	sub    %edx,%eax
f0123dee:	89 c3                	mov    %eax,%ebx
f0123df0:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123df7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123dfc:	0f b6 d0             	movzbl %al,%edx
f0123dff:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123e02:	01 d0                	add    %edx,%eax
f0123e04:	48                   	dec    %eax
f0123e05:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123e08:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123e0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e10:	f7 75 98             	divl   -0x68(%ebp)
f0123e13:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123e16:	29 d0                	sub    %edx,%eax
f0123e18:	01 c3                	add    %eax,%ebx
f0123e1a:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0123e21:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123e26:	0f b6 c0             	movzbl %al,%eax
f0123e29:	c1 e0 04             	shl    $0x4,%eax
f0123e2c:	89 c2                	mov    %eax,%edx
f0123e2e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123e31:	01 d0                	add    %edx,%eax
f0123e33:	48                   	dec    %eax
f0123e34:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123e37:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123e3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e3f:	f7 75 90             	divl   -0x70(%ebp)
f0123e42:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123e45:	29 d0                	sub    %edx,%eax
f0123e47:	01 d8                	add    %ebx,%eax
f0123e49:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123e4e:	39 c1                	cmp    %eax,%ecx
f0123e50:	74 17                	je     f0123e69 <test_kheap_phys_addr+0x16d>
f0123e52:	83 ec 04             	sub    $0x4,%esp
f0123e55:	68 40 b7 13 f0       	push   $0xf013b740
f0123e5a:	68 0a 08 00 00       	push   $0x80a
f0123e5f:	68 5a b6 13 f0       	push   $0xf013b65a
f0123e64:	e8 9c c3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e69:	e8 5a ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e6e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123e71:	74 17                	je     f0123e8a <test_kheap_phys_addr+0x18e>
f0123e73:	83 ec 04             	sub    $0x4,%esp
f0123e76:	68 74 b6 13 f0       	push   $0xf013b674
f0123e7b:	68 0b 08 00 00       	push   $0x80b
f0123e80:	68 5a b6 13 f0       	push   $0xf013b65a
f0123e85:	e8 7b c3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e8a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123e8d:	e8 11 90 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123e92:	29 c3                	sub    %eax,%ebx
f0123e94:	89 d8                	mov    %ebx,%eax
f0123e96:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123e9b:	74 17                	je     f0123eb4 <test_kheap_phys_addr+0x1b8>
f0123e9d:	83 ec 04             	sub    $0x4,%esp
f0123ea0:	68 dc b6 13 f0       	push   $0xf013b6dc
f0123ea5:	68 0c 08 00 00       	push   $0x80c
f0123eaa:	68 5a b6 13 f0       	push   $0xf013b65a
f0123eaf:	e8 51 c3 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123eb4:	e8 ea 8f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123eb9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ebc:	e8 07 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ec1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123ec4:	83 ec 0c             	sub    $0xc,%esp
f0123ec7:	68 00 fc 1f 00       	push   $0x1ffc00
f0123ecc:	e8 bb 3c fe ff       	call   f0107b8c <kmalloc>
f0123ed1:	83 c4 10             	add    $0x10,%esp
f0123ed4:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123eda:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123ee0:	89 c1                	mov    %eax,%ecx
f0123ee2:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123ee9:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123eec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ef1:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123ef4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123ef7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123efc:	f7 75 88             	divl   -0x78(%ebp)
f0123eff:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123f02:	29 d0                	sub    %edx,%eax
f0123f04:	89 c3                	mov    %eax,%ebx
f0123f06:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123f0d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123f12:	0f b6 d0             	movzbl %al,%edx
f0123f15:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123f18:	01 d0                	add    %edx,%eax
f0123f1a:	48                   	dec    %eax
f0123f1b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123f21:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123f27:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f2c:	f7 75 80             	divl   -0x80(%ebp)
f0123f2f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123f35:	29 d0                	sub    %edx,%eax
f0123f37:	01 c3                	add    %eax,%ebx
f0123f39:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123f40:	10 00 00 
f0123f43:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0123f48:	0f b6 c0             	movzbl %al,%eax
f0123f4b:	c1 e0 04             	shl    $0x4,%eax
f0123f4e:	89 c2                	mov    %eax,%edx
f0123f50:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123f56:	01 d0                	add    %edx,%eax
f0123f58:	48                   	dec    %eax
f0123f59:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123f5f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123f65:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f6a:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123f70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123f76:	29 d0                	sub    %edx,%eax
f0123f78:	01 d8                	add    %ebx,%eax
f0123f7a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123f7f:	39 c1                	cmp    %eax,%ecx
f0123f81:	74 17                	je     f0123f9a <test_kheap_phys_addr+0x29e>
f0123f83:	83 ec 04             	sub    $0x4,%esp
f0123f86:	68 40 b7 13 f0       	push   $0xf013b740
f0123f8b:	68 12 08 00 00       	push   $0x812
f0123f90:	68 5a b6 13 f0       	push   $0xf013b65a
f0123f95:	e8 6b c2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f9a:	e8 29 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f9f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123fa2:	74 17                	je     f0123fbb <test_kheap_phys_addr+0x2bf>
f0123fa4:	83 ec 04             	sub    $0x4,%esp
f0123fa7:	68 74 b6 13 f0       	push   $0xf013b674
f0123fac:	68 13 08 00 00       	push   $0x813
f0123fb1:	68 5a b6 13 f0       	push   $0xf013b65a
f0123fb6:	e8 4a c2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123fbb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123fbe:	e8 e0 8e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123fc3:	29 c3                	sub    %eax,%ebx
f0123fc5:	89 d8                	mov    %ebx,%eax
f0123fc7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123fcc:	74 17                	je     f0123fe5 <test_kheap_phys_addr+0x2e9>
f0123fce:	83 ec 04             	sub    $0x4,%esp
f0123fd1:	68 dc b6 13 f0       	push   $0xf013b6dc
f0123fd6:	68 14 08 00 00       	push   $0x814
f0123fdb:	68 5a b6 13 f0       	push   $0xf013b65a
f0123fe0:	e8 20 c2 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123fe5:	e8 b9 8e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0123fea:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fed:	e8 d6 fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ff2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123ff5:	83 ec 0c             	sub    $0xc,%esp
f0123ff8:	68 00 08 00 00       	push   $0x800
f0123ffd:	e8 8a 3b fe ff       	call   f0107b8c <kmalloc>
f0124002:	83 c4 10             	add    $0x10,%esp
f0124005:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012400b:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124011:	89 c1                	mov    %eax,%ecx
f0124013:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012401a:	10 00 00 
f012401d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124023:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124028:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012402e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124034:	ba 00 00 00 00       	mov    $0x0,%edx
f0124039:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012403f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124045:	29 d0                	sub    %edx,%eax
f0124047:	89 c3                	mov    %eax,%ebx
f0124049:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0124050:	10 00 00 
f0124053:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124058:	0f b6 d0             	movzbl %al,%edx
f012405b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124061:	01 d0                	add    %edx,%eax
f0124063:	48                   	dec    %eax
f0124064:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012406a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124070:	ba 00 00 00 00       	mov    $0x0,%edx
f0124075:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012407b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124081:	29 d0                	sub    %edx,%eax
f0124083:	01 c3                	add    %eax,%ebx
f0124085:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012408c:	10 00 00 
f012408f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124094:	0f b6 c0             	movzbl %al,%eax
f0124097:	c1 e0 04             	shl    $0x4,%eax
f012409a:	89 c2                	mov    %eax,%edx
f012409c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01240a2:	01 d0                	add    %edx,%eax
f01240a4:	48                   	dec    %eax
f01240a5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01240ab:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01240b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01240b6:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01240bc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01240c2:	29 d0                	sub    %edx,%eax
f01240c4:	01 d8                	add    %ebx,%eax
f01240c6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01240cb:	39 c1                	cmp    %eax,%ecx
f01240cd:	74 17                	je     f01240e6 <test_kheap_phys_addr+0x3ea>
f01240cf:	83 ec 04             	sub    $0x4,%esp
f01240d2:	68 40 b7 13 f0       	push   $0xf013b740
f01240d7:	68 1a 08 00 00       	push   $0x81a
f01240dc:	68 5a b6 13 f0       	push   $0xf013b65a
f01240e1:	e8 1f c1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01240e6:	e8 dd fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01240eb:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01240ee:	74 17                	je     f0124107 <test_kheap_phys_addr+0x40b>
f01240f0:	83 ec 04             	sub    $0x4,%esp
f01240f3:	68 74 b6 13 f0       	push   $0xf013b674
f01240f8:	68 1b 08 00 00       	push   $0x81b
f01240fd:	68 5a b6 13 f0       	push   $0xf013b65a
f0124102:	e8 fe c0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124107:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012410a:	e8 94 8d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012410f:	29 c3                	sub    %eax,%ebx
f0124111:	89 d8                	mov    %ebx,%eax
f0124113:	83 f8 01             	cmp    $0x1,%eax
f0124116:	74 17                	je     f012412f <test_kheap_phys_addr+0x433>
f0124118:	83 ec 04             	sub    $0x4,%esp
f012411b:	68 dc b6 13 f0       	push   $0xf013b6dc
f0124120:	68 1c 08 00 00       	push   $0x81c
f0124125:	68 5a b6 13 f0       	push   $0xf013b65a
f012412a:	e8 d6 c0 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012412f:	e8 6f 8d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124134:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124137:	e8 8c fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012413c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012413f:	83 ec 0c             	sub    $0xc,%esp
f0124142:	68 00 08 00 00       	push   $0x800
f0124147:	e8 40 3a fe ff       	call   f0107b8c <kmalloc>
f012414c:	83 c4 10             	add    $0x10,%esp
f012414f:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124155:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012415b:	89 c1                	mov    %eax,%ecx
f012415d:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0124164:	10 00 00 
f0124167:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012416d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124172:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0124178:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012417e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124183:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0124189:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012418f:	29 d0                	sub    %edx,%eax
f0124191:	89 c3                	mov    %eax,%ebx
f0124193:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012419a:	10 00 00 
f012419d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01241a2:	0f b6 d0             	movzbl %al,%edx
f01241a5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01241ab:	01 d0                	add    %edx,%eax
f01241ad:	48                   	dec    %eax
f01241ae:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01241b4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01241ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01241bf:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01241c5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01241cb:	29 d0                	sub    %edx,%eax
f01241cd:	01 c3                	add    %eax,%ebx
f01241cf:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01241d6:	10 00 00 
f01241d9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01241de:	0f b6 c0             	movzbl %al,%eax
f01241e1:	c1 e0 04             	shl    $0x4,%eax
f01241e4:	89 c2                	mov    %eax,%edx
f01241e6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01241ec:	01 d0                	add    %edx,%eax
f01241ee:	48                   	dec    %eax
f01241ef:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01241f5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01241fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124200:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0124206:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012420c:	29 d0                	sub    %edx,%eax
f012420e:	01 d8                	add    %ebx,%eax
f0124210:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124215:	39 c1                	cmp    %eax,%ecx
f0124217:	74 17                	je     f0124230 <test_kheap_phys_addr+0x534>
f0124219:	83 ec 04             	sub    $0x4,%esp
f012421c:	68 40 b7 13 f0       	push   $0xf013b740
f0124221:	68 22 08 00 00       	push   $0x822
f0124226:	68 5a b6 13 f0       	push   $0xf013b65a
f012422b:	e8 d5 bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124230:	e8 93 fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124235:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124238:	74 17                	je     f0124251 <test_kheap_phys_addr+0x555>
f012423a:	83 ec 04             	sub    $0x4,%esp
f012423d:	68 74 b6 13 f0       	push   $0xf013b674
f0124242:	68 23 08 00 00       	push   $0x823
f0124247:	68 5a b6 13 f0       	push   $0xf013b65a
f012424c:	e8 b4 bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124251:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124254:	e8 4a 8c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124259:	29 c3                	sub    %eax,%ebx
f012425b:	89 d8                	mov    %ebx,%eax
f012425d:	83 f8 01             	cmp    $0x1,%eax
f0124260:	74 17                	je     f0124279 <test_kheap_phys_addr+0x57d>
f0124262:	83 ec 04             	sub    $0x4,%esp
f0124265:	68 dc b6 13 f0       	push   $0xf013b6dc
f012426a:	68 24 08 00 00       	push   $0x824
f012426f:	68 5a b6 13 f0       	push   $0xf013b65a
f0124274:	e8 8c bf fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124279:	e8 25 8c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012427e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124281:	e8 42 fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124286:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124289:	83 ec 0c             	sub    $0xc,%esp
f012428c:	68 00 1c 00 00       	push   $0x1c00
f0124291:	e8 f6 38 fe ff       	call   f0107b8c <kmalloc>
f0124296:	83 c4 10             	add    $0x10,%esp
f0124299:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012429f:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01242a5:	89 c1                	mov    %eax,%ecx
f01242a7:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01242ae:	10 00 00 
f01242b1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01242b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01242bc:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01242c2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01242c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01242cd:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01242d3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01242d9:	29 d0                	sub    %edx,%eax
f01242db:	89 c3                	mov    %eax,%ebx
f01242dd:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01242e4:	10 00 00 
f01242e7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01242ec:	0f b6 d0             	movzbl %al,%edx
f01242ef:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01242f5:	01 d0                	add    %edx,%eax
f01242f7:	48                   	dec    %eax
f01242f8:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01242fe:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124304:	ba 00 00 00 00       	mov    $0x0,%edx
f0124309:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012430f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124315:	29 d0                	sub    %edx,%eax
f0124317:	01 c3                	add    %eax,%ebx
f0124319:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0124320:	10 00 00 
f0124323:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124328:	0f b6 c0             	movzbl %al,%eax
f012432b:	c1 e0 04             	shl    $0x4,%eax
f012432e:	89 c2                	mov    %eax,%edx
f0124330:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124336:	01 d0                	add    %edx,%eax
f0124338:	48                   	dec    %eax
f0124339:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012433f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124345:	ba 00 00 00 00       	mov    $0x0,%edx
f012434a:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0124350:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124356:	29 d0                	sub    %edx,%eax
f0124358:	01 d8                	add    %ebx,%eax
f012435a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012435f:	39 c1                	cmp    %eax,%ecx
f0124361:	74 17                	je     f012437a <test_kheap_phys_addr+0x67e>
f0124363:	83 ec 04             	sub    $0x4,%esp
f0124366:	68 40 b7 13 f0       	push   $0xf013b740
f012436b:	68 2a 08 00 00       	push   $0x82a
f0124370:	68 5a b6 13 f0       	push   $0xf013b65a
f0124375:	e8 8b be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012437a:	e8 49 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012437f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124382:	74 17                	je     f012439b <test_kheap_phys_addr+0x69f>
f0124384:	83 ec 04             	sub    $0x4,%esp
f0124387:	68 74 b6 13 f0       	push   $0xf013b674
f012438c:	68 2b 08 00 00       	push   $0x82b
f0124391:	68 5a b6 13 f0       	push   $0xf013b65a
f0124396:	e8 6a be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012439b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012439e:	e8 00 8b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01243a3:	29 c3                	sub    %eax,%ebx
f01243a5:	89 d8                	mov    %ebx,%eax
f01243a7:	83 f8 02             	cmp    $0x2,%eax
f01243aa:	74 17                	je     f01243c3 <test_kheap_phys_addr+0x6c7>
f01243ac:	83 ec 04             	sub    $0x4,%esp
f01243af:	68 dc b6 13 f0       	push   $0xf013b6dc
f01243b4:	68 2c 08 00 00       	push   $0x82c
f01243b9:	68 5a b6 13 f0       	push   $0xf013b65a
f01243be:	e8 42 be fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01243c3:	e8 db 8a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01243c8:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01243cb:	e8 f8 f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01243d0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01243d3:	83 ec 0c             	sub    $0xc,%esp
f01243d6:	68 00 fc 2f 00       	push   $0x2ffc00
f01243db:	e8 ac 37 fe ff       	call   f0107b8c <kmalloc>
f01243e0:	83 c4 10             	add    $0x10,%esp
f01243e3:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01243e9:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01243ef:	89 c1                	mov    %eax,%ecx
f01243f1:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01243f8:	10 00 00 
f01243fb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124401:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124406:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012440c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124412:	ba 00 00 00 00       	mov    $0x0,%edx
f0124417:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012441d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124423:	29 d0                	sub    %edx,%eax
f0124425:	89 c3                	mov    %eax,%ebx
f0124427:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012442e:	10 00 00 
f0124431:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124436:	0f b6 d0             	movzbl %al,%edx
f0124439:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012443f:	01 d0                	add    %edx,%eax
f0124441:	48                   	dec    %eax
f0124442:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0124448:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012444e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124453:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0124459:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012445f:	29 d0                	sub    %edx,%eax
f0124461:	01 c3                	add    %eax,%ebx
f0124463:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012446a:	10 00 00 
f012446d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124472:	0f b6 c0             	movzbl %al,%eax
f0124475:	c1 e0 04             	shl    $0x4,%eax
f0124478:	89 c2                	mov    %eax,%edx
f012447a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124480:	01 d0                	add    %edx,%eax
f0124482:	48                   	dec    %eax
f0124483:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0124489:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012448f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124494:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012449a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01244a0:	29 d0                	sub    %edx,%eax
f01244a2:	01 d8                	add    %ebx,%eax
f01244a4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01244a9:	39 c1                	cmp    %eax,%ecx
f01244ab:	74 17                	je     f01244c4 <test_kheap_phys_addr+0x7c8>
f01244ad:	83 ec 04             	sub    $0x4,%esp
f01244b0:	68 40 b7 13 f0       	push   $0xf013b740
f01244b5:	68 32 08 00 00       	push   $0x832
f01244ba:	68 5a b6 13 f0       	push   $0xf013b65a
f01244bf:	e8 41 bd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244c4:	e8 ff f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01244c9:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01244cc:	74 17                	je     f01244e5 <test_kheap_phys_addr+0x7e9>
f01244ce:	83 ec 04             	sub    $0x4,%esp
f01244d1:	68 74 b6 13 f0       	push   $0xf013b674
f01244d6:	68 33 08 00 00       	push   $0x833
f01244db:	68 5a b6 13 f0       	push   $0xf013b65a
f01244e0:	e8 20 bd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01244e5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01244e8:	e8 b6 89 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01244ed:	29 c3                	sub    %eax,%ebx
f01244ef:	89 d8                	mov    %ebx,%eax
f01244f1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01244f6:	74 17                	je     f012450f <test_kheap_phys_addr+0x813>
f01244f8:	83 ec 04             	sub    $0x4,%esp
f01244fb:	68 dc b6 13 f0       	push   $0xf013b6dc
f0124500:	68 34 08 00 00       	push   $0x834
f0124505:	68 5a b6 13 f0       	push   $0xf013b65a
f012450a:	e8 f6 bc fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012450f:	e8 8f 89 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124514:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124517:	e8 ac f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012451c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012451f:	83 ec 0c             	sub    $0xc,%esp
f0124522:	68 00 fc 5f 00       	push   $0x5ffc00
f0124527:	e8 60 36 fe ff       	call   f0107b8c <kmalloc>
f012452c:	83 c4 10             	add    $0x10,%esp
f012452f:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124535:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012453b:	89 c1                	mov    %eax,%ecx
f012453d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0124544:	10 00 00 
f0124547:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012454d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124552:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0124558:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012455e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124563:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0124569:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012456f:	29 d0                	sub    %edx,%eax
f0124571:	89 c3                	mov    %eax,%ebx
f0124573:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012457a:	10 00 00 
f012457d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124582:	0f b6 d0             	movzbl %al,%edx
f0124585:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012458b:	01 d0                	add    %edx,%eax
f012458d:	48                   	dec    %eax
f012458e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0124594:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012459a:	ba 00 00 00 00       	mov    $0x0,%edx
f012459f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01245a5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01245ab:	29 d0                	sub    %edx,%eax
f01245ad:	01 c3                	add    %eax,%ebx
f01245af:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01245b6:	10 00 00 
f01245b9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01245be:	0f b6 c0             	movzbl %al,%eax
f01245c1:	c1 e0 04             	shl    $0x4,%eax
f01245c4:	89 c2                	mov    %eax,%edx
f01245c6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01245cc:	01 d0                	add    %edx,%eax
f01245ce:	48                   	dec    %eax
f01245cf:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01245d5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01245db:	ba 00 00 00 00       	mov    $0x0,%edx
f01245e0:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01245e6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01245ec:	29 d0                	sub    %edx,%eax
f01245ee:	01 d8                	add    %ebx,%eax
f01245f0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01245f5:	39 c1                	cmp    %eax,%ecx
f01245f7:	74 17                	je     f0124610 <test_kheap_phys_addr+0x914>
f01245f9:	83 ec 04             	sub    $0x4,%esp
f01245fc:	68 40 b7 13 f0       	push   $0xf013b740
f0124601:	68 3a 08 00 00       	push   $0x83a
f0124606:	68 5a b6 13 f0       	push   $0xf013b65a
f012460b:	e8 f5 bb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124610:	e8 b3 f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124615:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124618:	74 17                	je     f0124631 <test_kheap_phys_addr+0x935>
f012461a:	83 ec 04             	sub    $0x4,%esp
f012461d:	68 74 b6 13 f0       	push   $0xf013b674
f0124622:	68 3b 08 00 00       	push   $0x83b
f0124627:	68 5a b6 13 f0       	push   $0xf013b65a
f012462c:	e8 d4 bb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124631:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124634:	e8 6a 88 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124639:	29 c3                	sub    %eax,%ebx
f012463b:	89 d8                	mov    %ebx,%eax
f012463d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124642:	74 17                	je     f012465b <test_kheap_phys_addr+0x95f>
f0124644:	83 ec 04             	sub    $0x4,%esp
f0124647:	68 dc b6 13 f0       	push   $0xf013b6dc
f012464c:	68 3c 08 00 00       	push   $0x83c
f0124651:	68 5a b6 13 f0       	push   $0xf013b65a
f0124656:	e8 aa bb fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012465b:	e8 43 88 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124660:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124663:	e8 60 f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124668:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012466b:	83 ec 0c             	sub    $0xc,%esp
f012466e:	68 00 38 00 00       	push   $0x3800
f0124673:	e8 14 35 fe ff       	call   f0107b8c <kmalloc>
f0124678:	83 c4 10             	add    $0x10,%esp
f012467b:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124681:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124687:	89 c1                	mov    %eax,%ecx
f0124689:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0124690:	10 00 00 
f0124693:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124699:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012469e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01246a4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01246aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01246af:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01246b5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01246bb:	29 d0                	sub    %edx,%eax
f01246bd:	89 c3                	mov    %eax,%ebx
f01246bf:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01246c6:	10 00 00 
f01246c9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01246ce:	0f b6 d0             	movzbl %al,%edx
f01246d1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01246d7:	01 d0                	add    %edx,%eax
f01246d9:	48                   	dec    %eax
f01246da:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01246e0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01246e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01246eb:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01246f1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01246f7:	29 d0                	sub    %edx,%eax
f01246f9:	01 c3                	add    %eax,%ebx
f01246fb:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124702:	10 00 00 
f0124705:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012470a:	0f b6 c0             	movzbl %al,%eax
f012470d:	c1 e0 04             	shl    $0x4,%eax
f0124710:	89 c2                	mov    %eax,%edx
f0124712:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124718:	01 d0                	add    %edx,%eax
f012471a:	48                   	dec    %eax
f012471b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124721:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124727:	ba 00 00 00 00       	mov    $0x0,%edx
f012472c:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124732:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124738:	29 d0                	sub    %edx,%eax
f012473a:	01 d8                	add    %ebx,%eax
f012473c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124741:	39 c1                	cmp    %eax,%ecx
f0124743:	74 17                	je     f012475c <test_kheap_phys_addr+0xa60>
f0124745:	83 ec 04             	sub    $0x4,%esp
f0124748:	68 40 b7 13 f0       	push   $0xf013b740
f012474d:	68 42 08 00 00       	push   $0x842
f0124752:	68 5a b6 13 f0       	push   $0xf013b65a
f0124757:	e8 a9 ba fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012475c:	e8 67 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124761:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124764:	74 17                	je     f012477d <test_kheap_phys_addr+0xa81>
f0124766:	83 ec 04             	sub    $0x4,%esp
f0124769:	68 74 b6 13 f0       	push   $0xf013b674
f012476e:	68 43 08 00 00       	push   $0x843
f0124773:	68 5a b6 13 f0       	push   $0xf013b65a
f0124778:	e8 88 ba fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012477d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124780:	e8 1e 87 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124785:	29 c3                	sub    %eax,%ebx
f0124787:	89 d8                	mov    %ebx,%eax
f0124789:	83 f8 04             	cmp    $0x4,%eax
f012478c:	74 17                	je     f01247a5 <test_kheap_phys_addr+0xaa9>
f012478e:	83 ec 04             	sub    $0x4,%esp
f0124791:	68 dc b6 13 f0       	push   $0xf013b6dc
f0124796:	68 44 08 00 00       	push   $0x844
f012479b:	68 5a b6 13 f0       	push   $0xf013b65a
f01247a0:	e8 60 ba fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01247a5:	89 e0                	mov    %esp,%eax
f01247a7:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01247a9:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01247b0:	10 00 00 
f01247b3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01247b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01247be:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01247c4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01247ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01247cf:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01247d5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01247db:	29 d0                	sub    %edx,%eax
f01247dd:	89 c1                	mov    %eax,%ecx
f01247df:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01247e6:	10 00 00 
f01247e9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01247ee:	0f b6 d0             	movzbl %al,%edx
f01247f1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01247f7:	01 d0                	add    %edx,%eax
f01247f9:	48                   	dec    %eax
f01247fa:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0124800:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124806:	ba 00 00 00 00       	mov    $0x0,%edx
f012480b:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0124811:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124817:	29 d0                	sub    %edx,%eax
f0124819:	01 c1                	add    %eax,%ecx
f012481b:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124822:	10 00 00 
f0124825:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012482a:	0f b6 c0             	movzbl %al,%eax
f012482d:	c1 e0 04             	shl    $0x4,%eax
f0124830:	89 c2                	mov    %eax,%edx
f0124832:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124838:	01 d0                	add    %edx,%eax
f012483a:	48                   	dec    %eax
f012483b:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124841:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124847:	ba 00 00 00 00       	mov    $0x0,%edx
f012484c:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124852:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124858:	29 d0                	sub    %edx,%eax
f012485a:	01 c8                	add    %ecx,%eax
f012485c:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124861:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124867:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012486e:	10 00 00 
f0124871:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124877:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012487c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124882:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124888:	ba 00 00 00 00       	mov    $0x0,%edx
f012488d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124893:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124899:	29 d0                	sub    %edx,%eax
f012489b:	89 c1                	mov    %eax,%ecx
f012489d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01248a4:	10 00 00 
f01248a7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01248ac:	0f b6 d0             	movzbl %al,%edx
f01248af:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01248b5:	01 d0                	add    %edx,%eax
f01248b7:	48                   	dec    %eax
f01248b8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01248be:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01248c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01248c9:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01248cf:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01248d5:	29 d0                	sub    %edx,%eax
f01248d7:	01 c1                	add    %eax,%ecx
f01248d9:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01248e0:	10 00 00 
f01248e3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01248e8:	0f b6 c0             	movzbl %al,%eax
f01248eb:	c1 e0 04             	shl    $0x4,%eax
f01248ee:	89 c2                	mov    %eax,%edx
f01248f0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01248f6:	01 d0                	add    %edx,%eax
f01248f8:	48                   	dec    %eax
f01248f9:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01248ff:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124905:	ba 00 00 00 00       	mov    $0x0,%edx
f012490a:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124910:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124916:	29 d0                	sub    %edx,%eax
f0124918:	01 c8                	add    %ecx,%eax
f012491a:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012491f:	c1 e8 0c             	shr    $0xc,%eax
f0124922:	89 c2                	mov    %eax,%edx
f0124924:	4a                   	dec    %edx
f0124925:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f012492b:	c1 e0 02             	shl    $0x2,%eax
f012492e:	8d 50 03             	lea    0x3(%eax),%edx
f0124931:	b8 10 00 00 00       	mov    $0x10,%eax
f0124936:	48                   	dec    %eax
f0124937:	01 d0                	add    %edx,%eax
f0124939:	bf 10 00 00 00       	mov    $0x10,%edi
f012493e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124943:	f7 f7                	div    %edi
f0124945:	6b c0 10             	imul   $0x10,%eax,%eax
f0124948:	29 c4                	sub    %eax,%esp
f012494a:	89 e0                	mov    %esp,%eax
f012494c:	83 c0 03             	add    $0x3,%eax
f012494f:	c1 e8 02             	shr    $0x2,%eax
f0124952:	c1 e0 02             	shl    $0x2,%eax
f0124955:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f012495b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124962:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124969:	10 00 00 
f012496c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124972:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124977:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012497d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124983:	ba 00 00 00 00       	mov    $0x0,%edx
f0124988:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012498e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124994:	29 d0                	sub    %edx,%eax
f0124996:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012499b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012499e:	eb 29                	jmp    f01249c9 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f01249a0:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01249a3:	8d 43 01             	lea    0x1(%ebx),%eax
f01249a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01249a9:	83 ec 0c             	sub    $0xc,%esp
f01249ac:	ff 75 e0             	pushl  -0x20(%ebp)
f01249af:	e8 f6 33 fe ff       	call   f0107daa <kheap_physical_address>
f01249b4:	83 c4 10             	add    $0x10,%esp
f01249b7:	89 c2                	mov    %eax,%edx
f01249b9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01249bf:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01249c2:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01249c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01249cc:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01249d2:	72 cc                	jb     f01249a0 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01249d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01249d7:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01249dd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01249e4:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01249eb:	10 00 00 
f01249ee:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01249f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01249f9:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01249ff:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124a05:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a0a:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124a10:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124a16:	29 d0                	sub    %edx,%eax
f0124a18:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124a20:	e9 ab 00 00 00       	jmp    f0124ad0 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124a25:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0124a2a:	83 ec 04             	sub    $0x4,%esp
f0124a2d:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124a33:	52                   	push   %edx
f0124a34:	ff 75 e0             	pushl  -0x20(%ebp)
f0124a37:	50                   	push   %eax
f0124a38:	e8 74 20 fe ff       	call   f0106ab1 <get_page_table>
f0124a3d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124a40:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124a46:	85 c0                	test   %eax,%eax
f0124a48:	75 17                	jne    f0124a61 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124a4a:	83 ec 04             	sub    $0x4,%esp
f0124a4d:	68 fc bf 13 f0       	push   $0xf013bffc
f0124a52:	68 59 08 00 00       	push   $0x859
f0124a57:	68 5a b6 13 f0       	push   $0xf013b65a
f0124a5c:	e8 a4 b7 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124a61:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124a64:	c1 e8 0c             	shr    $0xc,%eax
f0124a67:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124a6c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124a6f:	eb 4b                	jmp    f0124abc <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124a71:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124a77:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124a7a:	c1 e2 02             	shl    $0x2,%edx
f0124a7d:	01 d0                	add    %edx,%eax
f0124a7f:	8b 00                	mov    (%eax),%eax
f0124a81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124a86:	89 c1                	mov    %eax,%ecx
f0124a88:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124a8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124a91:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124a94:	39 c1                	cmp    %eax,%ecx
f0124a96:	74 17                	je     f0124aaf <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124a98:	83 ec 04             	sub    $0x4,%esp
f0124a9b:	68 55 c0 13 f0       	push   $0xf013c055
f0124aa0:	68 60 08 00 00       	push   $0x860
f0124aa5:	68 5a b6 13 f0       	push   $0xf013b65a
f0124aaa:	e8 56 b7 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124aaf:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124ab6:	ff 45 dc             	incl   -0x24(%ebp)
f0124ab9:	ff 45 e4             	incl   -0x1c(%ebp)
f0124abc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124abf:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124ac5:	7d 09                	jge    f0124ad0 <test_kheap_phys_addr+0xdd4>
f0124ac7:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124ace:	7e a1                	jle    f0124a71 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124ad0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124ad3:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124ad9:	0f 82 46 ff ff ff    	jb     f0124a25 <test_kheap_phys_addr+0xd29>
f0124adf:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124ae1:	83 ec 0c             	sub    $0xc,%esp
f0124ae4:	68 74 c0 13 f0       	push   $0xf013c074
f0124ae9:	e8 20 c2 fd ff       	call   f0100d0e <cprintf>
f0124aee:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124af1:	e8 ad 83 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124af6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124afc:	e8 c7 f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124b01:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124b07:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124b0d:	83 ec 0c             	sub    $0xc,%esp
f0124b10:	50                   	push   %eax
f0124b11:	e8 41 31 fe ff       	call   f0107c57 <kfree>
f0124b16:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b19:	e8 aa f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124b1e:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124b24:	74 17                	je     f0124b3d <test_kheap_phys_addr+0xe41>
f0124b26:	83 ec 04             	sub    $0x4,%esp
f0124b29:	68 74 b6 13 f0       	push   $0xf013b674
f0124b2e:	68 6e 08 00 00       	push   $0x86e
f0124b33:	68 5a b6 13 f0       	push   $0xf013b65a
f0124b38:	e8 c8 b6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124b3d:	e8 61 83 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124b42:	89 c2                	mov    %eax,%edx
f0124b44:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124b4a:	29 c2                	sub    %eax,%edx
f0124b4c:	89 d0                	mov    %edx,%eax
f0124b4e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124b53:	74 17                	je     f0124b6c <test_kheap_phys_addr+0xe70>
f0124b55:	83 ec 04             	sub    $0x4,%esp
f0124b58:	68 e4 bd 13 f0       	push   $0xf013bde4
f0124b5d:	68 6f 08 00 00       	push   $0x86f
f0124b62:	68 5a b6 13 f0       	push   $0xf013b65a
f0124b67:	e8 99 b6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124b6c:	e8 32 83 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124b71:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b77:	e8 4c f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124b7c:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124b82:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124b88:	83 ec 0c             	sub    $0xc,%esp
f0124b8b:	50                   	push   %eax
f0124b8c:	e8 c6 30 fe ff       	call   f0107c57 <kfree>
f0124b91:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b94:	e8 2f f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124b99:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124b9f:	74 17                	je     f0124bb8 <test_kheap_phys_addr+0xebc>
f0124ba1:	83 ec 04             	sub    $0x4,%esp
f0124ba4:	68 74 b6 13 f0       	push   $0xf013b674
f0124ba9:	68 75 08 00 00       	push   $0x875
f0124bae:	68 5a b6 13 f0       	push   $0xf013b65a
f0124bb3:	e8 4d b6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124bb8:	e8 e6 82 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124bbd:	89 c2                	mov    %eax,%edx
f0124bbf:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124bc5:	29 c2                	sub    %eax,%edx
f0124bc7:	89 d0                	mov    %edx,%eax
f0124bc9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124bce:	74 17                	je     f0124be7 <test_kheap_phys_addr+0xeeb>
f0124bd0:	83 ec 04             	sub    $0x4,%esp
f0124bd3:	68 e4 bd 13 f0       	push   $0xf013bde4
f0124bd8:	68 76 08 00 00       	push   $0x876
f0124bdd:	68 5a b6 13 f0       	push   $0xf013b65a
f0124be2:	e8 1e b6 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124be7:	e8 b7 82 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124bec:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124bf2:	e8 d1 f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124bf7:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124bfd:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124c03:	83 ec 0c             	sub    $0xc,%esp
f0124c06:	50                   	push   %eax
f0124c07:	e8 4b 30 fe ff       	call   f0107c57 <kfree>
f0124c0c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c0f:	e8 b4 f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124c14:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124c1a:	74 17                	je     f0124c33 <test_kheap_phys_addr+0xf37>
f0124c1c:	83 ec 04             	sub    $0x4,%esp
f0124c1f:	68 74 b6 13 f0       	push   $0xf013b674
f0124c24:	68 7c 08 00 00       	push   $0x87c
f0124c29:	68 5a b6 13 f0       	push   $0xf013b65a
f0124c2e:	e8 d2 b5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124c33:	e8 6b 82 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0124c38:	89 c2                	mov    %eax,%edx
f0124c3a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124c40:	29 c2                	sub    %eax,%edx
f0124c42:	89 d0                	mov    %edx,%eax
f0124c44:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124c49:	74 17                	je     f0124c62 <test_kheap_phys_addr+0xf66>
f0124c4b:	83 ec 04             	sub    $0x4,%esp
f0124c4e:	68 e4 bd 13 f0       	push   $0xf013bde4
f0124c53:	68 7d 08 00 00       	push   $0x87d
f0124c58:	68 5a b6 13 f0       	push   $0xf013b65a
f0124c5d:	e8 a3 b5 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0124c62:	89 e0                	mov    %esp,%eax
f0124c64:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124c66:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124c6d:	10 00 00 
f0124c70:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124c76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c7b:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0124c81:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124c87:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c8c:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0124c92:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124c98:	29 d0                	sub    %edx,%eax
f0124c9a:	89 c1                	mov    %eax,%ecx
f0124c9c:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0124ca3:	10 00 00 
f0124ca6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124cab:	0f b6 d0             	movzbl %al,%edx
f0124cae:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124cb4:	01 d0                	add    %edx,%eax
f0124cb6:	48                   	dec    %eax
f0124cb7:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124cbd:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124cc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cc8:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124cce:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124cd4:	29 d0                	sub    %edx,%eax
f0124cd6:	01 c1                	add    %eax,%ecx
f0124cd8:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124cdf:	10 00 00 
f0124ce2:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124ce7:	0f b6 c0             	movzbl %al,%eax
f0124cea:	c1 e0 04             	shl    $0x4,%eax
f0124ced:	89 c2                	mov    %eax,%edx
f0124cef:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124cf5:	01 d0                	add    %edx,%eax
f0124cf7:	48                   	dec    %eax
f0124cf8:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124cfe:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124d04:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d09:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124d0f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124d15:	29 d0                	sub    %edx,%eax
f0124d17:	01 c8                	add    %ecx,%eax
f0124d19:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124d1e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124d24:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124d2b:	10 00 00 
f0124d2e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124d34:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d39:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124d3f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d4a:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124d50:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124d56:	29 d0                	sub    %edx,%eax
f0124d58:	89 c1                	mov    %eax,%ecx
f0124d5a:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0124d61:	10 00 00 
f0124d64:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124d69:	0f b6 d0             	movzbl %al,%edx
f0124d6c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124d72:	01 d0                	add    %edx,%eax
f0124d74:	48                   	dec    %eax
f0124d75:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124d7b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124d81:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d86:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0124d8c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124d92:	29 d0                	sub    %edx,%eax
f0124d94:	01 c1                	add    %eax,%ecx
f0124d96:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124d9d:	10 00 00 
f0124da0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124da5:	0f b6 c0             	movzbl %al,%eax
f0124da8:	c1 e0 04             	shl    $0x4,%eax
f0124dab:	89 c2                	mov    %eax,%edx
f0124dad:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124db3:	01 d0                	add    %edx,%eax
f0124db5:	48                   	dec    %eax
f0124db6:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124dbc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124dc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dc7:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124dcd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124dd3:	29 d0                	sub    %edx,%eax
f0124dd5:	01 c8                	add    %ecx,%eax
f0124dd7:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124ddc:	c1 e8 0c             	shr    $0xc,%eax
f0124ddf:	89 c2                	mov    %eax,%edx
f0124de1:	4a                   	dec    %edx
f0124de2:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124de8:	c1 e0 02             	shl    $0x2,%eax
f0124deb:	8d 50 03             	lea    0x3(%eax),%edx
f0124dee:	b8 10 00 00 00       	mov    $0x10,%eax
f0124df3:	48                   	dec    %eax
f0124df4:	01 d0                	add    %edx,%eax
f0124df6:	bf 10 00 00 00       	mov    $0x10,%edi
f0124dfb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e00:	f7 f7                	div    %edi
f0124e02:	6b c0 10             	imul   $0x10,%eax,%eax
f0124e05:	29 c4                	sub    %eax,%esp
f0124e07:	89 e0                	mov    %esp,%eax
f0124e09:	83 c0 03             	add    $0x3,%eax
f0124e0c:	c1 e8 02             	shr    $0x2,%eax
f0124e0f:	c1 e0 02             	shl    $0x2,%eax
f0124e12:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124e18:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e1f:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124e26:	10 00 00 
f0124e29:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124e2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e34:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124e3a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124e40:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e45:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124e4b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124e51:	29 d0                	sub    %edx,%eax
f0124e53:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124e58:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124e5b:	eb 29                	jmp    f0124e86 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124e5d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124e60:	8d 43 01             	lea    0x1(%ebx),%eax
f0124e63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124e66:	83 ec 0c             	sub    $0xc,%esp
f0124e69:	ff 75 d8             	pushl  -0x28(%ebp)
f0124e6c:	e8 39 2f fe ff       	call   f0107daa <kheap_physical_address>
f0124e71:	83 c4 10             	add    $0x10,%esp
f0124e74:	89 c2                	mov    %eax,%edx
f0124e76:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124e7c:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e7f:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124e86:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124e89:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124e8f:	72 cc                	jb     f0124e5d <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124e91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e94:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124e9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124ea1:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124ea8:	10 00 00 
f0124eab:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124eb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124eb6:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124ebc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124ec2:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ec7:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124ecd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124ed3:	29 d0                	sub    %edx,%eax
f0124ed5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124eda:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124edd:	e9 ab 00 00 00       	jmp    f0124f8d <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124ee2:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0124ee7:	83 ec 04             	sub    $0x4,%esp
f0124eea:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124ef0:	52                   	push   %edx
f0124ef1:	ff 75 d8             	pushl  -0x28(%ebp)
f0124ef4:	50                   	push   %eax
f0124ef5:	e8 b7 1b fe ff       	call   f0106ab1 <get_page_table>
f0124efa:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124efd:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124f03:	85 c0                	test   %eax,%eax
f0124f05:	75 17                	jne    f0124f1e <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124f07:	83 ec 04             	sub    $0x4,%esp
f0124f0a:	68 fc bf 13 f0       	push   $0xf013bffc
f0124f0f:	68 93 08 00 00       	push   $0x893
f0124f14:	68 5a b6 13 f0       	push   $0xf013b65a
f0124f19:	e8 e7 b2 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124f1e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f21:	c1 e8 0c             	shr    $0xc,%eax
f0124f24:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124f29:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124f2c:	eb 4b                	jmp    f0124f79 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124f2e:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124f34:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124f37:	c1 e2 02             	shl    $0x2,%edx
f0124f3a:	01 d0                	add    %edx,%eax
f0124f3c:	8b 00                	mov    (%eax),%eax
f0124f3e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124f43:	89 c1                	mov    %eax,%ecx
f0124f45:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124f4b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124f4e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124f51:	39 c1                	cmp    %eax,%ecx
f0124f53:	74 17                	je     f0124f6c <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124f55:	83 ec 04             	sub    $0x4,%esp
f0124f58:	68 55 c0 13 f0       	push   $0xf013c055
f0124f5d:	68 9a 08 00 00       	push   $0x89a
f0124f62:	68 5a b6 13 f0       	push   $0xf013b65a
f0124f67:	e8 99 b2 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0124f6c:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124f73:	ff 45 d4             	incl   -0x2c(%ebp)
f0124f76:	ff 45 e4             	incl   -0x1c(%ebp)
f0124f79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124f7c:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124f82:	7d 09                	jge    f0124f8d <test_kheap_phys_addr+0x1291>
f0124f84:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124f8b:	7e a1                	jle    f0124f2e <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124f8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f90:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124f96:	0f 82 46 ff ff ff    	jb     f0124ee2 <test_kheap_phys_addr+0x11e6>
f0124f9c:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124f9e:	83 ec 0c             	sub    $0xc,%esp
f0124fa1:	68 e5 b7 13 f0       	push   $0xf013b7e5
f0124fa6:	e8 63 bd fd ff       	call   f0100d0e <cprintf>
f0124fab:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124fae:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124fb5:	10 00 00 
f0124fb8:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124fbe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124fc3:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124fc9:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124fcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fd4:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124fda:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124fe0:	29 d0                	sub    %edx,%eax
f0124fe2:	89 c1                	mov    %eax,%ecx
f0124fe4:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124feb:	10 00 00 
f0124fee:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0124ff3:	0f b6 d0             	movzbl %al,%edx
f0124ff6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124ffc:	01 d0                	add    %edx,%eax
f0124ffe:	48                   	dec    %eax
f0124fff:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125005:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012500b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125010:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125016:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012501c:	29 d0                	sub    %edx,%eax
f012501e:	01 c1                	add    %eax,%ecx
f0125020:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0125027:	10 00 00 
f012502a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012502f:	0f b6 c0             	movzbl %al,%eax
f0125032:	c1 e0 04             	shl    $0x4,%eax
f0125035:	89 c2                	mov    %eax,%edx
f0125037:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012503d:	01 d0                	add    %edx,%eax
f012503f:	48                   	dec    %eax
f0125040:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0125046:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012504c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125051:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0125057:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012505d:	29 d0                	sub    %edx,%eax
f012505f:	01 c8                	add    %ecx,%eax
f0125061:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0125066:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f012506c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0125073:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125079:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012507c:	eb 0a                	jmp    f0125088 <test_kheap_phys_addr+0x138c>
		{
			i++;
f012507e:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0125081:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0125088:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012508f:	76 ed                	jbe    f012507e <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0125091:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125094:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f012509a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01250a1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01250a7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01250aa:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01250b1:	e9 cc 00 00 00       	jmp    f0125182 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01250b6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01250b9:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01250be:	83 ec 04             	sub    $0x4,%esp
f01250c1:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f01250c7:	51                   	push   %ecx
f01250c8:	52                   	push   %edx
f01250c9:	50                   	push   %eax
f01250ca:	e8 e2 19 fe ff       	call   f0106ab1 <get_page_table>
f01250cf:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01250d2:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01250d8:	85 c0                	test   %eax,%eax
f01250da:	75 17                	jne    f01250f3 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01250dc:	83 ec 04             	sub    $0x4,%esp
f01250df:	68 fc bf 13 f0       	push   $0xf013bffc
f01250e4:	68 b6 08 00 00       	push   $0x8b6
f01250e9:	68 5a b6 13 f0       	push   $0xf013b65a
f01250ee:	e8 12 b1 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01250f3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01250fa:	eb 67                	jmp    f0125163 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01250fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01250ff:	c1 e0 0c             	shl    $0xc,%eax
f0125102:	89 c2                	mov    %eax,%edx
f0125104:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012510a:	01 d0                	add    %edx,%eax
f012510c:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0125112:	83 ec 0c             	sub    $0xc,%esp
f0125115:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f012511b:	e8 8a 2c fe ff       	call   f0107daa <kheap_physical_address>
f0125120:	83 c4 10             	add    $0x10,%esp
f0125123:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0125129:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f012512f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0125132:	c1 e2 02             	shl    $0x2,%edx
f0125135:	01 d0                	add    %edx,%eax
f0125137:	8b 00                	mov    (%eax),%eax
f0125139:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012513e:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0125144:	74 17                	je     f012515d <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0125146:	83 ec 04             	sub    $0x4,%esp
f0125149:	68 55 c0 13 f0       	push   $0xf013c055
f012514e:	68 c0 08 00 00       	push   $0x8c0
f0125153:	68 5a b6 13 f0       	push   $0xf013b65a
f0125158:	e8 a8 b0 fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012515d:	ff 45 cc             	incl   -0x34(%ebp)
f0125160:	ff 45 e4             	incl   -0x1c(%ebp)
f0125163:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125166:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f012516c:	7d 09                	jge    f0125177 <test_kheap_phys_addr+0x147b>
f012516e:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0125175:	7e 85                	jle    f01250fc <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0125177:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f012517e:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0125182:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0125186:	0f 88 2a ff ff ff    	js     f01250b6 <test_kheap_phys_addr+0x13ba>
f012518c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0125190:	7f 0d                	jg     f012519f <test_kheap_phys_addr+0x14a3>
f0125192:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0125199:	0f 86 17 ff ff ff    	jbe    f01250b6 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012519f:	83 ec 0c             	sub    $0xc,%esp
f01251a2:	68 3e b8 13 f0       	push   $0xf013b83e
f01251a7:	e8 62 bb fd ff       	call   f0100d0e <cprintf>
f01251ac:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01251af:	83 ec 0c             	sub    $0xc,%esp
f01251b2:	68 a8 c0 13 f0       	push   $0xf013c0a8
f01251b7:	e8 52 bb fd ff       	call   f0100d0e <cprintf>
f01251bc:	83 c4 10             	add    $0x10,%esp

	return 1;
f01251bf:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01251c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01251c7:	5b                   	pop    %ebx
f01251c8:	5e                   	pop    %esi
f01251c9:	5f                   	pop    %edi
f01251ca:	5d                   	pop    %ebp
f01251cb:	c3                   	ret    

f01251cc <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f01251cc:	55                   	push   %ebp
f01251cd:	89 e5                	mov    %esp,%ebp
f01251cf:	57                   	push   %edi
f01251d0:	56                   	push   %esi
f01251d1:	53                   	push   %ebx
f01251d2:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f01251d8:	89 e0                	mov    %esp,%eax
f01251da:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f01251dc:	83 ec 0c             	sub    $0xc,%esp
f01251df:	68 9c b5 13 f0       	push   $0xf013b59c
f01251e4:	e8 25 bb fd ff       	call   f0100d0e <cprintf>
f01251e9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01251ec:	83 ec 0c             	sub    $0xc,%esp
f01251ef:	68 cc b5 13 f0       	push   $0xf013b5cc
f01251f4:	e8 15 bb fd ff       	call   f0100d0e <cprintf>
f01251f9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01251fc:	83 ec 0c             	sub    $0xc,%esp
f01251ff:	68 9c b5 13 f0       	push   $0xf013b59c
f0125204:	e8 05 bb fd ff       	call   f0100d0e <cprintf>
f0125209:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012520c:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0125210:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0125214:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f012521a:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0125220:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125227:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012522e:	e8 70 7c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125233:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125236:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012523c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125241:	b8 00 00 00 00       	mov    $0x0,%eax
f0125246:	89 d7                	mov    %edx,%edi
f0125248:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012524a:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0125250:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125255:	b8 00 00 00 00       	mov    $0x0,%eax
f012525a:	89 d7                	mov    %edx,%edi
f012525c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012525e:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0125264:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125269:	b8 00 00 00 00       	mov    $0x0,%eax
f012526e:	89 d7                	mov    %edx,%edi
f0125270:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125272:	e8 2c 7c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125277:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012527a:	e8 49 eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012527f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125282:	83 ec 0c             	sub    $0xc,%esp
f0125285:	68 00 fc 1f 00       	push   $0x1ffc00
f012528a:	e8 fd 28 fe ff       	call   f0107b8c <kmalloc>
f012528f:	83 c4 10             	add    $0x10,%esp
f0125292:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125298:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012529e:	89 c1                	mov    %eax,%ecx
f01252a0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01252a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01252aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252af:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01252b2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01252b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01252ba:	f7 75 b4             	divl   -0x4c(%ebp)
f01252bd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01252c0:	29 d0                	sub    %edx,%eax
f01252c2:	89 c3                	mov    %eax,%ebx
f01252c4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01252cb:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01252d0:	0f b6 d0             	movzbl %al,%edx
f01252d3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01252d6:	01 d0                	add    %edx,%eax
f01252d8:	48                   	dec    %eax
f01252d9:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01252dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01252df:	ba 00 00 00 00       	mov    $0x0,%edx
f01252e4:	f7 75 ac             	divl   -0x54(%ebp)
f01252e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01252ea:	29 d0                	sub    %edx,%eax
f01252ec:	01 c3                	add    %eax,%ebx
f01252ee:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01252f5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01252fa:	0f b6 c0             	movzbl %al,%eax
f01252fd:	c1 e0 04             	shl    $0x4,%eax
f0125300:	89 c2                	mov    %eax,%edx
f0125302:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125305:	01 d0                	add    %edx,%eax
f0125307:	48                   	dec    %eax
f0125308:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012530b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012530e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125313:	f7 75 a4             	divl   -0x5c(%ebp)
f0125316:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125319:	29 d0                	sub    %edx,%eax
f012531b:	01 d8                	add    %ebx,%eax
f012531d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125322:	39 c1                	cmp    %eax,%ecx
f0125324:	74 17                	je     f012533d <test_kheap_virt_addr+0x171>
f0125326:	83 ec 04             	sub    $0x4,%esp
f0125329:	68 40 b7 13 f0       	push   $0xf013b740
f012532e:	68 ed 08 00 00       	push   $0x8ed
f0125333:	68 5a b6 13 f0       	push   $0xf013b65a
f0125338:	e8 c8 ae fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012533d:	e8 86 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125342:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125345:	74 17                	je     f012535e <test_kheap_virt_addr+0x192>
f0125347:	83 ec 04             	sub    $0x4,%esp
f012534a:	68 74 b6 13 f0       	push   $0xf013b674
f012534f:	68 ee 08 00 00       	push   $0x8ee
f0125354:	68 5a b6 13 f0       	push   $0xf013b65a
f0125359:	e8 a7 ae fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012535e:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125361:	e8 3d 7b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125366:	29 c3                	sub    %eax,%ebx
f0125368:	89 d8                	mov    %ebx,%eax
f012536a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012536f:	74 17                	je     f0125388 <test_kheap_virt_addr+0x1bc>
f0125371:	83 ec 04             	sub    $0x4,%esp
f0125374:	68 dc b6 13 f0       	push   $0xf013b6dc
f0125379:	68 ef 08 00 00       	push   $0x8ef
f012537e:	68 5a b6 13 f0       	push   $0xf013b65a
f0125383:	e8 7d ae fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125388:	e8 16 7b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012538d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125390:	e8 33 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125395:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125398:	83 ec 0c             	sub    $0xc,%esp
f012539b:	68 00 fc 1f 00       	push   $0x1ffc00
f01253a0:	e8 e7 27 fe ff       	call   f0107b8c <kmalloc>
f01253a5:	83 c4 10             	add    $0x10,%esp
f01253a8:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01253ae:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01253b4:	89 c1                	mov    %eax,%ecx
f01253b6:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01253bd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01253c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253c5:	89 45 98             	mov    %eax,-0x68(%ebp)
f01253c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01253cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01253d0:	f7 75 9c             	divl   -0x64(%ebp)
f01253d3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01253d6:	29 d0                	sub    %edx,%eax
f01253d8:	89 c3                	mov    %eax,%ebx
f01253da:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01253e1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01253e6:	0f b6 d0             	movzbl %al,%edx
f01253e9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01253ec:	01 d0                	add    %edx,%eax
f01253ee:	48                   	dec    %eax
f01253ef:	89 45 90             	mov    %eax,-0x70(%ebp)
f01253f2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01253f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01253fa:	f7 75 94             	divl   -0x6c(%ebp)
f01253fd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125400:	29 d0                	sub    %edx,%eax
f0125402:	01 c3                	add    %eax,%ebx
f0125404:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012540b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125410:	0f b6 c0             	movzbl %al,%eax
f0125413:	c1 e0 04             	shl    $0x4,%eax
f0125416:	89 c2                	mov    %eax,%edx
f0125418:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012541b:	01 d0                	add    %edx,%eax
f012541d:	48                   	dec    %eax
f012541e:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125421:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125424:	ba 00 00 00 00       	mov    $0x0,%edx
f0125429:	f7 75 8c             	divl   -0x74(%ebp)
f012542c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012542f:	29 d0                	sub    %edx,%eax
f0125431:	01 d8                	add    %ebx,%eax
f0125433:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125438:	39 c1                	cmp    %eax,%ecx
f012543a:	74 17                	je     f0125453 <test_kheap_virt_addr+0x287>
f012543c:	83 ec 04             	sub    $0x4,%esp
f012543f:	68 40 b7 13 f0       	push   $0xf013b740
f0125444:	68 f5 08 00 00       	push   $0x8f5
f0125449:	68 5a b6 13 f0       	push   $0xf013b65a
f012544e:	e8 b2 ad fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125453:	e8 70 e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125458:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012545b:	74 17                	je     f0125474 <test_kheap_virt_addr+0x2a8>
f012545d:	83 ec 04             	sub    $0x4,%esp
f0125460:	68 74 b6 13 f0       	push   $0xf013b674
f0125465:	68 f6 08 00 00       	push   $0x8f6
f012546a:	68 5a b6 13 f0       	push   $0xf013b65a
f012546f:	e8 91 ad fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125474:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125477:	e8 27 7a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012547c:	29 c3                	sub    %eax,%ebx
f012547e:	89 d8                	mov    %ebx,%eax
f0125480:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125485:	74 17                	je     f012549e <test_kheap_virt_addr+0x2d2>
f0125487:	83 ec 04             	sub    $0x4,%esp
f012548a:	68 dc b6 13 f0       	push   $0xf013b6dc
f012548f:	68 f7 08 00 00       	push   $0x8f7
f0125494:	68 5a b6 13 f0       	push   $0xf013b65a
f0125499:	e8 67 ad fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012549e:	e8 00 7a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01254a3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01254a6:	e8 1d e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01254ab:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01254ae:	83 ec 0c             	sub    $0xc,%esp
f01254b1:	68 00 08 00 00       	push   $0x800
f01254b6:	e8 d1 26 fe ff       	call   f0107b8c <kmalloc>
f01254bb:	83 c4 10             	add    $0x10,%esp
f01254be:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01254c4:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01254ca:	89 c1                	mov    %eax,%ecx
f01254cc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01254d3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01254d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01254db:	89 45 80             	mov    %eax,-0x80(%ebp)
f01254de:	8b 45 80             	mov    -0x80(%ebp),%eax
f01254e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01254e6:	f7 75 84             	divl   -0x7c(%ebp)
f01254e9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01254ec:	29 d0                	sub    %edx,%eax
f01254ee:	89 c3                	mov    %eax,%ebx
f01254f0:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01254f7:	10 00 00 
f01254fa:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01254ff:	0f b6 d0             	movzbl %al,%edx
f0125502:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125508:	01 d0                	add    %edx,%eax
f012550a:	48                   	dec    %eax
f012550b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125511:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125517:	ba 00 00 00 00       	mov    $0x0,%edx
f012551c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125522:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125528:	29 d0                	sub    %edx,%eax
f012552a:	01 c3                	add    %eax,%ebx
f012552c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125533:	10 00 00 
f0125536:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012553b:	0f b6 c0             	movzbl %al,%eax
f012553e:	c1 e0 04             	shl    $0x4,%eax
f0125541:	89 c2                	mov    %eax,%edx
f0125543:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125549:	01 d0                	add    %edx,%eax
f012554b:	48                   	dec    %eax
f012554c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125552:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125558:	ba 00 00 00 00       	mov    $0x0,%edx
f012555d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125563:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125569:	29 d0                	sub    %edx,%eax
f012556b:	01 d8                	add    %ebx,%eax
f012556d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125572:	39 c1                	cmp    %eax,%ecx
f0125574:	74 17                	je     f012558d <test_kheap_virt_addr+0x3c1>
f0125576:	83 ec 04             	sub    $0x4,%esp
f0125579:	68 40 b7 13 f0       	push   $0xf013b740
f012557e:	68 fd 08 00 00       	push   $0x8fd
f0125583:	68 5a b6 13 f0       	push   $0xf013b65a
f0125588:	e8 78 ac fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012558d:	e8 36 e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125592:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125595:	74 17                	je     f01255ae <test_kheap_virt_addr+0x3e2>
f0125597:	83 ec 04             	sub    $0x4,%esp
f012559a:	68 74 b6 13 f0       	push   $0xf013b674
f012559f:	68 fe 08 00 00       	push   $0x8fe
f01255a4:	68 5a b6 13 f0       	push   $0xf013b65a
f01255a9:	e8 57 ac fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01255ae:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01255b1:	e8 ed 78 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01255b6:	29 c3                	sub    %eax,%ebx
f01255b8:	89 d8                	mov    %ebx,%eax
f01255ba:	83 f8 01             	cmp    $0x1,%eax
f01255bd:	74 17                	je     f01255d6 <test_kheap_virt_addr+0x40a>
f01255bf:	83 ec 04             	sub    $0x4,%esp
f01255c2:	68 dc b6 13 f0       	push   $0xf013b6dc
f01255c7:	68 ff 08 00 00       	push   $0x8ff
f01255cc:	68 5a b6 13 f0       	push   $0xf013b65a
f01255d1:	e8 2f ac fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01255d6:	e8 c8 78 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01255db:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01255de:	e8 e5 e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01255e3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01255e6:	83 ec 0c             	sub    $0xc,%esp
f01255e9:	68 00 08 00 00       	push   $0x800
f01255ee:	e8 99 25 fe ff       	call   f0107b8c <kmalloc>
f01255f3:	83 c4 10             	add    $0x10,%esp
f01255f6:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01255fc:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0125602:	89 c1                	mov    %eax,%ecx
f0125604:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012560b:	10 00 00 
f012560e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125614:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125619:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012561f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125625:	ba 00 00 00 00       	mov    $0x0,%edx
f012562a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125630:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125636:	29 d0                	sub    %edx,%eax
f0125638:	89 c3                	mov    %eax,%ebx
f012563a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125641:	10 00 00 
f0125644:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125649:	0f b6 d0             	movzbl %al,%edx
f012564c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125652:	01 d0                	add    %edx,%eax
f0125654:	48                   	dec    %eax
f0125655:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012565b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125661:	ba 00 00 00 00       	mov    $0x0,%edx
f0125666:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012566c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125672:	29 d0                	sub    %edx,%eax
f0125674:	01 c3                	add    %eax,%ebx
f0125676:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012567d:	10 00 00 
f0125680:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125685:	0f b6 c0             	movzbl %al,%eax
f0125688:	c1 e0 04             	shl    $0x4,%eax
f012568b:	89 c2                	mov    %eax,%edx
f012568d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125693:	01 d0                	add    %edx,%eax
f0125695:	48                   	dec    %eax
f0125696:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012569c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01256a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01256a7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01256ad:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01256b3:	29 d0                	sub    %edx,%eax
f01256b5:	01 d8                	add    %ebx,%eax
f01256b7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01256bc:	39 c1                	cmp    %eax,%ecx
f01256be:	74 17                	je     f01256d7 <test_kheap_virt_addr+0x50b>
f01256c0:	83 ec 04             	sub    $0x4,%esp
f01256c3:	68 40 b7 13 f0       	push   $0xf013b740
f01256c8:	68 05 09 00 00       	push   $0x905
f01256cd:	68 5a b6 13 f0       	push   $0xf013b65a
f01256d2:	e8 2e ab fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01256d7:	e8 ec e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01256dc:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01256df:	74 17                	je     f01256f8 <test_kheap_virt_addr+0x52c>
f01256e1:	83 ec 04             	sub    $0x4,%esp
f01256e4:	68 74 b6 13 f0       	push   $0xf013b674
f01256e9:	68 06 09 00 00       	push   $0x906
f01256ee:	68 5a b6 13 f0       	push   $0xf013b65a
f01256f3:	e8 0d ab fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01256f8:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01256fb:	e8 a3 77 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125700:	29 c3                	sub    %eax,%ebx
f0125702:	89 d8                	mov    %ebx,%eax
f0125704:	83 f8 01             	cmp    $0x1,%eax
f0125707:	74 17                	je     f0125720 <test_kheap_virt_addr+0x554>
f0125709:	83 ec 04             	sub    $0x4,%esp
f012570c:	68 dc b6 13 f0       	push   $0xf013b6dc
f0125711:	68 07 09 00 00       	push   $0x907
f0125716:	68 5a b6 13 f0       	push   $0xf013b65a
f012571b:	e8 e5 aa fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125720:	e8 7e 77 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125725:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125728:	e8 9b e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012572d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125730:	83 ec 0c             	sub    $0xc,%esp
f0125733:	68 00 1c 00 00       	push   $0x1c00
f0125738:	e8 4f 24 fe ff       	call   f0107b8c <kmalloc>
f012573d:	83 c4 10             	add    $0x10,%esp
f0125740:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125746:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f012574c:	89 c1                	mov    %eax,%ecx
f012574e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125755:	10 00 00 
f0125758:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012575e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125763:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125769:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012576f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125774:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012577a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125780:	29 d0                	sub    %edx,%eax
f0125782:	89 c3                	mov    %eax,%ebx
f0125784:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012578b:	10 00 00 
f012578e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125793:	0f b6 d0             	movzbl %al,%edx
f0125796:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012579c:	01 d0                	add    %edx,%eax
f012579e:	48                   	dec    %eax
f012579f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01257a5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01257ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01257b0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01257b6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01257bc:	29 d0                	sub    %edx,%eax
f01257be:	01 c3                	add    %eax,%ebx
f01257c0:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01257c7:	10 00 00 
f01257ca:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01257cf:	0f b6 c0             	movzbl %al,%eax
f01257d2:	c1 e0 04             	shl    $0x4,%eax
f01257d5:	89 c2                	mov    %eax,%edx
f01257d7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01257dd:	01 d0                	add    %edx,%eax
f01257df:	48                   	dec    %eax
f01257e0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01257e6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01257ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01257f1:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01257f7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01257fd:	29 d0                	sub    %edx,%eax
f01257ff:	01 d8                	add    %ebx,%eax
f0125801:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125806:	39 c1                	cmp    %eax,%ecx
f0125808:	74 17                	je     f0125821 <test_kheap_virt_addr+0x655>
f012580a:	83 ec 04             	sub    $0x4,%esp
f012580d:	68 40 b7 13 f0       	push   $0xf013b740
f0125812:	68 0d 09 00 00       	push   $0x90d
f0125817:	68 5a b6 13 f0       	push   $0xf013b65a
f012581c:	e8 e4 a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125821:	e8 a2 e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125826:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125829:	74 17                	je     f0125842 <test_kheap_virt_addr+0x676>
f012582b:	83 ec 04             	sub    $0x4,%esp
f012582e:	68 74 b6 13 f0       	push   $0xf013b674
f0125833:	68 0e 09 00 00       	push   $0x90e
f0125838:	68 5a b6 13 f0       	push   $0xf013b65a
f012583d:	e8 c3 a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125842:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125845:	e8 59 76 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012584a:	29 c3                	sub    %eax,%ebx
f012584c:	89 d8                	mov    %ebx,%eax
f012584e:	83 f8 02             	cmp    $0x2,%eax
f0125851:	74 17                	je     f012586a <test_kheap_virt_addr+0x69e>
f0125853:	83 ec 04             	sub    $0x4,%esp
f0125856:	68 dc b6 13 f0       	push   $0xf013b6dc
f012585b:	68 0f 09 00 00       	push   $0x90f
f0125860:	68 5a b6 13 f0       	push   $0xf013b65a
f0125865:	e8 9b a9 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012586a:	e8 34 76 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012586f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125872:	e8 51 e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125877:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012587a:	83 ec 0c             	sub    $0xc,%esp
f012587d:	68 00 fc 2f 00       	push   $0x2ffc00
f0125882:	e8 05 23 fe ff       	call   f0107b8c <kmalloc>
f0125887:	83 c4 10             	add    $0x10,%esp
f012588a:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125890:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125896:	89 c1                	mov    %eax,%ecx
f0125898:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012589f:	10 00 00 
f01258a2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01258a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258ad:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01258b3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01258b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01258be:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01258c4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01258ca:	29 d0                	sub    %edx,%eax
f01258cc:	89 c3                	mov    %eax,%ebx
f01258ce:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01258d5:	10 00 00 
f01258d8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01258dd:	0f b6 d0             	movzbl %al,%edx
f01258e0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01258e6:	01 d0                	add    %edx,%eax
f01258e8:	48                   	dec    %eax
f01258e9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01258ef:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01258f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01258fa:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125900:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125906:	29 d0                	sub    %edx,%eax
f0125908:	01 c3                	add    %eax,%ebx
f012590a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125911:	10 00 00 
f0125914:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125919:	0f b6 c0             	movzbl %al,%eax
f012591c:	c1 e0 04             	shl    $0x4,%eax
f012591f:	89 c2                	mov    %eax,%edx
f0125921:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125927:	01 d0                	add    %edx,%eax
f0125929:	48                   	dec    %eax
f012592a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125930:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125936:	ba 00 00 00 00       	mov    $0x0,%edx
f012593b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125941:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125947:	29 d0                	sub    %edx,%eax
f0125949:	01 d8                	add    %ebx,%eax
f012594b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125950:	39 c1                	cmp    %eax,%ecx
f0125952:	74 17                	je     f012596b <test_kheap_virt_addr+0x79f>
f0125954:	83 ec 04             	sub    $0x4,%esp
f0125957:	68 40 b7 13 f0       	push   $0xf013b740
f012595c:	68 15 09 00 00       	push   $0x915
f0125961:	68 5a b6 13 f0       	push   $0xf013b65a
f0125966:	e8 9a a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012596b:	e8 58 e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125970:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125973:	74 17                	je     f012598c <test_kheap_virt_addr+0x7c0>
f0125975:	83 ec 04             	sub    $0x4,%esp
f0125978:	68 74 b6 13 f0       	push   $0xf013b674
f012597d:	68 16 09 00 00       	push   $0x916
f0125982:	68 5a b6 13 f0       	push   $0xf013b65a
f0125987:	e8 79 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012598c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012598f:	e8 0f 75 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125994:	29 c3                	sub    %eax,%ebx
f0125996:	89 d8                	mov    %ebx,%eax
f0125998:	3d 00 03 00 00       	cmp    $0x300,%eax
f012599d:	74 17                	je     f01259b6 <test_kheap_virt_addr+0x7ea>
f012599f:	83 ec 04             	sub    $0x4,%esp
f01259a2:	68 dc b6 13 f0       	push   $0xf013b6dc
f01259a7:	68 17 09 00 00       	push   $0x917
f01259ac:	68 5a b6 13 f0       	push   $0xf013b65a
f01259b1:	e8 4f a8 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01259b6:	e8 e8 74 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01259bb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259be:	e8 05 e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01259c3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01259c6:	83 ec 0c             	sub    $0xc,%esp
f01259c9:	68 00 fc 5f 00       	push   $0x5ffc00
f01259ce:	e8 b9 21 fe ff       	call   f0107b8c <kmalloc>
f01259d3:	83 c4 10             	add    $0x10,%esp
f01259d6:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01259dc:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01259e2:	89 c1                	mov    %eax,%ecx
f01259e4:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01259eb:	10 00 00 
f01259ee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01259f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259f9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01259ff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125a05:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a0a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125a10:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125a16:	29 d0                	sub    %edx,%eax
f0125a18:	89 c3                	mov    %eax,%ebx
f0125a1a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125a21:	10 00 00 
f0125a24:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125a29:	0f b6 d0             	movzbl %al,%edx
f0125a2c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125a32:	01 d0                	add    %edx,%eax
f0125a34:	48                   	dec    %eax
f0125a35:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125a3b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125a41:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a46:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125a4c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125a52:	29 d0                	sub    %edx,%eax
f0125a54:	01 c3                	add    %eax,%ebx
f0125a56:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125a5d:	10 00 00 
f0125a60:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125a65:	0f b6 c0             	movzbl %al,%eax
f0125a68:	c1 e0 04             	shl    $0x4,%eax
f0125a6b:	89 c2                	mov    %eax,%edx
f0125a6d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125a73:	01 d0                	add    %edx,%eax
f0125a75:	48                   	dec    %eax
f0125a76:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125a7c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125a82:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a87:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125a8d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125a93:	29 d0                	sub    %edx,%eax
f0125a95:	01 d8                	add    %ebx,%eax
f0125a97:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125a9c:	39 c1                	cmp    %eax,%ecx
f0125a9e:	74 17                	je     f0125ab7 <test_kheap_virt_addr+0x8eb>
f0125aa0:	83 ec 04             	sub    $0x4,%esp
f0125aa3:	68 40 b7 13 f0       	push   $0xf013b740
f0125aa8:	68 1d 09 00 00       	push   $0x91d
f0125aad:	68 5a b6 13 f0       	push   $0xf013b65a
f0125ab2:	e8 4e a7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ab7:	e8 0c e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125abc:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125abf:	74 17                	je     f0125ad8 <test_kheap_virt_addr+0x90c>
f0125ac1:	83 ec 04             	sub    $0x4,%esp
f0125ac4:	68 74 b6 13 f0       	push   $0xf013b674
f0125ac9:	68 1e 09 00 00       	push   $0x91e
f0125ace:	68 5a b6 13 f0       	push   $0xf013b65a
f0125ad3:	e8 2d a7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ad8:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125adb:	e8 c3 73 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125ae0:	29 c3                	sub    %eax,%ebx
f0125ae2:	89 d8                	mov    %ebx,%eax
f0125ae4:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125ae9:	74 17                	je     f0125b02 <test_kheap_virt_addr+0x936>
f0125aeb:	83 ec 04             	sub    $0x4,%esp
f0125aee:	68 dc b6 13 f0       	push   $0xf013b6dc
f0125af3:	68 1f 09 00 00       	push   $0x91f
f0125af8:	68 5a b6 13 f0       	push   $0xf013b65a
f0125afd:	e8 03 a7 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125b02:	e8 9c 73 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125b07:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b0a:	e8 b9 e2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125b0f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125b12:	83 ec 0c             	sub    $0xc,%esp
f0125b15:	68 00 38 00 00       	push   $0x3800
f0125b1a:	e8 6d 20 fe ff       	call   f0107b8c <kmalloc>
f0125b1f:	83 c4 10             	add    $0x10,%esp
f0125b22:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b28:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125b2e:	89 c1                	mov    %eax,%ecx
f0125b30:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125b37:	10 00 00 
f0125b3a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125b40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b45:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125b4b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125b51:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b56:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125b5c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125b62:	29 d0                	sub    %edx,%eax
f0125b64:	89 c3                	mov    %eax,%ebx
f0125b66:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125b6d:	10 00 00 
f0125b70:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125b75:	0f b6 d0             	movzbl %al,%edx
f0125b78:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125b7e:	01 d0                	add    %edx,%eax
f0125b80:	48                   	dec    %eax
f0125b81:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125b87:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125b8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b92:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125b98:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125b9e:	29 d0                	sub    %edx,%eax
f0125ba0:	01 c3                	add    %eax,%ebx
f0125ba2:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125ba9:	10 00 00 
f0125bac:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125bb1:	0f b6 c0             	movzbl %al,%eax
f0125bb4:	c1 e0 04             	shl    $0x4,%eax
f0125bb7:	89 c2                	mov    %eax,%edx
f0125bb9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125bbf:	01 d0                	add    %edx,%eax
f0125bc1:	48                   	dec    %eax
f0125bc2:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125bc8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125bce:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bd3:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125bd9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125bdf:	29 d0                	sub    %edx,%eax
f0125be1:	01 d8                	add    %ebx,%eax
f0125be3:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125be8:	39 c1                	cmp    %eax,%ecx
f0125bea:	74 17                	je     f0125c03 <test_kheap_virt_addr+0xa37>
f0125bec:	83 ec 04             	sub    $0x4,%esp
f0125bef:	68 40 b7 13 f0       	push   $0xf013b740
f0125bf4:	68 25 09 00 00       	push   $0x925
f0125bf9:	68 5a b6 13 f0       	push   $0xf013b65a
f0125bfe:	e8 02 a6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c03:	e8 c0 e1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125c08:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125c0b:	74 17                	je     f0125c24 <test_kheap_virt_addr+0xa58>
f0125c0d:	83 ec 04             	sub    $0x4,%esp
f0125c10:	68 74 b6 13 f0       	push   $0xf013b674
f0125c15:	68 26 09 00 00       	push   $0x926
f0125c1a:	68 5a b6 13 f0       	push   $0xf013b65a
f0125c1f:	e8 e1 a5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c24:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125c27:	e8 77 72 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0125c2c:	29 c3                	sub    %eax,%ebx
f0125c2e:	89 d8                	mov    %ebx,%eax
f0125c30:	83 f8 04             	cmp    $0x4,%eax
f0125c33:	74 17                	je     f0125c4c <test_kheap_virt_addr+0xa80>
f0125c35:	83 ec 04             	sub    $0x4,%esp
f0125c38:	68 dc b6 13 f0       	push   $0xf013b6dc
f0125c3d:	68 27 09 00 00       	push   $0x927
f0125c42:	68 5a b6 13 f0       	push   $0xf013b65a
f0125c47:	e8 b9 a5 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125c4c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125c53:	10 00 00 
f0125c56:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125c5c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c61:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125c67:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125c6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c72:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125c78:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125c7e:	29 d0                	sub    %edx,%eax
f0125c80:	89 c1                	mov    %eax,%ecx
f0125c82:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125c89:	10 00 00 
f0125c8c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125c91:	0f b6 d0             	movzbl %al,%edx
f0125c94:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125c9a:	01 d0                	add    %edx,%eax
f0125c9c:	48                   	dec    %eax
f0125c9d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0125ca3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125ca9:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cae:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0125cb4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125cba:	29 d0                	sub    %edx,%eax
f0125cbc:	01 c1                	add    %eax,%ecx
f0125cbe:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125cc5:	10 00 00 
f0125cc8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125ccd:	0f b6 c0             	movzbl %al,%eax
f0125cd0:	c1 e0 04             	shl    $0x4,%eax
f0125cd3:	89 c2                	mov    %eax,%edx
f0125cd5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125cdb:	01 d0                	add    %edx,%eax
f0125cdd:	48                   	dec    %eax
f0125cde:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0125ce4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125cea:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cef:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125cf5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125cfb:	29 d0                	sub    %edx,%eax
f0125cfd:	01 c1                	add    %eax,%ecx
f0125cff:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125d06:	10 00 00 
f0125d09:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125d0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d14:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125d1a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125d20:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d25:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125d2b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125d31:	29 d0                	sub    %edx,%eax
f0125d33:	29 c1                	sub    %eax,%ecx
f0125d35:	89 c8                	mov    %ecx,%eax
f0125d37:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125d3c:	c1 e8 0c             	shr    $0xc,%eax
f0125d3f:	89 c2                	mov    %eax,%edx
f0125d41:	4a                   	dec    %edx
f0125d42:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125d48:	c1 e0 02             	shl    $0x2,%eax
f0125d4b:	8d 50 03             	lea    0x3(%eax),%edx
f0125d4e:	b8 10 00 00 00       	mov    $0x10,%eax
f0125d53:	48                   	dec    %eax
f0125d54:	01 d0                	add    %edx,%eax
f0125d56:	bf 10 00 00 00       	mov    $0x10,%edi
f0125d5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d60:	f7 f7                	div    %edi
f0125d62:	6b c0 10             	imul   $0x10,%eax,%eax
f0125d65:	29 c4                	sub    %eax,%esp
f0125d67:	89 e0                	mov    %esp,%eax
f0125d69:	83 c0 03             	add    $0x3,%eax
f0125d6c:	c1 e8 02             	shr    $0x2,%eax
f0125d6f:	c1 e0 02             	shl    $0x2,%eax
f0125d72:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125d78:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125d7f:	10 00 00 
f0125d82:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125d88:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d8d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125d93:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125d99:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d9e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125da4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125daa:	29 d0                	sub    %edx,%eax
f0125dac:	89 c1                	mov    %eax,%ecx
f0125dae:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125db5:	10 00 00 
f0125db8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125dbd:	0f b6 d0             	movzbl %al,%edx
f0125dc0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125dc6:	01 d0                	add    %edx,%eax
f0125dc8:	48                   	dec    %eax
f0125dc9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125dcf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125dd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0125dda:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125de0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125de6:	29 d0                	sub    %edx,%eax
f0125de8:	01 c1                	add    %eax,%ecx
f0125dea:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125df1:	10 00 00 
f0125df4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125df9:	0f b6 c0             	movzbl %al,%eax
f0125dfc:	c1 e0 04             	shl    $0x4,%eax
f0125dff:	89 c2                	mov    %eax,%edx
f0125e01:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125e07:	01 d0                	add    %edx,%eax
f0125e09:	48                   	dec    %eax
f0125e0a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125e10:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125e16:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e1b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125e21:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125e27:	29 d0                	sub    %edx,%eax
f0125e29:	01 c1                	add    %eax,%ecx
f0125e2b:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125e32:	10 00 00 
f0125e35:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125e3b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e40:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125e46:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125e4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e51:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125e57:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125e5d:	29 d0                	sub    %edx,%eax
f0125e5f:	29 c1                	sub    %eax,%ecx
f0125e61:	89 c8                	mov    %ecx,%eax
f0125e63:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125e68:	c1 e8 0c             	shr    $0xc,%eax
f0125e6b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125e71:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125e78:	10 00 00 
f0125e7b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125e81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e86:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125e8c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125e92:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e97:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125e9d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125ea3:	29 d0                	sub    %edx,%eax
f0125ea5:	89 c1                	mov    %eax,%ecx
f0125ea7:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125eae:	10 00 00 
f0125eb1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125eb6:	0f b6 d0             	movzbl %al,%edx
f0125eb9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125ebf:	01 d0                	add    %edx,%eax
f0125ec1:	48                   	dec    %eax
f0125ec2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125ec8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125ece:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ed3:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125ed9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125edf:	29 d0                	sub    %edx,%eax
f0125ee1:	01 c1                	add    %eax,%ecx
f0125ee3:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125eea:	10 00 00 
f0125eed:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0125ef2:	0f b6 c0             	movzbl %al,%eax
f0125ef5:	c1 e0 04             	shl    $0x4,%eax
f0125ef8:	89 c2                	mov    %eax,%edx
f0125efa:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125f00:	01 d0                	add    %edx,%eax
f0125f02:	48                   	dec    %eax
f0125f03:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125f09:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125f0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f14:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125f1a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125f20:	29 d0                	sub    %edx,%eax
f0125f22:	01 c8                	add    %ecx,%eax
f0125f24:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125f29:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125f2f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125f36:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125f3d:	10 00 00 
f0125f40:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125f46:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f4b:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125f51:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125f57:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f5c:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125f62:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125f68:	29 d0                	sub    %edx,%eax
f0125f6a:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125f6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125f72:	e9 21 01 00 00       	jmp    f0126098 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125f77:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0125f7c:	83 ec 04             	sub    $0x4,%esp
f0125f7f:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125f85:	52                   	push   %edx
f0125f86:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125f89:	50                   	push   %eax
f0125f8a:	e8 22 0b fe ff       	call   f0106ab1 <get_page_table>
f0125f8f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125f92:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125f98:	85 c0                	test   %eax,%eax
f0125f9a:	75 17                	jne    f0125fb3 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125f9c:	83 ec 04             	sub    $0x4,%esp
f0125f9f:	68 fc bf 13 f0       	push   $0xf013bffc
f0125fa4:	68 38 09 00 00       	push   $0x938
f0125fa9:	68 5a b6 13 f0       	push   $0xf013b65a
f0125fae:	e8 52 a2 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125fb6:	c1 e8 0c             	shr    $0xc,%eax
f0125fb9:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125fbe:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125fc1:	e9 ba 00 00 00       	jmp    f0126080 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125fc6:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125fcc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125fcf:	c1 e2 02             	shl    $0x2,%edx
f0125fd2:	01 d0                	add    %edx,%eax
f0125fd4:	8b 00                	mov    (%eax),%eax
f0125fd6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125fdb:	89 c1                	mov    %eax,%ecx
f0125fdd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125fe3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125fe6:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125fe9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125fef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125ff2:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125ff5:	83 ec 0c             	sub    $0xc,%esp
f0125ff8:	50                   	push   %eax
f0125ff9:	e8 80 1d fe ff       	call   f0107d7e <kheap_virtual_address>
f0125ffe:	83 c4 10             	add    $0x10,%esp
f0126001:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0126007:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012600d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0126010:	74 61                	je     f0126073 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0126012:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126018:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012601b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012601e:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0126024:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0126027:	c1 e1 02             	shl    $0x2,%ecx
f012602a:	01 ca                	add    %ecx,%edx
f012602c:	8b 12                	mov    (%edx),%edx
f012602e:	89 d1                	mov    %edx,%ecx
f0126030:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0126036:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126039:	c1 e2 0c             	shl    $0xc,%edx
f012603c:	89 d3                	mov    %edx,%ebx
f012603e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0126041:	01 da                	add    %ebx,%edx
f0126043:	83 ec 0c             	sub    $0xc,%esp
f0126046:	50                   	push   %eax
f0126047:	51                   	push   %ecx
f0126048:	52                   	push   %edx
f0126049:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f012604f:	68 f0 c0 13 f0       	push   $0xf013c0f0
f0126054:	e8 b5 ac fd ff       	call   f0100d0e <cprintf>
f0126059:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012605c:	83 ec 04             	sub    $0x4,%esp
f012605f:	68 33 c1 13 f0       	push   $0xf013c133
f0126064:	68 42 09 00 00       	push   $0x942
f0126069:	68 5a b6 13 f0       	push   $0xf013b65a
f012606e:	e8 92 a1 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0126073:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012607a:	ff 45 dc             	incl   -0x24(%ebp)
f012607d:	ff 45 e0             	incl   -0x20(%ebp)
f0126080:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126083:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0126089:	7d 0d                	jge    f0126098 <test_kheap_virt_addr+0xecc>
f012608b:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0126092:	0f 8e 2e ff ff ff    	jle    f0125fc6 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0126098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012609b:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01260a1:	0f 82 d0 fe ff ff    	jb     f0125f77 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01260a7:	83 ec 0c             	sub    $0xc,%esp
f01260aa:	68 50 c1 13 f0       	push   $0xf013c150
f01260af:	e8 5a ac fd ff       	call   f0100d0e <cprintf>
f01260b4:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01260b7:	e8 e7 6d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01260bc:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01260c2:	e8 01 dd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01260c7:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f01260cd:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01260d3:	83 ec 0c             	sub    $0xc,%esp
f01260d6:	50                   	push   %eax
f01260d7:	e8 7b 1b fe ff       	call   f0107c57 <kfree>
f01260dc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260df:	e8 e4 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01260e4:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01260ea:	74 17                	je     f0126103 <test_kheap_virt_addr+0xf37>
f01260ec:	83 ec 04             	sub    $0x4,%esp
f01260ef:	68 74 b6 13 f0       	push   $0xf013b674
f01260f4:	68 50 09 00 00       	push   $0x950
f01260f9:	68 5a b6 13 f0       	push   $0xf013b65a
f01260fe:	e8 02 a1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126103:	e8 9b 6d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126108:	89 c2                	mov    %eax,%edx
f012610a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126110:	29 c2                	sub    %eax,%edx
f0126112:	89 d0                	mov    %edx,%eax
f0126114:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126119:	74 17                	je     f0126132 <test_kheap_virt_addr+0xf66>
f012611b:	83 ec 04             	sub    $0x4,%esp
f012611e:	68 e4 bd 13 f0       	push   $0xf013bde4
f0126123:	68 51 09 00 00       	push   $0x951
f0126128:	68 5a b6 13 f0       	push   $0xf013b65a
f012612d:	e8 d3 a0 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126132:	e8 6c 6d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126137:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012613d:	e8 86 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126142:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0126148:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012614e:	83 ec 0c             	sub    $0xc,%esp
f0126151:	50                   	push   %eax
f0126152:	e8 00 1b fe ff       	call   f0107c57 <kfree>
f0126157:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012615a:	e8 69 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012615f:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126165:	74 17                	je     f012617e <test_kheap_virt_addr+0xfb2>
f0126167:	83 ec 04             	sub    $0x4,%esp
f012616a:	68 74 b6 13 f0       	push   $0xf013b674
f012616f:	68 57 09 00 00       	push   $0x957
f0126174:	68 5a b6 13 f0       	push   $0xf013b65a
f0126179:	e8 87 a0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012617e:	e8 20 6d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126183:	89 c2                	mov    %eax,%edx
f0126185:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012618b:	29 c2                	sub    %eax,%edx
f012618d:	89 d0                	mov    %edx,%eax
f012618f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126194:	74 17                	je     f01261ad <test_kheap_virt_addr+0xfe1>
f0126196:	83 ec 04             	sub    $0x4,%esp
f0126199:	68 e4 bd 13 f0       	push   $0xf013bde4
f012619e:	68 58 09 00 00       	push   $0x958
f01261a3:	68 5a b6 13 f0       	push   $0xf013b65a
f01261a8:	e8 58 a0 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01261ad:	e8 f1 6c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01261b2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261b8:	e8 0b dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01261bd:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f01261c3:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01261c9:	83 ec 0c             	sub    $0xc,%esp
f01261cc:	50                   	push   %eax
f01261cd:	e8 85 1a fe ff       	call   f0107c57 <kfree>
f01261d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261d5:	e8 ee db fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01261da:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01261e0:	74 17                	je     f01261f9 <test_kheap_virt_addr+0x102d>
f01261e2:	83 ec 04             	sub    $0x4,%esp
f01261e5:	68 74 b6 13 f0       	push   $0xf013b674
f01261ea:	68 5e 09 00 00       	push   $0x95e
f01261ef:	68 5a b6 13 f0       	push   $0xf013b65a
f01261f4:	e8 0c a0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01261f9:	e8 a5 6c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01261fe:	89 c2                	mov    %eax,%edx
f0126200:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126206:	29 c2                	sub    %eax,%edx
f0126208:	89 d0                	mov    %edx,%eax
f012620a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012620f:	74 17                	je     f0126228 <test_kheap_virt_addr+0x105c>
f0126211:	83 ec 04             	sub    $0x4,%esp
f0126214:	68 e4 bd 13 f0       	push   $0xf013bde4
f0126219:	68 5f 09 00 00       	push   $0x95f
f012621e:	68 5a b6 13 f0       	push   $0xf013b65a
f0126223:	e8 dd 9f fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0126228:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012622f:	10 00 00 
f0126232:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126238:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012623d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0126243:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126249:	ba 00 00 00 00       	mov    $0x0,%edx
f012624e:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0126254:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012625a:	29 d0                	sub    %edx,%eax
f012625c:	89 c1                	mov    %eax,%ecx
f012625e:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0126265:	10 00 00 
f0126268:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012626d:	0f b6 d0             	movzbl %al,%edx
f0126270:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126276:	01 d0                	add    %edx,%eax
f0126278:	48                   	dec    %eax
f0126279:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012627f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126285:	ba 00 00 00 00       	mov    $0x0,%edx
f012628a:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0126290:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126296:	29 d0                	sub    %edx,%eax
f0126298:	01 c1                	add    %eax,%ecx
f012629a:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01262a1:	10 00 00 
f01262a4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01262a9:	0f b6 c0             	movzbl %al,%eax
f01262ac:	c1 e0 04             	shl    $0x4,%eax
f01262af:	89 c2                	mov    %eax,%edx
f01262b1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01262b7:	01 d0                	add    %edx,%eax
f01262b9:	48                   	dec    %eax
f01262ba:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01262c0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01262c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01262cb:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01262d1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01262d7:	29 d0                	sub    %edx,%eax
f01262d9:	01 c8                	add    %ecx,%eax
f01262db:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01262e0:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f01262e6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f01262ed:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01262f4:	10 00 00 
f01262f7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01262fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126302:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0126308:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012630e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126313:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0126319:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012631f:	29 d0                	sub    %edx,%eax
f0126321:	89 c1                	mov    %eax,%ecx
f0126323:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f012632a:	10 00 00 
f012632d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126332:	0f b6 d0             	movzbl %al,%edx
f0126335:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012633b:	01 d0                	add    %edx,%eax
f012633d:	48                   	dec    %eax
f012633e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0126344:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012634a:	ba 00 00 00 00       	mov    $0x0,%edx
f012634f:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0126355:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012635b:	29 d0                	sub    %edx,%eax
f012635d:	01 c1                	add    %eax,%ecx
f012635f:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0126366:	10 00 00 
f0126369:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012636e:	0f b6 c0             	movzbl %al,%eax
f0126371:	c1 e0 04             	shl    $0x4,%eax
f0126374:	89 c2                	mov    %eax,%edx
f0126376:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012637c:	01 d0                	add    %edx,%eax
f012637e:	48                   	dec    %eax
f012637f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0126385:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012638b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126390:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0126396:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012639c:	29 d0                	sub    %edx,%eax
f012639e:	01 c1                	add    %eax,%ecx
f01263a0:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01263a7:	10 00 00 
f01263aa:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01263b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01263b5:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01263bb:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01263c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01263c6:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f01263cc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01263d2:	29 d0                	sub    %edx,%eax
f01263d4:	29 c1                	sub    %eax,%ecx
f01263d6:	89 c8                	mov    %ecx,%eax
f01263d8:	05 00 40 00 00       	add    $0x4000,%eax
f01263dd:	c1 e8 0c             	shr    $0xc,%eax
f01263e0:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01263e6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01263ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01263ef:	eb 41                	jmp    f0126432 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01263f1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01263f7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01263fa:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01263fd:	83 ec 0c             	sub    $0xc,%esp
f0126400:	50                   	push   %eax
f0126401:	e8 78 19 fe ff       	call   f0107d7e <kheap_virtual_address>
f0126406:	83 c4 10             	add    $0x10,%esp
f0126409:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f012640f:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0126416:	74 17                	je     f012642f <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0126418:	83 ec 04             	sub    $0x4,%esp
f012641b:	68 33 c1 13 f0       	push   $0xf013c133
f0126420:	68 70 09 00 00       	push   $0x970
f0126425:	68 5a b6 13 f0       	push   $0xf013b65a
f012642a:	e8 d6 9d fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012642f:	ff 45 d8             	incl   -0x28(%ebp)
f0126432:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126438:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f012643e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126441:	39 c2                	cmp    %eax,%edx
f0126443:	77 ac                	ja     f01263f1 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126445:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012644b:	05 00 04 00 00       	add    $0x400,%eax
f0126450:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126453:	e9 83 00 00 00       	jmp    f01264db <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126458:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012645e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126461:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126464:	83 ec 0c             	sub    $0xc,%esp
f0126467:	50                   	push   %eax
f0126468:	e8 11 19 fe ff       	call   f0107d7e <kheap_virtual_address>
f012646d:	83 c4 10             	add    $0x10,%esp
f0126470:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126476:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f012647d:	10 00 00 
f0126480:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0126486:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012648b:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0126491:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126497:	ba 00 00 00 00       	mov    $0x0,%edx
f012649c:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01264a2:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01264a8:	29 d0                	sub    %edx,%eax
f01264aa:	89 c2                	mov    %eax,%edx
f01264ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01264af:	c1 e0 0c             	shl    $0xc,%eax
f01264b2:	01 d0                	add    %edx,%eax
f01264b4:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01264b9:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f01264bf:	74 17                	je     f01264d8 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f01264c1:	83 ec 04             	sub    $0x4,%esp
f01264c4:	68 33 c1 13 f0       	push   $0xf013c133
f01264c9:	68 7a 09 00 00       	push   $0x97a
f01264ce:	68 5a b6 13 f0       	push   $0xf013b65a
f01264d3:	e8 2d 9d fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01264d8:	ff 45 d8             	incl   -0x28(%ebp)
f01264db:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01264e1:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01264e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01264ea:	39 c2                	cmp    %eax,%edx
f01264ec:	0f 87 66 ff ff ff    	ja     f0126458 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01264f2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01264f8:	05 04 07 00 00       	add    $0x704,%eax
f01264fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126500:	eb 41                	jmp    f0126543 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126502:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126508:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012650b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012650e:	83 ec 0c             	sub    $0xc,%esp
f0126511:	50                   	push   %eax
f0126512:	e8 67 18 fe ff       	call   f0107d7e <kheap_virtual_address>
f0126517:	83 c4 10             	add    $0x10,%esp
f012651a:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0126520:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0126527:	74 17                	je     f0126540 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0126529:	83 ec 04             	sub    $0x4,%esp
f012652c:	68 33 c1 13 f0       	push   $0xf013c133
f0126531:	68 83 09 00 00       	push   $0x983
f0126536:	68 5a b6 13 f0       	push   $0xf013b65a
f012653b:	e8 c5 9c fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126540:	ff 45 d8             	incl   -0x28(%ebp)
f0126543:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126549:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f012654f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126552:	39 c2                	cmp    %eax,%edx
f0126554:	77 ac                	ja     f0126502 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126556:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012655c:	05 04 0d 00 00       	add    $0xd04,%eax
f0126561:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126564:	e9 83 00 00 00       	jmp    f01265ec <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126569:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012656f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126572:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126575:	83 ec 0c             	sub    $0xc,%esp
f0126578:	50                   	push   %eax
f0126579:	e8 00 18 fe ff       	call   f0107d7e <kheap_virtual_address>
f012657e:	83 c4 10             	add    $0x10,%esp
f0126581:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126587:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f012658e:	10 00 00 
f0126591:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0126597:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012659c:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01265a2:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01265a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01265ad:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f01265b3:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01265b9:	29 d0                	sub    %edx,%eax
f01265bb:	89 c2                	mov    %eax,%edx
f01265bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01265c0:	c1 e0 0c             	shl    $0xc,%eax
f01265c3:	01 d0                	add    %edx,%eax
f01265c5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01265ca:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f01265d0:	74 17                	je     f01265e9 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f01265d2:	83 ec 04             	sub    $0x4,%esp
f01265d5:	68 33 c1 13 f0       	push   $0xf013c133
f01265da:	68 8c 09 00 00       	push   $0x98c
f01265df:	68 5a b6 13 f0       	push   $0xf013b65a
f01265e4:	e8 1c 9c fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01265e9:	ff 45 d8             	incl   -0x28(%ebp)
f01265ec:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01265f2:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f01265f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01265fb:	39 c2                	cmp    %eax,%edx
f01265fd:	0f 87 66 ff ff ff    	ja     f0126569 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0126603:	83 ec 0c             	sub    $0xc,%esp
f0126606:	68 e5 b7 13 f0       	push   $0xf013b7e5
f012660b:	e8 fe a6 fd ff       	call   f0100d0e <cprintf>
f0126610:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126613:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f012661a:	eb 54                	jmp    f0126670 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f012661c:	83 ec 0c             	sub    $0xc,%esp
f012661f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126622:	e8 57 17 fe ff       	call   f0107d7e <kheap_virtual_address>
f0126627:	83 c4 10             	add    $0x10,%esp
f012662a:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126630:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126637:	74 30                	je     f0126669 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126639:	83 ec 04             	sub    $0x4,%esp
f012663c:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126642:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126645:	68 81 c1 13 f0       	push   $0xf013c181
f012664a:	e8 bf a6 fd ff       	call   f0100d0e <cprintf>
f012664f:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126652:	83 ec 04             	sub    $0x4,%esp
f0126655:	68 33 c1 13 f0       	push   $0xf013c133
f012665a:	68 9c 09 00 00       	push   $0x99c
f012665f:	68 5a b6 13 f0       	push   $0xf013b65a
f0126664:	e8 9c 9b fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126669:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0126670:	b8 bc ee 88 00       	mov    $0x88eebc,%eax
f0126675:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0126678:	72 a2                	jb     f012661c <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012667a:	83 ec 0c             	sub    $0xc,%esp
f012667d:	68 3e b8 13 f0       	push   $0xf013b83e
f0126682:	e8 87 a6 fd ff       	call   f0100d0e <cprintf>
f0126687:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f012668a:	83 ec 0c             	sub    $0xc,%esp
f012668d:	68 a0 c1 13 f0       	push   $0xf013c1a0
f0126692:	e8 77 a6 fd ff       	call   f0100d0e <cprintf>
f0126697:	83 c4 10             	add    $0x10,%esp

	return 1;
f012669a:	b8 01 00 00 00       	mov    $0x1,%eax
f012669f:	89 f4                	mov    %esi,%esp

}
f01266a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01266a4:	5b                   	pop    %ebx
f01266a5:	5e                   	pop    %esi
f01266a6:	5f                   	pop    %edi
f01266a7:	5d                   	pop    %ebp
f01266a8:	c3                   	ret    

f01266a9 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f01266a9:	55                   	push   %ebp
f01266aa:	89 e5                	mov    %esp,%ebp
f01266ac:	57                   	push   %edi
f01266ad:	56                   	push   %esi
f01266ae:	53                   	push   %ebx
f01266af:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f01266b5:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f01266ba:	84 c0                	test   %al,%al
f01266bc:	74 56                	je     f0126714 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f01266be:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f01266c5:	e8 d9 67 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01266ca:	a3 b8 ee 88 f0       	mov    %eax,0xf088eeb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f01266cf:	e8 f4 d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01266d4:	a3 b4 ee 88 f0       	mov    %eax,0xf088eeb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f01266d9:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01266df:	bb fd c2 13 f0       	mov    $0xf013c2fd,%ebx
f01266e4:	ba 11 00 00 00       	mov    $0x11,%edx
f01266e9:	89 c7                	mov    %eax,%edi
f01266eb:	89 de                	mov    %ebx,%esi
f01266ed:	89 d1                	mov    %edx,%ecx
f01266ef:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01266f1:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f01266f7:	b9 53 00 00 00       	mov    $0x53,%ecx
f01266fc:	b0 00                	mov    $0x0,%al
f01266fe:	89 d7                	mov    %edx,%edi
f0126700:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0126702:	83 ec 0c             	sub    $0xc,%esp
f0126705:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f012670b:	50                   	push   %eax
f012670c:	e8 5f a6 fd ff       	call   f0100d70 <execute_command>
f0126711:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126714:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f012671b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126722:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f0126727:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012672a:	eb 2d                	jmp    f0126759 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f012672c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012672f:	05 5c 05 00 00       	add    $0x55c,%eax
f0126734:	83 ec 08             	sub    $0x8,%esp
f0126737:	68 e7 c1 13 f0       	push   $0xf013c1e7
f012673c:	50                   	push   %eax
f012673d:	e8 79 af 00 00       	call   f01316bb <strcmp>
f0126742:	83 c4 10             	add    $0x10,%esp
f0126745:	85 c0                	test   %eax,%eax
f0126747:	75 08                	jne    f0126751 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126749:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012674c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f012674f:	eb 2f                	jmp    f0126780 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126751:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0126756:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126759:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012675d:	74 08                	je     f0126767 <test_three_creation_functions+0xbe>
f012675f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126762:	8b 40 44             	mov    0x44(%eax),%eax
f0126765:	eb 05                	jmp    f012676c <test_three_creation_functions+0xc3>
f0126767:	b8 00 00 00 00       	mov    $0x0,%eax
f012676c:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f0126771:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0126776:	85 c0                	test   %eax,%eax
f0126778:	75 b2                	jne    f012672c <test_three_creation_functions+0x83>
f012677a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012677e:	75 ac                	jne    f012672c <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0126780:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126783:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126789:	85 c0                	test   %eax,%eax
f012678b:	74 17                	je     f01267a4 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f012678d:	83 ec 04             	sub    $0x4,%esp
f0126790:	68 f0 c1 13 f0       	push   $0xf013c1f0
f0126795:	68 c6 09 00 00       	push   $0x9c6
f012679a:	68 5a b6 13 f0       	push   $0xf013b65a
f012679f:	e8 61 9a fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f01267a4:	83 ec 0c             	sub    $0xc,%esp
f01267a7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01267aa:	e8 6e 19 fe ff       	call   f010811d <env_page_ws_get_size>
f01267af:	83 c4 10             	add    $0x10,%esp
f01267b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f01267b5:	e8 e9 66 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01267ba:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f01267bd:	e8 06 d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01267c2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01267c5:	a1 b4 ee 88 f0       	mov    0xf088eeb4,%eax
f01267ca:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01267cd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01267d0:	74 17                	je     f01267e9 <test_three_creation_functions+0x140>
f01267d2:	83 ec 04             	sub    $0x4,%esp
f01267d5:	68 74 b6 13 f0       	push   $0xf013b674
f01267da:	68 cc 09 00 00       	push   $0x9cc
f01267df:	68 5a b6 13 f0       	push   $0xf013b65a
f01267e4:	e8 1c 9a fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f01267e9:	a1 b8 ee 88 f0       	mov    0xf088eeb8,%eax
f01267ee:	2b 45 d8             	sub    -0x28(%ebp),%eax
f01267f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01267f4:	83 c2 15             	add    $0x15,%edx
f01267f7:	39 d0                	cmp    %edx,%eax
f01267f9:	74 17                	je     f0126812 <test_three_creation_functions+0x169>
f01267fb:	83 ec 04             	sub    $0x4,%esp
f01267fe:	68 dc b6 13 f0       	push   $0xf013b6dc
f0126803:	68 ce 09 00 00       	push   $0x9ce
f0126808:	68 5a b6 13 f0       	push   $0xf013b65a
f012680d:	e8 f3 99 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126812:	83 ec 0c             	sub    $0xc,%esp
f0126815:	68 00 10 00 00       	push   $0x1000
f012681a:	e8 6d 13 fe ff       	call   f0107b8c <kmalloc>
f012681f:	83 c4 10             	add    $0x10,%esp
f0126822:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126825:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012682c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012682f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126834:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126837:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012683a:	ba 00 00 00 00       	mov    $0x0,%edx
f012683f:	f7 75 cc             	divl   -0x34(%ebp)
f0126842:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126845:	29 d0                	sub    %edx,%eax
f0126847:	89 c1                	mov    %eax,%ecx
f0126849:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126850:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126855:	0f b6 d0             	movzbl %al,%edx
f0126858:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012685b:	01 d0                	add    %edx,%eax
f012685d:	48                   	dec    %eax
f012685e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126861:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126864:	ba 00 00 00 00       	mov    $0x0,%edx
f0126869:	f7 75 c4             	divl   -0x3c(%ebp)
f012686c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012686f:	29 d0                	sub    %edx,%eax
f0126871:	01 c1                	add    %eax,%ecx
f0126873:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012687a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012687f:	0f b6 c0             	movzbl %al,%eax
f0126882:	c1 e0 04             	shl    $0x4,%eax
f0126885:	89 c2                	mov    %eax,%edx
f0126887:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012688a:	01 d0                	add    %edx,%eax
f012688c:	48                   	dec    %eax
f012688d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126890:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126893:	ba 00 00 00 00       	mov    $0x0,%edx
f0126898:	f7 75 bc             	divl   -0x44(%ebp)
f012689b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012689e:	29 d0                	sub    %edx,%eax
f01268a0:	01 c8                	add    %ecx,%eax
f01268a2:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f01268a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01268ab:	39 c2                	cmp    %eax,%edx
f01268ad:	74 17                	je     f01268c6 <test_three_creation_functions+0x21d>
f01268af:	83 ec 04             	sub    $0x4,%esp
f01268b2:	68 40 c2 13 f0       	push   $0xf013c240
f01268b7:	68 d2 09 00 00       	push   $0x9d2
f01268bc:	68 5a b6 13 f0       	push   $0xf013b65a
f01268c1:	e8 3f 99 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f01268c6:	83 ec 0c             	sub    $0xc,%esp
f01268c9:	68 b0 c2 13 f0       	push   $0xf013c2b0
f01268ce:	e8 3b a4 fd ff       	call   f0100d0e <cprintf>
f01268d3:	83 c4 10             	add    $0x10,%esp

	return 1;
f01268d6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01268db:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01268de:	5b                   	pop    %ebx
f01268df:	5e                   	pop    %esi
f01268e0:	5f                   	pop    %edi
f01268e1:	5d                   	pop    %ebp
f01268e2:	c3                   	ret    

f01268e3 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f01268e3:	55                   	push   %ebp
f01268e4:	89 e5                	mov    %esp,%ebp
f01268e6:	57                   	push   %edi
f01268e7:	53                   	push   %ebx
f01268e8:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f01268ee:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01268f2:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01268f6:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01268fc:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0126902:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126909:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126910:	e8 8e 65 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126915:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126918:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f012691e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126923:	b8 00 00 00 00       	mov    $0x0,%eax
f0126928:	89 d7                	mov    %edx,%edi
f012692a:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012692c:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126932:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126937:	b8 00 00 00 00       	mov    $0x0,%eax
f012693c:	89 d7                	mov    %edx,%edi
f012693e:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126940:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126946:	b9 14 00 00 00       	mov    $0x14,%ecx
f012694b:	b8 00 00 00 00       	mov    $0x0,%eax
f0126950:	89 d7                	mov    %edx,%edi
f0126952:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126954:	e8 4a 65 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126959:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012695c:	e8 67 d4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126961:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126964:	83 ec 0c             	sub    $0xc,%esp
f0126967:	68 00 fc 1f 00       	push   $0x1ffc00
f012696c:	e8 1b 12 fe ff       	call   f0107b8c <kmalloc>
f0126971:	83 c4 10             	add    $0x10,%esp
f0126974:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012697a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126980:	89 c1                	mov    %eax,%ecx
f0126982:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126989:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012698c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126991:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126994:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126997:	ba 00 00 00 00       	mov    $0x0,%edx
f012699c:	f7 75 c8             	divl   -0x38(%ebp)
f012699f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01269a2:	29 d0                	sub    %edx,%eax
f01269a4:	89 c3                	mov    %eax,%ebx
f01269a6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01269ad:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01269b2:	0f b6 d0             	movzbl %al,%edx
f01269b5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01269b8:	01 d0                	add    %edx,%eax
f01269ba:	48                   	dec    %eax
f01269bb:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01269be:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01269c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01269c6:	f7 75 c0             	divl   -0x40(%ebp)
f01269c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01269cc:	29 d0                	sub    %edx,%eax
f01269ce:	01 c3                	add    %eax,%ebx
f01269d0:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01269d7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01269dc:	0f b6 c0             	movzbl %al,%eax
f01269df:	c1 e0 04             	shl    $0x4,%eax
f01269e2:	89 c2                	mov    %eax,%edx
f01269e4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01269e7:	01 d0                	add    %edx,%eax
f01269e9:	48                   	dec    %eax
f01269ea:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01269ed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01269f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01269f5:	f7 75 b8             	divl   -0x48(%ebp)
f01269f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01269fb:	29 d0                	sub    %edx,%eax
f01269fd:	01 d8                	add    %ebx,%eax
f01269ff:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126a04:	39 c1                	cmp    %eax,%ecx
f0126a06:	74 17                	je     f0126a1f <test_kfreeall+0x13c>
f0126a08:	83 ec 04             	sub    $0x4,%esp
f0126a0b:	68 40 b7 13 f0       	push   $0xf013b740
f0126a10:	68 f9 09 00 00       	push   $0x9f9
f0126a15:	68 5a b6 13 f0       	push   $0xf013b65a
f0126a1a:	e8 e6 97 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a1f:	e8 a4 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a24:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a27:	74 17                	je     f0126a40 <test_kfreeall+0x15d>
f0126a29:	83 ec 04             	sub    $0x4,%esp
f0126a2c:	68 74 b6 13 f0       	push   $0xf013b674
f0126a31:	68 fa 09 00 00       	push   $0x9fa
f0126a36:	68 5a b6 13 f0       	push   $0xf013b65a
f0126a3b:	e8 c5 97 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a40:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a43:	e8 5b 64 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126a48:	29 c3                	sub    %eax,%ebx
f0126a4a:	89 d8                	mov    %ebx,%eax
f0126a4c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126a51:	74 17                	je     f0126a6a <test_kfreeall+0x187>
f0126a53:	83 ec 04             	sub    $0x4,%esp
f0126a56:	68 dc b6 13 f0       	push   $0xf013b6dc
f0126a5b:	68 fb 09 00 00       	push   $0x9fb
f0126a60:	68 5a b6 13 f0       	push   $0xf013b65a
f0126a65:	e8 9b 97 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126a6a:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126a71:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126a74:	e8 2a 64 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126a79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a7c:	e8 47 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a81:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126a84:	83 ec 0c             	sub    $0xc,%esp
f0126a87:	68 00 fc 1f 00       	push   $0x1ffc00
f0126a8c:	e8 fb 10 fe ff       	call   f0107b8c <kmalloc>
f0126a91:	83 c4 10             	add    $0x10,%esp
f0126a94:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a9a:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126aa0:	89 c1                	mov    %eax,%ecx
f0126aa2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126aa9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126aac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ab1:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126ab4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126ab7:	ba 00 00 00 00       	mov    $0x0,%edx
f0126abc:	f7 75 b0             	divl   -0x50(%ebp)
f0126abf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126ac2:	29 d0                	sub    %edx,%eax
f0126ac4:	89 c3                	mov    %eax,%ebx
f0126ac6:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126acd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126ad2:	0f b6 d0             	movzbl %al,%edx
f0126ad5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126ad8:	01 d0                	add    %edx,%eax
f0126ada:	48                   	dec    %eax
f0126adb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126ade:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126ae1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ae6:	f7 75 a8             	divl   -0x58(%ebp)
f0126ae9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126aec:	29 d0                	sub    %edx,%eax
f0126aee:	01 c3                	add    %eax,%ebx
f0126af0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126af7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126afc:	0f b6 c0             	movzbl %al,%eax
f0126aff:	c1 e0 04             	shl    $0x4,%eax
f0126b02:	89 c2                	mov    %eax,%edx
f0126b04:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126b07:	01 d0                	add    %edx,%eax
f0126b09:	48                   	dec    %eax
f0126b0a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126b0d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126b10:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b15:	f7 75 a0             	divl   -0x60(%ebp)
f0126b18:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126b1b:	29 d0                	sub    %edx,%eax
f0126b1d:	01 d8                	add    %ebx,%eax
f0126b1f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126b24:	39 c1                	cmp    %eax,%ecx
f0126b26:	74 17                	je     f0126b3f <test_kfreeall+0x25c>
f0126b28:	83 ec 04             	sub    $0x4,%esp
f0126b2b:	68 40 b7 13 f0       	push   $0xf013b740
f0126b30:	68 02 0a 00 00       	push   $0xa02
f0126b35:	68 5a b6 13 f0       	push   $0xf013b65a
f0126b3a:	e8 c6 96 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b3f:	e8 84 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b44:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b47:	74 17                	je     f0126b60 <test_kfreeall+0x27d>
f0126b49:	83 ec 04             	sub    $0x4,%esp
f0126b4c:	68 74 b6 13 f0       	push   $0xf013b674
f0126b51:	68 03 0a 00 00       	push   $0xa03
f0126b56:	68 5a b6 13 f0       	push   $0xf013b65a
f0126b5b:	e8 a5 96 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b60:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126b63:	e8 3b 63 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126b68:	29 c3                	sub    %eax,%ebx
f0126b6a:	89 d8                	mov    %ebx,%eax
f0126b6c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126b71:	74 17                	je     f0126b8a <test_kfreeall+0x2a7>
f0126b73:	83 ec 04             	sub    $0x4,%esp
f0126b76:	68 dc b6 13 f0       	push   $0xf013b6dc
f0126b7b:	68 04 0a 00 00       	push   $0xa04
f0126b80:	68 5a b6 13 f0       	push   $0xf013b65a
f0126b85:	e8 7b 96 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126b8a:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126b91:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126b94:	e8 0a 63 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126b99:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b9c:	e8 27 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126ba1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126ba4:	83 ec 0c             	sub    $0xc,%esp
f0126ba7:	68 00 08 00 00       	push   $0x800
f0126bac:	e8 db 0f fe ff       	call   f0107b8c <kmalloc>
f0126bb1:	83 c4 10             	add    $0x10,%esp
f0126bb4:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126bba:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126bc0:	89 c1                	mov    %eax,%ecx
f0126bc2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126bc9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126bcc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126bd1:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126bd4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126bd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bdc:	f7 75 98             	divl   -0x68(%ebp)
f0126bdf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126be2:	29 d0                	sub    %edx,%eax
f0126be4:	89 c3                	mov    %eax,%ebx
f0126be6:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126bed:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126bf2:	0f b6 d0             	movzbl %al,%edx
f0126bf5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126bf8:	01 d0                	add    %edx,%eax
f0126bfa:	48                   	dec    %eax
f0126bfb:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126bfe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126c01:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c06:	f7 75 90             	divl   -0x70(%ebp)
f0126c09:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126c0c:	29 d0                	sub    %edx,%eax
f0126c0e:	01 c3                	add    %eax,%ebx
f0126c10:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126c17:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126c1c:	0f b6 c0             	movzbl %al,%eax
f0126c1f:	c1 e0 04             	shl    $0x4,%eax
f0126c22:	89 c2                	mov    %eax,%edx
f0126c24:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126c27:	01 d0                	add    %edx,%eax
f0126c29:	48                   	dec    %eax
f0126c2a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126c2d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126c30:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c35:	f7 75 88             	divl   -0x78(%ebp)
f0126c38:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126c3b:	29 d0                	sub    %edx,%eax
f0126c3d:	01 d8                	add    %ebx,%eax
f0126c3f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126c44:	39 c1                	cmp    %eax,%ecx
f0126c46:	74 17                	je     f0126c5f <test_kfreeall+0x37c>
f0126c48:	83 ec 04             	sub    $0x4,%esp
f0126c4b:	68 40 b7 13 f0       	push   $0xf013b740
f0126c50:	68 0b 0a 00 00       	push   $0xa0b
f0126c55:	68 5a b6 13 f0       	push   $0xf013b65a
f0126c5a:	e8 a6 95 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c5f:	e8 64 d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126c64:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126c67:	74 17                	je     f0126c80 <test_kfreeall+0x39d>
f0126c69:	83 ec 04             	sub    $0x4,%esp
f0126c6c:	68 74 b6 13 f0       	push   $0xf013b674
f0126c71:	68 0c 0a 00 00       	push   $0xa0c
f0126c76:	68 5a b6 13 f0       	push   $0xf013b65a
f0126c7b:	e8 85 95 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c80:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126c83:	e8 1b 62 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126c88:	29 c3                	sub    %eax,%ebx
f0126c8a:	89 d8                	mov    %ebx,%eax
f0126c8c:	83 f8 01             	cmp    $0x1,%eax
f0126c8f:	74 17                	je     f0126ca8 <test_kfreeall+0x3c5>
f0126c91:	83 ec 04             	sub    $0x4,%esp
f0126c94:	68 dc b6 13 f0       	push   $0xf013b6dc
f0126c99:	68 0d 0a 00 00       	push   $0xa0d
f0126c9e:	68 5a b6 13 f0       	push   $0xf013b65a
f0126ca3:	e8 5d 95 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126ca8:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126caf:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126cb2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126cb8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126cbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126cc2:	eb 0e                	jmp    f0126cd2 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126cc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126cc7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cca:	01 d0                	add    %edx,%eax
f0126ccc:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126ccf:	ff 45 f4             	incl   -0xc(%ebp)
f0126cd2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126cd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126cdb:	7f e7                	jg     f0126cc4 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126cdd:	e8 c1 61 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126ce2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ce5:	e8 de d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126cea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126ced:	83 ec 0c             	sub    $0xc,%esp
f0126cf0:	68 00 08 00 00       	push   $0x800
f0126cf5:	e8 92 0e fe ff       	call   f0107b8c <kmalloc>
f0126cfa:	83 c4 10             	add    $0x10,%esp
f0126cfd:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126d03:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126d09:	89 c1                	mov    %eax,%ecx
f0126d0b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0126d12:	10 00 00 
f0126d15:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126d1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d20:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126d26:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126d2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d31:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126d37:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126d3d:	29 d0                	sub    %edx,%eax
f0126d3f:	89 c3                	mov    %eax,%ebx
f0126d41:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126d48:	10 00 00 
f0126d4b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126d50:	0f b6 d0             	movzbl %al,%edx
f0126d53:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126d59:	01 d0                	add    %edx,%eax
f0126d5b:	48                   	dec    %eax
f0126d5c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0126d62:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126d68:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d6d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126d73:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126d79:	29 d0                	sub    %edx,%eax
f0126d7b:	01 c3                	add    %eax,%ebx
f0126d7d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126d84:	10 00 00 
f0126d87:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126d8c:	0f b6 c0             	movzbl %al,%eax
f0126d8f:	c1 e0 04             	shl    $0x4,%eax
f0126d92:	89 c2                	mov    %eax,%edx
f0126d94:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126d9a:	01 d0                	add    %edx,%eax
f0126d9c:	48                   	dec    %eax
f0126d9d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0126da3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126da9:	ba 00 00 00 00       	mov    $0x0,%edx
f0126dae:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0126db4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126dba:	29 d0                	sub    %edx,%eax
f0126dbc:	01 d8                	add    %ebx,%eax
f0126dbe:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126dc3:	39 c1                	cmp    %eax,%ecx
f0126dc5:	74 17                	je     f0126dde <test_kfreeall+0x4fb>
f0126dc7:	83 ec 04             	sub    $0x4,%esp
f0126dca:	68 40 b7 13 f0       	push   $0xf013b740
f0126dcf:	68 19 0a 00 00       	push   $0xa19
f0126dd4:	68 5a b6 13 f0       	push   $0xf013b65a
f0126dd9:	e8 27 94 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126dde:	e8 e5 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126de3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126de6:	74 17                	je     f0126dff <test_kfreeall+0x51c>
f0126de8:	83 ec 04             	sub    $0x4,%esp
f0126deb:	68 74 b6 13 f0       	push   $0xf013b674
f0126df0:	68 1a 0a 00 00       	push   $0xa1a
f0126df5:	68 5a b6 13 f0       	push   $0xf013b65a
f0126dfa:	e8 06 94 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126dff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e02:	e8 9c 60 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126e07:	29 c3                	sub    %eax,%ebx
f0126e09:	89 d8                	mov    %ebx,%eax
f0126e0b:	83 f8 01             	cmp    $0x1,%eax
f0126e0e:	74 17                	je     f0126e27 <test_kfreeall+0x544>
f0126e10:	83 ec 04             	sub    $0x4,%esp
f0126e13:	68 dc b6 13 f0       	push   $0xf013b6dc
f0126e18:	68 1b 0a 00 00       	push   $0xa1b
f0126e1d:	68 5a b6 13 f0       	push   $0xf013b65a
f0126e22:	e8 de 93 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126e27:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126e2e:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126e31:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126e37:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126e3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e41:	eb 0e                	jmp    f0126e51 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126e43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126e46:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126e49:	01 d0                	add    %edx,%eax
f0126e4b:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126e4e:	ff 45 f4             	incl   -0xc(%ebp)
f0126e51:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126e57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e5a:	7f e7                	jg     f0126e43 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e5c:	e8 42 60 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126e61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e64:	e8 5f cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126e69:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126e6c:	83 ec 0c             	sub    $0xc,%esp
f0126e6f:	68 00 1c 00 00       	push   $0x1c00
f0126e74:	e8 13 0d fe ff       	call   f0107b8c <kmalloc>
f0126e79:	83 c4 10             	add    $0x10,%esp
f0126e7c:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e82:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126e88:	89 c1                	mov    %eax,%ecx
f0126e8a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126e91:	10 00 00 
f0126e94:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126e9a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e9f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126ea5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126eab:	ba 00 00 00 00       	mov    $0x0,%edx
f0126eb0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126eb6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126ebc:	29 d0                	sub    %edx,%eax
f0126ebe:	89 c3                	mov    %eax,%ebx
f0126ec0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126ec7:	10 00 00 
f0126eca:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126ecf:	0f b6 d0             	movzbl %al,%edx
f0126ed2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126ed8:	01 d0                	add    %edx,%eax
f0126eda:	48                   	dec    %eax
f0126edb:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126ee1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126ee7:	ba 00 00 00 00       	mov    $0x0,%edx
f0126eec:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126ef2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126ef8:	29 d0                	sub    %edx,%eax
f0126efa:	01 c3                	add    %eax,%ebx
f0126efc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126f03:	10 00 00 
f0126f06:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0126f0b:	0f b6 c0             	movzbl %al,%eax
f0126f0e:	c1 e0 04             	shl    $0x4,%eax
f0126f11:	89 c2                	mov    %eax,%edx
f0126f13:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126f19:	01 d0                	add    %edx,%eax
f0126f1b:	48                   	dec    %eax
f0126f1c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126f22:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126f28:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f2d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126f33:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126f39:	29 d0                	sub    %edx,%eax
f0126f3b:	01 d8                	add    %ebx,%eax
f0126f3d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126f42:	39 c1                	cmp    %eax,%ecx
f0126f44:	74 17                	je     f0126f5d <test_kfreeall+0x67a>
f0126f46:	83 ec 04             	sub    $0x4,%esp
f0126f49:	68 40 b7 13 f0       	push   $0xf013b740
f0126f4e:	68 27 0a 00 00       	push   $0xa27
f0126f53:	68 5a b6 13 f0       	push   $0xf013b65a
f0126f58:	e8 a8 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f5d:	e8 66 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126f62:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f65:	74 17                	je     f0126f7e <test_kfreeall+0x69b>
f0126f67:	83 ec 04             	sub    $0x4,%esp
f0126f6a:	68 74 b6 13 f0       	push   $0xf013b674
f0126f6f:	68 28 0a 00 00       	push   $0xa28
f0126f74:	68 5a b6 13 f0       	push   $0xf013b65a
f0126f79:	e8 87 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f7e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f81:	e8 1d 5f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126f86:	29 c3                	sub    %eax,%ebx
f0126f88:	89 d8                	mov    %ebx,%eax
f0126f8a:	83 f8 02             	cmp    $0x2,%eax
f0126f8d:	74 17                	je     f0126fa6 <test_kfreeall+0x6c3>
f0126f8f:	83 ec 04             	sub    $0x4,%esp
f0126f92:	68 dc b6 13 f0       	push   $0xf013b6dc
f0126f97:	68 29 0a 00 00       	push   $0xa29
f0126f9c:	68 5a b6 13 f0       	push   $0xf013b65a
f0126fa1:	e8 5f 92 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126fa6:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126fad:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126fb0:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126fb6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126fb9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126fc0:	eb 0e                	jmp    f0126fd0 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126fc2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126fc5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126fc8:	01 d0                	add    %edx,%eax
f0126fca:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126fcd:	ff 45 f4             	incl   -0xc(%ebp)
f0126fd0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126fd6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126fd9:	7f e7                	jg     f0126fc2 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126fdb:	e8 c3 5e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0126fe0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126fe3:	e8 e0 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126fe8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126feb:	83 ec 0c             	sub    $0xc,%esp
f0126fee:	68 00 fc 2f 00       	push   $0x2ffc00
f0126ff3:	e8 94 0b fe ff       	call   f0107b8c <kmalloc>
f0126ff8:	83 c4 10             	add    $0x10,%esp
f0126ffb:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127001:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127007:	89 c1                	mov    %eax,%ecx
f0127009:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0127010:	10 00 00 
f0127013:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127019:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012701e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0127024:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012702a:	ba 00 00 00 00       	mov    $0x0,%edx
f012702f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0127035:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012703b:	29 d0                	sub    %edx,%eax
f012703d:	89 c3                	mov    %eax,%ebx
f012703f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0127046:	10 00 00 
f0127049:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012704e:	0f b6 d0             	movzbl %al,%edx
f0127051:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127057:	01 d0                	add    %edx,%eax
f0127059:	48                   	dec    %eax
f012705a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0127060:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127066:	ba 00 00 00 00       	mov    $0x0,%edx
f012706b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0127071:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127077:	29 d0                	sub    %edx,%eax
f0127079:	01 c3                	add    %eax,%ebx
f012707b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0127082:	10 00 00 
f0127085:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012708a:	0f b6 c0             	movzbl %al,%eax
f012708d:	c1 e0 04             	shl    $0x4,%eax
f0127090:	89 c2                	mov    %eax,%edx
f0127092:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127098:	01 d0                	add    %edx,%eax
f012709a:	48                   	dec    %eax
f012709b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01270a1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01270a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01270ac:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01270b2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01270b8:	29 d0                	sub    %edx,%eax
f01270ba:	01 d8                	add    %ebx,%eax
f01270bc:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01270c1:	39 c1                	cmp    %eax,%ecx
f01270c3:	74 17                	je     f01270dc <test_kfreeall+0x7f9>
f01270c5:	83 ec 04             	sub    $0x4,%esp
f01270c8:	68 40 b7 13 f0       	push   $0xf013b740
f01270cd:	68 35 0a 00 00       	push   $0xa35
f01270d2:	68 5a b6 13 f0       	push   $0xf013b65a
f01270d7:	e8 29 91 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270dc:	e8 e7 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270e1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01270e4:	74 17                	je     f01270fd <test_kfreeall+0x81a>
f01270e6:	83 ec 04             	sub    $0x4,%esp
f01270e9:	68 74 b6 13 f0       	push   $0xf013b674
f01270ee:	68 36 0a 00 00       	push   $0xa36
f01270f3:	68 5a b6 13 f0       	push   $0xf013b65a
f01270f8:	e8 08 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270fd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127100:	e8 9e 5d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127105:	29 c3                	sub    %eax,%ebx
f0127107:	89 d8                	mov    %ebx,%eax
f0127109:	3d 00 03 00 00       	cmp    $0x300,%eax
f012710e:	74 17                	je     f0127127 <test_kfreeall+0x844>
f0127110:	83 ec 04             	sub    $0x4,%esp
f0127113:	68 dc b6 13 f0       	push   $0xf013b6dc
f0127118:	68 37 0a 00 00       	push   $0xa37
f012711d:	68 5a b6 13 f0       	push   $0xf013b65a
f0127122:	e8 de 90 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127127:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012712e:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127131:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127137:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012713a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127141:	eb 0e                	jmp    f0127151 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0127143:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127146:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127149:	01 d0                	add    %edx,%eax
f012714b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012714e:	ff 45 f4             	incl   -0xc(%ebp)
f0127151:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127157:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012715a:	7f e7                	jg     f0127143 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012715c:	e8 42 5d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127161:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127164:	e8 5f cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127169:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012716c:	83 ec 0c             	sub    $0xc,%esp
f012716f:	68 00 fc 5f 00       	push   $0x5ffc00
f0127174:	e8 13 0a fe ff       	call   f0107b8c <kmalloc>
f0127179:	83 c4 10             	add    $0x10,%esp
f012717c:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127182:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127188:	89 c1                	mov    %eax,%ecx
f012718a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0127191:	10 00 00 
f0127194:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012719a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012719f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01271a5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01271ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01271b0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01271b6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01271bc:	29 d0                	sub    %edx,%eax
f01271be:	89 c3                	mov    %eax,%ebx
f01271c0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01271c7:	10 00 00 
f01271ca:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01271cf:	0f b6 d0             	movzbl %al,%edx
f01271d2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01271d8:	01 d0                	add    %edx,%eax
f01271da:	48                   	dec    %eax
f01271db:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01271e1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01271e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01271ec:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01271f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01271f8:	29 d0                	sub    %edx,%eax
f01271fa:	01 c3                	add    %eax,%ebx
f01271fc:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0127203:	10 00 00 
f0127206:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012720b:	0f b6 c0             	movzbl %al,%eax
f012720e:	c1 e0 04             	shl    $0x4,%eax
f0127211:	89 c2                	mov    %eax,%edx
f0127213:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0127219:	01 d0                	add    %edx,%eax
f012721b:	48                   	dec    %eax
f012721c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0127222:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127228:	ba 00 00 00 00       	mov    $0x0,%edx
f012722d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0127233:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127239:	29 d0                	sub    %edx,%eax
f012723b:	01 d8                	add    %ebx,%eax
f012723d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127242:	39 c1                	cmp    %eax,%ecx
f0127244:	74 17                	je     f012725d <test_kfreeall+0x97a>
f0127246:	83 ec 04             	sub    $0x4,%esp
f0127249:	68 40 b7 13 f0       	push   $0xf013b740
f012724e:	68 43 0a 00 00       	push   $0xa43
f0127253:	68 5a b6 13 f0       	push   $0xf013b65a
f0127258:	e8 a8 8f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012725d:	e8 66 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127262:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127265:	74 17                	je     f012727e <test_kfreeall+0x99b>
f0127267:	83 ec 04             	sub    $0x4,%esp
f012726a:	68 74 b6 13 f0       	push   $0xf013b674
f012726f:	68 44 0a 00 00       	push   $0xa44
f0127274:	68 5a b6 13 f0       	push   $0xf013b65a
f0127279:	e8 87 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012727e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127281:	e8 1d 5c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127286:	29 c3                	sub    %eax,%ebx
f0127288:	89 d8                	mov    %ebx,%eax
f012728a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012728f:	74 17                	je     f01272a8 <test_kfreeall+0x9c5>
f0127291:	83 ec 04             	sub    $0x4,%esp
f0127294:	68 dc b6 13 f0       	push   $0xf013b6dc
f0127299:	68 45 0a 00 00       	push   $0xa45
f012729e:	68 5a b6 13 f0       	push   $0xf013b65a
f01272a3:	e8 5d 8f fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01272a8:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01272af:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01272b2:	e8 ec 5b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01272b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01272ba:	e8 09 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01272bf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01272c2:	83 ec 0c             	sub    $0xc,%esp
f01272c5:	68 00 38 00 00       	push   $0x3800
f01272ca:	e8 bd 08 fe ff       	call   f0107b8c <kmalloc>
f01272cf:	83 c4 10             	add    $0x10,%esp
f01272d2:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01272d8:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01272de:	89 c1                	mov    %eax,%ecx
f01272e0:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01272e7:	10 00 00 
f01272ea:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01272f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01272f5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01272fb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127301:	ba 00 00 00 00       	mov    $0x0,%edx
f0127306:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012730c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127312:	29 d0                	sub    %edx,%eax
f0127314:	89 c3                	mov    %eax,%ebx
f0127316:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012731d:	10 00 00 
f0127320:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127325:	0f b6 d0             	movzbl %al,%edx
f0127328:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012732e:	01 d0                	add    %edx,%eax
f0127330:	48                   	dec    %eax
f0127331:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0127337:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012733d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127342:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0127348:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012734e:	29 d0                	sub    %edx,%eax
f0127350:	01 c3                	add    %eax,%ebx
f0127352:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0127359:	10 00 00 
f012735c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127361:	0f b6 c0             	movzbl %al,%eax
f0127364:	c1 e0 04             	shl    $0x4,%eax
f0127367:	89 c2                	mov    %eax,%edx
f0127369:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012736f:	01 d0                	add    %edx,%eax
f0127371:	48                   	dec    %eax
f0127372:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0127378:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012737e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127383:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0127389:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012738f:	29 d0                	sub    %edx,%eax
f0127391:	01 d8                	add    %ebx,%eax
f0127393:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0127398:	39 c1                	cmp    %eax,%ecx
f012739a:	74 17                	je     f01273b3 <test_kfreeall+0xad0>
f012739c:	83 ec 04             	sub    $0x4,%esp
f012739f:	68 40 b7 13 f0       	push   $0xf013b740
f01273a4:	68 4c 0a 00 00       	push   $0xa4c
f01273a9:	68 5a b6 13 f0       	push   $0xf013b65a
f01273ae:	e8 52 8e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273b3:	e8 10 ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01273b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01273bb:	74 17                	je     f01273d4 <test_kfreeall+0xaf1>
f01273bd:	83 ec 04             	sub    $0x4,%esp
f01273c0:	68 74 b6 13 f0       	push   $0xf013b674
f01273c5:	68 4d 0a 00 00       	push   $0xa4d
f01273ca:	68 5a b6 13 f0       	push   $0xf013b65a
f01273cf:	e8 31 8e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273d4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01273d7:	e8 c7 5a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01273dc:	29 c3                	sub    %eax,%ebx
f01273de:	89 d8                	mov    %ebx,%eax
f01273e0:	83 f8 04             	cmp    $0x4,%eax
f01273e3:	74 17                	je     f01273fc <test_kfreeall+0xb19>
f01273e5:	83 ec 04             	sub    $0x4,%esp
f01273e8:	68 dc b6 13 f0       	push   $0xf013b6dc
f01273ed:	68 4e 0a 00 00       	push   $0xa4e
f01273f2:	68 5a b6 13 f0       	push   $0xf013b65a
f01273f7:	e8 09 8e fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01273fc:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0127403:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0127406:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012740c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012740f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127416:	eb 0e                	jmp    f0127426 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0127418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012741b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012741e:	01 d0                	add    %edx,%eax
f0127420:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127423:	ff 45 f4             	incl   -0xc(%ebp)
f0127426:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012742c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012742f:	7f e7                	jg     f0127418 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0127431:	e8 6d 5a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127436:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012743c:	e8 87 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127441:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0127447:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012744d:	83 ec 0c             	sub    $0xc,%esp
f0127450:	50                   	push   %eax
f0127451:	e8 01 08 fe ff       	call   f0107c57 <kfree>
f0127456:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127459:	e8 6a c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012745e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127464:	74 17                	je     f012747d <test_kfreeall+0xb9a>
f0127466:	83 ec 04             	sub    $0x4,%esp
f0127469:	68 74 b6 13 f0       	push   $0xf013b674
f012746e:	68 5d 0a 00 00       	push   $0xa5d
f0127473:	68 5a b6 13 f0       	push   $0xf013b65a
f0127478:	e8 88 8d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012747d:	e8 21 5a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127482:	89 c2                	mov    %eax,%edx
f0127484:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012748a:	29 c2                	sub    %eax,%edx
f012748c:	89 d0                	mov    %edx,%eax
f012748e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127493:	74 17                	je     f01274ac <test_kfreeall+0xbc9>
f0127495:	83 ec 04             	sub    $0x4,%esp
f0127498:	68 e4 bd 13 f0       	push   $0xf013bde4
f012749d:	68 5e 0a 00 00       	push   $0xa5e
f01274a2:	68 5a b6 13 f0       	push   $0xf013b65a
f01274a7:	e8 59 8d fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01274ac:	e8 f2 59 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01274b1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274b7:	e8 0c c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01274bc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01274c2:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01274c8:	83 ec 0c             	sub    $0xc,%esp
f01274cb:	50                   	push   %eax
f01274cc:	e8 86 07 fe ff       	call   f0107c57 <kfree>
f01274d1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274d4:	e8 ef c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01274d9:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01274df:	74 17                	je     f01274f8 <test_kfreeall+0xc15>
f01274e1:	83 ec 04             	sub    $0x4,%esp
f01274e4:	68 74 b6 13 f0       	push   $0xf013b674
f01274e9:	68 64 0a 00 00       	push   $0xa64
f01274ee:	68 5a b6 13 f0       	push   $0xf013b65a
f01274f3:	e8 0d 8d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01274f8:	e8 a6 59 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01274fd:	89 c2                	mov    %eax,%edx
f01274ff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127505:	29 c2                	sub    %eax,%edx
f0127507:	89 d0                	mov    %edx,%eax
f0127509:	3d 00 02 00 00       	cmp    $0x200,%eax
f012750e:	74 17                	je     f0127527 <test_kfreeall+0xc44>
f0127510:	83 ec 04             	sub    $0x4,%esp
f0127513:	68 e4 bd 13 f0       	push   $0xf013bde4
f0127518:	68 65 0a 00 00       	push   $0xa65
f012751d:	68 5a b6 13 f0       	push   $0xf013b65a
f0127522:	e8 de 8c fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127527:	e8 77 59 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012752c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127532:	e8 91 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127537:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012753d:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127543:	83 ec 0c             	sub    $0xc,%esp
f0127546:	50                   	push   %eax
f0127547:	e8 0b 07 fe ff       	call   f0107c57 <kfree>
f012754c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012754f:	e8 74 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127554:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012755a:	74 17                	je     f0127573 <test_kfreeall+0xc90>
f012755c:	83 ec 04             	sub    $0x4,%esp
f012755f:	68 74 b6 13 f0       	push   $0xf013b674
f0127564:	68 6b 0a 00 00       	push   $0xa6b
f0127569:	68 5a b6 13 f0       	push   $0xf013b65a
f012756e:	e8 92 8c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0127573:	e8 2b 59 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127578:	89 c2                	mov    %eax,%edx
f012757a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127580:	29 c2                	sub    %eax,%edx
f0127582:	89 d0                	mov    %edx,%eax
f0127584:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127589:	74 17                	je     f01275a2 <test_kfreeall+0xcbf>
f012758b:	83 ec 04             	sub    $0x4,%esp
f012758e:	68 e4 bd 13 f0       	push   $0xf013bde4
f0127593:	68 6c 0a 00 00       	push   $0xa6c
f0127598:	68 5a b6 13 f0       	push   $0xf013b65a
f012759d:	e8 63 8c fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01275a2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01275a8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01275ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275b2:	eb 1e                	jmp    f01275d2 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f01275b4:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01275ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01275bd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01275c0:	01 c8                	add    %ecx,%eax
f01275c2:	8a 00                	mov    (%eax),%al
f01275c4:	0f be c0             	movsbl %al,%eax
f01275c7:	01 d0                	add    %edx,%eax
f01275c9:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01275cf:	ff 45 f4             	incl   -0xc(%ebp)
f01275d2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01275d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01275db:	7f d7                	jg     f01275b4 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01275dd:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01275e3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01275e9:	01 c0                	add    %eax,%eax
f01275eb:	39 c2                	cmp    %eax,%edx
f01275ed:	74 17                	je     f0127606 <test_kfreeall+0xd23>
f01275ef:	83 ec 04             	sub    $0x4,%esp
f01275f2:	68 40 be 13 f0       	push   $0xf013be40
f01275f7:	68 78 0a 00 00       	push   $0xa78
f01275fc:	68 5a b6 13 f0       	push   $0xf013b65a
f0127601:	e8 ff 8b fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0127606:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012760c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012760f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127616:	eb 1e                	jmp    f0127636 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127618:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012761e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127621:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127624:	01 c8                	add    %ecx,%eax
f0127626:	8a 00                	mov    (%eax),%al
f0127628:	0f be c0             	movsbl %al,%eax
f012762b:	01 d0                	add    %edx,%eax
f012762d:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127633:	ff 45 f4             	incl   -0xc(%ebp)
f0127636:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012763c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012763f:	7f d7                	jg     f0127618 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0127641:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127647:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012764d:	89 c1                	mov    %eax,%ecx
f012764f:	01 c9                	add    %ecx,%ecx
f0127651:	01 c8                	add    %ecx,%eax
f0127653:	39 c2                	cmp    %eax,%edx
f0127655:	74 17                	je     f012766e <test_kfreeall+0xd8b>
f0127657:	83 ec 04             	sub    $0x4,%esp
f012765a:	68 40 be 13 f0       	push   $0xf013be40
f012765f:	68 80 0a 00 00       	push   $0xa80
f0127664:	68 5a b6 13 f0       	push   $0xf013b65a
f0127669:	e8 97 8b fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012766e:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127674:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127677:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012767e:	eb 1e                	jmp    f012769e <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0127680:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0127686:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127689:	8b 45 80             	mov    -0x80(%ebp),%eax
f012768c:	01 c8                	add    %ecx,%eax
f012768e:	8a 00                	mov    (%eax),%al
f0127690:	0f be c0             	movsbl %al,%eax
f0127693:	01 d0                	add    %edx,%eax
f0127695:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012769b:	ff 45 f4             	incl   -0xc(%ebp)
f012769e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01276a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01276a7:	7f d7                	jg     f0127680 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01276a9:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01276af:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01276b5:	c1 e2 02             	shl    $0x2,%edx
f01276b8:	39 d0                	cmp    %edx,%eax
f01276ba:	74 17                	je     f01276d3 <test_kfreeall+0xdf0>
f01276bc:	83 ec 04             	sub    $0x4,%esp
f01276bf:	68 40 be 13 f0       	push   $0xf013be40
f01276c4:	68 88 0a 00 00       	push   $0xa88
f01276c9:	68 5a b6 13 f0       	push   $0xf013b65a
f01276ce:	e8 32 8b fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01276d3:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01276d9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01276dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01276e3:	eb 1e                	jmp    f0127703 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f01276e5:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01276eb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01276ee:	8b 45 80             	mov    -0x80(%ebp),%eax
f01276f1:	01 c8                	add    %ecx,%eax
f01276f3:	8a 00                	mov    (%eax),%al
f01276f5:	0f be c0             	movsbl %al,%eax
f01276f8:	01 d0                	add    %edx,%eax
f01276fa:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127700:	ff 45 f4             	incl   -0xc(%ebp)
f0127703:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127709:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012770c:	7f d7                	jg     f01276e5 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012770e:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127714:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012771a:	89 d0                	mov    %edx,%eax
f012771c:	c1 e0 02             	shl    $0x2,%eax
f012771f:	01 d0                	add    %edx,%eax
f0127721:	39 c1                	cmp    %eax,%ecx
f0127723:	74 17                	je     f012773c <test_kfreeall+0xe59>
f0127725:	83 ec 04             	sub    $0x4,%esp
f0127728:	68 40 be 13 f0       	push   $0xf013be40
f012772d:	68 90 0a 00 00       	push   $0xa90
f0127732:	68 5a b6 13 f0       	push   $0xf013b65a
f0127737:	e8 c9 8a fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012773c:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127742:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127745:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012774c:	eb 1e                	jmp    f012776c <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f012774e:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127754:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127757:	8b 45 80             	mov    -0x80(%ebp),%eax
f012775a:	01 c8                	add    %ecx,%eax
f012775c:	8a 00                	mov    (%eax),%al
f012775e:	0f be c0             	movsbl %al,%eax
f0127761:	01 d0                	add    %edx,%eax
f0127763:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127769:	ff 45 f4             	incl   -0xc(%ebp)
f012776c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127772:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127775:	7f d7                	jg     f012774e <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127777:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012777d:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127783:	89 d0                	mov    %edx,%eax
f0127785:	01 c0                	add    %eax,%eax
f0127787:	01 d0                	add    %edx,%eax
f0127789:	01 c0                	add    %eax,%eax
f012778b:	01 d0                	add    %edx,%eax
f012778d:	39 c1                	cmp    %eax,%ecx
f012778f:	74 17                	je     f01277a8 <test_kfreeall+0xec5>
f0127791:	83 ec 04             	sub    $0x4,%esp
f0127794:	68 40 be 13 f0       	push   $0xf013be40
f0127799:	68 98 0a 00 00       	push   $0xa98
f012779e:	68 5a b6 13 f0       	push   $0xf013b65a
f01277a3:	e8 5d 8a fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01277a8:	e8 f6 56 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01277ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01277b0:	e8 13 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01277b5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01277b8:	83 ec 0c             	sub    $0xc,%esp
f01277bb:	68 00 50 00 00       	push   $0x5000
f01277c0:	e8 c7 03 fe ff       	call   f0107b8c <kmalloc>
f01277c5:	83 c4 10             	add    $0x10,%esp
f01277c8:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01277ce:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01277d4:	89 c1                	mov    %eax,%ecx
f01277d6:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01277dd:	10 00 00 
f01277e0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01277e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01277eb:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01277f1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01277f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01277fc:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0127802:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127808:	29 d0                	sub    %edx,%eax
f012780a:	89 c3                	mov    %eax,%ebx
f012780c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127813:	10 00 00 
f0127816:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012781b:	0f b6 d0             	movzbl %al,%edx
f012781e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127824:	01 d0                	add    %edx,%eax
f0127826:	48                   	dec    %eax
f0127827:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012782d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127833:	ba 00 00 00 00       	mov    $0x0,%edx
f0127838:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012783e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127844:	29 d0                	sub    %edx,%eax
f0127846:	01 c3                	add    %eax,%ebx
f0127848:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012784f:	10 00 00 
f0127852:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127857:	0f b6 c0             	movzbl %al,%eax
f012785a:	c1 e0 04             	shl    $0x4,%eax
f012785d:	89 c2                	mov    %eax,%edx
f012785f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127865:	01 d0                	add    %edx,%eax
f0127867:	48                   	dec    %eax
f0127868:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012786e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127874:	ba 00 00 00 00       	mov    $0x0,%edx
f0127879:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012787f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127885:	29 d0                	sub    %edx,%eax
f0127887:	01 d8                	add    %ebx,%eax
f0127889:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012788e:	39 c1                	cmp    %eax,%ecx
f0127890:	74 17                	je     f01278a9 <test_kfreeall+0xfc6>
f0127892:	83 ec 04             	sub    $0x4,%esp
f0127895:	68 40 b7 13 f0       	push   $0xf013b740
f012789a:	68 a1 0a 00 00       	push   $0xaa1
f012789f:	68 5a b6 13 f0       	push   $0xf013b65a
f01278a4:	e8 5c 89 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01278a9:	e8 1a c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01278ae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01278b1:	74 17                	je     f01278ca <test_kfreeall+0xfe7>
f01278b3:	83 ec 04             	sub    $0x4,%esp
f01278b6:	68 74 b6 13 f0       	push   $0xf013b674
f01278bb:	68 a2 0a 00 00       	push   $0xaa2
f01278c0:	68 5a b6 13 f0       	push   $0xf013b65a
f01278c5:	e8 3b 89 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01278ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01278cd:	e8 d1 55 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01278d2:	29 c3                	sub    %eax,%ebx
f01278d4:	89 d8                	mov    %ebx,%eax
f01278d6:	83 f8 05             	cmp    $0x5,%eax
f01278d9:	74 17                	je     f01278f2 <test_kfreeall+0x100f>
f01278db:	83 ec 04             	sub    $0x4,%esp
f01278de:	68 dc b6 13 f0       	push   $0xf013b6dc
f01278e3:	68 a3 0a 00 00       	push   $0xaa3
f01278e8:	68 5a b6 13 f0       	push   $0xf013b65a
f01278ed:	e8 13 89 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01278f2:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01278f9:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01278fc:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127902:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127905:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012790c:	eb 0e                	jmp    f012791c <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f012790e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127911:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127914:	01 d0                	add    %edx,%eax
f0127916:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127919:	ff 45 f4             	incl   -0xc(%ebp)
f012791c:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127922:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127925:	7f e7                	jg     f012790e <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127927:	e8 77 55 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012792c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012792f:	e8 94 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127934:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127937:	83 ec 0c             	sub    $0xc,%esp
f012793a:	68 00 00 10 00       	push   $0x100000
f012793f:	e8 48 02 fe ff       	call   f0107b8c <kmalloc>
f0127944:	83 c4 10             	add    $0x10,%esp
f0127947:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012794d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127953:	89 c1                	mov    %eax,%ecx
f0127955:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012795c:	10 00 00 
f012795f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127965:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012796a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127970:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127976:	ba 00 00 00 00       	mov    $0x0,%edx
f012797b:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127981:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127987:	29 d0                	sub    %edx,%eax
f0127989:	89 c3                	mov    %eax,%ebx
f012798b:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127992:	10 00 00 
f0127995:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012799a:	0f b6 d0             	movzbl %al,%edx
f012799d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01279a3:	01 d0                	add    %edx,%eax
f01279a5:	48                   	dec    %eax
f01279a6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01279ac:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01279b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01279b7:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01279bd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01279c3:	29 d0                	sub    %edx,%eax
f01279c5:	01 c3                	add    %eax,%ebx
f01279c7:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01279ce:	10 00 00 
f01279d1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01279d6:	0f b6 c0             	movzbl %al,%eax
f01279d9:	c1 e0 04             	shl    $0x4,%eax
f01279dc:	89 c2                	mov    %eax,%edx
f01279de:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01279e4:	01 d0                	add    %edx,%eax
f01279e6:	48                   	dec    %eax
f01279e7:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01279ed:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01279f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01279f8:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01279fe:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127a04:	29 d0                	sub    %edx,%eax
f0127a06:	01 d8                	add    %ebx,%eax
f0127a08:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127a0d:	39 c1                	cmp    %eax,%ecx
f0127a0f:	74 17                	je     f0127a28 <test_kfreeall+0x1145>
f0127a11:	83 ec 04             	sub    $0x4,%esp
f0127a14:	68 40 b7 13 f0       	push   $0xf013b740
f0127a19:	68 af 0a 00 00       	push   $0xaaf
f0127a1e:	68 5a b6 13 f0       	push   $0xf013b65a
f0127a23:	e8 dd 87 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a28:	e8 9b c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a2d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127a30:	74 17                	je     f0127a49 <test_kfreeall+0x1166>
f0127a32:	83 ec 04             	sub    $0x4,%esp
f0127a35:	68 74 b6 13 f0       	push   $0xf013b674
f0127a3a:	68 b0 0a 00 00       	push   $0xab0
f0127a3f:	68 5a b6 13 f0       	push   $0xf013b65a
f0127a44:	e8 bc 87 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127a49:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127a4c:	e8 52 54 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127a51:	29 c3                	sub    %eax,%ebx
f0127a53:	89 d8                	mov    %ebx,%eax
f0127a55:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127a5a:	74 17                	je     f0127a73 <test_kfreeall+0x1190>
f0127a5c:	83 ec 04             	sub    $0x4,%esp
f0127a5f:	68 dc b6 13 f0       	push   $0xf013b6dc
f0127a64:	68 b1 0a 00 00       	push   $0xab1
f0127a69:	68 5a b6 13 f0       	push   $0xf013b65a
f0127a6e:	e8 92 87 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127a73:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127a7a:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127a7d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127a83:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127a86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a8d:	eb 0e                	jmp    f0127a9d <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127a8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127a92:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a95:	01 d0                	add    %edx,%eax
f0127a97:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127a9a:	ff 45 f4             	incl   -0xc(%ebp)
f0127a9d:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127aa3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127aa6:	7f e7                	jg     f0127a8f <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127aa8:	e8 f6 53 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127aad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ab0:	e8 13 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ab5:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127ab8:	e8 38 03 fe ff       	call   f0107df5 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127abd:	e8 06 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ac2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ac5:	74 17                	je     f0127ade <test_kfreeall+0x11fb>
f0127ac7:	83 ec 04             	sub    $0x4,%esp
f0127aca:	68 74 b6 13 f0       	push   $0xf013b674
f0127acf:	68 c1 0a 00 00       	push   $0xac1
f0127ad4:	68 5a b6 13 f0       	push   $0xf013b65a
f0127ad9:	e8 27 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127ade:	e8 c0 53 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127ae3:	89 c2                	mov    %eax,%edx
f0127ae5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127ae8:	89 d1                	mov    %edx,%ecx
f0127aea:	29 c1                	sub    %eax,%ecx
f0127aec:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127af3:	10 00 00 
f0127af6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127afc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127b01:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127b07:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127b0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b12:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127b18:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127b1e:	29 d0                	sub    %edx,%eax
f0127b20:	89 c3                	mov    %eax,%ebx
f0127b22:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127b29:	10 00 00 
f0127b2c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127b31:	0f b6 d0             	movzbl %al,%edx
f0127b34:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127b3a:	01 d0                	add    %edx,%eax
f0127b3c:	48                   	dec    %eax
f0127b3d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127b43:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127b49:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b4e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127b54:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127b5a:	29 d0                	sub    %edx,%eax
f0127b5c:	01 c3                	add    %eax,%ebx
f0127b5e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127b65:	10 00 00 
f0127b68:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0127b6d:	0f b6 c0             	movzbl %al,%eax
f0127b70:	c1 e0 04             	shl    $0x4,%eax
f0127b73:	89 c2                	mov    %eax,%edx
f0127b75:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127b7b:	01 d0                	add    %edx,%eax
f0127b7d:	48                   	dec    %eax
f0127b7e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127b84:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b8f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127b95:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b9b:	29 d0                	sub    %edx,%eax
f0127b9d:	01 d8                	add    %ebx,%eax
f0127b9f:	05 00 40 00 00       	add    $0x4000,%eax
f0127ba4:	c1 e8 0c             	shr    $0xc,%eax
f0127ba7:	05 0d 04 00 00       	add    $0x40d,%eax
f0127bac:	39 c1                	cmp    %eax,%ecx
f0127bae:	74 17                	je     f0127bc7 <test_kfreeall+0x12e4>
f0127bb0:	83 ec 04             	sub    $0x4,%esp
f0127bb3:	68 e4 bd 13 f0       	push   $0xf013bde4
f0127bb8:	68 c2 0a 00 00       	push   $0xac2
f0127bbd:	68 5a b6 13 f0       	push   $0xf013b65a
f0127bc2:	e8 3e 86 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127bc7:	83 ec 0c             	sub    $0xc,%esp
f0127bca:	6a 03                	push   $0x3
f0127bcc:	e8 72 57 fe ff       	call   f010d343 <sys_bypassPageFault>
f0127bd1:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127bd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127bdb:	e9 82 00 00 00       	jmp    f0127c62 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0127be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127be3:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127bea:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127bed:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127bf0:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127bf3:	e8 39 57 fe ff       	call   f010d331 <sys_rcr2>
f0127bf8:	89 c2                	mov    %eax,%edx
f0127bfa:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127bfd:	39 c2                	cmp    %eax,%edx
f0127bff:	74 17                	je     f0127c18 <test_kfreeall+0x1335>
f0127c01:	83 ec 04             	sub    $0x4,%esp
f0127c04:	68 c0 be 13 f0       	push   $0xf013bec0
f0127c09:	68 d0 0a 00 00       	push   $0xad0
f0127c0e:	68 5a b6 13 f0       	push   $0xf013b65a
f0127c13:	e8 ed 85 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127c18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127c1b:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127c22:	89 c2                	mov    %eax,%edx
f0127c24:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c27:	01 d0                	add    %edx,%eax
f0127c29:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127c2c:	e8 00 57 fe ff       	call   f010d331 <sys_rcr2>
f0127c31:	89 c2                	mov    %eax,%edx
f0127c33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127c36:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127c3d:	89 c1                	mov    %eax,%ecx
f0127c3f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c42:	01 c8                	add    %ecx,%eax
f0127c44:	39 c2                	cmp    %eax,%edx
f0127c46:	74 17                	je     f0127c5f <test_kfreeall+0x137c>
f0127c48:	83 ec 04             	sub    $0x4,%esp
f0127c4b:	68 c0 be 13 f0       	push   $0xf013bec0
f0127c50:	68 d2 0a 00 00       	push   $0xad2
f0127c55:	68 5a b6 13 f0       	push   $0xf013b65a
f0127c5a:	e8 a6 85 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127c5f:	ff 45 f4             	incl   -0xc(%ebp)
f0127c62:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127c66:	0f 8e 74 ff ff ff    	jle    f0127be0 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127c6c:	83 ec 0c             	sub    $0xc,%esp
f0127c6f:	6a 00                	push   $0x0
f0127c71:	e8 cd 56 fe ff       	call   f010d343 <sys_bypassPageFault>
f0127c76:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127c79:	e8 25 52 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127c7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c81:	e8 42 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127c86:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127c89:	83 ec 0c             	sub    $0xc,%esp
f0127c8c:	68 00 00 40 00       	push   $0x400000
f0127c91:	e8 f6 fe fd ff       	call   f0107b8c <kmalloc>
f0127c96:	83 c4 10             	add    $0x10,%esp
f0127c99:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127c9f:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127ca5:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127caa:	74 17                	je     f0127cc3 <test_kfreeall+0x13e0>
f0127cac:	83 ec 04             	sub    $0x4,%esp
f0127caf:	68 64 c3 13 f0       	push   $0xf013c364
f0127cb4:	68 de 0a 00 00       	push   $0xade
f0127cb9:	68 5a b6 13 f0       	push   $0xf013b65a
f0127cbe:	e8 42 85 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127cc3:	e8 00 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127cc8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ccb:	74 17                	je     f0127ce4 <test_kfreeall+0x1401>
f0127ccd:	83 ec 04             	sub    $0x4,%esp
f0127cd0:	68 74 b6 13 f0       	push   $0xf013b674
f0127cd5:	68 df 0a 00 00       	push   $0xadf
f0127cda:	68 5a b6 13 f0       	push   $0xf013b65a
f0127cdf:	e8 21 85 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127ce4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127ce7:	e8 b7 51 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127cec:	29 c3                	sub    %eax,%ebx
f0127cee:	89 d8                	mov    %ebx,%eax
f0127cf0:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127cf5:	74 17                	je     f0127d0e <test_kfreeall+0x142b>
f0127cf7:	83 ec 04             	sub    $0x4,%esp
f0127cfa:	68 dc b6 13 f0       	push   $0xf013b6dc
f0127cff:	68 e0 0a 00 00       	push   $0xae0
f0127d04:	68 5a b6 13 f0       	push   $0xf013b65a
f0127d09:	e8 f7 84 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127d0e:	e8 90 51 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127d13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d16:	e8 ad c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127d1e:	83 ec 0c             	sub    $0xc,%esp
f0127d21:	68 00 30 00 00       	push   $0x3000
f0127d26:	e8 61 fe fd ff       	call   f0107b8c <kmalloc>
f0127d2b:	83 c4 10             	add    $0x10,%esp
f0127d2e:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127d34:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127d3a:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127d3f:	74 17                	je     f0127d58 <test_kfreeall+0x1475>
f0127d41:	83 ec 04             	sub    $0x4,%esp
f0127d44:	68 64 c3 13 f0       	push   $0xf013c364
f0127d49:	68 e6 0a 00 00       	push   $0xae6
f0127d4e:	68 5a b6 13 f0       	push   $0xf013b65a
f0127d53:	e8 ad 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d58:	e8 6b c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d5d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127d60:	74 17                	je     f0127d79 <test_kfreeall+0x1496>
f0127d62:	83 ec 04             	sub    $0x4,%esp
f0127d65:	68 74 b6 13 f0       	push   $0xf013b674
f0127d6a:	68 e7 0a 00 00       	push   $0xae7
f0127d6f:	68 5a b6 13 f0       	push   $0xf013b65a
f0127d74:	e8 8c 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d79:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127d7c:	e8 22 51 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127d81:	29 c3                	sub    %eax,%ebx
f0127d83:	89 d8                	mov    %ebx,%eax
f0127d85:	83 f8 03             	cmp    $0x3,%eax
f0127d88:	74 17                	je     f0127da1 <test_kfreeall+0x14be>
f0127d8a:	83 ec 04             	sub    $0x4,%esp
f0127d8d:	68 dc b6 13 f0       	push   $0xf013b6dc
f0127d92:	68 e8 0a 00 00       	push   $0xae8
f0127d97:	68 5a b6 13 f0       	push   $0xf013b65a
f0127d9c:	e8 64 84 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127da1:	e8 fd 50 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127da6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127da9:	e8 1a c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127dae:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0127db1:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127db7:	83 ec 0c             	sub    $0xc,%esp
f0127dba:	50                   	push   %eax
f0127dbb:	e8 97 fe fd ff       	call   f0107c57 <kfree>
f0127dc0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127dc3:	e8 00 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127dc8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127dcb:	74 17                	je     f0127de4 <test_kfreeall+0x1501>
f0127dcd:	83 ec 04             	sub    $0x4,%esp
f0127dd0:	68 74 b6 13 f0       	push   $0xf013b674
f0127dd5:	68 f2 0a 00 00       	push   $0xaf2
f0127dda:	68 5a b6 13 f0       	push   $0xf013b65a
f0127ddf:	e8 21 84 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127de4:	e8 ba 50 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127de9:	89 c2                	mov    %eax,%edx
f0127deb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127dee:	29 c2                	sub    %eax,%edx
f0127df0:	89 d0                	mov    %edx,%eax
f0127df2:	83 f8 03             	cmp    $0x3,%eax
f0127df5:	74 17                	je     f0127e0e <test_kfreeall+0x152b>
f0127df7:	83 ec 04             	sub    $0x4,%esp
f0127dfa:	68 0c bf 13 f0       	push   $0xf013bf0c
f0127dff:	68 f3 0a 00 00       	push   $0xaf3
f0127e04:	68 5a b6 13 f0       	push   $0xf013b65a
f0127e09:	e8 f7 83 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e0e:	e8 90 50 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127e13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e16:	e8 ad bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127e1e:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127e24:	83 ec 0c             	sub    $0xc,%esp
f0127e27:	50                   	push   %eax
f0127e28:	e8 2a fe fd ff       	call   f0107c57 <kfree>
f0127e2d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e30:	e8 93 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e35:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e38:	74 17                	je     f0127e51 <test_kfreeall+0x156e>
f0127e3a:	83 ec 04             	sub    $0x4,%esp
f0127e3d:	68 74 b6 13 f0       	push   $0xf013b674
f0127e42:	68 fc 0a 00 00       	push   $0xafc
f0127e47:	68 5a b6 13 f0       	push   $0xf013b65a
f0127e4c:	e8 b4 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127e51:	e8 4d 50 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127e56:	89 c2                	mov    %eax,%edx
f0127e58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127e5b:	39 c2                	cmp    %eax,%edx
f0127e5d:	74 17                	je     f0127e76 <test_kfreeall+0x1593>
f0127e5f:	83 ec 04             	sub    $0x4,%esp
f0127e62:	68 0c bf 13 f0       	push   $0xf013bf0c
f0127e67:	68 fd 0a 00 00       	push   $0xafd
f0127e6c:	68 5a b6 13 f0       	push   $0xf013b65a
f0127e71:	e8 8f 83 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e76:	e8 28 50 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127e7b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e7e:	e8 45 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e83:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127e86:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127e8c:	83 ec 0c             	sub    $0xc,%esp
f0127e8f:	50                   	push   %eax
f0127e90:	e8 c2 fd fd ff       	call   f0107c57 <kfree>
f0127e95:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e98:	e8 2b bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e9d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ea0:	74 17                	je     f0127eb9 <test_kfreeall+0x15d6>
f0127ea2:	83 ec 04             	sub    $0x4,%esp
f0127ea5:	68 74 b6 13 f0       	push   $0xf013b674
f0127eaa:	68 03 0b 00 00       	push   $0xb03
f0127eaf:	68 5a b6 13 f0       	push   $0xf013b65a
f0127eb4:	e8 4c 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127eb9:	e8 e5 4f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127ebe:	89 c2                	mov    %eax,%edx
f0127ec0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127ec3:	39 c2                	cmp    %eax,%edx
f0127ec5:	74 17                	je     f0127ede <test_kfreeall+0x15fb>
f0127ec7:	83 ec 04             	sub    $0x4,%esp
f0127eca:	68 0c bf 13 f0       	push   $0xf013bf0c
f0127ecf:	68 04 0b 00 00       	push   $0xb04
f0127ed4:	68 5a b6 13 f0       	push   $0xf013b65a
f0127ed9:	e8 27 83 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127ede:	e8 c0 4f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127ee3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ee6:	e8 dd be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127eeb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127eee:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127ef4:	83 ec 0c             	sub    $0xc,%esp
f0127ef7:	50                   	push   %eax
f0127ef8:	e8 5a fd fd ff       	call   f0107c57 <kfree>
f0127efd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f00:	e8 c3 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f05:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127f08:	74 17                	je     f0127f21 <test_kfreeall+0x163e>
f0127f0a:	83 ec 04             	sub    $0x4,%esp
f0127f0d:	68 74 b6 13 f0       	push   $0xf013b674
f0127f12:	68 0a 0b 00 00       	push   $0xb0a
f0127f17:	68 5a b6 13 f0       	push   $0xf013b65a
f0127f1c:	e8 e4 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127f21:	e8 7d 4f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0127f26:	89 c2                	mov    %eax,%edx
f0127f28:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f2b:	39 c2                	cmp    %eax,%edx
f0127f2d:	74 17                	je     f0127f46 <test_kfreeall+0x1663>
f0127f2f:	83 ec 04             	sub    $0x4,%esp
f0127f32:	68 0c bf 13 f0       	push   $0xf013bf0c
f0127f37:	68 0b 0b 00 00       	push   $0xb0b
f0127f3c:	68 5a b6 13 f0       	push   $0xf013b65a
f0127f41:	e8 bf 82 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127f46:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127f4d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127f54:	eb 48                	jmp    f0127f9e <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127f56:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127f59:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0127f5e:	83 ec 04             	sub    $0x4,%esp
f0127f61:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127f67:	51                   	push   %ecx
f0127f68:	52                   	push   %edx
f0127f69:	50                   	push   %eax
f0127f6a:	e8 42 eb fd ff       	call   f0106ab1 <get_page_table>
f0127f6f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127f72:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127f78:	85 c0                	test   %eax,%eax
f0127f7a:	75 17                	jne    f0127f93 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127f7c:	83 ec 04             	sub    $0x4,%esp
f0127f7f:	68 5c bf 13 f0       	push   $0xf013bf5c
f0127f84:	68 18 0b 00 00       	push   $0xb18
f0127f89:	68 5a b6 13 f0       	push   $0xf013b65a
f0127f8e:	e8 72 82 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127f93:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127f9a:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127f9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127fa2:	78 b2                	js     f0127f56 <test_kfreeall+0x1673>
f0127fa4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127fa8:	7f 09                	jg     f0127fb3 <test_kfreeall+0x16d0>
f0127faa:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0127fb1:	76 a3                	jbe    f0127f56 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127fb3:	83 ec 0c             	sub    $0xc,%esp
f0127fb6:	68 b8 c3 13 f0       	push   $0xf013c3b8
f0127fbb:	e8 4e 8d fd ff       	call   f0100d0e <cprintf>
f0127fc0:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127fc3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127fc8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127fcb:	5b                   	pop    %ebx
f0127fcc:	5f                   	pop    %edi
f0127fcd:	5d                   	pop    %ebp
f0127fce:	c3                   	ret    

f0127fcf <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127fcf:	55                   	push   %ebp
f0127fd0:	89 e5                	mov    %esp,%ebp
f0127fd2:	57                   	push   %edi
f0127fd3:	53                   	push   %ebx
f0127fd4:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127fda:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127fde:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127fe2:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127fe8:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127fee:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127ff5:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127ffc:	e8 a2 4e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128001:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128004:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f012800a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012800f:	b8 00 00 00 00       	mov    $0x0,%eax
f0128014:	89 d7                	mov    %edx,%edi
f0128016:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128018:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f012801e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128023:	b8 00 00 00 00       	mov    $0x0,%eax
f0128028:	89 d7                	mov    %edx,%edi
f012802a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012802c:	e8 72 4e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128031:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128034:	e8 8f bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128039:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012803c:	83 ec 0c             	sub    $0xc,%esp
f012803f:	68 00 fc 1f 00       	push   $0x1ffc00
f0128044:	e8 43 fb fd ff       	call   f0107b8c <kmalloc>
f0128049:	83 c4 10             	add    $0x10,%esp
f012804c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128052:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128058:	89 c1                	mov    %eax,%ecx
f012805a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128061:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128064:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128069:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012806c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012806f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128074:	f7 75 d4             	divl   -0x2c(%ebp)
f0128077:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012807a:	29 d0                	sub    %edx,%eax
f012807c:	89 c3                	mov    %eax,%ebx
f012807e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128085:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012808a:	0f b6 d0             	movzbl %al,%edx
f012808d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128090:	01 d0                	add    %edx,%eax
f0128092:	48                   	dec    %eax
f0128093:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128096:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128099:	ba 00 00 00 00       	mov    $0x0,%edx
f012809e:	f7 75 cc             	divl   -0x34(%ebp)
f01280a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01280a4:	29 d0                	sub    %edx,%eax
f01280a6:	01 c3                	add    %eax,%ebx
f01280a8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01280af:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01280b4:	0f b6 c0             	movzbl %al,%eax
f01280b7:	c1 e0 04             	shl    $0x4,%eax
f01280ba:	89 c2                	mov    %eax,%edx
f01280bc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01280bf:	01 d0                	add    %edx,%eax
f01280c1:	48                   	dec    %eax
f01280c2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01280c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01280c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01280cd:	f7 75 c4             	divl   -0x3c(%ebp)
f01280d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01280d3:	29 d0                	sub    %edx,%eax
f01280d5:	01 d8                	add    %ebx,%eax
f01280d7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01280dc:	39 c1                	cmp    %eax,%ecx
f01280de:	74 17                	je     f01280f7 <test_kexpand+0x128>
f01280e0:	83 ec 04             	sub    $0x4,%esp
f01280e3:	68 40 b7 13 f0       	push   $0xf013b740
f01280e8:	68 43 0b 00 00       	push   $0xb43
f01280ed:	68 5a b6 13 f0       	push   $0xf013b65a
f01280f2:	e8 0e 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280f7:	e8 cc bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01280fc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280ff:	74 17                	je     f0128118 <test_kexpand+0x149>
f0128101:	83 ec 04             	sub    $0x4,%esp
f0128104:	68 74 b6 13 f0       	push   $0xf013b674
f0128109:	68 44 0b 00 00       	push   $0xb44
f012810e:	68 5a b6 13 f0       	push   $0xf013b65a
f0128113:	e8 ed 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128118:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012811b:	e8 83 4d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128120:	29 c3                	sub    %eax,%ebx
f0128122:	89 d8                	mov    %ebx,%eax
f0128124:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128129:	74 17                	je     f0128142 <test_kexpand+0x173>
f012812b:	83 ec 04             	sub    $0x4,%esp
f012812e:	68 dc b6 13 f0       	push   $0xf013b6dc
f0128133:	68 45 0b 00 00       	push   $0xb45
f0128138:	68 5a b6 13 f0       	push   $0xf013b65a
f012813d:	e8 c3 80 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128142:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0128149:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012814c:	e8 52 4d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128151:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128154:	e8 6f bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128159:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012815c:	83 ec 0c             	sub    $0xc,%esp
f012815f:	68 00 fc 1f 00       	push   $0x1ffc00
f0128164:	e8 23 fa fd ff       	call   f0107b8c <kmalloc>
f0128169:	83 c4 10             	add    $0x10,%esp
f012816c:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128172:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128178:	89 c1                	mov    %eax,%ecx
f012817a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128181:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128184:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128189:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012818c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012818f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128194:	f7 75 bc             	divl   -0x44(%ebp)
f0128197:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012819a:	29 d0                	sub    %edx,%eax
f012819c:	89 c3                	mov    %eax,%ebx
f012819e:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01281a5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01281aa:	0f b6 d0             	movzbl %al,%edx
f01281ad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01281b0:	01 d0                	add    %edx,%eax
f01281b2:	48                   	dec    %eax
f01281b3:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01281b6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01281b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01281be:	f7 75 b4             	divl   -0x4c(%ebp)
f01281c1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01281c4:	29 d0                	sub    %edx,%eax
f01281c6:	01 c3                	add    %eax,%ebx
f01281c8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01281cf:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01281d4:	0f b6 c0             	movzbl %al,%eax
f01281d7:	c1 e0 04             	shl    $0x4,%eax
f01281da:	89 c2                	mov    %eax,%edx
f01281dc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01281df:	01 d0                	add    %edx,%eax
f01281e1:	48                   	dec    %eax
f01281e2:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01281e5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01281e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01281ed:	f7 75 ac             	divl   -0x54(%ebp)
f01281f0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01281f3:	29 d0                	sub    %edx,%eax
f01281f5:	01 d8                	add    %ebx,%eax
f01281f7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01281fc:	39 c1                	cmp    %eax,%ecx
f01281fe:	74 17                	je     f0128217 <test_kexpand+0x248>
f0128200:	83 ec 04             	sub    $0x4,%esp
f0128203:	68 40 b7 13 f0       	push   $0xf013b740
f0128208:	68 4c 0b 00 00       	push   $0xb4c
f012820d:	68 5a b6 13 f0       	push   $0xf013b65a
f0128212:	e8 ee 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128217:	e8 ac bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012821c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012821f:	74 17                	je     f0128238 <test_kexpand+0x269>
f0128221:	83 ec 04             	sub    $0x4,%esp
f0128224:	68 74 b6 13 f0       	push   $0xf013b674
f0128229:	68 4d 0b 00 00       	push   $0xb4d
f012822e:	68 5a b6 13 f0       	push   $0xf013b65a
f0128233:	e8 cd 7f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128238:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012823b:	e8 63 4c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128240:	29 c3                	sub    %eax,%ebx
f0128242:	89 d8                	mov    %ebx,%eax
f0128244:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128249:	74 17                	je     f0128262 <test_kexpand+0x293>
f012824b:	83 ec 04             	sub    $0x4,%esp
f012824e:	68 dc b6 13 f0       	push   $0xf013b6dc
f0128253:	68 4e 0b 00 00       	push   $0xb4e
f0128258:	68 5a b6 13 f0       	push   $0xf013b65a
f012825d:	e8 a3 7f fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128262:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0128269:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012826c:	e8 32 4c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128271:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128274:	e8 4f bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128279:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012827c:	83 ec 0c             	sub    $0xc,%esp
f012827f:	68 00 08 00 00       	push   $0x800
f0128284:	e8 03 f9 fd ff       	call   f0107b8c <kmalloc>
f0128289:	83 c4 10             	add    $0x10,%esp
f012828c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128292:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0128298:	89 c1                	mov    %eax,%ecx
f012829a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01282a1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01282a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01282a9:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01282ac:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01282af:	ba 00 00 00 00       	mov    $0x0,%edx
f01282b4:	f7 75 a4             	divl   -0x5c(%ebp)
f01282b7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01282ba:	29 d0                	sub    %edx,%eax
f01282bc:	89 c3                	mov    %eax,%ebx
f01282be:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01282c5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01282ca:	0f b6 d0             	movzbl %al,%edx
f01282cd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01282d0:	01 d0                	add    %edx,%eax
f01282d2:	48                   	dec    %eax
f01282d3:	89 45 98             	mov    %eax,-0x68(%ebp)
f01282d6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01282d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01282de:	f7 75 9c             	divl   -0x64(%ebp)
f01282e1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01282e4:	29 d0                	sub    %edx,%eax
f01282e6:	01 c3                	add    %eax,%ebx
f01282e8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01282ef:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01282f4:	0f b6 c0             	movzbl %al,%eax
f01282f7:	c1 e0 04             	shl    $0x4,%eax
f01282fa:	89 c2                	mov    %eax,%edx
f01282fc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01282ff:	01 d0                	add    %edx,%eax
f0128301:	48                   	dec    %eax
f0128302:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128305:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128308:	ba 00 00 00 00       	mov    $0x0,%edx
f012830d:	f7 75 94             	divl   -0x6c(%ebp)
f0128310:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128313:	29 d0                	sub    %edx,%eax
f0128315:	01 d8                	add    %ebx,%eax
f0128317:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012831c:	39 c1                	cmp    %eax,%ecx
f012831e:	74 17                	je     f0128337 <test_kexpand+0x368>
f0128320:	83 ec 04             	sub    $0x4,%esp
f0128323:	68 40 b7 13 f0       	push   $0xf013b740
f0128328:	68 55 0b 00 00       	push   $0xb55
f012832d:	68 5a b6 13 f0       	push   $0xf013b65a
f0128332:	e8 ce 7e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128337:	e8 8c ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012833c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012833f:	74 17                	je     f0128358 <test_kexpand+0x389>
f0128341:	83 ec 04             	sub    $0x4,%esp
f0128344:	68 74 b6 13 f0       	push   $0xf013b674
f0128349:	68 56 0b 00 00       	push   $0xb56
f012834e:	68 5a b6 13 f0       	push   $0xf013b65a
f0128353:	e8 ad 7e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128358:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012835b:	e8 43 4b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128360:	29 c3                	sub    %eax,%ebx
f0128362:	89 d8                	mov    %ebx,%eax
f0128364:	83 f8 01             	cmp    $0x1,%eax
f0128367:	74 17                	je     f0128380 <test_kexpand+0x3b1>
f0128369:	83 ec 04             	sub    $0x4,%esp
f012836c:	68 dc b6 13 f0       	push   $0xf013b6dc
f0128371:	68 57 0b 00 00       	push   $0xb57
f0128376:	68 5a b6 13 f0       	push   $0xf013b65a
f012837b:	e8 85 7e fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128380:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0128387:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012838a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0128390:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012839a:	eb 0e                	jmp    f01283aa <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f012839c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012839f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01283a2:	01 d0                	add    %edx,%eax
f01283a4:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01283a7:	ff 45 f4             	incl   -0xc(%ebp)
f01283aa:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01283b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01283b3:	7f e7                	jg     f012839c <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01283b5:	e8 e9 4a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01283ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283bd:	e8 06 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01283c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01283c5:	83 ec 0c             	sub    $0xc,%esp
f01283c8:	68 00 08 00 00       	push   $0x800
f01283cd:	e8 ba f7 fd ff       	call   f0107b8c <kmalloc>
f01283d2:	83 c4 10             	add    $0x10,%esp
f01283d5:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01283db:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01283e1:	89 c1                	mov    %eax,%ecx
f01283e3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01283ea:	8b 45 88             	mov    -0x78(%ebp),%eax
f01283ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01283f2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01283f5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01283f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01283fd:	f7 75 88             	divl   -0x78(%ebp)
f0128400:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128403:	29 d0                	sub    %edx,%eax
f0128405:	89 c3                	mov    %eax,%ebx
f0128407:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012840e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128413:	0f b6 d0             	movzbl %al,%edx
f0128416:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128419:	01 d0                	add    %edx,%eax
f012841b:	48                   	dec    %eax
f012841c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128422:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128428:	ba 00 00 00 00       	mov    $0x0,%edx
f012842d:	f7 75 80             	divl   -0x80(%ebp)
f0128430:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128436:	29 d0                	sub    %edx,%eax
f0128438:	01 c3                	add    %eax,%ebx
f012843a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128441:	10 00 00 
f0128444:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128449:	0f b6 c0             	movzbl %al,%eax
f012844c:	c1 e0 04             	shl    $0x4,%eax
f012844f:	89 c2                	mov    %eax,%edx
f0128451:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128457:	01 d0                	add    %edx,%eax
f0128459:	48                   	dec    %eax
f012845a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128460:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128466:	ba 00 00 00 00       	mov    $0x0,%edx
f012846b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128471:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128477:	29 d0                	sub    %edx,%eax
f0128479:	01 d8                	add    %ebx,%eax
f012847b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128480:	39 c1                	cmp    %eax,%ecx
f0128482:	74 17                	je     f012849b <test_kexpand+0x4cc>
f0128484:	83 ec 04             	sub    $0x4,%esp
f0128487:	68 40 b7 13 f0       	push   $0xf013b740
f012848c:	68 63 0b 00 00       	push   $0xb63
f0128491:	68 5a b6 13 f0       	push   $0xf013b65a
f0128496:	e8 6a 7d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012849b:	e8 28 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01284a0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01284a3:	74 17                	je     f01284bc <test_kexpand+0x4ed>
f01284a5:	83 ec 04             	sub    $0x4,%esp
f01284a8:	68 74 b6 13 f0       	push   $0xf013b674
f01284ad:	68 64 0b 00 00       	push   $0xb64
f01284b2:	68 5a b6 13 f0       	push   $0xf013b65a
f01284b7:	e8 49 7d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01284bc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01284bf:	e8 df 49 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01284c4:	29 c3                	sub    %eax,%ebx
f01284c6:	89 d8                	mov    %ebx,%eax
f01284c8:	83 f8 01             	cmp    $0x1,%eax
f01284cb:	74 17                	je     f01284e4 <test_kexpand+0x515>
f01284cd:	83 ec 04             	sub    $0x4,%esp
f01284d0:	68 dc b6 13 f0       	push   $0xf013b6dc
f01284d5:	68 65 0b 00 00       	push   $0xb65
f01284da:	68 5a b6 13 f0       	push   $0xf013b65a
f01284df:	e8 21 7d fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01284e4:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01284eb:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01284ee:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01284f4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01284f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284fe:	eb 0e                	jmp    f012850e <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0128500:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128503:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128506:	01 d0                	add    %edx,%eax
f0128508:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012850b:	ff 45 f4             	incl   -0xc(%ebp)
f012850e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0128514:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128517:	7f e7                	jg     f0128500 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128519:	e8 85 49 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012851e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128521:	e8 a2 b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128526:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128529:	83 ec 0c             	sub    $0xc,%esp
f012852c:	68 00 1c 00 00       	push   $0x1c00
f0128531:	e8 56 f6 fd ff       	call   f0107b8c <kmalloc>
f0128536:	83 c4 10             	add    $0x10,%esp
f0128539:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012853f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128545:	89 c1                	mov    %eax,%ecx
f0128547:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012854e:	10 00 00 
f0128551:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128557:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012855c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128562:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128568:	ba 00 00 00 00       	mov    $0x0,%edx
f012856d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128573:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128579:	29 d0                	sub    %edx,%eax
f012857b:	89 c3                	mov    %eax,%ebx
f012857d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128584:	10 00 00 
f0128587:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012858c:	0f b6 d0             	movzbl %al,%edx
f012858f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128595:	01 d0                	add    %edx,%eax
f0128597:	48                   	dec    %eax
f0128598:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012859e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01285a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01285a9:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01285af:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01285b5:	29 d0                	sub    %edx,%eax
f01285b7:	01 c3                	add    %eax,%ebx
f01285b9:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01285c0:	10 00 00 
f01285c3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01285c8:	0f b6 c0             	movzbl %al,%eax
f01285cb:	c1 e0 04             	shl    $0x4,%eax
f01285ce:	89 c2                	mov    %eax,%edx
f01285d0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01285d6:	01 d0                	add    %edx,%eax
f01285d8:	48                   	dec    %eax
f01285d9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01285df:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01285e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01285ea:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01285f0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01285f6:	29 d0                	sub    %edx,%eax
f01285f8:	01 d8                	add    %ebx,%eax
f01285fa:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01285ff:	39 c1                	cmp    %eax,%ecx
f0128601:	74 17                	je     f012861a <test_kexpand+0x64b>
f0128603:	83 ec 04             	sub    $0x4,%esp
f0128606:	68 40 b7 13 f0       	push   $0xf013b740
f012860b:	68 71 0b 00 00       	push   $0xb71
f0128610:	68 5a b6 13 f0       	push   $0xf013b65a
f0128615:	e8 eb 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012861a:	e8 a9 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012861f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128622:	74 17                	je     f012863b <test_kexpand+0x66c>
f0128624:	83 ec 04             	sub    $0x4,%esp
f0128627:	68 74 b6 13 f0       	push   $0xf013b674
f012862c:	68 72 0b 00 00       	push   $0xb72
f0128631:	68 5a b6 13 f0       	push   $0xf013b65a
f0128636:	e8 ca 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012863b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012863e:	e8 60 48 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128643:	29 c3                	sub    %eax,%ebx
f0128645:	89 d8                	mov    %ebx,%eax
f0128647:	83 f8 02             	cmp    $0x2,%eax
f012864a:	74 17                	je     f0128663 <test_kexpand+0x694>
f012864c:	83 ec 04             	sub    $0x4,%esp
f012864f:	68 dc b6 13 f0       	push   $0xf013b6dc
f0128654:	68 73 0b 00 00       	push   $0xb73
f0128659:	68 5a b6 13 f0       	push   $0xf013b65a
f012865e:	e8 a2 7b fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128663:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f012866a:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012866d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128673:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128676:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012867d:	eb 0e                	jmp    f012868d <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f012867f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128682:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128685:	01 d0                	add    %edx,%eax
f0128687:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012868a:	ff 45 f4             	incl   -0xc(%ebp)
f012868d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0128693:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128696:	7f e7                	jg     f012867f <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128698:	e8 06 48 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012869d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286a0:	e8 23 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01286a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01286a8:	83 ec 0c             	sub    $0xc,%esp
f01286ab:	68 00 fc 2f 00       	push   $0x2ffc00
f01286b0:	e8 d7 f4 fd ff       	call   f0107b8c <kmalloc>
f01286b5:	83 c4 10             	add    $0x10,%esp
f01286b8:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286be:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01286c4:	89 c1                	mov    %eax,%ecx
f01286c6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01286cd:	10 00 00 
f01286d0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01286d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01286db:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01286e1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01286e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01286ec:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01286f2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01286f8:	29 d0                	sub    %edx,%eax
f01286fa:	89 c3                	mov    %eax,%ebx
f01286fc:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128703:	10 00 00 
f0128706:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012870b:	0f b6 d0             	movzbl %al,%edx
f012870e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128714:	01 d0                	add    %edx,%eax
f0128716:	48                   	dec    %eax
f0128717:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012871d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128723:	ba 00 00 00 00       	mov    $0x0,%edx
f0128728:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012872e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128734:	29 d0                	sub    %edx,%eax
f0128736:	01 c3                	add    %eax,%ebx
f0128738:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012873f:	10 00 00 
f0128742:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128747:	0f b6 c0             	movzbl %al,%eax
f012874a:	c1 e0 04             	shl    $0x4,%eax
f012874d:	89 c2                	mov    %eax,%edx
f012874f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128755:	01 d0                	add    %edx,%eax
f0128757:	48                   	dec    %eax
f0128758:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012875e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128764:	ba 00 00 00 00       	mov    $0x0,%edx
f0128769:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012876f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128775:	29 d0                	sub    %edx,%eax
f0128777:	01 d8                	add    %ebx,%eax
f0128779:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012877e:	39 c1                	cmp    %eax,%ecx
f0128780:	74 17                	je     f0128799 <test_kexpand+0x7ca>
f0128782:	83 ec 04             	sub    $0x4,%esp
f0128785:	68 40 b7 13 f0       	push   $0xf013b740
f012878a:	68 7f 0b 00 00       	push   $0xb7f
f012878f:	68 5a b6 13 f0       	push   $0xf013b65a
f0128794:	e8 6c 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128799:	e8 2a b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012879e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287a1:	74 17                	je     f01287ba <test_kexpand+0x7eb>
f01287a3:	83 ec 04             	sub    $0x4,%esp
f01287a6:	68 74 b6 13 f0       	push   $0xf013b674
f01287ab:	68 80 0b 00 00       	push   $0xb80
f01287b0:	68 5a b6 13 f0       	push   $0xf013b65a
f01287b5:	e8 4b 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287ba:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01287bd:	e8 e1 46 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01287c2:	29 c3                	sub    %eax,%ebx
f01287c4:	89 d8                	mov    %ebx,%eax
f01287c6:	3d 00 03 00 00       	cmp    $0x300,%eax
f01287cb:	74 17                	je     f01287e4 <test_kexpand+0x815>
f01287cd:	83 ec 04             	sub    $0x4,%esp
f01287d0:	68 dc b6 13 f0       	push   $0xf013b6dc
f01287d5:	68 81 0b 00 00       	push   $0xb81
f01287da:	68 5a b6 13 f0       	push   $0xf013b65a
f01287df:	e8 21 7a fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01287e4:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f01287eb:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01287ee:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01287f4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01287f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287fe:	eb 0e                	jmp    f012880e <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0128800:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128803:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128806:	01 d0                	add    %edx,%eax
f0128808:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012880b:	ff 45 f4             	incl   -0xc(%ebp)
f012880e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128814:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128817:	7f e7                	jg     f0128800 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128819:	e8 85 46 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012881e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128821:	e8 a2 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128826:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128829:	83 ec 0c             	sub    $0xc,%esp
f012882c:	68 00 00 60 00       	push   $0x600000
f0128831:	e8 56 f3 fd ff       	call   f0107b8c <kmalloc>
f0128836:	83 c4 10             	add    $0x10,%esp
f0128839:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012883f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128845:	89 c1                	mov    %eax,%ecx
f0128847:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012884e:	10 00 00 
f0128851:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128857:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012885c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128862:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128868:	ba 00 00 00 00       	mov    $0x0,%edx
f012886d:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128873:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128879:	29 d0                	sub    %edx,%eax
f012887b:	89 c3                	mov    %eax,%ebx
f012887d:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128884:	10 00 00 
f0128887:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012888c:	0f b6 d0             	movzbl %al,%edx
f012888f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128895:	01 d0                	add    %edx,%eax
f0128897:	48                   	dec    %eax
f0128898:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012889e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01288a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01288a9:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01288af:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01288b5:	29 d0                	sub    %edx,%eax
f01288b7:	01 c3                	add    %eax,%ebx
f01288b9:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01288c0:	10 00 00 
f01288c3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01288c8:	0f b6 c0             	movzbl %al,%eax
f01288cb:	c1 e0 04             	shl    $0x4,%eax
f01288ce:	89 c2                	mov    %eax,%edx
f01288d0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01288d6:	01 d0                	add    %edx,%eax
f01288d8:	48                   	dec    %eax
f01288d9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01288df:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01288e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01288ea:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01288f0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01288f6:	29 d0                	sub    %edx,%eax
f01288f8:	01 d8                	add    %ebx,%eax
f01288fa:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01288ff:	39 c1                	cmp    %eax,%ecx
f0128901:	74 17                	je     f012891a <test_kexpand+0x94b>
f0128903:	83 ec 04             	sub    $0x4,%esp
f0128906:	68 40 b7 13 f0       	push   $0xf013b740
f012890b:	68 8d 0b 00 00       	push   $0xb8d
f0128910:	68 5a b6 13 f0       	push   $0xf013b65a
f0128915:	e8 eb 78 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012891a:	e8 a9 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012891f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128922:	74 17                	je     f012893b <test_kexpand+0x96c>
f0128924:	83 ec 04             	sub    $0x4,%esp
f0128927:	68 74 b6 13 f0       	push   $0xf013b674
f012892c:	68 8e 0b 00 00       	push   $0xb8e
f0128931:	68 5a b6 13 f0       	push   $0xf013b65a
f0128936:	e8 ca 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012893b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012893e:	e8 60 45 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128943:	29 c3                	sub    %eax,%ebx
f0128945:	89 d8                	mov    %ebx,%eax
f0128947:	3d 00 06 00 00       	cmp    $0x600,%eax
f012894c:	74 17                	je     f0128965 <test_kexpand+0x996>
f012894e:	83 ec 04             	sub    $0x4,%esp
f0128951:	68 dc b6 13 f0       	push   $0xf013b6dc
f0128956:	68 8f 0b 00 00       	push   $0xb8f
f012895b:	68 5a b6 13 f0       	push   $0xf013b65a
f0128960:	e8 a0 78 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128965:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f012896c:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012896f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128975:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f012897b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128982:	eb 1a                	jmp    f012899e <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128987:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012898e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128994:	01 c2                	add    %eax,%edx
f0128996:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128999:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012899b:	ff 45 f4             	incl   -0xc(%ebp)
f012899e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01289a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01289a7:	7d db                	jge    f0128984 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f01289a9:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f01289b0:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f01289b3:	e8 eb 44 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01289b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289bb:	e8 08 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289c0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f01289c3:	83 ec 0c             	sub    $0xc,%esp
f01289c6:	68 00 00 70 00       	push   $0x700000
f01289cb:	e8 5f f4 fd ff       	call   f0107e2f <kexpand>
f01289d0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01289d3:	e8 f0 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289d8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289db:	74 19                	je     f01289f6 <test_kexpand+0xa27>
f01289dd:	68 f4 c3 13 f0       	push   $0xf013c3f4
f01289e2:	68 25 c4 13 f0       	push   $0xf013c425
f01289e7:	68 a0 0b 00 00       	push   $0xba0
f01289ec:	68 5a b6 13 f0       	push   $0xf013b65a
f01289f1:	e8 0f 78 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f01289f6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01289f9:	e8 a5 44 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01289fe:	29 c3                	sub    %eax,%ebx
f0128a00:	89 d8                	mov    %ebx,%eax
f0128a02:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128a07:	74 19                	je     f0128a22 <test_kexpand+0xa53>
f0128a09:	68 3c c4 13 f0       	push   $0xf013c43c
f0128a0e:	68 25 c4 13 f0       	push   $0xf013c425
f0128a13:	68 a1 0b 00 00       	push   $0xba1
f0128a18:	68 5a b6 13 f0       	push   $0xf013b65a
f0128a1d:	e8 e3 77 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128a22:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128a28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128a2b:	eb 1a                	jmp    f0128a47 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128a37:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128a3d:	01 c2                	add    %eax,%edx
f0128a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a42:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128a44:	ff 45 f4             	incl   -0xc(%ebp)
f0128a47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a4a:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128a50:	7c db                	jl     f0128a2d <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128a52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a59:	eb 37                	jmp    f0128a92 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128a65:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128a6b:	01 d0                	add    %edx,%eax
f0128a6d:	8b 10                	mov    (%eax),%edx
f0128a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a72:	39 c2                	cmp    %eax,%edx
f0128a74:	74 19                	je     f0128a8f <test_kexpand+0xac0>
f0128a76:	68 6c c4 13 f0       	push   $0xf013c46c
f0128a7b:	68 25 c4 13 f0       	push   $0xf013c425
f0128a80:	68 ad 0b 00 00       	push   $0xbad
f0128a85:	68 5a b6 13 f0       	push   $0xf013b65a
f0128a8a:	e8 76 77 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128a8f:	ff 45 f4             	incl   -0xc(%ebp)
f0128a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a95:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128a9b:	7c be                	jl     f0128a5b <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128a9d:	e8 01 44 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128aa2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128aa5:	e8 1e b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128aaa:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128aad:	83 ec 0c             	sub    $0xc,%esp
f0128ab0:	68 00 00 a0 00       	push   $0xa00000
f0128ab5:	e8 75 f3 fd ff       	call   f0107e2f <kexpand>
f0128aba:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128abd:	e8 06 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ac2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ac5:	74 19                	je     f0128ae0 <test_kexpand+0xb11>
f0128ac7:	68 f4 c3 13 f0       	push   $0xf013c3f4
f0128acc:	68 25 c4 13 f0       	push   $0xf013c425
f0128ad1:	68 b8 0b 00 00       	push   $0xbb8
f0128ad6:	68 5a b6 13 f0       	push   $0xf013b65a
f0128adb:	e8 25 77 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128ae0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128ae3:	e8 bb 43 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128ae8:	29 c3                	sub    %eax,%ebx
f0128aea:	89 d8                	mov    %ebx,%eax
f0128aec:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128af1:	74 19                	je     f0128b0c <test_kexpand+0xb3d>
f0128af3:	68 78 c4 13 f0       	push   $0xf013c478
f0128af8:	68 25 c4 13 f0       	push   $0xf013c425
f0128afd:	68 b9 0b 00 00       	push   $0xbb9
f0128b02:	68 5a b6 13 f0       	push   $0xf013b65a
f0128b07:	e8 f9 76 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b0c:	e8 92 43 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128b11:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b14:	e8 af b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b19:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128b1c:	83 ec 0c             	sub    $0xc,%esp
f0128b1f:	68 00 00 40 00       	push   $0x400000
f0128b24:	e8 63 f0 fd ff       	call   f0107b8c <kmalloc>
f0128b29:	83 c4 10             	add    $0x10,%esp
f0128b2c:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128b32:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128b38:	89 c1                	mov    %eax,%ecx
f0128b3a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128b41:	10 00 00 
f0128b44:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128b4a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b4f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128b55:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128b5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b60:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128b66:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128b6c:	29 d0                	sub    %edx,%eax
f0128b6e:	89 c3                	mov    %eax,%ebx
f0128b70:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128b77:	10 00 00 
f0128b7a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128b7f:	0f b6 d0             	movzbl %al,%edx
f0128b82:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128b88:	01 d0                	add    %edx,%eax
f0128b8a:	48                   	dec    %eax
f0128b8b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128b91:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128b97:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b9c:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128ba2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128ba8:	29 d0                	sub    %edx,%eax
f0128baa:	01 c3                	add    %eax,%ebx
f0128bac:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128bb3:	10 00 00 
f0128bb6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128bbb:	0f b6 c0             	movzbl %al,%eax
f0128bbe:	c1 e0 04             	shl    $0x4,%eax
f0128bc1:	89 c2                	mov    %eax,%edx
f0128bc3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128bc9:	01 d0                	add    %edx,%eax
f0128bcb:	48                   	dec    %eax
f0128bcc:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128bd2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128bd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bdd:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128be3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128be9:	29 d0                	sub    %edx,%eax
f0128beb:	01 d8                	add    %ebx,%eax
f0128bed:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0128bf2:	39 c1                	cmp    %eax,%ecx
f0128bf4:	74 17                	je     f0128c0d <test_kexpand+0xc3e>
f0128bf6:	83 ec 04             	sub    $0x4,%esp
f0128bf9:	68 a8 c4 13 f0       	push   $0xf013c4a8
f0128bfe:	68 c4 0b 00 00       	push   $0xbc4
f0128c03:	68 5a b6 13 f0       	push   $0xf013b65a
f0128c08:	e8 f8 75 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c0d:	e8 b6 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c12:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c15:	74 17                	je     f0128c2e <test_kexpand+0xc5f>
f0128c17:	83 ec 04             	sub    $0x4,%esp
f0128c1a:	68 74 b6 13 f0       	push   $0xf013b674
f0128c1f:	68 c5 0b 00 00       	push   $0xbc5
f0128c24:	68 5a b6 13 f0       	push   $0xf013b65a
f0128c29:	e8 d7 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c2e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128c31:	e8 6d 42 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128c36:	29 c3                	sub    %eax,%ebx
f0128c38:	89 d8                	mov    %ebx,%eax
f0128c3a:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128c3f:	74 17                	je     f0128c58 <test_kexpand+0xc89>
f0128c41:	83 ec 04             	sub    $0x4,%esp
f0128c44:	68 dc b6 13 f0       	push   $0xf013b6dc
f0128c49:	68 c6 0b 00 00       	push   $0xbc6
f0128c4e:	68 5a b6 13 f0       	push   $0xf013b65a
f0128c53:	e8 ad 75 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128c58:	e8 46 42 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128c5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c60:	e8 63 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c65:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128c68:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128c6e:	83 ec 0c             	sub    $0xc,%esp
f0128c71:	50                   	push   %eax
f0128c72:	e8 e0 ef fd ff       	call   f0107c57 <kfree>
f0128c77:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c7a:	e8 49 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c7f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c82:	74 17                	je     f0128c9b <test_kexpand+0xccc>
f0128c84:	83 ec 04             	sub    $0x4,%esp
f0128c87:	68 74 b6 13 f0       	push   $0xf013b674
f0128c8c:	68 cf 0b 00 00       	push   $0xbcf
f0128c91:	68 5a b6 13 f0       	push   $0xf013b65a
f0128c96:	e8 6a 75 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128c9b:	e8 03 42 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128ca0:	89 c2                	mov    %eax,%edx
f0128ca2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128ca5:	29 c2                	sub    %eax,%edx
f0128ca7:	89 d0                	mov    %edx,%eax
f0128ca9:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128cae:	74 17                	je     f0128cc7 <test_kexpand+0xcf8>
f0128cb0:	83 ec 04             	sub    $0x4,%esp
f0128cb3:	68 0c bf 13 f0       	push   $0xf013bf0c
f0128cb8:	68 d0 0b 00 00       	push   $0xbd0
f0128cbd:	68 5a b6 13 f0       	push   $0xf013b65a
f0128cc2:	e8 3e 75 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128cc7:	e8 d7 41 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128ccc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ccf:	e8 f4 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128cd4:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128cd7:	83 ec 0c             	sub    $0xc,%esp
f0128cda:	68 00 50 40 00       	push   $0x405000
f0128cdf:	e8 4b f1 fd ff       	call   f0107e2f <kexpand>
f0128ce4:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128ce7:	e8 dc b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128cec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128cef:	74 19                	je     f0128d0a <test_kexpand+0xd3b>
f0128cf1:	68 f4 c3 13 f0       	push   $0xf013c3f4
f0128cf6:	68 25 c4 13 f0       	push   $0xf013c425
f0128cfb:	68 da 0b 00 00       	push   $0xbda
f0128d00:	68 5a b6 13 f0       	push   $0xf013b65a
f0128d05:	e8 fb 74 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128d0a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d0d:	e8 91 41 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128d12:	29 c3                	sub    %eax,%ebx
f0128d14:	89 d8                	mov    %ebx,%eax
f0128d16:	83 f8 05             	cmp    $0x5,%eax
f0128d19:	74 19                	je     f0128d34 <test_kexpand+0xd65>
f0128d1b:	68 d0 c4 13 f0       	push   $0xf013c4d0
f0128d20:	68 25 c4 13 f0       	push   $0xf013c425
f0128d25:	68 db 0b 00 00       	push   $0xbdb
f0128d2a:	68 5a b6 13 f0       	push   $0xf013b65a
f0128d2f:	e8 d1 74 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128d34:	83 ec 0c             	sub    $0xc,%esp
f0128d37:	68 b8 c3 13 f0       	push   $0xf013c3b8
f0128d3c:	e8 cd 7f fd ff       	call   f0100d0e <cprintf>
f0128d41:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128d44:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128d49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128d4c:	5b                   	pop    %ebx
f0128d4d:	5f                   	pop    %edi
f0128d4e:	5d                   	pop    %ebp
f0128d4f:	c3                   	ret    

f0128d50 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128d50:	55                   	push   %ebp
f0128d51:	89 e5                	mov    %esp,%ebp
f0128d53:	57                   	push   %edi
f0128d54:	53                   	push   %ebx
f0128d55:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0128d5b:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128d5f:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128d63:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128d69:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128d6f:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128d76:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128d7d:	e8 21 41 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128d82:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128d85:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0128d8b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d90:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d95:	89 d7                	mov    %edx,%edi
f0128d97:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128d99:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128d9f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128da4:	b8 00 00 00 00       	mov    $0x0,%eax
f0128da9:	89 d7                	mov    %edx,%edi
f0128dab:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128dad:	e8 f1 40 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128db2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128db5:	e8 0e b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128dba:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128dbd:	83 ec 0c             	sub    $0xc,%esp
f0128dc0:	68 00 fc 1f 00       	push   $0x1ffc00
f0128dc5:	e8 c2 ed fd ff       	call   f0107b8c <kmalloc>
f0128dca:	83 c4 10             	add    $0x10,%esp
f0128dcd:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128dd3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128dd9:	89 c1                	mov    %eax,%ecx
f0128ddb:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128de2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128de5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128dea:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128ded:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128df0:	ba 00 00 00 00       	mov    $0x0,%edx
f0128df5:	f7 75 d4             	divl   -0x2c(%ebp)
f0128df8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128dfb:	29 d0                	sub    %edx,%eax
f0128dfd:	89 c3                	mov    %eax,%ebx
f0128dff:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128e06:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128e0b:	0f b6 d0             	movzbl %al,%edx
f0128e0e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128e11:	01 d0                	add    %edx,%eax
f0128e13:	48                   	dec    %eax
f0128e14:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128e17:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128e1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e1f:	f7 75 cc             	divl   -0x34(%ebp)
f0128e22:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128e25:	29 d0                	sub    %edx,%eax
f0128e27:	01 c3                	add    %eax,%ebx
f0128e29:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128e30:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128e35:	0f b6 c0             	movzbl %al,%eax
f0128e38:	c1 e0 04             	shl    $0x4,%eax
f0128e3b:	89 c2                	mov    %eax,%edx
f0128e3d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128e40:	01 d0                	add    %edx,%eax
f0128e42:	48                   	dec    %eax
f0128e43:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128e46:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128e49:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e4e:	f7 75 c4             	divl   -0x3c(%ebp)
f0128e51:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128e54:	29 d0                	sub    %edx,%eax
f0128e56:	01 d8                	add    %ebx,%eax
f0128e58:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128e5d:	39 c1                	cmp    %eax,%ecx
f0128e5f:	74 17                	je     f0128e78 <test_kshrink+0x128>
f0128e61:	83 ec 04             	sub    $0x4,%esp
f0128e64:	68 40 b7 13 f0       	push   $0xf013b740
f0128e69:	68 01 0c 00 00       	push   $0xc01
f0128e6e:	68 5a b6 13 f0       	push   $0xf013b65a
f0128e73:	e8 8d 73 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e78:	e8 4b af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128e7d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e80:	74 17                	je     f0128e99 <test_kshrink+0x149>
f0128e82:	83 ec 04             	sub    $0x4,%esp
f0128e85:	68 74 b6 13 f0       	push   $0xf013b674
f0128e8a:	68 02 0c 00 00       	push   $0xc02
f0128e8f:	68 5a b6 13 f0       	push   $0xf013b65a
f0128e94:	e8 6c 73 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e99:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e9c:	e8 02 40 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128ea1:	29 c3                	sub    %eax,%ebx
f0128ea3:	89 d8                	mov    %ebx,%eax
f0128ea5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128eaa:	74 17                	je     f0128ec3 <test_kshrink+0x173>
f0128eac:	83 ec 04             	sub    $0x4,%esp
f0128eaf:	68 dc b6 13 f0       	push   $0xf013b6dc
f0128eb4:	68 03 0c 00 00       	push   $0xc03
f0128eb9:	68 5a b6 13 f0       	push   $0xf013b65a
f0128ebe:	e8 42 73 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128ec3:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128eca:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128ecd:	e8 d1 3f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128ed2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ed5:	e8 ee ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128eda:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128edd:	83 ec 0c             	sub    $0xc,%esp
f0128ee0:	68 00 fc 1f 00       	push   $0x1ffc00
f0128ee5:	e8 a2 ec fd ff       	call   f0107b8c <kmalloc>
f0128eea:	83 c4 10             	add    $0x10,%esp
f0128eed:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ef3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128ef9:	89 c1                	mov    %eax,%ecx
f0128efb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128f02:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128f05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128f0a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128f0d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128f10:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f15:	f7 75 bc             	divl   -0x44(%ebp)
f0128f18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128f1b:	29 d0                	sub    %edx,%eax
f0128f1d:	89 c3                	mov    %eax,%ebx
f0128f1f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128f26:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128f2b:	0f b6 d0             	movzbl %al,%edx
f0128f2e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128f31:	01 d0                	add    %edx,%eax
f0128f33:	48                   	dec    %eax
f0128f34:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128f37:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128f3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f3f:	f7 75 b4             	divl   -0x4c(%ebp)
f0128f42:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128f45:	29 d0                	sub    %edx,%eax
f0128f47:	01 c3                	add    %eax,%ebx
f0128f49:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128f50:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0128f55:	0f b6 c0             	movzbl %al,%eax
f0128f58:	c1 e0 04             	shl    $0x4,%eax
f0128f5b:	89 c2                	mov    %eax,%edx
f0128f5d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128f60:	01 d0                	add    %edx,%eax
f0128f62:	48                   	dec    %eax
f0128f63:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128f66:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128f69:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f6e:	f7 75 ac             	divl   -0x54(%ebp)
f0128f71:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128f74:	29 d0                	sub    %edx,%eax
f0128f76:	01 d8                	add    %ebx,%eax
f0128f78:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128f7d:	39 c1                	cmp    %eax,%ecx
f0128f7f:	74 17                	je     f0128f98 <test_kshrink+0x248>
f0128f81:	83 ec 04             	sub    $0x4,%esp
f0128f84:	68 40 b7 13 f0       	push   $0xf013b740
f0128f89:	68 0a 0c 00 00       	push   $0xc0a
f0128f8e:	68 5a b6 13 f0       	push   $0xf013b65a
f0128f93:	e8 6d 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f98:	e8 2b ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f9d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128fa0:	74 17                	je     f0128fb9 <test_kshrink+0x269>
f0128fa2:	83 ec 04             	sub    $0x4,%esp
f0128fa5:	68 74 b6 13 f0       	push   $0xf013b674
f0128faa:	68 0b 0c 00 00       	push   $0xc0b
f0128faf:	68 5a b6 13 f0       	push   $0xf013b65a
f0128fb4:	e8 4c 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128fb9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128fbc:	e8 e2 3e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128fc1:	29 c3                	sub    %eax,%ebx
f0128fc3:	89 d8                	mov    %ebx,%eax
f0128fc5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128fca:	74 17                	je     f0128fe3 <test_kshrink+0x293>
f0128fcc:	83 ec 04             	sub    $0x4,%esp
f0128fcf:	68 dc b6 13 f0       	push   $0xf013b6dc
f0128fd4:	68 0c 0c 00 00       	push   $0xc0c
f0128fd9:	68 5a b6 13 f0       	push   $0xf013b65a
f0128fde:	e8 22 72 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128fe3:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128fea:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128fed:	e8 b1 3e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0128ff2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ff5:	e8 ce ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ffa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128ffd:	83 ec 0c             	sub    $0xc,%esp
f0129000:	68 00 08 00 00       	push   $0x800
f0129005:	e8 82 eb fd ff       	call   f0107b8c <kmalloc>
f012900a:	83 c4 10             	add    $0x10,%esp
f012900d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129013:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129019:	89 c1                	mov    %eax,%ecx
f012901b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129022:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129025:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012902a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012902d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129030:	ba 00 00 00 00       	mov    $0x0,%edx
f0129035:	f7 75 a4             	divl   -0x5c(%ebp)
f0129038:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012903b:	29 d0                	sub    %edx,%eax
f012903d:	89 c3                	mov    %eax,%ebx
f012903f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129046:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012904b:	0f b6 d0             	movzbl %al,%edx
f012904e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129051:	01 d0                	add    %edx,%eax
f0129053:	48                   	dec    %eax
f0129054:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129057:	8b 45 98             	mov    -0x68(%ebp),%eax
f012905a:	ba 00 00 00 00       	mov    $0x0,%edx
f012905f:	f7 75 9c             	divl   -0x64(%ebp)
f0129062:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129065:	29 d0                	sub    %edx,%eax
f0129067:	01 c3                	add    %eax,%ebx
f0129069:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129070:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129075:	0f b6 c0             	movzbl %al,%eax
f0129078:	c1 e0 04             	shl    $0x4,%eax
f012907b:	89 c2                	mov    %eax,%edx
f012907d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129080:	01 d0                	add    %edx,%eax
f0129082:	48                   	dec    %eax
f0129083:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129086:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129089:	ba 00 00 00 00       	mov    $0x0,%edx
f012908e:	f7 75 94             	divl   -0x6c(%ebp)
f0129091:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129094:	29 d0                	sub    %edx,%eax
f0129096:	01 d8                	add    %ebx,%eax
f0129098:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012909d:	39 c1                	cmp    %eax,%ecx
f012909f:	74 17                	je     f01290b8 <test_kshrink+0x368>
f01290a1:	83 ec 04             	sub    $0x4,%esp
f01290a4:	68 40 b7 13 f0       	push   $0xf013b740
f01290a9:	68 13 0c 00 00       	push   $0xc13
f01290ae:	68 5a b6 13 f0       	push   $0xf013b65a
f01290b3:	e8 4d 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01290b8:	e8 0b ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01290bd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01290c0:	74 17                	je     f01290d9 <test_kshrink+0x389>
f01290c2:	83 ec 04             	sub    $0x4,%esp
f01290c5:	68 74 b6 13 f0       	push   $0xf013b674
f01290ca:	68 14 0c 00 00       	push   $0xc14
f01290cf:	68 5a b6 13 f0       	push   $0xf013b65a
f01290d4:	e8 2c 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01290d9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01290dc:	e8 c2 3d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01290e1:	29 c3                	sub    %eax,%ebx
f01290e3:	89 d8                	mov    %ebx,%eax
f01290e5:	83 f8 01             	cmp    $0x1,%eax
f01290e8:	74 17                	je     f0129101 <test_kshrink+0x3b1>
f01290ea:	83 ec 04             	sub    $0x4,%esp
f01290ed:	68 dc b6 13 f0       	push   $0xf013b6dc
f01290f2:	68 15 0c 00 00       	push   $0xc15
f01290f7:	68 5a b6 13 f0       	push   $0xf013b65a
f01290fc:	e8 04 71 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129101:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0129108:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012910b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129111:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129114:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012911b:	eb 0e                	jmp    f012912b <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f012911d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129120:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129123:	01 d0                	add    %edx,%eax
f0129125:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129128:	ff 45 f4             	incl   -0xc(%ebp)
f012912b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129131:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129134:	7f e7                	jg     f012911d <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129136:	e8 68 3d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012913b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012913e:	e8 85 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129143:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129146:	83 ec 0c             	sub    $0xc,%esp
f0129149:	68 00 08 00 00       	push   $0x800
f012914e:	e8 39 ea fd ff       	call   f0107b8c <kmalloc>
f0129153:	83 c4 10             	add    $0x10,%esp
f0129156:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012915c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129162:	89 c1                	mov    %eax,%ecx
f0129164:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012916b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012916e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129173:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0129176:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129179:	ba 00 00 00 00       	mov    $0x0,%edx
f012917e:	f7 75 88             	divl   -0x78(%ebp)
f0129181:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129184:	29 d0                	sub    %edx,%eax
f0129186:	89 c3                	mov    %eax,%ebx
f0129188:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012918f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129194:	0f b6 d0             	movzbl %al,%edx
f0129197:	8b 45 80             	mov    -0x80(%ebp),%eax
f012919a:	01 d0                	add    %edx,%eax
f012919c:	48                   	dec    %eax
f012919d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01291a3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01291a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01291ae:	f7 75 80             	divl   -0x80(%ebp)
f01291b1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01291b7:	29 d0                	sub    %edx,%eax
f01291b9:	01 c3                	add    %eax,%ebx
f01291bb:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01291c2:	10 00 00 
f01291c5:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01291ca:	0f b6 c0             	movzbl %al,%eax
f01291cd:	c1 e0 04             	shl    $0x4,%eax
f01291d0:	89 c2                	mov    %eax,%edx
f01291d2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01291d8:	01 d0                	add    %edx,%eax
f01291da:	48                   	dec    %eax
f01291db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01291e1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01291e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01291ec:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01291f2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01291f8:	29 d0                	sub    %edx,%eax
f01291fa:	01 d8                	add    %ebx,%eax
f01291fc:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129201:	39 c1                	cmp    %eax,%ecx
f0129203:	74 17                	je     f012921c <test_kshrink+0x4cc>
f0129205:	83 ec 04             	sub    $0x4,%esp
f0129208:	68 40 b7 13 f0       	push   $0xf013b740
f012920d:	68 21 0c 00 00       	push   $0xc21
f0129212:	68 5a b6 13 f0       	push   $0xf013b65a
f0129217:	e8 e9 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012921c:	e8 a7 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129221:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129224:	74 17                	je     f012923d <test_kshrink+0x4ed>
f0129226:	83 ec 04             	sub    $0x4,%esp
f0129229:	68 74 b6 13 f0       	push   $0xf013b674
f012922e:	68 22 0c 00 00       	push   $0xc22
f0129233:	68 5a b6 13 f0       	push   $0xf013b65a
f0129238:	e8 c8 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012923d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129240:	e8 5e 3c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129245:	29 c3                	sub    %eax,%ebx
f0129247:	89 d8                	mov    %ebx,%eax
f0129249:	83 f8 01             	cmp    $0x1,%eax
f012924c:	74 17                	je     f0129265 <test_kshrink+0x515>
f012924e:	83 ec 04             	sub    $0x4,%esp
f0129251:	68 dc b6 13 f0       	push   $0xf013b6dc
f0129256:	68 23 0c 00 00       	push   $0xc23
f012925b:	68 5a b6 13 f0       	push   $0xf013b65a
f0129260:	e8 a0 6f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129265:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f012926c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012926f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129275:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129278:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012927f:	eb 0e                	jmp    f012928f <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0129281:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129284:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129287:	01 d0                	add    %edx,%eax
f0129289:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012928c:	ff 45 f4             	incl   -0xc(%ebp)
f012928f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129295:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129298:	7f e7                	jg     f0129281 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012929a:	e8 04 3c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012929f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292a2:	e8 21 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01292a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01292aa:	83 ec 0c             	sub    $0xc,%esp
f01292ad:	68 00 1c 00 00       	push   $0x1c00
f01292b2:	e8 d5 e8 fd ff       	call   f0107b8c <kmalloc>
f01292b7:	83 c4 10             	add    $0x10,%esp
f01292ba:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01292c0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01292c6:	89 c1                	mov    %eax,%ecx
f01292c8:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01292cf:	10 00 00 
f01292d2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01292d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01292dd:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01292e3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01292e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01292ee:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01292f4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01292fa:	29 d0                	sub    %edx,%eax
f01292fc:	89 c3                	mov    %eax,%ebx
f01292fe:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129305:	10 00 00 
f0129308:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012930d:	0f b6 d0             	movzbl %al,%edx
f0129310:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129316:	01 d0                	add    %edx,%eax
f0129318:	48                   	dec    %eax
f0129319:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012931f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129325:	ba 00 00 00 00       	mov    $0x0,%edx
f012932a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129330:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129336:	29 d0                	sub    %edx,%eax
f0129338:	01 c3                	add    %eax,%ebx
f012933a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129341:	10 00 00 
f0129344:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129349:	0f b6 c0             	movzbl %al,%eax
f012934c:	c1 e0 04             	shl    $0x4,%eax
f012934f:	89 c2                	mov    %eax,%edx
f0129351:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129357:	01 d0                	add    %edx,%eax
f0129359:	48                   	dec    %eax
f012935a:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129360:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129366:	ba 00 00 00 00       	mov    $0x0,%edx
f012936b:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129371:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129377:	29 d0                	sub    %edx,%eax
f0129379:	01 d8                	add    %ebx,%eax
f012937b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129380:	39 c1                	cmp    %eax,%ecx
f0129382:	74 17                	je     f012939b <test_kshrink+0x64b>
f0129384:	83 ec 04             	sub    $0x4,%esp
f0129387:	68 40 b7 13 f0       	push   $0xf013b740
f012938c:	68 2f 0c 00 00       	push   $0xc2f
f0129391:	68 5a b6 13 f0       	push   $0xf013b65a
f0129396:	e8 6a 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012939b:	e8 28 aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01293a0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01293a3:	74 17                	je     f01293bc <test_kshrink+0x66c>
f01293a5:	83 ec 04             	sub    $0x4,%esp
f01293a8:	68 74 b6 13 f0       	push   $0xf013b674
f01293ad:	68 30 0c 00 00       	push   $0xc30
f01293b2:	68 5a b6 13 f0       	push   $0xf013b65a
f01293b7:	e8 49 6e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01293bc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01293bf:	e8 df 3a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01293c4:	29 c3                	sub    %eax,%ebx
f01293c6:	89 d8                	mov    %ebx,%eax
f01293c8:	83 f8 02             	cmp    $0x2,%eax
f01293cb:	74 17                	je     f01293e4 <test_kshrink+0x694>
f01293cd:	83 ec 04             	sub    $0x4,%esp
f01293d0:	68 dc b6 13 f0       	push   $0xf013b6dc
f01293d5:	68 31 0c 00 00       	push   $0xc31
f01293da:	68 5a b6 13 f0       	push   $0xf013b65a
f01293df:	e8 21 6e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01293e4:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01293eb:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01293ee:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01293f4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01293f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01293fe:	eb 0e                	jmp    f012940e <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0129400:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129403:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129406:	01 d0                	add    %edx,%eax
f0129408:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012940b:	ff 45 f4             	incl   -0xc(%ebp)
f012940e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129414:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129417:	7f e7                	jg     f0129400 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129419:	e8 85 3a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012941e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129421:	e8 a2 a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129426:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129429:	83 ec 0c             	sub    $0xc,%esp
f012942c:	68 00 fc 2f 00       	push   $0x2ffc00
f0129431:	e8 56 e7 fd ff       	call   f0107b8c <kmalloc>
f0129436:	83 c4 10             	add    $0x10,%esp
f0129439:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012943f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129445:	89 c1                	mov    %eax,%ecx
f0129447:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012944e:	10 00 00 
f0129451:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129457:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012945c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129462:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129468:	ba 00 00 00 00       	mov    $0x0,%edx
f012946d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129473:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129479:	29 d0                	sub    %edx,%eax
f012947b:	89 c3                	mov    %eax,%ebx
f012947d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129484:	10 00 00 
f0129487:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012948c:	0f b6 d0             	movzbl %al,%edx
f012948f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129495:	01 d0                	add    %edx,%eax
f0129497:	48                   	dec    %eax
f0129498:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012949e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01294a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01294a9:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01294af:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01294b5:	29 d0                	sub    %edx,%eax
f01294b7:	01 c3                	add    %eax,%ebx
f01294b9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01294c0:	10 00 00 
f01294c3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01294c8:	0f b6 c0             	movzbl %al,%eax
f01294cb:	c1 e0 04             	shl    $0x4,%eax
f01294ce:	89 c2                	mov    %eax,%edx
f01294d0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01294d6:	01 d0                	add    %edx,%eax
f01294d8:	48                   	dec    %eax
f01294d9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01294df:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01294e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01294ea:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01294f0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01294f6:	29 d0                	sub    %edx,%eax
f01294f8:	01 d8                	add    %ebx,%eax
f01294fa:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01294ff:	39 c1                	cmp    %eax,%ecx
f0129501:	74 17                	je     f012951a <test_kshrink+0x7ca>
f0129503:	83 ec 04             	sub    $0x4,%esp
f0129506:	68 40 b7 13 f0       	push   $0xf013b740
f012950b:	68 3d 0c 00 00       	push   $0xc3d
f0129510:	68 5a b6 13 f0       	push   $0xf013b65a
f0129515:	e8 eb 6c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012951a:	e8 a9 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012951f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129522:	74 17                	je     f012953b <test_kshrink+0x7eb>
f0129524:	83 ec 04             	sub    $0x4,%esp
f0129527:	68 74 b6 13 f0       	push   $0xf013b674
f012952c:	68 3e 0c 00 00       	push   $0xc3e
f0129531:	68 5a b6 13 f0       	push   $0xf013b65a
f0129536:	e8 ca 6c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012953b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012953e:	e8 60 39 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129543:	29 c3                	sub    %eax,%ebx
f0129545:	89 d8                	mov    %ebx,%eax
f0129547:	3d 00 03 00 00       	cmp    $0x300,%eax
f012954c:	74 17                	je     f0129565 <test_kshrink+0x815>
f012954e:	83 ec 04             	sub    $0x4,%esp
f0129551:	68 dc b6 13 f0       	push   $0xf013b6dc
f0129556:	68 3f 0c 00 00       	push   $0xc3f
f012955b:	68 5a b6 13 f0       	push   $0xf013b65a
f0129560:	e8 a0 6c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129565:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f012956c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012956f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129575:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129578:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012957f:	eb 0e                	jmp    f012958f <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0129581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129584:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129587:	01 d0                	add    %edx,%eax
f0129589:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012958c:	ff 45 f4             	incl   -0xc(%ebp)
f012958f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129595:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129598:	7f e7                	jg     f0129581 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012959a:	e8 04 39 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012959f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295a2:	e8 21 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01295a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01295aa:	83 ec 0c             	sub    $0xc,%esp
f01295ad:	68 00 00 60 00       	push   $0x600000
f01295b2:	e8 d5 e5 fd ff       	call   f0107b8c <kmalloc>
f01295b7:	83 c4 10             	add    $0x10,%esp
f01295ba:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01295c0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01295c6:	89 c1                	mov    %eax,%ecx
f01295c8:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01295cf:	10 00 00 
f01295d2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01295d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01295dd:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01295e3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01295e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01295ee:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01295f4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01295fa:	29 d0                	sub    %edx,%eax
f01295fc:	89 c3                	mov    %eax,%ebx
f01295fe:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129605:	10 00 00 
f0129608:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012960d:	0f b6 d0             	movzbl %al,%edx
f0129610:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129616:	01 d0                	add    %edx,%eax
f0129618:	48                   	dec    %eax
f0129619:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012961f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129625:	ba 00 00 00 00       	mov    $0x0,%edx
f012962a:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129630:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129636:	29 d0                	sub    %edx,%eax
f0129638:	01 c3                	add    %eax,%ebx
f012963a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129641:	10 00 00 
f0129644:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129649:	0f b6 c0             	movzbl %al,%eax
f012964c:	c1 e0 04             	shl    $0x4,%eax
f012964f:	89 c2                	mov    %eax,%edx
f0129651:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129657:	01 d0                	add    %edx,%eax
f0129659:	48                   	dec    %eax
f012965a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129660:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129666:	ba 00 00 00 00       	mov    $0x0,%edx
f012966b:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129671:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129677:	29 d0                	sub    %edx,%eax
f0129679:	01 d8                	add    %ebx,%eax
f012967b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129680:	39 c1                	cmp    %eax,%ecx
f0129682:	74 17                	je     f012969b <test_kshrink+0x94b>
f0129684:	83 ec 04             	sub    $0x4,%esp
f0129687:	68 40 b7 13 f0       	push   $0xf013b740
f012968c:	68 4b 0c 00 00       	push   $0xc4b
f0129691:	68 5a b6 13 f0       	push   $0xf013b65a
f0129696:	e8 6a 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012969b:	e8 28 a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01296a0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01296a3:	74 17                	je     f01296bc <test_kshrink+0x96c>
f01296a5:	83 ec 04             	sub    $0x4,%esp
f01296a8:	68 74 b6 13 f0       	push   $0xf013b674
f01296ad:	68 4c 0c 00 00       	push   $0xc4c
f01296b2:	68 5a b6 13 f0       	push   $0xf013b65a
f01296b7:	e8 49 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01296bc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01296bf:	e8 df 37 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01296c4:	29 c3                	sub    %eax,%ebx
f01296c6:	89 d8                	mov    %ebx,%eax
f01296c8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01296cd:	74 17                	je     f01296e6 <test_kshrink+0x996>
f01296cf:	83 ec 04             	sub    $0x4,%esp
f01296d2:	68 dc b6 13 f0       	push   $0xf013b6dc
f01296d7:	68 4d 0c 00 00       	push   $0xc4d
f01296dc:	68 5a b6 13 f0       	push   $0xf013b65a
f01296e1:	e8 1f 6b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01296e6:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f01296ed:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01296f0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01296f6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01296fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129703:	eb 1a                	jmp    f012971f <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129705:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129708:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012970f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129715:	01 c2                	add    %eax,%edx
f0129717:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012971a:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012971c:	ff 45 f4             	incl   -0xc(%ebp)
f012971f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129725:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129728:	7d db                	jge    f0129705 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012972a:	e8 74 37 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012972f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129732:	e8 91 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129737:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f012973a:	83 ec 0c             	sub    $0xc,%esp
f012973d:	68 00 00 50 00       	push   $0x500000
f0129742:	e8 cb e6 fd ff       	call   f0107e12 <kshrink>
f0129747:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012974a:	e8 79 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012974f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129752:	74 19                	je     f012976d <test_kshrink+0xa1d>
f0129754:	68 f4 c3 13 f0       	push   $0xf013c3f4
f0129759:	68 25 c4 13 f0       	push   $0xf013c425
f012975e:	68 5d 0c 00 00       	push   $0xc5d
f0129763:	68 5a b6 13 f0       	push   $0xf013b65a
f0129768:	e8 98 6a fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f012976d:	e8 31 37 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129772:	89 c2                	mov    %eax,%edx
f0129774:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129777:	29 c2                	sub    %eax,%edx
f0129779:	89 d0                	mov    %edx,%eax
f012977b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129780:	74 19                	je     f012979b <test_kshrink+0xa4b>
f0129782:	68 00 c5 13 f0       	push   $0xf013c500
f0129787:	68 25 c4 13 f0       	push   $0xf013c425
f012978c:	68 5e 0c 00 00       	push   $0xc5e
f0129791:	68 5a b6 13 f0       	push   $0xf013b65a
f0129796:	e8 6a 6a fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f012979b:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f01297a2:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01297a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297ac:	eb 37                	jmp    f01297e5 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f01297ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01297b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01297b8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01297be:	01 d0                	add    %edx,%eax
f01297c0:	8b 10                	mov    (%eax),%edx
f01297c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01297c5:	39 c2                	cmp    %eax,%edx
f01297c7:	74 19                	je     f01297e2 <test_kshrink+0xa92>
f01297c9:	68 30 c5 13 f0       	push   $0xf013c530
f01297ce:	68 25 c4 13 f0       	push   $0xf013c425
f01297d3:	68 66 0c 00 00       	push   $0xc66
f01297d8:	68 5a b6 13 f0       	push   $0xf013b65a
f01297dd:	e8 23 6a fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01297e2:	ff 45 f4             	incl   -0xc(%ebp)
f01297e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01297e8:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01297ee:	7e be                	jle    f01297ae <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01297f0:	83 ec 0c             	sub    $0xc,%esp
f01297f3:	6a 03                	push   $0x3
f01297f5:	e8 49 3b fe ff       	call   f010d343 <sys_bypassPageFault>
f01297fa:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01297fd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129803:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129806:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129809:	05 00 00 50 00       	add    $0x500000,%eax
f012980e:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0129811:	e8 1b 3b fe ff       	call   f010d331 <sys_rcr2>
f0129816:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129819:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012981f:	39 d0                	cmp    %edx,%eax
f0129821:	74 19                	je     f012983c <test_kshrink+0xaec>
f0129823:	68 3c c5 13 f0       	push   $0xf013c53c
f0129828:	68 25 c4 13 f0       	push   $0xf013c425
f012982d:	68 6f 0c 00 00       	push   $0xc6f
f0129832:	68 5a b6 13 f0       	push   $0xf013b65a
f0129837:	e8 c9 69 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f012983c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012983f:	05 00 10 50 00       	add    $0x501000,%eax
f0129844:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129847:	e8 e5 3a fe ff       	call   f010d331 <sys_rcr2>
f012984c:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012984f:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129855:	39 d0                	cmp    %edx,%eax
f0129857:	74 19                	je     f0129872 <test_kshrink+0xb22>
f0129859:	68 64 c5 13 f0       	push   $0xf013c564
f012985e:	68 25 c4 13 f0       	push   $0xf013c425
f0129863:	68 72 0c 00 00       	push   $0xc72
f0129868:	68 5a b6 13 f0       	push   $0xf013b65a
f012986d:	e8 93 69 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129872:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129875:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f012987a:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f012987d:	e8 af 3a fe ff       	call   f010d331 <sys_rcr2>
f0129882:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129885:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f012988b:	39 d0                	cmp    %edx,%eax
f012988d:	74 19                	je     f01298a8 <test_kshrink+0xb58>
f012988f:	68 90 c5 13 f0       	push   $0xf013c590
f0129894:	68 25 c4 13 f0       	push   $0xf013c425
f0129899:	68 75 0c 00 00       	push   $0xc75
f012989e:	68 5a b6 13 f0       	push   $0xf013b65a
f01298a3:	e8 5d 69 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01298a8:	83 ec 0c             	sub    $0xc,%esp
f01298ab:	6a 00                	push   $0x0
f01298ad:	e8 91 3a fe ff       	call   f010d343 <sys_bypassPageFault>
f01298b2:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01298b5:	e8 e9 35 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01298ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298bd:	e8 06 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298c2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01298c5:	83 ec 0c             	sub    $0xc,%esp
f01298c8:	68 00 00 20 00       	push   $0x200000
f01298cd:	e8 40 e5 fd ff       	call   f0107e12 <kshrink>
f01298d2:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01298d5:	e8 ee a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298da:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01298dd:	74 19                	je     f01298f8 <test_kshrink+0xba8>
f01298df:	68 f4 c3 13 f0       	push   $0xf013c3f4
f01298e4:	68 25 c4 13 f0       	push   $0xf013c425
f01298e9:	68 82 0c 00 00       	push   $0xc82
f01298ee:	68 5a b6 13 f0       	push   $0xf013b65a
f01298f3:	e8 0d 69 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01298f8:	e8 a6 35 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f01298fd:	89 c2                	mov    %eax,%edx
f01298ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129902:	29 c2                	sub    %eax,%edx
f0129904:	89 d0                	mov    %edx,%eax
f0129906:	3d 00 03 00 00       	cmp    $0x300,%eax
f012990b:	74 19                	je     f0129926 <test_kshrink+0xbd6>
f012990d:	68 bc c5 13 f0       	push   $0xf013c5bc
f0129912:	68 25 c4 13 f0       	push   $0xf013c425
f0129917:	68 83 0c 00 00       	push   $0xc83
f012991c:	68 5a b6 13 f0       	push   $0xf013b65a
f0129921:	e8 df 68 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129926:	e8 78 35 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012992b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012992e:	e8 95 a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129933:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129936:	83 ec 0c             	sub    $0xc,%esp
f0129939:	68 00 00 40 00       	push   $0x400000
f012993e:	e8 49 e2 fd ff       	call   f0107b8c <kmalloc>
f0129943:	83 c4 10             	add    $0x10,%esp
f0129946:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f012994c:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129953:	10 00 00 
f0129956:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012995c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129961:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129967:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012996d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129972:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129978:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012997e:	29 d0                	sub    %edx,%eax
f0129980:	89 c1                	mov    %eax,%ecx
f0129982:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129989:	10 00 00 
f012998c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129991:	0f b6 d0             	movzbl %al,%edx
f0129994:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012999a:	01 d0                	add    %edx,%eax
f012999c:	48                   	dec    %eax
f012999d:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01299a3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01299a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01299ae:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01299b4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01299ba:	29 d0                	sub    %edx,%eax
f01299bc:	01 c1                	add    %eax,%ecx
f01299be:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01299c5:	10 00 00 
f01299c8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01299cd:	0f b6 c0             	movzbl %al,%eax
f01299d0:	c1 e0 04             	shl    $0x4,%eax
f01299d3:	89 c2                	mov    %eax,%edx
f01299d5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01299db:	01 d0                	add    %edx,%eax
f01299dd:	48                   	dec    %eax
f01299de:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01299e4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01299ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01299ef:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01299f5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01299fb:	29 d0                	sub    %edx,%eax
f01299fd:	01 c8                	add    %ecx,%eax
f01299ff:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129a05:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129a0b:	83 ec 04             	sub    $0x4,%esp
f0129a0e:	52                   	push   %edx
f0129a0f:	50                   	push   %eax
f0129a10:	68 ec c5 13 f0       	push   $0xf013c5ec
f0129a15:	e8 f4 72 fd ff       	call   f0100d0e <cprintf>
f0129a1a:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129a1d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129a23:	89 c1                	mov    %eax,%ecx
f0129a25:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129a2c:	10 00 00 
f0129a2f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129a35:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a3a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129a40:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129a46:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a4b:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129a51:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129a57:	29 d0                	sub    %edx,%eax
f0129a59:	89 c3                	mov    %eax,%ebx
f0129a5b:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129a62:	10 00 00 
f0129a65:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129a6a:	0f b6 d0             	movzbl %al,%edx
f0129a6d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129a73:	01 d0                	add    %edx,%eax
f0129a75:	48                   	dec    %eax
f0129a76:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129a7c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129a82:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a87:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129a8d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129a93:	29 d0                	sub    %edx,%eax
f0129a95:	01 c3                	add    %eax,%ebx
f0129a97:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129a9e:	10 00 00 
f0129aa1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129aa6:	0f b6 c0             	movzbl %al,%eax
f0129aa9:	c1 e0 04             	shl    $0x4,%eax
f0129aac:	89 c2                	mov    %eax,%edx
f0129aae:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129ab4:	01 d0                	add    %edx,%eax
f0129ab6:	48                   	dec    %eax
f0129ab7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129abd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129ac3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ac8:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129ace:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129ad4:	29 d0                	sub    %edx,%eax
f0129ad6:	01 d8                	add    %ebx,%eax
f0129ad8:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129add:	39 c1                	cmp    %eax,%ecx
f0129adf:	74 17                	je     f0129af8 <test_kshrink+0xda8>
f0129ae1:	83 ec 04             	sub    $0x4,%esp
f0129ae4:	68 08 c6 13 f0       	push   $0xf013c608
f0129ae9:	68 8e 0c 00 00       	push   $0xc8e
f0129aee:	68 5a b6 13 f0       	push   $0xf013b65a
f0129af3:	e8 0d 67 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129af8:	e8 cb a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129afd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129b00:	74 17                	je     f0129b19 <test_kshrink+0xdc9>
f0129b02:	83 ec 04             	sub    $0x4,%esp
f0129b05:	68 74 b6 13 f0       	push   $0xf013b674
f0129b0a:	68 8f 0c 00 00       	push   $0xc8f
f0129b0f:	68 5a b6 13 f0       	push   $0xf013b65a
f0129b14:	e8 ec 66 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129b19:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129b1c:	e8 82 33 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129b21:	29 c3                	sub    %eax,%ebx
f0129b23:	89 d8                	mov    %ebx,%eax
f0129b25:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129b2a:	74 17                	je     f0129b43 <test_kshrink+0xdf3>
f0129b2c:	83 ec 04             	sub    $0x4,%esp
f0129b2f:	68 dc b6 13 f0       	push   $0xf013b6dc
f0129b34:	68 90 0c 00 00       	push   $0xc90
f0129b39:	68 5a b6 13 f0       	push   $0xf013b65a
f0129b3e:	e8 c2 66 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129b43:	e8 5b 33 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129b48:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b4b:	e8 78 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129b50:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129b53:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129b59:	83 ec 0c             	sub    $0xc,%esp
f0129b5c:	50                   	push   %eax
f0129b5d:	e8 f5 e0 fd ff       	call   f0107c57 <kfree>
f0129b62:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b65:	e8 5e a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129b6a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129b6d:	74 17                	je     f0129b86 <test_kshrink+0xe36>
f0129b6f:	83 ec 04             	sub    $0x4,%esp
f0129b72:	68 74 b6 13 f0       	push   $0xf013b674
f0129b77:	68 9a 0c 00 00       	push   $0xc9a
f0129b7c:	68 5a b6 13 f0       	push   $0xf013b65a
f0129b81:	e8 7f 66 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129b86:	e8 18 33 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129b8b:	89 c2                	mov    %eax,%edx
f0129b8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129b90:	29 c2                	sub    %eax,%edx
f0129b92:	89 d0                	mov    %edx,%eax
f0129b94:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129b99:	74 17                	je     f0129bb2 <test_kshrink+0xe62>
f0129b9b:	83 ec 04             	sub    $0x4,%esp
f0129b9e:	68 0c bf 13 f0       	push   $0xf013bf0c
f0129ba3:	68 9b 0c 00 00       	push   $0xc9b
f0129ba8:	68 5a b6 13 f0       	push   $0xf013b65a
f0129bad:	e8 53 66 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129bb2:	e8 ec 32 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129bb7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129bba:	e8 09 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129bbf:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129bc2:	83 ec 0c             	sub    $0xc,%esp
f0129bc5:	68 00 b0 3f 00       	push   $0x3fb000
f0129bca:	e8 43 e2 fd ff       	call   f0107e12 <kshrink>
f0129bcf:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129bd2:	e8 f1 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129bd7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129bda:	74 19                	je     f0129bf5 <test_kshrink+0xea5>
f0129bdc:	68 f4 c3 13 f0       	push   $0xf013c3f4
f0129be1:	68 25 c4 13 f0       	push   $0xf013c425
f0129be6:	68 a5 0c 00 00       	push   $0xca5
f0129beb:	68 5a b6 13 f0       	push   $0xf013b65a
f0129bf0:	e8 10 66 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129bf5:	e8 a9 32 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129bfa:	89 c2                	mov    %eax,%edx
f0129bfc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129bff:	29 c2                	sub    %eax,%edx
f0129c01:	89 d0                	mov    %edx,%eax
f0129c03:	83 f8 05             	cmp    $0x5,%eax
f0129c06:	74 19                	je     f0129c21 <test_kshrink+0xed1>
f0129c08:	68 5c c6 13 f0       	push   $0xf013c65c
f0129c0d:	68 25 c4 13 f0       	push   $0xf013c425
f0129c12:	68 a6 0c 00 00       	push   $0xca6
f0129c17:	68 5a b6 13 f0       	push   $0xf013b65a
f0129c1c:	e8 e4 65 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129c21:	83 ec 0c             	sub    $0xc,%esp
f0129c24:	68 b8 c3 13 f0       	push   $0xf013c3b8
f0129c29:	e8 e0 70 fd ff       	call   f0100d0e <cprintf>
f0129c2e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129c31:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129c36:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129c39:	5b                   	pop    %ebx
f0129c3a:	5f                   	pop    %edi
f0129c3b:	5d                   	pop    %ebp
f0129c3c:	c3                   	ret    

f0129c3d <test_kfreelast>:


int test_kfreelast()
{
f0129c3d:	55                   	push   %ebp
f0129c3e:	89 e5                	mov    %esp,%ebp
f0129c40:	57                   	push   %edi
f0129c41:	53                   	push   %ebx
f0129c42:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129c48:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129c4c:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129c50:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129c56:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129c5c:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129c63:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129c6a:	e8 34 32 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129c6f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0129c72:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129c78:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129c7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0129c82:	89 d7                	mov    %edx,%edi
f0129c84:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129c86:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129c8c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129c91:	b8 00 00 00 00       	mov    $0x0,%eax
f0129c96:	89 d7                	mov    %edx,%edi
f0129c98:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129c9a:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129ca0:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129ca5:	b8 00 00 00 00       	mov    $0x0,%eax
f0129caa:	89 d7                	mov    %edx,%edi
f0129cac:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129cae:	e8 f0 31 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129cb3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cb6:	e8 0d a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129cbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129cbe:	83 ec 0c             	sub    $0xc,%esp
f0129cc1:	68 00 fc 1f 00       	push   $0x1ffc00
f0129cc6:	e8 c1 de fd ff       	call   f0107b8c <kmalloc>
f0129ccb:	83 c4 10             	add    $0x10,%esp
f0129cce:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129cd4:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129cda:	89 c1                	mov    %eax,%ecx
f0129cdc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129ce3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129ce6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129ceb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129cee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129cf1:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cf6:	f7 75 cc             	divl   -0x34(%ebp)
f0129cf9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129cfc:	29 d0                	sub    %edx,%eax
f0129cfe:	89 c3                	mov    %eax,%ebx
f0129d00:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129d07:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129d0c:	0f b6 d0             	movzbl %al,%edx
f0129d0f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129d12:	01 d0                	add    %edx,%eax
f0129d14:	48                   	dec    %eax
f0129d15:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129d18:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129d1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d20:	f7 75 c4             	divl   -0x3c(%ebp)
f0129d23:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129d26:	29 d0                	sub    %edx,%eax
f0129d28:	01 c3                	add    %eax,%ebx
f0129d2a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129d31:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129d36:	0f b6 c0             	movzbl %al,%eax
f0129d39:	c1 e0 04             	shl    $0x4,%eax
f0129d3c:	89 c2                	mov    %eax,%edx
f0129d3e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129d41:	01 d0                	add    %edx,%eax
f0129d43:	48                   	dec    %eax
f0129d44:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129d47:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129d4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d4f:	f7 75 bc             	divl   -0x44(%ebp)
f0129d52:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129d55:	29 d0                	sub    %edx,%eax
f0129d57:	01 d8                	add    %ebx,%eax
f0129d59:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129d5e:	39 c1                	cmp    %eax,%ecx
f0129d60:	74 17                	je     f0129d79 <test_kfreelast+0x13c>
f0129d62:	83 ec 04             	sub    $0x4,%esp
f0129d65:	68 40 b7 13 f0       	push   $0xf013b740
f0129d6a:	68 ca 0c 00 00       	push   $0xcca
f0129d6f:	68 5a b6 13 f0       	push   $0xf013b65a
f0129d74:	e8 8c 64 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d79:	e8 4a a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129d7e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d81:	74 17                	je     f0129d9a <test_kfreelast+0x15d>
f0129d83:	83 ec 04             	sub    $0x4,%esp
f0129d86:	68 74 b6 13 f0       	push   $0xf013b674
f0129d8b:	68 cb 0c 00 00       	push   $0xccb
f0129d90:	68 5a b6 13 f0       	push   $0xf013b65a
f0129d95:	e8 6b 64 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129d9a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129d9d:	e8 01 31 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129da2:	29 c3                	sub    %eax,%ebx
f0129da4:	89 d8                	mov    %ebx,%eax
f0129da6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129dab:	74 17                	je     f0129dc4 <test_kfreelast+0x187>
f0129dad:	83 ec 04             	sub    $0x4,%esp
f0129db0:	68 dc b6 13 f0       	push   $0xf013b6dc
f0129db5:	68 cc 0c 00 00       	push   $0xccc
f0129dba:	68 5a b6 13 f0       	push   $0xf013b65a
f0129dbf:	e8 41 64 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129dc4:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129dcb:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129dce:	e8 d0 30 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129dd3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129dd6:	e8 ed 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ddb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129dde:	83 ec 0c             	sub    $0xc,%esp
f0129de1:	68 00 fc 1f 00       	push   $0x1ffc00
f0129de6:	e8 a1 dd fd ff       	call   f0107b8c <kmalloc>
f0129deb:	83 c4 10             	add    $0x10,%esp
f0129dee:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129df4:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129dfa:	89 c1                	mov    %eax,%ecx
f0129dfc:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129e03:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129e06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e0b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129e0e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129e11:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e16:	f7 75 b4             	divl   -0x4c(%ebp)
f0129e19:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129e1c:	29 d0                	sub    %edx,%eax
f0129e1e:	89 c3                	mov    %eax,%ebx
f0129e20:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129e27:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129e2c:	0f b6 d0             	movzbl %al,%edx
f0129e2f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129e32:	01 d0                	add    %edx,%eax
f0129e34:	48                   	dec    %eax
f0129e35:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129e38:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129e3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e40:	f7 75 ac             	divl   -0x54(%ebp)
f0129e43:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129e46:	29 d0                	sub    %edx,%eax
f0129e48:	01 c3                	add    %eax,%ebx
f0129e4a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129e51:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129e56:	0f b6 c0             	movzbl %al,%eax
f0129e59:	c1 e0 04             	shl    $0x4,%eax
f0129e5c:	89 c2                	mov    %eax,%edx
f0129e5e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129e61:	01 d0                	add    %edx,%eax
f0129e63:	48                   	dec    %eax
f0129e64:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129e67:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129e6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e6f:	f7 75 a4             	divl   -0x5c(%ebp)
f0129e72:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129e75:	29 d0                	sub    %edx,%eax
f0129e77:	01 d8                	add    %ebx,%eax
f0129e79:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129e7e:	39 c1                	cmp    %eax,%ecx
f0129e80:	74 17                	je     f0129e99 <test_kfreelast+0x25c>
f0129e82:	83 ec 04             	sub    $0x4,%esp
f0129e85:	68 40 b7 13 f0       	push   $0xf013b740
f0129e8a:	68 d3 0c 00 00       	push   $0xcd3
f0129e8f:	68 5a b6 13 f0       	push   $0xf013b65a
f0129e94:	e8 6c 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e99:	e8 2a 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e9e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ea1:	74 17                	je     f0129eba <test_kfreelast+0x27d>
f0129ea3:	83 ec 04             	sub    $0x4,%esp
f0129ea6:	68 74 b6 13 f0       	push   $0xf013b674
f0129eab:	68 d4 0c 00 00       	push   $0xcd4
f0129eb0:	68 5a b6 13 f0       	push   $0xf013b65a
f0129eb5:	e8 4b 63 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129eba:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129ebd:	e8 e1 2f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129ec2:	29 c3                	sub    %eax,%ebx
f0129ec4:	89 d8                	mov    %ebx,%eax
f0129ec6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129ecb:	74 17                	je     f0129ee4 <test_kfreelast+0x2a7>
f0129ecd:	83 ec 04             	sub    $0x4,%esp
f0129ed0:	68 dc b6 13 f0       	push   $0xf013b6dc
f0129ed5:	68 d5 0c 00 00       	push   $0xcd5
f0129eda:	68 5a b6 13 f0       	push   $0xf013b65a
f0129edf:	e8 21 63 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129ee4:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129eeb:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129eee:	e8 b0 2f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129ef3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ef6:	e8 cd 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129efb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129efe:	83 ec 0c             	sub    $0xc,%esp
f0129f01:	68 00 08 00 00       	push   $0x800
f0129f06:	e8 81 dc fd ff       	call   f0107b8c <kmalloc>
f0129f0b:	83 c4 10             	add    $0x10,%esp
f0129f0e:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129f14:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129f1a:	89 c1                	mov    %eax,%ecx
f0129f1c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129f23:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129f26:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f2b:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129f2e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129f31:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f36:	f7 75 9c             	divl   -0x64(%ebp)
f0129f39:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129f3c:	29 d0                	sub    %edx,%eax
f0129f3e:	89 c3                	mov    %eax,%ebx
f0129f40:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129f47:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129f4c:	0f b6 d0             	movzbl %al,%edx
f0129f4f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129f52:	01 d0                	add    %edx,%eax
f0129f54:	48                   	dec    %eax
f0129f55:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129f58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129f5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f60:	f7 75 94             	divl   -0x6c(%ebp)
f0129f63:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129f66:	29 d0                	sub    %edx,%eax
f0129f68:	01 c3                	add    %eax,%ebx
f0129f6a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129f71:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0129f76:	0f b6 c0             	movzbl %al,%eax
f0129f79:	c1 e0 04             	shl    $0x4,%eax
f0129f7c:	89 c2                	mov    %eax,%edx
f0129f7e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129f81:	01 d0                	add    %edx,%eax
f0129f83:	48                   	dec    %eax
f0129f84:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129f87:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129f8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f8f:	f7 75 8c             	divl   -0x74(%ebp)
f0129f92:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129f95:	29 d0                	sub    %edx,%eax
f0129f97:	01 d8                	add    %ebx,%eax
f0129f99:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129f9e:	39 c1                	cmp    %eax,%ecx
f0129fa0:	74 17                	je     f0129fb9 <test_kfreelast+0x37c>
f0129fa2:	83 ec 04             	sub    $0x4,%esp
f0129fa5:	68 40 b7 13 f0       	push   $0xf013b740
f0129faa:	68 dc 0c 00 00       	push   $0xcdc
f0129faf:	68 5a b6 13 f0       	push   $0xf013b65a
f0129fb4:	e8 4c 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129fb9:	e8 0a 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129fbe:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129fc1:	74 17                	je     f0129fda <test_kfreelast+0x39d>
f0129fc3:	83 ec 04             	sub    $0x4,%esp
f0129fc6:	68 74 b6 13 f0       	push   $0xf013b674
f0129fcb:	68 dd 0c 00 00       	push   $0xcdd
f0129fd0:	68 5a b6 13 f0       	push   $0xf013b65a
f0129fd5:	e8 2b 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129fda:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129fdd:	e8 c1 2e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f0129fe2:	29 c3                	sub    %eax,%ebx
f0129fe4:	89 d8                	mov    %ebx,%eax
f0129fe6:	83 f8 01             	cmp    $0x1,%eax
f0129fe9:	74 17                	je     f012a002 <test_kfreelast+0x3c5>
f0129feb:	83 ec 04             	sub    $0x4,%esp
f0129fee:	68 dc b6 13 f0       	push   $0xf013b6dc
f0129ff3:	68 de 0c 00 00       	push   $0xcde
f0129ff8:	68 5a b6 13 f0       	push   $0xf013b65a
f0129ffd:	e8 03 62 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012a002:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f012a009:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a00c:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a012:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a015:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a01c:	eb 0e                	jmp    f012a02c <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a01e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a021:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a024:	01 d0                	add    %edx,%eax
f012a026:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a029:	ff 45 f4             	incl   -0xc(%ebp)
f012a02c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a032:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a035:	7f e7                	jg     f012a01e <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a037:	e8 67 2e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a03c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a03f:	e8 84 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a044:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a047:	83 ec 0c             	sub    $0xc,%esp
f012a04a:	68 00 08 00 00       	push   $0x800
f012a04f:	e8 38 db fd ff       	call   f0107b8c <kmalloc>
f012a054:	83 c4 10             	add    $0x10,%esp
f012a057:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a05d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a063:	89 c1                	mov    %eax,%ecx
f012a065:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a06c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a06f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a074:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a07a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a080:	ba 00 00 00 00       	mov    $0x0,%edx
f012a085:	f7 75 80             	divl   -0x80(%ebp)
f012a088:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a08e:	29 d0                	sub    %edx,%eax
f012a090:	89 c3                	mov    %eax,%ebx
f012a092:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a099:	10 00 00 
f012a09c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a0a1:	0f b6 d0             	movzbl %al,%edx
f012a0a4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a0aa:	01 d0                	add    %edx,%eax
f012a0ac:	48                   	dec    %eax
f012a0ad:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a0b3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a0b9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0be:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a0c4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a0ca:	29 d0                	sub    %edx,%eax
f012a0cc:	01 c3                	add    %eax,%ebx
f012a0ce:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a0d5:	10 00 00 
f012a0d8:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a0dd:	0f b6 c0             	movzbl %al,%eax
f012a0e0:	c1 e0 04             	shl    $0x4,%eax
f012a0e3:	89 c2                	mov    %eax,%edx
f012a0e5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a0eb:	01 d0                	add    %edx,%eax
f012a0ed:	48                   	dec    %eax
f012a0ee:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a0f4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a0fa:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0ff:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a105:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a10b:	29 d0                	sub    %edx,%eax
f012a10d:	01 d8                	add    %ebx,%eax
f012a10f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a114:	39 c1                	cmp    %eax,%ecx
f012a116:	74 17                	je     f012a12f <test_kfreelast+0x4f2>
f012a118:	83 ec 04             	sub    $0x4,%esp
f012a11b:	68 40 b7 13 f0       	push   $0xf013b740
f012a120:	68 ea 0c 00 00       	push   $0xcea
f012a125:	68 5a b6 13 f0       	push   $0xf013b65a
f012a12a:	e8 d6 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a12f:	e8 94 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a134:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a137:	74 17                	je     f012a150 <test_kfreelast+0x513>
f012a139:	83 ec 04             	sub    $0x4,%esp
f012a13c:	68 74 b6 13 f0       	push   $0xf013b674
f012a141:	68 eb 0c 00 00       	push   $0xceb
f012a146:	68 5a b6 13 f0       	push   $0xf013b65a
f012a14b:	e8 b5 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a150:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a153:	e8 4b 2d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a158:	29 c3                	sub    %eax,%ebx
f012a15a:	89 d8                	mov    %ebx,%eax
f012a15c:	83 f8 01             	cmp    $0x1,%eax
f012a15f:	74 17                	je     f012a178 <test_kfreelast+0x53b>
f012a161:	83 ec 04             	sub    $0x4,%esp
f012a164:	68 dc b6 13 f0       	push   $0xf013b6dc
f012a169:	68 ec 0c 00 00       	push   $0xcec
f012a16e:	68 5a b6 13 f0       	push   $0xf013b65a
f012a173:	e8 8d 60 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a178:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a17f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a182:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a188:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a18b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a192:	eb 0e                	jmp    f012a1a2 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a194:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a197:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a19a:	01 d0                	add    %edx,%eax
f012a19c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a19f:	ff 45 f4             	incl   -0xc(%ebp)
f012a1a2:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a1a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a1ab:	7f e7                	jg     f012a194 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a1ad:	e8 f1 2c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a1b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a1b5:	e8 0e 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a1ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a1bd:	83 ec 0c             	sub    $0xc,%esp
f012a1c0:	68 00 1c 00 00       	push   $0x1c00
f012a1c5:	e8 c2 d9 fd ff       	call   f0107b8c <kmalloc>
f012a1ca:	83 c4 10             	add    $0x10,%esp
f012a1cd:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a1d3:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a1d9:	89 c1                	mov    %eax,%ecx
f012a1db:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a1e2:	10 00 00 
f012a1e5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a1eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a1f0:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a1f6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a1fc:	ba 00 00 00 00       	mov    $0x0,%edx
f012a201:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a207:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a20d:	29 d0                	sub    %edx,%eax
f012a20f:	89 c3                	mov    %eax,%ebx
f012a211:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a218:	10 00 00 
f012a21b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a220:	0f b6 d0             	movzbl %al,%edx
f012a223:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a229:	01 d0                	add    %edx,%eax
f012a22b:	48                   	dec    %eax
f012a22c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a232:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a238:	ba 00 00 00 00       	mov    $0x0,%edx
f012a23d:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a243:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a249:	29 d0                	sub    %edx,%eax
f012a24b:	01 c3                	add    %eax,%ebx
f012a24d:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a254:	10 00 00 
f012a257:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a25c:	0f b6 c0             	movzbl %al,%eax
f012a25f:	c1 e0 04             	shl    $0x4,%eax
f012a262:	89 c2                	mov    %eax,%edx
f012a264:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a26a:	01 d0                	add    %edx,%eax
f012a26c:	48                   	dec    %eax
f012a26d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a273:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a279:	ba 00 00 00 00       	mov    $0x0,%edx
f012a27e:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a284:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a28a:	29 d0                	sub    %edx,%eax
f012a28c:	01 d8                	add    %ebx,%eax
f012a28e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a293:	39 c1                	cmp    %eax,%ecx
f012a295:	74 17                	je     f012a2ae <test_kfreelast+0x671>
f012a297:	83 ec 04             	sub    $0x4,%esp
f012a29a:	68 40 b7 13 f0       	push   $0xf013b740
f012a29f:	68 f8 0c 00 00       	push   $0xcf8
f012a2a4:	68 5a b6 13 f0       	push   $0xf013b65a
f012a2a9:	e8 57 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a2ae:	e8 15 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a2b3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2b6:	74 17                	je     f012a2cf <test_kfreelast+0x692>
f012a2b8:	83 ec 04             	sub    $0x4,%esp
f012a2bb:	68 74 b6 13 f0       	push   $0xf013b674
f012a2c0:	68 f9 0c 00 00       	push   $0xcf9
f012a2c5:	68 5a b6 13 f0       	push   $0xf013b65a
f012a2ca:	e8 36 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a2cf:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a2d2:	e8 cc 2b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a2d7:	29 c3                	sub    %eax,%ebx
f012a2d9:	89 d8                	mov    %ebx,%eax
f012a2db:	83 f8 02             	cmp    $0x2,%eax
f012a2de:	74 17                	je     f012a2f7 <test_kfreelast+0x6ba>
f012a2e0:	83 ec 04             	sub    $0x4,%esp
f012a2e3:	68 dc b6 13 f0       	push   $0xf013b6dc
f012a2e8:	68 fa 0c 00 00       	push   $0xcfa
f012a2ed:	68 5a b6 13 f0       	push   $0xf013b65a
f012a2f2:	e8 0e 5f fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a2f7:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a2fe:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a301:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a307:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a30a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a311:	eb 0e                	jmp    f012a321 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a313:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a316:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a319:	01 d0                	add    %edx,%eax
f012a31b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a31e:	ff 45 f4             	incl   -0xc(%ebp)
f012a321:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a327:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a32a:	7f e7                	jg     f012a313 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a32c:	e8 72 2b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a331:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a334:	e8 8f 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a339:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a33c:	83 ec 0c             	sub    $0xc,%esp
f012a33f:	68 00 fc 2f 00       	push   $0x2ffc00
f012a344:	e8 43 d8 fd ff       	call   f0107b8c <kmalloc>
f012a349:	83 c4 10             	add    $0x10,%esp
f012a34c:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a352:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a358:	89 c1                	mov    %eax,%ecx
f012a35a:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a361:	10 00 00 
f012a364:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a36a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a36f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a375:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a37b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a380:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a386:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a38c:	29 d0                	sub    %edx,%eax
f012a38e:	89 c3                	mov    %eax,%ebx
f012a390:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a397:	10 00 00 
f012a39a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a39f:	0f b6 d0             	movzbl %al,%edx
f012a3a2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a3a8:	01 d0                	add    %edx,%eax
f012a3aa:	48                   	dec    %eax
f012a3ab:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a3b1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a3b7:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3bc:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a3c2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a3c8:	29 d0                	sub    %edx,%eax
f012a3ca:	01 c3                	add    %eax,%ebx
f012a3cc:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a3d3:	10 00 00 
f012a3d6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a3db:	0f b6 c0             	movzbl %al,%eax
f012a3de:	c1 e0 04             	shl    $0x4,%eax
f012a3e1:	89 c2                	mov    %eax,%edx
f012a3e3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a3e9:	01 d0                	add    %edx,%eax
f012a3eb:	48                   	dec    %eax
f012a3ec:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a3f2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a3f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3fd:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a403:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a409:	29 d0                	sub    %edx,%eax
f012a40b:	01 d8                	add    %ebx,%eax
f012a40d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a412:	39 c1                	cmp    %eax,%ecx
f012a414:	74 17                	je     f012a42d <test_kfreelast+0x7f0>
f012a416:	83 ec 04             	sub    $0x4,%esp
f012a419:	68 40 b7 13 f0       	push   $0xf013b740
f012a41e:	68 06 0d 00 00       	push   $0xd06
f012a423:	68 5a b6 13 f0       	push   $0xf013b65a
f012a428:	e8 d8 5d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a42d:	e8 96 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a432:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a435:	74 17                	je     f012a44e <test_kfreelast+0x811>
f012a437:	83 ec 04             	sub    $0x4,%esp
f012a43a:	68 74 b6 13 f0       	push   $0xf013b674
f012a43f:	68 07 0d 00 00       	push   $0xd07
f012a444:	68 5a b6 13 f0       	push   $0xf013b65a
f012a449:	e8 b7 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a44e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a451:	e8 4d 2a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a456:	29 c3                	sub    %eax,%ebx
f012a458:	89 d8                	mov    %ebx,%eax
f012a45a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a45f:	74 17                	je     f012a478 <test_kfreelast+0x83b>
f012a461:	83 ec 04             	sub    $0x4,%esp
f012a464:	68 dc b6 13 f0       	push   $0xf013b6dc
f012a469:	68 08 0d 00 00       	push   $0xd08
f012a46e:	68 5a b6 13 f0       	push   $0xf013b65a
f012a473:	e8 8d 5d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a478:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a47f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a482:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a488:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a48b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a492:	eb 0e                	jmp    f012a4a2 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a494:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a497:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a49a:	01 d0                	add    %edx,%eax
f012a49c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a49f:	ff 45 f4             	incl   -0xc(%ebp)
f012a4a2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a4a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a4ab:	7f e7                	jg     f012a494 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a4ad:	e8 f1 29 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a4b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4b5:	e8 0e 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a4ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a4bd:	83 ec 0c             	sub    $0xc,%esp
f012a4c0:	68 00 fc 5f 00       	push   $0x5ffc00
f012a4c5:	e8 c2 d6 fd ff       	call   f0107b8c <kmalloc>
f012a4ca:	83 c4 10             	add    $0x10,%esp
f012a4cd:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a4d3:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a4d9:	89 c1                	mov    %eax,%ecx
f012a4db:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a4e2:	10 00 00 
f012a4e5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a4eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a4f0:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a4f6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a4fc:	ba 00 00 00 00       	mov    $0x0,%edx
f012a501:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a507:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a50d:	29 d0                	sub    %edx,%eax
f012a50f:	89 c3                	mov    %eax,%ebx
f012a511:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a518:	10 00 00 
f012a51b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a520:	0f b6 d0             	movzbl %al,%edx
f012a523:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a529:	01 d0                	add    %edx,%eax
f012a52b:	48                   	dec    %eax
f012a52c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a532:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a538:	ba 00 00 00 00       	mov    $0x0,%edx
f012a53d:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a543:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a549:	29 d0                	sub    %edx,%eax
f012a54b:	01 c3                	add    %eax,%ebx
f012a54d:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a554:	10 00 00 
f012a557:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a55c:	0f b6 c0             	movzbl %al,%eax
f012a55f:	c1 e0 04             	shl    $0x4,%eax
f012a562:	89 c2                	mov    %eax,%edx
f012a564:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a56a:	01 d0                	add    %edx,%eax
f012a56c:	48                   	dec    %eax
f012a56d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a573:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a579:	ba 00 00 00 00       	mov    $0x0,%edx
f012a57e:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a584:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a58a:	29 d0                	sub    %edx,%eax
f012a58c:	01 d8                	add    %ebx,%eax
f012a58e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a593:	39 c1                	cmp    %eax,%ecx
f012a595:	74 17                	je     f012a5ae <test_kfreelast+0x971>
f012a597:	83 ec 04             	sub    $0x4,%esp
f012a59a:	68 40 b7 13 f0       	push   $0xf013b740
f012a59f:	68 14 0d 00 00       	push   $0xd14
f012a5a4:	68 5a b6 13 f0       	push   $0xf013b65a
f012a5a9:	e8 57 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5ae:	e8 15 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a5b3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5b6:	74 17                	je     f012a5cf <test_kfreelast+0x992>
f012a5b8:	83 ec 04             	sub    $0x4,%esp
f012a5bb:	68 74 b6 13 f0       	push   $0xf013b674
f012a5c0:	68 15 0d 00 00       	push   $0xd15
f012a5c5:	68 5a b6 13 f0       	push   $0xf013b65a
f012a5ca:	e8 36 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a5cf:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a5d2:	e8 cc 28 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a5d7:	29 c3                	sub    %eax,%ebx
f012a5d9:	89 d8                	mov    %ebx,%eax
f012a5db:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a5e0:	74 17                	je     f012a5f9 <test_kfreelast+0x9bc>
f012a5e2:	83 ec 04             	sub    $0x4,%esp
f012a5e5:	68 dc b6 13 f0       	push   $0xf013b6dc
f012a5ea:	68 16 0d 00 00       	push   $0xd16
f012a5ef:	68 5a b6 13 f0       	push   $0xf013b65a
f012a5f4:	e8 0c 5c fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a5f9:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a600:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a603:	e8 9b 28 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a608:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a60b:	e8 b8 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a610:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a613:	83 ec 0c             	sub    $0xc,%esp
f012a616:	68 00 38 00 00       	push   $0x3800
f012a61b:	e8 6c d5 fd ff       	call   f0107b8c <kmalloc>
f012a620:	83 c4 10             	add    $0x10,%esp
f012a623:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a629:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a62f:	89 c1                	mov    %eax,%ecx
f012a631:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a638:	10 00 00 
f012a63b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a641:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a646:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a64c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a652:	ba 00 00 00 00       	mov    $0x0,%edx
f012a657:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a65d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a663:	29 d0                	sub    %edx,%eax
f012a665:	89 c3                	mov    %eax,%ebx
f012a667:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a66e:	10 00 00 
f012a671:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a676:	0f b6 d0             	movzbl %al,%edx
f012a679:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a67f:	01 d0                	add    %edx,%eax
f012a681:	48                   	dec    %eax
f012a682:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a688:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a68e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a693:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a699:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a69f:	29 d0                	sub    %edx,%eax
f012a6a1:	01 c3                	add    %eax,%ebx
f012a6a3:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a6aa:	10 00 00 
f012a6ad:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012a6b2:	0f b6 c0             	movzbl %al,%eax
f012a6b5:	c1 e0 04             	shl    $0x4,%eax
f012a6b8:	89 c2                	mov    %eax,%edx
f012a6ba:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a6c0:	01 d0                	add    %edx,%eax
f012a6c2:	48                   	dec    %eax
f012a6c3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a6c9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a6cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6d4:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012a6da:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a6e0:	29 d0                	sub    %edx,%eax
f012a6e2:	01 d8                	add    %ebx,%eax
f012a6e4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a6e9:	39 c1                	cmp    %eax,%ecx
f012a6eb:	74 17                	je     f012a704 <test_kfreelast+0xac7>
f012a6ed:	83 ec 04             	sub    $0x4,%esp
f012a6f0:	68 40 b7 13 f0       	push   $0xf013b740
f012a6f5:	68 1d 0d 00 00       	push   $0xd1d
f012a6fa:	68 5a b6 13 f0       	push   $0xf013b65a
f012a6ff:	e8 01 5b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a704:	e8 bf 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a709:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a70c:	74 17                	je     f012a725 <test_kfreelast+0xae8>
f012a70e:	83 ec 04             	sub    $0x4,%esp
f012a711:	68 74 b6 13 f0       	push   $0xf013b674
f012a716:	68 1e 0d 00 00       	push   $0xd1e
f012a71b:	68 5a b6 13 f0       	push   $0xf013b65a
f012a720:	e8 e0 5a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a725:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a728:	e8 76 27 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a72d:	29 c3                	sub    %eax,%ebx
f012a72f:	89 d8                	mov    %ebx,%eax
f012a731:	83 f8 04             	cmp    $0x4,%eax
f012a734:	74 17                	je     f012a74d <test_kfreelast+0xb10>
f012a736:	83 ec 04             	sub    $0x4,%esp
f012a739:	68 dc b6 13 f0       	push   $0xf013b6dc
f012a73e:	68 1f 0d 00 00       	push   $0xd1f
f012a743:	68 5a b6 13 f0       	push   $0xf013b65a
f012a748:	e8 b8 5a fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a74d:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a754:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a757:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a75d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a760:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a767:	eb 0e                	jmp    f012a777 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a769:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a76c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a76f:	01 d0                	add    %edx,%eax
f012a771:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a774:	ff 45 f4             	incl   -0xc(%ebp)
f012a777:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a77d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a780:	7f e7                	jg     f012a769 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a782:	e8 1c 27 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a787:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a78d:	e8 36 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a792:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a798:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a79e:	83 ec 0c             	sub    $0xc,%esp
f012a7a1:	50                   	push   %eax
f012a7a2:	e8 b0 d4 fd ff       	call   f0107c57 <kfree>
f012a7a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a7aa:	e8 19 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a7af:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a7b5:	74 17                	je     f012a7ce <test_kfreelast+0xb91>
f012a7b7:	83 ec 04             	sub    $0x4,%esp
f012a7ba:	68 74 b6 13 f0       	push   $0xf013b674
f012a7bf:	68 2e 0d 00 00       	push   $0xd2e
f012a7c4:	68 5a b6 13 f0       	push   $0xf013b65a
f012a7c9:	e8 37 5a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a7ce:	e8 d0 26 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a7d3:	89 c2                	mov    %eax,%edx
f012a7d5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a7db:	29 c2                	sub    %eax,%edx
f012a7dd:	89 d0                	mov    %edx,%eax
f012a7df:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a7e4:	74 17                	je     f012a7fd <test_kfreelast+0xbc0>
f012a7e6:	83 ec 04             	sub    $0x4,%esp
f012a7e9:	68 e4 bd 13 f0       	push   $0xf013bde4
f012a7ee:	68 2f 0d 00 00       	push   $0xd2f
f012a7f3:	68 5a b6 13 f0       	push   $0xf013b65a
f012a7f8:	e8 08 5a fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a7fd:	e8 a1 26 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a802:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a808:	e8 bb 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a80d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a813:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a819:	83 ec 0c             	sub    $0xc,%esp
f012a81c:	50                   	push   %eax
f012a81d:	e8 35 d4 fd ff       	call   f0107c57 <kfree>
f012a822:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a825:	e8 9e 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a82a:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a830:	74 17                	je     f012a849 <test_kfreelast+0xc0c>
f012a832:	83 ec 04             	sub    $0x4,%esp
f012a835:	68 74 b6 13 f0       	push   $0xf013b674
f012a83a:	68 35 0d 00 00       	push   $0xd35
f012a83f:	68 5a b6 13 f0       	push   $0xf013b65a
f012a844:	e8 bc 59 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a849:	e8 55 26 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a84e:	89 c2                	mov    %eax,%edx
f012a850:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a856:	29 c2                	sub    %eax,%edx
f012a858:	89 d0                	mov    %edx,%eax
f012a85a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a85f:	74 17                	je     f012a878 <test_kfreelast+0xc3b>
f012a861:	83 ec 04             	sub    $0x4,%esp
f012a864:	68 e4 bd 13 f0       	push   $0xf013bde4
f012a869:	68 36 0d 00 00       	push   $0xd36
f012a86e:	68 5a b6 13 f0       	push   $0xf013b65a
f012a873:	e8 8d 59 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a878:	e8 26 26 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a87d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a883:	e8 40 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a888:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a88e:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a894:	83 ec 0c             	sub    $0xc,%esp
f012a897:	50                   	push   %eax
f012a898:	e8 ba d3 fd ff       	call   f0107c57 <kfree>
f012a89d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a8a0:	e8 23 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a8a5:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a8ab:	74 17                	je     f012a8c4 <test_kfreelast+0xc87>
f012a8ad:	83 ec 04             	sub    $0x4,%esp
f012a8b0:	68 74 b6 13 f0       	push   $0xf013b674
f012a8b5:	68 3c 0d 00 00       	push   $0xd3c
f012a8ba:	68 5a b6 13 f0       	push   $0xf013b65a
f012a8bf:	e8 41 59 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a8c4:	e8 da 25 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012a8c9:	89 c2                	mov    %eax,%edx
f012a8cb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a8d1:	29 c2                	sub    %eax,%edx
f012a8d3:	89 d0                	mov    %edx,%eax
f012a8d5:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a8da:	74 17                	je     f012a8f3 <test_kfreelast+0xcb6>
f012a8dc:	83 ec 04             	sub    $0x4,%esp
f012a8df:	68 e4 bd 13 f0       	push   $0xf013bde4
f012a8e4:	68 3d 0d 00 00       	push   $0xd3d
f012a8e9:	68 5a b6 13 f0       	push   $0xf013b65a
f012a8ee:	e8 12 59 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a8f3:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a8f9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a8fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a903:	eb 1e                	jmp    f012a923 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a905:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a90b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a90e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a911:	01 c8                	add    %ecx,%eax
f012a913:	8a 00                	mov    (%eax),%al
f012a915:	0f be c0             	movsbl %al,%eax
f012a918:	01 d0                	add    %edx,%eax
f012a91a:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a920:	ff 45 f4             	incl   -0xc(%ebp)
f012a923:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a929:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a92c:	7f d7                	jg     f012a905 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a92e:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a934:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a93a:	01 c0                	add    %eax,%eax
f012a93c:	39 c2                	cmp    %eax,%edx
f012a93e:	74 17                	je     f012a957 <test_kfreelast+0xd1a>
f012a940:	83 ec 04             	sub    $0x4,%esp
f012a943:	68 40 be 13 f0       	push   $0xf013be40
f012a948:	68 48 0d 00 00       	push   $0xd48
f012a94d:	68 5a b6 13 f0       	push   $0xf013b65a
f012a952:	e8 ae 58 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a957:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a95d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a960:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a967:	eb 1e                	jmp    f012a987 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a969:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a96f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a972:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a975:	01 c8                	add    %ecx,%eax
f012a977:	8a 00                	mov    (%eax),%al
f012a979:	0f be c0             	movsbl %al,%eax
f012a97c:	01 d0                	add    %edx,%eax
f012a97e:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a984:	ff 45 f4             	incl   -0xc(%ebp)
f012a987:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a98d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a990:	7f d7                	jg     f012a969 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a992:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a998:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a99e:	89 c1                	mov    %eax,%ecx
f012a9a0:	01 c9                	add    %ecx,%ecx
f012a9a2:	01 c8                	add    %ecx,%eax
f012a9a4:	39 c2                	cmp    %eax,%edx
f012a9a6:	74 17                	je     f012a9bf <test_kfreelast+0xd82>
f012a9a8:	83 ec 04             	sub    $0x4,%esp
f012a9ab:	68 40 be 13 f0       	push   $0xf013be40
f012a9b0:	68 50 0d 00 00       	push   $0xd50
f012a9b5:	68 5a b6 13 f0       	push   $0xf013b65a
f012a9ba:	e8 46 58 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a9bf:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a9c5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a9c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a9cf:	eb 1e                	jmp    f012a9ef <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a9d1:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a9d7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a9da:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a9dd:	01 c8                	add    %ecx,%eax
f012a9df:	8a 00                	mov    (%eax),%al
f012a9e1:	0f be c0             	movsbl %al,%eax
f012a9e4:	01 d0                	add    %edx,%eax
f012a9e6:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a9ec:	ff 45 f4             	incl   -0xc(%ebp)
f012a9ef:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a9f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a9f8:	7f d7                	jg     f012a9d1 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a9fa:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012aa00:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012aa06:	c1 e2 02             	shl    $0x2,%edx
f012aa09:	39 d0                	cmp    %edx,%eax
f012aa0b:	74 17                	je     f012aa24 <test_kfreelast+0xde7>
f012aa0d:	83 ec 04             	sub    $0x4,%esp
f012aa10:	68 40 be 13 f0       	push   $0xf013be40
f012aa15:	68 58 0d 00 00       	push   $0xd58
f012aa1a:	68 5a b6 13 f0       	push   $0xf013b65a
f012aa1f:	e8 e1 57 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012aa24:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012aa2a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012aa2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa34:	eb 1e                	jmp    f012aa54 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012aa36:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012aa3c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa3f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa42:	01 c8                	add    %ecx,%eax
f012aa44:	8a 00                	mov    (%eax),%al
f012aa46:	0f be c0             	movsbl %al,%eax
f012aa49:	01 d0                	add    %edx,%eax
f012aa4b:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012aa51:	ff 45 f4             	incl   -0xc(%ebp)
f012aa54:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012aa5a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa5d:	7f d7                	jg     f012aa36 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012aa5f:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012aa65:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012aa6b:	89 d0                	mov    %edx,%eax
f012aa6d:	c1 e0 02             	shl    $0x2,%eax
f012aa70:	01 d0                	add    %edx,%eax
f012aa72:	39 c1                	cmp    %eax,%ecx
f012aa74:	74 17                	je     f012aa8d <test_kfreelast+0xe50>
f012aa76:	83 ec 04             	sub    $0x4,%esp
f012aa79:	68 40 be 13 f0       	push   $0xf013be40
f012aa7e:	68 60 0d 00 00       	push   $0xd60
f012aa83:	68 5a b6 13 f0       	push   $0xf013b65a
f012aa88:	e8 78 57 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012aa8d:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aa93:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012aa96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa9d:	eb 1e                	jmp    f012aabd <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012aa9f:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012aaa5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aaa8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aaab:	01 c8                	add    %ecx,%eax
f012aaad:	8a 00                	mov    (%eax),%al
f012aaaf:	0f be c0             	movsbl %al,%eax
f012aab2:	01 d0                	add    %edx,%eax
f012aab4:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012aaba:	ff 45 f4             	incl   -0xc(%ebp)
f012aabd:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012aac3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aac6:	7f d7                	jg     f012aa9f <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012aac8:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012aace:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012aad4:	89 d0                	mov    %edx,%eax
f012aad6:	01 c0                	add    %eax,%eax
f012aad8:	01 d0                	add    %edx,%eax
f012aada:	01 c0                	add    %eax,%eax
f012aadc:	01 d0                	add    %edx,%eax
f012aade:	39 c1                	cmp    %eax,%ecx
f012aae0:	74 17                	je     f012aaf9 <test_kfreelast+0xebc>
f012aae2:	83 ec 04             	sub    $0x4,%esp
f012aae5:	68 40 be 13 f0       	push   $0xf013be40
f012aaea:	68 68 0d 00 00       	push   $0xd68
f012aaef:	68 5a b6 13 f0       	push   $0xf013b65a
f012aaf4:	e8 0c 57 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012aaf9:	e8 a5 23 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012aafe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab01:	e8 c2 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab06:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012ab09:	83 ec 0c             	sub    $0xc,%esp
f012ab0c:	68 00 50 00 00       	push   $0x5000
f012ab11:	e8 76 d0 fd ff       	call   f0107b8c <kmalloc>
f012ab16:	83 c4 10             	add    $0x10,%esp
f012ab19:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ab1f:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ab25:	89 c1                	mov    %eax,%ecx
f012ab27:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012ab2e:	10 00 00 
f012ab31:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ab37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ab3c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012ab42:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ab48:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab4d:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012ab53:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ab59:	29 d0                	sub    %edx,%eax
f012ab5b:	89 c3                	mov    %eax,%ebx
f012ab5d:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012ab64:	10 00 00 
f012ab67:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012ab6c:	0f b6 d0             	movzbl %al,%edx
f012ab6f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ab75:	01 d0                	add    %edx,%eax
f012ab77:	48                   	dec    %eax
f012ab78:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012ab7e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012ab84:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab89:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012ab8f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012ab95:	29 d0                	sub    %edx,%eax
f012ab97:	01 c3                	add    %eax,%ebx
f012ab99:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012aba0:	10 00 00 
f012aba3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012aba8:	0f b6 c0             	movzbl %al,%eax
f012abab:	c1 e0 04             	shl    $0x4,%eax
f012abae:	89 c2                	mov    %eax,%edx
f012abb0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012abb6:	01 d0                	add    %edx,%eax
f012abb8:	48                   	dec    %eax
f012abb9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012abbf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012abc5:	ba 00 00 00 00       	mov    $0x0,%edx
f012abca:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012abd0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012abd6:	29 d0                	sub    %edx,%eax
f012abd8:	01 d8                	add    %ebx,%eax
f012abda:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012abdf:	39 c1                	cmp    %eax,%ecx
f012abe1:	74 17                	je     f012abfa <test_kfreelast+0xfbd>
f012abe3:	83 ec 04             	sub    $0x4,%esp
f012abe6:	68 40 b7 13 f0       	push   $0xf013b740
f012abeb:	68 71 0d 00 00       	push   $0xd71
f012abf0:	68 5a b6 13 f0       	push   $0xf013b65a
f012abf5:	e8 0b 56 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012abfa:	e8 c9 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012abff:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac02:	74 17                	je     f012ac1b <test_kfreelast+0xfde>
f012ac04:	83 ec 04             	sub    $0x4,%esp
f012ac07:	68 74 b6 13 f0       	push   $0xf013b674
f012ac0c:	68 72 0d 00 00       	push   $0xd72
f012ac11:	68 5a b6 13 f0       	push   $0xf013b65a
f012ac16:	e8 ea 55 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ac1b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ac1e:	e8 80 22 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012ac23:	29 c3                	sub    %eax,%ebx
f012ac25:	89 d8                	mov    %ebx,%eax
f012ac27:	83 f8 05             	cmp    $0x5,%eax
f012ac2a:	74 17                	je     f012ac43 <test_kfreelast+0x1006>
f012ac2c:	83 ec 04             	sub    $0x4,%esp
f012ac2f:	68 dc b6 13 f0       	push   $0xf013b6dc
f012ac34:	68 73 0d 00 00       	push   $0xd73
f012ac39:	68 5a b6 13 f0       	push   $0xf013b65a
f012ac3e:	e8 c2 55 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012ac43:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012ac4a:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012ac4d:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ac53:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012ac56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ac5d:	eb 0e                	jmp    f012ac6d <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012ac5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ac62:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ac65:	01 d0                	add    %edx,%eax
f012ac67:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012ac6a:	ff 45 f4             	incl   -0xc(%ebp)
f012ac6d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012ac73:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ac76:	7f e7                	jg     f012ac5f <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac78:	e8 26 22 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012ac7d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac80:	e8 43 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ac85:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012ac88:	83 ec 0c             	sub    $0xc,%esp
f012ac8b:	68 00 00 10 00       	push   $0x100000
f012ac90:	e8 f7 ce fd ff       	call   f0107b8c <kmalloc>
f012ac95:	83 c4 10             	add    $0x10,%esp
f012ac98:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ac9e:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012aca4:	89 c1                	mov    %eax,%ecx
f012aca6:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012acad:	10 00 00 
f012acb0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012acb6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012acbb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012acc1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012acc7:	ba 00 00 00 00       	mov    $0x0,%edx
f012accc:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012acd2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012acd8:	29 d0                	sub    %edx,%eax
f012acda:	89 c3                	mov    %eax,%ebx
f012acdc:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012ace3:	10 00 00 
f012ace6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012aceb:	0f b6 d0             	movzbl %al,%edx
f012acee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012acf4:	01 d0                	add    %edx,%eax
f012acf6:	48                   	dec    %eax
f012acf7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012acfd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012ad03:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad08:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012ad0e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012ad14:	29 d0                	sub    %edx,%eax
f012ad16:	01 c3                	add    %eax,%ebx
f012ad18:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012ad1f:	10 00 00 
f012ad22:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012ad27:	0f b6 c0             	movzbl %al,%eax
f012ad2a:	c1 e0 04             	shl    $0x4,%eax
f012ad2d:	89 c2                	mov    %eax,%edx
f012ad2f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ad35:	01 d0                	add    %edx,%eax
f012ad37:	48                   	dec    %eax
f012ad38:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012ad3e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ad44:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad49:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012ad4f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ad55:	29 d0                	sub    %edx,%eax
f012ad57:	01 d8                	add    %ebx,%eax
f012ad59:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ad5e:	39 c1                	cmp    %eax,%ecx
f012ad60:	74 17                	je     f012ad79 <test_kfreelast+0x113c>
f012ad62:	83 ec 04             	sub    $0x4,%esp
f012ad65:	68 40 b7 13 f0       	push   $0xf013b740
f012ad6a:	68 7f 0d 00 00       	push   $0xd7f
f012ad6f:	68 5a b6 13 f0       	push   $0xf013b65a
f012ad74:	e8 8c 54 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ad79:	e8 4a 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad7e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad81:	74 17                	je     f012ad9a <test_kfreelast+0x115d>
f012ad83:	83 ec 04             	sub    $0x4,%esp
f012ad86:	68 74 b6 13 f0       	push   $0xf013b674
f012ad8b:	68 80 0d 00 00       	push   $0xd80
f012ad90:	68 5a b6 13 f0       	push   $0xf013b65a
f012ad95:	e8 6b 54 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ad9a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ad9d:	e8 01 21 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012ada2:	29 c3                	sub    %eax,%ebx
f012ada4:	89 d8                	mov    %ebx,%eax
f012ada6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012adab:	74 17                	je     f012adc4 <test_kfreelast+0x1187>
f012adad:	83 ec 04             	sub    $0x4,%esp
f012adb0:	68 dc b6 13 f0       	push   $0xf013b6dc
f012adb5:	68 81 0d 00 00       	push   $0xd81
f012adba:	68 5a b6 13 f0       	push   $0xf013b65a
f012adbf:	e8 41 54 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012adc4:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012adcb:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012adce:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012add4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012add7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012adde:	eb 0e                	jmp    f012adee <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012ade0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ade3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ade6:	01 d0                	add    %edx,%eax
f012ade8:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012adeb:	ff 45 f4             	incl   -0xc(%ebp)
f012adee:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012adf4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012adf7:	7f e7                	jg     f012ade0 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012adf9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ae00:	e8 9e 20 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012ae05:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae08:	e8 bb 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012ae10:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ae16:	83 ec 0c             	sub    $0xc,%esp
f012ae19:	50                   	push   %eax
f012ae1a:	e8 38 ce fd ff       	call   f0107c57 <kfree>
f012ae1f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ae22:	e8 a1 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae27:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae2a:	74 17                	je     f012ae43 <test_kfreelast+0x1206>
f012ae2c:	83 ec 04             	sub    $0x4,%esp
f012ae2f:	68 74 b6 13 f0       	push   $0xf013b674
f012ae34:	68 91 0d 00 00       	push   $0xd91
f012ae39:	68 5a b6 13 f0       	push   $0xf013b65a
f012ae3e:	e8 c2 53 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012ae43:	e8 5b 20 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012ae48:	89 c2                	mov    %eax,%edx
f012ae4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ae4d:	29 c2                	sub    %eax,%edx
f012ae4f:	89 d0                	mov    %edx,%eax
f012ae51:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ae56:	74 17                	je     f012ae6f <test_kfreelast+0x1232>
f012ae58:	83 ec 04             	sub    $0x4,%esp
f012ae5b:	68 e4 bd 13 f0       	push   $0xf013bde4
f012ae60:	68 92 0d 00 00       	push   $0xd92
f012ae65:	68 5a b6 13 f0       	push   $0xf013b65a
f012ae6a:	e8 96 53 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012ae6f:	e8 2f 20 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012ae74:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae77:	e8 4c 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012ae7f:	83 ec 0c             	sub    $0xc,%esp
f012ae82:	68 00 78 00 00       	push   $0x7800
f012ae87:	e8 00 cd fd ff       	call   f0107b8c <kmalloc>
f012ae8c:	83 c4 10             	add    $0x10,%esp
f012ae8f:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ae95:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ae9b:	89 c1                	mov    %eax,%ecx
f012ae9d:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012aea4:	10 00 00 
f012aea7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012aead:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aeb2:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012aeb8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012aebe:	ba 00 00 00 00       	mov    $0x0,%edx
f012aec3:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012aec9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012aecf:	29 d0                	sub    %edx,%eax
f012aed1:	89 c3                	mov    %eax,%ebx
f012aed3:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012aeda:	10 00 00 
f012aedd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012aee2:	0f b6 d0             	movzbl %al,%edx
f012aee5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012aeeb:	01 d0                	add    %edx,%eax
f012aeed:	48                   	dec    %eax
f012aeee:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012aef4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aefa:	ba 00 00 00 00       	mov    $0x0,%edx
f012aeff:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012af05:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012af0b:	29 d0                	sub    %edx,%eax
f012af0d:	01 c3                	add    %eax,%ebx
f012af0f:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012af16:	10 00 00 
f012af19:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012af1e:	0f b6 c0             	movzbl %al,%eax
f012af21:	c1 e0 04             	shl    $0x4,%eax
f012af24:	89 c2                	mov    %eax,%edx
f012af26:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012af2c:	01 d0                	add    %edx,%eax
f012af2e:	48                   	dec    %eax
f012af2f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012af35:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012af3b:	ba 00 00 00 00       	mov    $0x0,%edx
f012af40:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012af46:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012af4c:	29 d0                	sub    %edx,%eax
f012af4e:	01 d8                	add    %ebx,%eax
f012af50:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012af55:	39 c1                	cmp    %eax,%ecx
f012af57:	74 17                	je     f012af70 <test_kfreelast+0x1333>
f012af59:	83 ec 04             	sub    $0x4,%esp
f012af5c:	68 40 b7 13 f0       	push   $0xf013b740
f012af61:	68 9b 0d 00 00       	push   $0xd9b
f012af66:	68 5a b6 13 f0       	push   $0xf013b65a
f012af6b:	e8 95 52 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012af70:	e8 53 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af75:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af78:	74 17                	je     f012af91 <test_kfreelast+0x1354>
f012af7a:	83 ec 04             	sub    $0x4,%esp
f012af7d:	68 74 b6 13 f0       	push   $0xf013b674
f012af82:	68 9c 0d 00 00       	push   $0xd9c
f012af87:	68 5a b6 13 f0       	push   $0xf013b65a
f012af8c:	e8 74 52 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012af91:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012af94:	e8 0a 1f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012af99:	29 c3                	sub    %eax,%ebx
f012af9b:	89 d8                	mov    %ebx,%eax
f012af9d:	83 f8 08             	cmp    $0x8,%eax
f012afa0:	74 17                	je     f012afb9 <test_kfreelast+0x137c>
f012afa2:	83 ec 04             	sub    $0x4,%esp
f012afa5:	68 dc b6 13 f0       	push   $0xf013b6dc
f012afaa:	68 9d 0d 00 00       	push   $0xd9d
f012afaf:	68 5a b6 13 f0       	push   $0xf013b65a
f012afb4:	e8 4c 52 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012afb9:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012afc0:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012afc3:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012afc9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012afcc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012afd3:	eb 0e                	jmp    f012afe3 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012afd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012afd8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012afdb:	01 d0                	add    %edx,%eax
f012afdd:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012afe0:	ff 45 f4             	incl   -0xc(%ebp)
f012afe3:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012afe9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012afec:	7f e7                	jg     f012afd5 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012afee:	e8 b0 1e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012aff3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aff6:	e8 cd 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012affb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012affe:	83 ec 0c             	sub    $0xc,%esp
f012b001:	68 00 00 10 00       	push   $0x100000
f012b006:	e8 81 cb fd ff       	call   f0107b8c <kmalloc>
f012b00b:	83 c4 10             	add    $0x10,%esp
f012b00e:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b014:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b01a:	89 c1                	mov    %eax,%ecx
f012b01c:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b023:	10 00 00 
f012b026:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b02c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b031:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b037:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b03d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b042:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b048:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b04e:	29 d0                	sub    %edx,%eax
f012b050:	89 c3                	mov    %eax,%ebx
f012b052:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b059:	10 00 00 
f012b05c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b061:	0f b6 d0             	movzbl %al,%edx
f012b064:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b06a:	01 d0                	add    %edx,%eax
f012b06c:	48                   	dec    %eax
f012b06d:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b073:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b079:	ba 00 00 00 00       	mov    $0x0,%edx
f012b07e:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b084:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b08a:	29 d0                	sub    %edx,%eax
f012b08c:	01 c3                	add    %eax,%ebx
f012b08e:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b095:	10 00 00 
f012b098:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b09d:	0f b6 c0             	movzbl %al,%eax
f012b0a0:	c1 e0 04             	shl    $0x4,%eax
f012b0a3:	89 c2                	mov    %eax,%edx
f012b0a5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b0ab:	01 d0                	add    %edx,%eax
f012b0ad:	48                   	dec    %eax
f012b0ae:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b0b4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b0ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012b0bf:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b0c5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b0cb:	29 d0                	sub    %edx,%eax
f012b0cd:	01 d8                	add    %ebx,%eax
f012b0cf:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b0d4:	39 c1                	cmp    %eax,%ecx
f012b0d6:	74 17                	je     f012b0ef <test_kfreelast+0x14b2>
f012b0d8:	83 ec 04             	sub    $0x4,%esp
f012b0db:	68 40 b7 13 f0       	push   $0xf013b740
f012b0e0:	68 a9 0d 00 00       	push   $0xda9
f012b0e5:	68 5a b6 13 f0       	push   $0xf013b65a
f012b0ea:	e8 16 51 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b0ef:	e8 d4 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b0f4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0f7:	74 17                	je     f012b110 <test_kfreelast+0x14d3>
f012b0f9:	83 ec 04             	sub    $0x4,%esp
f012b0fc:	68 74 b6 13 f0       	push   $0xf013b674
f012b101:	68 aa 0d 00 00       	push   $0xdaa
f012b106:	68 5a b6 13 f0       	push   $0xf013b65a
f012b10b:	e8 f5 50 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b110:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b113:	e8 8b 1d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b118:	29 c3                	sub    %eax,%ebx
f012b11a:	89 d8                	mov    %ebx,%eax
f012b11c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b121:	74 17                	je     f012b13a <test_kfreelast+0x14fd>
f012b123:	83 ec 04             	sub    $0x4,%esp
f012b126:	68 dc b6 13 f0       	push   $0xf013b6dc
f012b12b:	68 ab 0d 00 00       	push   $0xdab
f012b130:	68 5a b6 13 f0       	push   $0xf013b65a
f012b135:	e8 cb 50 fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b13a:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b141:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b144:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b14a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b14d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b154:	eb 0e                	jmp    f012b164 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b156:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b159:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b15c:	01 d0                	add    %edx,%eax
f012b15e:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b161:	ff 45 f4             	incl   -0xc(%ebp)
f012b164:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b16a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b16d:	7f e7                	jg     f012b156 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b16f:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b173:	83 ec 08             	sub    $0x8,%esp
f012b176:	ff 75 f0             	pushl  -0x10(%ebp)
f012b179:	68 8c c6 13 f0       	push   $0xf013c68c
f012b17e:	e8 8b 5b fd ff       	call   f0100d0e <cprintf>
f012b183:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b186:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b18d:	e8 11 1d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b192:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b195:	e8 2e 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b19a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b19d:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b1a3:	83 ec 0c             	sub    $0xc,%esp
f012b1a6:	50                   	push   %eax
f012b1a7:	e8 ab ca fd ff       	call   f0107c57 <kfree>
f012b1ac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b1af:	e8 14 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b1b4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1b7:	74 1d                	je     f012b1d6 <test_kfreelast+0x1599>
f012b1b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1bd:	75 17                	jne    f012b1d6 <test_kfreelast+0x1599>
f012b1bf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1c6:	83 ec 0c             	sub    $0xc,%esp
f012b1c9:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012b1ce:	e8 3b 5b fd ff       	call   f0100d0e <cprintf>
f012b1d3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b1d6:	e8 c8 1c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b1db:	89 c2                	mov    %eax,%edx
f012b1dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b1e0:	29 c2                	sub    %eax,%edx
f012b1e2:	89 d0                	mov    %edx,%eax
f012b1e4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b1e9:	74 1d                	je     f012b208 <test_kfreelast+0x15cb>
f012b1eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1ef:	75 17                	jne    f012b208 <test_kfreelast+0x15cb>
f012b1f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1f8:	83 ec 0c             	sub    $0xc,%esp
f012b1fb:	68 20 c7 13 f0       	push   $0xf013c720
f012b200:	e8 09 5b fd ff       	call   f0100d0e <cprintf>
f012b205:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b208:	e8 96 1c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b20d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b210:	e8 b3 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b215:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b218:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b21e:	83 ec 0c             	sub    $0xc,%esp
f012b221:	50                   	push   %eax
f012b222:	e8 30 ca fd ff       	call   f0107c57 <kfree>
f012b227:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b22a:	e8 99 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b22f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b232:	74 1d                	je     f012b251 <test_kfreelast+0x1614>
f012b234:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b238:	75 17                	jne    f012b251 <test_kfreelast+0x1614>
f012b23a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b241:	83 ec 0c             	sub    $0xc,%esp
f012b244:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012b249:	e8 c0 5a fd ff       	call   f0100d0e <cprintf>
f012b24e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b251:	e8 4d 1c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b256:	89 c2                	mov    %eax,%edx
f012b258:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b25b:	29 c2                	sub    %eax,%edx
f012b25d:	89 d0                	mov    %edx,%eax
f012b25f:	83 f8 08             	cmp    $0x8,%eax
f012b262:	74 1d                	je     f012b281 <test_kfreelast+0x1644>
f012b264:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b268:	75 17                	jne    f012b281 <test_kfreelast+0x1644>
f012b26a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b271:	83 ec 0c             	sub    $0xc,%esp
f012b274:	68 20 c7 13 f0       	push   $0xf013c720
f012b279:	e8 90 5a fd ff       	call   f0100d0e <cprintf>
f012b27e:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b281:	e8 1d 1c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b286:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b289:	e8 3a 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b28e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b291:	83 ec 0c             	sub    $0xc,%esp
f012b294:	68 00 28 00 00       	push   $0x2800
f012b299:	e8 ee c8 fd ff       	call   f0107b8c <kmalloc>
f012b29e:	83 c4 10             	add    $0x10,%esp
f012b2a1:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b2a7:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b2ad:	89 c1                	mov    %eax,%ecx
f012b2af:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b2b6:	10 00 00 
f012b2b9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b2bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b2c4:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b2ca:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b2d0:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2d5:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b2db:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b2e1:	29 d0                	sub    %edx,%eax
f012b2e3:	89 c3                	mov    %eax,%ebx
f012b2e5:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b2ec:	10 00 00 
f012b2ef:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b2f4:	0f b6 d0             	movzbl %al,%edx
f012b2f7:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b2fd:	01 d0                	add    %edx,%eax
f012b2ff:	48                   	dec    %eax
f012b300:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b306:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b30c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b311:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b317:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b31d:	29 d0                	sub    %edx,%eax
f012b31f:	01 c3                	add    %eax,%ebx
f012b321:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b328:	10 00 00 
f012b32b:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b330:	0f b6 c0             	movzbl %al,%eax
f012b333:	c1 e0 04             	shl    $0x4,%eax
f012b336:	89 c2                	mov    %eax,%edx
f012b338:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b33e:	01 d0                	add    %edx,%eax
f012b340:	48                   	dec    %eax
f012b341:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b347:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b34d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b352:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b358:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b35e:	29 d0                	sub    %edx,%eax
f012b360:	01 d8                	add    %ebx,%eax
f012b362:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b367:	39 c1                	cmp    %eax,%ecx
f012b369:	74 1d                	je     f012b388 <test_kfreelast+0x174b>
f012b36b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b36f:	75 17                	jne    f012b388 <test_kfreelast+0x174b>
f012b371:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b378:	83 ec 0c             	sub    $0xc,%esp
f012b37b:	68 58 c7 13 f0       	push   $0xf013c758
f012b380:	e8 89 59 fd ff       	call   f0100d0e <cprintf>
f012b385:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b388:	e8 3b 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b38d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b390:	74 1d                	je     f012b3af <test_kfreelast+0x1772>
f012b392:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b396:	75 17                	jne    f012b3af <test_kfreelast+0x1772>
f012b398:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b39f:	83 ec 0c             	sub    $0xc,%esp
f012b3a2:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012b3a7:	e8 62 59 fd ff       	call   f0100d0e <cprintf>
f012b3ac:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b3af:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b3b2:	e8 ec 1a fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b3b7:	29 c3                	sub    %eax,%ebx
f012b3b9:	89 d8                	mov    %ebx,%eax
f012b3bb:	83 f8 03             	cmp    $0x3,%eax
f012b3be:	74 1d                	je     f012b3dd <test_kfreelast+0x17a0>
f012b3c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3c4:	75 17                	jne    f012b3dd <test_kfreelast+0x17a0>
f012b3c6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3cd:	83 ec 0c             	sub    $0xc,%esp
f012b3d0:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012b3d5:	e8 34 59 fd ff       	call   f0100d0e <cprintf>
f012b3da:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b3dd:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b3e4:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b3e7:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b3ed:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b3f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b3f7:	eb 0e                	jmp    f012b407 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b3f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b3fc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b3ff:	01 d0                	add    %edx,%eax
f012b401:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b404:	ff 45 f4             	incl   -0xc(%ebp)
f012b407:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b40d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b410:	7f e7                	jg     f012b3f9 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b412:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b416:	75 17                	jne    f012b42f <test_kfreelast+0x17f2>
f012b418:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b41c:	83 ec 08             	sub    $0x8,%esp
f012b41f:	ff 75 f0             	pushl  -0x10(%ebp)
f012b422:	68 8c c6 13 f0       	push   $0xf013c68c
f012b427:	e8 e2 58 fd ff       	call   f0100d0e <cprintf>
f012b42c:	83 c4 10             	add    $0x10,%esp
f012b42f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b436:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b43c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b43f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b446:	eb 1e                	jmp    f012b466 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b448:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b44e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b451:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b454:	01 c8                	add    %ecx,%eax
f012b456:	8a 00                	mov    (%eax),%al
f012b458:	0f be c0             	movsbl %al,%eax
f012b45b:	01 d0                	add    %edx,%eax
f012b45d:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b463:	ff 45 f4             	incl   -0xc(%ebp)
f012b466:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b46c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b46f:	7f d7                	jg     f012b448 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b471:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b477:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b47d:	89 d0                	mov    %edx,%eax
f012b47f:	01 c0                	add    %eax,%eax
f012b481:	01 d0                	add    %edx,%eax
f012b483:	c1 e0 02             	shl    $0x2,%eax
f012b486:	39 c1                	cmp    %eax,%ecx
f012b488:	74 1d                	je     f012b4a7 <test_kfreelast+0x186a>
f012b48a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b48e:	75 17                	jne    f012b4a7 <test_kfreelast+0x186a>
f012b490:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b497:	83 ec 0c             	sub    $0xc,%esp
f012b49a:	68 04 c8 13 f0       	push   $0xf013c804
f012b49f:	e8 6a 58 fd ff       	call   f0100d0e <cprintf>
f012b4a4:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b4a7:	83 ec 0c             	sub    $0xc,%esp
f012b4aa:	6a 03                	push   $0x3
f012b4ac:	e8 92 1e fe ff       	call   f010d343 <sys_bypassPageFault>
f012b4b1:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b4b4:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b4ba:	05 00 30 00 00       	add    $0x3000,%eax
f012b4bf:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b4c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b4c9:	eb 3c                	jmp    f012b507 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b4cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b4ce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b4d1:	01 d0                	add    %edx,%eax
f012b4d3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b4d6:	e8 56 1e fe ff       	call   f010d331 <sys_rcr2>
f012b4db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b4de:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b4e1:	01 ca                	add    %ecx,%edx
f012b4e3:	39 d0                	cmp    %edx,%eax
f012b4e5:	74 1d                	je     f012b504 <test_kfreelast+0x18c7>
f012b4e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4eb:	75 17                	jne    f012b504 <test_kfreelast+0x18c7>
f012b4ed:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4f4:	83 ec 0c             	sub    $0xc,%esp
f012b4f7:	68 38 c8 13 f0       	push   $0xf013c838
f012b4fc:	e8 0d 58 fd ff       	call   f0100d0e <cprintf>
f012b501:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b504:	ff 45 f4             	incl   -0xc(%ebp)
f012b507:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b50e:	7e bb                	jle    f012b4cb <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b510:	83 ec 0c             	sub    $0xc,%esp
f012b513:	6a 00                	push   $0x0
f012b515:	e8 29 1e fe ff       	call   f010d343 <sys_bypassPageFault>
f012b51a:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b51d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b521:	75 17                	jne    f012b53a <test_kfreelast+0x18fd>
f012b523:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b527:	83 ec 08             	sub    $0x8,%esp
f012b52a:	ff 75 f0             	pushl  -0x10(%ebp)
f012b52d:	68 8c c6 13 f0       	push   $0xf013c68c
f012b532:	e8 d7 57 fd ff       	call   f0100d0e <cprintf>
f012b537:	83 c4 10             	add    $0x10,%esp
f012b53a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b541:	e8 5d 19 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b546:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b549:	e8 7a 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b54e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b551:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b557:	83 ec 0c             	sub    $0xc,%esp
f012b55a:	50                   	push   %eax
f012b55b:	e8 f7 c6 fd ff       	call   f0107c57 <kfree>
f012b560:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b563:	e8 60 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b568:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b56b:	74 1d                	je     f012b58a <test_kfreelast+0x194d>
f012b56d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b571:	75 17                	jne    f012b58a <test_kfreelast+0x194d>
f012b573:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b57a:	83 ec 0c             	sub    $0xc,%esp
f012b57d:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012b582:	e8 87 57 fd ff       	call   f0100d0e <cprintf>
f012b587:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b58a:	e8 14 19 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b58f:	89 c2                	mov    %eax,%edx
f012b591:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b594:	29 c2                	sub    %eax,%edx
f012b596:	89 d0                	mov    %edx,%eax
f012b598:	83 f8 03             	cmp    $0x3,%eax
f012b59b:	74 1d                	je     f012b5ba <test_kfreelast+0x197d>
f012b59d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5a1:	75 17                	jne    f012b5ba <test_kfreelast+0x197d>
f012b5a3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5aa:	83 ec 0c             	sub    $0xc,%esp
f012b5ad:	68 20 c7 13 f0       	push   $0xf013c720
f012b5b2:	e8 57 57 fd ff       	call   f0100d0e <cprintf>
f012b5b7:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b5ba:	e8 e4 18 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b5bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5c2:	e8 01 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b5c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b5ca:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b5d0:	83 ec 0c             	sub    $0xc,%esp
f012b5d3:	50                   	push   %eax
f012b5d4:	e8 7e c6 fd ff       	call   f0107c57 <kfree>
f012b5d9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b5dc:	e8 e7 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b5e1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5e4:	74 1d                	je     f012b603 <test_kfreelast+0x19c6>
f012b5e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5ea:	75 17                	jne    f012b603 <test_kfreelast+0x19c6>
f012b5ec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5f3:	83 ec 0c             	sub    $0xc,%esp
f012b5f6:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012b5fb:	e8 0e 57 fd ff       	call   f0100d0e <cprintf>
f012b600:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b603:	e8 9b 18 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b608:	89 c2                	mov    %eax,%edx
f012b60a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b60d:	29 c2                	sub    %eax,%edx
f012b60f:	89 d0                	mov    %edx,%eax
f012b611:	83 f8 04             	cmp    $0x4,%eax
f012b614:	74 1d                	je     f012b633 <test_kfreelast+0x19f6>
f012b616:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b61a:	75 17                	jne    f012b633 <test_kfreelast+0x19f6>
f012b61c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b623:	83 ec 0c             	sub    $0xc,%esp
f012b626:	68 20 c7 13 f0       	push   $0xf013c720
f012b62b:	e8 de 56 fd ff       	call   f0100d0e <cprintf>
f012b630:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b633:	e8 6b 18 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b638:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b63b:	e8 88 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b640:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b643:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b649:	83 ec 0c             	sub    $0xc,%esp
f012b64c:	50                   	push   %eax
f012b64d:	e8 05 c6 fd ff       	call   f0107c57 <kfree>
f012b652:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b655:	e8 6e 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b65a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b65d:	74 1d                	je     f012b67c <test_kfreelast+0x1a3f>
f012b65f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b663:	75 17                	jne    f012b67c <test_kfreelast+0x1a3f>
f012b665:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b66c:	83 ec 0c             	sub    $0xc,%esp
f012b66f:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012b674:	e8 95 56 fd ff       	call   f0100d0e <cprintf>
f012b679:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b67c:	e8 22 18 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b681:	89 c2                	mov    %eax,%edx
f012b683:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b686:	29 c2                	sub    %eax,%edx
f012b688:	89 d0                	mov    %edx,%eax
f012b68a:	83 f8 05             	cmp    $0x5,%eax
f012b68d:	74 1d                	je     f012b6ac <test_kfreelast+0x1a6f>
f012b68f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b693:	75 17                	jne    f012b6ac <test_kfreelast+0x1a6f>
f012b695:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b69c:	83 ec 0c             	sub    $0xc,%esp
f012b69f:	68 20 c7 13 f0       	push   $0xf013c720
f012b6a4:	e8 65 56 fd ff       	call   f0100d0e <cprintf>
f012b6a9:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6ac:	e8 f2 17 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b6b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6b4:	e8 0f 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b6b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b6bc:	83 ec 0c             	sub    $0xc,%esp
f012b6bf:	68 00 c8 00 00       	push   $0xc800
f012b6c4:	e8 c3 c4 fd ff       	call   f0107b8c <kmalloc>
f012b6c9:	83 c4 10             	add    $0x10,%esp
f012b6cc:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b6d2:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b6d8:	89 c1                	mov    %eax,%ecx
f012b6da:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012b6e1:	10 00 00 
f012b6e4:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b6ea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b6ef:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b6f5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b6fb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b700:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b706:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b70c:	29 d0                	sub    %edx,%eax
f012b70e:	89 c3                	mov    %eax,%ebx
f012b710:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b717:	10 00 00 
f012b71a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b71f:	0f b6 d0             	movzbl %al,%edx
f012b722:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b728:	01 d0                	add    %edx,%eax
f012b72a:	48                   	dec    %eax
f012b72b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b731:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b737:	ba 00 00 00 00       	mov    $0x0,%edx
f012b73c:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b742:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b748:	29 d0                	sub    %edx,%eax
f012b74a:	01 c3                	add    %eax,%ebx
f012b74c:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b753:	10 00 00 
f012b756:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b75b:	0f b6 c0             	movzbl %al,%eax
f012b75e:	c1 e0 04             	shl    $0x4,%eax
f012b761:	89 c2                	mov    %eax,%edx
f012b763:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b769:	01 d0                	add    %edx,%eax
f012b76b:	48                   	dec    %eax
f012b76c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b772:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b778:	ba 00 00 00 00       	mov    $0x0,%edx
f012b77d:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b783:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b789:	29 d0                	sub    %edx,%eax
f012b78b:	01 d8                	add    %ebx,%eax
f012b78d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b792:	39 c1                	cmp    %eax,%ecx
f012b794:	74 1d                	je     f012b7b3 <test_kfreelast+0x1b76>
f012b796:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b79a:	75 17                	jne    f012b7b3 <test_kfreelast+0x1b76>
f012b79c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7a3:	83 ec 0c             	sub    $0xc,%esp
f012b7a6:	68 58 c7 13 f0       	push   $0xf013c758
f012b7ab:	e8 5e 55 fd ff       	call   f0100d0e <cprintf>
f012b7b0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b7b3:	e8 10 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b7b8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b7bb:	74 1d                	je     f012b7da <test_kfreelast+0x1b9d>
f012b7bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7c1:	75 17                	jne    f012b7da <test_kfreelast+0x1b9d>
f012b7c3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7ca:	83 ec 0c             	sub    $0xc,%esp
f012b7cd:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012b7d2:	e8 37 55 fd ff       	call   f0100d0e <cprintf>
f012b7d7:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b7da:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b7dd:	e8 c1 16 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b7e2:	29 c3                	sub    %eax,%ebx
f012b7e4:	89 d8                	mov    %ebx,%eax
f012b7e6:	83 f8 0d             	cmp    $0xd,%eax
f012b7e9:	74 1d                	je     f012b808 <test_kfreelast+0x1bcb>
f012b7eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7ef:	75 17                	jne    f012b808 <test_kfreelast+0x1bcb>
f012b7f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7f8:	83 ec 0c             	sub    $0xc,%esp
f012b7fb:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012b800:	e8 09 55 fd ff       	call   f0100d0e <cprintf>
f012b805:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b808:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b80f:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b812:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b818:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b81b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b822:	eb 0e                	jmp    f012b832 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b824:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b827:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b82a:	01 d0                	add    %edx,%eax
f012b82c:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b82f:	ff 45 f4             	incl   -0xc(%ebp)
f012b832:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b838:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b83b:	7f e7                	jg     f012b824 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b83d:	e8 61 16 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b842:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b845:	e8 7e 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b84a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b84d:	83 ec 0c             	sub    $0xc,%esp
f012b850:	68 00 fc 2f 00       	push   $0x2ffc00
f012b855:	e8 32 c3 fd ff       	call   f0107b8c <kmalloc>
f012b85a:	83 c4 10             	add    $0x10,%esp
f012b85d:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b863:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b869:	89 c1                	mov    %eax,%ecx
f012b86b:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b872:	10 00 00 
f012b875:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b87b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b880:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b886:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b88c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b891:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b897:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b89d:	29 d0                	sub    %edx,%eax
f012b89f:	89 c3                	mov    %eax,%ebx
f012b8a1:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b8a8:	10 00 00 
f012b8ab:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b8b0:	0f b6 d0             	movzbl %al,%edx
f012b8b3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b8b9:	01 d0                	add    %edx,%eax
f012b8bb:	48                   	dec    %eax
f012b8bc:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b8c2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b8c8:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8cd:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b8d3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b8d9:	29 d0                	sub    %edx,%eax
f012b8db:	01 c3                	add    %eax,%ebx
f012b8dd:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b8e4:	10 00 00 
f012b8e7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012b8ec:	0f b6 c0             	movzbl %al,%eax
f012b8ef:	c1 e0 04             	shl    $0x4,%eax
f012b8f2:	89 c2                	mov    %eax,%edx
f012b8f4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b8fa:	01 d0                	add    %edx,%eax
f012b8fc:	48                   	dec    %eax
f012b8fd:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b903:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b909:	ba 00 00 00 00       	mov    $0x0,%edx
f012b90e:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b914:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b91a:	29 d0                	sub    %edx,%eax
f012b91c:	01 d8                	add    %ebx,%eax
f012b91e:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b923:	39 c1                	cmp    %eax,%ecx
f012b925:	74 1d                	je     f012b944 <test_kfreelast+0x1d07>
f012b927:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b92b:	75 17                	jne    f012b944 <test_kfreelast+0x1d07>
f012b92d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b934:	83 ec 0c             	sub    $0xc,%esp
f012b937:	68 58 c7 13 f0       	push   $0xf013c758
f012b93c:	e8 cd 53 fd ff       	call   f0100d0e <cprintf>
f012b941:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b944:	e8 7f 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b949:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b94c:	74 1d                	je     f012b96b <test_kfreelast+0x1d2e>
f012b94e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b952:	75 17                	jne    f012b96b <test_kfreelast+0x1d2e>
f012b954:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b95b:	83 ec 0c             	sub    $0xc,%esp
f012b95e:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012b963:	e8 a6 53 fd ff       	call   f0100d0e <cprintf>
f012b968:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b96b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b96e:	e8 30 15 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b973:	29 c3                	sub    %eax,%ebx
f012b975:	89 d8                	mov    %ebx,%eax
f012b977:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b97c:	74 1d                	je     f012b99b <test_kfreelast+0x1d5e>
f012b97e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b982:	75 17                	jne    f012b99b <test_kfreelast+0x1d5e>
f012b984:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b98b:	83 ec 0c             	sub    $0xc,%esp
f012b98e:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012b993:	e8 76 53 fd ff       	call   f0100d0e <cprintf>
f012b998:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b99b:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b9a2:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b9a5:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b9ab:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b9ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b9b5:	eb 0e                	jmp    f012b9c5 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b9b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b9ba:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b9bd:	01 d0                	add    %edx,%eax
f012b9bf:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b9c2:	ff 45 f4             	incl   -0xc(%ebp)
f012b9c5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b9cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b9ce:	7f e7                	jg     f012b9b7 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b9d0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9d4:	75 17                	jne    f012b9ed <test_kfreelast+0x1db0>
f012b9d6:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b9da:	83 ec 08             	sub    $0x8,%esp
f012b9dd:	ff 75 f0             	pushl  -0x10(%ebp)
f012b9e0:	68 8c c6 13 f0       	push   $0xf013c68c
f012b9e5:	e8 24 53 fd ff       	call   f0100d0e <cprintf>
f012b9ea:	83 c4 10             	add    $0x10,%esp
f012b9ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b9f4:	e8 aa 14 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012b9f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b9fc:	e8 c7 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba01:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012ba04:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ba0a:	83 ec 0c             	sub    $0xc,%esp
f012ba0d:	50                   	push   %eax
f012ba0e:	e8 44 c2 fd ff       	call   f0107c57 <kfree>
f012ba13:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba16:	e8 ad 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba1b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba1e:	74 1d                	je     f012ba3d <test_kfreelast+0x1e00>
f012ba20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba24:	75 17                	jne    f012ba3d <test_kfreelast+0x1e00>
f012ba26:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba2d:	83 ec 0c             	sub    $0xc,%esp
f012ba30:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012ba35:	e8 d4 52 fd ff       	call   f0100d0e <cprintf>
f012ba3a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba3d:	e8 61 14 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012ba42:	89 c2                	mov    %eax,%edx
f012ba44:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba47:	29 c2                	sub    %eax,%edx
f012ba49:	89 d0                	mov    %edx,%eax
f012ba4b:	83 f8 0d             	cmp    $0xd,%eax
f012ba4e:	74 1d                	je     f012ba6d <test_kfreelast+0x1e30>
f012ba50:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba54:	75 17                	jne    f012ba6d <test_kfreelast+0x1e30>
f012ba56:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba5d:	83 ec 0c             	sub    $0xc,%esp
f012ba60:	68 20 c7 13 f0       	push   $0xf013c720
f012ba65:	e8 a4 52 fd ff       	call   f0100d0e <cprintf>
f012ba6a:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ba6d:	83 ec 0c             	sub    $0xc,%esp
f012ba70:	6a 03                	push   $0x3
f012ba72:	e8 cc 18 fe ff       	call   f010d343 <sys_bypassPageFault>
f012ba77:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012ba7a:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ba80:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012ba83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ba8a:	eb 3c                	jmp    f012bac8 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012ba8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ba8f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ba92:	01 d0                	add    %edx,%eax
f012ba94:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ba97:	e8 95 18 fe ff       	call   f010d331 <sys_rcr2>
f012ba9c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ba9f:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012baa2:	01 ca                	add    %ecx,%edx
f012baa4:	39 d0                	cmp    %edx,%eax
f012baa6:	74 1d                	je     f012bac5 <test_kfreelast+0x1e88>
f012baa8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012baac:	75 17                	jne    f012bac5 <test_kfreelast+0x1e88>
f012baae:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bab5:	83 ec 0c             	sub    $0xc,%esp
f012bab8:	68 38 c8 13 f0       	push   $0xf013c838
f012babd:	e8 4c 52 fd ff       	call   f0100d0e <cprintf>
f012bac2:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012bac5:	ff 45 f4             	incl   -0xc(%ebp)
f012bac8:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012bacf:	7e bb                	jle    f012ba8c <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bad1:	83 ec 0c             	sub    $0xc,%esp
f012bad4:	6a 00                	push   $0x0
f012bad6:	e8 68 18 fe ff       	call   f010d343 <sys_bypassPageFault>
f012badb:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012bade:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bae4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bae7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012baee:	eb 1e                	jmp    f012bb0e <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012baf0:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012baf6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012baf9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bafc:	01 c8                	add    %ecx,%eax
f012bafe:	8a 00                	mov    (%eax),%al
f012bb00:	0f be c0             	movsbl %al,%eax
f012bb03:	01 d0                	add    %edx,%eax
f012bb05:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bb0b:	ff 45 f4             	incl   -0xc(%ebp)
f012bb0e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bb14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bb17:	7f d7                	jg     f012baf0 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012bb19:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012bb1f:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012bb25:	89 d0                	mov    %edx,%eax
f012bb27:	01 c0                	add    %eax,%eax
f012bb29:	01 d0                	add    %edx,%eax
f012bb2b:	01 c0                	add    %eax,%eax
f012bb2d:	01 d0                	add    %edx,%eax
f012bb2f:	01 c0                	add    %eax,%eax
f012bb31:	39 c1                	cmp    %eax,%ecx
f012bb33:	74 1d                	je     f012bb52 <test_kfreelast+0x1f15>
f012bb35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb39:	75 17                	jne    f012bb52 <test_kfreelast+0x1f15>
f012bb3b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb42:	83 ec 0c             	sub    $0xc,%esp
f012bb45:	68 04 c8 13 f0       	push   $0xf013c804
f012bb4a:	e8 bf 51 fd ff       	call   f0100d0e <cprintf>
f012bb4f:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bb52:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb56:	75 17                	jne    f012bb6f <test_kfreelast+0x1f32>
f012bb58:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012bb5c:	83 ec 08             	sub    $0x8,%esp
f012bb5f:	ff 75 f0             	pushl  -0x10(%ebp)
f012bb62:	68 8c c6 13 f0       	push   $0xf013c68c
f012bb67:	e8 a2 51 fd ff       	call   f0100d0e <cprintf>
f012bb6c:	83 c4 10             	add    $0x10,%esp
f012bb6f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012bb76:	e8 28 13 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bb7b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb7e:	e8 45 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012bb86:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012bb8c:	83 ec 0c             	sub    $0xc,%esp
f012bb8f:	50                   	push   %eax
f012bb90:	e8 c2 c0 fd ff       	call   f0107c57 <kfree>
f012bb95:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bb98:	e8 2b 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb9d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bba0:	74 1d                	je     f012bbbf <test_kfreelast+0x1f82>
f012bba2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bba6:	75 17                	jne    f012bbbf <test_kfreelast+0x1f82>
f012bba8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbaf:	83 ec 0c             	sub    $0xc,%esp
f012bbb2:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012bbb7:	e8 52 51 fd ff       	call   f0100d0e <cprintf>
f012bbbc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bbbf:	e8 df 12 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bbc4:	89 c2                	mov    %eax,%edx
f012bbc6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bbc9:	29 c2                	sub    %eax,%edx
f012bbcb:	89 d0                	mov    %edx,%eax
f012bbcd:	83 f8 02             	cmp    $0x2,%eax
f012bbd0:	74 1d                	je     f012bbef <test_kfreelast+0x1fb2>
f012bbd2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbd6:	75 17                	jne    f012bbef <test_kfreelast+0x1fb2>
f012bbd8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbdf:	83 ec 0c             	sub    $0xc,%esp
f012bbe2:	68 20 c7 13 f0       	push   $0xf013c720
f012bbe7:	e8 22 51 fd ff       	call   f0100d0e <cprintf>
f012bbec:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bbef:	e8 af 12 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bbf4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bbf7:	e8 cc 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bbfc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012bbff:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bc05:	83 ec 0c             	sub    $0xc,%esp
f012bc08:	50                   	push   %eax
f012bc09:	e8 49 c0 fd ff       	call   f0107c57 <kfree>
f012bc0e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc11:	e8 b2 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc16:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc19:	74 1d                	je     f012bc38 <test_kfreelast+0x1ffb>
f012bc1b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc1f:	75 17                	jne    f012bc38 <test_kfreelast+0x1ffb>
f012bc21:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc28:	83 ec 0c             	sub    $0xc,%esp
f012bc2b:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012bc30:	e8 d9 50 fd ff       	call   f0100d0e <cprintf>
f012bc35:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bc38:	e8 66 12 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bc3d:	89 c2                	mov    %eax,%edx
f012bc3f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bc42:	29 c2                	sub    %eax,%edx
f012bc44:	89 d0                	mov    %edx,%eax
f012bc46:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bc4b:	74 1d                	je     f012bc6a <test_kfreelast+0x202d>
f012bc4d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc51:	75 17                	jne    f012bc6a <test_kfreelast+0x202d>
f012bc53:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc5a:	83 ec 0c             	sub    $0xc,%esp
f012bc5d:	68 20 c7 13 f0       	push   $0xf013c720
f012bc62:	e8 a7 50 fd ff       	call   f0100d0e <cprintf>
f012bc67:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bc6a:	e8 34 12 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bc6f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc72:	e8 51 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc77:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012bc7a:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012bc80:	83 ec 0c             	sub    $0xc,%esp
f012bc83:	50                   	push   %eax
f012bc84:	e8 ce bf fd ff       	call   f0107c57 <kfree>
f012bc89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc8c:	e8 37 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc91:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc94:	74 1d                	je     f012bcb3 <test_kfreelast+0x2076>
f012bc96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc9a:	75 17                	jne    f012bcb3 <test_kfreelast+0x2076>
f012bc9c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bca3:	83 ec 0c             	sub    $0xc,%esp
f012bca6:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012bcab:	e8 5e 50 fd ff       	call   f0100d0e <cprintf>
f012bcb0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bcb3:	e8 eb 11 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bcb8:	89 c2                	mov    %eax,%edx
f012bcba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bcbd:	29 c2                	sub    %eax,%edx
f012bcbf:	89 d0                	mov    %edx,%eax
f012bcc1:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bcc6:	74 1d                	je     f012bce5 <test_kfreelast+0x20a8>
f012bcc8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bccc:	75 17                	jne    f012bce5 <test_kfreelast+0x20a8>
f012bcce:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcd5:	83 ec 0c             	sub    $0xc,%esp
f012bcd8:	68 20 c7 13 f0       	push   $0xf013c720
f012bcdd:	e8 2c 50 fd ff       	call   f0100d0e <cprintf>
f012bce2:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bce5:	e8 b9 11 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bcea:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bced:	e8 d6 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bcf2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bcf5:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bcfb:	83 ec 0c             	sub    $0xc,%esp
f012bcfe:	50                   	push   %eax
f012bcff:	e8 53 bf fd ff       	call   f0107c57 <kfree>
f012bd04:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd07:	e8 bc 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd0c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd0f:	74 1d                	je     f012bd2e <test_kfreelast+0x20f1>
f012bd11:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd15:	75 17                	jne    f012bd2e <test_kfreelast+0x20f1>
f012bd17:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd1e:	83 ec 0c             	sub    $0xc,%esp
f012bd21:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012bd26:	e8 e3 4f fd ff       	call   f0100d0e <cprintf>
f012bd2b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bd2e:	e8 70 11 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bd33:	89 c2                	mov    %eax,%edx
f012bd35:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bd38:	29 c2                	sub    %eax,%edx
f012bd3a:	89 d0                	mov    %edx,%eax
f012bd3c:	83 f8 01             	cmp    $0x1,%eax
f012bd3f:	74 1d                	je     f012bd5e <test_kfreelast+0x2121>
f012bd41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd45:	75 17                	jne    f012bd5e <test_kfreelast+0x2121>
f012bd47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd4e:	83 ec 0c             	sub    $0xc,%esp
f012bd51:	68 20 c7 13 f0       	push   $0xf013c720
f012bd56:	e8 b3 4f fd ff       	call   f0100d0e <cprintf>
f012bd5b:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bd5e:	e8 40 11 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bd63:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bd66:	e8 5d 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012bd6e:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012bd74:	83 ec 0c             	sub    $0xc,%esp
f012bd77:	50                   	push   %eax
f012bd78:	e8 da be fd ff       	call   f0107c57 <kfree>
f012bd7d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd80:	e8 43 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd85:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd88:	74 1d                	je     f012bda7 <test_kfreelast+0x216a>
f012bd8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd8e:	75 17                	jne    f012bda7 <test_kfreelast+0x216a>
f012bd90:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd97:	83 ec 0c             	sub    $0xc,%esp
f012bd9a:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012bd9f:	e8 6a 4f fd ff       	call   f0100d0e <cprintf>
f012bda4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bda7:	e8 f7 10 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bdac:	89 c2                	mov    %eax,%edx
f012bdae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bdb1:	29 c2                	sub    %eax,%edx
f012bdb3:	89 d0                	mov    %edx,%eax
f012bdb5:	83 f8 01             	cmp    $0x1,%eax
f012bdb8:	74 1d                	je     f012bdd7 <test_kfreelast+0x219a>
f012bdba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bdbe:	75 17                	jne    f012bdd7 <test_kfreelast+0x219a>
f012bdc0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdc7:	83 ec 0c             	sub    $0xc,%esp
f012bdca:	68 20 c7 13 f0       	push   $0xf013c720
f012bdcf:	e8 3a 4f fd ff       	call   f0100d0e <cprintf>
f012bdd4:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012bdd7:	e8 c7 10 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bddc:	89 c2                	mov    %eax,%edx
f012bdde:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bde1:	39 c2                	cmp    %eax,%edx
f012bde3:	74 1d                	je     f012be02 <test_kfreelast+0x21c5>
f012bde5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bde9:	75 17                	jne    f012be02 <test_kfreelast+0x21c5>
f012bdeb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdf2:	83 ec 0c             	sub    $0xc,%esp
f012bdf5:	68 80 c8 13 f0       	push   $0xf013c880
f012bdfa:	e8 0f 4f fd ff       	call   f0100d0e <cprintf>
f012bdff:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012be02:	83 ec 0c             	sub    $0xc,%esp
f012be05:	6a 03                	push   $0x3
f012be07:	e8 37 15 fe ff       	call   f010d343 <sys_bypassPageFault>
f012be0c:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012be0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012be16:	e9 8e 00 00 00       	jmp    f012bea9 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012be1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012be1e:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012be25:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012be28:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be2b:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012be2e:	e8 fe 14 fe ff       	call   f010d331 <sys_rcr2>
f012be33:	89 c2                	mov    %eax,%edx
f012be35:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be38:	39 c2                	cmp    %eax,%edx
f012be3a:	74 1d                	je     f012be59 <test_kfreelast+0x221c>
f012be3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be40:	75 17                	jne    f012be59 <test_kfreelast+0x221c>
f012be42:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be49:	83 ec 0c             	sub    $0xc,%esp
f012be4c:	68 38 c8 13 f0       	push   $0xf013c838
f012be51:	e8 b8 4e fd ff       	call   f0100d0e <cprintf>
f012be56:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012be59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012be5c:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012be63:	89 c2                	mov    %eax,%edx
f012be65:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be68:	01 d0                	add    %edx,%eax
f012be6a:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012be6d:	e8 bf 14 fe ff       	call   f010d331 <sys_rcr2>
f012be72:	89 c2                	mov    %eax,%edx
f012be74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012be77:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012be7e:	89 c1                	mov    %eax,%ecx
f012be80:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be83:	01 c8                	add    %ecx,%eax
f012be85:	39 c2                	cmp    %eax,%edx
f012be87:	74 1d                	je     f012bea6 <test_kfreelast+0x2269>
f012be89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be8d:	75 17                	jne    f012bea6 <test_kfreelast+0x2269>
f012be8f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be96:	83 ec 0c             	sub    $0xc,%esp
f012be99:	68 38 c8 13 f0       	push   $0xf013c838
f012be9e:	e8 6b 4e fd ff       	call   f0100d0e <cprintf>
f012bea3:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012bea6:	ff 45 f4             	incl   -0xc(%ebp)
f012bea9:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012bead:	0f 8e 68 ff ff ff    	jle    f012be1b <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012beb3:	83 ec 0c             	sub    $0xc,%esp
f012beb6:	6a 00                	push   $0x0
f012beb8:	e8 86 14 fe ff       	call   f010d343 <sys_bypassPageFault>
f012bebd:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012bec0:	e8 de 0f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bec5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bec8:	e8 fb 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012becd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012bed0:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012bed6:	83 ec 0c             	sub    $0xc,%esp
f012bed9:	50                   	push   %eax
f012beda:	e8 78 bd fd ff       	call   f0107c57 <kfree>
f012bedf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bee2:	e8 e1 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bee7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012beea:	74 1d                	je     f012bf09 <test_kfreelast+0x22cc>
f012beec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bef0:	75 17                	jne    f012bf09 <test_kfreelast+0x22cc>
f012bef2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bef9:	83 ec 0c             	sub    $0xc,%esp
f012befc:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012bf01:	e8 08 4e fd ff       	call   f0100d0e <cprintf>
f012bf06:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bf09:	e8 95 0f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bf0e:	89 c2                	mov    %eax,%edx
f012bf10:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bf13:	39 c2                	cmp    %eax,%edx
f012bf15:	74 1d                	je     f012bf34 <test_kfreelast+0x22f7>
f012bf17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf1b:	75 17                	jne    f012bf34 <test_kfreelast+0x22f7>
f012bf1d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf24:	83 ec 0c             	sub    $0xc,%esp
f012bf27:	68 b8 c8 13 f0       	push   $0xf013c8b8
f012bf2c:	e8 dd 4d fd ff       	call   f0100d0e <cprintf>
f012bf31:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bf34:	e8 6a 0f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bf39:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bf3c:	e8 87 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bf41:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bf44:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bf4a:	83 ec 0c             	sub    $0xc,%esp
f012bf4d:	50                   	push   %eax
f012bf4e:	e8 04 bd fd ff       	call   f0107c57 <kfree>
f012bf53:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bf56:	e8 6d 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bf5b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bf5e:	74 1d                	je     f012bf7d <test_kfreelast+0x2340>
f012bf60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf64:	75 17                	jne    f012bf7d <test_kfreelast+0x2340>
f012bf66:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf6d:	83 ec 0c             	sub    $0xc,%esp
f012bf70:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012bf75:	e8 94 4d fd ff       	call   f0100d0e <cprintf>
f012bf7a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bf7d:	e8 21 0f fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bf82:	89 c2                	mov    %eax,%edx
f012bf84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bf87:	39 c2                	cmp    %eax,%edx
f012bf89:	74 1d                	je     f012bfa8 <test_kfreelast+0x236b>
f012bf8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf8f:	75 17                	jne    f012bfa8 <test_kfreelast+0x236b>
f012bf91:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf98:	83 ec 0c             	sub    $0xc,%esp
f012bf9b:	68 b8 c8 13 f0       	push   $0xf013c8b8
f012bfa0:	e8 69 4d fd ff       	call   f0100d0e <cprintf>
f012bfa5:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012bfa8:	e8 f6 0e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bfad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bfb0:	e8 13 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bfb5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012bfb8:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012bfbe:	83 ec 0c             	sub    $0xc,%esp
f012bfc1:	50                   	push   %eax
f012bfc2:	e8 90 bc fd ff       	call   f0107c57 <kfree>
f012bfc7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bfca:	e8 f9 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bfcf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bfd2:	74 1d                	je     f012bff1 <test_kfreelast+0x23b4>
f012bfd4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfd8:	75 17                	jne    f012bff1 <test_kfreelast+0x23b4>
f012bfda:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bfe1:	83 ec 0c             	sub    $0xc,%esp
f012bfe4:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012bfe9:	e8 20 4d fd ff       	call   f0100d0e <cprintf>
f012bfee:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bff1:	e8 ad 0e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012bff6:	89 c2                	mov    %eax,%edx
f012bff8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bffb:	39 c2                	cmp    %eax,%edx
f012bffd:	74 1d                	je     f012c01c <test_kfreelast+0x23df>
f012bfff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c003:	75 17                	jne    f012c01c <test_kfreelast+0x23df>
f012c005:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c00c:	83 ec 0c             	sub    $0xc,%esp
f012c00f:	68 b8 c8 13 f0       	push   $0xf013c8b8
f012c014:	e8 f5 4c fd ff       	call   f0100d0e <cprintf>
f012c019:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c01c:	e8 82 0e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c021:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c024:	e8 9f 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c029:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c02c:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c032:	83 ec 0c             	sub    $0xc,%esp
f012c035:	50                   	push   %eax
f012c036:	e8 1c bc fd ff       	call   f0107c57 <kfree>
f012c03b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c03e:	e8 85 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c043:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c046:	74 1d                	je     f012c065 <test_kfreelast+0x2428>
f012c048:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c04c:	75 17                	jne    f012c065 <test_kfreelast+0x2428>
f012c04e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c055:	83 ec 0c             	sub    $0xc,%esp
f012c058:	68 b4 c6 13 f0       	push   $0xf013c6b4
f012c05d:	e8 ac 4c fd ff       	call   f0100d0e <cprintf>
f012c062:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c065:	e8 39 0e fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c06a:	89 c2                	mov    %eax,%edx
f012c06c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c06f:	39 c2                	cmp    %eax,%edx
f012c071:	74 1d                	je     f012c090 <test_kfreelast+0x2453>
f012c073:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c077:	75 17                	jne    f012c090 <test_kfreelast+0x2453>
f012c079:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c080:	83 ec 0c             	sub    $0xc,%esp
f012c083:	68 b8 c8 13 f0       	push   $0xf013c8b8
f012c088:	e8 81 4c fd ff       	call   f0100d0e <cprintf>
f012c08d:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c090:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c094:	75 17                	jne    f012c0ad <test_kfreelast+0x2470>
f012c096:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c09a:	83 ec 08             	sub    $0x8,%esp
f012c09d:	ff 75 f0             	pushl  -0x10(%ebp)
f012c0a0:	68 8c c6 13 f0       	push   $0xf013c68c
f012c0a5:	e8 64 4c fd ff       	call   f0100d0e <cprintf>
f012c0aa:	83 c4 10             	add    $0x10,%esp
f012c0ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c0b4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c0b9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c0bc:	5b                   	pop    %ebx
f012c0bd:	5f                   	pop    %edi
f012c0be:	5d                   	pop    %ebp
f012c0bf:	c3                   	ret    

f012c0c0 <test_krealloc>:

int test_krealloc() {
f012c0c0:	55                   	push   %ebp
f012c0c1:	89 e5                	mov    %esp,%ebp
f012c0c3:	57                   	push   %edi
f012c0c4:	53                   	push   %ebx
f012c0c5:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c0cb:	83 ec 0c             	sub    $0xc,%esp
f012c0ce:	68 9c b5 13 f0       	push   $0xf013b59c
f012c0d3:	e8 36 4c fd ff       	call   f0100d0e <cprintf>
f012c0d8:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c0db:	83 ec 0c             	sub    $0xc,%esp
f012c0de:	68 cc b5 13 f0       	push   $0xf013b5cc
f012c0e3:	e8 26 4c fd ff       	call   f0100d0e <cprintf>
f012c0e8:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c0eb:	83 ec 0c             	sub    $0xc,%esp
f012c0ee:	68 9c b5 13 f0       	push   $0xf013b59c
f012c0f3:	e8 16 4c fd ff       	call   f0100d0e <cprintf>
f012c0f8:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c0fb:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c0ff:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c103:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c109:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c10f:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c116:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c11d:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c123:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c128:	b8 00 00 00 00       	mov    $0x0,%eax
f012c12d:	89 d7                	mov    %edx,%edi
f012c12f:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c131:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c138:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c13e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c143:	b8 00 00 00 00       	mov    $0x0,%eax
f012c148:	89 d7                	mov    %edx,%edi
f012c14a:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c14c:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c152:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c157:	b8 00 00 00 00       	mov    $0x0,%eax
f012c15c:	89 d7                	mov    %edx,%edi
f012c15e:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c160:	e8 3e 0d fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c165:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c168:	83 ec 08             	sub    $0x8,%esp
f012c16b:	68 00 fc 0f 00       	push   $0xffc00
f012c170:	6a 00                	push   $0x0
f012c172:	e8 d5 bc fd ff       	call   f0107e4c <krealloc>
f012c177:	83 c4 10             	add    $0x10,%esp
f012c17a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c180:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c186:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c18b:	77 17                	ja     f012c1a4 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c18d:	83 ec 04             	sub    $0x4,%esp
f012c190:	68 00 c9 13 f0       	push   $0xf013c900
f012c195:	68 e2 0e 00 00       	push   $0xee2
f012c19a:	68 5a b6 13 f0       	push   $0xf013b65a
f012c19f:	e8 61 40 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c1a4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c1aa:	89 c1                	mov    %eax,%ecx
f012c1ac:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c1b3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c1b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c1bb:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c1be:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c1c1:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1c6:	f7 75 b4             	divl   -0x4c(%ebp)
f012c1c9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c1cc:	29 d0                	sub    %edx,%eax
f012c1ce:	89 c3                	mov    %eax,%ebx
f012c1d0:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c1d7:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c1dc:	0f b6 d0             	movzbl %al,%edx
f012c1df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c1e2:	01 d0                	add    %edx,%eax
f012c1e4:	48                   	dec    %eax
f012c1e5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c1e8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c1eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1f0:	f7 75 ac             	divl   -0x54(%ebp)
f012c1f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c1f6:	29 d0                	sub    %edx,%eax
f012c1f8:	01 c3                	add    %eax,%ebx
f012c1fa:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c201:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c206:	0f b6 c0             	movzbl %al,%eax
f012c209:	c1 e0 04             	shl    $0x4,%eax
f012c20c:	89 c2                	mov    %eax,%edx
f012c20e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c211:	01 d0                	add    %edx,%eax
f012c213:	48                   	dec    %eax
f012c214:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c217:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c21a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c21f:	f7 75 a4             	divl   -0x5c(%ebp)
f012c222:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c225:	29 d0                	sub    %edx,%eax
f012c227:	01 d8                	add    %ebx,%eax
f012c229:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c22e:	39 c1                	cmp    %eax,%ecx
f012c230:	74 17                	je     f012c249 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c232:	83 ec 04             	sub    $0x4,%esp
f012c235:	68 3c c9 13 f0       	push   $0xf013c93c
f012c23a:	68 e4 0e 00 00       	push   $0xee4
f012c23f:	68 5a b6 13 f0       	push   $0xf013b65a
f012c244:	e8 bc 3f fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c249:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c24c:	e8 52 0c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c251:	29 c3                	sub    %eax,%ebx
f012c253:	89 d8                	mov    %ebx,%eax
f012c255:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c25a:	74 17                	je     f012c273 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c25c:	83 ec 04             	sub    $0x4,%esp
f012c25f:	68 6e c9 13 f0       	push   $0xf013c96e
f012c264:	68 e7 0e 00 00       	push   $0xee7
f012c269:	68 5a b6 13 f0       	push   $0xf013b65a
f012c26e:	e8 92 3f fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c273:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c27a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c27d:	e8 21 0c fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c282:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c285:	83 ec 08             	sub    $0x8,%esp
f012c288:	68 00 fc 0f 00       	push   $0xffc00
f012c28d:	6a 00                	push   $0x0
f012c28f:	e8 b8 bb fd ff       	call   f0107e4c <krealloc>
f012c294:	83 c4 10             	add    $0x10,%esp
f012c297:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c29d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c2a3:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c2a8:	77 17                	ja     f012c2c1 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c2aa:	83 ec 04             	sub    $0x4,%esp
f012c2ad:	68 00 c9 13 f0       	push   $0xf013c900
f012c2b2:	68 ef 0e 00 00       	push   $0xeef
f012c2b7:	68 5a b6 13 f0       	push   $0xf013b65a
f012c2bc:	e8 44 3f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c2c1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c2c7:	89 c1                	mov    %eax,%ecx
f012c2c9:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c2d0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c2d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c2d8:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c2db:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c2de:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2e3:	f7 75 9c             	divl   -0x64(%ebp)
f012c2e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c2e9:	29 d0                	sub    %edx,%eax
f012c2eb:	89 c3                	mov    %eax,%ebx
f012c2ed:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c2f4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c2f9:	0f b6 d0             	movzbl %al,%edx
f012c2fc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c2ff:	01 d0                	add    %edx,%eax
f012c301:	48                   	dec    %eax
f012c302:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c305:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c308:	ba 00 00 00 00       	mov    $0x0,%edx
f012c30d:	f7 75 94             	divl   -0x6c(%ebp)
f012c310:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c313:	29 d0                	sub    %edx,%eax
f012c315:	01 c3                	add    %eax,%ebx
f012c317:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c31e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c323:	0f b6 c0             	movzbl %al,%eax
f012c326:	c1 e0 04             	shl    $0x4,%eax
f012c329:	89 c2                	mov    %eax,%edx
f012c32b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c32e:	01 d0                	add    %edx,%eax
f012c330:	48                   	dec    %eax
f012c331:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c334:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c337:	ba 00 00 00 00       	mov    $0x0,%edx
f012c33c:	f7 75 8c             	divl   -0x74(%ebp)
f012c33f:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c342:	29 d0                	sub    %edx,%eax
f012c344:	01 d8                	add    %ebx,%eax
f012c346:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c34b:	39 c1                	cmp    %eax,%ecx
f012c34d:	74 17                	je     f012c366 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c34f:	83 ec 04             	sub    $0x4,%esp
f012c352:	68 3c c9 13 f0       	push   $0xf013c93c
f012c357:	68 f1 0e 00 00       	push   $0xef1
f012c35c:	68 5a b6 13 f0       	push   $0xf013b65a
f012c361:	e8 9f 3e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c366:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c369:	e8 35 0b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c36e:	29 c3                	sub    %eax,%ebx
f012c370:	89 d8                	mov    %ebx,%eax
f012c372:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c377:	74 17                	je     f012c390 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c379:	83 ec 04             	sub    $0x4,%esp
f012c37c:	68 6e c9 13 f0       	push   $0xf013c96e
f012c381:	68 f3 0e 00 00       	push   $0xef3
f012c386:	68 5a b6 13 f0       	push   $0xf013b65a
f012c38b:	e8 75 3e fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c390:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c397:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c39a:	e8 04 0b fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c39f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c3a2:	83 ec 08             	sub    $0x8,%esp
f012c3a5:	68 00 fc 0f 00       	push   $0xffc00
f012c3aa:	6a 00                	push   $0x0
f012c3ac:	e8 9b ba fd ff       	call   f0107e4c <krealloc>
f012c3b1:	83 c4 10             	add    $0x10,%esp
f012c3b4:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c3ba:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c3c0:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c3c5:	77 17                	ja     f012c3de <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c3c7:	83 ec 04             	sub    $0x4,%esp
f012c3ca:	68 00 c9 13 f0       	push   $0xf013c900
f012c3cf:	68 fb 0e 00 00       	push   $0xefb
f012c3d4:	68 5a b6 13 f0       	push   $0xf013b65a
f012c3d9:	e8 27 3e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c3de:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c3e4:	89 c1                	mov    %eax,%ecx
f012c3e6:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c3ed:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c3f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c3f5:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c3f8:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c3fb:	ba 00 00 00 00       	mov    $0x0,%edx
f012c400:	f7 75 84             	divl   -0x7c(%ebp)
f012c403:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c406:	29 d0                	sub    %edx,%eax
f012c408:	89 c3                	mov    %eax,%ebx
f012c40a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c411:	10 00 00 
f012c414:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c419:	0f b6 d0             	movzbl %al,%edx
f012c41c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c422:	01 d0                	add    %edx,%eax
f012c424:	48                   	dec    %eax
f012c425:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c42b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c431:	ba 00 00 00 00       	mov    $0x0,%edx
f012c436:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c43c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c442:	29 d0                	sub    %edx,%eax
f012c444:	01 c3                	add    %eax,%ebx
f012c446:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c44d:	10 00 00 
f012c450:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c455:	0f b6 c0             	movzbl %al,%eax
f012c458:	c1 e0 04             	shl    $0x4,%eax
f012c45b:	89 c2                	mov    %eax,%edx
f012c45d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c463:	01 d0                	add    %edx,%eax
f012c465:	48                   	dec    %eax
f012c466:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c46c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c472:	ba 00 00 00 00       	mov    $0x0,%edx
f012c477:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c47d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c483:	29 d0                	sub    %edx,%eax
f012c485:	01 d8                	add    %ebx,%eax
f012c487:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c48c:	39 c1                	cmp    %eax,%ecx
f012c48e:	74 17                	je     f012c4a7 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c490:	83 ec 04             	sub    $0x4,%esp
f012c493:	68 3c c9 13 f0       	push   $0xf013c93c
f012c498:	68 fd 0e 00 00       	push   $0xefd
f012c49d:	68 5a b6 13 f0       	push   $0xf013b65a
f012c4a2:	e8 5e 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c4a7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c4aa:	e8 f4 09 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c4af:	29 c3                	sub    %eax,%ebx
f012c4b1:	89 d8                	mov    %ebx,%eax
f012c4b3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c4b8:	74 17                	je     f012c4d1 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c4ba:	83 ec 04             	sub    $0x4,%esp
f012c4bd:	68 6e c9 13 f0       	push   $0xf013c96e
f012c4c2:	68 ff 0e 00 00       	push   $0xeff
f012c4c7:	68 5a b6 13 f0       	push   $0xf013b65a
f012c4cc:	e8 34 3d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c4d1:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c4d8:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c4db:	e8 c3 09 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c4e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c4e3:	83 ec 08             	sub    $0x8,%esp
f012c4e6:	68 00 fc 0f 00       	push   $0xffc00
f012c4eb:	6a 00                	push   $0x0
f012c4ed:	e8 5a b9 fd ff       	call   f0107e4c <krealloc>
f012c4f2:	83 c4 10             	add    $0x10,%esp
f012c4f5:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c4fb:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c501:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c506:	77 17                	ja     f012c51f <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c508:	83 ec 04             	sub    $0x4,%esp
f012c50b:	68 00 c9 13 f0       	push   $0xf013c900
f012c510:	68 06 0f 00 00       	push   $0xf06
f012c515:	68 5a b6 13 f0       	push   $0xf013b65a
f012c51a:	e8 e6 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c51f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c525:	89 c1                	mov    %eax,%ecx
f012c527:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c52e:	10 00 00 
f012c531:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c537:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c53c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c542:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c548:	ba 00 00 00 00       	mov    $0x0,%edx
f012c54d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c553:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c559:	29 d0                	sub    %edx,%eax
f012c55b:	89 c3                	mov    %eax,%ebx
f012c55d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c564:	10 00 00 
f012c567:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c56c:	0f b6 d0             	movzbl %al,%edx
f012c56f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c575:	01 d0                	add    %edx,%eax
f012c577:	48                   	dec    %eax
f012c578:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c57e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c584:	ba 00 00 00 00       	mov    $0x0,%edx
f012c589:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c58f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c595:	29 d0                	sub    %edx,%eax
f012c597:	01 c3                	add    %eax,%ebx
f012c599:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c5a0:	10 00 00 
f012c5a3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c5a8:	0f b6 c0             	movzbl %al,%eax
f012c5ab:	c1 e0 04             	shl    $0x4,%eax
f012c5ae:	89 c2                	mov    %eax,%edx
f012c5b0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c5b6:	01 d0                	add    %edx,%eax
f012c5b8:	48                   	dec    %eax
f012c5b9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c5bf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c5c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5ca:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c5d0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c5d6:	29 d0                	sub    %edx,%eax
f012c5d8:	01 d8                	add    %ebx,%eax
f012c5da:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c5df:	39 c1                	cmp    %eax,%ecx
f012c5e1:	74 17                	je     f012c5fa <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c5e3:	83 ec 04             	sub    $0x4,%esp
f012c5e6:	68 3c c9 13 f0       	push   $0xf013c93c
f012c5eb:	68 08 0f 00 00       	push   $0xf08
f012c5f0:	68 5a b6 13 f0       	push   $0xf013b65a
f012c5f5:	e8 0b 3c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c5fa:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c5fd:	e8 a1 08 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c602:	29 c3                	sub    %eax,%ebx
f012c604:	89 d8                	mov    %ebx,%eax
f012c606:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c60b:	74 17                	je     f012c624 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c60d:	83 ec 04             	sub    $0x4,%esp
f012c610:	68 6e c9 13 f0       	push   $0xf013c96e
f012c615:	68 0a 0f 00 00       	push   $0xf0a
f012c61a:	68 5a b6 13 f0       	push   $0xf013b65a
f012c61f:	e8 e1 3b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c624:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c62b:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c62e:	e8 70 08 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c633:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c636:	83 ec 08             	sub    $0x8,%esp
f012c639:	68 00 fc 1f 00       	push   $0x1ffc00
f012c63e:	6a 00                	push   $0x0
f012c640:	e8 07 b8 fd ff       	call   f0107e4c <krealloc>
f012c645:	83 c4 10             	add    $0x10,%esp
f012c648:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c64e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c654:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c659:	77 17                	ja     f012c672 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c65b:	83 ec 04             	sub    $0x4,%esp
f012c65e:	68 00 c9 13 f0       	push   $0xf013c900
f012c663:	68 11 0f 00 00       	push   $0xf11
f012c668:	68 5a b6 13 f0       	push   $0xf013b65a
f012c66d:	e8 93 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c672:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c678:	89 c1                	mov    %eax,%ecx
f012c67a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c681:	10 00 00 
f012c684:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c68a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c68f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c695:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c69b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6a0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c6a6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c6ac:	29 d0                	sub    %edx,%eax
f012c6ae:	89 c3                	mov    %eax,%ebx
f012c6b0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c6b7:	10 00 00 
f012c6ba:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c6bf:	0f b6 d0             	movzbl %al,%edx
f012c6c2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c6c8:	01 d0                	add    %edx,%eax
f012c6ca:	48                   	dec    %eax
f012c6cb:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c6d1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c6d7:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6dc:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c6e2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c6e8:	29 d0                	sub    %edx,%eax
f012c6ea:	01 c3                	add    %eax,%ebx
f012c6ec:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c6f3:	10 00 00 
f012c6f6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c6fb:	0f b6 c0             	movzbl %al,%eax
f012c6fe:	c1 e0 04             	shl    $0x4,%eax
f012c701:	89 c2                	mov    %eax,%edx
f012c703:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c709:	01 d0                	add    %edx,%eax
f012c70b:	48                   	dec    %eax
f012c70c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c712:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c718:	ba 00 00 00 00       	mov    $0x0,%edx
f012c71d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c723:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c729:	29 d0                	sub    %edx,%eax
f012c72b:	01 d8                	add    %ebx,%eax
f012c72d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c732:	39 c1                	cmp    %eax,%ecx
f012c734:	74 17                	je     f012c74d <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c736:	83 ec 04             	sub    $0x4,%esp
f012c739:	68 3c c9 13 f0       	push   $0xf013c93c
f012c73e:	68 13 0f 00 00       	push   $0xf13
f012c743:	68 5a b6 13 f0       	push   $0xf013b65a
f012c748:	e8 b8 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c74d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c750:	e8 4e 07 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c755:	29 c3                	sub    %eax,%ebx
f012c757:	89 d8                	mov    %ebx,%eax
f012c759:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c75e:	74 17                	je     f012c777 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c760:	83 ec 04             	sub    $0x4,%esp
f012c763:	68 6e c9 13 f0       	push   $0xf013c96e
f012c768:	68 15 0f 00 00       	push   $0xf15
f012c76d:	68 5a b6 13 f0       	push   $0xf013b65a
f012c772:	e8 8e 3a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c777:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c77e:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c781:	e8 1d 07 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c786:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c789:	83 ec 08             	sub    $0x8,%esp
f012c78c:	68 00 fc 1f 00       	push   $0x1ffc00
f012c791:	6a 00                	push   $0x0
f012c793:	e8 b4 b6 fd ff       	call   f0107e4c <krealloc>
f012c798:	83 c4 10             	add    $0x10,%esp
f012c79b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c7a1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c7a7:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c7ac:	77 17                	ja     f012c7c5 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c7ae:	83 ec 04             	sub    $0x4,%esp
f012c7b1:	68 00 c9 13 f0       	push   $0xf013c900
f012c7b6:	68 1c 0f 00 00       	push   $0xf1c
f012c7bb:	68 5a b6 13 f0       	push   $0xf013b65a
f012c7c0:	e8 40 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c7c5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c7cb:	89 c1                	mov    %eax,%ecx
f012c7cd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c7d4:	10 00 00 
f012c7d7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c7dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c7e2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c7e8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c7ee:	ba 00 00 00 00       	mov    $0x0,%edx
f012c7f3:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c7f9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c7ff:	29 d0                	sub    %edx,%eax
f012c801:	89 c3                	mov    %eax,%ebx
f012c803:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c80a:	10 00 00 
f012c80d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c812:	0f b6 d0             	movzbl %al,%edx
f012c815:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c81b:	01 d0                	add    %edx,%eax
f012c81d:	48                   	dec    %eax
f012c81e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c824:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c82a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c82f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c835:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c83b:	29 d0                	sub    %edx,%eax
f012c83d:	01 c3                	add    %eax,%ebx
f012c83f:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c846:	10 00 00 
f012c849:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c84e:	0f b6 c0             	movzbl %al,%eax
f012c851:	c1 e0 04             	shl    $0x4,%eax
f012c854:	89 c2                	mov    %eax,%edx
f012c856:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c85c:	01 d0                	add    %edx,%eax
f012c85e:	48                   	dec    %eax
f012c85f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c865:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c86b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c870:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c876:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c87c:	29 d0                	sub    %edx,%eax
f012c87e:	01 d8                	add    %ebx,%eax
f012c880:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c885:	39 c1                	cmp    %eax,%ecx
f012c887:	74 17                	je     f012c8a0 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c889:	83 ec 04             	sub    $0x4,%esp
f012c88c:	68 3c c9 13 f0       	push   $0xf013c93c
f012c891:	68 1e 0f 00 00       	push   $0xf1e
f012c896:	68 5a b6 13 f0       	push   $0xf013b65a
f012c89b:	e8 65 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c8a0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c8a3:	e8 fb 05 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c8a8:	29 c3                	sub    %eax,%ebx
f012c8aa:	89 d8                	mov    %ebx,%eax
f012c8ac:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c8b1:	74 17                	je     f012c8ca <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c8b3:	83 ec 04             	sub    $0x4,%esp
f012c8b6:	68 6e c9 13 f0       	push   $0xf013c96e
f012c8bb:	68 20 0f 00 00       	push   $0xf20
f012c8c0:	68 5a b6 13 f0       	push   $0xf013b65a
f012c8c5:	e8 3b 39 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c8ca:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c8d1:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c8d4:	e8 ca 05 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c8d9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c8dc:	83 ec 08             	sub    $0x8,%esp
f012c8df:	68 00 fc 2f 00       	push   $0x2ffc00
f012c8e4:	6a 00                	push   $0x0
f012c8e6:	e8 61 b5 fd ff       	call   f0107e4c <krealloc>
f012c8eb:	83 c4 10             	add    $0x10,%esp
f012c8ee:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c8f4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c8fa:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c8ff:	77 17                	ja     f012c918 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c901:	83 ec 04             	sub    $0x4,%esp
f012c904:	68 00 c9 13 f0       	push   $0xf013c900
f012c909:	68 27 0f 00 00       	push   $0xf27
f012c90e:	68 5a b6 13 f0       	push   $0xf013b65a
f012c913:	e8 ed 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c918:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c91e:	89 c1                	mov    %eax,%ecx
f012c920:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c927:	10 00 00 
f012c92a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c930:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c935:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c93b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c941:	ba 00 00 00 00       	mov    $0x0,%edx
f012c946:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c94c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c952:	29 d0                	sub    %edx,%eax
f012c954:	89 c3                	mov    %eax,%ebx
f012c956:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c95d:	10 00 00 
f012c960:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c965:	0f b6 d0             	movzbl %al,%edx
f012c968:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c96e:	01 d0                	add    %edx,%eax
f012c970:	48                   	dec    %eax
f012c971:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c977:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c97d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c982:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c988:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c98e:	29 d0                	sub    %edx,%eax
f012c990:	01 c3                	add    %eax,%ebx
f012c992:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c999:	10 00 00 
f012c99c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012c9a1:	0f b6 c0             	movzbl %al,%eax
f012c9a4:	c1 e0 04             	shl    $0x4,%eax
f012c9a7:	89 c2                	mov    %eax,%edx
f012c9a9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c9af:	01 d0                	add    %edx,%eax
f012c9b1:	48                   	dec    %eax
f012c9b2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c9b8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c9be:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9c3:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c9c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c9cf:	29 d0                	sub    %edx,%eax
f012c9d1:	01 d8                	add    %ebx,%eax
f012c9d3:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c9d8:	39 c1                	cmp    %eax,%ecx
f012c9da:	74 17                	je     f012c9f3 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c9dc:	83 ec 04             	sub    $0x4,%esp
f012c9df:	68 3c c9 13 f0       	push   $0xf013c93c
f012c9e4:	68 29 0f 00 00       	push   $0xf29
f012c9e9:	68 5a b6 13 f0       	push   $0xf013b65a
f012c9ee:	e8 12 38 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c9f3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c9f6:	e8 a8 04 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012c9fb:	29 c3                	sub    %eax,%ebx
f012c9fd:	89 d8                	mov    %ebx,%eax
f012c9ff:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ca04:	74 17                	je     f012ca1d <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012ca06:	83 ec 04             	sub    $0x4,%esp
f012ca09:	68 a4 ba 13 f0       	push   $0xf013baa4
f012ca0e:	68 2b 0f 00 00       	push   $0xf2b
f012ca13:	68 5a b6 13 f0       	push   $0xf013b65a
f012ca18:	e8 e8 37 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ca1d:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012ca24:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ca27:	e8 77 04 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012ca2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ca2f:	83 ec 08             	sub    $0x8,%esp
f012ca32:	68 00 fc 2f 00       	push   $0x2ffc00
f012ca37:	6a 00                	push   $0x0
f012ca39:	e8 0e b4 fd ff       	call   f0107e4c <krealloc>
f012ca3e:	83 c4 10             	add    $0x10,%esp
f012ca41:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ca47:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ca4d:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ca52:	77 17                	ja     f012ca6b <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ca54:	83 ec 04             	sub    $0x4,%esp
f012ca57:	68 00 c9 13 f0       	push   $0xf013c900
f012ca5c:	68 32 0f 00 00       	push   $0xf32
f012ca61:	68 5a b6 13 f0       	push   $0xf013b65a
f012ca66:	e8 9a 37 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ca6b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ca71:	89 c1                	mov    %eax,%ecx
f012ca73:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ca7a:	10 00 00 
f012ca7d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ca83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ca88:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ca8e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ca94:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca99:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012ca9f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012caa5:	29 d0                	sub    %edx,%eax
f012caa7:	89 c3                	mov    %eax,%ebx
f012caa9:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012cab0:	10 00 00 
f012cab3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012cab8:	0f b6 d0             	movzbl %al,%edx
f012cabb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cac1:	01 d0                	add    %edx,%eax
f012cac3:	48                   	dec    %eax
f012cac4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012caca:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cad0:	ba 00 00 00 00       	mov    $0x0,%edx
f012cad5:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012cadb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cae1:	29 d0                	sub    %edx,%eax
f012cae3:	01 c3                	add    %eax,%ebx
f012cae5:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012caec:	10 00 00 
f012caef:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012caf4:	0f b6 c0             	movzbl %al,%eax
f012caf7:	c1 e0 04             	shl    $0x4,%eax
f012cafa:	89 c2                	mov    %eax,%edx
f012cafc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012cb02:	01 d0                	add    %edx,%eax
f012cb04:	48                   	dec    %eax
f012cb05:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012cb0b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cb11:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb16:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012cb1c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cb22:	29 d0                	sub    %edx,%eax
f012cb24:	01 d8                	add    %ebx,%eax
f012cb26:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cb2b:	39 c1                	cmp    %eax,%ecx
f012cb2d:	74 17                	je     f012cb46 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012cb2f:	83 ec 04             	sub    $0x4,%esp
f012cb32:	68 3c c9 13 f0       	push   $0xf013c93c
f012cb37:	68 34 0f 00 00       	push   $0xf34
f012cb3c:	68 5a b6 13 f0       	push   $0xf013b65a
f012cb41:	e8 bf 36 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cb46:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cb49:	e8 55 03 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012cb4e:	29 c3                	sub    %eax,%ebx
f012cb50:	89 d8                	mov    %ebx,%eax
f012cb52:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cb57:	74 17                	je     f012cb70 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012cb59:	83 ec 04             	sub    $0x4,%esp
f012cb5c:	68 6e c9 13 f0       	push   $0xf013c96e
f012cb61:	68 36 0f 00 00       	push   $0xf36
f012cb66:	68 5a b6 13 f0       	push   $0xf013b65a
f012cb6b:	e8 95 36 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cb70:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012cb77:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012cb7a:	e8 24 03 fe ff       	call   f010cea3 <sys_calculate_free_frames>
f012cb7f:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012cb82:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012cb89:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cb8c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cb92:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012cb98:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cb9e:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012cba1:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012cba3:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012cba9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cbaf:	01 c2                	add    %eax,%edx
f012cbb1:	8a 45 ce             	mov    -0x32(%ebp),%al
f012cbb4:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012cbb6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cbbc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cbc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012cbc9:	eb 11                	jmp    f012cbdc <test_krealloc+0xb1c>
			ptr[i] = 2;
f012cbcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012cbce:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cbd4:	01 d0                	add    %edx,%eax
f012cbd6:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cbd9:	ff 45 f4             	incl   -0xc(%ebp)
f012cbdc:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cbe2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012cbe5:	7d e4                	jge    f012cbcb <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012cbe7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cbed:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012cbf3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cbf9:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012cbff:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cc05:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cc0c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cc12:	01 d0                	add    %edx,%eax
f012cc14:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012cc1a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cc20:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cc26:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012cc2d:	eb 1b                	jmp    f012cc4a <test_krealloc+0xb8a>
			intArr[i] = 4;
f012cc2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012cc32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cc39:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cc3f:	01 d0                	add    %edx,%eax
f012cc41:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cc47:	ff 45 f0             	incl   -0x10(%ebp)
f012cc4a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cc50:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012cc53:	7d da                	jge    f012cc2f <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cc55:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cc5b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cc61:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012cc68:	eb 17                	jmp    f012cc81 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012cc6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012cc6d:	01 c0                	add    %eax,%eax
f012cc6f:	89 c2                	mov    %eax,%edx
f012cc71:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cc77:	01 d0                	add    %edx,%eax
f012cc79:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cc7e:	ff 45 ec             	incl   -0x14(%ebp)
f012cc81:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cc87:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012cc8a:	7d de                	jge    f012cc6a <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012cc8c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cc92:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012cc98:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cc9e:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012cca3:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cca9:	01 c0                	add    %eax,%eax
f012ccab:	89 c2                	mov    %eax,%edx
f012ccad:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ccb3:	01 d0                	add    %edx,%eax
f012ccb5:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ccba:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ccc0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ccc6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012cccd:	eb 49                	jmp    f012cd18 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012cccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ccd2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccd9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccdf:	01 d0                	add    %edx,%eax
f012cce1:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012cce4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cce7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccf4:	01 d0                	add    %edx,%eax
f012ccf6:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012ccfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ccff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd06:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd0c:	01 d0                	add    %edx,%eax
f012cd0e:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cd15:	ff 45 e8             	incl   -0x18(%ebp)
f012cd18:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cd1e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012cd21:	7d ac                	jge    f012cccf <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012cd23:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cd29:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012cd2f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd35:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012cd38:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012cd44:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd4a:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012cd51:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd57:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd5e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd64:	01 d0                	add    %edx,%eax
f012cd66:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012cd69:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd6f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd76:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd7c:	01 d0                	add    %edx,%eax
f012cd7e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012cd84:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd8a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd91:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd97:	01 d0                	add    %edx,%eax
f012cd99:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012cda0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cda6:	8a 00                	mov    (%eax),%al
f012cda8:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012cdab:	75 17                	jne    f012cdc4 <test_krealloc+0xd04>
f012cdad:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012cdb3:	89 c2                	mov    %eax,%edx
f012cdb5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cdbb:	01 d0                	add    %edx,%eax
f012cdbd:	8a 00                	mov    (%eax),%al
f012cdbf:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012cdc2:	74 17                	je     f012cddb <test_krealloc+0xd1b>
			panic(
f012cdc4:	83 ec 04             	sub    $0x4,%esp
f012cdc7:	68 8c c9 13 f0       	push   $0xf013c98c
f012cdcc:	68 79 0f 00 00       	push   $0xf79
f012cdd1:	68 5a b6 13 f0       	push   $0xf013b65a
f012cdd6:	e8 2a 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012cddb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cde1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012cde7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cded:	8a 00                	mov    (%eax),%al
f012cdef:	3c 02                	cmp    $0x2,%al
f012cdf1:	75 16                	jne    f012ce09 <test_krealloc+0xd49>
f012cdf3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cdf9:	89 c2                	mov    %eax,%edx
f012cdfb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ce01:	01 d0                	add    %edx,%eax
f012ce03:	8a 00                	mov    (%eax),%al
f012ce05:	3c 02                	cmp    $0x2,%al
f012ce07:	74 20                	je     f012ce29 <test_krealloc+0xd69>
			panic(
f012ce09:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ce0f:	8a 00                	mov    (%eax),%al
f012ce11:	0f be c0             	movsbl %al,%eax
f012ce14:	50                   	push   %eax
f012ce15:	68 cc c9 13 f0       	push   $0xf013c9cc
f012ce1a:	68 7f 0f 00 00       	push   $0xf7f
f012ce1f:	68 5a b6 13 f0       	push   $0xf013b65a
f012ce24:	e8 dc 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ce29:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ce2f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ce35:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ce3b:	8b 00                	mov    (%eax),%eax
f012ce3d:	83 f8 03             	cmp    $0x3,%eax
f012ce40:	75 1c                	jne    f012ce5e <test_krealloc+0xd9e>
f012ce42:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012ce48:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ce4f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ce55:	01 d0                	add    %edx,%eax
f012ce57:	8b 00                	mov    (%eax),%eax
f012ce59:	83 f8 03             	cmp    $0x3,%eax
f012ce5c:	74 17                	je     f012ce75 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ce5e:	83 ec 04             	sub    $0x4,%esp
f012ce61:	68 18 ca 13 f0       	push   $0xf013ca18
f012ce66:	68 83 0f 00 00       	push   $0xf83
f012ce6b:	68 5a b6 13 f0       	push   $0xf013b65a
f012ce70:	e8 90 33 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ce75:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ce7b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ce81:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ce87:	8b 00                	mov    (%eax),%eax
f012ce89:	83 f8 04             	cmp    $0x4,%eax
f012ce8c:	75 1c                	jne    f012ceaa <test_krealloc+0xdea>
f012ce8e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ce94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ce9b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cea1:	01 d0                	add    %edx,%eax
f012cea3:	8b 00                	mov    (%eax),%eax
f012cea5:	83 f8 04             	cmp    $0x4,%eax
f012cea8:	74 17                	je     f012cec1 <test_krealloc+0xe01>
			panic(
f012ceaa:	83 ec 04             	sub    $0x4,%esp
f012cead:	68 8c c9 13 f0       	push   $0xf013c98c
f012ceb2:	68 88 0f 00 00       	push   $0xf88
f012ceb7:	68 5a b6 13 f0       	push   $0xf013b65a
f012cebc:	e8 44 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012cec1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cec7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012cecd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ced3:	66 8b 00             	mov    (%eax),%ax
f012ced6:	66 83 f8 05          	cmp    $0x5,%ax
f012ceda:	75 1b                	jne    f012cef7 <test_krealloc+0xe37>
f012cedc:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cee2:	01 c0                	add    %eax,%eax
f012cee4:	89 c2                	mov    %eax,%edx
f012cee6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ceec:	01 d0                	add    %edx,%eax
f012ceee:	66 8b 00             	mov    (%eax),%ax
f012cef1:	66 83 f8 05          	cmp    $0x5,%ax
f012cef5:	74 17                	je     f012cf0e <test_krealloc+0xe4e>
			panic(
f012cef7:	83 ec 04             	sub    $0x4,%esp
f012cefa:	68 8c c9 13 f0       	push   $0xf013c98c
f012ceff:	68 8d 0f 00 00       	push   $0xf8d
f012cf04:	68 5a b6 13 f0       	push   $0xf013b65a
f012cf09:	e8 f7 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012cf0e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cf14:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012cf1a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf20:	66 8b 00             	mov    (%eax),%ax
f012cf23:	66 83 f8 06          	cmp    $0x6,%ax
f012cf27:	75 1b                	jne    f012cf44 <test_krealloc+0xe84>
f012cf29:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cf2f:	01 c0                	add    %eax,%eax
f012cf31:	89 c2                	mov    %eax,%edx
f012cf33:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf39:	01 d0                	add    %edx,%eax
f012cf3b:	66 8b 00             	mov    (%eax),%ax
f012cf3e:	66 83 f8 06          	cmp    $0x6,%ax
f012cf42:	74 17                	je     f012cf5b <test_krealloc+0xe9b>
			panic(
f012cf44:	83 ec 04             	sub    $0x4,%esp
f012cf47:	68 8c c9 13 f0       	push   $0xf013c98c
f012cf4c:	68 92 0f 00 00       	push   $0xf92
f012cf51:	68 5a b6 13 f0       	push   $0xf013b65a
f012cf56:	e8 aa 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cf5b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cf61:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012cf67:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf6d:	8a 00                	mov    (%eax),%al
f012cf6f:	3c 07                	cmp    $0x7,%al
f012cf71:	75 1b                	jne    f012cf8e <test_krealloc+0xece>
f012cf73:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cf79:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cf80:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf86:	01 d0                	add    %edx,%eax
f012cf88:	8a 00                	mov    (%eax),%al
f012cf8a:	3c 07                	cmp    $0x7,%al
f012cf8c:	74 17                	je     f012cfa5 <test_krealloc+0xee5>
			panic(
f012cf8e:	83 ec 04             	sub    $0x4,%esp
f012cf91:	68 8c c9 13 f0       	push   $0xf013c98c
f012cf96:	68 97 0f 00 00       	push   $0xf97
f012cf9b:	68 5a b6 13 f0       	push   $0xf013b65a
f012cfa0:	e8 60 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cfa5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cfab:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cfaf:	66 83 f8 07          	cmp    $0x7,%ax
f012cfb3:	75 1f                	jne    f012cfd4 <test_krealloc+0xf14>
f012cfb5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cfbb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cfc2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cfc8:	01 d0                	add    %edx,%eax
f012cfca:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cfce:	66 83 f8 07          	cmp    $0x7,%ax
f012cfd2:	74 17                	je     f012cfeb <test_krealloc+0xf2b>
			panic(
f012cfd4:	83 ec 04             	sub    $0x4,%esp
f012cfd7:	68 8c c9 13 f0       	push   $0xf013c98c
f012cfdc:	68 9a 0f 00 00       	push   $0xf9a
f012cfe1:	68 5a b6 13 f0       	push   $0xf013b65a
f012cfe6:	e8 1a 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012cfeb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cff1:	8b 40 04             	mov    0x4(%eax),%eax
f012cff4:	83 f8 07             	cmp    $0x7,%eax
f012cff7:	75 1d                	jne    f012d016 <test_krealloc+0xf56>
f012cff9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cfff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d006:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d00c:	01 d0                	add    %edx,%eax
f012d00e:	8b 40 04             	mov    0x4(%eax),%eax
f012d011:	83 f8 07             	cmp    $0x7,%eax
f012d014:	74 17                	je     f012d02d <test_krealloc+0xf6d>
			panic(
f012d016:	83 ec 04             	sub    $0x4,%esp
f012d019:	68 8c c9 13 f0       	push   $0xf013c98c
f012d01e:	68 9d 0f 00 00       	push   $0xf9d
f012d023:	68 5a b6 13 f0       	push   $0xf013b65a
f012d028:	e8 d8 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d02d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d033:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d039:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d03f:	8a 00                	mov    (%eax),%al
f012d041:	3c 08                	cmp    $0x8,%al
f012d043:	75 1b                	jne    f012d060 <test_krealloc+0xfa0>
f012d045:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d04b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d052:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d058:	01 d0                	add    %edx,%eax
f012d05a:	8a 00                	mov    (%eax),%al
f012d05c:	3c 08                	cmp    $0x8,%al
f012d05e:	74 17                	je     f012d077 <test_krealloc+0xfb7>
			panic(
f012d060:	83 ec 04             	sub    $0x4,%esp
f012d063:	68 8c c9 13 f0       	push   $0xf013c98c
f012d068:	68 a2 0f 00 00       	push   $0xfa2
f012d06d:	68 5a b6 13 f0       	push   $0xf013b65a
f012d072:	e8 8e 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d077:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d07d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d081:	66 83 f8 08          	cmp    $0x8,%ax
f012d085:	75 1f                	jne    f012d0a6 <test_krealloc+0xfe6>
f012d087:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d08d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d094:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d09a:	01 d0                	add    %edx,%eax
f012d09c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d0a0:	66 83 f8 08          	cmp    $0x8,%ax
f012d0a4:	74 17                	je     f012d0bd <test_krealloc+0xffd>
			panic(
f012d0a6:	83 ec 04             	sub    $0x4,%esp
f012d0a9:	68 8c c9 13 f0       	push   $0xf013c98c
f012d0ae:	68 a5 0f 00 00       	push   $0xfa5
f012d0b3:	68 5a b6 13 f0       	push   $0xf013b65a
f012d0b8:	e8 48 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d0bd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0c3:	8b 40 04             	mov    0x4(%eax),%eax
f012d0c6:	83 f8 08             	cmp    $0x8,%eax
f012d0c9:	75 1d                	jne    f012d0e8 <test_krealloc+0x1028>
f012d0cb:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d0d1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0d8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0de:	01 d0                	add    %edx,%eax
f012d0e0:	8b 40 04             	mov    0x4(%eax),%eax
f012d0e3:	83 f8 08             	cmp    $0x8,%eax
f012d0e6:	74 17                	je     f012d0ff <test_krealloc+0x103f>
			panic(
f012d0e8:	83 ec 04             	sub    $0x4,%esp
f012d0eb:	68 8c c9 13 f0       	push   $0xf013c98c
f012d0f0:	68 a8 0f 00 00       	push   $0xfa8
f012d0f5:	68 5a b6 13 f0       	push   $0xf013b65a
f012d0fa:	e8 06 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d0ff:	e8 9f fd fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d104:	89 c2                	mov    %eax,%edx
f012d106:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d109:	39 c2                	cmp    %eax,%edx
f012d10b:	74 17                	je     f012d124 <test_krealloc+0x1064>
			panic(
f012d10d:	83 ec 04             	sub    $0x4,%esp
f012d110:	68 4c ca 13 f0       	push   $0xf013ca4c
f012d115:	68 ac 0f 00 00       	push   $0xfac
f012d11a:	68 5a b6 13 f0       	push   $0xf013b65a
f012d11f:	e8 e1 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d124:	83 ec 0c             	sub    $0xc,%esp
f012d127:	68 98 ca 13 f0       	push   $0xf013ca98
f012d12c:	e8 dd 3b fd ff       	call   f0100d0e <cprintf>
f012d131:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d134:	e8 6a fd fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d139:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d13c:	e8 87 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d141:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d147:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d14d:	83 ec 08             	sub    $0x8,%esp
f012d150:	6a 00                	push   $0x0
f012d152:	50                   	push   %eax
f012d153:	e8 f4 ac fd ff       	call   f0107e4c <krealloc>
f012d158:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d15b:	e8 68 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d160:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d166:	74 17                	je     f012d17f <test_krealloc+0x10bf>
			panic(
f012d168:	83 ec 04             	sub    $0x4,%esp
f012d16b:	68 bc ca 13 f0       	push   $0xf013cabc
f012d170:	68 b9 0f 00 00       	push   $0xfb9
f012d175:	68 5a b6 13 f0       	push   $0xf013b65a
f012d17a:	e8 86 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d17f:	e8 1f fd fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d184:	89 c2                	mov    %eax,%edx
f012d186:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d189:	29 c2                	sub    %eax,%edx
f012d18b:	89 d0                	mov    %edx,%eax
f012d18d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d192:	74 17                	je     f012d1ab <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d194:	83 ec 04             	sub    $0x4,%esp
f012d197:	68 30 cb 13 f0       	push   $0xf013cb30
f012d19c:	68 bb 0f 00 00       	push   $0xfbb
f012d1a1:	68 5a b6 13 f0       	push   $0xf013b65a
f012d1a6:	e8 5a 30 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d1ab:	e8 f3 fc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d1b0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d1b3:	e8 10 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d1b8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d1be:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d1c4:	83 ec 08             	sub    $0x8,%esp
f012d1c7:	6a 00                	push   $0x0
f012d1c9:	50                   	push   %eax
f012d1ca:	e8 7d ac fd ff       	call   f0107e4c <krealloc>
f012d1cf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d1d2:	e8 f1 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d1d7:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d1dd:	74 17                	je     f012d1f6 <test_krealloc+0x1136>
			panic(
f012d1df:	83 ec 04             	sub    $0x4,%esp
f012d1e2:	68 bc ca 13 f0       	push   $0xf013cabc
f012d1e7:	68 c4 0f 00 00       	push   $0xfc4
f012d1ec:	68 5a b6 13 f0       	push   $0xf013b65a
f012d1f1:	e8 0f 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d1f6:	e8 a8 fc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d1fb:	89 c2                	mov    %eax,%edx
f012d1fd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d200:	29 c2                	sub    %eax,%edx
f012d202:	89 d0                	mov    %edx,%eax
f012d204:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d209:	74 17                	je     f012d222 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d20b:	83 ec 04             	sub    $0x4,%esp
f012d20e:	68 30 cb 13 f0       	push   $0xf013cb30
f012d213:	68 c6 0f 00 00       	push   $0xfc6
f012d218:	68 5a b6 13 f0       	push   $0xf013b65a
f012d21d:	e8 e3 2f fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d222:	e8 7c fc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d227:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d22a:	e8 99 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d22f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d235:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d23b:	83 ec 08             	sub    $0x8,%esp
f012d23e:	6a 00                	push   $0x0
f012d240:	50                   	push   %eax
f012d241:	e8 06 ac fd ff       	call   f0107e4c <krealloc>
f012d246:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d249:	e8 7a 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d24e:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d254:	74 17                	je     f012d26d <test_krealloc+0x11ad>
			panic(
f012d256:	83 ec 04             	sub    $0x4,%esp
f012d259:	68 74 b6 13 f0       	push   $0xf013b674
f012d25e:	68 ce 0f 00 00       	push   $0xfce
f012d263:	68 5a b6 13 f0       	push   $0xf013b65a
f012d268:	e8 98 2f fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d26d:	e8 31 fc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d272:	89 c2                	mov    %eax,%edx
f012d274:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d277:	29 c2                	sub    %eax,%edx
f012d279:	89 d0                	mov    %edx,%eax
f012d27b:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d280:	74 17                	je     f012d299 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d282:	83 ec 04             	sub    $0x4,%esp
f012d285:	68 30 cb 13 f0       	push   $0xf013cb30
f012d28a:	68 d0 0f 00 00       	push   $0xfd0
f012d28f:	68 5a b6 13 f0       	push   $0xf013b65a
f012d294:	e8 6c 2f fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d299:	e8 05 fc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d29e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d2a1:	e8 22 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d2a6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d2ac:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d2b2:	83 ec 08             	sub    $0x8,%esp
f012d2b5:	6a 00                	push   $0x0
f012d2b7:	50                   	push   %eax
f012d2b8:	e8 8f ab fd ff       	call   f0107e4c <krealloc>
f012d2bd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d2c0:	e8 03 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d2c5:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d2cb:	74 17                	je     f012d2e4 <test_krealloc+0x1224>
			panic(
f012d2cd:	83 ec 04             	sub    $0x4,%esp
f012d2d0:	68 bc ca 13 f0       	push   $0xf013cabc
f012d2d5:	68 d8 0f 00 00       	push   $0xfd8
f012d2da:	68 5a b6 13 f0       	push   $0xf013b65a
f012d2df:	e8 21 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d2e4:	e8 ba fb fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d2e9:	89 c2                	mov    %eax,%edx
f012d2eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d2ee:	29 c2                	sub    %eax,%edx
f012d2f0:	89 d0                	mov    %edx,%eax
f012d2f2:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d2f7:	74 17                	je     f012d310 <test_krealloc+0x1250>
			panic(
f012d2f9:	83 ec 04             	sub    $0x4,%esp
f012d2fc:	68 64 cb 13 f0       	push   $0xf013cb64
f012d301:	68 db 0f 00 00       	push   $0xfdb
f012d306:	68 5a b6 13 f0       	push   $0xf013b65a
f012d30b:	e8 f5 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d310:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d317:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d31e:	eb 48                	jmp    f012d368 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d320:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d323:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f012d328:	83 ec 04             	sub    $0x4,%esp
f012d32b:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d331:	51                   	push   %ecx
f012d332:	52                   	push   %edx
f012d333:	50                   	push   %eax
f012d334:	e8 78 97 fd ff       	call   f0106ab1 <get_page_table>
f012d339:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d33c:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d342:	85 c0                	test   %eax,%eax
f012d344:	75 17                	jne    f012d35d <test_krealloc+0x129d>
					panic(
f012d346:	83 ec 04             	sub    $0x4,%esp
f012d349:	68 5c bf 13 f0       	push   $0xf013bf5c
f012d34e:	68 e7 0f 00 00       	push   $0xfe7
f012d353:	68 5a b6 13 f0       	push   $0xf013b65a
f012d358:	e8 a8 2e fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d35d:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d364:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d368:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d36c:	78 b2                	js     f012d320 <test_krealloc+0x1260>
f012d36e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d372:	7f 09                	jg     f012d37d <test_krealloc+0x12bd>
f012d374:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d37b:	76 a3                	jbe    f012d320 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d37d:	83 ec 0c             	sub    $0xc,%esp
f012d380:	68 a3 cb 13 f0       	push   $0xf013cba3
f012d385:	e8 84 39 fd ff       	call   f0100d0e <cprintf>
f012d38a:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d38d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d393:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d399:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d3a0:	eb 21                	jmp    f012d3c3 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d3a2:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d3a8:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d3ab:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d3b1:	01 c8                	add    %ecx,%eax
f012d3b3:	8a 00                	mov    (%eax),%al
f012d3b5:	0f be c0             	movsbl %al,%eax
f012d3b8:	01 d0                	add    %edx,%eax
f012d3ba:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d3c0:	ff 45 dc             	incl   -0x24(%ebp)
f012d3c3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d3c9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d3cc:	7d d4                	jge    f012d3a2 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d3ce:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d3d4:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d3da:	42                   	inc    %edx
f012d3db:	01 d2                	add    %edx,%edx
f012d3dd:	39 d0                	cmp    %edx,%eax
f012d3df:	74 17                	je     f012d3f8 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d3e1:	83 ec 04             	sub    $0x4,%esp
f012d3e4:	68 ac cb 13 f0       	push   $0xf013cbac
f012d3e9:	68 f9 0f 00 00       	push   $0xff9
f012d3ee:	68 5a b6 13 f0       	push   $0xf013b65a
f012d3f3:	e8 0d 2e fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d3f8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d3fe:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d404:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d40b:	eb 25                	jmp    f012d432 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d40d:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d413:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d416:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d41d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d423:	01 c8                	add    %ecx,%eax
f012d425:	8b 00                	mov    (%eax),%eax
f012d427:	01 d0                	add    %edx,%eax
f012d429:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d42f:	ff 45 dc             	incl   -0x24(%ebp)
f012d432:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d438:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d43b:	7d d0                	jge    f012d40d <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d43d:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d443:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d449:	42                   	inc    %edx
f012d44a:	c1 e2 02             	shl    $0x2,%edx
f012d44d:	39 d0                	cmp    %edx,%eax
f012d44f:	74 17                	je     f012d468 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d451:	83 ec 04             	sub    $0x4,%esp
f012d454:	68 ac cb 13 f0       	push   $0xf013cbac
f012d459:	68 03 10 00 00       	push   $0x1003
f012d45e:	68 5a b6 13 f0       	push   $0xf013b65a
f012d463:	e8 9d 2d fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d468:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d46e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d474:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d47b:	eb 24                	jmp    f012d4a1 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d47d:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d483:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d486:	01 c0                	add    %eax,%eax
f012d488:	89 c1                	mov    %eax,%ecx
f012d48a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d490:	01 c8                	add    %ecx,%eax
f012d492:	66 8b 00             	mov    (%eax),%ax
f012d495:	98                   	cwtl   
f012d496:	01 d0                	add    %edx,%eax
f012d498:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d49e:	ff 45 dc             	incl   -0x24(%ebp)
f012d4a1:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d4a7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d4aa:	7d d1                	jge    f012d47d <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d4ac:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d4b2:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d4b8:	8d 48 01             	lea    0x1(%eax),%ecx
f012d4bb:	89 c8                	mov    %ecx,%eax
f012d4bd:	c1 e0 02             	shl    $0x2,%eax
f012d4c0:	01 c8                	add    %ecx,%eax
f012d4c2:	39 c2                	cmp    %eax,%edx
f012d4c4:	74 17                	je     f012d4dd <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d4c6:	83 ec 04             	sub    $0x4,%esp
f012d4c9:	68 ac cb 13 f0       	push   $0xf013cbac
f012d4ce:	68 0d 10 00 00       	push   $0x100d
f012d4d3:	68 5a b6 13 f0       	push   $0xf013b65a
f012d4d8:	e8 28 2d fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d4dd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d4e3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d4e9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d4f0:	eb 70                	jmp    f012d562 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d4f2:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d4f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d4fb:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d502:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d508:	01 c8                	add    %ecx,%eax
f012d50a:	8a 00                	mov    (%eax),%al
f012d50c:	0f be c0             	movsbl %al,%eax
f012d50f:	01 d0                	add    %edx,%eax
f012d511:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d517:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d51d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d520:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d527:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d52d:	01 c8                	add    %ecx,%eax
f012d52f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d533:	98                   	cwtl   
f012d534:	01 d0                	add    %edx,%eax
f012d536:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d53c:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d542:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d545:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d54c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d552:	01 c8                	add    %ecx,%eax
f012d554:	8b 40 04             	mov    0x4(%eax),%eax
f012d557:	01 d0                	add    %edx,%eax
f012d559:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d55f:	ff 45 dc             	incl   -0x24(%ebp)
f012d562:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d568:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d56b:	7d 85                	jge    f012d4f2 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d56d:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d573:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d579:	8d 50 01             	lea    0x1(%eax),%edx
f012d57c:	89 d0                	mov    %edx,%eax
f012d57e:	01 c0                	add    %eax,%eax
f012d580:	01 d0                	add    %edx,%eax
f012d582:	01 c0                	add    %eax,%eax
f012d584:	01 d0                	add    %edx,%eax
f012d586:	39 c1                	cmp    %eax,%ecx
f012d588:	75 3a                	jne    f012d5c4 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d58a:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d590:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d596:	8d 50 01             	lea    0x1(%eax),%edx
f012d599:	89 d0                	mov    %edx,%eax
f012d59b:	01 c0                	add    %eax,%eax
f012d59d:	01 d0                	add    %edx,%eax
f012d59f:	01 c0                	add    %eax,%eax
f012d5a1:	01 d0                	add    %edx,%eax
f012d5a3:	39 c1                	cmp    %eax,%ecx
f012d5a5:	75 1d                	jne    f012d5c4 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d5a7:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d5ad:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d5b3:	8d 50 01             	lea    0x1(%eax),%edx
f012d5b6:	89 d0                	mov    %edx,%eax
f012d5b8:	01 c0                	add    %eax,%eax
f012d5ba:	01 d0                	add    %edx,%eax
f012d5bc:	01 c0                	add    %eax,%eax
f012d5be:	01 d0                	add    %edx,%eax
f012d5c0:	39 c1                	cmp    %eax,%ecx
f012d5c2:	74 17                	je     f012d5db <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d5c4:	83 ec 04             	sub    $0x4,%esp
f012d5c7:	68 ac cb 13 f0       	push   $0xf013cbac
f012d5cc:	68 1b 10 00 00       	push   $0x101b
f012d5d1:	68 5a b6 13 f0       	push   $0xf013b65a
f012d5d6:	e8 2a 2c fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d5db:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d5e2:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d5e5:	e8 b9 f8 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d5ea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d5ed:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d5f3:	83 ec 08             	sub    $0x8,%esp
f012d5f6:	68 00 3c 00 00       	push   $0x3c00
f012d5fb:	50                   	push   %eax
f012d5fc:	e8 4b a8 fd ff       	call   f0107e4c <krealloc>
f012d601:	83 c4 10             	add    $0x10,%esp
f012d604:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d60a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d610:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d615:	77 17                	ja     f012d62e <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d617:	83 ec 04             	sub    $0x4,%esp
f012d61a:	68 00 c9 13 f0       	push   $0xf013c900
f012d61f:	68 27 10 00 00       	push   $0x1027
f012d624:	68 5a b6 13 f0       	push   $0xf013b65a
f012d629:	e8 d7 2b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d62e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d634:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d63a:	74 17                	je     f012d653 <test_krealloc+0x1593>
			panic(
f012d63c:	83 ec 04             	sub    $0x4,%esp
f012d63f:	68 e4 cb 13 f0       	push   $0xf013cbe4
f012d644:	68 2a 10 00 00       	push   $0x102a
f012d649:	68 5a b6 13 f0       	push   $0xf013b65a
f012d64e:	e8 b2 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d653:	e8 4b f8 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d658:	89 c2                	mov    %eax,%edx
f012d65a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d65d:	39 c2                	cmp    %eax,%edx
f012d65f:	74 17                	je     f012d678 <test_krealloc+0x15b8>
			panic(
f012d661:	83 ec 04             	sub    $0x4,%esp
f012d664:	68 50 cc 13 f0       	push   $0xf013cc50
f012d669:	68 2d 10 00 00       	push   $0x102d
f012d66e:	68 5a b6 13 f0       	push   $0xf013b65a
f012d673:	e8 8d 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d678:	e8 26 f8 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d67d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d680:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d686:	83 ec 08             	sub    $0x8,%esp
f012d689:	68 00 fc 0f 00       	push   $0xffc00
f012d68e:	50                   	push   %eax
f012d68f:	e8 b8 a7 fd ff       	call   f0107e4c <krealloc>
f012d694:	83 c4 10             	add    $0x10,%esp
f012d697:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d69d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d6a3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d6a8:	77 17                	ja     f012d6c1 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d6aa:	83 ec 04             	sub    $0x4,%esp
f012d6ad:	68 00 c9 13 f0       	push   $0xf013c900
f012d6b2:	68 33 10 00 00       	push   $0x1033
f012d6b7:	68 5a b6 13 f0       	push   $0xf013b65a
f012d6bc:	e8 44 2b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d6c1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d6c7:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d6cd:	74 17                	je     f012d6e6 <test_krealloc+0x1626>
			panic(
f012d6cf:	83 ec 04             	sub    $0x4,%esp
f012d6d2:	68 e4 cb 13 f0       	push   $0xf013cbe4
f012d6d7:	68 36 10 00 00       	push   $0x1036
f012d6dc:	68 5a b6 13 f0       	push   $0xf013b65a
f012d6e1:	e8 1f 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d6e6:	e8 b8 f7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d6eb:	89 c2                	mov    %eax,%edx
f012d6ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d6f0:	39 c2                	cmp    %eax,%edx
f012d6f2:	74 17                	je     f012d70b <test_krealloc+0x164b>
			panic(
f012d6f4:	83 ec 04             	sub    $0x4,%esp
f012d6f7:	68 50 cc 13 f0       	push   $0xf013cc50
f012d6fc:	68 39 10 00 00       	push   $0x1039
f012d701:	68 5a b6 13 f0       	push   $0xf013b65a
f012d706:	e8 fa 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d70b:	e8 93 f7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d710:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d713:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d719:	83 ec 08             	sub    $0x8,%esp
f012d71c:	68 00 fc 0f 00       	push   $0xffc00
f012d721:	50                   	push   %eax
f012d722:	e8 25 a7 fd ff       	call   f0107e4c <krealloc>
f012d727:	83 c4 10             	add    $0x10,%esp
f012d72a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d730:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d736:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d73b:	77 17                	ja     f012d754 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d73d:	83 ec 04             	sub    $0x4,%esp
f012d740:	68 00 c9 13 f0       	push   $0xf013c900
f012d745:	68 3f 10 00 00       	push   $0x103f
f012d74a:	68 5a b6 13 f0       	push   $0xf013b65a
f012d74f:	e8 b1 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d754:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d75a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d760:	74 17                	je     f012d779 <test_krealloc+0x16b9>
			panic(
f012d762:	83 ec 04             	sub    $0x4,%esp
f012d765:	68 e4 cb 13 f0       	push   $0xf013cbe4
f012d76a:	68 42 10 00 00       	push   $0x1042
f012d76f:	68 5a b6 13 f0       	push   $0xf013b65a
f012d774:	e8 8c 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d779:	e8 25 f7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d77e:	89 c2                	mov    %eax,%edx
f012d780:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d783:	39 c2                	cmp    %eax,%edx
f012d785:	74 17                	je     f012d79e <test_krealloc+0x16de>
			panic(
f012d787:	83 ec 04             	sub    $0x4,%esp
f012d78a:	68 50 cc 13 f0       	push   $0xf013cc50
f012d78f:	68 45 10 00 00       	push   $0x1045
f012d794:	68 5a b6 13 f0       	push   $0xf013b65a
f012d799:	e8 67 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d79e:	e8 00 f7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d7a3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d7a6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d7ac:	83 ec 08             	sub    $0x8,%esp
f012d7af:	68 00 fc 0f 00       	push   $0xffc00
f012d7b4:	50                   	push   %eax
f012d7b5:	e8 92 a6 fd ff       	call   f0107e4c <krealloc>
f012d7ba:	83 c4 10             	add    $0x10,%esp
f012d7bd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d7c3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d7c9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d7ce:	77 17                	ja     f012d7e7 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d7d0:	83 ec 04             	sub    $0x4,%esp
f012d7d3:	68 00 c9 13 f0       	push   $0xf013c900
f012d7d8:	68 4d 10 00 00       	push   $0x104d
f012d7dd:	68 5a b6 13 f0       	push   $0xf013b65a
f012d7e2:	e8 1e 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d7e7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d7ed:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d7f3:	74 17                	je     f012d80c <test_krealloc+0x174c>
			panic(
f012d7f5:	83 ec 04             	sub    $0x4,%esp
f012d7f8:	68 94 cc 13 f0       	push   $0xf013cc94
f012d7fd:	68 50 10 00 00       	push   $0x1050
f012d802:	68 5a b6 13 f0       	push   $0xf013b65a
f012d807:	e8 f9 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d80c:	e8 92 f6 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d811:	89 c2                	mov    %eax,%edx
f012d813:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d816:	39 c2                	cmp    %eax,%edx
f012d818:	74 17                	je     f012d831 <test_krealloc+0x1771>
			panic(
f012d81a:	83 ec 04             	sub    $0x4,%esp
f012d81d:	68 50 cc 13 f0       	push   $0xf013cc50
f012d822:	68 53 10 00 00       	push   $0x1053
f012d827:	68 5a b6 13 f0       	push   $0xf013b65a
f012d82c:	e8 d4 29 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d831:	83 ec 0c             	sub    $0xc,%esp
f012d834:	68 73 be 13 f0       	push   $0xf013be73
f012d839:	e8 d0 34 fd ff       	call   f0100d0e <cprintf>
f012d83e:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d841:	e8 5d f6 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d846:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d849:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d84f:	83 ec 08             	sub    $0x8,%esp
f012d852:	68 00 18 10 00       	push   $0x101800
f012d857:	50                   	push   %eax
f012d858:	e8 ef a5 fd ff       	call   f0107e4c <krealloc>
f012d85d:	83 c4 10             	add    $0x10,%esp
f012d860:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d863:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d866:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d86b:	77 17                	ja     f012d884 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d86d:	83 ec 04             	sub    $0x4,%esp
f012d870:	68 00 c9 13 f0       	push   $0xf013c900
f012d875:	68 5c 10 00 00       	push   $0x105c
f012d87a:	68 5a b6 13 f0       	push   $0xf013b65a
f012d87f:	e8 81 29 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d884:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d88a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d88d:	74 17                	je     f012d8a6 <test_krealloc+0x17e6>
			panic(
f012d88f:	83 ec 04             	sub    $0x4,%esp
f012d892:	68 f4 cc 13 f0       	push   $0xf013ccf4
f012d897:	68 5f 10 00 00       	push   $0x105f
f012d89c:	68 5a b6 13 f0       	push   $0xf013b65a
f012d8a1:	e8 5f 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d8a6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d8a9:	e8 f5 f5 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d8ae:	29 c3                	sub    %eax,%ebx
f012d8b0:	89 d8                	mov    %ebx,%eax
f012d8b2:	83 f8 02             	cmp    $0x2,%eax
f012d8b5:	74 17                	je     f012d8ce <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d8b7:	83 ec 04             	sub    $0x4,%esp
f012d8ba:	68 70 cd 13 f0       	push   $0xf013cd70
f012d8bf:	68 61 10 00 00       	push   $0x1061
f012d8c4:	68 5a b6 13 f0       	push   $0xf013b65a
f012d8c9:	e8 37 29 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d8ce:	e8 d0 f5 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d8d3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d8d6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d8dc:	83 ec 08             	sub    $0x8,%esp
f012d8df:	68 00 fc 3f 00       	push   $0x3ffc00
f012d8e4:	50                   	push   %eax
f012d8e5:	e8 62 a5 fd ff       	call   f0107e4c <krealloc>
f012d8ea:	83 c4 10             	add    $0x10,%esp
f012d8ed:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d8f0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d8f3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d8f8:	77 17                	ja     f012d911 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d8fa:	83 ec 04             	sub    $0x4,%esp
f012d8fd:	68 00 c9 13 f0       	push   $0xf013c900
f012d902:	68 67 10 00 00       	push   $0x1067
f012d907:	68 5a b6 13 f0       	push   $0xf013b65a
f012d90c:	e8 f4 28 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d911:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d917:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d91a:	74 17                	je     f012d933 <test_krealloc+0x1873>
			panic(
f012d91c:	83 ec 04             	sub    $0x4,%esp
f012d91f:	68 f4 cc 13 f0       	push   $0xf013ccf4
f012d924:	68 6a 10 00 00       	push   $0x106a
f012d929:	68 5a b6 13 f0       	push   $0xf013b65a
f012d92e:	e8 d2 28 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d933:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d936:	e8 68 f5 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d93b:	29 c3                	sub    %eax,%ebx
f012d93d:	89 d8                	mov    %ebx,%eax
f012d93f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d944:	74 17                	je     f012d95d <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d946:	83 ec 04             	sub    $0x4,%esp
f012d949:	68 70 cd 13 f0       	push   $0xf013cd70
f012d94e:	68 6d 10 00 00       	push   $0x106d
f012d953:	68 5a b6 13 f0       	push   $0xf013b65a
f012d958:	e8 a8 28 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012d95d:	83 ec 0c             	sub    $0xc,%esp
f012d960:	68 b8 be 13 f0       	push   $0xf013beb8
f012d965:	e8 a4 33 fd ff       	call   f0100d0e <cprintf>
f012d96a:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d96d:	e8 31 f5 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012d972:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d975:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d97b:	83 ec 08             	sub    $0x8,%esp
f012d97e:	68 00 fc 9f 00       	push   $0x9ffc00
f012d983:	50                   	push   %eax
f012d984:	e8 c3 a4 fd ff       	call   f0107e4c <krealloc>
f012d989:	83 c4 10             	add    $0x10,%esp
f012d98c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d98f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d992:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d997:	77 17                	ja     f012d9b0 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d999:	83 ec 04             	sub    $0x4,%esp
f012d99c:	68 00 c9 13 f0       	push   $0xf013c900
f012d9a1:	68 78 10 00 00       	push   $0x1078
f012d9a6:	68 5a b6 13 f0       	push   $0xf013b65a
f012d9ab:	e8 55 28 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d9b0:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d9b7:	10 00 00 
f012d9ba:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d9c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d9c5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d9cb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d9d1:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9d6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d9dc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d9e2:	29 d0                	sub    %edx,%eax
f012d9e4:	89 c1                	mov    %eax,%ecx
f012d9e6:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d9ed:	10 00 00 
f012d9f0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012d9f5:	0f b6 d0             	movzbl %al,%edx
f012d9f8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d9fe:	01 d0                	add    %edx,%eax
f012da00:	48                   	dec    %eax
f012da01:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012da07:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012da0d:	ba 00 00 00 00       	mov    $0x0,%edx
f012da12:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012da18:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012da1e:	29 d0                	sub    %edx,%eax
f012da20:	01 c1                	add    %eax,%ecx
f012da22:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012da29:	10 00 00 
f012da2c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012da31:	0f b6 c0             	movzbl %al,%eax
f012da34:	c1 e0 04             	shl    $0x4,%eax
f012da37:	89 c2                	mov    %eax,%edx
f012da39:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012da3f:	01 d0                	add    %edx,%eax
f012da41:	48                   	dec    %eax
f012da42:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012da48:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012da4e:	ba 00 00 00 00       	mov    $0x0,%edx
f012da53:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012da59:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012da5f:	29 d0                	sub    %edx,%eax
f012da61:	01 c8                	add    %ecx,%eax
f012da63:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012da69:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012da6c:	39 c2                	cmp    %eax,%edx
f012da6e:	74 18                	je     f012da88 <test_krealloc+0x19c8>
			panic(
f012da70:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012da73:	50                   	push   %eax
f012da74:	68 a4 cd 13 f0       	push   $0xf013cda4
f012da79:	68 7c 10 00 00       	push   $0x107c
f012da7e:	68 5a b6 13 f0       	push   $0xf013b65a
f012da83:	e8 7d 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012da88:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012da8e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012da91:	75 17                	jne    f012daaa <test_krealloc+0x19ea>
			panic(
f012da93:	83 ec 04             	sub    $0x4,%esp
f012da96:	68 e8 cd 13 f0       	push   $0xf013cde8
f012da9b:	68 7f 10 00 00       	push   $0x107f
f012daa0:	68 5a b6 13 f0       	push   $0xf013b65a
f012daa5:	e8 5b 27 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012daaa:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012daad:	e8 f1 f3 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012dab2:	29 c3                	sub    %eax,%ebx
f012dab4:	89 d8                	mov    %ebx,%eax
f012dab6:	3d 00 06 00 00       	cmp    $0x600,%eax
f012dabb:	74 17                	je     f012dad4 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012dabd:	83 ec 04             	sub    $0x4,%esp
f012dac0:	68 70 cd 13 f0       	push   $0xf013cd70
f012dac5:	68 82 10 00 00       	push   $0x1082
f012daca:	68 5a b6 13 f0       	push   $0xf013b65a
f012dacf:	e8 31 27 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012dad4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dad7:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012dadd:	e8 c1 f3 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012dae2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012dae5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012daeb:	83 ec 08             	sub    $0x8,%esp
f012daee:	68 00 fc 5f 00       	push   $0x5ffc00
f012daf3:	50                   	push   %eax
f012daf4:	e8 53 a3 fd ff       	call   f0107e4c <krealloc>
f012daf9:	83 c4 10             	add    $0x10,%esp
f012dafc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012daff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db02:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db07:	77 17                	ja     f012db20 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db09:	83 ec 04             	sub    $0x4,%esp
f012db0c:	68 00 c9 13 f0       	push   $0xf013c900
f012db11:	68 8b 10 00 00       	push   $0x108b
f012db16:	68 5a b6 13 f0       	push   $0xf013b65a
f012db1b:	e8 e5 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012db20:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012db26:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012db29:	74 17                	je     f012db42 <test_krealloc+0x1a82>
			panic(
f012db2b:	83 ec 04             	sub    $0x4,%esp
f012db2e:	68 f4 cc 13 f0       	push   $0xf013ccf4
f012db33:	68 8e 10 00 00       	push   $0x108e
f012db38:	68 5a b6 13 f0       	push   $0xf013b65a
f012db3d:	e8 c3 26 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012db42:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012db45:	e8 59 f3 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012db4a:	29 c3                	sub    %eax,%ebx
f012db4c:	89 d8                	mov    %ebx,%eax
f012db4e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012db53:	74 17                	je     f012db6c <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012db55:	83 ec 04             	sub    $0x4,%esp
f012db58:	68 70 cd 13 f0       	push   $0xf013cd70
f012db5d:	68 91 10 00 00       	push   $0x1091
f012db62:	68 5a b6 13 f0       	push   $0xf013b65a
f012db67:	e8 99 26 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012db6c:	e8 32 f3 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012db71:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012db74:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012db7a:	83 ec 08             	sub    $0x8,%esp
f012db7d:	68 00 fc 3f 01       	push   $0x13ffc00
f012db82:	50                   	push   %eax
f012db83:	e8 c4 a2 fd ff       	call   f0107e4c <krealloc>
f012db88:	83 c4 10             	add    $0x10,%esp
f012db8b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012db8e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db91:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db96:	77 17                	ja     f012dbaf <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db98:	83 ec 04             	sub    $0x4,%esp
f012db9b:	68 00 c9 13 f0       	push   $0xf013c900
f012dba0:	68 98 10 00 00       	push   $0x1098
f012dba5:	68 5a b6 13 f0       	push   $0xf013b65a
f012dbaa:	e8 56 26 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012dbaf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dbb5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dbb8:	75 17                	jne    f012dbd1 <test_krealloc+0x1b11>
			panic(
f012dbba:	83 ec 04             	sub    $0x4,%esp
f012dbbd:	68 e8 cd 13 f0       	push   $0xf013cde8
f012dbc2:	68 9b 10 00 00       	push   $0x109b
f012dbc7:	68 5a b6 13 f0       	push   $0xf013b65a
f012dbcc:	e8 34 26 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012dbd1:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012dbd8:	10 00 00 
f012dbdb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012dbe1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dbe6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012dbec:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dbf2:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbf7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012dbfd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dc03:	29 d0                	sub    %edx,%eax
f012dc05:	89 c1                	mov    %eax,%ecx
f012dc07:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012dc0e:	10 00 00 
f012dc11:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012dc16:	0f b6 d0             	movzbl %al,%edx
f012dc19:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012dc1f:	01 d0                	add    %edx,%eax
f012dc21:	48                   	dec    %eax
f012dc22:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012dc28:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dc2e:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc33:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012dc39:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dc3f:	29 d0                	sub    %edx,%eax
f012dc41:	01 c1                	add    %eax,%ecx
f012dc43:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012dc4a:	10 00 00 
f012dc4d:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012dc52:	0f b6 c0             	movzbl %al,%eax
f012dc55:	c1 e0 04             	shl    $0x4,%eax
f012dc58:	89 c2                	mov    %eax,%edx
f012dc5a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012dc60:	01 d0                	add    %edx,%eax
f012dc62:	48                   	dec    %eax
f012dc63:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012dc69:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dc6f:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc74:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012dc7a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dc80:	29 d0                	sub    %edx,%eax
f012dc82:	01 c8                	add    %ecx,%eax
f012dc84:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012dc8a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dc8d:	39 c2                	cmp    %eax,%edx
f012dc8f:	74 17                	je     f012dca8 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012dc91:	83 ec 04             	sub    $0x4,%esp
f012dc94:	68 6c ce 13 f0       	push   $0xf013ce6c
f012dc99:	68 9d 10 00 00       	push   $0x109d
f012dc9e:	68 5a b6 13 f0       	push   $0xf013b65a
f012dca3:	e8 5d 25 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012dca8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dcab:	e8 f3 f1 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012dcb0:	29 c3                	sub    %eax,%ebx
f012dcb2:	89 d8                	mov    %ebx,%eax
f012dcb4:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012dcb9:	74 17                	je     f012dcd2 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012dcbb:	83 ec 04             	sub    $0x4,%esp
f012dcbe:	68 70 cd 13 f0       	push   $0xf013cd70
f012dcc3:	68 a0 10 00 00       	push   $0x10a0
f012dcc8:	68 5a b6 13 f0       	push   $0xf013b65a
f012dccd:	e8 33 25 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012dcd2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dcd5:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012dcdb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dce1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012dce7:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dcee:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dcf1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dcf8:	eb 21                	jmp    f012dd1b <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012dcfa:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dd00:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012dd03:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dd09:	01 c8                	add    %ecx,%eax
f012dd0b:	8a 00                	mov    (%eax),%al
f012dd0d:	0f be c0             	movsbl %al,%eax
f012dd10:	01 d0                	add    %edx,%eax
f012dd12:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dd18:	ff 45 d8             	incl   -0x28(%ebp)
f012dd1b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd21:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dd24:	7d d4                	jge    f012dcfa <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012dd26:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012dd2c:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012dd32:	42                   	inc    %edx
f012dd33:	01 d2                	add    %edx,%edx
f012dd35:	39 d0                	cmp    %edx,%eax
f012dd37:	74 17                	je     f012dd50 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012dd39:	83 ec 04             	sub    $0x4,%esp
f012dd3c:	68 a0 ce 13 f0       	push   $0xf013cea0
f012dd41:	68 ae 10 00 00       	push   $0x10ae
f012dd46:	68 5a b6 13 f0       	push   $0xf013b65a
f012dd4b:	e8 b5 24 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012dd50:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dd56:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012dd5c:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dd63:	00 00 00 
		sums[1] = 0;
f012dd66:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012dd6d:	00 00 00 
		sums[2] = 0;
f012dd70:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012dd77:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012dd7a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dd81:	eb 70                	jmp    f012ddf3 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012dd83:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dd89:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dd8c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012dd93:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd99:	01 c8                	add    %ecx,%eax
f012dd9b:	8a 00                	mov    (%eax),%al
f012dd9d:	0f be c0             	movsbl %al,%eax
f012dda0:	01 d0                	add    %edx,%eax
f012dda2:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012dda8:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012ddae:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ddb1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ddb8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddbe:	01 c8                	add    %ecx,%eax
f012ddc0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ddc4:	98                   	cwtl   
f012ddc5:	01 d0                	add    %edx,%eax
f012ddc7:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012ddcd:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012ddd3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ddd6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012dddd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dde3:	01 c8                	add    %ecx,%eax
f012dde5:	8b 40 04             	mov    0x4(%eax),%eax
f012dde8:	01 d0                	add    %edx,%eax
f012ddea:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ddf0:	ff 45 d8             	incl   -0x28(%ebp)
f012ddf3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ddf9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ddfc:	7d 85                	jge    f012dd83 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012ddfe:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012de04:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de0a:	8d 50 01             	lea    0x1(%eax),%edx
f012de0d:	89 d0                	mov    %edx,%eax
f012de0f:	01 c0                	add    %eax,%eax
f012de11:	01 d0                	add    %edx,%eax
f012de13:	01 c0                	add    %eax,%eax
f012de15:	01 d0                	add    %edx,%eax
f012de17:	39 c1                	cmp    %eax,%ecx
f012de19:	75 3a                	jne    f012de55 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012de1b:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012de21:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de27:	8d 50 01             	lea    0x1(%eax),%edx
f012de2a:	89 d0                	mov    %edx,%eax
f012de2c:	01 c0                	add    %eax,%eax
f012de2e:	01 d0                	add    %edx,%eax
f012de30:	01 c0                	add    %eax,%eax
f012de32:	01 d0                	add    %edx,%eax
f012de34:	39 c1                	cmp    %eax,%ecx
f012de36:	75 1d                	jne    f012de55 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012de38:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012de3e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de44:	8d 50 01             	lea    0x1(%eax),%edx
f012de47:	89 d0                	mov    %edx,%eax
f012de49:	01 c0                	add    %eax,%eax
f012de4b:	01 d0                	add    %edx,%eax
f012de4d:	01 c0                	add    %eax,%eax
f012de4f:	01 d0                	add    %edx,%eax
f012de51:	39 c1                	cmp    %eax,%ecx
f012de53:	74 17                	je     f012de6c <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012de55:	83 ec 04             	sub    $0x4,%esp
f012de58:	68 a0 ce 13 f0       	push   $0xf013cea0
f012de5d:	68 c0 10 00 00       	push   $0x10c0
f012de62:	68 5a b6 13 f0       	push   $0xf013b65a
f012de67:	e8 99 23 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012de6c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012de72:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012de78:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012de7f:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012de82:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012de89:	eb 24                	jmp    f012deaf <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012de8b:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012de91:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012de94:	01 c0                	add    %eax,%eax
f012de96:	89 c1                	mov    %eax,%ecx
f012de98:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012de9e:	01 c8                	add    %ecx,%eax
f012dea0:	66 8b 00             	mov    (%eax),%ax
f012dea3:	98                   	cwtl   
f012dea4:	01 d0                	add    %edx,%eax
f012dea6:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012deac:	ff 45 d8             	incl   -0x28(%ebp)
f012deaf:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012deb5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012deb8:	7d d1                	jge    f012de8b <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012deba:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dec0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012dec6:	8d 48 01             	lea    0x1(%eax),%ecx
f012dec9:	89 c8                	mov    %ecx,%eax
f012decb:	c1 e0 02             	shl    $0x2,%eax
f012dece:	01 c8                	add    %ecx,%eax
f012ded0:	39 c2                	cmp    %eax,%edx
f012ded2:	74 17                	je     f012deeb <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012ded4:	83 ec 04             	sub    $0x4,%esp
f012ded7:	68 a0 ce 13 f0       	push   $0xf013cea0
f012dedc:	68 ca 10 00 00       	push   $0x10ca
f012dee1:	68 5a b6 13 f0       	push   $0xf013b65a
f012dee6:	e8 1a 23 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012deeb:	e8 b3 ef fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012def0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012def3:	e8 d0 5e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012def8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012defe:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012df04:	83 ec 08             	sub    $0x8,%esp
f012df07:	6a 00                	push   $0x0
f012df09:	50                   	push   %eax
f012df0a:	e8 3d 9f fd ff       	call   f0107e4c <krealloc>
f012df0f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012df12:	e8 b1 5e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012df17:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012df1d:	74 17                	je     f012df36 <test_krealloc+0x1e76>
			panic(
f012df1f:	83 ec 04             	sub    $0x4,%esp
f012df22:	68 74 b6 13 f0       	push   $0xf013b674
f012df27:	68 d2 10 00 00       	push   $0x10d2
f012df2c:	68 5a b6 13 f0       	push   $0xf013b65a
f012df31:	e8 cf 22 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012df36:	e8 68 ef fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012df3b:	89 c2                	mov    %eax,%edx
f012df3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012df40:	29 c2                	sub    %eax,%edx
f012df42:	89 d0                	mov    %edx,%eax
f012df44:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012df49:	74 17                	je     f012df62 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012df4b:	83 ec 04             	sub    $0x4,%esp
f012df4e:	68 30 cb 13 f0       	push   $0xf013cb30
f012df53:	68 d4 10 00 00       	push   $0x10d4
f012df58:	68 5a b6 13 f0       	push   $0xf013b65a
f012df5d:	e8 a3 22 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012df62:	e8 3c ef fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012df67:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012df6a:	e8 59 5e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012df6f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012df75:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012df7b:	83 ec 0c             	sub    $0xc,%esp
f012df7e:	50                   	push   %eax
f012df7f:	e8 d3 9c fd ff       	call   f0107c57 <kfree>
f012df84:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012df87:	e8 3c 5e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012df8c:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012df92:	74 17                	je     f012dfab <test_krealloc+0x1eeb>
			panic(
f012df94:	83 ec 04             	sub    $0x4,%esp
f012df97:	68 74 b6 13 f0       	push   $0xf013b674
f012df9c:	68 dc 10 00 00       	push   $0x10dc
f012dfa1:	68 5a b6 13 f0       	push   $0xf013b65a
f012dfa6:	e8 5a 22 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012dfab:	e8 f3 ee fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012dfb0:	89 c2                	mov    %eax,%edx
f012dfb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dfb5:	29 c2                	sub    %eax,%edx
f012dfb7:	89 d0                	mov    %edx,%eax
f012dfb9:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012dfbe:	74 17                	je     f012dfd7 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012dfc0:	83 ec 04             	sub    $0x4,%esp
f012dfc3:	68 30 cb 13 f0       	push   $0xf013cb30
f012dfc8:	68 de 10 00 00       	push   $0x10de
f012dfcd:	68 5a b6 13 f0       	push   $0xf013b65a
f012dfd2:	e8 2e 22 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dfd7:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012dfde:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012dfe5:	eb 48                	jmp    f012e02f <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dfe7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012dfea:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f012dfef:	83 ec 04             	sub    $0x4,%esp
f012dff2:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012dff8:	51                   	push   %ecx
f012dff9:	52                   	push   %edx
f012dffa:	50                   	push   %eax
f012dffb:	e8 b1 8a fd ff       	call   f0106ab1 <get_page_table>
f012e000:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e003:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012e009:	85 c0                	test   %eax,%eax
f012e00b:	75 17                	jne    f012e024 <test_krealloc+0x1f64>
					panic(
f012e00d:	83 ec 04             	sub    $0x4,%esp
f012e010:	68 5c bf 13 f0       	push   $0xf013bf5c
f012e015:	68 eb 10 00 00       	push   $0x10eb
f012e01a:	68 5a b6 13 f0       	push   $0xf013b65a
f012e01f:	e8 e1 21 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e024:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e02b:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e02f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e033:	78 b2                	js     f012dfe7 <test_krealloc+0x1f27>
f012e035:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e039:	7f 09                	jg     f012e044 <test_krealloc+0x1f84>
f012e03b:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e042:	76 a3                	jbe    f012dfe7 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e044:	83 ec 0c             	sub    $0xc,%esp
f012e047:	68 3e b8 13 f0       	push   $0xf013b83e
f012e04c:	e8 bd 2c fd ff       	call   f0100d0e <cprintf>
f012e051:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e054:	83 ec 0c             	sub    $0xc,%esp
f012e057:	68 cc ce 13 f0       	push   $0xf013cecc
f012e05c:	e8 ad 2c fd ff       	call   f0100d0e <cprintf>
f012e061:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e064:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e069:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e06c:	5b                   	pop    %ebx
f012e06d:	5f                   	pop    %edi
f012e06e:	5d                   	pop    %ebp
f012e06f:	c3                   	ret    

f012e070 <test_krealloc_BF>:


int test_krealloc_BF() {
f012e070:	55                   	push   %ebp
f012e071:	89 e5                	mov    %esp,%ebp
f012e073:	57                   	push   %edi
f012e074:	53                   	push   %ebx
f012e075:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e07b:	83 ec 0c             	sub    $0xc,%esp
f012e07e:	68 9c b5 13 f0       	push   $0xf013b59c
f012e083:	e8 86 2c fd ff       	call   f0100d0e <cprintf>
f012e088:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e08b:	83 ec 0c             	sub    $0xc,%esp
f012e08e:	68 cc b5 13 f0       	push   $0xf013b5cc
f012e093:	e8 76 2c fd ff       	call   f0100d0e <cprintf>
f012e098:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e09b:	83 ec 0c             	sub    $0xc,%esp
f012e09e:	68 9c b5 13 f0       	push   $0xf013b59c
f012e0a3:	e8 66 2c fd ff       	call   f0100d0e <cprintf>
f012e0a8:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e0ab:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e0af:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e0b3:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e0b9:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e0bf:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e0c6:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e0cd:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e0d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e0d8:	b8 00 00 00 00       	mov    $0x0,%eax
f012e0dd:	89 d7                	mov    %edx,%edi
f012e0df:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e0e1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e0e8:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e0ee:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e0f3:	b8 00 00 00 00       	mov    $0x0,%eax
f012e0f8:	89 d7                	mov    %edx,%edi
f012e0fa:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e0fc:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e102:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e107:	b8 00 00 00 00       	mov    $0x0,%eax
f012e10c:	89 d7                	mov    %edx,%edi
f012e10e:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e110:	e8 8e ed fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e115:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e118:	83 ec 08             	sub    $0x8,%esp
f012e11b:	68 00 fc 0f 00       	push   $0xffc00
f012e120:	6a 00                	push   $0x0
f012e122:	e8 25 9d fd ff       	call   f0107e4c <krealloc>
f012e127:	83 c4 10             	add    $0x10,%esp
f012e12a:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e130:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e136:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e13b:	77 17                	ja     f012e154 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e13d:	83 ec 04             	sub    $0x4,%esp
f012e140:	68 00 c9 13 f0       	push   $0xf013c900
f012e145:	68 1a 11 00 00       	push   $0x111a
f012e14a:	68 5a b6 13 f0       	push   $0xf013b65a
f012e14f:	e8 b1 20 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e154:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e15a:	89 c1                	mov    %eax,%ecx
f012e15c:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e163:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e166:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e16b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e16e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e171:	ba 00 00 00 00       	mov    $0x0,%edx
f012e176:	f7 75 b4             	divl   -0x4c(%ebp)
f012e179:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e17c:	29 d0                	sub    %edx,%eax
f012e17e:	89 c3                	mov    %eax,%ebx
f012e180:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e187:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e18c:	0f b6 d0             	movzbl %al,%edx
f012e18f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e192:	01 d0                	add    %edx,%eax
f012e194:	48                   	dec    %eax
f012e195:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e198:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e19b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1a0:	f7 75 ac             	divl   -0x54(%ebp)
f012e1a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e1a6:	29 d0                	sub    %edx,%eax
f012e1a8:	01 c3                	add    %eax,%ebx
f012e1aa:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e1b1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e1b6:	0f b6 c0             	movzbl %al,%eax
f012e1b9:	c1 e0 04             	shl    $0x4,%eax
f012e1bc:	89 c2                	mov    %eax,%edx
f012e1be:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e1c1:	01 d0                	add    %edx,%eax
f012e1c3:	48                   	dec    %eax
f012e1c4:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e1c7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e1ca:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1cf:	f7 75 a4             	divl   -0x5c(%ebp)
f012e1d2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e1d5:	29 d0                	sub    %edx,%eax
f012e1d7:	01 d8                	add    %ebx,%eax
f012e1d9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e1de:	39 c1                	cmp    %eax,%ecx
f012e1e0:	74 17                	je     f012e1f9 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e1e2:	83 ec 04             	sub    $0x4,%esp
f012e1e5:	68 3c c9 13 f0       	push   $0xf013c93c
f012e1ea:	68 1c 11 00 00       	push   $0x111c
f012e1ef:	68 5a b6 13 f0       	push   $0xf013b65a
f012e1f4:	e8 0c 20 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e1f9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e1fc:	e8 a2 ec fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e201:	29 c3                	sub    %eax,%ebx
f012e203:	89 d8                	mov    %ebx,%eax
f012e205:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e20a:	74 17                	je     f012e223 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e20c:	83 ec 04             	sub    $0x4,%esp
f012e20f:	68 6e c9 13 f0       	push   $0xf013c96e
f012e214:	68 1f 11 00 00       	push   $0x111f
f012e219:	68 5a b6 13 f0       	push   $0xf013b65a
f012e21e:	e8 e2 1f fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e223:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e22a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e22d:	e8 71 ec fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e232:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e235:	83 ec 08             	sub    $0x8,%esp
f012e238:	68 00 fc 0f 00       	push   $0xffc00
f012e23d:	6a 00                	push   $0x0
f012e23f:	e8 08 9c fd ff       	call   f0107e4c <krealloc>
f012e244:	83 c4 10             	add    $0x10,%esp
f012e247:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e24d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e253:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e258:	77 17                	ja     f012e271 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e25a:	83 ec 04             	sub    $0x4,%esp
f012e25d:	68 00 c9 13 f0       	push   $0xf013c900
f012e262:	68 27 11 00 00       	push   $0x1127
f012e267:	68 5a b6 13 f0       	push   $0xf013b65a
f012e26c:	e8 94 1f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e271:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e277:	89 c1                	mov    %eax,%ecx
f012e279:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e280:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e283:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e288:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e28b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e28e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e293:	f7 75 9c             	divl   -0x64(%ebp)
f012e296:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e299:	29 d0                	sub    %edx,%eax
f012e29b:	89 c3                	mov    %eax,%ebx
f012e29d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e2a4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e2a9:	0f b6 d0             	movzbl %al,%edx
f012e2ac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e2af:	01 d0                	add    %edx,%eax
f012e2b1:	48                   	dec    %eax
f012e2b2:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e2b5:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e2b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e2bd:	f7 75 94             	divl   -0x6c(%ebp)
f012e2c0:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e2c3:	29 d0                	sub    %edx,%eax
f012e2c5:	01 c3                	add    %eax,%ebx
f012e2c7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e2ce:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e2d3:	0f b6 c0             	movzbl %al,%eax
f012e2d6:	c1 e0 04             	shl    $0x4,%eax
f012e2d9:	89 c2                	mov    %eax,%edx
f012e2db:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e2de:	01 d0                	add    %edx,%eax
f012e2e0:	48                   	dec    %eax
f012e2e1:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e2e4:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e2e7:	ba 00 00 00 00       	mov    $0x0,%edx
f012e2ec:	f7 75 8c             	divl   -0x74(%ebp)
f012e2ef:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e2f2:	29 d0                	sub    %edx,%eax
f012e2f4:	01 d8                	add    %ebx,%eax
f012e2f6:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e2fb:	39 c1                	cmp    %eax,%ecx
f012e2fd:	74 17                	je     f012e316 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e2ff:	83 ec 04             	sub    $0x4,%esp
f012e302:	68 3c c9 13 f0       	push   $0xf013c93c
f012e307:	68 29 11 00 00       	push   $0x1129
f012e30c:	68 5a b6 13 f0       	push   $0xf013b65a
f012e311:	e8 ef 1e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e316:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e319:	e8 85 eb fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e31e:	29 c3                	sub    %eax,%ebx
f012e320:	89 d8                	mov    %ebx,%eax
f012e322:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e327:	74 17                	je     f012e340 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e329:	83 ec 04             	sub    $0x4,%esp
f012e32c:	68 6e c9 13 f0       	push   $0xf013c96e
f012e331:	68 2b 11 00 00       	push   $0x112b
f012e336:	68 5a b6 13 f0       	push   $0xf013b65a
f012e33b:	e8 c5 1e fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e340:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e347:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e34a:	e8 54 eb fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e34f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e352:	83 ec 08             	sub    $0x8,%esp
f012e355:	68 00 fc 0f 00       	push   $0xffc00
f012e35a:	6a 00                	push   $0x0
f012e35c:	e8 eb 9a fd ff       	call   f0107e4c <krealloc>
f012e361:	83 c4 10             	add    $0x10,%esp
f012e364:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e36a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e370:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e375:	77 17                	ja     f012e38e <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e377:	83 ec 04             	sub    $0x4,%esp
f012e37a:	68 00 c9 13 f0       	push   $0xf013c900
f012e37f:	68 33 11 00 00       	push   $0x1133
f012e384:	68 5a b6 13 f0       	push   $0xf013b65a
f012e389:	e8 77 1e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e38e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e394:	89 c1                	mov    %eax,%ecx
f012e396:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e39d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e3a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e3a5:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e3a8:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e3ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3b0:	f7 75 84             	divl   -0x7c(%ebp)
f012e3b3:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e3b6:	29 d0                	sub    %edx,%eax
f012e3b8:	89 c3                	mov    %eax,%ebx
f012e3ba:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e3c1:	10 00 00 
f012e3c4:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e3c9:	0f b6 d0             	movzbl %al,%edx
f012e3cc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e3d2:	01 d0                	add    %edx,%eax
f012e3d4:	48                   	dec    %eax
f012e3d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e3db:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e3e1:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3e6:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e3ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e3f2:	29 d0                	sub    %edx,%eax
f012e3f4:	01 c3                	add    %eax,%ebx
f012e3f6:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e3fd:	10 00 00 
f012e400:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e405:	0f b6 c0             	movzbl %al,%eax
f012e408:	c1 e0 04             	shl    $0x4,%eax
f012e40b:	89 c2                	mov    %eax,%edx
f012e40d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e413:	01 d0                	add    %edx,%eax
f012e415:	48                   	dec    %eax
f012e416:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e41c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e422:	ba 00 00 00 00       	mov    $0x0,%edx
f012e427:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e42d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e433:	29 d0                	sub    %edx,%eax
f012e435:	01 d8                	add    %ebx,%eax
f012e437:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e43c:	39 c1                	cmp    %eax,%ecx
f012e43e:	74 17                	je     f012e457 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e440:	83 ec 04             	sub    $0x4,%esp
f012e443:	68 3c c9 13 f0       	push   $0xf013c93c
f012e448:	68 35 11 00 00       	push   $0x1135
f012e44d:	68 5a b6 13 f0       	push   $0xf013b65a
f012e452:	e8 ae 1d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e457:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e45a:	e8 44 ea fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e45f:	29 c3                	sub    %eax,%ebx
f012e461:	89 d8                	mov    %ebx,%eax
f012e463:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e468:	74 17                	je     f012e481 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e46a:	83 ec 04             	sub    $0x4,%esp
f012e46d:	68 6e c9 13 f0       	push   $0xf013c96e
f012e472:	68 37 11 00 00       	push   $0x1137
f012e477:	68 5a b6 13 f0       	push   $0xf013b65a
f012e47c:	e8 84 1d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e481:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e488:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e48b:	e8 13 ea fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e490:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e493:	83 ec 08             	sub    $0x8,%esp
f012e496:	68 00 fc 0f 00       	push   $0xffc00
f012e49b:	6a 00                	push   $0x0
f012e49d:	e8 aa 99 fd ff       	call   f0107e4c <krealloc>
f012e4a2:	83 c4 10             	add    $0x10,%esp
f012e4a5:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e4ab:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e4b1:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e4b6:	77 17                	ja     f012e4cf <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e4b8:	83 ec 04             	sub    $0x4,%esp
f012e4bb:	68 00 c9 13 f0       	push   $0xf013c900
f012e4c0:	68 3e 11 00 00       	push   $0x113e
f012e4c5:	68 5a b6 13 f0       	push   $0xf013b65a
f012e4ca:	e8 36 1d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e4cf:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e4d5:	89 c1                	mov    %eax,%ecx
f012e4d7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e4de:	10 00 00 
f012e4e1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e4e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e4ec:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e4f2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e4f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e4fd:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e503:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e509:	29 d0                	sub    %edx,%eax
f012e50b:	89 c3                	mov    %eax,%ebx
f012e50d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e514:	10 00 00 
f012e517:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e51c:	0f b6 d0             	movzbl %al,%edx
f012e51f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e525:	01 d0                	add    %edx,%eax
f012e527:	48                   	dec    %eax
f012e528:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e52e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e534:	ba 00 00 00 00       	mov    $0x0,%edx
f012e539:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e53f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e545:	29 d0                	sub    %edx,%eax
f012e547:	01 c3                	add    %eax,%ebx
f012e549:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e550:	10 00 00 
f012e553:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e558:	0f b6 c0             	movzbl %al,%eax
f012e55b:	c1 e0 04             	shl    $0x4,%eax
f012e55e:	89 c2                	mov    %eax,%edx
f012e560:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e566:	01 d0                	add    %edx,%eax
f012e568:	48                   	dec    %eax
f012e569:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e56f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e575:	ba 00 00 00 00       	mov    $0x0,%edx
f012e57a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e580:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e586:	29 d0                	sub    %edx,%eax
f012e588:	01 d8                	add    %ebx,%eax
f012e58a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e58f:	39 c1                	cmp    %eax,%ecx
f012e591:	74 17                	je     f012e5aa <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e593:	83 ec 04             	sub    $0x4,%esp
f012e596:	68 3c c9 13 f0       	push   $0xf013c93c
f012e59b:	68 40 11 00 00       	push   $0x1140
f012e5a0:	68 5a b6 13 f0       	push   $0xf013b65a
f012e5a5:	e8 5b 1c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e5aa:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e5ad:	e8 f1 e8 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e5b2:	29 c3                	sub    %eax,%ebx
f012e5b4:	89 d8                	mov    %ebx,%eax
f012e5b6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e5bb:	74 17                	je     f012e5d4 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e5bd:	83 ec 04             	sub    $0x4,%esp
f012e5c0:	68 6e c9 13 f0       	push   $0xf013c96e
f012e5c5:	68 42 11 00 00       	push   $0x1142
f012e5ca:	68 5a b6 13 f0       	push   $0xf013b65a
f012e5cf:	e8 31 1c fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e5d4:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e5db:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e5de:	e8 c0 e8 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e5e3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e5e6:	83 ec 08             	sub    $0x8,%esp
f012e5e9:	68 00 fc 1f 00       	push   $0x1ffc00
f012e5ee:	6a 00                	push   $0x0
f012e5f0:	e8 57 98 fd ff       	call   f0107e4c <krealloc>
f012e5f5:	83 c4 10             	add    $0x10,%esp
f012e5f8:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e5fe:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e604:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e609:	77 17                	ja     f012e622 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e60b:	83 ec 04             	sub    $0x4,%esp
f012e60e:	68 00 c9 13 f0       	push   $0xf013c900
f012e613:	68 49 11 00 00       	push   $0x1149
f012e618:	68 5a b6 13 f0       	push   $0xf013b65a
f012e61d:	e8 e3 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e622:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e628:	89 c1                	mov    %eax,%ecx
f012e62a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e631:	10 00 00 
f012e634:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e63a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e63f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e645:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e64b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e650:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e656:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e65c:	29 d0                	sub    %edx,%eax
f012e65e:	89 c3                	mov    %eax,%ebx
f012e660:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e667:	10 00 00 
f012e66a:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e66f:	0f b6 d0             	movzbl %al,%edx
f012e672:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e678:	01 d0                	add    %edx,%eax
f012e67a:	48                   	dec    %eax
f012e67b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e681:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e687:	ba 00 00 00 00       	mov    $0x0,%edx
f012e68c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e692:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e698:	29 d0                	sub    %edx,%eax
f012e69a:	01 c3                	add    %eax,%ebx
f012e69c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e6a3:	10 00 00 
f012e6a6:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e6ab:	0f b6 c0             	movzbl %al,%eax
f012e6ae:	c1 e0 04             	shl    $0x4,%eax
f012e6b1:	89 c2                	mov    %eax,%edx
f012e6b3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e6b9:	01 d0                	add    %edx,%eax
f012e6bb:	48                   	dec    %eax
f012e6bc:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e6c2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e6c8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6cd:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012e6d3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e6d9:	29 d0                	sub    %edx,%eax
f012e6db:	01 d8                	add    %ebx,%eax
f012e6dd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012e6e2:	39 c1                	cmp    %eax,%ecx
f012e6e4:	74 17                	je     f012e6fd <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e6e6:	83 ec 04             	sub    $0x4,%esp
f012e6e9:	68 3c c9 13 f0       	push   $0xf013c93c
f012e6ee:	68 4b 11 00 00       	push   $0x114b
f012e6f3:	68 5a b6 13 f0       	push   $0xf013b65a
f012e6f8:	e8 08 1b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e6fd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e700:	e8 9e e7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e705:	29 c3                	sub    %eax,%ebx
f012e707:	89 d8                	mov    %ebx,%eax
f012e709:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e70e:	74 17                	je     f012e727 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e710:	83 ec 04             	sub    $0x4,%esp
f012e713:	68 6e c9 13 f0       	push   $0xf013c96e
f012e718:	68 4d 11 00 00       	push   $0x114d
f012e71d:	68 5a b6 13 f0       	push   $0xf013b65a
f012e722:	e8 de 1a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e727:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e72e:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e731:	e8 6d e7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e736:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e739:	83 ec 08             	sub    $0x8,%esp
f012e73c:	68 00 fc 1f 00       	push   $0x1ffc00
f012e741:	6a 00                	push   $0x0
f012e743:	e8 04 97 fd ff       	call   f0107e4c <krealloc>
f012e748:	83 c4 10             	add    $0x10,%esp
f012e74b:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e751:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e757:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e75c:	77 17                	ja     f012e775 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e75e:	83 ec 04             	sub    $0x4,%esp
f012e761:	68 00 c9 13 f0       	push   $0xf013c900
f012e766:	68 54 11 00 00       	push   $0x1154
f012e76b:	68 5a b6 13 f0       	push   $0xf013b65a
f012e770:	e8 90 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e775:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e77b:	89 c1                	mov    %eax,%ecx
f012e77d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e784:	10 00 00 
f012e787:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e78d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e792:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e798:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e79e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7a3:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e7a9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e7af:	29 d0                	sub    %edx,%eax
f012e7b1:	89 c3                	mov    %eax,%ebx
f012e7b3:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e7ba:	10 00 00 
f012e7bd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e7c2:	0f b6 d0             	movzbl %al,%edx
f012e7c5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e7cb:	01 d0                	add    %edx,%eax
f012e7cd:	48                   	dec    %eax
f012e7ce:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e7d4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e7da:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7df:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e7e5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e7eb:	29 d0                	sub    %edx,%eax
f012e7ed:	01 c3                	add    %eax,%ebx
f012e7ef:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e7f6:	10 00 00 
f012e7f9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e7fe:	0f b6 c0             	movzbl %al,%eax
f012e801:	c1 e0 04             	shl    $0x4,%eax
f012e804:	89 c2                	mov    %eax,%edx
f012e806:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e80c:	01 d0                	add    %edx,%eax
f012e80e:	48                   	dec    %eax
f012e80f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e815:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e81b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e820:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e826:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e82c:	29 d0                	sub    %edx,%eax
f012e82e:	01 d8                	add    %ebx,%eax
f012e830:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e835:	39 c1                	cmp    %eax,%ecx
f012e837:	74 17                	je     f012e850 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e839:	83 ec 04             	sub    $0x4,%esp
f012e83c:	68 3c c9 13 f0       	push   $0xf013c93c
f012e841:	68 56 11 00 00       	push   $0x1156
f012e846:	68 5a b6 13 f0       	push   $0xf013b65a
f012e84b:	e8 b5 19 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e850:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e853:	e8 4b e6 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e858:	29 c3                	sub    %eax,%ebx
f012e85a:	89 d8                	mov    %ebx,%eax
f012e85c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e861:	74 17                	je     f012e87a <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e863:	83 ec 04             	sub    $0x4,%esp
f012e866:	68 6e c9 13 f0       	push   $0xf013c96e
f012e86b:	68 58 11 00 00       	push   $0x1158
f012e870:	68 5a b6 13 f0       	push   $0xf013b65a
f012e875:	e8 8b 19 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e87a:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e881:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e884:	e8 1a e6 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e889:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e88c:	83 ec 08             	sub    $0x8,%esp
f012e88f:	68 00 fc 2f 00       	push   $0x2ffc00
f012e894:	6a 00                	push   $0x0
f012e896:	e8 b1 95 fd ff       	call   f0107e4c <krealloc>
f012e89b:	83 c4 10             	add    $0x10,%esp
f012e89e:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e8a4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e8aa:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e8af:	77 17                	ja     f012e8c8 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e8b1:	83 ec 04             	sub    $0x4,%esp
f012e8b4:	68 00 c9 13 f0       	push   $0xf013c900
f012e8b9:	68 5f 11 00 00       	push   $0x115f
f012e8be:	68 5a b6 13 f0       	push   $0xf013b65a
f012e8c3:	e8 3d 19 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e8c8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e8ce:	89 c1                	mov    %eax,%ecx
f012e8d0:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e8d7:	10 00 00 
f012e8da:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e8e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e8e5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e8eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e8f1:	ba 00 00 00 00       	mov    $0x0,%edx
f012e8f6:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e8fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e902:	29 d0                	sub    %edx,%eax
f012e904:	89 c3                	mov    %eax,%ebx
f012e906:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e90d:	10 00 00 
f012e910:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e915:	0f b6 d0             	movzbl %al,%edx
f012e918:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e91e:	01 d0                	add    %edx,%eax
f012e920:	48                   	dec    %eax
f012e921:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e927:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e92d:	ba 00 00 00 00       	mov    $0x0,%edx
f012e932:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e938:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e93e:	29 d0                	sub    %edx,%eax
f012e940:	01 c3                	add    %eax,%ebx
f012e942:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e949:	10 00 00 
f012e94c:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012e951:	0f b6 c0             	movzbl %al,%eax
f012e954:	c1 e0 04             	shl    $0x4,%eax
f012e957:	89 c2                	mov    %eax,%edx
f012e959:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e95f:	01 d0                	add    %edx,%eax
f012e961:	48                   	dec    %eax
f012e962:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e968:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e96e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e973:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e979:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e97f:	29 d0                	sub    %edx,%eax
f012e981:	01 d8                	add    %ebx,%eax
f012e983:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e988:	39 c1                	cmp    %eax,%ecx
f012e98a:	74 17                	je     f012e9a3 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e98c:	83 ec 04             	sub    $0x4,%esp
f012e98f:	68 3c c9 13 f0       	push   $0xf013c93c
f012e994:	68 61 11 00 00       	push   $0x1161
f012e999:	68 5a b6 13 f0       	push   $0xf013b65a
f012e99e:	e8 62 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e9a3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e9a6:	e8 f8 e4 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e9ab:	29 c3                	sub    %eax,%ebx
f012e9ad:	89 d8                	mov    %ebx,%eax
f012e9af:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e9b4:	74 17                	je     f012e9cd <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e9b6:	83 ec 04             	sub    $0x4,%esp
f012e9b9:	68 a4 ba 13 f0       	push   $0xf013baa4
f012e9be:	68 63 11 00 00       	push   $0x1163
f012e9c3:	68 5a b6 13 f0       	push   $0xf013b65a
f012e9c8:	e8 38 18 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e9cd:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e9d4:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e9d7:	e8 c7 e4 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012e9dc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e9df:	83 ec 08             	sub    $0x8,%esp
f012e9e2:	68 00 fc 2f 00       	push   $0x2ffc00
f012e9e7:	6a 00                	push   $0x0
f012e9e9:	e8 5e 94 fd ff       	call   f0107e4c <krealloc>
f012e9ee:	83 c4 10             	add    $0x10,%esp
f012e9f1:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e9f7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e9fd:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ea02:	77 17                	ja     f012ea1b <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ea04:	83 ec 04             	sub    $0x4,%esp
f012ea07:	68 00 c9 13 f0       	push   $0xf013c900
f012ea0c:	68 6a 11 00 00       	push   $0x116a
f012ea11:	68 5a b6 13 f0       	push   $0xf013b65a
f012ea16:	e8 ea 17 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ea1b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ea21:	89 c1                	mov    %eax,%ecx
f012ea23:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ea2a:	10 00 00 
f012ea2d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ea33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ea38:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ea3e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ea44:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea49:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012ea4f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ea55:	29 d0                	sub    %edx,%eax
f012ea57:	89 c3                	mov    %eax,%ebx
f012ea59:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012ea60:	10 00 00 
f012ea63:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012ea68:	0f b6 d0             	movzbl %al,%edx
f012ea6b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012ea71:	01 d0                	add    %edx,%eax
f012ea73:	48                   	dec    %eax
f012ea74:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012ea7a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ea80:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea85:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012ea8b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ea91:	29 d0                	sub    %edx,%eax
f012ea93:	01 c3                	add    %eax,%ebx
f012ea95:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012ea9c:	10 00 00 
f012ea9f:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012eaa4:	0f b6 c0             	movzbl %al,%eax
f012eaa7:	c1 e0 04             	shl    $0x4,%eax
f012eaaa:	89 c2                	mov    %eax,%edx
f012eaac:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012eab2:	01 d0                	add    %edx,%eax
f012eab4:	48                   	dec    %eax
f012eab5:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012eabb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012eac1:	ba 00 00 00 00       	mov    $0x0,%edx
f012eac6:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012eacc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ead2:	29 d0                	sub    %edx,%eax
f012ead4:	01 d8                	add    %ebx,%eax
f012ead6:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012eadb:	39 c1                	cmp    %eax,%ecx
f012eadd:	74 17                	je     f012eaf6 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012eadf:	83 ec 04             	sub    $0x4,%esp
f012eae2:	68 3c c9 13 f0       	push   $0xf013c93c
f012eae7:	68 6c 11 00 00       	push   $0x116c
f012eaec:	68 5a b6 13 f0       	push   $0xf013b65a
f012eaf1:	e8 0f 17 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012eaf6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eaf9:	e8 a5 e3 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012eafe:	29 c3                	sub    %eax,%ebx
f012eb00:	89 d8                	mov    %ebx,%eax
f012eb02:	3d 00 03 00 00       	cmp    $0x300,%eax
f012eb07:	74 17                	je     f012eb20 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012eb09:	83 ec 04             	sub    $0x4,%esp
f012eb0c:	68 6e c9 13 f0       	push   $0xf013c96e
f012eb11:	68 6e 11 00 00       	push   $0x116e
f012eb16:	68 5a b6 13 f0       	push   $0xf013b65a
f012eb1b:	e8 e5 16 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012eb20:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012eb27:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012eb2a:	e8 74 e3 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012eb2f:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012eb32:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012eb39:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012eb3c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012eb42:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012eb48:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012eb4e:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012eb51:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012eb53:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012eb59:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012eb5f:	01 c2                	add    %eax,%edx
f012eb61:	8a 45 ce             	mov    -0x32(%ebp),%al
f012eb64:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012eb66:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eb6c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012eb72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012eb79:	eb 11                	jmp    f012eb8c <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012eb7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012eb7e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eb84:	01 d0                	add    %edx,%eax
f012eb86:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012eb89:	ff 45 f4             	incl   -0xc(%ebp)
f012eb8c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012eb92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012eb95:	7d e4                	jge    f012eb7b <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012eb97:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012eb9d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012eba3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eba9:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012ebaf:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012ebb5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ebbc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ebc2:	01 d0                	add    %edx,%eax
f012ebc4:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012ebca:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ebd0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ebd6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012ebdd:	eb 1b                	jmp    f012ebfa <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012ebdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ebe2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ebe9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ebef:	01 d0                	add    %edx,%eax
f012ebf1:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ebf7:	ff 45 f0             	incl   -0x10(%ebp)
f012ebfa:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ec00:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012ec03:	7d da                	jge    f012ebdf <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ec05:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ec0b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ec11:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012ec18:	eb 17                	jmp    f012ec31 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012ec1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ec1d:	01 c0                	add    %eax,%eax
f012ec1f:	89 c2                	mov    %eax,%edx
f012ec21:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec27:	01 d0                	add    %edx,%eax
f012ec29:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ec2e:	ff 45 ec             	incl   -0x14(%ebp)
f012ec31:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec37:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012ec3a:	7d de                	jge    f012ec1a <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012ec3c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ec42:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012ec48:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec4e:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012ec53:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ec59:	01 c0                	add    %eax,%eax
f012ec5b:	89 c2                	mov    %eax,%edx
f012ec5d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec63:	01 d0                	add    %edx,%eax
f012ec65:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ec6a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ec70:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ec76:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012ec7d:	eb 49                	jmp    f012ecc8 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012ec7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ec82:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec89:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec8f:	01 d0                	add    %edx,%eax
f012ec91:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012ec94:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ec97:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec9e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eca4:	01 d0                	add    %edx,%eax
f012eca6:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012ecac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ecaf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ecb6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecbc:	01 d0                	add    %edx,%eax
f012ecbe:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ecc5:	ff 45 e8             	incl   -0x18(%ebp)
f012ecc8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ecce:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ecd1:	7d ac                	jge    f012ec7f <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012ecd3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ecd9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012ecdf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ece5:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ece8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ecf4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecfa:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ed01:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed07:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed0e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed14:	01 d0                	add    %edx,%eax
f012ed16:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ed19:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed1f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed26:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed2c:	01 d0                	add    %edx,%eax
f012ed2e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ed34:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed3a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed41:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed47:	01 d0                	add    %edx,%eax
f012ed49:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ed50:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ed56:	8a 00                	mov    (%eax),%al
f012ed58:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ed5b:	75 17                	jne    f012ed74 <test_krealloc_BF+0xd04>
f012ed5d:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012ed63:	89 c2                	mov    %eax,%edx
f012ed65:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ed6b:	01 d0                	add    %edx,%eax
f012ed6d:	8a 00                	mov    (%eax),%al
f012ed6f:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ed72:	74 17                	je     f012ed8b <test_krealloc_BF+0xd1b>
			panic(
f012ed74:	83 ec 04             	sub    $0x4,%esp
f012ed77:	68 8c c9 13 f0       	push   $0xf013c98c
f012ed7c:	68 b1 11 00 00       	push   $0x11b1
f012ed81:	68 5a b6 13 f0       	push   $0xf013b65a
f012ed86:	e8 7a 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ed8b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ed91:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ed97:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ed9d:	8a 00                	mov    (%eax),%al
f012ed9f:	3c 02                	cmp    $0x2,%al
f012eda1:	75 16                	jne    f012edb9 <test_krealloc_BF+0xd49>
f012eda3:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012eda9:	89 c2                	mov    %eax,%edx
f012edab:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012edb1:	01 d0                	add    %edx,%eax
f012edb3:	8a 00                	mov    (%eax),%al
f012edb5:	3c 02                	cmp    $0x2,%al
f012edb7:	74 20                	je     f012edd9 <test_krealloc_BF+0xd69>
			panic(
f012edb9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012edbf:	8a 00                	mov    (%eax),%al
f012edc1:	0f be c0             	movsbl %al,%eax
f012edc4:	50                   	push   %eax
f012edc5:	68 cc c9 13 f0       	push   $0xf013c9cc
f012edca:	68 b7 11 00 00       	push   $0x11b7
f012edcf:	68 5a b6 13 f0       	push   $0xf013b65a
f012edd4:	e8 2c 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012edd9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012eddf:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ede5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012edeb:	8b 00                	mov    (%eax),%eax
f012eded:	83 f8 03             	cmp    $0x3,%eax
f012edf0:	75 1c                	jne    f012ee0e <test_krealloc_BF+0xd9e>
f012edf2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012edf8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012edff:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ee05:	01 d0                	add    %edx,%eax
f012ee07:	8b 00                	mov    (%eax),%eax
f012ee09:	83 f8 03             	cmp    $0x3,%eax
f012ee0c:	74 17                	je     f012ee25 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ee0e:	83 ec 04             	sub    $0x4,%esp
f012ee11:	68 18 ca 13 f0       	push   $0xf013ca18
f012ee16:	68 bb 11 00 00       	push   $0x11bb
f012ee1b:	68 5a b6 13 f0       	push   $0xf013b65a
f012ee20:	e8 e0 13 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ee25:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ee2b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ee31:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ee37:	8b 00                	mov    (%eax),%eax
f012ee39:	83 f8 04             	cmp    $0x4,%eax
f012ee3c:	75 1c                	jne    f012ee5a <test_krealloc_BF+0xdea>
f012ee3e:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ee44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ee4b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ee51:	01 d0                	add    %edx,%eax
f012ee53:	8b 00                	mov    (%eax),%eax
f012ee55:	83 f8 04             	cmp    $0x4,%eax
f012ee58:	74 17                	je     f012ee71 <test_krealloc_BF+0xe01>
			panic(
f012ee5a:	83 ec 04             	sub    $0x4,%esp
f012ee5d:	68 8c c9 13 f0       	push   $0xf013c98c
f012ee62:	68 c0 11 00 00       	push   $0x11c0
f012ee67:	68 5a b6 13 f0       	push   $0xf013b65a
f012ee6c:	e8 94 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012ee71:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ee77:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ee7d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ee83:	66 8b 00             	mov    (%eax),%ax
f012ee86:	66 83 f8 05          	cmp    $0x5,%ax
f012ee8a:	75 1b                	jne    f012eea7 <test_krealloc_BF+0xe37>
f012ee8c:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ee92:	01 c0                	add    %eax,%eax
f012ee94:	89 c2                	mov    %eax,%edx
f012ee96:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ee9c:	01 d0                	add    %edx,%eax
f012ee9e:	66 8b 00             	mov    (%eax),%ax
f012eea1:	66 83 f8 05          	cmp    $0x5,%ax
f012eea5:	74 17                	je     f012eebe <test_krealloc_BF+0xe4e>
			panic(
f012eea7:	83 ec 04             	sub    $0x4,%esp
f012eeaa:	68 8c c9 13 f0       	push   $0xf013c98c
f012eeaf:	68 c5 11 00 00       	push   $0x11c5
f012eeb4:	68 5a b6 13 f0       	push   $0xf013b65a
f012eeb9:	e8 47 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012eebe:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eec4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012eeca:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eed0:	66 8b 00             	mov    (%eax),%ax
f012eed3:	66 83 f8 06          	cmp    $0x6,%ax
f012eed7:	75 1b                	jne    f012eef4 <test_krealloc_BF+0xe84>
f012eed9:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012eedf:	01 c0                	add    %eax,%eax
f012eee1:	89 c2                	mov    %eax,%edx
f012eee3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eee9:	01 d0                	add    %edx,%eax
f012eeeb:	66 8b 00             	mov    (%eax),%ax
f012eeee:	66 83 f8 06          	cmp    $0x6,%ax
f012eef2:	74 17                	je     f012ef0b <test_krealloc_BF+0xe9b>
			panic(
f012eef4:	83 ec 04             	sub    $0x4,%esp
f012eef7:	68 8c c9 13 f0       	push   $0xf013c98c
f012eefc:	68 ca 11 00 00       	push   $0x11ca
f012ef01:	68 5a b6 13 f0       	push   $0xf013b65a
f012ef06:	e8 fa 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ef0b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ef11:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ef17:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef1d:	8a 00                	mov    (%eax),%al
f012ef1f:	3c 07                	cmp    $0x7,%al
f012ef21:	75 1b                	jne    f012ef3e <test_krealloc_BF+0xece>
f012ef23:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef29:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ef30:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef36:	01 d0                	add    %edx,%eax
f012ef38:	8a 00                	mov    (%eax),%al
f012ef3a:	3c 07                	cmp    $0x7,%al
f012ef3c:	74 17                	je     f012ef55 <test_krealloc_BF+0xee5>
			panic(
f012ef3e:	83 ec 04             	sub    $0x4,%esp
f012ef41:	68 8c c9 13 f0       	push   $0xf013c98c
f012ef46:	68 cf 11 00 00       	push   $0x11cf
f012ef4b:	68 5a b6 13 f0       	push   $0xf013b65a
f012ef50:	e8 b0 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ef55:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef5b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ef5f:	66 83 f8 07          	cmp    $0x7,%ax
f012ef63:	75 1f                	jne    f012ef84 <test_krealloc_BF+0xf14>
f012ef65:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef6b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ef72:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef78:	01 d0                	add    %edx,%eax
f012ef7a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ef7e:	66 83 f8 07          	cmp    $0x7,%ax
f012ef82:	74 17                	je     f012ef9b <test_krealloc_BF+0xf2b>
			panic(
f012ef84:	83 ec 04             	sub    $0x4,%esp
f012ef87:	68 8c c9 13 f0       	push   $0xf013c98c
f012ef8c:	68 d2 11 00 00       	push   $0x11d2
f012ef91:	68 5a b6 13 f0       	push   $0xf013b65a
f012ef96:	e8 6a 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ef9b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efa1:	8b 40 04             	mov    0x4(%eax),%eax
f012efa4:	83 f8 07             	cmp    $0x7,%eax
f012efa7:	75 1d                	jne    f012efc6 <test_krealloc_BF+0xf56>
f012efa9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012efaf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012efb6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efbc:	01 d0                	add    %edx,%eax
f012efbe:	8b 40 04             	mov    0x4(%eax),%eax
f012efc1:	83 f8 07             	cmp    $0x7,%eax
f012efc4:	74 17                	je     f012efdd <test_krealloc_BF+0xf6d>
			panic(
f012efc6:	83 ec 04             	sub    $0x4,%esp
f012efc9:	68 8c c9 13 f0       	push   $0xf013c98c
f012efce:	68 d5 11 00 00       	push   $0x11d5
f012efd3:	68 5a b6 13 f0       	push   $0xf013b65a
f012efd8:	e8 28 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012efdd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012efe3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012efe9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efef:	8a 00                	mov    (%eax),%al
f012eff1:	3c 08                	cmp    $0x8,%al
f012eff3:	75 1b                	jne    f012f010 <test_krealloc_BF+0xfa0>
f012eff5:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012effb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f002:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f008:	01 d0                	add    %edx,%eax
f012f00a:	8a 00                	mov    (%eax),%al
f012f00c:	3c 08                	cmp    $0x8,%al
f012f00e:	74 17                	je     f012f027 <test_krealloc_BF+0xfb7>
			panic(
f012f010:	83 ec 04             	sub    $0x4,%esp
f012f013:	68 8c c9 13 f0       	push   $0xf013c98c
f012f018:	68 da 11 00 00       	push   $0x11da
f012f01d:	68 5a b6 13 f0       	push   $0xf013b65a
f012f022:	e8 de 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f027:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f02d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f031:	66 83 f8 08          	cmp    $0x8,%ax
f012f035:	75 1f                	jne    f012f056 <test_krealloc_BF+0xfe6>
f012f037:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f03d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f044:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f04a:	01 d0                	add    %edx,%eax
f012f04c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f050:	66 83 f8 08          	cmp    $0x8,%ax
f012f054:	74 17                	je     f012f06d <test_krealloc_BF+0xffd>
			panic(
f012f056:	83 ec 04             	sub    $0x4,%esp
f012f059:	68 8c c9 13 f0       	push   $0xf013c98c
f012f05e:	68 dd 11 00 00       	push   $0x11dd
f012f063:	68 5a b6 13 f0       	push   $0xf013b65a
f012f068:	e8 98 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f06d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f073:	8b 40 04             	mov    0x4(%eax),%eax
f012f076:	83 f8 08             	cmp    $0x8,%eax
f012f079:	75 1d                	jne    f012f098 <test_krealloc_BF+0x1028>
f012f07b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f081:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f088:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f08e:	01 d0                	add    %edx,%eax
f012f090:	8b 40 04             	mov    0x4(%eax),%eax
f012f093:	83 f8 08             	cmp    $0x8,%eax
f012f096:	74 17                	je     f012f0af <test_krealloc_BF+0x103f>
			panic(
f012f098:	83 ec 04             	sub    $0x4,%esp
f012f09b:	68 8c c9 13 f0       	push   $0xf013c98c
f012f0a0:	68 e0 11 00 00       	push   $0x11e0
f012f0a5:	68 5a b6 13 f0       	push   $0xf013b65a
f012f0aa:	e8 56 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f0af:	e8 ef dd fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f0b4:	89 c2                	mov    %eax,%edx
f012f0b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f0b9:	39 c2                	cmp    %eax,%edx
f012f0bb:	74 17                	je     f012f0d4 <test_krealloc_BF+0x1064>
			panic(
f012f0bd:	83 ec 04             	sub    $0x4,%esp
f012f0c0:	68 4c ca 13 f0       	push   $0xf013ca4c
f012f0c5:	68 e4 11 00 00       	push   $0x11e4
f012f0ca:	68 5a b6 13 f0       	push   $0xf013b65a
f012f0cf:	e8 31 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f0d4:	83 ec 0c             	sub    $0xc,%esp
f012f0d7:	68 98 ca 13 f0       	push   $0xf013ca98
f012f0dc:	e8 2d 1c fd ff       	call   f0100d0e <cprintf>
f012f0e1:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f0e4:	e8 ba dd fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f0e9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f0ec:	e8 d7 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f0f1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f0f7:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f0fd:	83 ec 08             	sub    $0x8,%esp
f012f100:	6a 00                	push   $0x0
f012f102:	50                   	push   %eax
f012f103:	e8 44 8d fd ff       	call   f0107e4c <krealloc>
f012f108:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f10b:	e8 b8 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f110:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f116:	74 17                	je     f012f12f <test_krealloc_BF+0x10bf>
			panic(
f012f118:	83 ec 04             	sub    $0x4,%esp
f012f11b:	68 bc ca 13 f0       	push   $0xf013cabc
f012f120:	68 f1 11 00 00       	push   $0x11f1
f012f125:	68 5a b6 13 f0       	push   $0xf013b65a
f012f12a:	e8 d6 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f12f:	e8 6f dd fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f134:	89 c2                	mov    %eax,%edx
f012f136:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f139:	29 c2                	sub    %eax,%edx
f012f13b:	89 d0                	mov    %edx,%eax
f012f13d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f142:	74 17                	je     f012f15b <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f144:	83 ec 04             	sub    $0x4,%esp
f012f147:	68 30 cb 13 f0       	push   $0xf013cb30
f012f14c:	68 f3 11 00 00       	push   $0x11f3
f012f151:	68 5a b6 13 f0       	push   $0xf013b65a
f012f156:	e8 aa 10 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f15b:	e8 43 dd fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f160:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f163:	e8 60 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f168:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f16e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f174:	83 ec 08             	sub    $0x8,%esp
f012f177:	6a 00                	push   $0x0
f012f179:	50                   	push   %eax
f012f17a:	e8 cd 8c fd ff       	call   f0107e4c <krealloc>
f012f17f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f182:	e8 41 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f187:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f18d:	74 17                	je     f012f1a6 <test_krealloc_BF+0x1136>
			panic(
f012f18f:	83 ec 04             	sub    $0x4,%esp
f012f192:	68 bc ca 13 f0       	push   $0xf013cabc
f012f197:	68 fc 11 00 00       	push   $0x11fc
f012f19c:	68 5a b6 13 f0       	push   $0xf013b65a
f012f1a1:	e8 5f 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f1a6:	e8 f8 dc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f1ab:	89 c2                	mov    %eax,%edx
f012f1ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f1b0:	29 c2                	sub    %eax,%edx
f012f1b2:	89 d0                	mov    %edx,%eax
f012f1b4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f1b9:	74 17                	je     f012f1d2 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f1bb:	83 ec 04             	sub    $0x4,%esp
f012f1be:	68 30 cb 13 f0       	push   $0xf013cb30
f012f1c3:	68 fe 11 00 00       	push   $0x11fe
f012f1c8:	68 5a b6 13 f0       	push   $0xf013b65a
f012f1cd:	e8 33 10 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f1d2:	e8 cc dc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f1d7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f1da:	e8 e9 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f1df:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f1e5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f1eb:	83 ec 08             	sub    $0x8,%esp
f012f1ee:	6a 00                	push   $0x0
f012f1f0:	50                   	push   %eax
f012f1f1:	e8 56 8c fd ff       	call   f0107e4c <krealloc>
f012f1f6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f1f9:	e8 ca 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f1fe:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f204:	74 17                	je     f012f21d <test_krealloc_BF+0x11ad>
			panic(
f012f206:	83 ec 04             	sub    $0x4,%esp
f012f209:	68 74 b6 13 f0       	push   $0xf013b674
f012f20e:	68 06 12 00 00       	push   $0x1206
f012f213:	68 5a b6 13 f0       	push   $0xf013b65a
f012f218:	e8 e8 0f fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f21d:	e8 81 dc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f222:	89 c2                	mov    %eax,%edx
f012f224:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f227:	29 c2                	sub    %eax,%edx
f012f229:	89 d0                	mov    %edx,%eax
f012f22b:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f230:	74 17                	je     f012f249 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f232:	83 ec 04             	sub    $0x4,%esp
f012f235:	68 30 cb 13 f0       	push   $0xf013cb30
f012f23a:	68 08 12 00 00       	push   $0x1208
f012f23f:	68 5a b6 13 f0       	push   $0xf013b65a
f012f244:	e8 bc 0f fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f249:	e8 55 dc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f24e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f251:	e8 72 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f256:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f25c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f262:	83 ec 08             	sub    $0x8,%esp
f012f265:	6a 00                	push   $0x0
f012f267:	50                   	push   %eax
f012f268:	e8 df 8b fd ff       	call   f0107e4c <krealloc>
f012f26d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f270:	e8 53 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f275:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f27b:	74 17                	je     f012f294 <test_krealloc_BF+0x1224>
			panic(
f012f27d:	83 ec 04             	sub    $0x4,%esp
f012f280:	68 bc ca 13 f0       	push   $0xf013cabc
f012f285:	68 10 12 00 00       	push   $0x1210
f012f28a:	68 5a b6 13 f0       	push   $0xf013b65a
f012f28f:	e8 71 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f294:	e8 0a dc fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f299:	89 c2                	mov    %eax,%edx
f012f29b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f29e:	29 c2                	sub    %eax,%edx
f012f2a0:	89 d0                	mov    %edx,%eax
f012f2a2:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f2a7:	74 17                	je     f012f2c0 <test_krealloc_BF+0x1250>
			panic(
f012f2a9:	83 ec 04             	sub    $0x4,%esp
f012f2ac:	68 64 cb 13 f0       	push   $0xf013cb64
f012f2b1:	68 13 12 00 00       	push   $0x1213
f012f2b6:	68 5a b6 13 f0       	push   $0xf013b65a
f012f2bb:	e8 45 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f2c0:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f2c7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f2ce:	eb 48                	jmp    f012f318 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f2d0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f2d3:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f012f2d8:	83 ec 04             	sub    $0x4,%esp
f012f2db:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f2e1:	51                   	push   %ecx
f012f2e2:	52                   	push   %edx
f012f2e3:	50                   	push   %eax
f012f2e4:	e8 c8 77 fd ff       	call   f0106ab1 <get_page_table>
f012f2e9:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f2ec:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f2f2:	85 c0                	test   %eax,%eax
f012f2f4:	75 17                	jne    f012f30d <test_krealloc_BF+0x129d>
					panic(
f012f2f6:	83 ec 04             	sub    $0x4,%esp
f012f2f9:	68 5c bf 13 f0       	push   $0xf013bf5c
f012f2fe:	68 1f 12 00 00       	push   $0x121f
f012f303:	68 5a b6 13 f0       	push   $0xf013b65a
f012f308:	e8 f8 0e fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f30d:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f314:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f318:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f31c:	78 b2                	js     f012f2d0 <test_krealloc_BF+0x1260>
f012f31e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f322:	7f 09                	jg     f012f32d <test_krealloc_BF+0x12bd>
f012f324:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f32b:	76 a3                	jbe    f012f2d0 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f32d:	83 ec 0c             	sub    $0xc,%esp
f012f330:	68 a3 cb 13 f0       	push   $0xf013cba3
f012f335:	e8 d4 19 fd ff       	call   f0100d0e <cprintf>
f012f33a:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f33d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f343:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f349:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f350:	eb 21                	jmp    f012f373 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f352:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f358:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f35b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f361:	01 c8                	add    %ecx,%eax
f012f363:	8a 00                	mov    (%eax),%al
f012f365:	0f be c0             	movsbl %al,%eax
f012f368:	01 d0                	add    %edx,%eax
f012f36a:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f370:	ff 45 dc             	incl   -0x24(%ebp)
f012f373:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f379:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f37c:	7d d4                	jge    f012f352 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f37e:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f384:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f38a:	42                   	inc    %edx
f012f38b:	01 d2                	add    %edx,%edx
f012f38d:	39 d0                	cmp    %edx,%eax
f012f38f:	74 17                	je     f012f3a8 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f391:	83 ec 04             	sub    $0x4,%esp
f012f394:	68 ac cb 13 f0       	push   $0xf013cbac
f012f399:	68 31 12 00 00       	push   $0x1231
f012f39e:	68 5a b6 13 f0       	push   $0xf013b65a
f012f3a3:	e8 5d 0e fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f3a8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f3ae:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f3b4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f3bb:	eb 25                	jmp    f012f3e2 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f3bd:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f3c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f3c6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f3cd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f3d3:	01 c8                	add    %ecx,%eax
f012f3d5:	8b 00                	mov    (%eax),%eax
f012f3d7:	01 d0                	add    %edx,%eax
f012f3d9:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f3df:	ff 45 dc             	incl   -0x24(%ebp)
f012f3e2:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f3e8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f3eb:	7d d0                	jge    f012f3bd <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f3ed:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f3f3:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f3f9:	42                   	inc    %edx
f012f3fa:	c1 e2 02             	shl    $0x2,%edx
f012f3fd:	39 d0                	cmp    %edx,%eax
f012f3ff:	74 17                	je     f012f418 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f401:	83 ec 04             	sub    $0x4,%esp
f012f404:	68 ac cb 13 f0       	push   $0xf013cbac
f012f409:	68 3b 12 00 00       	push   $0x123b
f012f40e:	68 5a b6 13 f0       	push   $0xf013b65a
f012f413:	e8 ed 0d fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f418:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f41e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f424:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f42b:	eb 24                	jmp    f012f451 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f42d:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f433:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f436:	01 c0                	add    %eax,%eax
f012f438:	89 c1                	mov    %eax,%ecx
f012f43a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f440:	01 c8                	add    %ecx,%eax
f012f442:	66 8b 00             	mov    (%eax),%ax
f012f445:	98                   	cwtl   
f012f446:	01 d0                	add    %edx,%eax
f012f448:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f44e:	ff 45 dc             	incl   -0x24(%ebp)
f012f451:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f457:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f45a:	7d d1                	jge    f012f42d <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f45c:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f462:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f468:	8d 48 01             	lea    0x1(%eax),%ecx
f012f46b:	89 c8                	mov    %ecx,%eax
f012f46d:	c1 e0 02             	shl    $0x2,%eax
f012f470:	01 c8                	add    %ecx,%eax
f012f472:	39 c2                	cmp    %eax,%edx
f012f474:	74 17                	je     f012f48d <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f476:	83 ec 04             	sub    $0x4,%esp
f012f479:	68 ac cb 13 f0       	push   $0xf013cbac
f012f47e:	68 45 12 00 00       	push   $0x1245
f012f483:	68 5a b6 13 f0       	push   $0xf013b65a
f012f488:	e8 78 0d fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f48d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f493:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f499:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f4a0:	eb 70                	jmp    f012f512 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f4a2:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f4a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f4ab:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4b2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4b8:	01 c8                	add    %ecx,%eax
f012f4ba:	8a 00                	mov    (%eax),%al
f012f4bc:	0f be c0             	movsbl %al,%eax
f012f4bf:	01 d0                	add    %edx,%eax
f012f4c1:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f4c7:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f4cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f4d0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4d7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4dd:	01 c8                	add    %ecx,%eax
f012f4df:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f4e3:	98                   	cwtl   
f012f4e4:	01 d0                	add    %edx,%eax
f012f4e6:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f4ec:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f4f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f4f5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4fc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f502:	01 c8                	add    %ecx,%eax
f012f504:	8b 40 04             	mov    0x4(%eax),%eax
f012f507:	01 d0                	add    %edx,%eax
f012f509:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f50f:	ff 45 dc             	incl   -0x24(%ebp)
f012f512:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f518:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f51b:	7d 85                	jge    f012f4a2 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f51d:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f523:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f529:	8d 50 01             	lea    0x1(%eax),%edx
f012f52c:	89 d0                	mov    %edx,%eax
f012f52e:	01 c0                	add    %eax,%eax
f012f530:	01 d0                	add    %edx,%eax
f012f532:	01 c0                	add    %eax,%eax
f012f534:	01 d0                	add    %edx,%eax
f012f536:	39 c1                	cmp    %eax,%ecx
f012f538:	75 3a                	jne    f012f574 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f53a:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f540:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f546:	8d 50 01             	lea    0x1(%eax),%edx
f012f549:	89 d0                	mov    %edx,%eax
f012f54b:	01 c0                	add    %eax,%eax
f012f54d:	01 d0                	add    %edx,%eax
f012f54f:	01 c0                	add    %eax,%eax
f012f551:	01 d0                	add    %edx,%eax
f012f553:	39 c1                	cmp    %eax,%ecx
f012f555:	75 1d                	jne    f012f574 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f557:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f55d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f563:	8d 50 01             	lea    0x1(%eax),%edx
f012f566:	89 d0                	mov    %edx,%eax
f012f568:	01 c0                	add    %eax,%eax
f012f56a:	01 d0                	add    %edx,%eax
f012f56c:	01 c0                	add    %eax,%eax
f012f56e:	01 d0                	add    %edx,%eax
f012f570:	39 c1                	cmp    %eax,%ecx
f012f572:	74 17                	je     f012f58b <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f574:	83 ec 04             	sub    $0x4,%esp
f012f577:	68 ac cb 13 f0       	push   $0xf013cbac
f012f57c:	68 53 12 00 00       	push   $0x1253
f012f581:	68 5a b6 13 f0       	push   $0xf013b65a
f012f586:	e8 7a 0c fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f58b:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f592:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f595:	e8 09 d9 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f59a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f59d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f5a3:	83 ec 08             	sub    $0x8,%esp
f012f5a6:	68 00 3c 00 00       	push   $0x3c00
f012f5ab:	50                   	push   %eax
f012f5ac:	e8 9b 88 fd ff       	call   f0107e4c <krealloc>
f012f5b1:	83 c4 10             	add    $0x10,%esp
f012f5b4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f5ba:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f5c0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f5c5:	77 17                	ja     f012f5de <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f5c7:	83 ec 04             	sub    $0x4,%esp
f012f5ca:	68 00 c9 13 f0       	push   $0xf013c900
f012f5cf:	68 5f 12 00 00       	push   $0x125f
f012f5d4:	68 5a b6 13 f0       	push   $0xf013b65a
f012f5d9:	e8 27 0c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f5de:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f5e4:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f5ea:	74 17                	je     f012f603 <test_krealloc_BF+0x1593>
			panic(
f012f5ec:	83 ec 04             	sub    $0x4,%esp
f012f5ef:	68 e4 cb 13 f0       	push   $0xf013cbe4
f012f5f4:	68 62 12 00 00       	push   $0x1262
f012f5f9:	68 5a b6 13 f0       	push   $0xf013b65a
f012f5fe:	e8 02 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f603:	e8 9b d8 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f608:	89 c2                	mov    %eax,%edx
f012f60a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f60d:	39 c2                	cmp    %eax,%edx
f012f60f:	74 17                	je     f012f628 <test_krealloc_BF+0x15b8>
			panic(
f012f611:	83 ec 04             	sub    $0x4,%esp
f012f614:	68 50 cc 13 f0       	push   $0xf013cc50
f012f619:	68 65 12 00 00       	push   $0x1265
f012f61e:	68 5a b6 13 f0       	push   $0xf013b65a
f012f623:	e8 dd 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f628:	e8 76 d8 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f62d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f630:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f636:	83 ec 08             	sub    $0x8,%esp
f012f639:	68 00 fc 0f 00       	push   $0xffc00
f012f63e:	50                   	push   %eax
f012f63f:	e8 08 88 fd ff       	call   f0107e4c <krealloc>
f012f644:	83 c4 10             	add    $0x10,%esp
f012f647:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f64d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f653:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f658:	77 17                	ja     f012f671 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f65a:	83 ec 04             	sub    $0x4,%esp
f012f65d:	68 00 c9 13 f0       	push   $0xf013c900
f012f662:	68 6b 12 00 00       	push   $0x126b
f012f667:	68 5a b6 13 f0       	push   $0xf013b65a
f012f66c:	e8 94 0b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f671:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f677:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f67d:	74 17                	je     f012f696 <test_krealloc_BF+0x1626>
			panic(
f012f67f:	83 ec 04             	sub    $0x4,%esp
f012f682:	68 e4 cb 13 f0       	push   $0xf013cbe4
f012f687:	68 6e 12 00 00       	push   $0x126e
f012f68c:	68 5a b6 13 f0       	push   $0xf013b65a
f012f691:	e8 6f 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f696:	e8 08 d8 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f69b:	89 c2                	mov    %eax,%edx
f012f69d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f6a0:	39 c2                	cmp    %eax,%edx
f012f6a2:	74 17                	je     f012f6bb <test_krealloc_BF+0x164b>
			panic(
f012f6a4:	83 ec 04             	sub    $0x4,%esp
f012f6a7:	68 50 cc 13 f0       	push   $0xf013cc50
f012f6ac:	68 71 12 00 00       	push   $0x1271
f012f6b1:	68 5a b6 13 f0       	push   $0xf013b65a
f012f6b6:	e8 4a 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f6bb:	e8 e3 d7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f6c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f6c3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f6c9:	83 ec 08             	sub    $0x8,%esp
f012f6cc:	68 00 fc 0f 00       	push   $0xffc00
f012f6d1:	50                   	push   %eax
f012f6d2:	e8 75 87 fd ff       	call   f0107e4c <krealloc>
f012f6d7:	83 c4 10             	add    $0x10,%esp
f012f6da:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f6e0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f6e6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f6eb:	77 17                	ja     f012f704 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f6ed:	83 ec 04             	sub    $0x4,%esp
f012f6f0:	68 00 c9 13 f0       	push   $0xf013c900
f012f6f5:	68 77 12 00 00       	push   $0x1277
f012f6fa:	68 5a b6 13 f0       	push   $0xf013b65a
f012f6ff:	e8 01 0b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f704:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f70a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f710:	74 17                	je     f012f729 <test_krealloc_BF+0x16b9>
			panic(
f012f712:	83 ec 04             	sub    $0x4,%esp
f012f715:	68 e4 cb 13 f0       	push   $0xf013cbe4
f012f71a:	68 7a 12 00 00       	push   $0x127a
f012f71f:	68 5a b6 13 f0       	push   $0xf013b65a
f012f724:	e8 dc 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f729:	e8 75 d7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f72e:	89 c2                	mov    %eax,%edx
f012f730:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f733:	39 c2                	cmp    %eax,%edx
f012f735:	74 17                	je     f012f74e <test_krealloc_BF+0x16de>
			panic(
f012f737:	83 ec 04             	sub    $0x4,%esp
f012f73a:	68 50 cc 13 f0       	push   $0xf013cc50
f012f73f:	68 7d 12 00 00       	push   $0x127d
f012f744:	68 5a b6 13 f0       	push   $0xf013b65a
f012f749:	e8 b7 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f74e:	e8 50 d7 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f753:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f756:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f75c:	83 ec 08             	sub    $0x8,%esp
f012f75f:	68 00 fc 0f 00       	push   $0xffc00
f012f764:	50                   	push   %eax
f012f765:	e8 e2 86 fd ff       	call   f0107e4c <krealloc>
f012f76a:	83 c4 10             	add    $0x10,%esp
f012f76d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f773:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f779:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f77e:	77 17                	ja     f012f797 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f780:	83 ec 04             	sub    $0x4,%esp
f012f783:	68 00 c9 13 f0       	push   $0xf013c900
f012f788:	68 85 12 00 00       	push   $0x1285
f012f78d:	68 5a b6 13 f0       	push   $0xf013b65a
f012f792:	e8 6e 0a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f797:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f79d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f7a3:	74 17                	je     f012f7bc <test_krealloc_BF+0x174c>
			panic(
f012f7a5:	83 ec 04             	sub    $0x4,%esp
f012f7a8:	68 94 cc 13 f0       	push   $0xf013cc94
f012f7ad:	68 88 12 00 00       	push   $0x1288
f012f7b2:	68 5a b6 13 f0       	push   $0xf013b65a
f012f7b7:	e8 49 0a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f7bc:	e8 e2 d6 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f7c1:	89 c2                	mov    %eax,%edx
f012f7c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f7c6:	39 c2                	cmp    %eax,%edx
f012f7c8:	74 17                	je     f012f7e1 <test_krealloc_BF+0x1771>
			panic(
f012f7ca:	83 ec 04             	sub    $0x4,%esp
f012f7cd:	68 50 cc 13 f0       	push   $0xf013cc50
f012f7d2:	68 8b 12 00 00       	push   $0x128b
f012f7d7:	68 5a b6 13 f0       	push   $0xf013b65a
f012f7dc:	e8 24 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f7e1:	83 ec 0c             	sub    $0xc,%esp
f012f7e4:	68 73 be 13 f0       	push   $0xf013be73
f012f7e9:	e8 20 15 fd ff       	call   f0100d0e <cprintf>
f012f7ee:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f7f1:	e8 ad d6 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f7f6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f7f9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f7ff:	83 ec 08             	sub    $0x8,%esp
f012f802:	68 00 18 10 00       	push   $0x101800
f012f807:	50                   	push   %eax
f012f808:	e8 3f 86 fd ff       	call   f0107e4c <krealloc>
f012f80d:	83 c4 10             	add    $0x10,%esp
f012f810:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f813:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f816:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f81b:	77 17                	ja     f012f834 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f81d:	83 ec 04             	sub    $0x4,%esp
f012f820:	68 00 c9 13 f0       	push   $0xf013c900
f012f825:	68 93 12 00 00       	push   $0x1293
f012f82a:	68 5a b6 13 f0       	push   $0xf013b65a
f012f82f:	e8 d1 09 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f834:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f83a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f83d:	74 17                	je     f012f856 <test_krealloc_BF+0x17e6>
			panic(
f012f83f:	83 ec 04             	sub    $0x4,%esp
f012f842:	68 f4 cc 13 f0       	push   $0xf013ccf4
f012f847:	68 96 12 00 00       	push   $0x1296
f012f84c:	68 5a b6 13 f0       	push   $0xf013b65a
f012f851:	e8 af 09 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f856:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f859:	e8 45 d6 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f85e:	29 c3                	sub    %eax,%ebx
f012f860:	89 d8                	mov    %ebx,%eax
f012f862:	83 f8 02             	cmp    $0x2,%eax
f012f865:	74 17                	je     f012f87e <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f867:	83 ec 04             	sub    $0x4,%esp
f012f86a:	68 70 cd 13 f0       	push   $0xf013cd70
f012f86f:	68 98 12 00 00       	push   $0x1298
f012f874:	68 5a b6 13 f0       	push   $0xf013b65a
f012f879:	e8 87 09 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f87e:	e8 20 d6 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f883:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f886:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f88c:	83 ec 08             	sub    $0x8,%esp
f012f88f:	68 00 fc 3f 00       	push   $0x3ffc00
f012f894:	50                   	push   %eax
f012f895:	e8 b2 85 fd ff       	call   f0107e4c <krealloc>
f012f89a:	83 c4 10             	add    $0x10,%esp
f012f89d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f8a0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f8a3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f8a8:	77 17                	ja     f012f8c1 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f8aa:	83 ec 04             	sub    $0x4,%esp
f012f8ad:	68 00 c9 13 f0       	push   $0xf013c900
f012f8b2:	68 9e 12 00 00       	push   $0x129e
f012f8b7:	68 5a b6 13 f0       	push   $0xf013b65a
f012f8bc:	e8 44 09 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f8c1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f8c7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f8ca:	74 17                	je     f012f8e3 <test_krealloc_BF+0x1873>
			panic(
f012f8cc:	83 ec 04             	sub    $0x4,%esp
f012f8cf:	68 f4 cc 13 f0       	push   $0xf013ccf4
f012f8d4:	68 a1 12 00 00       	push   $0x12a1
f012f8d9:	68 5a b6 13 f0       	push   $0xf013b65a
f012f8de:	e8 22 09 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f8e3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f8e6:	e8 b8 d5 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f8eb:	29 c3                	sub    %eax,%ebx
f012f8ed:	89 d8                	mov    %ebx,%eax
f012f8ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f8f4:	74 17                	je     f012f90d <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f8f6:	83 ec 04             	sub    $0x4,%esp
f012f8f9:	68 70 cd 13 f0       	push   $0xf013cd70
f012f8fe:	68 a4 12 00 00       	push   $0x12a4
f012f903:	68 5a b6 13 f0       	push   $0xf013b65a
f012f908:	e8 f8 08 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012f90d:	83 ec 0c             	sub    $0xc,%esp
f012f910:	68 b8 be 13 f0       	push   $0xf013beb8
f012f915:	e8 f4 13 fd ff       	call   f0100d0e <cprintf>
f012f91a:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f91d:	e8 81 d5 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012f922:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f925:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f92b:	83 ec 08             	sub    $0x8,%esp
f012f92e:	68 00 fc 9f 00       	push   $0x9ffc00
f012f933:	50                   	push   %eax
f012f934:	e8 13 85 fd ff       	call   f0107e4c <krealloc>
f012f939:	83 c4 10             	add    $0x10,%esp
f012f93c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f93f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f942:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f947:	77 17                	ja     f012f960 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f949:	83 ec 04             	sub    $0x4,%esp
f012f94c:	68 00 c9 13 f0       	push   $0xf013c900
f012f951:	68 af 12 00 00       	push   $0x12af
f012f956:	68 5a b6 13 f0       	push   $0xf013b65a
f012f95b:	e8 a5 08 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f960:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f967:	10 00 00 
f012f96a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f970:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f975:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f97b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f981:	ba 00 00 00 00       	mov    $0x0,%edx
f012f986:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f98c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f992:	29 d0                	sub    %edx,%eax
f012f994:	89 c1                	mov    %eax,%ecx
f012f996:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f99d:	10 00 00 
f012f9a0:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012f9a5:	0f b6 d0             	movzbl %al,%edx
f012f9a8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f9ae:	01 d0                	add    %edx,%eax
f012f9b0:	48                   	dec    %eax
f012f9b1:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f9b7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f9bd:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9c2:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f9c8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f9ce:	29 d0                	sub    %edx,%eax
f012f9d0:	01 c1                	add    %eax,%ecx
f012f9d2:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f9d9:	10 00 00 
f012f9dc:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012f9e1:	0f b6 c0             	movzbl %al,%eax
f012f9e4:	c1 e0 04             	shl    $0x4,%eax
f012f9e7:	89 c2                	mov    %eax,%edx
f012f9e9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f9ef:	01 d0                	add    %edx,%eax
f012f9f1:	48                   	dec    %eax
f012f9f2:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f9f8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f9fe:	ba 00 00 00 00       	mov    $0x0,%edx
f012fa03:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012fa09:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fa0f:	29 d0                	sub    %edx,%eax
f012fa11:	01 c8                	add    %ecx,%eax
f012fa13:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fa19:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa1c:	39 c2                	cmp    %eax,%edx
f012fa1e:	74 18                	je     f012fa38 <test_krealloc_BF+0x19c8>
			panic(
f012fa20:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa23:	50                   	push   %eax
f012fa24:	68 a4 cd 13 f0       	push   $0xf013cda4
f012fa29:	68 b3 12 00 00       	push   $0x12b3
f012fa2e:	68 5a b6 13 f0       	push   $0xf013b65a
f012fa33:	e8 cd 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fa38:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa3e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fa41:	75 17                	jne    f012fa5a <test_krealloc_BF+0x19ea>
			panic(
f012fa43:	83 ec 04             	sub    $0x4,%esp
f012fa46:	68 e8 cd 13 f0       	push   $0xf013cde8
f012fa4b:	68 b6 12 00 00       	push   $0x12b6
f012fa50:	68 5a b6 13 f0       	push   $0xf013b65a
f012fa55:	e8 ab 07 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012fa5a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fa5d:	e8 41 d4 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012fa62:	29 c3                	sub    %eax,%ebx
f012fa64:	89 d8                	mov    %ebx,%eax
f012fa66:	3d 00 06 00 00       	cmp    $0x600,%eax
f012fa6b:	74 17                	je     f012fa84 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012fa6d:	83 ec 04             	sub    $0x4,%esp
f012fa70:	68 70 cd 13 f0       	push   $0xf013cd70
f012fa75:	68 b9 12 00 00       	push   $0x12b9
f012fa7a:	68 5a b6 13 f0       	push   $0xf013b65a
f012fa7f:	e8 81 07 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012fa84:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa87:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012fa8d:	e8 11 d4 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012fa92:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012fa95:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fa9b:	83 ec 08             	sub    $0x8,%esp
f012fa9e:	68 00 fc 3f 00       	push   $0x3ffc00
f012faa3:	50                   	push   %eax
f012faa4:	e8 a3 83 fd ff       	call   f0107e4c <krealloc>
f012faa9:	83 c4 10             	add    $0x10,%esp
f012faac:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012faaf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fab2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fab7:	77 17                	ja     f012fad0 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fab9:	83 ec 04             	sub    $0x4,%esp
f012fabc:	68 00 c9 13 f0       	push   $0xf013c900
f012fac1:	68 c2 12 00 00       	push   $0x12c2
f012fac6:	68 5a b6 13 f0       	push   $0xf013b65a
f012facb:	e8 35 07 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fad0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fad6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fad9:	75 17                	jne    f012faf2 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fadb:	83 ec 04             	sub    $0x4,%esp
f012fade:	68 e8 cd 13 f0       	push   $0xf013cde8
f012fae3:	68 c4 12 00 00       	push   $0x12c4
f012fae8:	68 5a b6 13 f0       	push   $0xf013b65a
f012faed:	e8 13 07 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012faf2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012faf9:	10 00 00 
f012fafc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012fb02:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fb07:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012fb0d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fb13:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb18:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012fb1e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fb24:	29 d0                	sub    %edx,%eax
f012fb26:	89 c1                	mov    %eax,%ecx
f012fb28:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012fb2f:	10 00 00 
f012fb32:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012fb37:	0f b6 d0             	movzbl %al,%edx
f012fb3a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012fb40:	01 d0                	add    %edx,%eax
f012fb42:	48                   	dec    %eax
f012fb43:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012fb49:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fb4f:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb54:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012fb5a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fb60:	29 d0                	sub    %edx,%eax
f012fb62:	01 c1                	add    %eax,%ecx
f012fb64:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012fb6b:	10 00 00 
f012fb6e:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012fb73:	0f b6 c0             	movzbl %al,%eax
f012fb76:	c1 e0 04             	shl    $0x4,%eax
f012fb79:	89 c2                	mov    %eax,%edx
f012fb7b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012fb81:	01 d0                	add    %edx,%eax
f012fb83:	48                   	dec    %eax
f012fb84:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012fb8a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fb90:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb95:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012fb9b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fba1:	29 d0                	sub    %edx,%eax
f012fba3:	01 c8                	add    %ecx,%eax
f012fba5:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012fbab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fbae:	39 c2                	cmp    %eax,%edx
f012fbb0:	74 17                	je     f012fbc9 <test_krealloc_BF+0x1b59>
f012fbb2:	83 ec 04             	sub    $0x4,%esp
f012fbb5:	68 3c c9 13 f0       	push   $0xf013c93c
f012fbba:	68 c5 12 00 00       	push   $0x12c5
f012fbbf:	68 5a b6 13 f0       	push   $0xf013b65a
f012fbc4:	e8 3c 06 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012fbc9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fbcc:	e8 d2 d2 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012fbd1:	29 c3                	sub    %eax,%ebx
f012fbd3:	89 d8                	mov    %ebx,%eax
f012fbd5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012fbda:	74 17                	je     f012fbf3 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012fbdc:	83 ec 04             	sub    $0x4,%esp
f012fbdf:	68 70 cd 13 f0       	push   $0xf013cd70
f012fbe4:	68 c9 12 00 00       	push   $0x12c9
f012fbe9:	68 5a b6 13 f0       	push   $0xf013b65a
f012fbee:	e8 12 06 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012fbf3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fbf6:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fbfc:	e8 a2 d2 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012fc01:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012fc04:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fc0a:	83 ec 08             	sub    $0x8,%esp
f012fc0d:	68 00 fc 3f 01       	push   $0x13ffc00
f012fc12:	50                   	push   %eax
f012fc13:	e8 34 82 fd ff       	call   f0107e4c <krealloc>
f012fc18:	83 c4 10             	add    $0x10,%esp
f012fc1b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fc1e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc21:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fc26:	77 17                	ja     f012fc3f <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fc28:	83 ec 04             	sub    $0x4,%esp
f012fc2b:	68 00 c9 13 f0       	push   $0xf013c900
f012fc30:	68 cf 12 00 00       	push   $0x12cf
f012fc35:	68 5a b6 13 f0       	push   $0xf013b65a
f012fc3a:	e8 c6 05 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fc3f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fc45:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fc48:	75 17                	jne    f012fc61 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fc4a:	83 ec 04             	sub    $0x4,%esp
f012fc4d:	68 e8 cd 13 f0       	push   $0xf013cde8
f012fc52:	68 d1 12 00 00       	push   $0x12d1
f012fc57:	68 5a b6 13 f0       	push   $0xf013b65a
f012fc5c:	e8 a4 05 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012fc61:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012fc68:	10 00 00 
f012fc6b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012fc71:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fc76:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012fc7c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fc82:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc87:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012fc8d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fc93:	29 d0                	sub    %edx,%eax
f012fc95:	89 c1                	mov    %eax,%ecx
f012fc97:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012fc9e:	10 00 00 
f012fca1:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012fca6:	0f b6 d0             	movzbl %al,%edx
f012fca9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012fcaf:	01 d0                	add    %edx,%eax
f012fcb1:	48                   	dec    %eax
f012fcb2:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012fcb8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fcbe:	ba 00 00 00 00       	mov    $0x0,%edx
f012fcc3:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012fcc9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fccf:	29 d0                	sub    %edx,%eax
f012fcd1:	01 c1                	add    %eax,%ecx
f012fcd3:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012fcda:	10 00 00 
f012fcdd:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f012fce2:	0f b6 c0             	movzbl %al,%eax
f012fce5:	c1 e0 04             	shl    $0x4,%eax
f012fce8:	89 c2                	mov    %eax,%edx
f012fcea:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012fcf0:	01 d0                	add    %edx,%eax
f012fcf2:	48                   	dec    %eax
f012fcf3:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012fcf9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fcff:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd04:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012fd0a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fd10:	29 d0                	sub    %edx,%eax
f012fd12:	01 c8                	add    %ecx,%eax
f012fd14:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012fd1a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd1d:	39 c2                	cmp    %eax,%edx
f012fd1f:	74 17                	je     f012fd38 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012fd21:	83 ec 04             	sub    $0x4,%esp
f012fd24:	68 08 cf 13 f0       	push   $0xf013cf08
f012fd29:	68 d3 12 00 00       	push   $0x12d3
f012fd2e:	68 5a b6 13 f0       	push   $0xf013b65a
f012fd33:	e8 cd 04 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012fd38:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd3b:	e8 63 d1 fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012fd40:	29 c3                	sub    %eax,%ebx
f012fd42:	89 d8                	mov    %ebx,%eax
f012fd44:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012fd49:	74 17                	je     f012fd62 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012fd4b:	83 ec 04             	sub    $0x4,%esp
f012fd4e:	68 70 cd 13 f0       	push   $0xf013cd70
f012fd53:	68 d6 12 00 00       	push   $0x12d6
f012fd58:	68 5a b6 13 f0       	push   $0xf013b65a
f012fd5d:	e8 a3 04 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012fd62:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd65:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012fd6b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fd71:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012fd77:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fd7e:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fd81:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fd88:	eb 21                	jmp    f012fdab <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012fd8a:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fd90:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012fd93:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012fd99:	01 c8                	add    %ecx,%eax
f012fd9b:	8a 00                	mov    (%eax),%al
f012fd9d:	0f be c0             	movsbl %al,%eax
f012fda0:	01 d0                	add    %edx,%eax
f012fda2:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fda8:	ff 45 d8             	incl   -0x28(%ebp)
f012fdab:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012fdb1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fdb4:	7d d4                	jge    f012fd8a <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012fdb6:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012fdbc:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012fdc2:	42                   	inc    %edx
f012fdc3:	01 d2                	add    %edx,%edx
f012fdc5:	39 d0                	cmp    %edx,%eax
f012fdc7:	74 17                	je     f012fde0 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012fdc9:	83 ec 04             	sub    $0x4,%esp
f012fdcc:	68 a0 ce 13 f0       	push   $0xf013cea0
f012fdd1:	68 e4 12 00 00       	push   $0x12e4
f012fdd6:	68 5a b6 13 f0       	push   $0xf013b65a
f012fddb:	e8 25 04 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012fde0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fde6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012fdec:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fdf3:	00 00 00 
		sums[1] = 0;
f012fdf6:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012fdfd:	00 00 00 
		sums[2] = 0;
f012fe00:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012fe07:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fe0a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fe11:	eb 70                	jmp    f012fe83 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012fe13:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fe19:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe1c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fe23:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fe29:	01 c8                	add    %ecx,%eax
f012fe2b:	8a 00                	mov    (%eax),%al
f012fe2d:	0f be c0             	movsbl %al,%eax
f012fe30:	01 d0                	add    %edx,%eax
f012fe32:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012fe38:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012fe3e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe41:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fe48:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fe4e:	01 c8                	add    %ecx,%eax
f012fe50:	66 8b 40 02          	mov    0x2(%eax),%ax
f012fe54:	98                   	cwtl   
f012fe55:	01 d0                	add    %edx,%eax
f012fe57:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012fe5d:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012fe63:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe66:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fe6d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fe73:	01 c8                	add    %ecx,%eax
f012fe75:	8b 40 04             	mov    0x4(%eax),%eax
f012fe78:	01 d0                	add    %edx,%eax
f012fe7a:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fe80:	ff 45 d8             	incl   -0x28(%ebp)
f012fe83:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fe89:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fe8c:	7d 85                	jge    f012fe13 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012fe8e:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012fe94:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fe9a:	8d 50 01             	lea    0x1(%eax),%edx
f012fe9d:	89 d0                	mov    %edx,%eax
f012fe9f:	01 c0                	add    %eax,%eax
f012fea1:	01 d0                	add    %edx,%eax
f012fea3:	01 c0                	add    %eax,%eax
f012fea5:	01 d0                	add    %edx,%eax
f012fea7:	39 c1                	cmp    %eax,%ecx
f012fea9:	75 3a                	jne    f012fee5 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012feab:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012feb1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012feb7:	8d 50 01             	lea    0x1(%eax),%edx
f012feba:	89 d0                	mov    %edx,%eax
f012febc:	01 c0                	add    %eax,%eax
f012febe:	01 d0                	add    %edx,%eax
f012fec0:	01 c0                	add    %eax,%eax
f012fec2:	01 d0                	add    %edx,%eax
f012fec4:	39 c1                	cmp    %eax,%ecx
f012fec6:	75 1d                	jne    f012fee5 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012fec8:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012fece:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fed4:	8d 50 01             	lea    0x1(%eax),%edx
f012fed7:	89 d0                	mov    %edx,%eax
f012fed9:	01 c0                	add    %eax,%eax
f012fedb:	01 d0                	add    %edx,%eax
f012fedd:	01 c0                	add    %eax,%eax
f012fedf:	01 d0                	add    %edx,%eax
f012fee1:	39 c1                	cmp    %eax,%ecx
f012fee3:	74 17                	je     f012fefc <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012fee5:	83 ec 04             	sub    $0x4,%esp
f012fee8:	68 a0 ce 13 f0       	push   $0xf013cea0
f012feed:	68 f6 12 00 00       	push   $0x12f6
f012fef2:	68 5a b6 13 f0       	push   $0xf013b65a
f012fef7:	e8 09 03 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012fefc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ff02:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012ff08:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ff0f:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ff12:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ff19:	eb 24                	jmp    f012ff3f <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012ff1b:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ff21:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ff24:	01 c0                	add    %eax,%eax
f012ff26:	89 c1                	mov    %eax,%ecx
f012ff28:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ff2e:	01 c8                	add    %ecx,%eax
f012ff30:	66 8b 00             	mov    (%eax),%ax
f012ff33:	98                   	cwtl   
f012ff34:	01 d0                	add    %edx,%eax
f012ff36:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ff3c:	ff 45 d8             	incl   -0x28(%ebp)
f012ff3f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ff45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ff48:	7d d1                	jge    f012ff1b <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012ff4a:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ff50:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ff56:	8d 48 01             	lea    0x1(%eax),%ecx
f012ff59:	89 c8                	mov    %ecx,%eax
f012ff5b:	c1 e0 02             	shl    $0x2,%eax
f012ff5e:	01 c8                	add    %ecx,%eax
f012ff60:	39 c2                	cmp    %eax,%edx
f012ff62:	74 17                	je     f012ff7b <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012ff64:	83 ec 04             	sub    $0x4,%esp
f012ff67:	68 a0 ce 13 f0       	push   $0xf013cea0
f012ff6c:	68 00 13 00 00       	push   $0x1300
f012ff71:	68 5a b6 13 f0       	push   $0xf013b65a
f012ff76:	e8 8a 02 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ff7b:	e8 23 cf fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012ff80:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ff83:	e8 40 3e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ff88:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012ff8e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ff94:	83 ec 08             	sub    $0x8,%esp
f012ff97:	6a 00                	push   $0x0
f012ff99:	50                   	push   %eax
f012ff9a:	e8 ad 7e fd ff       	call   f0107e4c <krealloc>
f012ff9f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ffa2:	e8 21 3e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ffa7:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ffad:	74 17                	je     f012ffc6 <test_krealloc_BF+0x1f56>
			panic(
f012ffaf:	83 ec 04             	sub    $0x4,%esp
f012ffb2:	68 74 b6 13 f0       	push   $0xf013b674
f012ffb7:	68 08 13 00 00       	push   $0x1308
f012ffbc:	68 5a b6 13 f0       	push   $0xf013b65a
f012ffc1:	e8 3f 02 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012ffc6:	e8 d8 ce fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012ffcb:	89 c2                	mov    %eax,%edx
f012ffcd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ffd0:	29 c2                	sub    %eax,%edx
f012ffd2:	89 d0                	mov    %edx,%eax
f012ffd4:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012ffd9:	74 17                	je     f012fff2 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012ffdb:	83 ec 04             	sub    $0x4,%esp
f012ffde:	68 30 cb 13 f0       	push   $0xf013cb30
f012ffe3:	68 0a 13 00 00       	push   $0x130a
f012ffe8:	68 5a b6 13 f0       	push   $0xf013b65a
f012ffed:	e8 13 02 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012fff2:	e8 ac ce fd ff       	call   f010cea3 <sys_calculate_free_frames>
f012fff7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012fffa:	e8 c9 3d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ffff:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f0130005:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f013000b:	83 ec 0c             	sub    $0xc,%esp
f013000e:	50                   	push   %eax
f013000f:	e8 43 7c fd ff       	call   f0107c57 <kfree>
f0130014:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0130017:	e8 ac 3d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f013001c:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130022:	74 17                	je     f013003b <test_krealloc_BF+0x1fcb>
			panic(
f0130024:	83 ec 04             	sub    $0x4,%esp
f0130027:	68 74 b6 13 f0       	push   $0xf013b674
f013002c:	68 12 13 00 00       	push   $0x1312
f0130031:	68 5a b6 13 f0       	push   $0xf013b65a
f0130036:	e8 ca 01 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f013003b:	e8 63 ce fd ff       	call   f010cea3 <sys_calculate_free_frames>
f0130040:	89 c2                	mov    %eax,%edx
f0130042:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130045:	29 c2                	sub    %eax,%edx
f0130047:	89 d0                	mov    %edx,%eax
f0130049:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f013004e:	74 17                	je     f0130067 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f0130050:	83 ec 04             	sub    $0x4,%esp
f0130053:	68 30 cb 13 f0       	push   $0xf013cb30
f0130058:	68 14 13 00 00       	push   $0x1314
f013005d:	68 5a b6 13 f0       	push   $0xf013b65a
f0130062:	e8 9e 01 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f0130067:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f013006e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0130075:	eb 48                	jmp    f01300bf <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f0130077:	8b 55 d0             	mov    -0x30(%ebp),%edx
f013007a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f013007f:	83 ec 04             	sub    $0x4,%esp
f0130082:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f0130088:	51                   	push   %ecx
f0130089:	52                   	push   %edx
f013008a:	50                   	push   %eax
f013008b:	e8 21 6a fd ff       	call   f0106ab1 <get_page_table>
f0130090:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f0130093:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0130099:	85 c0                	test   %eax,%eax
f013009b:	75 17                	jne    f01300b4 <test_krealloc_BF+0x2044>
					panic(
f013009d:	83 ec 04             	sub    $0x4,%esp
f01300a0:	68 5c bf 13 f0       	push   $0xf013bf5c
f01300a5:	68 21 13 00 00       	push   $0x1321
f01300aa:	68 5a b6 13 f0       	push   $0xf013b65a
f01300af:	e8 51 01 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01300b4:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f01300bb:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f01300bf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01300c3:	78 b2                	js     f0130077 <test_krealloc_BF+0x2007>
f01300c5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01300c9:	7f 09                	jg     f01300d4 <test_krealloc_BF+0x2064>
f01300cb:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01300d2:	76 a3                	jbe    f0130077 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f01300d4:	83 ec 0c             	sub    $0xc,%esp
f01300d7:	68 3e b8 13 f0       	push   $0xf013b83e
f01300dc:	e8 2d 0c fd ff       	call   f0100d0e <cprintf>
f01300e1:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f01300e4:	83 ec 0c             	sub    $0xc,%esp
f01300e7:	68 40 cf 13 f0       	push   $0xf013cf40
f01300ec:	e8 1d 0c fd ff       	call   f0100d0e <cprintf>
f01300f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01300f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01300f9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01300fc:	5b                   	pop    %ebx
f01300fd:	5f                   	pop    %edi
f01300fe:	5d                   	pop    %ebp
f01300ff:	c3                   	ret    

f0130100 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f0130100:	55                   	push   %ebp
f0130101:	89 e5                	mov    %esp,%ebp
f0130103:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f0130106:	a1 04 ed 88 f0       	mov    0xf088ed04,%eax
f013010b:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f0130110:	74 17                	je     f0130129 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f0130112:	83 ec 04             	sub    $0x4,%esp
f0130115:	68 80 cf 13 f0       	push   $0xf013cf80
f013011a:	68 39 13 00 00       	push   $0x1339
f013011f:	68 5a b6 13 f0       	push   $0xf013b65a
f0130124:	e8 dc 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f0130129:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f013012e:	8b 15 04 ed 88 f0    	mov    0xf088ed04,%edx
f0130134:	4a                   	dec    %edx
f0130135:	39 d0                	cmp    %edx,%eax
f0130137:	74 17                	je     f0130150 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f0130139:	83 ec 04             	sub    $0x4,%esp
f013013c:	68 d4 cf 13 f0       	push   $0xf013cfd4
f0130141:	68 3f 13 00 00       	push   $0x133f
f0130146:	68 5a b6 13 f0       	push   $0xf013b65a
f013014b:	e8 b5 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0130150:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0130155:	85 c0                	test   %eax,%eax
f0130157:	74 17                	je     f0130170 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f0130159:	83 ec 04             	sub    $0x4,%esp
f013015c:	68 10 d0 13 f0       	push   $0xf013d010
f0130161:	68 45 13 00 00       	push   $0x1345
f0130166:	68 5a b6 13 f0       	push   $0xf013b65a
f013016b:	e8 95 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0130170:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0130175:	83 f8 01             	cmp    $0x1,%eax
f0130178:	74 17                	je     f0130191 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f013017a:	83 ec 04             	sub    $0x4,%esp
f013017d:	68 48 d0 13 f0       	push   $0xf013d048
f0130182:	68 4b 13 00 00       	push   $0x134b
f0130187:	68 5a b6 13 f0       	push   $0xf013b65a
f013018c:	e8 74 00 fd ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f0130191:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0130196:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f0130199:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013019d:	74 66                	je     f0130205 <test_initialize_dyn_block_system+0x105>
f013019f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301a2:	8b 48 0c             	mov    0xc(%eax),%ecx
f01301a5:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01301ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01301af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01301b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01301b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01301ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01301bf:	f7 75 ec             	divl   -0x14(%ebp)
f01301c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01301c5:	29 d0                	sub    %edx,%eax
f01301c7:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f01301cc:	29 c2                	sub    %eax,%edx
f01301ce:	89 d0                	mov    %edx,%eax
f01301d0:	39 c1                	cmp    %eax,%ecx
f01301d2:	75 31                	jne    f0130205 <test_initialize_dyn_block_system+0x105>
f01301d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301d7:	8b 48 08             	mov    0x8(%eax),%ecx
f01301da:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01301e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01301e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01301e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01301ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01301ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01301f4:	f7 75 e4             	divl   -0x1c(%ebp)
f01301f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01301fa:	29 d0                	sub    %edx,%eax
f01301fc:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130201:	39 c1                	cmp    %eax,%ecx
f0130203:	74 17                	je     f013021c <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f0130205:	83 ec 04             	sub    $0x4,%esp
f0130208:	68 80 d0 13 f0       	push   $0xf013d080
f013020d:	68 52 13 00 00       	push   $0x1352
f0130212:	68 5a b6 13 f0       	push   $0xf013b65a
f0130217:	e8 e9 ff fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f013021c:	8b 45 14             	mov    0x14(%ebp),%eax
f013021f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130222:	74 17                	je     f013023b <test_initialize_dyn_block_system+0x13b>
f0130224:	83 ec 04             	sub    $0x4,%esp
f0130227:	68 74 b6 13 f0       	push   $0xf013b674
f013022c:	68 56 13 00 00       	push   $0x1356
f0130231:	68 5a b6 13 f0       	push   $0xf013b65a
f0130236:	e8 ca ff fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f013023b:	8b 45 08             	mov    0x8(%ebp),%eax
f013023e:	2b 45 10             	sub    0x10(%ebp),%eax
f0130241:	3d a0 00 00 00       	cmp    $0xa0,%eax
f0130246:	74 1b                	je     f0130263 <test_initialize_dyn_block_system+0x163>
f0130248:	8b 45 08             	mov    0x8(%ebp),%eax
f013024b:	2b 45 10             	sub    0x10(%ebp),%eax
f013024e:	50                   	push   %eax
f013024f:	68 bc d0 13 f0       	push   $0xf013d0bc
f0130254:	68 57 13 00 00       	push   $0x1357
f0130259:	68 5a b6 13 f0       	push   $0xf013b65a
f013025e:	e8 a2 ff fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f0130263:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f013026a:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f013026f:	83 ec 04             	sub    $0x4,%esp
f0130272:	6a 00                	push   $0x0
f0130274:	ff 75 f4             	pushl  -0xc(%ebp)
f0130277:	50                   	push   %eax
f0130278:	e8 e9 5f fe ff       	call   f0116266 <CB>
f013027d:	83 c4 10             	add    $0x10,%esp
f0130280:	83 f8 01             	cmp    $0x1,%eax
f0130283:	75 35                	jne    f01302ba <test_initialize_dyn_block_system+0x1ba>
f0130285:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f013028a:	83 ec 04             	sub    $0x4,%esp
f013028d:	6a 01                	push   $0x1
f013028f:	ff 75 f4             	pushl  -0xc(%ebp)
f0130292:	50                   	push   %eax
f0130293:	e8 ce 5f fe ff       	call   f0116266 <CB>
f0130298:	83 c4 10             	add    $0x10,%esp
f013029b:	83 f8 01             	cmp    $0x1,%eax
f013029e:	75 1a                	jne    f01302ba <test_initialize_dyn_block_system+0x1ba>
f01302a0:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f01302a5:	83 ec 04             	sub    $0x4,%esp
f01302a8:	6a 02                	push   $0x2
f01302aa:	ff 75 f4             	pushl  -0xc(%ebp)
f01302ad:	50                   	push   %eax
f01302ae:	e8 b3 5f fe ff       	call   f0116266 <CB>
f01302b3:	83 c4 10             	add    $0x10,%esp
f01302b6:	85 c0                	test   %eax,%eax
f01302b8:	74 17                	je     f01302d1 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f01302ba:	83 ec 04             	sub    $0x4,%esp
f01302bd:	68 00 d1 13 f0       	push   $0xf013d100
f01302c2:	68 5f 13 00 00       	push   $0x135f
f01302c7:	68 5a b6 13 f0       	push   $0xf013b65a
f01302cc:	e8 34 ff fc ff       	call   f0100205 <_panic>

			a+=4096;
f01302d1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f01302d8:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01302df:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01302e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01302e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01302ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01302f2:	f7 75 dc             	divl   -0x24(%ebp)
f01302f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302f8:	29 d0                	sub    %edx,%eax
f01302fa:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01302ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130302:	74 05                	je     f0130309 <test_initialize_dyn_block_system+0x209>
				break;
		}
f0130304:	e9 61 ff ff ff       	jmp    f013026a <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f0130309:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f013030a:	83 ec 0c             	sub    $0xc,%esp
f013030d:	68 60 d1 13 f0       	push   $0xf013d160
f0130312:	e8 f7 09 fd ff       	call   f0100d0e <cprintf>
f0130317:	83 c4 10             	add    $0x10,%esp
	return 0;
f013031a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013031f:	c9                   	leave  
f0130320:	c3                   	ret    

f0130321 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0130321:	55                   	push   %ebp
f0130322:	89 e5                	mov    %esp,%ebp
f0130324:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130327:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013032b:	77 07                	ja     f0130334 <nearest_pow2_ceil+0x13>
f013032d:	b8 01 00 00 00       	mov    $0x1,%eax
f0130332:	eb 20                	jmp    f0130354 <nearest_pow2_ceil+0x33>
    int power = 2;
f0130334:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f013033b:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f013033e:	eb 08                	jmp    f0130348 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f0130340:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130343:	01 c0                	add    %eax,%eax
f0130345:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f0130348:	d1 6d 08             	shrl   0x8(%ebp)
f013034b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013034f:	75 ef                	jne    f0130340 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f0130351:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130354:	c9                   	leave  
f0130355:	c3                   	ret    

f0130356 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f0130356:	55                   	push   %ebp
f0130357:	89 e5                	mov    %esp,%ebp
f0130359:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f013035c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130360:	77 07                	ja     f0130369 <log2_ceil+0x13>
f0130362:	b8 01 00 00 00       	mov    $0x1,%eax
f0130367:	eb 1b                	jmp    f0130384 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f0130369:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130370:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130373:	eb 03                	jmp    f0130378 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f0130375:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f0130378:	d1 6d 08             	shrl   0x8(%ebp)
f013037b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013037f:	75 f4                	jne    f0130375 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f0130381:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130384:	c9                   	leave  
f0130385:	c3                   	ret    

f0130386 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f0130386:	55                   	push   %ebp
f0130387:	89 e5                	mov    %esp,%ebp
f0130389:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f013038c:	8b 45 08             	mov    0x8(%ebp),%eax
f013038f:	8b 00                	mov    (%eax),%eax
f0130391:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f0130394:	8b 45 08             	mov    0x8(%ebp),%eax
f0130397:	8b 00                	mov    (%eax),%eax
f0130399:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f013039c:	eb 52                	jmp    f01303f0 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f013039e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303a1:	8b 00                	mov    (%eax),%eax
f01303a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01303a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01303ac:	75 12                	jne    f01303c0 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01303ae:	83 ec 0c             	sub    $0xc,%esp
f01303b1:	68 b8 d1 13 f0       	push   $0xf013d1b8
f01303b6:	e8 53 09 fd ff       	call   f0100d0e <cprintf>
f01303bb:	83 c4 10             	add    $0x10,%esp
			break;
f01303be:	eb 3f                	jmp    f01303ff <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f01303c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01303c4:	74 38                	je     f01303fe <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01303c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303c9:	8b 00                	mov    (%eax),%eax
f01303cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f01303ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01303d4:	75 12                	jne    f01303e8 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f01303d6:	83 ec 0c             	sub    $0xc,%esp
f01303d9:	68 d4 d1 13 f0       	push   $0xf013d1d4
f01303de:	e8 2b 09 fd ff       	call   f0100d0e <cprintf>
f01303e3:	83 c4 10             	add    $0x10,%esp
			break;
f01303e6:	eb 17                	jmp    f01303ff <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f01303e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01303eb:	8b 00                	mov    (%eax),%eax
f01303ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f01303f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01303f4:	74 09                	je     f01303ff <detect_loop_in_FrameInfo_list+0x79>
f01303f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01303fa:	75 a2                	jne    f013039e <detect_loop_in_FrameInfo_list+0x18>
f01303fc:	eb 01                	jmp    f01303ff <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f01303fe:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f01303ff:	83 ec 0c             	sub    $0xc,%esp
f0130402:	68 eb d1 13 f0       	push   $0xf013d1eb
f0130407:	e8 02 09 fd ff       	call   f0100d0e <cprintf>
f013040c:	83 c4 10             	add    $0x10,%esp
}
f013040f:	90                   	nop
f0130410:	c9                   	leave  
f0130411:	c3                   	ret    

f0130412 <scarce_memory>:

void scarce_memory()
{
f0130412:	55                   	push   %ebp
f0130413:	89 e5                	mov    %esp,%ebp
f0130415:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f0130418:	a1 f0 ec 88 f0       	mov    0xf088ecf0,%eax
f013041d:	ba 64 00 00 00       	mov    $0x64,%edx
f0130422:	29 c2                	sub    %eax,%edx
f0130424:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0130429:	0f af c2             	imul   %edx,%eax
f013042c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130431:	f7 e2                	mul    %edx
f0130433:	89 d0                	mov    %edx,%eax
f0130435:	c1 e8 05             	shr    $0x5,%eax
f0130438:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f013043b:	a1 f0 ec 88 f0       	mov    0xf088ecf0,%eax
f0130440:	ba 64 00 00 00       	mov    $0x64,%edx
f0130445:	29 c2                	sub    %eax,%edx
f0130447:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f013044c:	89 d1                	mov    %edx,%ecx
f013044e:	0f af c8             	imul   %eax,%ecx
f0130451:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130456:	f7 e1                	mul    %ecx
f0130458:	c1 ea 05             	shr    $0x5,%edx
f013045b:	89 d0                	mov    %edx,%eax
f013045d:	c1 e0 02             	shl    $0x2,%eax
f0130460:	01 d0                	add    %edx,%eax
f0130462:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130469:	01 d0                	add    %edx,%eax
f013046b:	c1 e0 02             	shl    $0x2,%eax
f013046e:	29 c1                	sub    %eax,%ecx
f0130470:	89 ca                	mov    %ecx,%edx
f0130472:	85 d2                	test   %edx,%edx
f0130474:	74 03                	je     f0130479 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f0130476:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f0130479:	8b 15 10 ed 88 f0    	mov    0xf088ed10,%edx
f013047f:	a1 24 ed 88 f0       	mov    0xf088ed24,%eax
f0130484:	29 c2                	sub    %eax,%edx
f0130486:	89 d0                	mov    %edx,%eax
f0130488:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f013048b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013048e:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0130491:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f0130494:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f013049b:	eb 12                	jmp    f01304af <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f013049d:	83 ec 0c             	sub    $0xc,%esp
f01304a0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01304a3:	50                   	push   %eax
f01304a4:	e8 49 64 fd ff       	call   f01068f2 <allocate_frame>
f01304a9:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01304ac:	ff 45 f0             	incl   -0x10(%ebp)
f01304af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01304b2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01304b5:	76 e6                	jbe    f013049d <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01304b7:	90                   	nop
f01304b8:	c9                   	leave  
f01304b9:	c3                   	ret    

f01304ba <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01304ba:	55                   	push   %ebp
f01304bb:	89 e5                	mov    %esp,%ebp
f01304bd:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f01304c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01304c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f01304ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f01304d5:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01304d9:	0f 85 d0 01 00 00    	jne    f01306af <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01304df:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01304e6:	e9 de 00 00 00       	jmp    f01305c9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f01304eb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01304f2:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01304f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01304fa:	c1 e2 04             	shl    $0x4,%edx
f01304fd:	01 d0                	add    %edx,%eax
f01304ff:	8b 00                	mov    (%eax),%eax
f0130501:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130504:	e9 85 00 00 00       	jmp    f013058e <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f0130509:	83 ec 0c             	sub    $0xc,%esp
f013050c:	ff 75 e4             	pushl  -0x1c(%ebp)
f013050f:	e8 09 7c fd ff       	call   f010811d <env_page_ws_get_size>
f0130514:	83 c4 10             	add    $0x10,%esp
f0130517:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013051a:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f013051f:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130525:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130528:	0f af c2             	imul   %edx,%eax
f013052b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130530:	f7 e2                	mul    %edx
f0130532:	89 d0                	mov    %edx,%eax
f0130534:	c1 e8 05             	shr    $0x5,%eax
f0130537:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013053a:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f013053f:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130545:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130548:	89 d1                	mov    %edx,%ecx
f013054a:	0f af c8             	imul   %eax,%ecx
f013054d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130552:	f7 e1                	mul    %ecx
f0130554:	c1 ea 05             	shr    $0x5,%edx
f0130557:	89 d0                	mov    %edx,%eax
f0130559:	c1 e0 02             	shl    $0x2,%eax
f013055c:	01 d0                	add    %edx,%eax
f013055e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130565:	01 d0                	add    %edx,%eax
f0130567:	c1 e0 02             	shl    $0x2,%eax
f013056a:	29 c1                	sub    %eax,%ecx
f013056c:	89 ca                	mov    %ecx,%edx
f013056e:	85 d2                	test   %edx,%edx
f0130570:	74 03                	je     f0130575 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f0130572:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f0130575:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130578:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f013057b:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130580:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130583:	c1 e2 04             	shl    $0x4,%edx
f0130586:	01 d0                	add    %edx,%eax
f0130588:	8b 40 08             	mov    0x8(%eax),%eax
f013058b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013058e:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130593:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130596:	c1 e2 04             	shl    $0x4,%edx
f0130599:	01 d0                	add    %edx,%eax
f013059b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013059f:	74 08                	je     f01305a9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f01305a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01305a4:	8b 52 44             	mov    0x44(%edx),%edx
f01305a7:	eb 05                	jmp    f01305ae <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f01305a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01305ae:	89 50 08             	mov    %edx,0x8(%eax)
f01305b1:	8b 40 08             	mov    0x8(%eax),%eax
f01305b4:	85 c0                	test   %eax,%eax
f01305b6:	0f 85 4d ff ff ff    	jne    f0130509 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f01305bc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01305c0:	0f 85 43 ff ff ff    	jne    f0130509 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01305c6:	ff 45 e8             	incl   -0x18(%ebp)
f01305c9:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f01305ce:	0f b6 c0             	movzbl %al,%eax
f01305d1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01305d4:	0f 8f 11 ff ff ff    	jg     f01304eb <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f01305da:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01305e1:	a1 f4 ec 88 f0       	mov    0xf088ecf4,%eax
f01305e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01305e9:	eb 19                	jmp    f0130604 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f01305eb:	83 ec 0c             	sub    $0xc,%esp
f01305ee:	ff 75 dc             	pushl  -0x24(%ebp)
f01305f1:	e8 27 7b fd ff       	call   f010811d <env_page_ws_get_size>
f01305f6:	83 c4 10             	add    $0x10,%esp
f01305f9:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01305fc:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0130601:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130604:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130608:	74 08                	je     f0130612 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f013060a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013060d:	8b 40 44             	mov    0x44(%eax),%eax
f0130610:	eb 05                	jmp    f0130617 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130612:	b8 00 00 00 00       	mov    $0x0,%eax
f0130617:	a3 fc ec 88 f0       	mov    %eax,0xf088ecfc
f013061c:	a1 fc ec 88 f0       	mov    0xf088ecfc,%eax
f0130621:	85 c0                	test   %eax,%eax
f0130623:	75 c6                	jne    f01305eb <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130625:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130629:	75 c0                	jne    f01305eb <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f013062b:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130630:	85 c0                	test   %eax,%eax
f0130632:	0f 84 ec 00 00 00    	je     f0130724 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130638:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f013063d:	83 ec 0c             	sub    $0xc,%esp
f0130640:	50                   	push   %eax
f0130641:	e8 d7 7a fd ff       	call   f010811d <env_page_ws_get_size>
f0130646:	83 c4 10             	add    $0x10,%esp
f0130649:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013064c:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130651:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130657:	8b 45 cc             	mov    -0x34(%ebp),%eax
f013065a:	0f af c2             	imul   %edx,%eax
f013065d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130662:	f7 e2                	mul    %edx
f0130664:	89 d0                	mov    %edx,%eax
f0130666:	c1 e8 05             	shr    $0x5,%eax
f0130669:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013066c:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130671:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130677:	8b 45 cc             	mov    -0x34(%ebp),%eax
f013067a:	89 d1                	mov    %edx,%ecx
f013067c:	0f af c8             	imul   %eax,%ecx
f013067f:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130684:	f7 e1                	mul    %ecx
f0130686:	c1 ea 05             	shr    $0x5,%edx
f0130689:	89 d0                	mov    %edx,%eax
f013068b:	c1 e0 02             	shl    $0x2,%eax
f013068e:	01 d0                	add    %edx,%eax
f0130690:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130697:	01 d0                	add    %edx,%eax
f0130699:	c1 e0 02             	shl    $0x2,%eax
f013069c:	29 c1                	sub    %eax,%ecx
f013069e:	89 ca                	mov    %ecx,%edx
f01306a0:	85 d2                	test   %edx,%edx
f01306a2:	74 03                	je     f01306a7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f01306a4:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01306a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01306aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01306ad:	eb 75                	jmp    f0130724 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f01306af:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01306b4:	83 ec 0c             	sub    $0xc,%esp
f01306b7:	50                   	push   %eax
f01306b8:	e8 60 7a fd ff       	call   f010811d <env_page_ws_get_size>
f01306bd:	83 c4 10             	add    $0x10,%esp
f01306c0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01306c3:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01306c8:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01306ce:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01306d1:	0f af c2             	imul   %edx,%eax
f01306d4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01306d9:	f7 e2                	mul    %edx
f01306db:	89 d0                	mov    %edx,%eax
f01306dd:	c1 e8 05             	shr    $0x5,%eax
f01306e0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01306e3:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01306e8:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01306ee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01306f1:	89 d1                	mov    %edx,%ecx
f01306f3:	0f af c8             	imul   %eax,%ecx
f01306f6:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01306fb:	f7 e1                	mul    %ecx
f01306fd:	c1 ea 05             	shr    $0x5,%edx
f0130700:	89 d0                	mov    %edx,%eax
f0130702:	c1 e0 02             	shl    $0x2,%eax
f0130705:	01 d0                	add    %edx,%eax
f0130707:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013070e:	01 d0                	add    %edx,%eax
f0130710:	c1 e0 02             	shl    $0x2,%eax
f0130713:	29 c1                	sub    %eax,%ecx
f0130715:	89 ca                	mov    %ecx,%edx
f0130717:	85 d2                	test   %edx,%edx
f0130719:	74 03                	je     f013071e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f013071b:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f013071e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0130721:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130724:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130727:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013072a:	01 c2                	add    %eax,%edx
f013072c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013072f:	01 d0                	add    %edx,%eax
}
f0130731:	c9                   	leave  
f0130732:	c3                   	ret    

f0130733 <schenv>:


void schenv()
{
f0130733:	55                   	push   %ebp
f0130734:	89 e5                	mov    %esp,%ebp
f0130736:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130739:	c6 05 a8 ed 88 f0 00 	movb   $0x0,0xf088eda8
	__ne = NULL;
f0130740:	c7 05 38 ed 88 f0 00 	movl   $0x0,0xf088ed38
f0130747:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f013074a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130751:	eb 3f                	jmp    f0130792 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130753:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130758:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013075b:	c1 e2 04             	shl    $0x4,%edx
f013075e:	01 d0                	add    %edx,%eax
f0130760:	83 ec 0c             	sub    $0xc,%esp
f0130763:	50                   	push   %eax
f0130764:	e8 1c 3d fd ff       	call   f0104485 <queue_size>
f0130769:	83 c4 10             	add    $0x10,%esp
f013076c:	85 c0                	test   %eax,%eax
f013076e:	74 1f                	je     f013078f <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0130770:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130775:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130778:	c1 e2 04             	shl    $0x4,%edx
f013077b:	01 d0                	add    %edx,%eax
f013077d:	8b 40 04             	mov    0x4(%eax),%eax
f0130780:	a3 38 ed 88 f0       	mov    %eax,0xf088ed38
			__nl = i;
f0130785:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130788:	a2 a8 ed 88 f0       	mov    %al,0xf088eda8
			break;
f013078d:	eb 10                	jmp    f013079f <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f013078f:	ff 45 f4             	incl   -0xc(%ebp)
f0130792:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0130797:	0f b6 c0             	movzbl %al,%eax
f013079a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013079d:	7f b4                	jg     f0130753 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f013079f:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01307a4:	85 c0                	test   %eax,%eax
f01307a6:	0f 84 86 00 00 00    	je     f0130832 <schenv+0xff>
	{
		if (__ne != NULL)
f01307ac:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f01307b1:	85 c0                	test   %eax,%eax
f01307b3:	74 4b                	je     f0130800 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f01307b5:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f01307ba:	0f b6 c0             	movzbl %al,%eax
f01307bd:	8d 50 01             	lea    0x1(%eax),%edx
f01307c0:	a0 a8 ed 88 f0       	mov    0xf088eda8,%al
f01307c5:	0f b6 c0             	movzbl %al,%eax
f01307c8:	39 c2                	cmp    %eax,%edx
f01307ca:	7d 66                	jge    f0130832 <schenv+0xff>
			{
				__ne = curenv;
f01307cc:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f01307d1:	a3 38 ed 88 f0       	mov    %eax,0xf088ed38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01307d6:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f01307db:	0f b6 c0             	movzbl %al,%eax
f01307de:	8a 15 80 ed 88 f0    	mov    0xf088ed80,%dl
f01307e4:	0f b6 d2             	movzbl %dl,%edx
f01307e7:	4a                   	dec    %edx
f01307e8:	39 d0                	cmp    %edx,%eax
f01307ea:	7d 08                	jge    f01307f4 <schenv+0xc1>
f01307ec:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f01307f1:	40                   	inc    %eax
f01307f2:	eb 05                	jmp    f01307f9 <schenv+0xc6>
f01307f4:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f01307f9:	a2 a8 ed 88 f0       	mov    %al,0xf088eda8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f01307fe:	eb 32                	jmp    f0130832 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0130800:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130805:	a3 38 ed 88 f0       	mov    %eax,0xf088ed38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f013080a:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f013080f:	0f b6 c0             	movzbl %al,%eax
f0130812:	8a 15 80 ed 88 f0    	mov    0xf088ed80,%dl
f0130818:	0f b6 d2             	movzbl %dl,%edx
f013081b:	4a                   	dec    %edx
f013081c:	39 d0                	cmp    %edx,%eax
f013081e:	7d 08                	jge    f0130828 <schenv+0xf5>
f0130820:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130825:	40                   	inc    %eax
f0130826:	eb 05                	jmp    f013082d <schenv+0xfa>
f0130828:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f013082d:	a2 a8 ed 88 f0       	mov    %al,0xf088eda8
		}
	}
}
f0130832:	90                   	nop
f0130833:	c9                   	leave  
f0130834:	c3                   	ret    

f0130835 <chksch>:

void chksch(uint8 onoff)
{
f0130835:	55                   	push   %ebp
f0130836:	89 e5                	mov    %esp,%ebp
f0130838:	83 ec 04             	sub    $0x4,%esp
f013083b:	8b 45 08             	mov    0x8(%ebp),%eax
f013083e:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130841:	c7 05 94 ed 88 f0 00 	movl   $0x0,0xf088ed94
f0130848:	00 00 00 
	__ne = NULL;
f013084b:	c7 05 38 ed 88 f0 00 	movl   $0x0,0xf088ed38
f0130852:	00 00 00 
	__pl = 0 ;
f0130855:	c6 05 e0 ec 88 f0 00 	movb   $0x0,0xf088ece0
	__nl = 0 ;
f013085c:	c6 05 a8 ed 88 f0 00 	movb   $0x0,0xf088eda8
	__chkstatus = onoff;
f0130863:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130866:	a2 34 ed 88 f0       	mov    %al,0xf088ed34
}
f013086b:	90                   	nop
f013086c:	c9                   	leave  
f013086d:	c3                   	ret    

f013086e <chk1>:
void chk1()
{
f013086e:	55                   	push   %ebp
f013086f:	89 e5                	mov    %esp,%ebp
f0130871:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130874:	a0 34 ed 88 f0       	mov    0xf088ed34,%al
f0130879:	84 c0                	test   %al,%al
f013087b:	74 2b                	je     f01308a8 <chk1+0x3a>
		return ;
	__pe = curenv;
f013087d:	a1 f4 e3 88 f0       	mov    0xf088e3f4,%eax
f0130882:	a3 94 ed 88 f0       	mov    %eax,0xf088ed94
	__pl = __nl ;
f0130887:	a0 a8 ed 88 f0       	mov    0xf088eda8,%al
f013088c:	a2 e0 ec 88 f0       	mov    %al,0xf088ece0
	if (__pe == NULL)
f0130891:	a1 94 ed 88 f0       	mov    0xf088ed94,%eax
f0130896:	85 c0                	test   %eax,%eax
f0130898:	75 07                	jne    f01308a1 <chk1+0x33>
	{
		__pl = 0;
f013089a:	c6 05 e0 ec 88 f0 00 	movb   $0x0,0xf088ece0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f01308a1:	e8 8d fe ff ff       	call   f0130733 <schenv>
f01308a6:	eb 01                	jmp    f01308a9 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f01308a8:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f01308a9:	c9                   	leave  
f01308aa:	c3                   	ret    

f01308ab <chk2>:
void chk2(struct Env* __se)
{
f01308ab:	55                   	push   %ebp
f01308ac:	89 e5                	mov    %esp,%ebp
f01308ae:	53                   	push   %ebx
f01308af:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f01308b2:	a0 34 ed 88 f0       	mov    0xf088ed34,%al
f01308b7:	84 c0                	test   %al,%al
f01308b9:	0f 84 43 02 00 00    	je     f0130b02 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f01308bf:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f01308c4:	39 45 08             	cmp    %eax,0x8(%ebp)
f01308c7:	74 19                	je     f01308e2 <chk2+0x37>
f01308c9:	68 05 d2 13 f0       	push   $0xf013d205
f01308ce:	68 12 d2 13 f0       	push   $0xf013d212
f01308d3:	68 c0 00 00 00       	push   $0xc0
f01308d8:	68 27 d2 13 f0       	push   $0xf013d227
f01308dd:	e8 d9 f9 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01308e2:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f01308e7:	85 c0                	test   %eax,%eax
f01308e9:	0f 84 25 01 00 00    	je     f0130a14 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01308ef:	8b 15 2c ed 88 f0    	mov    0xf088ed2c,%edx
f01308f5:	a0 a8 ed 88 f0       	mov    0xf088eda8,%al
f01308fa:	0f b6 c0             	movzbl %al,%eax
f01308fd:	01 d0                	add    %edx,%eax
f01308ff:	8a 00                	mov    (%eax),%al
f0130901:	0f b6 d8             	movzbl %al,%ebx
f0130904:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130909:	99                   	cltd   
f013090a:	f7 fb                	idiv   %ebx
f013090c:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130912:	8b 15 2c ed 88 f0    	mov    0xf088ed2c,%edx
f0130918:	a0 a8 ed 88 f0       	mov    0xf088eda8,%al
f013091d:	0f b6 c0             	movzbl %al,%eax
f0130920:	01 d0                	add    %edx,%eax
f0130922:	8a 00                	mov    (%eax),%al
f0130924:	0f b6 d8             	movzbl %al,%ebx
f0130927:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f013092c:	99                   	cltd   
f013092d:	f7 fb                	idiv   %ebx
f013092f:	89 c3                	mov    %eax,%ebx
f0130931:	89 c8                	mov    %ecx,%eax
f0130933:	99                   	cltd   
f0130934:	f7 fb                	idiv   %ebx
f0130936:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f013093a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013093e:	83 e0 01             	and    $0x1,%eax
f0130941:	66 85 c0             	test   %ax,%ax
f0130944:	74 07                	je     f013094d <chk2+0xa2>
f0130946:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013094a:	40                   	inc    %eax
f013094b:	eb 04                	jmp    f0130951 <chk2+0xa6>
f013094d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130951:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130955:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130959:	89 d0                	mov    %edx,%eax
f013095b:	c1 e0 02             	shl    $0x2,%eax
f013095e:	01 d0                	add    %edx,%eax
f0130960:	01 c0                	add    %eax,%eax
f0130962:	01 d0                	add    %edx,%eax
f0130964:	c1 e0 02             	shl    $0x2,%eax
f0130967:	01 d0                	add    %edx,%eax
f0130969:	01 c0                	add    %eax,%eax
f013096b:	89 c1                	mov    %eax,%ecx
f013096d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130972:	f7 e9                	imul   %ecx
f0130974:	c1 fa 05             	sar    $0x5,%edx
f0130977:	89 c8                	mov    %ecx,%eax
f0130979:	c1 f8 1f             	sar    $0x1f,%eax
f013097c:	29 c2                	sub    %eax,%edx
f013097e:	89 d0                	mov    %edx,%eax
f0130980:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130984:	e8 cd 39 fd ff       	call   f0104356 <kclock_read_cnt0>
f0130989:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f013098d:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130991:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130995:	76 0a                	jbe    f01309a1 <chk2+0xf6>
f0130997:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f013099b:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f013099f:	76 19                	jbe    f01309ba <chk2+0x10f>
f01309a1:	68 40 d2 13 f0       	push   $0xf013d240
f01309a6:	68 12 d2 13 f0       	push   $0xf013d212
f01309ab:	68 ca 00 00 00       	push   $0xca
f01309b0:	68 27 d2 13 f0       	push   $0xf013d227
f01309b5:	e8 01 f9 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f01309ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01309c1:	eb 44                	jmp    f0130a07 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f01309c3:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f01309c8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01309cb:	89 c2                	mov    %eax,%edx
f01309cd:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f01309d2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01309d5:	c1 e1 04             	shl    $0x4,%ecx
f01309d8:	01 c8                	add    %ecx,%eax
f01309da:	83 ec 08             	sub    $0x8,%esp
f01309dd:	52                   	push   %edx
f01309de:	50                   	push   %eax
f01309df:	e8 bb 3c fd ff       	call   f010469f <find_env_in_queue>
f01309e4:	83 c4 10             	add    $0x10,%esp
f01309e7:	85 c0                	test   %eax,%eax
f01309e9:	74 19                	je     f0130a04 <chk2+0x159>
f01309eb:	68 64 d2 13 f0       	push   $0xf013d264
f01309f0:	68 12 d2 13 f0       	push   $0xf013d212
f01309f5:	68 ce 00 00 00       	push   $0xce
f01309fa:	68 27 d2 13 f0       	push   $0xf013d227
f01309ff:	e8 b7 f8 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130a04:	ff 45 f4             	incl   -0xc(%ebp)
f0130a07:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0130a0c:	0f b6 c0             	movzbl %al,%eax
f0130a0f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130a12:	7f af                	jg     f01309c3 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130a14:	a1 94 ed 88 f0       	mov    0xf088ed94,%eax
f0130a19:	85 c0                	test   %eax,%eax
f0130a1b:	0f 84 e2 00 00 00    	je     f0130b03 <chk2+0x258>
f0130a21:	8b 15 94 ed 88 f0    	mov    0xf088ed94,%edx
f0130a27:	a1 38 ed 88 f0       	mov    0xf088ed38,%eax
f0130a2c:	39 c2                	cmp    %eax,%edx
f0130a2e:	0f 84 cf 00 00 00    	je     f0130b03 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130a34:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130a39:	0f b6 c0             	movzbl %al,%eax
f0130a3c:	8a 15 80 ed 88 f0    	mov    0xf088ed80,%dl
f0130a42:	0f b6 d2             	movzbl %dl,%edx
f0130a45:	4a                   	dec    %edx
f0130a46:	39 d0                	cmp    %edx,%eax
f0130a48:	74 08                	je     f0130a52 <chk2+0x1a7>
f0130a4a:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130a4f:	40                   	inc    %eax
f0130a50:	eb 05                	jmp    f0130a57 <chk2+0x1ac>
f0130a52:	a0 e0 ec 88 f0       	mov    0xf088ece0,%al
f0130a57:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130a5a:	a1 94 ed 88 f0       	mov    0xf088ed94,%eax
f0130a5f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130a62:	89 c2                	mov    %eax,%edx
f0130a64:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130a69:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130a6d:	c1 e1 04             	shl    $0x4,%ecx
f0130a70:	01 c8                	add    %ecx,%eax
f0130a72:	83 ec 08             	sub    $0x8,%esp
f0130a75:	52                   	push   %edx
f0130a76:	50                   	push   %eax
f0130a77:	e8 23 3c fd ff       	call   f010469f <find_env_in_queue>
f0130a7c:	83 c4 10             	add    $0x10,%esp
f0130a7f:	85 c0                	test   %eax,%eax
f0130a81:	75 19                	jne    f0130a9c <chk2+0x1f1>
f0130a83:	68 a4 d2 13 f0       	push   $0xf013d2a4
f0130a88:	68 12 d2 13 f0       	push   $0xf013d212
f0130a8d:	68 d4 00 00 00       	push   $0xd4
f0130a92:	68 27 d2 13 f0       	push   $0xf013d227
f0130a97:	e8 1f f8 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130a9c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130aa3:	eb 4e                	jmp    f0130af3 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130aa5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130aa9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130aac:	74 41                	je     f0130aef <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130aae:	a1 94 ed 88 f0       	mov    0xf088ed94,%eax
f0130ab3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130ab6:	89 c2                	mov    %eax,%edx
f0130ab8:	a1 e8 ec 88 f0       	mov    0xf088ece8,%eax
f0130abd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130ac0:	c1 e1 04             	shl    $0x4,%ecx
f0130ac3:	01 c8                	add    %ecx,%eax
f0130ac5:	83 ec 08             	sub    $0x8,%esp
f0130ac8:	52                   	push   %edx
f0130ac9:	50                   	push   %eax
f0130aca:	e8 d0 3b fd ff       	call   f010469f <find_env_in_queue>
f0130acf:	83 c4 10             	add    $0x10,%esp
f0130ad2:	85 c0                	test   %eax,%eax
f0130ad4:	74 1a                	je     f0130af0 <chk2+0x245>
f0130ad6:	68 e8 d2 13 f0       	push   $0xf013d2e8
f0130adb:	68 12 d2 13 f0       	push   $0xf013d212
f0130ae0:	68 d8 00 00 00       	push   $0xd8
f0130ae5:	68 27 d2 13 f0       	push   $0xf013d227
f0130aea:	e8 cc f7 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130aef:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130af0:	ff 45 f0             	incl   -0x10(%ebp)
f0130af3:	a0 80 ed 88 f0       	mov    0xf088ed80,%al
f0130af8:	0f b6 c0             	movzbl %al,%eax
f0130afb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130afe:	7f a5                	jg     f0130aa5 <chk2+0x1fa>
f0130b00:	eb 01                	jmp    f0130b03 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130b02:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130b03:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130b06:	c9                   	leave  
f0130b07:	c3                   	ret    

f0130b08 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130b08:	55                   	push   %ebp
f0130b09:	89 e5                	mov    %esp,%ebp
f0130b0b:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130b0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130b15:	eb 40                	jmp    f0130b57 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130b17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b1a:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130b20:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130b25:	83 ec 08             	sub    $0x8,%esp
f0130b28:	52                   	push   %edx
f0130b29:	50                   	push   %eax
f0130b2a:	e8 9b 01 00 00       	call   f0130cca <check_va2pa>
f0130b2f:	83 c4 10             	add    $0x10,%esp
f0130b32:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130b35:	74 19                	je     f0130b50 <check_boot_pgdir+0x48>
f0130b37:	68 28 d3 13 f0       	push   $0xf013d328
f0130b3c:	68 12 d2 13 f0       	push   $0xf013d212
f0130b41:	68 fa 00 00 00       	push   $0xfa
f0130b46:	68 27 d2 13 f0       	push   $0xf013d227
f0130b4b:	e8 b5 f6 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130b50:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130b57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b5a:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130b60:	a1 78 ed 88 f0       	mov    0xf088ed78,%eax
f0130b65:	39 c2                	cmp    %eax,%edx
f0130b67:	72 ae                	jb     f0130b17 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130b69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130b70:	eb 74                	jmp    f0130be6 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b75:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130b7b:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130b80:	83 ec 08             	sub    $0x8,%esp
f0130b83:	52                   	push   %edx
f0130b84:	50                   	push   %eax
f0130b85:	e8 40 01 00 00       	call   f0130cca <check_va2pa>
f0130b8a:	83 c4 10             	add    $0x10,%esp
f0130b8d:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f0130b94:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130b9b:	77 17                	ja     f0130bb4 <check_boot_pgdir+0xac>
f0130b9d:	ff 75 f0             	pushl  -0x10(%ebp)
f0130ba0:	68 60 d3 13 f0       	push   $0xf013d360
f0130ba5:	68 04 01 00 00       	push   $0x104
f0130baa:	68 27 d2 13 f0       	push   $0xf013d227
f0130baf:	e8 51 f6 fc ff       	call   f0100205 <_panic>
f0130bb4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130bb7:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130bbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130bc0:	01 ca                	add    %ecx,%edx
f0130bc2:	39 d0                	cmp    %edx,%eax
f0130bc4:	74 19                	je     f0130bdf <check_boot_pgdir+0xd7>
f0130bc6:	68 94 d3 13 f0       	push   $0xf013d394
f0130bcb:	68 12 d2 13 f0       	push   $0xf013d212
f0130bd0:	68 04 01 00 00       	push   $0x104
f0130bd5:	68 27 d2 13 f0       	push   $0xf013d227
f0130bda:	e8 26 f6 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130bdf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130be6:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130bed:	76 83                	jbe    f0130b72 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130bef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130bf6:	e9 af 00 00 00       	jmp    f0130caa <check_boot_pgdir+0x1a2>
		switch (i) {
f0130bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bfe:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130c03:	74 11                	je     f0130c16 <check_boot_pgdir+0x10e>
f0130c05:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130c0a:	72 36                	jb     f0130c42 <check_boot_pgdir+0x13a>
f0130c0c:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0130c11:	83 f8 02             	cmp    $0x2,%eax
f0130c14:	77 2c                	ja     f0130c42 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130c16:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130c1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c1e:	c1 e2 02             	shl    $0x2,%edx
f0130c21:	01 d0                	add    %edx,%eax
f0130c23:	8b 00                	mov    (%eax),%eax
f0130c25:	85 c0                	test   %eax,%eax
f0130c27:	75 7a                	jne    f0130ca3 <check_boot_pgdir+0x19b>
f0130c29:	68 16 d4 13 f0       	push   $0xf013d416
f0130c2e:	68 12 d2 13 f0       	push   $0xf013d212
f0130c33:	68 0f 01 00 00       	push   $0x10f
f0130c38:	68 27 d2 13 f0       	push   $0xf013d227
f0130c3d:	e8 c3 f5 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130c42:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130c49:	76 2c                	jbe    f0130c77 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130c4b:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130c50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c53:	c1 e2 02             	shl    $0x2,%edx
f0130c56:	01 d0                	add    %edx,%eax
f0130c58:	8b 00                	mov    (%eax),%eax
f0130c5a:	85 c0                	test   %eax,%eax
f0130c5c:	75 48                	jne    f0130ca6 <check_boot_pgdir+0x19e>
f0130c5e:	68 16 d4 13 f0       	push   $0xf013d416
f0130c63:	68 12 d2 13 f0       	push   $0xf013d212
f0130c68:	68 13 01 00 00       	push   $0x113
f0130c6d:	68 27 d2 13 f0       	push   $0xf013d227
f0130c72:	e8 8e f5 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130c77:	a1 7c ed 88 f0       	mov    0xf088ed7c,%eax
f0130c7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c7f:	c1 e2 02             	shl    $0x2,%edx
f0130c82:	01 d0                	add    %edx,%eax
f0130c84:	8b 00                	mov    (%eax),%eax
f0130c86:	85 c0                	test   %eax,%eax
f0130c88:	74 1c                	je     f0130ca6 <check_boot_pgdir+0x19e>
f0130c8a:	68 2c d4 13 f0       	push   $0xf013d42c
f0130c8f:	68 12 d2 13 f0       	push   $0xf013d212
f0130c94:	68 15 01 00 00       	push   $0x115
f0130c99:	68 27 d2 13 f0       	push   $0xf013d227
f0130c9e:	e8 62 f5 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0130ca3:	90                   	nop
f0130ca4:	eb 01                	jmp    f0130ca7 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130ca6:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130ca7:	ff 45 f4             	incl   -0xc(%ebp)
f0130caa:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0130cb1:	0f 86 44 ff ff ff    	jbe    f0130bfb <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130cb7:	83 ec 0c             	sub    $0xc,%esp
f0130cba:	68 48 d4 13 f0       	push   $0xf013d448
f0130cbf:	e8 4a 00 fd ff       	call   f0100d0e <cprintf>
f0130cc4:	83 c4 10             	add    $0x10,%esp
}
f0130cc7:	90                   	nop
f0130cc8:	c9                   	leave  
f0130cc9:	c3                   	ret    

f0130cca <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130cca:	55                   	push   %ebp
f0130ccb:	89 e5                	mov    %esp,%ebp
f0130ccd:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0130cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130cd3:	c1 e8 16             	shr    $0x16,%eax
f0130cd6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130cdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ce0:	01 d0                	add    %edx,%eax
f0130ce2:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ce8:	8b 00                	mov    (%eax),%eax
f0130cea:	83 e0 01             	and    $0x1,%eax
f0130ced:	85 c0                	test   %eax,%eax
f0130cef:	75 0a                	jne    f0130cfb <check_va2pa+0x31>
		return ~0;
f0130cf1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130cf6:	e9 87 00 00 00       	jmp    f0130d82 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0130cfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130cfe:	8b 00                	mov    (%eax),%eax
f0130d00:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130d05:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130d08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d0b:	c1 e8 0c             	shr    $0xc,%eax
f0130d0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130d11:	a1 10 ed 88 f0       	mov    0xf088ed10,%eax
f0130d16:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130d19:	72 17                	jb     f0130d32 <check_va2pa+0x68>
f0130d1b:	ff 75 f0             	pushl  -0x10(%ebp)
f0130d1e:	68 68 d4 13 f0       	push   $0xf013d468
f0130d23:	68 2b 01 00 00       	push   $0x12b
f0130d28:	68 27 d2 13 f0       	push   $0xf013d227
f0130d2d:	e8 d3 f4 fc ff       	call   f0100205 <_panic>
f0130d32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d35:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130d3a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130d3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d40:	c1 e8 0c             	shr    $0xc,%eax
f0130d43:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130d48:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130d4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130d52:	01 d0                	add    %edx,%eax
f0130d54:	8b 00                	mov    (%eax),%eax
f0130d56:	83 e0 01             	and    $0x1,%eax
f0130d59:	85 c0                	test   %eax,%eax
f0130d5b:	75 07                	jne    f0130d64 <check_va2pa+0x9a>
		return ~0;
f0130d5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130d62:	eb 1e                	jmp    f0130d82 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0130d64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d67:	c1 e8 0c             	shr    $0xc,%eax
f0130d6a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130d6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130d76:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130d79:	01 d0                	add    %edx,%eax
f0130d7b:	8b 00                	mov    (%eax),%eax
f0130d7d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0130d82:	c9                   	leave  
f0130d83:	c3                   	ret    

f0130d84 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0130d84:	55                   	push   %ebp
f0130d85:	89 e5                	mov    %esp,%ebp
f0130d87:	53                   	push   %ebx
f0130d88:	83 ec 14             	sub    $0x14,%esp
f0130d8b:	8b 45 10             	mov    0x10(%ebp),%eax
f0130d8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130d91:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d94:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130d97:	8b 45 18             	mov    0x18(%ebp),%eax
f0130d9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0130d9f:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130da2:	77 55                	ja     f0130df9 <printnum+0x75>
f0130da4:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130da7:	72 05                	jb     f0130dae <printnum+0x2a>
f0130da9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130dac:	77 4b                	ja     f0130df9 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130dae:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0130db1:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0130db4:	8b 45 18             	mov    0x18(%ebp),%eax
f0130db7:	ba 00 00 00 00       	mov    $0x0,%edx
f0130dbc:	52                   	push   %edx
f0130dbd:	50                   	push   %eax
f0130dbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0130dc1:	ff 75 f0             	pushl  -0x10(%ebp)
f0130dc4:	e8 0b 28 00 00       	call   f01335d4 <__udivdi3>
f0130dc9:	83 c4 10             	add    $0x10,%esp
f0130dcc:	83 ec 04             	sub    $0x4,%esp
f0130dcf:	ff 75 20             	pushl  0x20(%ebp)
f0130dd2:	53                   	push   %ebx
f0130dd3:	ff 75 18             	pushl  0x18(%ebp)
f0130dd6:	52                   	push   %edx
f0130dd7:	50                   	push   %eax
f0130dd8:	ff 75 0c             	pushl  0xc(%ebp)
f0130ddb:	ff 75 08             	pushl  0x8(%ebp)
f0130dde:	e8 a1 ff ff ff       	call   f0130d84 <printnum>
f0130de3:	83 c4 20             	add    $0x20,%esp
f0130de6:	eb 1a                	jmp    f0130e02 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130de8:	83 ec 08             	sub    $0x8,%esp
f0130deb:	ff 75 0c             	pushl  0xc(%ebp)
f0130dee:	ff 75 20             	pushl  0x20(%ebp)
f0130df1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130df4:	ff d0                	call   *%eax
f0130df6:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130df9:	ff 4d 1c             	decl   0x1c(%ebp)
f0130dfc:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0130e00:	7f e6                	jg     f0130de8 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0130e02:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130e05:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130e0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130e10:	53                   	push   %ebx
f0130e11:	51                   	push   %ecx
f0130e12:	52                   	push   %edx
f0130e13:	50                   	push   %eax
f0130e14:	e8 cb 28 00 00       	call   f01336e4 <__umoddi3>
f0130e19:	83 c4 10             	add    $0x10,%esp
f0130e1c:	05 b4 d6 13 f0       	add    $0xf013d6b4,%eax
f0130e21:	8a 00                	mov    (%eax),%al
f0130e23:	0f be c0             	movsbl %al,%eax
f0130e26:	83 ec 08             	sub    $0x8,%esp
f0130e29:	ff 75 0c             	pushl  0xc(%ebp)
f0130e2c:	50                   	push   %eax
f0130e2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e30:	ff d0                	call   *%eax
f0130e32:	83 c4 10             	add    $0x10,%esp
}
f0130e35:	90                   	nop
f0130e36:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130e39:	c9                   	leave  
f0130e3a:	c3                   	ret    

f0130e3b <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130e3b:	55                   	push   %ebp
f0130e3c:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130e3e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130e42:	7e 1c                	jle    f0130e60 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e47:	8b 00                	mov    (%eax),%eax
f0130e49:	8d 50 08             	lea    0x8(%eax),%edx
f0130e4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e4f:	89 10                	mov    %edx,(%eax)
f0130e51:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e54:	8b 00                	mov    (%eax),%eax
f0130e56:	83 e8 08             	sub    $0x8,%eax
f0130e59:	8b 50 04             	mov    0x4(%eax),%edx
f0130e5c:	8b 00                	mov    (%eax),%eax
f0130e5e:	eb 40                	jmp    f0130ea0 <getuint+0x65>
	else if (lflag)
f0130e60:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130e64:	74 1e                	je     f0130e84 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130e66:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e69:	8b 00                	mov    (%eax),%eax
f0130e6b:	8d 50 04             	lea    0x4(%eax),%edx
f0130e6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e71:	89 10                	mov    %edx,(%eax)
f0130e73:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e76:	8b 00                	mov    (%eax),%eax
f0130e78:	83 e8 04             	sub    $0x4,%eax
f0130e7b:	8b 00                	mov    (%eax),%eax
f0130e7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0130e82:	eb 1c                	jmp    f0130ea0 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130e84:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e87:	8b 00                	mov    (%eax),%eax
f0130e89:	8d 50 04             	lea    0x4(%eax),%edx
f0130e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e8f:	89 10                	mov    %edx,(%eax)
f0130e91:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e94:	8b 00                	mov    (%eax),%eax
f0130e96:	83 e8 04             	sub    $0x4,%eax
f0130e99:	8b 00                	mov    (%eax),%eax
f0130e9b:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130ea0:	5d                   	pop    %ebp
f0130ea1:	c3                   	ret    

f0130ea2 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130ea2:	55                   	push   %ebp
f0130ea3:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130ea5:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130ea9:	7e 1c                	jle    f0130ec7 <getint+0x25>
		return va_arg(*ap, long long);
f0130eab:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eae:	8b 00                	mov    (%eax),%eax
f0130eb0:	8d 50 08             	lea    0x8(%eax),%edx
f0130eb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eb6:	89 10                	mov    %edx,(%eax)
f0130eb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ebb:	8b 00                	mov    (%eax),%eax
f0130ebd:	83 e8 08             	sub    $0x8,%eax
f0130ec0:	8b 50 04             	mov    0x4(%eax),%edx
f0130ec3:	8b 00                	mov    (%eax),%eax
f0130ec5:	eb 38                	jmp    f0130eff <getint+0x5d>
	else if (lflag)
f0130ec7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130ecb:	74 1a                	je     f0130ee7 <getint+0x45>
		return va_arg(*ap, long);
f0130ecd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ed0:	8b 00                	mov    (%eax),%eax
f0130ed2:	8d 50 04             	lea    0x4(%eax),%edx
f0130ed5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ed8:	89 10                	mov    %edx,(%eax)
f0130eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0130edd:	8b 00                	mov    (%eax),%eax
f0130edf:	83 e8 04             	sub    $0x4,%eax
f0130ee2:	8b 00                	mov    (%eax),%eax
f0130ee4:	99                   	cltd   
f0130ee5:	eb 18                	jmp    f0130eff <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130ee7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eea:	8b 00                	mov    (%eax),%eax
f0130eec:	8d 50 04             	lea    0x4(%eax),%edx
f0130eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ef2:	89 10                	mov    %edx,(%eax)
f0130ef4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ef7:	8b 00                	mov    (%eax),%eax
f0130ef9:	83 e8 04             	sub    $0x4,%eax
f0130efc:	8b 00                	mov    (%eax),%eax
f0130efe:	99                   	cltd   
}
f0130eff:	5d                   	pop    %ebp
f0130f00:	c3                   	ret    

f0130f01 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130f01:	55                   	push   %ebp
f0130f02:	89 e5                	mov    %esp,%ebp
f0130f04:	56                   	push   %esi
f0130f05:	53                   	push   %ebx
f0130f06:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130f09:	eb 17                	jmp    f0130f22 <vprintfmt+0x21>
			if (ch == '\0')
f0130f0b:	85 db                	test   %ebx,%ebx
f0130f0d:	0f 84 af 03 00 00    	je     f01312c2 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130f13:	83 ec 08             	sub    $0x8,%esp
f0130f16:	ff 75 0c             	pushl  0xc(%ebp)
f0130f19:	53                   	push   %ebx
f0130f1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f1d:	ff d0                	call   *%eax
f0130f1f:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130f22:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f25:	8d 50 01             	lea    0x1(%eax),%edx
f0130f28:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f2b:	8a 00                	mov    (%eax),%al
f0130f2d:	0f b6 d8             	movzbl %al,%ebx
f0130f30:	83 fb 25             	cmp    $0x25,%ebx
f0130f33:	75 d6                	jne    f0130f0b <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130f35:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130f39:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130f40:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130f47:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130f4e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130f55:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f58:	8d 50 01             	lea    0x1(%eax),%edx
f0130f5b:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f5e:	8a 00                	mov    (%eax),%al
f0130f60:	0f b6 d8             	movzbl %al,%ebx
f0130f63:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130f66:	83 f8 55             	cmp    $0x55,%eax
f0130f69:	0f 87 2b 03 00 00    	ja     f013129a <vprintfmt+0x399>
f0130f6f:	8b 04 85 d8 d6 13 f0 	mov    -0xfec2928(,%eax,4),%eax
f0130f76:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130f78:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130f7c:	eb d7                	jmp    f0130f55 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130f7e:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130f82:	eb d1                	jmp    f0130f55 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130f84:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130f8b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130f8e:	89 d0                	mov    %edx,%eax
f0130f90:	c1 e0 02             	shl    $0x2,%eax
f0130f93:	01 d0                	add    %edx,%eax
f0130f95:	01 c0                	add    %eax,%eax
f0130f97:	01 d8                	add    %ebx,%eax
f0130f99:	83 e8 30             	sub    $0x30,%eax
f0130f9c:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130f9f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130fa2:	8a 00                	mov    (%eax),%al
f0130fa4:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130fa7:	83 fb 2f             	cmp    $0x2f,%ebx
f0130faa:	7e 3e                	jle    f0130fea <vprintfmt+0xe9>
f0130fac:	83 fb 39             	cmp    $0x39,%ebx
f0130faf:	7f 39                	jg     f0130fea <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130fb1:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0130fb4:	eb d5                	jmp    f0130f8b <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130fb6:	8b 45 14             	mov    0x14(%ebp),%eax
f0130fb9:	83 c0 04             	add    $0x4,%eax
f0130fbc:	89 45 14             	mov    %eax,0x14(%ebp)
f0130fbf:	8b 45 14             	mov    0x14(%ebp),%eax
f0130fc2:	83 e8 04             	sub    $0x4,%eax
f0130fc5:	8b 00                	mov    (%eax),%eax
f0130fc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130fca:	eb 1f                	jmp    f0130feb <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130fcc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130fd0:	79 83                	jns    f0130f55 <vprintfmt+0x54>
				width = 0;
f0130fd2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130fd9:	e9 77 ff ff ff       	jmp    f0130f55 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0130fde:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130fe5:	e9 6b ff ff ff       	jmp    f0130f55 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130fea:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130feb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130fef:	0f 89 60 ff ff ff    	jns    f0130f55 <vprintfmt+0x54>
				width = precision, precision = -1;
f0130ff5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130ff8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130ffb:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0131002:	e9 4e ff ff ff       	jmp    f0130f55 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0131007:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f013100a:	e9 46 ff ff ff       	jmp    f0130f55 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f013100f:	8b 45 14             	mov    0x14(%ebp),%eax
f0131012:	83 c0 04             	add    $0x4,%eax
f0131015:	89 45 14             	mov    %eax,0x14(%ebp)
f0131018:	8b 45 14             	mov    0x14(%ebp),%eax
f013101b:	83 e8 04             	sub    $0x4,%eax
f013101e:	8b 00                	mov    (%eax),%eax
f0131020:	83 ec 08             	sub    $0x8,%esp
f0131023:	ff 75 0c             	pushl  0xc(%ebp)
f0131026:	50                   	push   %eax
f0131027:	8b 45 08             	mov    0x8(%ebp),%eax
f013102a:	ff d0                	call   *%eax
f013102c:	83 c4 10             	add    $0x10,%esp
			break;
f013102f:	e9 89 02 00 00       	jmp    f01312bd <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0131034:	8b 45 14             	mov    0x14(%ebp),%eax
f0131037:	83 c0 04             	add    $0x4,%eax
f013103a:	89 45 14             	mov    %eax,0x14(%ebp)
f013103d:	8b 45 14             	mov    0x14(%ebp),%eax
f0131040:	83 e8 04             	sub    $0x4,%eax
f0131043:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0131045:	85 db                	test   %ebx,%ebx
f0131047:	79 02                	jns    f013104b <vprintfmt+0x14a>
				err = -err;
f0131049:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f013104b:	83 fb 64             	cmp    $0x64,%ebx
f013104e:	7f 0b                	jg     f013105b <vprintfmt+0x15a>
f0131050:	8b 34 9d 20 d5 13 f0 	mov    -0xfec2ae0(,%ebx,4),%esi
f0131057:	85 f6                	test   %esi,%esi
f0131059:	75 19                	jne    f0131074 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f013105b:	53                   	push   %ebx
f013105c:	68 c5 d6 13 f0       	push   $0xf013d6c5
f0131061:	ff 75 0c             	pushl  0xc(%ebp)
f0131064:	ff 75 08             	pushl  0x8(%ebp)
f0131067:	e8 5e 02 00 00       	call   f01312ca <printfmt>
f013106c:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f013106f:	e9 49 02 00 00       	jmp    f01312bd <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0131074:	56                   	push   %esi
f0131075:	68 ce d6 13 f0       	push   $0xf013d6ce
f013107a:	ff 75 0c             	pushl  0xc(%ebp)
f013107d:	ff 75 08             	pushl  0x8(%ebp)
f0131080:	e8 45 02 00 00       	call   f01312ca <printfmt>
f0131085:	83 c4 10             	add    $0x10,%esp
			break;
f0131088:	e9 30 02 00 00       	jmp    f01312bd <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f013108d:	8b 45 14             	mov    0x14(%ebp),%eax
f0131090:	83 c0 04             	add    $0x4,%eax
f0131093:	89 45 14             	mov    %eax,0x14(%ebp)
f0131096:	8b 45 14             	mov    0x14(%ebp),%eax
f0131099:	83 e8 04             	sub    $0x4,%eax
f013109c:	8b 30                	mov    (%eax),%esi
f013109e:	85 f6                	test   %esi,%esi
f01310a0:	75 05                	jne    f01310a7 <vprintfmt+0x1a6>
				p = "(null)";
f01310a2:	be d1 d6 13 f0       	mov    $0xf013d6d1,%esi
			if (width > 0 && padc != '-')
f01310a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01310ab:	7e 6d                	jle    f013111a <vprintfmt+0x219>
f01310ad:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01310b1:	74 67                	je     f013111a <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01310b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01310b6:	83 ec 08             	sub    $0x8,%esp
f01310b9:	50                   	push   %eax
f01310ba:	56                   	push   %esi
f01310bb:	e8 12 05 00 00       	call   f01315d2 <strnlen>
f01310c0:	83 c4 10             	add    $0x10,%esp
f01310c3:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01310c6:	eb 16                	jmp    f01310de <vprintfmt+0x1dd>
					putch(padc, putdat);
f01310c8:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f01310cc:	83 ec 08             	sub    $0x8,%esp
f01310cf:	ff 75 0c             	pushl  0xc(%ebp)
f01310d2:	50                   	push   %eax
f01310d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01310d6:	ff d0                	call   *%eax
f01310d8:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01310db:	ff 4d e4             	decl   -0x1c(%ebp)
f01310de:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01310e2:	7f e4                	jg     f01310c8 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01310e4:	eb 34                	jmp    f013111a <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f01310e6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01310ea:	74 1c                	je     f0131108 <vprintfmt+0x207>
f01310ec:	83 fb 1f             	cmp    $0x1f,%ebx
f01310ef:	7e 05                	jle    f01310f6 <vprintfmt+0x1f5>
f01310f1:	83 fb 7e             	cmp    $0x7e,%ebx
f01310f4:	7e 12                	jle    f0131108 <vprintfmt+0x207>
					putch('?', putdat);
f01310f6:	83 ec 08             	sub    $0x8,%esp
f01310f9:	ff 75 0c             	pushl  0xc(%ebp)
f01310fc:	6a 3f                	push   $0x3f
f01310fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131101:	ff d0                	call   *%eax
f0131103:	83 c4 10             	add    $0x10,%esp
f0131106:	eb 0f                	jmp    f0131117 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0131108:	83 ec 08             	sub    $0x8,%esp
f013110b:	ff 75 0c             	pushl  0xc(%ebp)
f013110e:	53                   	push   %ebx
f013110f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131112:	ff d0                	call   *%eax
f0131114:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0131117:	ff 4d e4             	decl   -0x1c(%ebp)
f013111a:	89 f0                	mov    %esi,%eax
f013111c:	8d 70 01             	lea    0x1(%eax),%esi
f013111f:	8a 00                	mov    (%eax),%al
f0131121:	0f be d8             	movsbl %al,%ebx
f0131124:	85 db                	test   %ebx,%ebx
f0131126:	74 24                	je     f013114c <vprintfmt+0x24b>
f0131128:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013112c:	78 b8                	js     f01310e6 <vprintfmt+0x1e5>
f013112e:	ff 4d e0             	decl   -0x20(%ebp)
f0131131:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131135:	79 af                	jns    f01310e6 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131137:	eb 13                	jmp    f013114c <vprintfmt+0x24b>
				putch(' ', putdat);
f0131139:	83 ec 08             	sub    $0x8,%esp
f013113c:	ff 75 0c             	pushl  0xc(%ebp)
f013113f:	6a 20                	push   $0x20
f0131141:	8b 45 08             	mov    0x8(%ebp),%eax
f0131144:	ff d0                	call   *%eax
f0131146:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131149:	ff 4d e4             	decl   -0x1c(%ebp)
f013114c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131150:	7f e7                	jg     f0131139 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0131152:	e9 66 01 00 00       	jmp    f01312bd <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0131157:	83 ec 08             	sub    $0x8,%esp
f013115a:	ff 75 e8             	pushl  -0x18(%ebp)
f013115d:	8d 45 14             	lea    0x14(%ebp),%eax
f0131160:	50                   	push   %eax
f0131161:	e8 3c fd ff ff       	call   f0130ea2 <getint>
f0131166:	83 c4 10             	add    $0x10,%esp
f0131169:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013116c:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f013116f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131172:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131175:	85 d2                	test   %edx,%edx
f0131177:	79 23                	jns    f013119c <vprintfmt+0x29b>
				putch('-', putdat);
f0131179:	83 ec 08             	sub    $0x8,%esp
f013117c:	ff 75 0c             	pushl  0xc(%ebp)
f013117f:	6a 2d                	push   $0x2d
f0131181:	8b 45 08             	mov    0x8(%ebp),%eax
f0131184:	ff d0                	call   *%eax
f0131186:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0131189:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013118c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013118f:	f7 d8                	neg    %eax
f0131191:	83 d2 00             	adc    $0x0,%edx
f0131194:	f7 da                	neg    %edx
f0131196:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131199:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f013119c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01311a3:	e9 bc 00 00 00       	jmp    f0131264 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01311a8:	83 ec 08             	sub    $0x8,%esp
f01311ab:	ff 75 e8             	pushl  -0x18(%ebp)
f01311ae:	8d 45 14             	lea    0x14(%ebp),%eax
f01311b1:	50                   	push   %eax
f01311b2:	e8 84 fc ff ff       	call   f0130e3b <getuint>
f01311b7:	83 c4 10             	add    $0x10,%esp
f01311ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01311bd:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f01311c0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01311c7:	e9 98 00 00 00       	jmp    f0131264 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f01311cc:	83 ec 08             	sub    $0x8,%esp
f01311cf:	ff 75 0c             	pushl  0xc(%ebp)
f01311d2:	6a 58                	push   $0x58
f01311d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01311d7:	ff d0                	call   *%eax
f01311d9:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01311dc:	83 ec 08             	sub    $0x8,%esp
f01311df:	ff 75 0c             	pushl  0xc(%ebp)
f01311e2:	6a 58                	push   $0x58
f01311e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01311e7:	ff d0                	call   *%eax
f01311e9:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01311ec:	83 ec 08             	sub    $0x8,%esp
f01311ef:	ff 75 0c             	pushl  0xc(%ebp)
f01311f2:	6a 58                	push   $0x58
f01311f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01311f7:	ff d0                	call   *%eax
f01311f9:	83 c4 10             	add    $0x10,%esp
			break;
f01311fc:	e9 bc 00 00 00       	jmp    f01312bd <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0131201:	83 ec 08             	sub    $0x8,%esp
f0131204:	ff 75 0c             	pushl  0xc(%ebp)
f0131207:	6a 30                	push   $0x30
f0131209:	8b 45 08             	mov    0x8(%ebp),%eax
f013120c:	ff d0                	call   *%eax
f013120e:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0131211:	83 ec 08             	sub    $0x8,%esp
f0131214:	ff 75 0c             	pushl  0xc(%ebp)
f0131217:	6a 78                	push   $0x78
f0131219:	8b 45 08             	mov    0x8(%ebp),%eax
f013121c:	ff d0                	call   *%eax
f013121e:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0131221:	8b 45 14             	mov    0x14(%ebp),%eax
f0131224:	83 c0 04             	add    $0x4,%eax
f0131227:	89 45 14             	mov    %eax,0x14(%ebp)
f013122a:	8b 45 14             	mov    0x14(%ebp),%eax
f013122d:	83 e8 04             	sub    $0x4,%eax
f0131230:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0131232:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131235:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f013123c:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0131243:	eb 1f                	jmp    f0131264 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0131245:	83 ec 08             	sub    $0x8,%esp
f0131248:	ff 75 e8             	pushl  -0x18(%ebp)
f013124b:	8d 45 14             	lea    0x14(%ebp),%eax
f013124e:	50                   	push   %eax
f013124f:	e8 e7 fb ff ff       	call   f0130e3b <getuint>
f0131254:	83 c4 10             	add    $0x10,%esp
f0131257:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013125a:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f013125d:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0131264:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0131268:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013126b:	83 ec 04             	sub    $0x4,%esp
f013126e:	52                   	push   %edx
f013126f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0131272:	50                   	push   %eax
f0131273:	ff 75 f4             	pushl  -0xc(%ebp)
f0131276:	ff 75 f0             	pushl  -0x10(%ebp)
f0131279:	ff 75 0c             	pushl  0xc(%ebp)
f013127c:	ff 75 08             	pushl  0x8(%ebp)
f013127f:	e8 00 fb ff ff       	call   f0130d84 <printnum>
f0131284:	83 c4 20             	add    $0x20,%esp
			break;
f0131287:	eb 34                	jmp    f01312bd <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0131289:	83 ec 08             	sub    $0x8,%esp
f013128c:	ff 75 0c             	pushl  0xc(%ebp)
f013128f:	53                   	push   %ebx
f0131290:	8b 45 08             	mov    0x8(%ebp),%eax
f0131293:	ff d0                	call   *%eax
f0131295:	83 c4 10             	add    $0x10,%esp
			break;
f0131298:	eb 23                	jmp    f01312bd <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f013129a:	83 ec 08             	sub    $0x8,%esp
f013129d:	ff 75 0c             	pushl  0xc(%ebp)
f01312a0:	6a 25                	push   $0x25
f01312a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312a5:	ff d0                	call   *%eax
f01312a7:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01312aa:	ff 4d 10             	decl   0x10(%ebp)
f01312ad:	eb 03                	jmp    f01312b2 <vprintfmt+0x3b1>
f01312af:	ff 4d 10             	decl   0x10(%ebp)
f01312b2:	8b 45 10             	mov    0x10(%ebp),%eax
f01312b5:	48                   	dec    %eax
f01312b6:	8a 00                	mov    (%eax),%al
f01312b8:	3c 25                	cmp    $0x25,%al
f01312ba:	75 f3                	jne    f01312af <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01312bc:	90                   	nop
		}
	}
f01312bd:	e9 47 fc ff ff       	jmp    f0130f09 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f01312c2:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f01312c3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01312c6:	5b                   	pop    %ebx
f01312c7:	5e                   	pop    %esi
f01312c8:	5d                   	pop    %ebp
f01312c9:	c3                   	ret    

f01312ca <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01312ca:	55                   	push   %ebp
f01312cb:	89 e5                	mov    %esp,%ebp
f01312cd:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01312d0:	8d 45 10             	lea    0x10(%ebp),%eax
f01312d3:	83 c0 04             	add    $0x4,%eax
f01312d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01312d9:	8b 45 10             	mov    0x10(%ebp),%eax
f01312dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01312df:	50                   	push   %eax
f01312e0:	ff 75 0c             	pushl  0xc(%ebp)
f01312e3:	ff 75 08             	pushl  0x8(%ebp)
f01312e6:	e8 16 fc ff ff       	call   f0130f01 <vprintfmt>
f01312eb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01312ee:	90                   	nop
f01312ef:	c9                   	leave  
f01312f0:	c3                   	ret    

f01312f1 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01312f1:	55                   	push   %ebp
f01312f2:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01312f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312f7:	8b 40 08             	mov    0x8(%eax),%eax
f01312fa:	8d 50 01             	lea    0x1(%eax),%edx
f01312fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131300:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0131303:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131306:	8b 10                	mov    (%eax),%edx
f0131308:	8b 45 0c             	mov    0xc(%ebp),%eax
f013130b:	8b 40 04             	mov    0x4(%eax),%eax
f013130e:	39 c2                	cmp    %eax,%edx
f0131310:	73 12                	jae    f0131324 <sprintputch+0x33>
		*b->buf++ = ch;
f0131312:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131315:	8b 00                	mov    (%eax),%eax
f0131317:	8d 48 01             	lea    0x1(%eax),%ecx
f013131a:	8b 55 0c             	mov    0xc(%ebp),%edx
f013131d:	89 0a                	mov    %ecx,(%edx)
f013131f:	8b 55 08             	mov    0x8(%ebp),%edx
f0131322:	88 10                	mov    %dl,(%eax)
}
f0131324:	90                   	nop
f0131325:	5d                   	pop    %ebp
f0131326:	c3                   	ret    

f0131327 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0131327:	55                   	push   %ebp
f0131328:	89 e5                	mov    %esp,%ebp
f013132a:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f013132d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131330:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131333:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131336:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131339:	8b 45 08             	mov    0x8(%ebp),%eax
f013133c:	01 d0                	add    %edx,%eax
f013133e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131341:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0131348:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013134c:	74 06                	je     f0131354 <vsnprintf+0x2d>
f013134e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131352:	7f 07                	jg     f013135b <vsnprintf+0x34>
		return -E_INVAL;
f0131354:	b8 03 00 00 00       	mov    $0x3,%eax
f0131359:	eb 20                	jmp    f013137b <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f013135b:	ff 75 14             	pushl  0x14(%ebp)
f013135e:	ff 75 10             	pushl  0x10(%ebp)
f0131361:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0131364:	50                   	push   %eax
f0131365:	68 f1 12 13 f0       	push   $0xf01312f1
f013136a:	e8 92 fb ff ff       	call   f0130f01 <vprintfmt>
f013136f:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0131372:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131375:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0131378:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f013137b:	c9                   	leave  
f013137c:	c3                   	ret    

f013137d <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f013137d:	55                   	push   %ebp
f013137e:	89 e5                	mov    %esp,%ebp
f0131380:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0131383:	8d 45 10             	lea    0x10(%ebp),%eax
f0131386:	83 c0 04             	add    $0x4,%eax
f0131389:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f013138c:	8b 45 10             	mov    0x10(%ebp),%eax
f013138f:	ff 75 f4             	pushl  -0xc(%ebp)
f0131392:	50                   	push   %eax
f0131393:	ff 75 0c             	pushl  0xc(%ebp)
f0131396:	ff 75 08             	pushl  0x8(%ebp)
f0131399:	e8 89 ff ff ff       	call   f0131327 <vsnprintf>
f013139e:	83 c4 10             	add    $0x10,%esp
f01313a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01313a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01313a7:	c9                   	leave  
f01313a8:	c3                   	ret    

f01313a9 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01313a9:	55                   	push   %ebp
f01313aa:	89 e5                	mov    %esp,%ebp
f01313ac:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01313af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01313b3:	74 13                	je     f01313c8 <readline+0x1f>
		cprintf("%s", prompt);
f01313b5:	83 ec 08             	sub    $0x8,%esp
f01313b8:	ff 75 08             	pushl  0x8(%ebp)
f01313bb:	68 30 d8 13 f0       	push   $0xf013d830
f01313c0:	e8 49 f9 fc ff       	call   f0100d0e <cprintf>
f01313c5:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01313c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01313cf:	83 ec 0c             	sub    $0xc,%esp
f01313d2:	6a 00                	push   $0x0
f01313d4:	e8 e2 f8 fc ff       	call   f0100cbb <iscons>
f01313d9:	83 c4 10             	add    $0x10,%esp
f01313dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01313df:	e8 be f8 fc ff       	call   f0100ca2 <getchar>
f01313e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01313e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01313eb:	79 22                	jns    f013140f <readline+0x66>
			if (c != -E_EOF)
f01313ed:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01313f1:	0f 84 ad 00 00 00    	je     f01314a4 <readline+0xfb>
				cprintf("read error: %e\n", c);
f01313f7:	83 ec 08             	sub    $0x8,%esp
f01313fa:	ff 75 ec             	pushl  -0x14(%ebp)
f01313fd:	68 33 d8 13 f0       	push   $0xf013d833
f0131402:	e8 07 f9 fc ff       	call   f0100d0e <cprintf>
f0131407:	83 c4 10             	add    $0x10,%esp
			return;
f013140a:	e9 95 00 00 00       	jmp    f01314a4 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f013140f:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131413:	7e 34                	jle    f0131449 <readline+0xa0>
f0131415:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013141c:	7f 2b                	jg     f0131449 <readline+0xa0>
			if (echoing)
f013141e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131422:	74 0e                	je     f0131432 <readline+0x89>
				cputchar(c);
f0131424:	83 ec 0c             	sub    $0xc,%esp
f0131427:	ff 75 ec             	pushl  -0x14(%ebp)
f013142a:	e8 5c f8 fc ff       	call   f0100c8b <cputchar>
f013142f:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131432:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131435:	8d 50 01             	lea    0x1(%eax),%edx
f0131438:	89 55 f4             	mov    %edx,-0xc(%ebp)
f013143b:	89 c2                	mov    %eax,%edx
f013143d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131440:	01 d0                	add    %edx,%eax
f0131442:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131445:	88 10                	mov    %dl,(%eax)
f0131447:	eb 56                	jmp    f013149f <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0131449:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f013144d:	75 1f                	jne    f013146e <readline+0xc5>
f013144f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131453:	7e 19                	jle    f013146e <readline+0xc5>
			if (echoing)
f0131455:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131459:	74 0e                	je     f0131469 <readline+0xc0>
				cputchar(c);
f013145b:	83 ec 0c             	sub    $0xc,%esp
f013145e:	ff 75 ec             	pushl  -0x14(%ebp)
f0131461:	e8 25 f8 fc ff       	call   f0100c8b <cputchar>
f0131466:	83 c4 10             	add    $0x10,%esp

			i--;
f0131469:	ff 4d f4             	decl   -0xc(%ebp)
f013146c:	eb 31                	jmp    f013149f <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f013146e:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131472:	74 0a                	je     f013147e <readline+0xd5>
f0131474:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0131478:	0f 85 61 ff ff ff    	jne    f01313df <readline+0x36>
			if (echoing)
f013147e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131482:	74 0e                	je     f0131492 <readline+0xe9>
				cputchar(c);
f0131484:	83 ec 0c             	sub    $0xc,%esp
f0131487:	ff 75 ec             	pushl  -0x14(%ebp)
f013148a:	e8 fc f7 fc ff       	call   f0100c8b <cputchar>
f013148f:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0131492:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131495:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131498:	01 d0                	add    %edx,%eax
f013149a:	c6 00 00             	movb   $0x0,(%eax)
			return;
f013149d:	eb 06                	jmp    f01314a5 <readline+0xfc>
		}
	}
f013149f:	e9 3b ff ff ff       	jmp    f01313df <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01314a4:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01314a5:	c9                   	leave  
f01314a6:	c3                   	ret    

f01314a7 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01314a7:	55                   	push   %ebp
f01314a8:	89 e5                	mov    %esp,%ebp
f01314aa:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01314ad:	e8 72 bb fd ff       	call   f010d024 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01314b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01314b6:	74 13                	je     f01314cb <atomic_readline+0x24>
		cprintf("%s", prompt);
f01314b8:	83 ec 08             	sub    $0x8,%esp
f01314bb:	ff 75 08             	pushl  0x8(%ebp)
f01314be:	68 30 d8 13 f0       	push   $0xf013d830
f01314c3:	e8 46 f8 fc ff       	call   f0100d0e <cprintf>
f01314c8:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01314cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01314d2:	83 ec 0c             	sub    $0xc,%esp
f01314d5:	6a 00                	push   $0x0
f01314d7:	e8 df f7 fc ff       	call   f0100cbb <iscons>
f01314dc:	83 c4 10             	add    $0x10,%esp
f01314df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01314e2:	e8 bb f7 fc ff       	call   f0100ca2 <getchar>
f01314e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01314ea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01314ee:	79 23                	jns    f0131513 <atomic_readline+0x6c>
			if (c != -E_EOF)
f01314f0:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01314f4:	74 13                	je     f0131509 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f01314f6:	83 ec 08             	sub    $0x8,%esp
f01314f9:	ff 75 ec             	pushl  -0x14(%ebp)
f01314fc:	68 33 d8 13 f0       	push   $0xf013d833
f0131501:	e8 08 f8 fc ff       	call   f0100d0e <cprintf>
f0131506:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0131509:	e8 30 bb fd ff       	call   f010d03e <sys_enable_interrupt>
			return;
f013150e:	e9 9a 00 00 00       	jmp    f01315ad <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131513:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131517:	7e 34                	jle    f013154d <atomic_readline+0xa6>
f0131519:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131520:	7f 2b                	jg     f013154d <atomic_readline+0xa6>
			if (echoing)
f0131522:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131526:	74 0e                	je     f0131536 <atomic_readline+0x8f>
				cputchar(c);
f0131528:	83 ec 0c             	sub    $0xc,%esp
f013152b:	ff 75 ec             	pushl  -0x14(%ebp)
f013152e:	e8 58 f7 fc ff       	call   f0100c8b <cputchar>
f0131533:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131536:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131539:	8d 50 01             	lea    0x1(%eax),%edx
f013153c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f013153f:	89 c2                	mov    %eax,%edx
f0131541:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131544:	01 d0                	add    %edx,%eax
f0131546:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131549:	88 10                	mov    %dl,(%eax)
f013154b:	eb 5b                	jmp    f01315a8 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f013154d:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131551:	75 1f                	jne    f0131572 <atomic_readline+0xcb>
f0131553:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131557:	7e 19                	jle    f0131572 <atomic_readline+0xcb>
			if (echoing)
f0131559:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013155d:	74 0e                	je     f013156d <atomic_readline+0xc6>
				cputchar(c);
f013155f:	83 ec 0c             	sub    $0xc,%esp
f0131562:	ff 75 ec             	pushl  -0x14(%ebp)
f0131565:	e8 21 f7 fc ff       	call   f0100c8b <cputchar>
f013156a:	83 c4 10             	add    $0x10,%esp
			i--;
f013156d:	ff 4d f4             	decl   -0xc(%ebp)
f0131570:	eb 36                	jmp    f01315a8 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0131572:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131576:	74 0a                	je     f0131582 <atomic_readline+0xdb>
f0131578:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f013157c:	0f 85 60 ff ff ff    	jne    f01314e2 <atomic_readline+0x3b>
			if (echoing)
f0131582:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131586:	74 0e                	je     f0131596 <atomic_readline+0xef>
				cputchar(c);
f0131588:	83 ec 0c             	sub    $0xc,%esp
f013158b:	ff 75 ec             	pushl  -0x14(%ebp)
f013158e:	e8 f8 f6 fc ff       	call   f0100c8b <cputchar>
f0131593:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0131596:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131599:	8b 45 0c             	mov    0xc(%ebp),%eax
f013159c:	01 d0                	add    %edx,%eax
f013159e:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01315a1:	e8 98 ba fd ff       	call   f010d03e <sys_enable_interrupt>
			return;
f01315a6:	eb 05                	jmp    f01315ad <atomic_readline+0x106>
		}
	}
f01315a8:	e9 35 ff ff ff       	jmp    f01314e2 <atomic_readline+0x3b>
}
f01315ad:	c9                   	leave  
f01315ae:	c3                   	ret    

f01315af <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f01315af:	55                   	push   %ebp
f01315b0:	89 e5                	mov    %esp,%ebp
f01315b2:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01315b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01315bc:	eb 06                	jmp    f01315c4 <strlen+0x15>
		n++;
f01315be:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01315c1:	ff 45 08             	incl   0x8(%ebp)
f01315c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01315c7:	8a 00                	mov    (%eax),%al
f01315c9:	84 c0                	test   %al,%al
f01315cb:	75 f1                	jne    f01315be <strlen+0xf>
		n++;
	return n;
f01315cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01315d0:	c9                   	leave  
f01315d1:	c3                   	ret    

f01315d2 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01315d2:	55                   	push   %ebp
f01315d3:	89 e5                	mov    %esp,%ebp
f01315d5:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01315d8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01315df:	eb 09                	jmp    f01315ea <strnlen+0x18>
		n++;
f01315e1:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01315e4:	ff 45 08             	incl   0x8(%ebp)
f01315e7:	ff 4d 0c             	decl   0xc(%ebp)
f01315ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01315ee:	74 09                	je     f01315f9 <strnlen+0x27>
f01315f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01315f3:	8a 00                	mov    (%eax),%al
f01315f5:	84 c0                	test   %al,%al
f01315f7:	75 e8                	jne    f01315e1 <strnlen+0xf>
		n++;
	return n;
f01315f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01315fc:	c9                   	leave  
f01315fd:	c3                   	ret    

f01315fe <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01315fe:	55                   	push   %ebp
f01315ff:	89 e5                	mov    %esp,%ebp
f0131601:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0131604:	8b 45 08             	mov    0x8(%ebp),%eax
f0131607:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f013160a:	90                   	nop
f013160b:	8b 45 08             	mov    0x8(%ebp),%eax
f013160e:	8d 50 01             	lea    0x1(%eax),%edx
f0131611:	89 55 08             	mov    %edx,0x8(%ebp)
f0131614:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131617:	8d 4a 01             	lea    0x1(%edx),%ecx
f013161a:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f013161d:	8a 12                	mov    (%edx),%dl
f013161f:	88 10                	mov    %dl,(%eax)
f0131621:	8a 00                	mov    (%eax),%al
f0131623:	84 c0                	test   %al,%al
f0131625:	75 e4                	jne    f013160b <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131627:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013162a:	c9                   	leave  
f013162b:	c3                   	ret    

f013162c <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f013162c:	55                   	push   %ebp
f013162d:	89 e5                	mov    %esp,%ebp
f013162f:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131632:	8b 45 08             	mov    0x8(%ebp),%eax
f0131635:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131638:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013163f:	eb 1f                	jmp    f0131660 <strncpy+0x34>
		*dst++ = *src;
f0131641:	8b 45 08             	mov    0x8(%ebp),%eax
f0131644:	8d 50 01             	lea    0x1(%eax),%edx
f0131647:	89 55 08             	mov    %edx,0x8(%ebp)
f013164a:	8b 55 0c             	mov    0xc(%ebp),%edx
f013164d:	8a 12                	mov    (%edx),%dl
f013164f:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0131651:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131654:	8a 00                	mov    (%eax),%al
f0131656:	84 c0                	test   %al,%al
f0131658:	74 03                	je     f013165d <strncpy+0x31>
			src++;
f013165a:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f013165d:	ff 45 fc             	incl   -0x4(%ebp)
f0131660:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131663:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131666:	72 d9                	jb     f0131641 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0131668:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f013166b:	c9                   	leave  
f013166c:	c3                   	ret    

f013166d <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f013166d:	55                   	push   %ebp
f013166e:	89 e5                	mov    %esp,%ebp
f0131670:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0131673:	8b 45 08             	mov    0x8(%ebp),%eax
f0131676:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0131679:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013167d:	74 30                	je     f01316af <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f013167f:	eb 16                	jmp    f0131697 <strlcpy+0x2a>
			*dst++ = *src++;
f0131681:	8b 45 08             	mov    0x8(%ebp),%eax
f0131684:	8d 50 01             	lea    0x1(%eax),%edx
f0131687:	89 55 08             	mov    %edx,0x8(%ebp)
f013168a:	8b 55 0c             	mov    0xc(%ebp),%edx
f013168d:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131690:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131693:	8a 12                	mov    (%edx),%dl
f0131695:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131697:	ff 4d 10             	decl   0x10(%ebp)
f013169a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013169e:	74 09                	je     f01316a9 <strlcpy+0x3c>
f01316a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316a3:	8a 00                	mov    (%eax),%al
f01316a5:	84 c0                	test   %al,%al
f01316a7:	75 d8                	jne    f0131681 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f01316a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01316ac:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f01316af:	8b 55 08             	mov    0x8(%ebp),%edx
f01316b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01316b5:	29 c2                	sub    %eax,%edx
f01316b7:	89 d0                	mov    %edx,%eax
}
f01316b9:	c9                   	leave  
f01316ba:	c3                   	ret    

f01316bb <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01316bb:	55                   	push   %ebp
f01316bc:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f01316be:	eb 06                	jmp    f01316c6 <strcmp+0xb>
		p++, q++;
f01316c0:	ff 45 08             	incl   0x8(%ebp)
f01316c3:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01316c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01316c9:	8a 00                	mov    (%eax),%al
f01316cb:	84 c0                	test   %al,%al
f01316cd:	74 0e                	je     f01316dd <strcmp+0x22>
f01316cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01316d2:	8a 10                	mov    (%eax),%dl
f01316d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316d7:	8a 00                	mov    (%eax),%al
f01316d9:	38 c2                	cmp    %al,%dl
f01316db:	74 e3                	je     f01316c0 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01316dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01316e0:	8a 00                	mov    (%eax),%al
f01316e2:	0f b6 d0             	movzbl %al,%edx
f01316e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316e8:	8a 00                	mov    (%eax),%al
f01316ea:	0f b6 c0             	movzbl %al,%eax
f01316ed:	29 c2                	sub    %eax,%edx
f01316ef:	89 d0                	mov    %edx,%eax
}
f01316f1:	5d                   	pop    %ebp
f01316f2:	c3                   	ret    

f01316f3 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01316f3:	55                   	push   %ebp
f01316f4:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01316f6:	eb 09                	jmp    f0131701 <strncmp+0xe>
		n--, p++, q++;
f01316f8:	ff 4d 10             	decl   0x10(%ebp)
f01316fb:	ff 45 08             	incl   0x8(%ebp)
f01316fe:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0131701:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131705:	74 17                	je     f013171e <strncmp+0x2b>
f0131707:	8b 45 08             	mov    0x8(%ebp),%eax
f013170a:	8a 00                	mov    (%eax),%al
f013170c:	84 c0                	test   %al,%al
f013170e:	74 0e                	je     f013171e <strncmp+0x2b>
f0131710:	8b 45 08             	mov    0x8(%ebp),%eax
f0131713:	8a 10                	mov    (%eax),%dl
f0131715:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131718:	8a 00                	mov    (%eax),%al
f013171a:	38 c2                	cmp    %al,%dl
f013171c:	74 da                	je     f01316f8 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f013171e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131722:	75 07                	jne    f013172b <strncmp+0x38>
		return 0;
f0131724:	b8 00 00 00 00       	mov    $0x0,%eax
f0131729:	eb 14                	jmp    f013173f <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f013172b:	8b 45 08             	mov    0x8(%ebp),%eax
f013172e:	8a 00                	mov    (%eax),%al
f0131730:	0f b6 d0             	movzbl %al,%edx
f0131733:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131736:	8a 00                	mov    (%eax),%al
f0131738:	0f b6 c0             	movzbl %al,%eax
f013173b:	29 c2                	sub    %eax,%edx
f013173d:	89 d0                	mov    %edx,%eax
}
f013173f:	5d                   	pop    %ebp
f0131740:	c3                   	ret    

f0131741 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0131741:	55                   	push   %ebp
f0131742:	89 e5                	mov    %esp,%ebp
f0131744:	83 ec 04             	sub    $0x4,%esp
f0131747:	8b 45 0c             	mov    0xc(%ebp),%eax
f013174a:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013174d:	eb 12                	jmp    f0131761 <strchr+0x20>
		if (*s == c)
f013174f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131752:	8a 00                	mov    (%eax),%al
f0131754:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131757:	75 05                	jne    f013175e <strchr+0x1d>
			return (char *) s;
f0131759:	8b 45 08             	mov    0x8(%ebp),%eax
f013175c:	eb 11                	jmp    f013176f <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f013175e:	ff 45 08             	incl   0x8(%ebp)
f0131761:	8b 45 08             	mov    0x8(%ebp),%eax
f0131764:	8a 00                	mov    (%eax),%al
f0131766:	84 c0                	test   %al,%al
f0131768:	75 e5                	jne    f013174f <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f013176a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013176f:	c9                   	leave  
f0131770:	c3                   	ret    

f0131771 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0131771:	55                   	push   %ebp
f0131772:	89 e5                	mov    %esp,%ebp
f0131774:	83 ec 04             	sub    $0x4,%esp
f0131777:	8b 45 0c             	mov    0xc(%ebp),%eax
f013177a:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013177d:	eb 0d                	jmp    f013178c <strfind+0x1b>
		if (*s == c)
f013177f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131782:	8a 00                	mov    (%eax),%al
f0131784:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131787:	74 0e                	je     f0131797 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131789:	ff 45 08             	incl   0x8(%ebp)
f013178c:	8b 45 08             	mov    0x8(%ebp),%eax
f013178f:	8a 00                	mov    (%eax),%al
f0131791:	84 c0                	test   %al,%al
f0131793:	75 ea                	jne    f013177f <strfind+0xe>
f0131795:	eb 01                	jmp    f0131798 <strfind+0x27>
		if (*s == c)
			break;
f0131797:	90                   	nop
	return (char *) s;
f0131798:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013179b:	c9                   	leave  
f013179c:	c3                   	ret    

f013179d <memset>:


void *
memset(void *v, int c, uint32 n)
{
f013179d:	55                   	push   %ebp
f013179e:	89 e5                	mov    %esp,%ebp
f01317a0:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01317a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01317a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f01317a9:	8b 45 10             	mov    0x10(%ebp),%eax
f01317ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f01317af:	eb 0e                	jmp    f01317bf <memset+0x22>
		*p++ = c;
f01317b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01317b4:	8d 50 01             	lea    0x1(%eax),%edx
f01317b7:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01317ba:	8b 55 0c             	mov    0xc(%ebp),%edx
f01317bd:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01317bf:	ff 4d f8             	decl   -0x8(%ebp)
f01317c2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01317c6:	79 e9                	jns    f01317b1 <memset+0x14>
		*p++ = c;

	return v;
f01317c8:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01317cb:	c9                   	leave  
f01317cc:	c3                   	ret    

f01317cd <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01317cd:	55                   	push   %ebp
f01317ce:	89 e5                	mov    %esp,%ebp
f01317d0:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01317d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01317d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01317dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01317df:	eb 16                	jmp    f01317f7 <memcpy+0x2a>
		*d++ = *s++;
f01317e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01317e4:	8d 50 01             	lea    0x1(%eax),%edx
f01317e7:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01317ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01317ed:	8d 4a 01             	lea    0x1(%edx),%ecx
f01317f0:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01317f3:	8a 12                	mov    (%edx),%dl
f01317f5:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f01317f7:	8b 45 10             	mov    0x10(%ebp),%eax
f01317fa:	8d 50 ff             	lea    -0x1(%eax),%edx
f01317fd:	89 55 10             	mov    %edx,0x10(%ebp)
f0131800:	85 c0                	test   %eax,%eax
f0131802:	75 dd                	jne    f01317e1 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131804:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131807:	c9                   	leave  
f0131808:	c3                   	ret    

f0131809 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131809:	55                   	push   %ebp
f013180a:	89 e5                	mov    %esp,%ebp
f013180c:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013180f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131812:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131815:	8b 45 08             	mov    0x8(%ebp),%eax
f0131818:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f013181b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013181e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131821:	73 50                	jae    f0131873 <memmove+0x6a>
f0131823:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131826:	8b 45 10             	mov    0x10(%ebp),%eax
f0131829:	01 d0                	add    %edx,%eax
f013182b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013182e:	76 43                	jbe    f0131873 <memmove+0x6a>
		s += n;
f0131830:	8b 45 10             	mov    0x10(%ebp),%eax
f0131833:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131836:	8b 45 10             	mov    0x10(%ebp),%eax
f0131839:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f013183c:	eb 10                	jmp    f013184e <memmove+0x45>
			*--d = *--s;
f013183e:	ff 4d f8             	decl   -0x8(%ebp)
f0131841:	ff 4d fc             	decl   -0x4(%ebp)
f0131844:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131847:	8a 10                	mov    (%eax),%dl
f0131849:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013184c:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f013184e:	8b 45 10             	mov    0x10(%ebp),%eax
f0131851:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131854:	89 55 10             	mov    %edx,0x10(%ebp)
f0131857:	85 c0                	test   %eax,%eax
f0131859:	75 e3                	jne    f013183e <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f013185b:	eb 23                	jmp    f0131880 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f013185d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131860:	8d 50 01             	lea    0x1(%eax),%edx
f0131863:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131866:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131869:	8d 4a 01             	lea    0x1(%edx),%ecx
f013186c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f013186f:	8a 12                	mov    (%edx),%dl
f0131871:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131873:	8b 45 10             	mov    0x10(%ebp),%eax
f0131876:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131879:	89 55 10             	mov    %edx,0x10(%ebp)
f013187c:	85 c0                	test   %eax,%eax
f013187e:	75 dd                	jne    f013185d <memmove+0x54>
			*d++ = *s++;

	return dst;
f0131880:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131883:	c9                   	leave  
f0131884:	c3                   	ret    

f0131885 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131885:	55                   	push   %ebp
f0131886:	89 e5                	mov    %esp,%ebp
f0131888:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f013188b:	8b 45 08             	mov    0x8(%ebp),%eax
f013188e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0131891:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131894:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131897:	eb 2a                	jmp    f01318c3 <memcmp+0x3e>
		if (*s1 != *s2)
f0131899:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013189c:	8a 10                	mov    (%eax),%dl
f013189e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318a1:	8a 00                	mov    (%eax),%al
f01318a3:	38 c2                	cmp    %al,%dl
f01318a5:	74 16                	je     f01318bd <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f01318a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01318aa:	8a 00                	mov    (%eax),%al
f01318ac:	0f b6 d0             	movzbl %al,%edx
f01318af:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318b2:	8a 00                	mov    (%eax),%al
f01318b4:	0f b6 c0             	movzbl %al,%eax
f01318b7:	29 c2                	sub    %eax,%edx
f01318b9:	89 d0                	mov    %edx,%eax
f01318bb:	eb 18                	jmp    f01318d5 <memcmp+0x50>
		s1++, s2++;
f01318bd:	ff 45 fc             	incl   -0x4(%ebp)
f01318c0:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01318c3:	8b 45 10             	mov    0x10(%ebp),%eax
f01318c6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01318c9:	89 55 10             	mov    %edx,0x10(%ebp)
f01318cc:	85 c0                	test   %eax,%eax
f01318ce:	75 c9                	jne    f0131899 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01318d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01318d5:	c9                   	leave  
f01318d6:	c3                   	ret    

f01318d7 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01318d7:	55                   	push   %ebp
f01318d8:	89 e5                	mov    %esp,%ebp
f01318da:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01318dd:	8b 55 08             	mov    0x8(%ebp),%edx
f01318e0:	8b 45 10             	mov    0x10(%ebp),%eax
f01318e3:	01 d0                	add    %edx,%eax
f01318e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f01318e8:	eb 15                	jmp    f01318ff <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01318ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01318ed:	8a 00                	mov    (%eax),%al
f01318ef:	0f b6 d0             	movzbl %al,%edx
f01318f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318f5:	0f b6 c0             	movzbl %al,%eax
f01318f8:	39 c2                	cmp    %eax,%edx
f01318fa:	74 0d                	je     f0131909 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01318fc:	ff 45 08             	incl   0x8(%ebp)
f01318ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0131902:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131905:	72 e3                	jb     f01318ea <memfind+0x13>
f0131907:	eb 01                	jmp    f013190a <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131909:	90                   	nop
	return (void *) s;
f013190a:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013190d:	c9                   	leave  
f013190e:	c3                   	ret    

f013190f <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f013190f:	55                   	push   %ebp
f0131910:	89 e5                	mov    %esp,%ebp
f0131912:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131915:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f013191c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131923:	eb 03                	jmp    f0131928 <strtol+0x19>
		s++;
f0131925:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131928:	8b 45 08             	mov    0x8(%ebp),%eax
f013192b:	8a 00                	mov    (%eax),%al
f013192d:	3c 20                	cmp    $0x20,%al
f013192f:	74 f4                	je     f0131925 <strtol+0x16>
f0131931:	8b 45 08             	mov    0x8(%ebp),%eax
f0131934:	8a 00                	mov    (%eax),%al
f0131936:	3c 09                	cmp    $0x9,%al
f0131938:	74 eb                	je     f0131925 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f013193a:	8b 45 08             	mov    0x8(%ebp),%eax
f013193d:	8a 00                	mov    (%eax),%al
f013193f:	3c 2b                	cmp    $0x2b,%al
f0131941:	75 05                	jne    f0131948 <strtol+0x39>
		s++;
f0131943:	ff 45 08             	incl   0x8(%ebp)
f0131946:	eb 13                	jmp    f013195b <strtol+0x4c>
	else if (*s == '-')
f0131948:	8b 45 08             	mov    0x8(%ebp),%eax
f013194b:	8a 00                	mov    (%eax),%al
f013194d:	3c 2d                	cmp    $0x2d,%al
f013194f:	75 0a                	jne    f013195b <strtol+0x4c>
		s++, neg = 1;
f0131951:	ff 45 08             	incl   0x8(%ebp)
f0131954:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f013195b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013195f:	74 06                	je     f0131967 <strtol+0x58>
f0131961:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131965:	75 20                	jne    f0131987 <strtol+0x78>
f0131967:	8b 45 08             	mov    0x8(%ebp),%eax
f013196a:	8a 00                	mov    (%eax),%al
f013196c:	3c 30                	cmp    $0x30,%al
f013196e:	75 17                	jne    f0131987 <strtol+0x78>
f0131970:	8b 45 08             	mov    0x8(%ebp),%eax
f0131973:	40                   	inc    %eax
f0131974:	8a 00                	mov    (%eax),%al
f0131976:	3c 78                	cmp    $0x78,%al
f0131978:	75 0d                	jne    f0131987 <strtol+0x78>
		s += 2, base = 16;
f013197a:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f013197e:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131985:	eb 28                	jmp    f01319af <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131987:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013198b:	75 15                	jne    f01319a2 <strtol+0x93>
f013198d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131990:	8a 00                	mov    (%eax),%al
f0131992:	3c 30                	cmp    $0x30,%al
f0131994:	75 0c                	jne    f01319a2 <strtol+0x93>
		s++, base = 8;
f0131996:	ff 45 08             	incl   0x8(%ebp)
f0131999:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f01319a0:	eb 0d                	jmp    f01319af <strtol+0xa0>
	else if (base == 0)
f01319a2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01319a6:	75 07                	jne    f01319af <strtol+0xa0>
		base = 10;
f01319a8:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f01319af:	8b 45 08             	mov    0x8(%ebp),%eax
f01319b2:	8a 00                	mov    (%eax),%al
f01319b4:	3c 2f                	cmp    $0x2f,%al
f01319b6:	7e 19                	jle    f01319d1 <strtol+0xc2>
f01319b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01319bb:	8a 00                	mov    (%eax),%al
f01319bd:	3c 39                	cmp    $0x39,%al
f01319bf:	7f 10                	jg     f01319d1 <strtol+0xc2>
			dig = *s - '0';
f01319c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01319c4:	8a 00                	mov    (%eax),%al
f01319c6:	0f be c0             	movsbl %al,%eax
f01319c9:	83 e8 30             	sub    $0x30,%eax
f01319cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01319cf:	eb 42                	jmp    f0131a13 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01319d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01319d4:	8a 00                	mov    (%eax),%al
f01319d6:	3c 60                	cmp    $0x60,%al
f01319d8:	7e 19                	jle    f01319f3 <strtol+0xe4>
f01319da:	8b 45 08             	mov    0x8(%ebp),%eax
f01319dd:	8a 00                	mov    (%eax),%al
f01319df:	3c 7a                	cmp    $0x7a,%al
f01319e1:	7f 10                	jg     f01319f3 <strtol+0xe4>
			dig = *s - 'a' + 10;
f01319e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01319e6:	8a 00                	mov    (%eax),%al
f01319e8:	0f be c0             	movsbl %al,%eax
f01319eb:	83 e8 57             	sub    $0x57,%eax
f01319ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01319f1:	eb 20                	jmp    f0131a13 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01319f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01319f6:	8a 00                	mov    (%eax),%al
f01319f8:	3c 40                	cmp    $0x40,%al
f01319fa:	7e 39                	jle    f0131a35 <strtol+0x126>
f01319fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01319ff:	8a 00                	mov    (%eax),%al
f0131a01:	3c 5a                	cmp    $0x5a,%al
f0131a03:	7f 30                	jg     f0131a35 <strtol+0x126>
			dig = *s - 'A' + 10;
f0131a05:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a08:	8a 00                	mov    (%eax),%al
f0131a0a:	0f be c0             	movsbl %al,%eax
f0131a0d:	83 e8 37             	sub    $0x37,%eax
f0131a10:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a16:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131a19:	7d 19                	jge    f0131a34 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131a1b:	ff 45 08             	incl   0x8(%ebp)
f0131a1e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131a21:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131a25:	89 c2                	mov    %eax,%edx
f0131a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a2a:	01 d0                	add    %edx,%eax
f0131a2c:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131a2f:	e9 7b ff ff ff       	jmp    f01319af <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131a34:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131a35:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131a39:	74 08                	je     f0131a43 <strtol+0x134>
		*endptr = (char *) s;
f0131a3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a3e:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a41:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131a43:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131a47:	74 07                	je     f0131a50 <strtol+0x141>
f0131a49:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131a4c:	f7 d8                	neg    %eax
f0131a4e:	eb 03                	jmp    f0131a53 <strtol+0x144>
f0131a50:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131a53:	c9                   	leave  
f0131a54:	c3                   	ret    

f0131a55 <ltostr>:

void
ltostr(long value, char *str)
{
f0131a55:	55                   	push   %ebp
f0131a56:	89 e5                	mov    %esp,%ebp
f0131a58:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131a5b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131a62:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131a69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131a6d:	79 13                	jns    f0131a82 <ltostr+0x2d>
	{
		neg = 1;
f0131a6f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131a76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a79:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131a7c:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131a7f:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131a82:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a85:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131a8a:	99                   	cltd   
f0131a8b:	f7 f9                	idiv   %ecx
f0131a8d:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131a90:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131a93:	8d 50 01             	lea    0x1(%eax),%edx
f0131a96:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131a99:	89 c2                	mov    %eax,%edx
f0131a9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a9e:	01 d0                	add    %edx,%eax
f0131aa0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131aa3:	83 c2 30             	add    $0x30,%edx
f0131aa6:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131aa8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131aab:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131ab0:	f7 e9                	imul   %ecx
f0131ab2:	c1 fa 02             	sar    $0x2,%edx
f0131ab5:	89 c8                	mov    %ecx,%eax
f0131ab7:	c1 f8 1f             	sar    $0x1f,%eax
f0131aba:	29 c2                	sub    %eax,%edx
f0131abc:	89 d0                	mov    %edx,%eax
f0131abe:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131ac1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131ac4:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131ac9:	f7 e9                	imul   %ecx
f0131acb:	c1 fa 02             	sar    $0x2,%edx
f0131ace:	89 c8                	mov    %ecx,%eax
f0131ad0:	c1 f8 1f             	sar    $0x1f,%eax
f0131ad3:	29 c2                	sub    %eax,%edx
f0131ad5:	89 d0                	mov    %edx,%eax
f0131ad7:	c1 e0 02             	shl    $0x2,%eax
f0131ada:	01 d0                	add    %edx,%eax
f0131adc:	01 c0                	add    %eax,%eax
f0131ade:	29 c1                	sub    %eax,%ecx
f0131ae0:	89 ca                	mov    %ecx,%edx
f0131ae2:	85 d2                	test   %edx,%edx
f0131ae4:	75 9c                	jne    f0131a82 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131ae6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131aed:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131af0:	48                   	dec    %eax
f0131af1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131af4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131af8:	74 3d                	je     f0131b37 <ltostr+0xe2>
		start = 1 ;
f0131afa:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131b01:	eb 34                	jmp    f0131b37 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131b03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b06:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b09:	01 d0                	add    %edx,%eax
f0131b0b:	8a 00                	mov    (%eax),%al
f0131b0d:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131b10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b16:	01 c2                	add    %eax,%edx
f0131b18:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131b1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b1e:	01 c8                	add    %ecx,%eax
f0131b20:	8a 00                	mov    (%eax),%al
f0131b22:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131b24:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131b27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b2a:	01 c2                	add    %eax,%edx
f0131b2c:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131b2f:	88 02                	mov    %al,(%edx)
		start++ ;
f0131b31:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131b34:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b3a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131b3d:	7c c4                	jl     f0131b03 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131b3f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131b42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b45:	01 d0                	add    %edx,%eax
f0131b47:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131b4a:	90                   	nop
f0131b4b:	c9                   	leave  
f0131b4c:	c3                   	ret    

f0131b4d <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131b4d:	55                   	push   %ebp
f0131b4e:	89 e5                	mov    %esp,%ebp
f0131b50:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131b53:	ff 75 08             	pushl  0x8(%ebp)
f0131b56:	e8 54 fa ff ff       	call   f01315af <strlen>
f0131b5b:	83 c4 04             	add    $0x4,%esp
f0131b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131b61:	ff 75 0c             	pushl  0xc(%ebp)
f0131b64:	e8 46 fa ff ff       	call   f01315af <strlen>
f0131b69:	83 c4 04             	add    $0x4,%esp
f0131b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131b6f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131b76:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131b7d:	eb 17                	jmp    f0131b96 <strcconcat+0x49>
		final[s] = str1[s] ;
f0131b7f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131b82:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b85:	01 c2                	add    %eax,%edx
f0131b87:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131b8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b8d:	01 c8                	add    %ecx,%eax
f0131b8f:	8a 00                	mov    (%eax),%al
f0131b91:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131b93:	ff 45 fc             	incl   -0x4(%ebp)
f0131b96:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b99:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131b9c:	7c e1                	jl     f0131b7f <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131b9e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131ba5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131bac:	eb 1f                	jmp    f0131bcd <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131bae:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131bb1:	8d 50 01             	lea    0x1(%eax),%edx
f0131bb4:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131bb7:	89 c2                	mov    %eax,%edx
f0131bb9:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bbc:	01 c2                	add    %eax,%edx
f0131bbe:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131bc1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131bc4:	01 c8                	add    %ecx,%eax
f0131bc6:	8a 00                	mov    (%eax),%al
f0131bc8:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131bca:	ff 45 f8             	incl   -0x8(%ebp)
f0131bcd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131bd0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131bd3:	7c d9                	jl     f0131bae <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131bd5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131bd8:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bdb:	01 d0                	add    %edx,%eax
f0131bdd:	c6 00 00             	movb   $0x0,(%eax)
}
f0131be0:	90                   	nop
f0131be1:	c9                   	leave  
f0131be2:	c3                   	ret    

f0131be3 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131be3:	55                   	push   %ebp
f0131be4:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131be6:	8b 45 14             	mov    0x14(%ebp),%eax
f0131be9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0131bef:	8b 45 14             	mov    0x14(%ebp),%eax
f0131bf2:	8b 00                	mov    (%eax),%eax
f0131bf4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131bfb:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bfe:	01 d0                	add    %edx,%eax
f0131c00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131c06:	eb 0c                	jmp    f0131c14 <strsplit+0x31>
			*string++ = 0;
f0131c08:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c0b:	8d 50 01             	lea    0x1(%eax),%edx
f0131c0e:	89 55 08             	mov    %edx,0x8(%ebp)
f0131c11:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131c14:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c17:	8a 00                	mov    (%eax),%al
f0131c19:	84 c0                	test   %al,%al
f0131c1b:	74 18                	je     f0131c35 <strsplit+0x52>
f0131c1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c20:	8a 00                	mov    (%eax),%al
f0131c22:	0f be c0             	movsbl %al,%eax
f0131c25:	50                   	push   %eax
f0131c26:	ff 75 0c             	pushl  0xc(%ebp)
f0131c29:	e8 13 fb ff ff       	call   f0131741 <strchr>
f0131c2e:	83 c4 08             	add    $0x8,%esp
f0131c31:	85 c0                	test   %eax,%eax
f0131c33:	75 d3                	jne    f0131c08 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c38:	8a 00                	mov    (%eax),%al
f0131c3a:	84 c0                	test   %al,%al
f0131c3c:	74 5a                	je     f0131c98 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131c3e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c41:	8b 00                	mov    (%eax),%eax
f0131c43:	83 f8 0f             	cmp    $0xf,%eax
f0131c46:	75 07                	jne    f0131c4f <strsplit+0x6c>
		{
			return 0;
f0131c48:	b8 00 00 00 00       	mov    $0x0,%eax
f0131c4d:	eb 66                	jmp    f0131cb5 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131c4f:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c52:	8b 00                	mov    (%eax),%eax
f0131c54:	8d 48 01             	lea    0x1(%eax),%ecx
f0131c57:	8b 55 14             	mov    0x14(%ebp),%edx
f0131c5a:	89 0a                	mov    %ecx,(%edx)
f0131c5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131c63:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c66:	01 c2                	add    %eax,%edx
f0131c68:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c6b:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131c6d:	eb 03                	jmp    f0131c72 <strsplit+0x8f>
			string++;
f0131c6f:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131c72:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c75:	8a 00                	mov    (%eax),%al
f0131c77:	84 c0                	test   %al,%al
f0131c79:	74 8b                	je     f0131c06 <strsplit+0x23>
f0131c7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c7e:	8a 00                	mov    (%eax),%al
f0131c80:	0f be c0             	movsbl %al,%eax
f0131c83:	50                   	push   %eax
f0131c84:	ff 75 0c             	pushl  0xc(%ebp)
f0131c87:	e8 b5 fa ff ff       	call   f0131741 <strchr>
f0131c8c:	83 c4 08             	add    $0x8,%esp
f0131c8f:	85 c0                	test   %eax,%eax
f0131c91:	74 dc                	je     f0131c6f <strsplit+0x8c>
			string++;
	}
f0131c93:	e9 6e ff ff ff       	jmp    f0131c06 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131c98:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131c99:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c9c:	8b 00                	mov    (%eax),%eax
f0131c9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131ca5:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ca8:	01 d0                	add    %edx,%eax
f0131caa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0131cb0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131cb5:	c9                   	leave  
f0131cb6:	c3                   	ret    

f0131cb7 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131cb7:	55                   	push   %ebp
f0131cb8:	89 e5                	mov    %esp,%ebp
f0131cba:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131cbd:	90                   	nop
f0131cbe:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131cc5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131cc8:	89 c2                	mov    %eax,%edx
f0131cca:	ec                   	in     (%dx),%al
f0131ccb:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0131cce:	8a 45 f7             	mov    -0x9(%ebp),%al
f0131cd1:	0f b6 c0             	movzbl %al,%eax
f0131cd4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131cd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131cda:	25 c0 00 00 00       	and    $0xc0,%eax
f0131cdf:	83 f8 40             	cmp    $0x40,%eax
f0131ce2:	75 da                	jne    f0131cbe <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0131ce4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131ce8:	74 11                	je     f0131cfb <ide_wait_ready+0x44>
f0131cea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ced:	83 e0 21             	and    $0x21,%eax
f0131cf0:	85 c0                	test   %eax,%eax
f0131cf2:	74 07                	je     f0131cfb <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0131cf4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131cf9:	eb 05                	jmp    f0131d00 <ide_wait_ready+0x49>
	}
	return 0;
f0131cfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131d00:	c9                   	leave  
f0131d01:	c3                   	ret    

f0131d02 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0131d02:	55                   	push   %ebp
f0131d03:	89 e5                	mov    %esp,%ebp
f0131d05:	57                   	push   %edi
f0131d06:	53                   	push   %ebx
f0131d07:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131d0a:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131d11:	76 16                	jbe    f0131d29 <ide_read+0x27>
f0131d13:	68 43 d8 13 f0       	push   $0xf013d843
f0131d18:	68 50 d8 13 f0       	push   $0xf013d850
f0131d1d:	6a 25                	push   $0x25
f0131d1f:	68 65 d8 13 f0       	push   $0xf013d865
f0131d24:	e8 dc e4 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f0131d29:	83 ec 0c             	sub    $0xc,%esp
f0131d2c:	6a 00                	push   $0x0
f0131d2e:	e8 84 ff ff ff       	call   f0131cb7 <ide_wait_ready>
f0131d33:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131d36:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d39:	0f b6 c0             	movzbl %al,%eax
f0131d3c:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131d43:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131d46:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131d49:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131d4c:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d50:	0f b6 c0             	movzbl %al,%eax
f0131d53:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131d5a:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131d5d:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131d60:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131d63:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131d64:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d67:	c1 e8 08             	shr    $0x8,%eax
f0131d6a:	0f b6 c0             	movzbl %al,%eax
f0131d6d:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131d74:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131d77:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131d7a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131d7d:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131d7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d81:	c1 e8 10             	shr    $0x10,%eax
f0131d84:	0f b6 c0             	movzbl %al,%eax
f0131d87:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131d8e:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131d91:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131d94:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131d97:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131d98:	a1 ac ec 88 f0       	mov    0xf088ecac,%eax
f0131d9d:	83 e0 01             	and    $0x1,%eax
f0131da0:	c1 e0 04             	shl    $0x4,%eax
f0131da3:	88 c2                	mov    %al,%dl
f0131da5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131da8:	c1 e8 18             	shr    $0x18,%eax
f0131dab:	83 e0 0f             	and    $0xf,%eax
f0131dae:	09 d0                	or     %edx,%eax
f0131db0:	83 c8 e0             	or     $0xffffffe0,%eax
f0131db3:	0f b6 c0             	movzbl %al,%eax
f0131db6:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131dbd:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131dc0:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131dc3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131dc6:	ee                   	out    %al,(%dx)
f0131dc7:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131dce:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131dd2:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131dd5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131dd8:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131dd9:	eb 55                	jmp    f0131e30 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131ddb:	83 ec 0c             	sub    $0xc,%esp
f0131dde:	6a 01                	push   $0x1
f0131de0:	e8 d2 fe ff ff       	call   f0131cb7 <ide_wait_ready>
f0131de5:	83 c4 10             	add    $0x10,%esp
f0131de8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131deb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131def:	79 05                	jns    f0131df6 <ide_read+0xf4>
			return r;
f0131df1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131df4:	eb 45                	jmp    f0131e3b <ide_read+0x139>
f0131df6:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131dfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e00:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131e03:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131e0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e0d:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131e10:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131e13:	89 cb                	mov    %ecx,%ebx
f0131e15:	89 df                	mov    %ebx,%edi
f0131e17:	89 c1                	mov    %eax,%ecx
f0131e19:	fc                   	cld    
f0131e1a:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131e1c:	89 c8                	mov    %ecx,%eax
f0131e1e:	89 fb                	mov    %edi,%ebx
f0131e20:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131e23:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131e26:	ff 4d 10             	decl   0x10(%ebp)
f0131e29:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131e30:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131e34:	75 a5                	jne    f0131ddb <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131e36:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131e3b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131e3e:	5b                   	pop    %ebx
f0131e3f:	5f                   	pop    %edi
f0131e40:	5d                   	pop    %ebp
f0131e41:	c3                   	ret    

f0131e42 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131e42:	55                   	push   %ebp
f0131e43:	89 e5                	mov    %esp,%ebp
f0131e45:	56                   	push   %esi
f0131e46:	53                   	push   %ebx
f0131e47:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131e4a:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131e51:	76 16                	jbe    f0131e69 <ide_write+0x27>
f0131e53:	68 43 d8 13 f0       	push   $0xf013d843
f0131e58:	68 50 d8 13 f0       	push   $0xf013d850
f0131e5d:	6a 3e                	push   $0x3e
f0131e5f:	68 65 d8 13 f0       	push   $0xf013d865
f0131e64:	e8 9c e3 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131e69:	83 ec 0c             	sub    $0xc,%esp
f0131e6c:	6a 00                	push   $0x0
f0131e6e:	e8 44 fe ff ff       	call   f0131cb7 <ide_wait_ready>
f0131e73:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131e76:	8b 45 10             	mov    0x10(%ebp),%eax
f0131e79:	0f b6 c0             	movzbl %al,%eax
f0131e7c:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131e83:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131e86:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131e89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131e8c:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131e8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e90:	0f b6 c0             	movzbl %al,%eax
f0131e93:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131e9a:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131e9d:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131ea0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131ea3:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131ea4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ea7:	c1 e8 08             	shr    $0x8,%eax
f0131eaa:	0f b6 c0             	movzbl %al,%eax
f0131ead:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131eb4:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131eb7:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131eba:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131ebd:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ec1:	c1 e8 10             	shr    $0x10,%eax
f0131ec4:	0f b6 c0             	movzbl %al,%eax
f0131ec7:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131ece:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131ed1:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131ed4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131ed7:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131ed8:	a1 ac ec 88 f0       	mov    0xf088ecac,%eax
f0131edd:	83 e0 01             	and    $0x1,%eax
f0131ee0:	c1 e0 04             	shl    $0x4,%eax
f0131ee3:	88 c2                	mov    %al,%dl
f0131ee5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ee8:	c1 e8 18             	shr    $0x18,%eax
f0131eeb:	83 e0 0f             	and    $0xf,%eax
f0131eee:	09 d0                	or     %edx,%eax
f0131ef0:	83 c8 e0             	or     $0xffffffe0,%eax
f0131ef3:	0f b6 c0             	movzbl %al,%eax
f0131ef6:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131efd:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131f00:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131f03:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131f06:	ee                   	out    %al,(%dx)
f0131f07:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131f0e:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0131f12:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131f15:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131f18:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131f19:	eb 55                	jmp    f0131f70 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131f1b:	83 ec 0c             	sub    $0xc,%esp
f0131f1e:	6a 01                	push   $0x1
f0131f20:	e8 92 fd ff ff       	call   f0131cb7 <ide_wait_ready>
f0131f25:	83 c4 10             	add    $0x10,%esp
f0131f28:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131f2b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131f2f:	79 05                	jns    f0131f36 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131f31:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131f34:	eb 45                	jmp    f0131f7b <ide_write+0x139>
f0131f36:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131f3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f40:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131f43:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131f4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f4d:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131f50:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131f53:	89 cb                	mov    %ecx,%ebx
f0131f55:	89 de                	mov    %ebx,%esi
f0131f57:	89 c1                	mov    %eax,%ecx
f0131f59:	fc                   	cld    
f0131f5a:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131f5c:	89 c8                	mov    %ecx,%eax
f0131f5e:	89 f3                	mov    %esi,%ebx
f0131f60:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131f63:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131f66:	ff 4d 10             	decl   0x10(%ebp)
f0131f69:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131f70:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131f74:	75 a5                	jne    f0131f1b <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131f7b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131f7e:	5b                   	pop    %ebx
f0131f7f:	5e                   	pop    %esi
f0131f80:	5d                   	pop    %ebp
f0131f81:	c3                   	ret    

f0131f82 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131f82:	55                   	push   %ebp
f0131f83:	89 e5                	mov    %esp,%ebp
f0131f85:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131f88:	83 ec 0c             	sub    $0xc,%esp
f0131f8b:	68 70 d8 13 f0       	push   $0xf013d870
f0131f90:	e8 79 ed fc ff       	call   f0100d0e <cprintf>
f0131f95:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131f98:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131f9f:	83 ec 0c             	sub    $0xc,%esp
f0131fa2:	68 9c d8 13 f0       	push   $0xf013d89c
f0131fa7:	e8 62 ed fc ff       	call   f0100d0e <cprintf>
f0131fac:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0131faf:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131fb3:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0131fb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131fbb:	eb 56                	jmp    f0132013 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131fbd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131fc1:	74 1c                	je     f0131fdf <print_mem_block_lists+0x5d>
f0131fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fc6:	8b 50 08             	mov    0x8(%eax),%edx
f0131fc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131fcc:	8b 48 08             	mov    0x8(%eax),%ecx
f0131fcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131fd2:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fd5:	01 c8                	add    %ecx,%eax
f0131fd7:	39 c2                	cmp    %eax,%edx
f0131fd9:	73 04                	jae    f0131fdf <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131fdb:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fe2:	8b 50 08             	mov    0x8(%eax),%edx
f0131fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fe8:	8b 40 0c             	mov    0xc(%eax),%eax
f0131feb:	01 c2                	add    %eax,%edx
f0131fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ff0:	8b 40 08             	mov    0x8(%eax),%eax
f0131ff3:	83 ec 04             	sub    $0x4,%esp
f0131ff6:	52                   	push   %edx
f0131ff7:	50                   	push   %eax
f0131ff8:	68 b1 d8 13 f0       	push   $0xf013d8b1
f0131ffd:	e8 0c ed fc ff       	call   f0100d0e <cprintf>
f0132002:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0132005:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132008:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f013200b:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132010:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132013:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132017:	74 07                	je     f0132020 <print_mem_block_lists+0x9e>
f0132019:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013201c:	8b 00                	mov    (%eax),%eax
f013201e:	eb 05                	jmp    f0132025 <print_mem_block_lists+0xa3>
f0132020:	b8 00 00 00 00       	mov    $0x0,%eax
f0132025:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f013202a:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f013202f:	85 c0                	test   %eax,%eax
f0132031:	75 8a                	jne    f0131fbd <print_mem_block_lists+0x3b>
f0132033:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132037:	75 84                	jne    f0131fbd <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0132039:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013203d:	75 10                	jne    f013204f <print_mem_block_lists+0xcd>
f013203f:	83 ec 0c             	sub    $0xc,%esp
f0132042:	68 c0 d8 13 f0       	push   $0xf013d8c0
f0132047:	e8 c2 ec fc ff       	call   f0100d0e <cprintf>
f013204c:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f013204f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0132056:	83 ec 0c             	sub    $0xc,%esp
f0132059:	68 e4 d8 13 f0       	push   $0xf013d8e4
f013205e:	e8 ab ec fc ff       	call   f0100d0e <cprintf>
f0132063:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0132066:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013206a:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f013206f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132072:	eb 56                	jmp    f01320ca <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0132074:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132078:	74 1c                	je     f0132096 <print_mem_block_lists+0x114>
f013207a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013207d:	8b 50 08             	mov    0x8(%eax),%edx
f0132080:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132083:	8b 48 08             	mov    0x8(%eax),%ecx
f0132086:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132089:	8b 40 0c             	mov    0xc(%eax),%eax
f013208c:	01 c8                	add    %ecx,%eax
f013208e:	39 c2                	cmp    %eax,%edx
f0132090:	73 04                	jae    f0132096 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0132092:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0132096:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132099:	8b 50 08             	mov    0x8(%eax),%edx
f013209c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013209f:	8b 40 0c             	mov    0xc(%eax),%eax
f01320a2:	01 c2                	add    %eax,%edx
f01320a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320a7:	8b 40 08             	mov    0x8(%eax),%eax
f01320aa:	83 ec 04             	sub    $0x4,%esp
f01320ad:	52                   	push   %edx
f01320ae:	50                   	push   %eax
f01320af:	68 b1 d8 13 f0       	push   $0xf013d8b1
f01320b4:	e8 55 ec fc ff       	call   f0100d0e <cprintf>
f01320b9:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01320bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01320c2:	a1 d0 ec 88 f0       	mov    0xf088ecd0,%eax
f01320c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320ce:	74 07                	je     f01320d7 <print_mem_block_lists+0x155>
f01320d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320d3:	8b 00                	mov    (%eax),%eax
f01320d5:	eb 05                	jmp    f01320dc <print_mem_block_lists+0x15a>
f01320d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01320dc:	a3 d0 ec 88 f0       	mov    %eax,0xf088ecd0
f01320e1:	a1 d0 ec 88 f0       	mov    0xf088ecd0,%eax
f01320e6:	85 c0                	test   %eax,%eax
f01320e8:	75 8a                	jne    f0132074 <print_mem_block_lists+0xf2>
f01320ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320ee:	75 84                	jne    f0132074 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f01320f0:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01320f4:	75 10                	jne    f0132106 <print_mem_block_lists+0x184>
f01320f6:	83 ec 0c             	sub    $0xc,%esp
f01320f9:	68 fc d8 13 f0       	push   $0xf013d8fc
f01320fe:	e8 0b ec fc ff       	call   f0100d0e <cprintf>
f0132103:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0132106:	83 ec 0c             	sub    $0xc,%esp
f0132109:	68 70 d8 13 f0       	push   $0xf013d870
f013210e:	e8 fb eb fc ff       	call   f0100d0e <cprintf>
f0132113:	83 c4 10             	add    $0x10,%esp

}
f0132116:	90                   	nop
f0132117:	c9                   	leave  
f0132118:	c3                   	ret    

f0132119 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0132119:	55                   	push   %ebp
f013211a:	89 e5                	mov    %esp,%ebp
f013211c:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f013211f:	c7 05 98 ed 88 f0 00 	movl   $0x0,0xf088ed98
f0132126:	00 00 00 
f0132129:	c7 05 9c ed 88 f0 00 	movl   $0x0,0xf088ed9c
f0132130:	00 00 00 
f0132133:	c7 05 a4 ed 88 f0 00 	movl   $0x0,0xf088eda4
f013213a:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f013213d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0132144:	e9 9e 00 00 00       	jmp    f01321e7 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0132149:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f013214e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132151:	c1 e2 04             	shl    $0x4,%edx
f0132154:	01 d0                	add    %edx,%eax
f0132156:	85 c0                	test   %eax,%eax
f0132158:	75 14                	jne    f013216e <initialize_MemBlocksList+0x55>
f013215a:	83 ec 04             	sub    $0x4,%esp
f013215d:	68 24 d9 13 f0       	push   $0xf013d924
f0132162:	6a 46                	push   $0x46
f0132164:	68 47 d9 13 f0       	push   $0xf013d947
f0132169:	e8 97 e0 fc ff       	call   f0100205 <_panic>
f013216e:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f0132173:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132176:	c1 e2 04             	shl    $0x4,%edx
f0132179:	01 d0                	add    %edx,%eax
f013217b:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f0132181:	89 10                	mov    %edx,(%eax)
f0132183:	8b 00                	mov    (%eax),%eax
f0132185:	85 c0                	test   %eax,%eax
f0132187:	74 18                	je     f01321a1 <initialize_MemBlocksList+0x88>
f0132189:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f013218e:	8b 15 d8 ec 88 f0    	mov    0xf088ecd8,%edx
f0132194:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0132197:	c1 e1 04             	shl    $0x4,%ecx
f013219a:	01 ca                	add    %ecx,%edx
f013219c:	89 50 04             	mov    %edx,0x4(%eax)
f013219f:	eb 12                	jmp    f01321b3 <initialize_MemBlocksList+0x9a>
f01321a1:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f01321a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321a9:	c1 e2 04             	shl    $0x4,%edx
f01321ac:	01 d0                	add    %edx,%eax
f01321ae:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01321b3:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f01321b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321bb:	c1 e2 04             	shl    $0x4,%edx
f01321be:	01 d0                	add    %edx,%eax
f01321c0:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f01321c5:	a1 d8 ec 88 f0       	mov    0xf088ecd8,%eax
f01321ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321cd:	c1 e2 04             	shl    $0x4,%edx
f01321d0:	01 d0                	add    %edx,%eax
f01321d2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321d9:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01321de:	40                   	inc    %eax
f01321df:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f01321e4:	ff 45 f4             	incl   -0xc(%ebp)
f01321e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321ea:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321ed:	0f 82 56 ff ff ff    	jb     f0132149 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f01321f3:	90                   	nop
f01321f4:	c9                   	leave  
f01321f5:	c3                   	ret    

f01321f6 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f01321f6:	55                   	push   %ebp
f01321f7:	89 e5                	mov    %esp,%ebp
f01321f9:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01321fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01321ff:	8b 00                	mov    (%eax),%eax
f0132201:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0132204:	eb 19                	jmp    f013221f <find_block+0x29>
	{
		if(va==point->sva)
f0132206:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132209:	8b 40 08             	mov    0x8(%eax),%eax
f013220c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f013220f:	75 05                	jne    f0132216 <find_block+0x20>
		   return point;
f0132211:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132214:	eb 36                	jmp    f013224c <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0132216:	8b 45 08             	mov    0x8(%ebp),%eax
f0132219:	8b 40 08             	mov    0x8(%eax),%eax
f013221c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013221f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132223:	74 07                	je     f013222c <find_block+0x36>
f0132225:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132228:	8b 00                	mov    (%eax),%eax
f013222a:	eb 05                	jmp    f0132231 <find_block+0x3b>
f013222c:	b8 00 00 00 00       	mov    $0x0,%eax
f0132231:	8b 55 08             	mov    0x8(%ebp),%edx
f0132234:	89 42 08             	mov    %eax,0x8(%edx)
f0132237:	8b 45 08             	mov    0x8(%ebp),%eax
f013223a:	8b 40 08             	mov    0x8(%eax),%eax
f013223d:	85 c0                	test   %eax,%eax
f013223f:	75 c5                	jne    f0132206 <find_block+0x10>
f0132241:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132245:	75 bf                	jne    f0132206 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0132247:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013224c:	c9                   	leave  
f013224d:	c3                   	ret    

f013224e <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f013224e:	55                   	push   %ebp
f013224f:	89 e5                	mov    %esp,%ebp
f0132251:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0132254:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f0132259:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f013225c:	a1 cc ec 88 f0       	mov    0xf088eccc,%eax
f0132261:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0132264:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132267:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f013226a:	74 24                	je     f0132290 <insert_sorted_allocList+0x42>
f013226c:	8b 45 08             	mov    0x8(%ebp),%eax
f013226f:	8b 50 08             	mov    0x8(%eax),%edx
f0132272:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132275:	8b 40 08             	mov    0x8(%eax),%eax
f0132278:	39 c2                	cmp    %eax,%edx
f013227a:	76 14                	jbe    f0132290 <insert_sorted_allocList+0x42>
f013227c:	8b 45 08             	mov    0x8(%ebp),%eax
f013227f:	8b 50 08             	mov    0x8(%eax),%edx
f0132282:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132285:	8b 40 08             	mov    0x8(%eax),%eax
f0132288:	39 c2                	cmp    %eax,%edx
f013228a:	0f 82 60 01 00 00    	jb     f01323f0 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0132290:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132294:	75 65                	jne    f01322fb <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0132296:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013229a:	75 14                	jne    f01322b0 <insert_sorted_allocList+0x62>
f013229c:	83 ec 04             	sub    $0x4,%esp
f013229f:	68 24 d9 13 f0       	push   $0xf013d924
f01322a4:	6a 6b                	push   $0x6b
f01322a6:	68 47 d9 13 f0       	push   $0xf013d947
f01322ab:	e8 55 df fc ff       	call   f0100205 <_panic>
f01322b0:	8b 15 c8 ec 88 f0    	mov    0xf088ecc8,%edx
f01322b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01322b9:	89 10                	mov    %edx,(%eax)
f01322bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01322be:	8b 00                	mov    (%eax),%eax
f01322c0:	85 c0                	test   %eax,%eax
f01322c2:	74 0d                	je     f01322d1 <insert_sorted_allocList+0x83>
f01322c4:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f01322c9:	8b 55 08             	mov    0x8(%ebp),%edx
f01322cc:	89 50 04             	mov    %edx,0x4(%eax)
f01322cf:	eb 08                	jmp    f01322d9 <insert_sorted_allocList+0x8b>
f01322d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01322d4:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f01322d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01322dc:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f01322e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01322e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322eb:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01322f0:	40                   	inc    %eax
f01322f1:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01322f6:	e9 dc 01 00 00       	jmp    f01324d7 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f01322fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01322fe:	8b 50 08             	mov    0x8(%eax),%edx
f0132301:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132304:	8b 40 08             	mov    0x8(%eax),%eax
f0132307:	39 c2                	cmp    %eax,%edx
f0132309:	77 6c                	ja     f0132377 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f013230b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013230f:	74 06                	je     f0132317 <insert_sorted_allocList+0xc9>
f0132311:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132315:	75 14                	jne    f013232b <insert_sorted_allocList+0xdd>
f0132317:	83 ec 04             	sub    $0x4,%esp
f013231a:	68 60 d9 13 f0       	push   $0xf013d960
f013231f:	6a 6f                	push   $0x6f
f0132321:	68 47 d9 13 f0       	push   $0xf013d947
f0132326:	e8 da de fc ff       	call   f0100205 <_panic>
f013232b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013232e:	8b 50 04             	mov    0x4(%eax),%edx
f0132331:	8b 45 08             	mov    0x8(%ebp),%eax
f0132334:	89 50 04             	mov    %edx,0x4(%eax)
f0132337:	8b 45 08             	mov    0x8(%ebp),%eax
f013233a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013233d:	89 10                	mov    %edx,(%eax)
f013233f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132342:	8b 40 04             	mov    0x4(%eax),%eax
f0132345:	85 c0                	test   %eax,%eax
f0132347:	74 0d                	je     f0132356 <insert_sorted_allocList+0x108>
f0132349:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013234c:	8b 40 04             	mov    0x4(%eax),%eax
f013234f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132352:	89 10                	mov    %edx,(%eax)
f0132354:	eb 08                	jmp    f013235e <insert_sorted_allocList+0x110>
f0132356:	8b 45 08             	mov    0x8(%ebp),%eax
f0132359:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f013235e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132361:	8b 55 08             	mov    0x8(%ebp),%edx
f0132364:	89 50 04             	mov    %edx,0x4(%eax)
f0132367:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f013236c:	40                   	inc    %eax
f013236d:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0132372:	e9 60 01 00 00       	jmp    f01324d7 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0132377:	8b 45 08             	mov    0x8(%ebp),%eax
f013237a:	8b 50 08             	mov    0x8(%eax),%edx
f013237d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132380:	8b 40 08             	mov    0x8(%eax),%eax
f0132383:	39 c2                	cmp    %eax,%edx
f0132385:	0f 82 4c 01 00 00    	jb     f01324d7 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f013238b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013238f:	75 14                	jne    f01323a5 <insert_sorted_allocList+0x157>
f0132391:	83 ec 04             	sub    $0x4,%esp
f0132394:	68 98 d9 13 f0       	push   $0xf013d998
f0132399:	6a 73                	push   $0x73
f013239b:	68 47 d9 13 f0       	push   $0xf013d947
f01323a0:	e8 60 de fc ff       	call   f0100205 <_panic>
f01323a5:	8b 15 cc ec 88 f0    	mov    0xf088eccc,%edx
f01323ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01323ae:	89 50 04             	mov    %edx,0x4(%eax)
f01323b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01323b4:	8b 40 04             	mov    0x4(%eax),%eax
f01323b7:	85 c0                	test   %eax,%eax
f01323b9:	74 0c                	je     f01323c7 <insert_sorted_allocList+0x179>
f01323bb:	a1 cc ec 88 f0       	mov    0xf088eccc,%eax
f01323c0:	8b 55 08             	mov    0x8(%ebp),%edx
f01323c3:	89 10                	mov    %edx,(%eax)
f01323c5:	eb 08                	jmp    f01323cf <insert_sorted_allocList+0x181>
f01323c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01323ca:	a3 c8 ec 88 f0       	mov    %eax,0xf088ecc8
f01323cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01323d2:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f01323d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01323da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01323e0:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f01323e5:	40                   	inc    %eax
f01323e6:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01323eb:	e9 e7 00 00 00       	jmp    f01324d7 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f01323f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01323f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f01323f6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01323fd:	a1 c8 ec 88 f0       	mov    0xf088ecc8,%eax
f0132402:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132405:	e9 9d 00 00 00       	jmp    f01324a7 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f013240a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013240d:	8b 00                	mov    (%eax),%eax
f013240f:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0132412:	8b 45 08             	mov    0x8(%ebp),%eax
f0132415:	8b 50 08             	mov    0x8(%eax),%edx
f0132418:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013241b:	8b 40 08             	mov    0x8(%eax),%eax
f013241e:	39 c2                	cmp    %eax,%edx
f0132420:	76 7d                	jbe    f013249f <insert_sorted_allocList+0x251>
f0132422:	8b 45 08             	mov    0x8(%ebp),%eax
f0132425:	8b 50 08             	mov    0x8(%eax),%edx
f0132428:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013242b:	8b 40 08             	mov    0x8(%eax),%eax
f013242e:	39 c2                	cmp    %eax,%edx
f0132430:	73 6d                	jae    f013249f <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0132432:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132436:	74 06                	je     f013243e <insert_sorted_allocList+0x1f0>
f0132438:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013243c:	75 14                	jne    f0132452 <insert_sorted_allocList+0x204>
f013243e:	83 ec 04             	sub    $0x4,%esp
f0132441:	68 bc d9 13 f0       	push   $0xf013d9bc
f0132446:	6a 7f                	push   $0x7f
f0132448:	68 47 d9 13 f0       	push   $0xf013d947
f013244d:	e8 b3 dd fc ff       	call   f0100205 <_panic>
f0132452:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132455:	8b 10                	mov    (%eax),%edx
f0132457:	8b 45 08             	mov    0x8(%ebp),%eax
f013245a:	89 10                	mov    %edx,(%eax)
f013245c:	8b 45 08             	mov    0x8(%ebp),%eax
f013245f:	8b 00                	mov    (%eax),%eax
f0132461:	85 c0                	test   %eax,%eax
f0132463:	74 0b                	je     f0132470 <insert_sorted_allocList+0x222>
f0132465:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132468:	8b 00                	mov    (%eax),%eax
f013246a:	8b 55 08             	mov    0x8(%ebp),%edx
f013246d:	89 50 04             	mov    %edx,0x4(%eax)
f0132470:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132473:	8b 55 08             	mov    0x8(%ebp),%edx
f0132476:	89 10                	mov    %edx,(%eax)
f0132478:	8b 45 08             	mov    0x8(%ebp),%eax
f013247b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013247e:	89 50 04             	mov    %edx,0x4(%eax)
f0132481:	8b 45 08             	mov    0x8(%ebp),%eax
f0132484:	8b 00                	mov    (%eax),%eax
f0132486:	85 c0                	test   %eax,%eax
f0132488:	75 08                	jne    f0132492 <insert_sorted_allocList+0x244>
f013248a:	8b 45 08             	mov    0x8(%ebp),%eax
f013248d:	a3 cc ec 88 f0       	mov    %eax,0xf088eccc
f0132492:	a1 d4 ec 88 f0       	mov    0xf088ecd4,%eax
f0132497:	40                   	inc    %eax
f0132498:	a3 d4 ec 88 f0       	mov    %eax,0xf088ecd4
				break;
f013249d:	eb 39                	jmp    f01324d8 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f013249f:	a1 d0 ec 88 f0       	mov    0xf088ecd0,%eax
f01324a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01324a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324ab:	74 07                	je     f01324b4 <insert_sorted_allocList+0x266>
f01324ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324b0:	8b 00                	mov    (%eax),%eax
f01324b2:	eb 05                	jmp    f01324b9 <insert_sorted_allocList+0x26b>
f01324b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01324b9:	a3 d0 ec 88 f0       	mov    %eax,0xf088ecd0
f01324be:	a1 d0 ec 88 f0       	mov    0xf088ecd0,%eax
f01324c3:	85 c0                	test   %eax,%eax
f01324c5:	0f 85 3f ff ff ff    	jne    f013240a <insert_sorted_allocList+0x1bc>
f01324cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324cf:	0f 85 35 ff ff ff    	jne    f013240a <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01324d5:	eb 01                	jmp    f01324d8 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01324d7:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01324d8:	90                   	nop
f01324d9:	c9                   	leave  
f01324da:	c3                   	ret    

f01324db <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f01324db:	55                   	push   %ebp
f01324dc:	89 e5                	mov    %esp,%ebp
f01324de:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01324e1:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f01324e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01324e9:	e9 85 01 00 00       	jmp    f0132673 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f01324ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324f1:	8b 40 0c             	mov    0xc(%eax),%eax
f01324f4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01324f7:	0f 82 6e 01 00 00    	jb     f013266b <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f01324fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132500:	8b 40 0c             	mov    0xc(%eax),%eax
f0132503:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132506:	0f 85 8a 00 00 00    	jne    f0132596 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f013250c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132510:	75 17                	jne    f0132529 <alloc_block_FF+0x4e>
f0132512:	83 ec 04             	sub    $0x4,%esp
f0132515:	68 f0 d9 13 f0       	push   $0xf013d9f0
f013251a:	68 93 00 00 00       	push   $0x93
f013251f:	68 47 d9 13 f0       	push   $0xf013d947
f0132524:	e8 dc dc fc ff       	call   f0100205 <_panic>
f0132529:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013252c:	8b 00                	mov    (%eax),%eax
f013252e:	85 c0                	test   %eax,%eax
f0132530:	74 10                	je     f0132542 <alloc_block_FF+0x67>
f0132532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132535:	8b 00                	mov    (%eax),%eax
f0132537:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013253a:	8b 52 04             	mov    0x4(%edx),%edx
f013253d:	89 50 04             	mov    %edx,0x4(%eax)
f0132540:	eb 0b                	jmp    f013254d <alloc_block_FF+0x72>
f0132542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132545:	8b 40 04             	mov    0x4(%eax),%eax
f0132548:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f013254d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132550:	8b 40 04             	mov    0x4(%eax),%eax
f0132553:	85 c0                	test   %eax,%eax
f0132555:	74 0f                	je     f0132566 <alloc_block_FF+0x8b>
f0132557:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013255a:	8b 40 04             	mov    0x4(%eax),%eax
f013255d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132560:	8b 12                	mov    (%edx),%edx
f0132562:	89 10                	mov    %edx,(%eax)
f0132564:	eb 0a                	jmp    f0132570 <alloc_block_FF+0x95>
f0132566:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132569:	8b 00                	mov    (%eax),%eax
f013256b:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132570:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132573:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132579:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013257c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132583:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132588:	48                   	dec    %eax
f0132589:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
			   return  point;
f013258e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132591:	e9 10 01 00 00       	jmp    f01326a6 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0132596:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132599:	8b 40 0c             	mov    0xc(%eax),%eax
f013259c:	3b 45 08             	cmp    0x8(%ebp),%eax
f013259f:	0f 86 c6 00 00 00    	jbe    f013266b <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01325a5:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01325aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f01325ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325b0:	8b 50 08             	mov    0x8(%eax),%edx
f01325b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325b6:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f01325b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325bc:	8b 55 08             	mov    0x8(%ebp),%edx
f01325bf:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01325c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01325c6:	75 17                	jne    f01325df <alloc_block_FF+0x104>
f01325c8:	83 ec 04             	sub    $0x4,%esp
f01325cb:	68 f0 d9 13 f0       	push   $0xf013d9f0
f01325d0:	68 9b 00 00 00       	push   $0x9b
f01325d5:	68 47 d9 13 f0       	push   $0xf013d947
f01325da:	e8 26 dc fc ff       	call   f0100205 <_panic>
f01325df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325e2:	8b 00                	mov    (%eax),%eax
f01325e4:	85 c0                	test   %eax,%eax
f01325e6:	74 10                	je     f01325f8 <alloc_block_FF+0x11d>
f01325e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325eb:	8b 00                	mov    (%eax),%eax
f01325ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01325f0:	8b 52 04             	mov    0x4(%edx),%edx
f01325f3:	89 50 04             	mov    %edx,0x4(%eax)
f01325f6:	eb 0b                	jmp    f0132603 <alloc_block_FF+0x128>
f01325f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325fb:	8b 40 04             	mov    0x4(%eax),%eax
f01325fe:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0132603:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132606:	8b 40 04             	mov    0x4(%eax),%eax
f0132609:	85 c0                	test   %eax,%eax
f013260b:	74 0f                	je     f013261c <alloc_block_FF+0x141>
f013260d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132610:	8b 40 04             	mov    0x4(%eax),%eax
f0132613:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132616:	8b 12                	mov    (%edx),%edx
f0132618:	89 10                	mov    %edx,(%eax)
f013261a:	eb 0a                	jmp    f0132626 <alloc_block_FF+0x14b>
f013261c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013261f:	8b 00                	mov    (%eax),%eax
f0132621:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0132626:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132629:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013262f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132632:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132639:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f013263e:	48                   	dec    %eax
f013263f:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
			   point->sva += size;
f0132644:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132647:	8b 50 08             	mov    0x8(%eax),%edx
f013264a:	8b 45 08             	mov    0x8(%ebp),%eax
f013264d:	01 c2                	add    %eax,%edx
f013264f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132652:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0132655:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132658:	8b 40 0c             	mov    0xc(%eax),%eax
f013265b:	2b 45 08             	sub    0x8(%ebp),%eax
f013265e:	89 c2                	mov    %eax,%edx
f0132660:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132663:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0132666:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132669:	eb 3b                	jmp    f01326a6 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f013266b:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132670:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132673:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132677:	74 07                	je     f0132680 <alloc_block_FF+0x1a5>
f0132679:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013267c:	8b 00                	mov    (%eax),%eax
f013267e:	eb 05                	jmp    f0132685 <alloc_block_FF+0x1aa>
f0132680:	b8 00 00 00 00       	mov    $0x0,%eax
f0132685:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f013268a:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f013268f:	85 c0                	test   %eax,%eax
f0132691:	0f 85 57 fe ff ff    	jne    f01324ee <alloc_block_FF+0x13>
f0132697:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013269b:	0f 85 4d fe ff ff    	jne    f01324ee <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f01326a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01326a6:	c9                   	leave  
f01326a7:	c3                   	ret    

f01326a8 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f01326a8:	55                   	push   %ebp
f01326a9:	89 e5                	mov    %esp,%ebp
f01326ab:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f01326ae:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01326b5:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f01326ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01326bd:	e9 df 00 00 00       	jmp    f01327a1 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f01326c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326c5:	8b 40 0c             	mov    0xc(%eax),%eax
f01326c8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01326cb:	0f 82 c8 00 00 00    	jb     f0132799 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f01326d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326d4:	8b 40 0c             	mov    0xc(%eax),%eax
f01326d7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01326da:	0f 85 8a 00 00 00    	jne    f013276a <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f01326e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01326e4:	75 17                	jne    f01326fd <alloc_block_BF+0x55>
f01326e6:	83 ec 04             	sub    $0x4,%esp
f01326e9:	68 f0 d9 13 f0       	push   $0xf013d9f0
f01326ee:	68 b7 00 00 00       	push   $0xb7
f01326f3:	68 47 d9 13 f0       	push   $0xf013d947
f01326f8:	e8 08 db fc ff       	call   f0100205 <_panic>
f01326fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132700:	8b 00                	mov    (%eax),%eax
f0132702:	85 c0                	test   %eax,%eax
f0132704:	74 10                	je     f0132716 <alloc_block_BF+0x6e>
f0132706:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132709:	8b 00                	mov    (%eax),%eax
f013270b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013270e:	8b 52 04             	mov    0x4(%edx),%edx
f0132711:	89 50 04             	mov    %edx,0x4(%eax)
f0132714:	eb 0b                	jmp    f0132721 <alloc_block_BF+0x79>
f0132716:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132719:	8b 40 04             	mov    0x4(%eax),%eax
f013271c:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132721:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132724:	8b 40 04             	mov    0x4(%eax),%eax
f0132727:	85 c0                	test   %eax,%eax
f0132729:	74 0f                	je     f013273a <alloc_block_BF+0x92>
f013272b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013272e:	8b 40 04             	mov    0x4(%eax),%eax
f0132731:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132734:	8b 12                	mov    (%edx),%edx
f0132736:	89 10                	mov    %edx,(%eax)
f0132738:	eb 0a                	jmp    f0132744 <alloc_block_BF+0x9c>
f013273a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013273d:	8b 00                	mov    (%eax),%eax
f013273f:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132744:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132747:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013274d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132750:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132757:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f013275c:	48                   	dec    %eax
f013275d:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
			   return currentMemBlock;
f0132762:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132765:	e9 4d 01 00 00       	jmp    f01328b7 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f013276a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013276d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132770:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132773:	76 24                	jbe    f0132799 <alloc_block_BF+0xf1>
f0132775:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132778:	8b 40 0c             	mov    0xc(%eax),%eax
f013277b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013277e:	73 19                	jae    f0132799 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0132780:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0132787:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013278a:	8b 40 0c             	mov    0xc(%eax),%eax
f013278d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0132790:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132793:	8b 40 08             	mov    0x8(%eax),%eax
f0132796:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0132799:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f013279e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01327a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327a5:	74 07                	je     f01327ae <alloc_block_BF+0x106>
f01327a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327aa:	8b 00                	mov    (%eax),%eax
f01327ac:	eb 05                	jmp    f01327b3 <alloc_block_BF+0x10b>
f01327ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01327b3:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f01327b8:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f01327bd:	85 c0                	test   %eax,%eax
f01327bf:	0f 85 fd fe ff ff    	jne    f01326c2 <alloc_block_BF+0x1a>
f01327c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327c9:	0f 85 f3 fe ff ff    	jne    f01326c2 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f01327cf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01327d3:	0f 84 d9 00 00 00    	je     f01328b2 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f01327d9:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01327de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f01327e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01327e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01327e7:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f01327ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01327ed:	8b 55 08             	mov    0x8(%ebp),%edx
f01327f0:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f01327f3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01327f7:	75 17                	jne    f0132810 <alloc_block_BF+0x168>
f01327f9:	83 ec 04             	sub    $0x4,%esp
f01327fc:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0132801:	68 c7 00 00 00       	push   $0xc7
f0132806:	68 47 d9 13 f0       	push   $0xf013d947
f013280b:	e8 f5 d9 fc ff       	call   f0100205 <_panic>
f0132810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132813:	8b 00                	mov    (%eax),%eax
f0132815:	85 c0                	test   %eax,%eax
f0132817:	74 10                	je     f0132829 <alloc_block_BF+0x181>
f0132819:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013281c:	8b 00                	mov    (%eax),%eax
f013281e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132821:	8b 52 04             	mov    0x4(%edx),%edx
f0132824:	89 50 04             	mov    %edx,0x4(%eax)
f0132827:	eb 0b                	jmp    f0132834 <alloc_block_BF+0x18c>
f0132829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013282c:	8b 40 04             	mov    0x4(%eax),%eax
f013282f:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0132834:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132837:	8b 40 04             	mov    0x4(%eax),%eax
f013283a:	85 c0                	test   %eax,%eax
f013283c:	74 0f                	je     f013284d <alloc_block_BF+0x1a5>
f013283e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132841:	8b 40 04             	mov    0x4(%eax),%eax
f0132844:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132847:	8b 12                	mov    (%edx),%edx
f0132849:	89 10                	mov    %edx,(%eax)
f013284b:	eb 0a                	jmp    f0132857 <alloc_block_BF+0x1af>
f013284d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132850:	8b 00                	mov    (%eax),%eax
f0132852:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0132857:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013285a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132860:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132863:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013286a:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f013286f:	48                   	dec    %eax
f0132870:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0132875:	83 ec 08             	sub    $0x8,%esp
f0132878:	ff 75 ec             	pushl  -0x14(%ebp)
f013287b:	68 64 ed 88 f0       	push   $0xf088ed64
f0132880:	e8 71 f9 ff ff       	call   f01321f6 <find_block>
f0132885:	83 c4 10             	add    $0x10,%esp
f0132888:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f013288b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013288e:	8b 50 08             	mov    0x8(%eax),%edx
f0132891:	8b 45 08             	mov    0x8(%ebp),%eax
f0132894:	01 c2                	add    %eax,%edx
f0132896:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132899:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f013289c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013289f:	8b 40 0c             	mov    0xc(%eax),%eax
f01328a2:	2b 45 08             	sub    0x8(%ebp),%eax
f01328a5:	89 c2                	mov    %eax,%edx
f01328a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01328aa:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f01328ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01328b0:	eb 05                	jmp    f01328b7 <alloc_block_BF+0x20f>
	}
	return NULL;
f01328b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01328b7:	c9                   	leave  
f01328b8:	c3                   	ret    

f01328b9 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f01328b9:	55                   	push   %ebp
f01328ba:	89 e5                	mov    %esp,%ebp
f01328bc:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f01328bf:	a1 b0 ec 88 f0       	mov    0xf088ecb0,%eax
f01328c4:	85 c0                	test   %eax,%eax
f01328c6:	0f 85 de 01 00 00    	jne    f0132aaa <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01328cc:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f01328d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01328d4:	e9 9e 01 00 00       	jmp    f0132a77 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f01328d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328dc:	8b 40 0c             	mov    0xc(%eax),%eax
f01328df:	3b 45 08             	cmp    0x8(%ebp),%eax
f01328e2:	0f 82 87 01 00 00    	jb     f0132a6f <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f01328e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328eb:	8b 40 0c             	mov    0xc(%eax),%eax
f01328ee:	3b 45 08             	cmp    0x8(%ebp),%eax
f01328f1:	0f 85 95 00 00 00    	jne    f013298c <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f01328f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328fb:	75 17                	jne    f0132914 <alloc_block_NF+0x5b>
f01328fd:	83 ec 04             	sub    $0x4,%esp
f0132900:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0132905:	68 e0 00 00 00       	push   $0xe0
f013290a:	68 47 d9 13 f0       	push   $0xf013d947
f013290f:	e8 f1 d8 fc ff       	call   f0100205 <_panic>
f0132914:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132917:	8b 00                	mov    (%eax),%eax
f0132919:	85 c0                	test   %eax,%eax
f013291b:	74 10                	je     f013292d <alloc_block_NF+0x74>
f013291d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132920:	8b 00                	mov    (%eax),%eax
f0132922:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132925:	8b 52 04             	mov    0x4(%edx),%edx
f0132928:	89 50 04             	mov    %edx,0x4(%eax)
f013292b:	eb 0b                	jmp    f0132938 <alloc_block_NF+0x7f>
f013292d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132930:	8b 40 04             	mov    0x4(%eax),%eax
f0132933:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132938:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013293b:	8b 40 04             	mov    0x4(%eax),%eax
f013293e:	85 c0                	test   %eax,%eax
f0132940:	74 0f                	je     f0132951 <alloc_block_NF+0x98>
f0132942:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132945:	8b 40 04             	mov    0x4(%eax),%eax
f0132948:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013294b:	8b 12                	mov    (%edx),%edx
f013294d:	89 10                	mov    %edx,(%eax)
f013294f:	eb 0a                	jmp    f013295b <alloc_block_NF+0xa2>
f0132951:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132954:	8b 00                	mov    (%eax),%eax
f0132956:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f013295b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013295e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132964:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132967:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013296e:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132973:	48                   	dec    %eax
f0132974:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
				   svaOfNF = point->sva;
f0132979:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013297c:	8b 40 08             	mov    0x8(%eax),%eax
f013297f:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
				   return  point;
f0132984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132987:	e9 f8 04 00 00       	jmp    f0132e84 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f013298c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013298f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132992:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132995:	0f 86 d4 00 00 00    	jbe    f0132a6f <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013299b:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01329a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f01329a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329a6:	8b 50 08             	mov    0x8(%eax),%edx
f01329a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329ac:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f01329af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329b2:	8b 55 08             	mov    0x8(%ebp),%edx
f01329b5:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01329b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01329bc:	75 17                	jne    f01329d5 <alloc_block_NF+0x11c>
f01329be:	83 ec 04             	sub    $0x4,%esp
f01329c1:	68 f0 d9 13 f0       	push   $0xf013d9f0
f01329c6:	68 e9 00 00 00       	push   $0xe9
f01329cb:	68 47 d9 13 f0       	push   $0xf013d947
f01329d0:	e8 30 d8 fc ff       	call   f0100205 <_panic>
f01329d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329d8:	8b 00                	mov    (%eax),%eax
f01329da:	85 c0                	test   %eax,%eax
f01329dc:	74 10                	je     f01329ee <alloc_block_NF+0x135>
f01329de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329e1:	8b 00                	mov    (%eax),%eax
f01329e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01329e6:	8b 52 04             	mov    0x4(%edx),%edx
f01329e9:	89 50 04             	mov    %edx,0x4(%eax)
f01329ec:	eb 0b                	jmp    f01329f9 <alloc_block_NF+0x140>
f01329ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329f1:	8b 40 04             	mov    0x4(%eax),%eax
f01329f4:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01329f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329fc:	8b 40 04             	mov    0x4(%eax),%eax
f01329ff:	85 c0                	test   %eax,%eax
f0132a01:	74 0f                	je     f0132a12 <alloc_block_NF+0x159>
f0132a03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a06:	8b 40 04             	mov    0x4(%eax),%eax
f0132a09:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132a0c:	8b 12                	mov    (%edx),%edx
f0132a0e:	89 10                	mov    %edx,(%eax)
f0132a10:	eb 0a                	jmp    f0132a1c <alloc_block_NF+0x163>
f0132a12:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a15:	8b 00                	mov    (%eax),%eax
f0132a17:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0132a1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a28:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a2f:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0132a34:	48                   	dec    %eax
f0132a35:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
				   svaOfNF = ReturnedBlock->sva;
f0132a3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a3d:	8b 40 08             	mov    0x8(%eax),%eax
f0132a40:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
				   point->sva += size;
f0132a45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a48:	8b 50 08             	mov    0x8(%eax),%edx
f0132a4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a4e:	01 c2                	add    %eax,%edx
f0132a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a53:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a59:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a5c:	2b 45 08             	sub    0x8(%ebp),%eax
f0132a5f:	89 c2                	mov    %eax,%edx
f0132a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a64:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132a67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132a6a:	e9 15 04 00 00       	jmp    f0132e84 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0132a6f:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132a74:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132a77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a7b:	74 07                	je     f0132a84 <alloc_block_NF+0x1cb>
f0132a7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a80:	8b 00                	mov    (%eax),%eax
f0132a82:	eb 05                	jmp    f0132a89 <alloc_block_NF+0x1d0>
f0132a84:	b8 00 00 00 00       	mov    $0x0,%eax
f0132a89:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f0132a8e:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132a93:	85 c0                	test   %eax,%eax
f0132a95:	0f 85 3e fe ff ff    	jne    f01328d9 <alloc_block_NF+0x20>
f0132a9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a9f:	0f 85 34 fe ff ff    	jne    f01328d9 <alloc_block_NF+0x20>
f0132aa5:	e9 d5 03 00 00       	jmp    f0132e7f <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132aaa:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132aaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132ab2:	e9 b1 01 00 00       	jmp    f0132c68 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aba:	8b 50 08             	mov    0x8(%eax),%edx
f0132abd:	a1 b0 ec 88 f0       	mov    0xf088ecb0,%eax
f0132ac2:	39 c2                	cmp    %eax,%edx
f0132ac4:	0f 82 96 01 00 00    	jb     f0132c60 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0132aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132acd:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ad0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132ad3:	0f 82 87 01 00 00    	jb     f0132c60 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0132ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132adc:	8b 40 0c             	mov    0xc(%eax),%eax
f0132adf:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132ae2:	0f 85 95 00 00 00    	jne    f0132b7d <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132ae8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132aec:	75 17                	jne    f0132b05 <alloc_block_NF+0x24c>
f0132aee:	83 ec 04             	sub    $0x4,%esp
f0132af1:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0132af6:	68 fc 00 00 00       	push   $0xfc
f0132afb:	68 47 d9 13 f0       	push   $0xf013d947
f0132b00:	e8 00 d7 fc ff       	call   f0100205 <_panic>
f0132b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b08:	8b 00                	mov    (%eax),%eax
f0132b0a:	85 c0                	test   %eax,%eax
f0132b0c:	74 10                	je     f0132b1e <alloc_block_NF+0x265>
f0132b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b11:	8b 00                	mov    (%eax),%eax
f0132b13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132b16:	8b 52 04             	mov    0x4(%edx),%edx
f0132b19:	89 50 04             	mov    %edx,0x4(%eax)
f0132b1c:	eb 0b                	jmp    f0132b29 <alloc_block_NF+0x270>
f0132b1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b21:	8b 40 04             	mov    0x4(%eax),%eax
f0132b24:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b2c:	8b 40 04             	mov    0x4(%eax),%eax
f0132b2f:	85 c0                	test   %eax,%eax
f0132b31:	74 0f                	je     f0132b42 <alloc_block_NF+0x289>
f0132b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b36:	8b 40 04             	mov    0x4(%eax),%eax
f0132b39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132b3c:	8b 12                	mov    (%edx),%edx
f0132b3e:	89 10                	mov    %edx,(%eax)
f0132b40:	eb 0a                	jmp    f0132b4c <alloc_block_NF+0x293>
f0132b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b45:	8b 00                	mov    (%eax),%eax
f0132b47:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b58:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b5f:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132b64:	48                   	dec    %eax
f0132b65:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					   svaOfNF = point->sva;
f0132b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b6d:	8b 40 08             	mov    0x8(%eax),%eax
f0132b70:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
					   return  point;
f0132b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b78:	e9 07 03 00 00       	jmp    f0132e84 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b80:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b83:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132b86:	0f 86 d4 00 00 00    	jbe    f0132c60 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132b8c:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0132b91:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b97:	8b 50 08             	mov    0x8(%eax),%edx
f0132b9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b9d:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132ba0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ba3:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ba6:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132ba9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132bad:	75 17                	jne    f0132bc6 <alloc_block_NF+0x30d>
f0132baf:	83 ec 04             	sub    $0x4,%esp
f0132bb2:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0132bb7:	68 04 01 00 00       	push   $0x104
f0132bbc:	68 47 d9 13 f0       	push   $0xf013d947
f0132bc1:	e8 3f d6 fc ff       	call   f0100205 <_panic>
f0132bc6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bc9:	8b 00                	mov    (%eax),%eax
f0132bcb:	85 c0                	test   %eax,%eax
f0132bcd:	74 10                	je     f0132bdf <alloc_block_NF+0x326>
f0132bcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bd2:	8b 00                	mov    (%eax),%eax
f0132bd4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132bd7:	8b 52 04             	mov    0x4(%edx),%edx
f0132bda:	89 50 04             	mov    %edx,0x4(%eax)
f0132bdd:	eb 0b                	jmp    f0132bea <alloc_block_NF+0x331>
f0132bdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132be2:	8b 40 04             	mov    0x4(%eax),%eax
f0132be5:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0132bea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bed:	8b 40 04             	mov    0x4(%eax),%eax
f0132bf0:	85 c0                	test   %eax,%eax
f0132bf2:	74 0f                	je     f0132c03 <alloc_block_NF+0x34a>
f0132bf4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bf7:	8b 40 04             	mov    0x4(%eax),%eax
f0132bfa:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132bfd:	8b 12                	mov    (%edx),%edx
f0132bff:	89 10                	mov    %edx,(%eax)
f0132c01:	eb 0a                	jmp    f0132c0d <alloc_block_NF+0x354>
f0132c03:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c06:	8b 00                	mov    (%eax),%eax
f0132c08:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0132c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c10:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c19:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c20:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0132c25:	48                   	dec    %eax
f0132c26:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					   svaOfNF = ReturnedBlock->sva;
f0132c2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c2e:	8b 40 08             	mov    0x8(%eax),%eax
f0132c31:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
					   point->sva += size;
f0132c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c39:	8b 50 08             	mov    0x8(%eax),%edx
f0132c3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c3f:	01 c2                	add    %eax,%edx
f0132c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c44:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c4a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c4d:	2b 45 08             	sub    0x8(%ebp),%eax
f0132c50:	89 c2                	mov    %eax,%edx
f0132c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c55:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132c58:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c5b:	e9 24 02 00 00       	jmp    f0132e84 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132c60:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132c65:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c6c:	74 07                	je     f0132c75 <alloc_block_NF+0x3bc>
f0132c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c71:	8b 00                	mov    (%eax),%eax
f0132c73:	eb 05                	jmp    f0132c7a <alloc_block_NF+0x3c1>
f0132c75:	b8 00 00 00 00       	mov    $0x0,%eax
f0132c7a:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f0132c7f:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132c84:	85 c0                	test   %eax,%eax
f0132c86:	0f 85 2b fe ff ff    	jne    f0132ab7 <alloc_block_NF+0x1fe>
f0132c8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c90:	0f 85 21 fe ff ff    	jne    f0132ab7 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132c96:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132c9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c9e:	e9 ae 01 00 00       	jmp    f0132e51 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0132ca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ca6:	8b 50 08             	mov    0x8(%eax),%edx
f0132ca9:	a1 b0 ec 88 f0       	mov    0xf088ecb0,%eax
f0132cae:	39 c2                	cmp    %eax,%edx
f0132cb0:	0f 83 93 01 00 00    	jae    f0132e49 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0132cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cb9:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cbc:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132cbf:	0f 82 84 01 00 00    	jb     f0132e49 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132cc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cc8:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ccb:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132cce:	0f 85 95 00 00 00    	jne    f0132d69 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132cd4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132cd8:	75 17                	jne    f0132cf1 <alloc_block_NF+0x438>
f0132cda:	83 ec 04             	sub    $0x4,%esp
f0132cdd:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0132ce2:	68 14 01 00 00       	push   $0x114
f0132ce7:	68 47 d9 13 f0       	push   $0xf013d947
f0132cec:	e8 14 d5 fc ff       	call   f0100205 <_panic>
f0132cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cf4:	8b 00                	mov    (%eax),%eax
f0132cf6:	85 c0                	test   %eax,%eax
f0132cf8:	74 10                	je     f0132d0a <alloc_block_NF+0x451>
f0132cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cfd:	8b 00                	mov    (%eax),%eax
f0132cff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132d02:	8b 52 04             	mov    0x4(%edx),%edx
f0132d05:	89 50 04             	mov    %edx,0x4(%eax)
f0132d08:	eb 0b                	jmp    f0132d15 <alloc_block_NF+0x45c>
f0132d0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d0d:	8b 40 04             	mov    0x4(%eax),%eax
f0132d10:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132d15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d18:	8b 40 04             	mov    0x4(%eax),%eax
f0132d1b:	85 c0                	test   %eax,%eax
f0132d1d:	74 0f                	je     f0132d2e <alloc_block_NF+0x475>
f0132d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d22:	8b 40 04             	mov    0x4(%eax),%eax
f0132d25:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132d28:	8b 12                	mov    (%edx),%edx
f0132d2a:	89 10                	mov    %edx,(%eax)
f0132d2c:	eb 0a                	jmp    f0132d38 <alloc_block_NF+0x47f>
f0132d2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d31:	8b 00                	mov    (%eax),%eax
f0132d33:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132d38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d3b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132d41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d44:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d4b:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132d50:	48                   	dec    %eax
f0132d51:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					   svaOfNF = point->sva;
f0132d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d59:	8b 40 08             	mov    0x8(%eax),%eax
f0132d5c:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
					   return  point;
f0132d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d64:	e9 1b 01 00 00       	jmp    f0132e84 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d6f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132d72:	0f 86 d1 00 00 00    	jbe    f0132e49 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132d78:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0132d7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132d80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d83:	8b 50 08             	mov    0x8(%eax),%edx
f0132d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d89:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132d8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d8f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d92:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132d95:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132d99:	75 17                	jne    f0132db2 <alloc_block_NF+0x4f9>
f0132d9b:	83 ec 04             	sub    $0x4,%esp
f0132d9e:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0132da3:	68 1c 01 00 00       	push   $0x11c
f0132da8:	68 47 d9 13 f0       	push   $0xf013d947
f0132dad:	e8 53 d4 fc ff       	call   f0100205 <_panic>
f0132db2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132db5:	8b 00                	mov    (%eax),%eax
f0132db7:	85 c0                	test   %eax,%eax
f0132db9:	74 10                	je     f0132dcb <alloc_block_NF+0x512>
f0132dbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dbe:	8b 00                	mov    (%eax),%eax
f0132dc0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132dc3:	8b 52 04             	mov    0x4(%edx),%edx
f0132dc6:	89 50 04             	mov    %edx,0x4(%eax)
f0132dc9:	eb 0b                	jmp    f0132dd6 <alloc_block_NF+0x51d>
f0132dcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dce:	8b 40 04             	mov    0x4(%eax),%eax
f0132dd1:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0132dd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dd9:	8b 40 04             	mov    0x4(%eax),%eax
f0132ddc:	85 c0                	test   %eax,%eax
f0132dde:	74 0f                	je     f0132def <alloc_block_NF+0x536>
f0132de0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132de3:	8b 40 04             	mov    0x4(%eax),%eax
f0132de6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132de9:	8b 12                	mov    (%edx),%edx
f0132deb:	89 10                	mov    %edx,(%eax)
f0132ded:	eb 0a                	jmp    f0132df9 <alloc_block_NF+0x540>
f0132def:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132df2:	8b 00                	mov    (%eax),%eax
f0132df4:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0132df9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dfc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132e02:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e05:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e0c:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0132e11:	48                   	dec    %eax
f0132e12:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					   svaOfNF = ReturnedBlock->sva;
f0132e17:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e1a:	8b 40 08             	mov    0x8(%eax),%eax
f0132e1d:	a3 b0 ec 88 f0       	mov    %eax,0xf088ecb0
					   point->sva += size;
f0132e22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e25:	8b 50 08             	mov    0x8(%eax),%edx
f0132e28:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e2b:	01 c2                	add    %eax,%edx
f0132e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e30:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e36:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e39:	2b 45 08             	sub    0x8(%ebp),%eax
f0132e3c:	89 c2                	mov    %eax,%edx
f0132e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e41:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132e44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e47:	eb 3b                	jmp    f0132e84 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132e49:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132e4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132e51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132e55:	74 07                	je     f0132e5e <alloc_block_NF+0x5a5>
f0132e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e5a:	8b 00                	mov    (%eax),%eax
f0132e5c:	eb 05                	jmp    f0132e63 <alloc_block_NF+0x5aa>
f0132e5e:	b8 00 00 00 00       	mov    $0x0,%eax
f0132e63:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f0132e68:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f0132e6d:	85 c0                	test   %eax,%eax
f0132e6f:	0f 85 2e fe ff ff    	jne    f0132ca3 <alloc_block_NF+0x3ea>
f0132e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132e79:	0f 85 24 fe ff ff    	jne    f0132ca3 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0132e7f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132e84:	c9                   	leave  
f0132e85:	c3                   	ret    

f0132e86 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132e86:	55                   	push   %ebp
f0132e87:	89 e5                	mov    %esp,%ebp
f0132e89:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132e8c:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132e91:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0132e94:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f0132e99:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132e9c:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132ea1:	85 c0                	test   %eax,%eax
f0132ea3:	74 14                	je     f0132eb9 <insert_sorted_with_merge_freeList+0x33>
f0132ea5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ea8:	8b 50 08             	mov    0x8(%eax),%edx
f0132eab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132eae:	8b 40 08             	mov    0x8(%eax),%eax
f0132eb1:	39 c2                	cmp    %eax,%edx
f0132eb3:	0f 87 9b 01 00 00    	ja     f0133054 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132eb9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132ebd:	75 17                	jne    f0132ed6 <insert_sorted_with_merge_freeList+0x50>
f0132ebf:	83 ec 04             	sub    $0x4,%esp
f0132ec2:	68 24 d9 13 f0       	push   $0xf013d924
f0132ec7:	68 38 01 00 00       	push   $0x138
f0132ecc:	68 47 d9 13 f0       	push   $0xf013d947
f0132ed1:	e8 2f d3 fc ff       	call   f0100205 <_panic>
f0132ed6:	8b 15 64 ed 88 f0    	mov    0xf088ed64,%edx
f0132edc:	8b 45 08             	mov    0x8(%ebp),%eax
f0132edf:	89 10                	mov    %edx,(%eax)
f0132ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ee4:	8b 00                	mov    (%eax),%eax
f0132ee6:	85 c0                	test   %eax,%eax
f0132ee8:	74 0d                	je     f0132ef7 <insert_sorted_with_merge_freeList+0x71>
f0132eea:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0132eef:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ef2:	89 50 04             	mov    %edx,0x4(%eax)
f0132ef5:	eb 08                	jmp    f0132eff <insert_sorted_with_merge_freeList+0x79>
f0132ef7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132efa:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132eff:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f02:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132f07:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f0a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f11:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132f16:	40                   	inc    %eax
f0132f17:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132f1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132f20:	0f 84 a8 06 00 00    	je     f01335ce <insert_sorted_with_merge_freeList+0x748>
f0132f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f29:	8b 50 08             	mov    0x8(%eax),%edx
f0132f2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f2f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f32:	01 c2                	add    %eax,%edx
f0132f34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f37:	8b 40 08             	mov    0x8(%eax),%eax
f0132f3a:	39 c2                	cmp    %eax,%edx
f0132f3c:	0f 85 8c 06 00 00    	jne    f01335ce <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0132f42:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f45:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f4b:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f4e:	01 c2                	add    %eax,%edx
f0132f50:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f53:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132f56:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132f5a:	75 17                	jne    f0132f73 <insert_sorted_with_merge_freeList+0xed>
f0132f5c:	83 ec 04             	sub    $0x4,%esp
f0132f5f:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0132f64:	68 3c 01 00 00       	push   $0x13c
f0132f69:	68 47 d9 13 f0       	push   $0xf013d947
f0132f6e:	e8 92 d2 fc ff       	call   f0100205 <_panic>
f0132f73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f76:	8b 00                	mov    (%eax),%eax
f0132f78:	85 c0                	test   %eax,%eax
f0132f7a:	74 10                	je     f0132f8c <insert_sorted_with_merge_freeList+0x106>
f0132f7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f7f:	8b 00                	mov    (%eax),%eax
f0132f81:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132f84:	8b 52 04             	mov    0x4(%edx),%edx
f0132f87:	89 50 04             	mov    %edx,0x4(%eax)
f0132f8a:	eb 0b                	jmp    f0132f97 <insert_sorted_with_merge_freeList+0x111>
f0132f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f8f:	8b 40 04             	mov    0x4(%eax),%eax
f0132f92:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0132f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f9a:	8b 40 04             	mov    0x4(%eax),%eax
f0132f9d:	85 c0                	test   %eax,%eax
f0132f9f:	74 0f                	je     f0132fb0 <insert_sorted_with_merge_freeList+0x12a>
f0132fa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fa4:	8b 40 04             	mov    0x4(%eax),%eax
f0132fa7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132faa:	8b 12                	mov    (%edx),%edx
f0132fac:	89 10                	mov    %edx,(%eax)
f0132fae:	eb 0a                	jmp    f0132fba <insert_sorted_with_merge_freeList+0x134>
f0132fb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fb3:	8b 00                	mov    (%eax),%eax
f0132fb5:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0132fba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fbd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132fc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fc6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132fcd:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0132fd2:	48                   	dec    %eax
f0132fd3:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
			head->size = 0;
f0132fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fdb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0132fe2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fe5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132fec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132ff0:	75 17                	jne    f0133009 <insert_sorted_with_merge_freeList+0x183>
f0132ff2:	83 ec 04             	sub    $0x4,%esp
f0132ff5:	68 24 d9 13 f0       	push   $0xf013d924
f0132ffa:	68 3f 01 00 00       	push   $0x13f
f0132fff:	68 47 d9 13 f0       	push   $0xf013d947
f0133004:	e8 fc d1 fc ff       	call   f0100205 <_panic>
f0133009:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f013300f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133012:	89 10                	mov    %edx,(%eax)
f0133014:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133017:	8b 00                	mov    (%eax),%eax
f0133019:	85 c0                	test   %eax,%eax
f013301b:	74 0d                	je     f013302a <insert_sorted_with_merge_freeList+0x1a4>
f013301d:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f0133022:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0133025:	89 50 04             	mov    %edx,0x4(%eax)
f0133028:	eb 08                	jmp    f0133032 <insert_sorted_with_merge_freeList+0x1ac>
f013302a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013302d:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0133032:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133035:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f013303a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013303d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133044:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0133049:	40                   	inc    %eax
f013304a:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013304f:	e9 7a 05 00 00       	jmp    f01335ce <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0133054:	8b 45 08             	mov    0x8(%ebp),%eax
f0133057:	8b 50 08             	mov    0x8(%eax),%edx
f013305a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013305d:	8b 40 08             	mov    0x8(%eax),%eax
f0133060:	39 c2                	cmp    %eax,%edx
f0133062:	0f 82 14 01 00 00    	jb     f013317c <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0133068:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013306b:	8b 50 08             	mov    0x8(%eax),%edx
f013306e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133071:	8b 40 0c             	mov    0xc(%eax),%eax
f0133074:	01 c2                	add    %eax,%edx
f0133076:	8b 45 08             	mov    0x8(%ebp),%eax
f0133079:	8b 40 08             	mov    0x8(%eax),%eax
f013307c:	39 c2                	cmp    %eax,%edx
f013307e:	0f 85 90 00 00 00    	jne    f0133114 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0133084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133087:	8b 50 0c             	mov    0xc(%eax),%edx
f013308a:	8b 45 08             	mov    0x8(%ebp),%eax
f013308d:	8b 40 0c             	mov    0xc(%eax),%eax
f0133090:	01 c2                	add    %eax,%edx
f0133092:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133095:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0133098:	8b 45 08             	mov    0x8(%ebp),%eax
f013309b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f01330a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01330a5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01330ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01330b0:	75 17                	jne    f01330c9 <insert_sorted_with_merge_freeList+0x243>
f01330b2:	83 ec 04             	sub    $0x4,%esp
f01330b5:	68 24 d9 13 f0       	push   $0xf013d924
f01330ba:	68 49 01 00 00       	push   $0x149
f01330bf:	68 47 d9 13 f0       	push   $0xf013d947
f01330c4:	e8 3c d1 fc ff       	call   f0100205 <_panic>
f01330c9:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f01330cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01330d2:	89 10                	mov    %edx,(%eax)
f01330d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01330d7:	8b 00                	mov    (%eax),%eax
f01330d9:	85 c0                	test   %eax,%eax
f01330db:	74 0d                	je     f01330ea <insert_sorted_with_merge_freeList+0x264>
f01330dd:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01330e2:	8b 55 08             	mov    0x8(%ebp),%edx
f01330e5:	89 50 04             	mov    %edx,0x4(%eax)
f01330e8:	eb 08                	jmp    f01330f2 <insert_sorted_with_merge_freeList+0x26c>
f01330ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01330ed:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01330f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01330f5:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f01330fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01330fd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133104:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0133109:	40                   	inc    %eax
f013310a:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013310f:	e9 bb 04 00 00       	jmp    f01335cf <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0133114:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133118:	75 17                	jne    f0133131 <insert_sorted_with_merge_freeList+0x2ab>
f013311a:	83 ec 04             	sub    $0x4,%esp
f013311d:	68 98 d9 13 f0       	push   $0xf013d998
f0133122:	68 4c 01 00 00       	push   $0x14c
f0133127:	68 47 d9 13 f0       	push   $0xf013d947
f013312c:	e8 d4 d0 fc ff       	call   f0100205 <_panic>
f0133131:	8b 15 68 ed 88 f0    	mov    0xf088ed68,%edx
f0133137:	8b 45 08             	mov    0x8(%ebp),%eax
f013313a:	89 50 04             	mov    %edx,0x4(%eax)
f013313d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133140:	8b 40 04             	mov    0x4(%eax),%eax
f0133143:	85 c0                	test   %eax,%eax
f0133145:	74 0c                	je     f0133153 <insert_sorted_with_merge_freeList+0x2cd>
f0133147:	a1 68 ed 88 f0       	mov    0xf088ed68,%eax
f013314c:	8b 55 08             	mov    0x8(%ebp),%edx
f013314f:	89 10                	mov    %edx,(%eax)
f0133151:	eb 08                	jmp    f013315b <insert_sorted_with_merge_freeList+0x2d5>
f0133153:	8b 45 08             	mov    0x8(%ebp),%eax
f0133156:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f013315b:	8b 45 08             	mov    0x8(%ebp),%eax
f013315e:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0133163:	8b 45 08             	mov    0x8(%ebp),%eax
f0133166:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013316c:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0133171:	40                   	inc    %eax
f0133172:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133177:	e9 53 04 00 00       	jmp    f01335cf <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f013317c:	a1 64 ed 88 f0       	mov    0xf088ed64,%eax
f0133181:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133184:	e9 15 04 00 00       	jmp    f013359e <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0133189:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013318c:	8b 00                	mov    (%eax),%eax
f013318e:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0133191:	8b 45 08             	mov    0x8(%ebp),%eax
f0133194:	8b 50 08             	mov    0x8(%eax),%edx
f0133197:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013319a:	8b 40 08             	mov    0x8(%eax),%eax
f013319d:	39 c2                	cmp    %eax,%edx
f013319f:	0f 86 f1 03 00 00    	jbe    f0133596 <insert_sorted_with_merge_freeList+0x710>
f01331a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01331a8:	8b 50 08             	mov    0x8(%eax),%edx
f01331ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331ae:	8b 40 08             	mov    0x8(%eax),%eax
f01331b1:	39 c2                	cmp    %eax,%edx
f01331b3:	0f 83 dd 03 00 00    	jae    f0133596 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f01331b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331bc:	8b 50 08             	mov    0x8(%eax),%edx
f01331bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331c2:	8b 40 0c             	mov    0xc(%eax),%eax
f01331c5:	01 c2                	add    %eax,%edx
f01331c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01331ca:	8b 40 08             	mov    0x8(%eax),%eax
f01331cd:	39 c2                	cmp    %eax,%edx
f01331cf:	0f 85 b9 01 00 00    	jne    f013338e <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01331d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01331d8:	8b 50 08             	mov    0x8(%eax),%edx
f01331db:	8b 45 08             	mov    0x8(%ebp),%eax
f01331de:	8b 40 0c             	mov    0xc(%eax),%eax
f01331e1:	01 c2                	add    %eax,%edx
f01331e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331e6:	8b 40 08             	mov    0x8(%eax),%eax
f01331e9:	39 c2                	cmp    %eax,%edx
f01331eb:	0f 85 0d 01 00 00    	jne    f01332fe <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f01331f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331f4:	8b 50 0c             	mov    0xc(%eax),%edx
f01331f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331fa:	8b 40 0c             	mov    0xc(%eax),%eax
f01331fd:	01 c2                	add    %eax,%edx
f01331ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133202:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0133205:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0133209:	75 17                	jne    f0133222 <insert_sorted_with_merge_freeList+0x39c>
f013320b:	83 ec 04             	sub    $0x4,%esp
f013320e:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0133213:	68 5c 01 00 00       	push   $0x15c
f0133218:	68 47 d9 13 f0       	push   $0xf013d947
f013321d:	e8 e3 cf fc ff       	call   f0100205 <_panic>
f0133222:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133225:	8b 00                	mov    (%eax),%eax
f0133227:	85 c0                	test   %eax,%eax
f0133229:	74 10                	je     f013323b <insert_sorted_with_merge_freeList+0x3b5>
f013322b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013322e:	8b 00                	mov    (%eax),%eax
f0133230:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133233:	8b 52 04             	mov    0x4(%edx),%edx
f0133236:	89 50 04             	mov    %edx,0x4(%eax)
f0133239:	eb 0b                	jmp    f0133246 <insert_sorted_with_merge_freeList+0x3c0>
f013323b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013323e:	8b 40 04             	mov    0x4(%eax),%eax
f0133241:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0133246:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133249:	8b 40 04             	mov    0x4(%eax),%eax
f013324c:	85 c0                	test   %eax,%eax
f013324e:	74 0f                	je     f013325f <insert_sorted_with_merge_freeList+0x3d9>
f0133250:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133253:	8b 40 04             	mov    0x4(%eax),%eax
f0133256:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133259:	8b 12                	mov    (%edx),%edx
f013325b:	89 10                	mov    %edx,(%eax)
f013325d:	eb 0a                	jmp    f0133269 <insert_sorted_with_merge_freeList+0x3e3>
f013325f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133262:	8b 00                	mov    (%eax),%eax
f0133264:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0133269:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013326c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133272:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133275:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013327c:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f0133281:	48                   	dec    %eax
f0133282:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
						nextBlock->sva = 0;
f0133287:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013328a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0133291:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133294:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f013329b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013329f:	75 17                	jne    f01332b8 <insert_sorted_with_merge_freeList+0x432>
f01332a1:	83 ec 04             	sub    $0x4,%esp
f01332a4:	68 24 d9 13 f0       	push   $0xf013d924
f01332a9:	68 5f 01 00 00       	push   $0x15f
f01332ae:	68 47 d9 13 f0       	push   $0xf013d947
f01332b3:	e8 4d cf fc ff       	call   f0100205 <_panic>
f01332b8:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f01332be:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332c1:	89 10                	mov    %edx,(%eax)
f01332c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332c6:	8b 00                	mov    (%eax),%eax
f01332c8:	85 c0                	test   %eax,%eax
f01332ca:	74 0d                	je     f01332d9 <insert_sorted_with_merge_freeList+0x453>
f01332cc:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01332d1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01332d4:	89 50 04             	mov    %edx,0x4(%eax)
f01332d7:	eb 08                	jmp    f01332e1 <insert_sorted_with_merge_freeList+0x45b>
f01332d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332dc:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f01332e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332e4:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f01332e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332ec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01332f3:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f01332f8:	40                   	inc    %eax
f01332f9:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					}
					currentBlock->size += blockToInsert->size;
f01332fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133301:	8b 50 0c             	mov    0xc(%eax),%edx
f0133304:	8b 45 08             	mov    0x8(%ebp),%eax
f0133307:	8b 40 0c             	mov    0xc(%eax),%eax
f013330a:	01 c2                	add    %eax,%edx
f013330c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013330f:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0133312:	8b 45 08             	mov    0x8(%ebp),%eax
f0133315:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f013331c:	8b 45 08             	mov    0x8(%ebp),%eax
f013331f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0133326:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013332a:	75 17                	jne    f0133343 <insert_sorted_with_merge_freeList+0x4bd>
f013332c:	83 ec 04             	sub    $0x4,%esp
f013332f:	68 24 d9 13 f0       	push   $0xf013d924
f0133334:	68 64 01 00 00       	push   $0x164
f0133339:	68 47 d9 13 f0       	push   $0xf013d947
f013333e:	e8 c2 ce fc ff       	call   f0100205 <_panic>
f0133343:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f0133349:	8b 45 08             	mov    0x8(%ebp),%eax
f013334c:	89 10                	mov    %edx,(%eax)
f013334e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133351:	8b 00                	mov    (%eax),%eax
f0133353:	85 c0                	test   %eax,%eax
f0133355:	74 0d                	je     f0133364 <insert_sorted_with_merge_freeList+0x4de>
f0133357:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f013335c:	8b 55 08             	mov    0x8(%ebp),%edx
f013335f:	89 50 04             	mov    %edx,0x4(%eax)
f0133362:	eb 08                	jmp    f013336c <insert_sorted_with_merge_freeList+0x4e6>
f0133364:	8b 45 08             	mov    0x8(%ebp),%eax
f0133367:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f013336c:	8b 45 08             	mov    0x8(%ebp),%eax
f013336f:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f0133374:	8b 45 08             	mov    0x8(%ebp),%eax
f0133377:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013337e:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f0133383:	40                   	inc    %eax
f0133384:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					break;
f0133389:	e9 41 02 00 00       	jmp    f01335cf <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f013338e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133391:	8b 50 08             	mov    0x8(%eax),%edx
f0133394:	8b 45 08             	mov    0x8(%ebp),%eax
f0133397:	8b 40 0c             	mov    0xc(%eax),%eax
f013339a:	01 c2                	add    %eax,%edx
f013339c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013339f:	8b 40 08             	mov    0x8(%eax),%eax
f01333a2:	39 c2                	cmp    %eax,%edx
f01333a4:	0f 85 7c 01 00 00    	jne    f0133526 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f01333aa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01333ae:	74 06                	je     f01333b6 <insert_sorted_with_merge_freeList+0x530>
f01333b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01333b4:	75 17                	jne    f01333cd <insert_sorted_with_merge_freeList+0x547>
f01333b6:	83 ec 04             	sub    $0x4,%esp
f01333b9:	68 60 d9 13 f0       	push   $0xf013d960
f01333be:	68 69 01 00 00       	push   $0x169
f01333c3:	68 47 d9 13 f0       	push   $0xf013d947
f01333c8:	e8 38 ce fc ff       	call   f0100205 <_panic>
f01333cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333d0:	8b 50 04             	mov    0x4(%eax),%edx
f01333d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01333d6:	89 50 04             	mov    %edx,0x4(%eax)
f01333d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01333dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01333df:	89 10                	mov    %edx,(%eax)
f01333e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333e4:	8b 40 04             	mov    0x4(%eax),%eax
f01333e7:	85 c0                	test   %eax,%eax
f01333e9:	74 0d                	je     f01333f8 <insert_sorted_with_merge_freeList+0x572>
f01333eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333ee:	8b 40 04             	mov    0x4(%eax),%eax
f01333f1:	8b 55 08             	mov    0x8(%ebp),%edx
f01333f4:	89 10                	mov    %edx,(%eax)
f01333f6:	eb 08                	jmp    f0133400 <insert_sorted_with_merge_freeList+0x57a>
f01333f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01333fb:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f0133400:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133403:	8b 55 08             	mov    0x8(%ebp),%edx
f0133406:	89 50 04             	mov    %edx,0x4(%eax)
f0133409:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f013340e:	40                   	inc    %eax
f013340f:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					blockToInsert->size += nextBlock->size;
f0133414:	8b 45 08             	mov    0x8(%ebp),%eax
f0133417:	8b 50 0c             	mov    0xc(%eax),%edx
f013341a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013341d:	8b 40 0c             	mov    0xc(%eax),%eax
f0133420:	01 c2                	add    %eax,%edx
f0133422:	8b 45 08             	mov    0x8(%ebp),%eax
f0133425:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0133428:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013342c:	75 17                	jne    f0133445 <insert_sorted_with_merge_freeList+0x5bf>
f013342e:	83 ec 04             	sub    $0x4,%esp
f0133431:	68 f0 d9 13 f0       	push   $0xf013d9f0
f0133436:	68 6b 01 00 00       	push   $0x16b
f013343b:	68 47 d9 13 f0       	push   $0xf013d947
f0133440:	e8 c0 cd fc ff       	call   f0100205 <_panic>
f0133445:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133448:	8b 00                	mov    (%eax),%eax
f013344a:	85 c0                	test   %eax,%eax
f013344c:	74 10                	je     f013345e <insert_sorted_with_merge_freeList+0x5d8>
f013344e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133451:	8b 00                	mov    (%eax),%eax
f0133453:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133456:	8b 52 04             	mov    0x4(%edx),%edx
f0133459:	89 50 04             	mov    %edx,0x4(%eax)
f013345c:	eb 0b                	jmp    f0133469 <insert_sorted_with_merge_freeList+0x5e3>
f013345e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133461:	8b 40 04             	mov    0x4(%eax),%eax
f0133464:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0133469:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013346c:	8b 40 04             	mov    0x4(%eax),%eax
f013346f:	85 c0                	test   %eax,%eax
f0133471:	74 0f                	je     f0133482 <insert_sorted_with_merge_freeList+0x5fc>
f0133473:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133476:	8b 40 04             	mov    0x4(%eax),%eax
f0133479:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013347c:	8b 12                	mov    (%edx),%edx
f013347e:	89 10                	mov    %edx,(%eax)
f0133480:	eb 0a                	jmp    f013348c <insert_sorted_with_merge_freeList+0x606>
f0133482:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133485:	8b 00                	mov    (%eax),%eax
f0133487:	a3 64 ed 88 f0       	mov    %eax,0xf088ed64
f013348c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013348f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133495:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133498:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013349f:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f01334a4:	48                   	dec    %eax
f01334a5:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					nextBlock->sva = 0;
f01334aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334ad:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f01334b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334b7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01334be:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01334c2:	75 17                	jne    f01334db <insert_sorted_with_merge_freeList+0x655>
f01334c4:	83 ec 04             	sub    $0x4,%esp
f01334c7:	68 24 d9 13 f0       	push   $0xf013d924
f01334cc:	68 6e 01 00 00       	push   $0x16e
f01334d1:	68 47 d9 13 f0       	push   $0xf013d947
f01334d6:	e8 2a cd fc ff       	call   f0100205 <_panic>
f01334db:	8b 15 98 ed 88 f0    	mov    0xf088ed98,%edx
f01334e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334e4:	89 10                	mov    %edx,(%eax)
f01334e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334e9:	8b 00                	mov    (%eax),%eax
f01334eb:	85 c0                	test   %eax,%eax
f01334ed:	74 0d                	je     f01334fc <insert_sorted_with_merge_freeList+0x676>
f01334ef:	a1 98 ed 88 f0       	mov    0xf088ed98,%eax
f01334f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01334f7:	89 50 04             	mov    %edx,0x4(%eax)
f01334fa:	eb 08                	jmp    f0133504 <insert_sorted_with_merge_freeList+0x67e>
f01334fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334ff:	a3 9c ed 88 f0       	mov    %eax,0xf088ed9c
f0133504:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133507:	a3 98 ed 88 f0       	mov    %eax,0xf088ed98
f013350c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013350f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133516:	a1 a4 ed 88 f0       	mov    0xf088eda4,%eax
f013351b:	40                   	inc    %eax
f013351c:	a3 a4 ed 88 f0       	mov    %eax,0xf088eda4
					break;
f0133521:	e9 a9 00 00 00       	jmp    f01335cf <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0133526:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013352a:	74 06                	je     f0133532 <insert_sorted_with_merge_freeList+0x6ac>
f013352c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133530:	75 17                	jne    f0133549 <insert_sorted_with_merge_freeList+0x6c3>
f0133532:	83 ec 04             	sub    $0x4,%esp
f0133535:	68 bc d9 13 f0       	push   $0xf013d9bc
f013353a:	68 73 01 00 00       	push   $0x173
f013353f:	68 47 d9 13 f0       	push   $0xf013d947
f0133544:	e8 bc cc fc ff       	call   f0100205 <_panic>
f0133549:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013354c:	8b 10                	mov    (%eax),%edx
f013354e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133551:	89 10                	mov    %edx,(%eax)
f0133553:	8b 45 08             	mov    0x8(%ebp),%eax
f0133556:	8b 00                	mov    (%eax),%eax
f0133558:	85 c0                	test   %eax,%eax
f013355a:	74 0b                	je     f0133567 <insert_sorted_with_merge_freeList+0x6e1>
f013355c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013355f:	8b 00                	mov    (%eax),%eax
f0133561:	8b 55 08             	mov    0x8(%ebp),%edx
f0133564:	89 50 04             	mov    %edx,0x4(%eax)
f0133567:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013356a:	8b 55 08             	mov    0x8(%ebp),%edx
f013356d:	89 10                	mov    %edx,(%eax)
f013356f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133572:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133575:	89 50 04             	mov    %edx,0x4(%eax)
f0133578:	8b 45 08             	mov    0x8(%ebp),%eax
f013357b:	8b 00                	mov    (%eax),%eax
f013357d:	85 c0                	test   %eax,%eax
f013357f:	75 08                	jne    f0133589 <insert_sorted_with_merge_freeList+0x703>
f0133581:	8b 45 08             	mov    0x8(%ebp),%eax
f0133584:	a3 68 ed 88 f0       	mov    %eax,0xf088ed68
f0133589:	a1 70 ed 88 f0       	mov    0xf088ed70,%eax
f013358e:	40                   	inc    %eax
f013358f:	a3 70 ed 88 f0       	mov    %eax,0xf088ed70
					break;
f0133594:	eb 39                	jmp    f01335cf <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0133596:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f013359b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013359e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01335a2:	74 07                	je     f01335ab <insert_sorted_with_merge_freeList+0x725>
f01335a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01335a7:	8b 00                	mov    (%eax),%eax
f01335a9:	eb 05                	jmp    f01335b0 <insert_sorted_with_merge_freeList+0x72a>
f01335ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01335b0:	a3 6c ed 88 f0       	mov    %eax,0xf088ed6c
f01335b5:	a1 6c ed 88 f0       	mov    0xf088ed6c,%eax
f01335ba:	85 c0                	test   %eax,%eax
f01335bc:	0f 85 c7 fb ff ff    	jne    f0133189 <insert_sorted_with_merge_freeList+0x303>
f01335c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01335c6:	0f 85 bd fb ff ff    	jne    f0133189 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01335cc:	eb 01                	jmp    f01335cf <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01335ce:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01335cf:	90                   	nop
f01335d0:	c9                   	leave  
f01335d1:	c3                   	ret    
f01335d2:	66 90                	xchg   %ax,%ax

f01335d4 <__udivdi3>:
f01335d4:	55                   	push   %ebp
f01335d5:	57                   	push   %edi
f01335d6:	56                   	push   %esi
f01335d7:	53                   	push   %ebx
f01335d8:	83 ec 1c             	sub    $0x1c,%esp
f01335db:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01335df:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01335e3:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01335e7:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01335eb:	89 ca                	mov    %ecx,%edx
f01335ed:	89 f8                	mov    %edi,%eax
f01335ef:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01335f3:	85 f6                	test   %esi,%esi
f01335f5:	75 2d                	jne    f0133624 <__udivdi3+0x50>
f01335f7:	39 cf                	cmp    %ecx,%edi
f01335f9:	77 65                	ja     f0133660 <__udivdi3+0x8c>
f01335fb:	89 fd                	mov    %edi,%ebp
f01335fd:	85 ff                	test   %edi,%edi
f01335ff:	75 0b                	jne    f013360c <__udivdi3+0x38>
f0133601:	b8 01 00 00 00       	mov    $0x1,%eax
f0133606:	31 d2                	xor    %edx,%edx
f0133608:	f7 f7                	div    %edi
f013360a:	89 c5                	mov    %eax,%ebp
f013360c:	31 d2                	xor    %edx,%edx
f013360e:	89 c8                	mov    %ecx,%eax
f0133610:	f7 f5                	div    %ebp
f0133612:	89 c1                	mov    %eax,%ecx
f0133614:	89 d8                	mov    %ebx,%eax
f0133616:	f7 f5                	div    %ebp
f0133618:	89 cf                	mov    %ecx,%edi
f013361a:	89 fa                	mov    %edi,%edx
f013361c:	83 c4 1c             	add    $0x1c,%esp
f013361f:	5b                   	pop    %ebx
f0133620:	5e                   	pop    %esi
f0133621:	5f                   	pop    %edi
f0133622:	5d                   	pop    %ebp
f0133623:	c3                   	ret    
f0133624:	39 ce                	cmp    %ecx,%esi
f0133626:	77 28                	ja     f0133650 <__udivdi3+0x7c>
f0133628:	0f bd fe             	bsr    %esi,%edi
f013362b:	83 f7 1f             	xor    $0x1f,%edi
f013362e:	75 40                	jne    f0133670 <__udivdi3+0x9c>
f0133630:	39 ce                	cmp    %ecx,%esi
f0133632:	72 0a                	jb     f013363e <__udivdi3+0x6a>
f0133634:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0133638:	0f 87 9e 00 00 00    	ja     f01336dc <__udivdi3+0x108>
f013363e:	b8 01 00 00 00       	mov    $0x1,%eax
f0133643:	89 fa                	mov    %edi,%edx
f0133645:	83 c4 1c             	add    $0x1c,%esp
f0133648:	5b                   	pop    %ebx
f0133649:	5e                   	pop    %esi
f013364a:	5f                   	pop    %edi
f013364b:	5d                   	pop    %ebp
f013364c:	c3                   	ret    
f013364d:	8d 76 00             	lea    0x0(%esi),%esi
f0133650:	31 ff                	xor    %edi,%edi
f0133652:	31 c0                	xor    %eax,%eax
f0133654:	89 fa                	mov    %edi,%edx
f0133656:	83 c4 1c             	add    $0x1c,%esp
f0133659:	5b                   	pop    %ebx
f013365a:	5e                   	pop    %esi
f013365b:	5f                   	pop    %edi
f013365c:	5d                   	pop    %ebp
f013365d:	c3                   	ret    
f013365e:	66 90                	xchg   %ax,%ax
f0133660:	89 d8                	mov    %ebx,%eax
f0133662:	f7 f7                	div    %edi
f0133664:	31 ff                	xor    %edi,%edi
f0133666:	89 fa                	mov    %edi,%edx
f0133668:	83 c4 1c             	add    $0x1c,%esp
f013366b:	5b                   	pop    %ebx
f013366c:	5e                   	pop    %esi
f013366d:	5f                   	pop    %edi
f013366e:	5d                   	pop    %ebp
f013366f:	c3                   	ret    
f0133670:	bd 20 00 00 00       	mov    $0x20,%ebp
f0133675:	89 eb                	mov    %ebp,%ebx
f0133677:	29 fb                	sub    %edi,%ebx
f0133679:	89 f9                	mov    %edi,%ecx
f013367b:	d3 e6                	shl    %cl,%esi
f013367d:	89 c5                	mov    %eax,%ebp
f013367f:	88 d9                	mov    %bl,%cl
f0133681:	d3 ed                	shr    %cl,%ebp
f0133683:	89 e9                	mov    %ebp,%ecx
f0133685:	09 f1                	or     %esi,%ecx
f0133687:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f013368b:	89 f9                	mov    %edi,%ecx
f013368d:	d3 e0                	shl    %cl,%eax
f013368f:	89 c5                	mov    %eax,%ebp
f0133691:	89 d6                	mov    %edx,%esi
f0133693:	88 d9                	mov    %bl,%cl
f0133695:	d3 ee                	shr    %cl,%esi
f0133697:	89 f9                	mov    %edi,%ecx
f0133699:	d3 e2                	shl    %cl,%edx
f013369b:	8b 44 24 08          	mov    0x8(%esp),%eax
f013369f:	88 d9                	mov    %bl,%cl
f01336a1:	d3 e8                	shr    %cl,%eax
f01336a3:	09 c2                	or     %eax,%edx
f01336a5:	89 d0                	mov    %edx,%eax
f01336a7:	89 f2                	mov    %esi,%edx
f01336a9:	f7 74 24 0c          	divl   0xc(%esp)
f01336ad:	89 d6                	mov    %edx,%esi
f01336af:	89 c3                	mov    %eax,%ebx
f01336b1:	f7 e5                	mul    %ebp
f01336b3:	39 d6                	cmp    %edx,%esi
f01336b5:	72 19                	jb     f01336d0 <__udivdi3+0xfc>
f01336b7:	74 0b                	je     f01336c4 <__udivdi3+0xf0>
f01336b9:	89 d8                	mov    %ebx,%eax
f01336bb:	31 ff                	xor    %edi,%edi
f01336bd:	e9 58 ff ff ff       	jmp    f013361a <__udivdi3+0x46>
f01336c2:	66 90                	xchg   %ax,%ax
f01336c4:	8b 54 24 08          	mov    0x8(%esp),%edx
f01336c8:	89 f9                	mov    %edi,%ecx
f01336ca:	d3 e2                	shl    %cl,%edx
f01336cc:	39 c2                	cmp    %eax,%edx
f01336ce:	73 e9                	jae    f01336b9 <__udivdi3+0xe5>
f01336d0:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01336d3:	31 ff                	xor    %edi,%edi
f01336d5:	e9 40 ff ff ff       	jmp    f013361a <__udivdi3+0x46>
f01336da:	66 90                	xchg   %ax,%ax
f01336dc:	31 c0                	xor    %eax,%eax
f01336de:	e9 37 ff ff ff       	jmp    f013361a <__udivdi3+0x46>
f01336e3:	90                   	nop

f01336e4 <__umoddi3>:
f01336e4:	55                   	push   %ebp
f01336e5:	57                   	push   %edi
f01336e6:	56                   	push   %esi
f01336e7:	53                   	push   %ebx
f01336e8:	83 ec 1c             	sub    $0x1c,%esp
f01336eb:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01336ef:	8b 74 24 34          	mov    0x34(%esp),%esi
f01336f3:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01336f7:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01336fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01336ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0133703:	89 f3                	mov    %esi,%ebx
f0133705:	89 fa                	mov    %edi,%edx
f0133707:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013370b:	89 34 24             	mov    %esi,(%esp)
f013370e:	85 c0                	test   %eax,%eax
f0133710:	75 1a                	jne    f013372c <__umoddi3+0x48>
f0133712:	39 f7                	cmp    %esi,%edi
f0133714:	0f 86 a2 00 00 00    	jbe    f01337bc <__umoddi3+0xd8>
f013371a:	89 c8                	mov    %ecx,%eax
f013371c:	89 f2                	mov    %esi,%edx
f013371e:	f7 f7                	div    %edi
f0133720:	89 d0                	mov    %edx,%eax
f0133722:	31 d2                	xor    %edx,%edx
f0133724:	83 c4 1c             	add    $0x1c,%esp
f0133727:	5b                   	pop    %ebx
f0133728:	5e                   	pop    %esi
f0133729:	5f                   	pop    %edi
f013372a:	5d                   	pop    %ebp
f013372b:	c3                   	ret    
f013372c:	39 f0                	cmp    %esi,%eax
f013372e:	0f 87 ac 00 00 00    	ja     f01337e0 <__umoddi3+0xfc>
f0133734:	0f bd e8             	bsr    %eax,%ebp
f0133737:	83 f5 1f             	xor    $0x1f,%ebp
f013373a:	0f 84 ac 00 00 00    	je     f01337ec <__umoddi3+0x108>
f0133740:	bf 20 00 00 00       	mov    $0x20,%edi
f0133745:	29 ef                	sub    %ebp,%edi
f0133747:	89 fe                	mov    %edi,%esi
f0133749:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f013374d:	89 e9                	mov    %ebp,%ecx
f013374f:	d3 e0                	shl    %cl,%eax
f0133751:	89 d7                	mov    %edx,%edi
f0133753:	89 f1                	mov    %esi,%ecx
f0133755:	d3 ef                	shr    %cl,%edi
f0133757:	09 c7                	or     %eax,%edi
f0133759:	89 e9                	mov    %ebp,%ecx
f013375b:	d3 e2                	shl    %cl,%edx
f013375d:	89 14 24             	mov    %edx,(%esp)
f0133760:	89 d8                	mov    %ebx,%eax
f0133762:	d3 e0                	shl    %cl,%eax
f0133764:	89 c2                	mov    %eax,%edx
f0133766:	8b 44 24 08          	mov    0x8(%esp),%eax
f013376a:	d3 e0                	shl    %cl,%eax
f013376c:	89 44 24 04          	mov    %eax,0x4(%esp)
f0133770:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133774:	89 f1                	mov    %esi,%ecx
f0133776:	d3 e8                	shr    %cl,%eax
f0133778:	09 d0                	or     %edx,%eax
f013377a:	d3 eb                	shr    %cl,%ebx
f013377c:	89 da                	mov    %ebx,%edx
f013377e:	f7 f7                	div    %edi
f0133780:	89 d3                	mov    %edx,%ebx
f0133782:	f7 24 24             	mull   (%esp)
f0133785:	89 c6                	mov    %eax,%esi
f0133787:	89 d1                	mov    %edx,%ecx
f0133789:	39 d3                	cmp    %edx,%ebx
f013378b:	0f 82 87 00 00 00    	jb     f0133818 <__umoddi3+0x134>
f0133791:	0f 84 91 00 00 00    	je     f0133828 <__umoddi3+0x144>
f0133797:	8b 54 24 04          	mov    0x4(%esp),%edx
f013379b:	29 f2                	sub    %esi,%edx
f013379d:	19 cb                	sbb    %ecx,%ebx
f013379f:	89 d8                	mov    %ebx,%eax
f01337a1:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01337a5:	d3 e0                	shl    %cl,%eax
f01337a7:	89 e9                	mov    %ebp,%ecx
f01337a9:	d3 ea                	shr    %cl,%edx
f01337ab:	09 d0                	or     %edx,%eax
f01337ad:	89 e9                	mov    %ebp,%ecx
f01337af:	d3 eb                	shr    %cl,%ebx
f01337b1:	89 da                	mov    %ebx,%edx
f01337b3:	83 c4 1c             	add    $0x1c,%esp
f01337b6:	5b                   	pop    %ebx
f01337b7:	5e                   	pop    %esi
f01337b8:	5f                   	pop    %edi
f01337b9:	5d                   	pop    %ebp
f01337ba:	c3                   	ret    
f01337bb:	90                   	nop
f01337bc:	89 fd                	mov    %edi,%ebp
f01337be:	85 ff                	test   %edi,%edi
f01337c0:	75 0b                	jne    f01337cd <__umoddi3+0xe9>
f01337c2:	b8 01 00 00 00       	mov    $0x1,%eax
f01337c7:	31 d2                	xor    %edx,%edx
f01337c9:	f7 f7                	div    %edi
f01337cb:	89 c5                	mov    %eax,%ebp
f01337cd:	89 f0                	mov    %esi,%eax
f01337cf:	31 d2                	xor    %edx,%edx
f01337d1:	f7 f5                	div    %ebp
f01337d3:	89 c8                	mov    %ecx,%eax
f01337d5:	f7 f5                	div    %ebp
f01337d7:	89 d0                	mov    %edx,%eax
f01337d9:	e9 44 ff ff ff       	jmp    f0133722 <__umoddi3+0x3e>
f01337de:	66 90                	xchg   %ax,%ax
f01337e0:	89 c8                	mov    %ecx,%eax
f01337e2:	89 f2                	mov    %esi,%edx
f01337e4:	83 c4 1c             	add    $0x1c,%esp
f01337e7:	5b                   	pop    %ebx
f01337e8:	5e                   	pop    %esi
f01337e9:	5f                   	pop    %edi
f01337ea:	5d                   	pop    %ebp
f01337eb:	c3                   	ret    
f01337ec:	3b 04 24             	cmp    (%esp),%eax
f01337ef:	72 06                	jb     f01337f7 <__umoddi3+0x113>
f01337f1:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01337f5:	77 0f                	ja     f0133806 <__umoddi3+0x122>
f01337f7:	89 f2                	mov    %esi,%edx
f01337f9:	29 f9                	sub    %edi,%ecx
f01337fb:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01337ff:	89 14 24             	mov    %edx,(%esp)
f0133802:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133806:	8b 44 24 04          	mov    0x4(%esp),%eax
f013380a:	8b 14 24             	mov    (%esp),%edx
f013380d:	83 c4 1c             	add    $0x1c,%esp
f0133810:	5b                   	pop    %ebx
f0133811:	5e                   	pop    %esi
f0133812:	5f                   	pop    %edi
f0133813:	5d                   	pop    %ebp
f0133814:	c3                   	ret    
f0133815:	8d 76 00             	lea    0x0(%esi),%esi
f0133818:	2b 04 24             	sub    (%esp),%eax
f013381b:	19 fa                	sbb    %edi,%edx
f013381d:	89 d1                	mov    %edx,%ecx
f013381f:	89 c6                	mov    %eax,%esi
f0133821:	e9 71 ff ff ff       	jmp    f0133797 <__umoddi3+0xb3>
f0133826:	66 90                	xchg   %ax,%ax
f0133828:	39 44 24 04          	cmp    %eax,0x4(%esp)
f013382c:	72 ea                	jb     f0133818 <__umoddi3+0x134>
f013382e:	89 d9                	mov    %ebx,%ecx
f0133830:	e9 62 ff ff ff       	jmp    f0133797 <__umoddi3+0xb3>
