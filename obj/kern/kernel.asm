
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 10 19 00 	lgdtl  0x191018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 0f 19 f0       	mov    $0xf0190fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 98 1e 6c f0 01 	movl   $0x1,0xf06c1e98
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 6c 1e 6c f0 01 	movl   $0x1,0xf06c1e6c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba fc 1f 6c f0       	mov    $0xf06c1ffc,%edx
f010006a:	b8 b0 8f 65 f0       	mov    $0xf0658fb0,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 b0 8f 65 f0       	push   $0xf0658fb0
f010007e:	e8 c0 09 03 00       	call   f0130a43 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 ee 0a 00 00       	call   f0100b79 <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 9d 00 00 00       	call   f010012d <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 f5 5f 00 00       	call   f010608a <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 8e 5b 00 00       	call   f0105c28 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 3c 63 00 00       	call   f01063db <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 9b d5 00 00       	call   f010d63f <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000ae:	83 ec 0c             	sub    $0xc,%esp
f01000b1:	6a 64                	push   $0x64
f01000b3:	e8 62 6e 00 00       	call   f0106f1a <create_shares_array>
f01000b8:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000bb:	83 ec 0c             	sub    $0xc,%esp
f01000be:	6a 64                	push   $0x64
f01000c0:	e8 0d d7 00 00       	call   f010d7d2 <create_semaphores_array>
f01000c5:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f01000c8:	e8 26 95 00 00       	call   f01095f3 <env_init>
	idt_init();
f01000cd:	e8 d7 aa 00 00       	call   f010aba9 <idt_init>

	enableBuffering(0);
f01000d2:	83 ec 0c             	sub    $0xc,%esp
f01000d5:	6a 00                	push   $0x0
f01000d7:	e8 70 d6 00 00       	call   f010d74c <enableBuffering>
f01000dc:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f01000df:	83 ec 0c             	sub    $0xc,%esp
f01000e2:	6a 00                	push   $0x0
f01000e4:	e8 4b d6 00 00       	call   f010d734 <enableModifiedBuffer>
f01000e9:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000ec:	83 ec 0c             	sub    $0xc,%esp
f01000ef:	68 e8 03 00 00       	push   $0x3e8
f01000f4:	e8 6b d6 00 00       	call   f010d764 <setModifiedBufferLength>
f01000f9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000fc:	e8 a1 59 00 00       	call   f0105aa2 <pic_init>
	sched_init() ;
f0100101:	e8 45 46 00 00       	call   f010474b <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100106:	83 ec 0c             	sub    $0xc,%esp
f0100109:	68 e0 2a 13 f0       	push   $0xf0132ae0
f010010e:	e8 1a 0b 00 00       	call   f0100c2d <cprintf>
f0100113:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100116:	83 ec 0c             	sub    $0xc,%esp
f0100119:	68 0c 2b 13 f0       	push   $0xf0132b0c
f010011e:	e8 0a 0b 00 00       	call   f0100c2d <cprintf>
f0100123:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100126:	e8 28 0b 00 00       	call   f0100c53 <run_command_prompt>
	}
f010012b:	eb d9                	jmp    f0100106 <FOS_initialize+0xa7>

f010012d <print_welcome_message>:
}


void print_welcome_message()
{
f010012d:	55                   	push   %ebp
f010012e:	89 e5                	mov    %esp,%ebp
f0100130:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 31 2b 13 f0       	push   $0xf0132b31
f010013b:	e8 ed 0a 00 00       	call   f0100c2d <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 38 2b 13 f0       	push   $0xf0132b38
f010014b:	e8 dd 0a 00 00       	call   f0100c2d <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 80 2b 13 f0       	push   $0xf0132b80
f010015b:	e8 cd 0a 00 00       	call   f0100c2d <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 c8 2b 13 f0       	push   $0xf0132bc8
f010016b:	e8 bd 0a 00 00       	call   f0100c2d <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100173:	83 ec 0c             	sub    $0xc,%esp
f0100176:	68 80 2b 13 f0       	push   $0xf0132b80
f010017b:	e8 ad 0a 00 00       	call   f0100c2d <cprintf>
f0100180:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100183:	83 ec 0c             	sub    $0xc,%esp
f0100186:	68 38 2b 13 f0       	push   $0xf0132b38
f010018b:	e8 9d 0a 00 00       	call   f0100c2d <cprintf>
f0100190:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100193:	83 ec 0c             	sub    $0xc,%esp
f0100196:	68 0d 2c 13 f0       	push   $0xf0132c0d
f010019b:	e8 8d 0a 00 00       	call   f0100c2d <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
}
f01001a3:	90                   	nop
f01001a4:	c9                   	leave  
f01001a5:	c3                   	ret    

f01001a6 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001a6:	55                   	push   %ebp
f01001a7:	89 e5                	mov    %esp,%ebp
f01001a9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01001af:	a3 c0 8f 65 f0       	mov    %eax,0xf0658fc0

	va_start(ap, fmt);
f01001b4:	8d 45 10             	lea    0x10(%ebp),%eax
f01001b7:	83 c0 04             	add    $0x4,%eax
f01001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001bd:	83 ec 04             	sub    $0x4,%esp
f01001c0:	ff 75 0c             	pushl  0xc(%ebp)
f01001c3:	ff 75 08             	pushl  0x8(%ebp)
f01001c6:	68 12 2c 13 f0       	push   $0xf0132c12
f01001cb:	e8 5d 0a 00 00       	call   f0100c2d <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001d6:	83 ec 08             	sub    $0x8,%esp
f01001d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001dc:	50                   	push   %eax
f01001dd:	e8 22 0a 00 00       	call   f0100c04 <vcprintf>
f01001e2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001e5:	83 ec 0c             	sub    $0xc,%esp
f01001e8:	68 2b 2c 13 f0       	push   $0xf0132c2b
f01001ed:	e8 3b 0a 00 00       	call   f0100c2d <cprintf>
f01001f2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001f5:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01001fa:	85 c0                	test   %eax,%eax
f01001fc:	74 12                	je     f0100210 <_panic+0x6a>
f01001fe:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0100203:	8b 40 54             	mov    0x54(%eax),%eax
f0100206:	83 f8 02             	cmp    $0x2,%eax
f0100209:	75 05                	jne    f0100210 <_panic+0x6a>
	{
		//2015
		env_exit();
f010020b:	e8 c8 92 00 00       	call   f01094d8 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100210:	e8 d6 43 00 00       	call   f01045eb <fos_scheduler>

f0100215 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100215:	55                   	push   %ebp
f0100216:	89 e5                	mov    %esp,%ebp
f0100218:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010021b:	8b 45 10             	mov    0x10(%ebp),%eax
f010021e:	a3 c0 8f 65 f0       	mov    %eax,0xf0658fc0

	va_start(ap, fmt);
f0100223:	8d 45 10             	lea    0x10(%ebp),%eax
f0100226:	83 c0 04             	add    $0x4,%eax
f0100229:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010022c:	83 ec 04             	sub    $0x4,%esp
f010022f:	ff 75 0c             	pushl  0xc(%ebp)
f0100232:	ff 75 08             	pushl  0x8(%ebp)
f0100235:	68 12 2c 13 f0       	push   $0xf0132c12
f010023a:	e8 ee 09 00 00       	call   f0100c2d <cprintf>
f010023f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100242:	8b 45 10             	mov    0x10(%ebp),%eax
f0100245:	83 ec 08             	sub    $0x8,%esp
f0100248:	ff 75 f4             	pushl  -0xc(%ebp)
f010024b:	50                   	push   %eax
f010024c:	e8 b3 09 00 00       	call   f0100c04 <vcprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100254:	83 ec 0c             	sub    $0xc,%esp
f0100257:	68 2b 2c 13 f0       	push   $0xf0132c2b
f010025c:	e8 cc 09 00 00       	call   f0100c2d <cprintf>
f0100261:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100264:	e8 ec 50 00 00       	call   f0105355 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100269:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010026e:	85 c0                	test   %eax,%eax
f0100270:	74 14                	je     f0100286 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100272:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0100277:	8b 40 4c             	mov    0x4c(%eax),%eax
f010027a:	83 ec 0c             	sub    $0xc,%esp
f010027d:	50                   	push   %eax
f010027e:	e8 92 4e 00 00       	call   f0105115 <sched_exit_env>
f0100283:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100286:	e8 60 43 00 00       	call   f01045eb <fos_scheduler>

f010028b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010028b:	55                   	push   %ebp
f010028c:	89 e5                	mov    %esp,%ebp
f010028e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100291:	8b 45 10             	mov    0x10(%ebp),%eax
f0100294:	a3 c0 8f 65 f0       	mov    %eax,0xf0658fc0

	va_start(ap, fmt);
f0100299:	8d 45 10             	lea    0x10(%ebp),%eax
f010029c:	83 c0 04             	add    $0x4,%eax
f010029f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002a2:	83 ec 04             	sub    $0x4,%esp
f01002a5:	ff 75 0c             	pushl  0xc(%ebp)
f01002a8:	ff 75 08             	pushl  0x8(%ebp)
f01002ab:	68 12 2c 13 f0       	push   $0xf0132c12
f01002b0:	e8 78 09 00 00       	call   f0100c2d <cprintf>
f01002b5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002b8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002bb:	83 ec 08             	sub    $0x8,%esp
f01002be:	ff 75 f4             	pushl  -0xc(%ebp)
f01002c1:	50                   	push   %eax
f01002c2:	e8 3d 09 00 00       	call   f0100c04 <vcprintf>
f01002c7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002ca:	83 ec 0c             	sub    $0xc,%esp
f01002cd:	68 2b 2c 13 f0       	push   $0xf0132c2b
f01002d2:	e8 56 09 00 00       	call   f0100c2d <cprintf>
f01002d7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002da:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01002df:	85 c0                	test   %eax,%eax
f01002e1:	74 28                	je     f010030b <_panic_into_prompt+0x80>
f01002e3:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01002e8:	8b 40 54             	mov    0x54(%eax),%eax
f01002eb:	83 f8 02             	cmp    $0x2,%eax
f01002ee:	75 1b                	jne    f010030b <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002f0:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01002f5:	83 ec 0c             	sub    $0xc,%esp
f01002f8:	50                   	push   %eax
f01002f9:	e8 c7 46 00 00       	call   f01049c5 <sched_insert_exit>
f01002fe:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100301:	c7 05 14 92 65 f0 00 	movl   $0x0,0xf0659214
f0100308:	00 00 00 
	}

	lcr3(phys_page_directory);
f010030b:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f0100310:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100313:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100316:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100319:	c7 05 94 1e 6c f0 00 	movl   $0x0,0xf06c1e94
f0100320:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100323:	83 ec 0c             	sub    $0xc,%esp
f0100326:	6a 00                	push   $0x0
f0100328:	e8 26 09 00 00       	call   f0100c53 <run_command_prompt>
f010032d:	83 c4 10             	add    $0x10,%esp
f0100330:	eb f1                	jmp    f0100323 <_panic_into_prompt+0x98>

f0100332 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100332:	55                   	push   %ebp
f0100333:	89 e5                	mov    %esp,%ebp
f0100335:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100338:	8d 45 10             	lea    0x10(%ebp),%eax
f010033b:	83 c0 04             	add    $0x4,%eax
f010033e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100341:	83 ec 04             	sub    $0x4,%esp
f0100344:	ff 75 0c             	pushl  0xc(%ebp)
f0100347:	ff 75 08             	pushl  0x8(%ebp)
f010034a:	68 2d 2c 13 f0       	push   $0xf0132c2d
f010034f:	e8 d9 08 00 00       	call   f0100c2d <cprintf>
f0100354:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100357:	8b 45 10             	mov    0x10(%ebp),%eax
f010035a:	83 ec 08             	sub    $0x8,%esp
f010035d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100360:	50                   	push   %eax
f0100361:	e8 9e 08 00 00       	call   f0100c04 <vcprintf>
f0100366:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100369:	83 ec 0c             	sub    $0xc,%esp
f010036c:	68 2b 2c 13 f0       	push   $0xf0132c2b
f0100371:	e8 b7 08 00 00       	call   f0100c2d <cprintf>
f0100376:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100379:	90                   	nop
f010037a:	c9                   	leave  
f010037b:	c3                   	ret    

f010037c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010037c:	55                   	push   %ebp
f010037d:	89 e5                	mov    %esp,%ebp
f010037f:	83 ec 10             	sub    $0x10,%esp
f0100382:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100389:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010038c:	89 c2                	mov    %eax,%edx
f010038e:	ec                   	in     (%dx),%al
f010038f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100392:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100395:	0f b6 c0             	movzbl %al,%eax
f0100398:	83 e0 01             	and    $0x1,%eax
f010039b:	85 c0                	test   %eax,%eax
f010039d:	75 07                	jne    f01003a6 <serial_proc_data+0x2a>
		return -1;
f010039f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003a4:	eb 16                	jmp    f01003bc <serial_proc_data+0x40>
f01003a6:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01003b0:	89 c2                	mov    %eax,%edx
f01003b2:	ec                   	in     (%dx),%al
f01003b3:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003b6:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003b9:	0f b6 c0             	movzbl %al,%eax
}
f01003bc:	c9                   	leave  
f01003bd:	c3                   	ret    

f01003be <serial_intr>:

void
serial_intr(void)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003c4:	a1 e0 8f 65 f0       	mov    0xf0658fe0,%eax
f01003c9:	85 c0                	test   %eax,%eax
f01003cb:	74 10                	je     f01003dd <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003cd:	83 ec 0c             	sub    $0xc,%esp
f01003d0:	68 7c 03 10 f0       	push   $0xf010037c
f01003d5:	e8 e4 05 00 00       	call   f01009be <cons_intr>
f01003da:	83 c4 10             	add    $0x10,%esp
}
f01003dd:	90                   	nop
f01003de:	c9                   	leave  
f01003df:	c3                   	ret    

f01003e0 <serial_init>:

void
serial_init(void)
{
f01003e0:	55                   	push   %ebp
f01003e1:	89 e5                	mov    %esp,%ebp
f01003e3:	83 ec 40             	sub    $0x40,%esp
f01003e6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003ed:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003f1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003f7:	ee                   	out    %al,(%dx)
f01003f8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ff:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100403:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100406:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100409:	ee                   	out    %al,(%dx)
f010040a:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100411:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100415:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010041b:	ee                   	out    %al,(%dx)
f010041c:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100423:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100427:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010042d:	ee                   	out    %al,(%dx)
f010042e:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100435:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100439:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010043c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010043f:	ee                   	out    %al,(%dx)
f0100440:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100447:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010044b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010044e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100451:	ee                   	out    %al,(%dx)
f0100452:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100459:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010045d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100460:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100463:	ee                   	out    %al,(%dx)
f0100464:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100474:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100477:	3c ff                	cmp    $0xff,%al
f0100479:	0f 95 c0             	setne  %al
f010047c:	0f b6 c0             	movzbl %al,%eax
f010047f:	a3 e0 8f 65 f0       	mov    %eax,0xf0658fe0
f0100484:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010048e:	89 c2                	mov    %eax,%edx
f0100490:	ec                   	in     (%dx),%al
f0100491:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100494:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010049b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010049e:	89 c2                	mov    %eax,%edx
f01004a0:	ec                   	in     (%dx),%al
f01004a1:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004a4:	90                   	nop
f01004a5:	c9                   	leave  
f01004a6:	c3                   	ret    

f01004a7 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004a7:	55                   	push   %ebp
f01004a8:	89 e5                	mov    %esp,%ebp
f01004aa:	83 ec 20             	sub    $0x20,%esp
f01004ad:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004bd:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004c7:	89 c2                	mov    %eax,%edx
f01004c9:	ec                   	in     (%dx),%al
f01004ca:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004cd:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004d7:	89 c2                	mov    %eax,%edx
f01004d9:	ec                   	in     (%dx),%al
f01004da:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004dd:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004e7:	89 c2                	mov    %eax,%edx
f01004e9:	ec                   	in     (%dx),%al
f01004ea:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004ed:	90                   	nop
f01004ee:	c9                   	leave  
f01004ef:	c3                   	ret    

f01004f0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004f0:	55                   	push   %ebp
f01004f1:	89 e5                	mov    %esp,%ebp
f01004f3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004fd:	eb 08                	jmp    f0100507 <lpt_putc+0x17>
		delay();
f01004ff:	e8 a3 ff ff ff       	call   f01004a7 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100504:	ff 45 fc             	incl   -0x4(%ebp)
f0100507:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010050e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100517:	8a 45 eb             	mov    -0x15(%ebp),%al
f010051a:	84 c0                	test   %al,%al
f010051c:	78 09                	js     f0100527 <lpt_putc+0x37>
f010051e:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100525:	7e d8                	jle    f01004ff <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100527:	8b 45 08             	mov    0x8(%ebp),%eax
f010052a:	0f b6 c0             	movzbl %al,%eax
f010052d:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100534:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100537:	8a 45 e8             	mov    -0x18(%ebp),%al
f010053a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010053d:	ee                   	out    %al,(%dx)
f010053e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100545:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100549:	8a 45 e9             	mov    -0x17(%ebp),%al
f010054c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010054f:	ee                   	out    %al,(%dx)
f0100550:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100557:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010055b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010055e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100561:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010056b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100572:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100575:	66 8b 00             	mov    (%eax),%ax
f0100578:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010057c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010057f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100584:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100587:	66 8b 00             	mov    (%eax),%ax
f010058a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010058e:	74 13                	je     f01005a3 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100590:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100597:	c7 05 e4 8f 65 f0 b4 	movl   $0x3b4,0xf0658fe4
f010059e:	03 00 00 
f01005a1:	eb 14                	jmp    f01005b7 <cga_init+0x52>
	} else {
		*cp = was;
f01005a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005a6:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005aa:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01005ad:	c7 05 e4 8f 65 f0 d4 	movl   $0x3d4,0xf0658fe4
f01005b4:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005b7:	a1 e4 8f 65 f0       	mov    0xf0658fe4,%eax
f01005bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005bf:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005c3:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005ca:	a1 e4 8f 65 f0       	mov    0xf0658fe4,%eax
f01005cf:	40                   	inc    %eax
f01005d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005d6:	89 c2                	mov    %eax,%edx
f01005d8:	ec                   	in     (%dx),%al
f01005d9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005dc:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005df:	0f b6 c0             	movzbl %al,%eax
f01005e2:	c1 e0 08             	shl    $0x8,%eax
f01005e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005e8:	a1 e4 8f 65 f0       	mov    0xf0658fe4,%eax
f01005ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005f0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005f4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005fa:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005fb:	a1 e4 8f 65 f0       	mov    0xf0658fe4,%eax
f0100600:	40                   	inc    %eax
f0100601:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100604:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100607:	89 c2                	mov    %eax,%edx
f0100609:	ec                   	in     (%dx),%al
f010060a:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f010060d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100610:	0f b6 c0             	movzbl %al,%eax
f0100613:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100616:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100619:	a3 e8 8f 65 f0       	mov    %eax,0xf0658fe8
	crt_pos = pos;
f010061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100621:	66 a3 ec 8f 65 f0    	mov    %ax,0xf0658fec
}
f0100627:	90                   	nop
f0100628:	c9                   	leave  
f0100629:	c3                   	ret    

f010062a <cga_putc>:



void
cga_putc(int c)
{
f010062a:	55                   	push   %ebp
f010062b:	89 e5                	mov    %esp,%ebp
f010062d:	53                   	push   %ebx
f010062e:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100631:	8b 45 08             	mov    0x8(%ebp),%eax
f0100634:	b0 00                	mov    $0x0,%al
f0100636:	85 c0                	test   %eax,%eax
f0100638:	75 07                	jne    f0100641 <cga_putc+0x17>
		c |= 0x0700;
f010063a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100641:	8b 45 08             	mov    0x8(%ebp),%eax
f0100644:	0f b6 c0             	movzbl %al,%eax
f0100647:	83 f8 09             	cmp    $0x9,%eax
f010064a:	0f 84 94 00 00 00    	je     f01006e4 <cga_putc+0xba>
f0100650:	83 f8 09             	cmp    $0x9,%eax
f0100653:	7f 0a                	jg     f010065f <cga_putc+0x35>
f0100655:	83 f8 08             	cmp    $0x8,%eax
f0100658:	74 14                	je     f010066e <cga_putc+0x44>
f010065a:	e9 c8 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
f010065f:	83 f8 0a             	cmp    $0xa,%eax
f0100662:	74 49                	je     f01006ad <cga_putc+0x83>
f0100664:	83 f8 0d             	cmp    $0xd,%eax
f0100667:	74 53                	je     f01006bc <cga_putc+0x92>
f0100669:	e9 b9 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010066e:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f0100674:	66 85 c0             	test   %ax,%ax
f0100677:	0f 84 d0 00 00 00    	je     f010074d <cga_putc+0x123>
			crt_pos--;
f010067d:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f0100683:	48                   	dec    %eax
f0100684:	66 a3 ec 8f 65 f0    	mov    %ax,0xf0658fec
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068a:	8b 15 e8 8f 65 f0    	mov    0xf0658fe8,%edx
f0100690:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f0100696:	0f b7 c0             	movzwl %ax,%eax
f0100699:	01 c0                	add    %eax,%eax
f010069b:	01 c2                	add    %eax,%edx
f010069d:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a0:	b0 00                	mov    $0x0,%al
f01006a2:	83 c8 20             	or     $0x20,%eax
f01006a5:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006a8:	e9 a0 00 00 00       	jmp    f010074d <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f01006ad:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f01006b3:	83 c0 50             	add    $0x50,%eax
f01006b6:	66 a3 ec 8f 65 f0    	mov    %ax,0xf0658fec
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006bc:	66 8b 0d ec 8f 65 f0 	mov    0xf0658fec,%cx
f01006c3:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f01006c9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01006d3:	66 f7 f3             	div    %bx
f01006d6:	89 d0                	mov    %edx,%eax
f01006d8:	29 c1                	sub    %eax,%ecx
f01006da:	89 c8                	mov    %ecx,%eax
f01006dc:	66 a3 ec 8f 65 f0    	mov    %ax,0xf0658fec
		break;
f01006e2:	eb 6a                	jmp    f010074e <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 69 04 00 00       	call   f0100b57 <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 5c 04 00 00       	call   f0100b57 <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 4f 04 00 00       	call   f0100b57 <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 42 04 00 00       	call   f0100b57 <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100718:	83 ec 0c             	sub    $0xc,%esp
f010071b:	6a 20                	push   $0x20
f010071d:	e8 35 04 00 00       	call   f0100b57 <cons_putc>
f0100722:	83 c4 10             	add    $0x10,%esp
		break;
f0100725:	eb 27                	jmp    f010074e <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100727:	8b 0d e8 8f 65 f0    	mov    0xf0658fe8,%ecx
f010072d:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f0100733:	8d 50 01             	lea    0x1(%eax),%edx
f0100736:	66 89 15 ec 8f 65 f0 	mov    %dx,0xf0658fec
f010073d:	0f b7 c0             	movzwl %ax,%eax
f0100740:	01 c0                	add    %eax,%eax
f0100742:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100745:	8b 45 08             	mov    0x8(%ebp),%eax
f0100748:	66 89 02             	mov    %ax,(%edx)
		break;
f010074b:	eb 01                	jmp    f010074e <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010074d:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010074e:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f0100754:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100758:	76 58                	jbe    f01007b2 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010075a:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f010075f:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100765:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f010076a:	83 ec 04             	sub    $0x4,%esp
f010076d:	68 00 0f 00 00       	push   $0xf00
f0100772:	52                   	push   %edx
f0100773:	50                   	push   %eax
f0100774:	e8 fa 02 03 00       	call   f0130a73 <memcpy>
f0100779:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010077c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100783:	eb 15                	jmp    f010079a <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100785:	8b 15 e8 8f 65 f0    	mov    0xf0658fe8,%edx
f010078b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010078e:	01 c0                	add    %eax,%eax
f0100790:	01 d0                	add    %edx,%eax
f0100792:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100797:	ff 45 f4             	incl   -0xc(%ebp)
f010079a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007a1:	7e e2                	jle    f0100785 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007a3:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f01007a9:	83 e8 50             	sub    $0x50,%eax
f01007ac:	66 a3 ec 8f 65 f0    	mov    %ax,0xf0658fec
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01007b2:	a1 e4 8f 65 f0       	mov    0xf0658fe4,%eax
f01007b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01007ba:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007be:	8a 45 e0             	mov    -0x20(%ebp),%al
f01007c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01007c4:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01007c5:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f01007cb:	66 c1 e8 08          	shr    $0x8,%ax
f01007cf:	0f b6 c0             	movzbl %al,%eax
f01007d2:	8b 15 e4 8f 65 f0    	mov    0xf0658fe4,%edx
f01007d8:	42                   	inc    %edx
f01007d9:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01007dc:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01007df:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01007e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01007e5:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01007e6:	a1 e4 8f 65 f0       	mov    0xf0658fe4,%eax
f01007eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007ee:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01007f2:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007f8:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01007f9:	66 a1 ec 8f 65 f0    	mov    0xf0658fec,%ax
f01007ff:	0f b6 c0             	movzbl %al,%eax
f0100802:	8b 15 e4 8f 65 f0    	mov    0xf0658fe4,%edx
f0100808:	42                   	inc    %edx
f0100809:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010080c:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010080f:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100815:	ee                   	out    %al,(%dx)
}
f0100816:	90                   	nop
f0100817:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010081a:	c9                   	leave  
f010081b:	c3                   	ret    

f010081c <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010081c:	55                   	push   %ebp
f010081d:	89 e5                	mov    %esp,%ebp
f010081f:	83 ec 28             	sub    $0x28,%esp
f0100822:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010082c:	89 c2                	mov    %eax,%edx
f010082e:	ec                   	in     (%dx),%al
f010082f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100832:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100835:	0f b6 c0             	movzbl %al,%eax
f0100838:	83 e0 01             	and    $0x1,%eax
f010083b:	85 c0                	test   %eax,%eax
f010083d:	75 0a                	jne    f0100849 <kbd_proc_data+0x2d>
		return -1;
f010083f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100844:	e9 54 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
f0100849:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100850:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100853:	89 c2                	mov    %eax,%edx
f0100855:	ec                   	in     (%dx),%al
f0100856:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f0100859:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010085c:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f010085f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100863:	75 17                	jne    f010087c <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100865:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f010086a:	83 c8 40             	or     $0x40,%eax
f010086d:	a3 08 92 65 f0       	mov    %eax,0xf0659208
		return 0;
f0100872:	b8 00 00 00 00       	mov    $0x0,%eax
f0100877:	e9 21 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010087c:	8a 45 f3             	mov    -0xd(%ebp),%al
f010087f:	84 c0                	test   %al,%al
f0100881:	79 44                	jns    f01008c7 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100883:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f0100888:	83 e0 40             	and    $0x40,%eax
f010088b:	85 c0                	test   %eax,%eax
f010088d:	75 08                	jne    f0100897 <kbd_proc_data+0x7b>
f010088f:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100892:	83 e0 7f             	and    $0x7f,%eax
f0100895:	eb 03                	jmp    f010089a <kbd_proc_data+0x7e>
f0100897:	8a 45 f3             	mov    -0xd(%ebp),%al
f010089a:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010089d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008a1:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f01008a7:	83 c8 40             	or     $0x40,%eax
f01008aa:	0f b6 c0             	movzbl %al,%eax
f01008ad:	f7 d0                	not    %eax
f01008af:	89 c2                	mov    %eax,%edx
f01008b1:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f01008b6:	21 d0                	and    %edx,%eax
f01008b8:	a3 08 92 65 f0       	mov    %eax,0xf0659208
		return 0;
f01008bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01008c2:	e9 d6 00 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01008c7:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f01008cc:	83 e0 40             	and    $0x40,%eax
f01008cf:	85 c0                	test   %eax,%eax
f01008d1:	74 11                	je     f01008e4 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01008d3:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01008d7:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f01008dc:	83 e0 bf             	and    $0xffffffbf,%eax
f01008df:	a3 08 92 65 f0       	mov    %eax,0xf0659208
	}

	shift |= shiftcode[data];
f01008e4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008e8:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f01008ee:	0f b6 d0             	movzbl %al,%edx
f01008f1:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f01008f6:	09 d0                	or     %edx,%eax
f01008f8:	a3 08 92 65 f0       	mov    %eax,0xf0659208
	shift ^= togglecode[data];
f01008fd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100901:	8a 80 20 11 19 f0    	mov    -0xfe6eee0(%eax),%al
f0100907:	0f b6 d0             	movzbl %al,%edx
f010090a:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f010090f:	31 d0                	xor    %edx,%eax
f0100911:	a3 08 92 65 f0       	mov    %eax,0xf0659208

	c = charcode[shift & (CTL | SHIFT)][data];
f0100916:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f010091b:	83 e0 03             	and    $0x3,%eax
f010091e:	8b 14 85 20 15 19 f0 	mov    -0xfe6eae0(,%eax,4),%edx
f0100925:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100929:	01 d0                	add    %edx,%eax
f010092b:	8a 00                	mov    (%eax),%al
f010092d:	0f b6 c0             	movzbl %al,%eax
f0100930:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100933:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f0100938:	83 e0 08             	and    $0x8,%eax
f010093b:	85 c0                	test   %eax,%eax
f010093d:	74 22                	je     f0100961 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f010093f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100943:	7e 0c                	jle    f0100951 <kbd_proc_data+0x135>
f0100945:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100949:	7f 06                	jg     f0100951 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f010094b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f010094f:	eb 10                	jmp    f0100961 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100951:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100955:	7e 0a                	jle    f0100961 <kbd_proc_data+0x145>
f0100957:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f010095b:	7f 04                	jg     f0100961 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f010095d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100961:	a1 08 92 65 f0       	mov    0xf0659208,%eax
f0100966:	f7 d0                	not    %eax
f0100968:	83 e0 06             	and    $0x6,%eax
f010096b:	85 c0                	test   %eax,%eax
f010096d:	75 2b                	jne    f010099a <kbd_proc_data+0x17e>
f010096f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100976:	75 22                	jne    f010099a <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100978:	83 ec 0c             	sub    $0xc,%esp
f010097b:	68 48 2c 13 f0       	push   $0xf0132c48
f0100980:	e8 a8 02 00 00       	call   f0100c2d <cprintf>
f0100985:	83 c4 10             	add    $0x10,%esp
f0100988:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f010098f:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100993:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100996:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100999:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f010099a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010099d:	c9                   	leave  
f010099e:	c3                   	ret    

f010099f <kbd_intr>:

void
kbd_intr(void)
{
f010099f:	55                   	push   %ebp
f01009a0:	89 e5                	mov    %esp,%ebp
f01009a2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009a5:	83 ec 0c             	sub    $0xc,%esp
f01009a8:	68 1c 08 10 f0       	push   $0xf010081c
f01009ad:	e8 0c 00 00 00       	call   f01009be <cons_intr>
f01009b2:	83 c4 10             	add    $0x10,%esp
}
f01009b5:	90                   	nop
f01009b6:	c9                   	leave  
f01009b7:	c3                   	ret    

f01009b8 <kbd_init>:

void
kbd_init(void)
{
f01009b8:	55                   	push   %ebp
f01009b9:	89 e5                	mov    %esp,%ebp
}
f01009bb:	90                   	nop
f01009bc:	5d                   	pop    %ebp
f01009bd:	c3                   	ret    

f01009be <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f01009be:	55                   	push   %ebp
f01009bf:	89 e5                	mov    %esp,%ebp
f01009c1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f01009c4:	eb 35                	jmp    f01009fb <cons_intr+0x3d>
		if (c == 0)
f01009c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01009ca:	75 02                	jne    f01009ce <cons_intr+0x10>
			continue;
f01009cc:	eb 2d                	jmp    f01009fb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f01009ce:	a1 04 92 65 f0       	mov    0xf0659204,%eax
f01009d3:	8d 50 01             	lea    0x1(%eax),%edx
f01009d6:	89 15 04 92 65 f0    	mov    %edx,0xf0659204
f01009dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01009df:	88 90 00 90 65 f0    	mov    %dl,-0xf9a7000(%eax)
		if (cons.wpos == CONSBUFSIZE)
f01009e5:	a1 04 92 65 f0       	mov    0xf0659204,%eax
f01009ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f01009ef:	75 0a                	jne    f01009fb <cons_intr+0x3d>
			cons.wpos = 0;
f01009f1:	c7 05 04 92 65 f0 00 	movl   $0x0,0xf0659204
f01009f8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f01009fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01009fe:	ff d0                	call   *%eax
f0100a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a07:	75 bd                	jne    f01009c6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a09:	90                   	nop
f0100a0a:	c9                   	leave  
f0100a0b:	c3                   	ret    

f0100a0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a0c:	55                   	push   %ebp
f0100a0d:	89 e5                	mov    %esp,%ebp
f0100a0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a12:	e8 a7 f9 ff ff       	call   f01003be <serial_intr>
	kbd_intr();
f0100a17:	e8 83 ff ff ff       	call   f010099f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a1c:	8b 15 00 92 65 f0    	mov    0xf0659200,%edx
f0100a22:	a1 04 92 65 f0       	mov    0xf0659204,%eax
f0100a27:	39 c2                	cmp    %eax,%edx
f0100a29:	74 35                	je     f0100a60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a2b:	a1 00 92 65 f0       	mov    0xf0659200,%eax
f0100a30:	8d 50 01             	lea    0x1(%eax),%edx
f0100a33:	89 15 00 92 65 f0    	mov    %edx,0xf0659200
f0100a39:	8a 80 00 90 65 f0    	mov    -0xf9a7000(%eax),%al
f0100a3f:	0f b6 c0             	movzbl %al,%eax
f0100a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a45:	a1 00 92 65 f0       	mov    0xf0659200,%eax
f0100a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a4f:	75 0a                	jne    f0100a5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100a51:	c7 05 00 92 65 f0 00 	movl   $0x0,0xf0659200
f0100a58:	00 00 00 
		return c;
f0100a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a5e:	eb 05                	jmp    f0100a65 <cons_getc+0x59>
	}
	return 0;
f0100a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100a65:	c9                   	leave  
f0100a66:	c3                   	ret    

f0100a67 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100a67:	55                   	push   %ebp
f0100a68:	89 e5                	mov    %esp,%ebp
f0100a6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100a6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100a74:	a1 e0 8f 65 f0       	mov    0xf0658fe0,%eax
f0100a79:	85 c0                	test   %eax,%eax
f0100a7b:	74 41                	je     f0100abe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100a7d:	e8 fa f8 ff ff       	call   f010037c <serial_proc_data>
f0100a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a89:	74 33                	je     f0100abe <cons_getc2+0x57>
				if (c1 == 0)
f0100a8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a8f:	74 2d                	je     f0100abe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100a91:	a1 04 92 65 f0       	mov    0xf0659204,%eax
f0100a96:	8d 50 01             	lea    0x1(%eax),%edx
f0100a99:	89 15 04 92 65 f0    	mov    %edx,0xf0659204
f0100a9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100aa2:	88 90 00 90 65 f0    	mov    %dl,-0xf9a7000(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100aa8:	a1 04 92 65 f0       	mov    0xf0659204,%eax
f0100aad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ab2:	75 0a                	jne    f0100abe <cons_getc2+0x57>
						cons.wpos = 0;
f0100ab4:	c7 05 04 92 65 f0 00 	movl   $0x0,0xf0659204
f0100abb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ac5:	e8 52 fd ff ff       	call   f010081c <kbd_proc_data>
f0100aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100acd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100ad1:	74 33                	je     f0100b06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100ad3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100ad7:	74 2d                	je     f0100b06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100ad9:	a1 04 92 65 f0       	mov    0xf0659204,%eax
f0100ade:	8d 50 01             	lea    0x1(%eax),%edx
f0100ae1:	89 15 04 92 65 f0    	mov    %edx,0xf0659204
f0100ae7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100aea:	88 90 00 90 65 f0    	mov    %dl,-0xf9a7000(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100af0:	a1 04 92 65 f0       	mov    0xf0659204,%eax
f0100af5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100afa:	75 0a                	jne    f0100b06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100afc:	c7 05 04 92 65 f0 00 	movl   $0x0,0xf0659204
f0100b03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b0a:	7e 44                	jle    f0100b50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b0c:	8b 15 00 92 65 f0    	mov    0xf0659200,%edx
f0100b12:	a1 04 92 65 f0       	mov    0xf0659204,%eax
f0100b17:	39 c2                	cmp    %eax,%edx
f0100b19:	74 35                	je     f0100b50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b1b:	a1 00 92 65 f0       	mov    0xf0659200,%eax
f0100b20:	8d 50 01             	lea    0x1(%eax),%edx
f0100b23:	89 15 00 92 65 f0    	mov    %edx,0xf0659200
f0100b29:	8a 80 00 90 65 f0    	mov    -0xf9a7000(%eax),%al
f0100b2f:	0f b6 c0             	movzbl %al,%eax
f0100b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b35:	a1 00 92 65 f0       	mov    0xf0659200,%eax
f0100b3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b3f:	75 0a                	jne    f0100b4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b41:	c7 05 00 92 65 f0 00 	movl   $0x0,0xf0659200
f0100b48:	00 00 00 
			return c;
f0100b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100b4e:	eb 05                	jmp    f0100b55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100b50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b55:	c9                   	leave  
f0100b56:	c3                   	ret    

f0100b57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100b57:	55                   	push   %ebp
f0100b58:	89 e5                	mov    %esp,%ebp
f0100b5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100b5d:	ff 75 08             	pushl  0x8(%ebp)
f0100b60:	e8 8b f9 ff ff       	call   f01004f0 <lpt_putc>
f0100b65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100b68:	83 ec 0c             	sub    $0xc,%esp
f0100b6b:	ff 75 08             	pushl  0x8(%ebp)
f0100b6e:	e8 b7 fa ff ff       	call   f010062a <cga_putc>
f0100b73:	83 c4 10             	add    $0x10,%esp
}
f0100b76:	90                   	nop
f0100b77:	c9                   	leave  
f0100b78:	c3                   	ret    

f0100b79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100b79:	55                   	push   %ebp
f0100b7a:	89 e5                	mov    %esp,%ebp
f0100b7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100b7f:	e8 e1 f9 ff ff       	call   f0100565 <cga_init>
	kbd_init();
f0100b84:	e8 2f fe ff ff       	call   f01009b8 <kbd_init>
	serial_init();
f0100b89:	e8 52 f8 ff ff       	call   f01003e0 <serial_init>

	if (!serial_exists)
f0100b8e:	a1 e0 8f 65 f0       	mov    0xf0658fe0,%eax
f0100b93:	85 c0                	test   %eax,%eax
f0100b95:	75 10                	jne    f0100ba7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100b97:	83 ec 0c             	sub    $0xc,%esp
f0100b9a:	68 54 2c 13 f0       	push   $0xf0132c54
f0100b9f:	e8 89 00 00 00       	call   f0100c2d <cprintf>
f0100ba4:	83 c4 10             	add    $0x10,%esp
}
f0100ba7:	90                   	nop
f0100ba8:	c9                   	leave  
f0100ba9:	c3                   	ret    

f0100baa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100baa:	55                   	push   %ebp
f0100bab:	89 e5                	mov    %esp,%ebp
f0100bad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100bb0:	83 ec 0c             	sub    $0xc,%esp
f0100bb3:	ff 75 08             	pushl  0x8(%ebp)
f0100bb6:	e8 9c ff ff ff       	call   f0100b57 <cons_putc>
f0100bbb:	83 c4 10             	add    $0x10,%esp
}
f0100bbe:	90                   	nop
f0100bbf:	c9                   	leave  
f0100bc0:	c3                   	ret    

f0100bc1 <getchar>:

int
getchar(void)
{
f0100bc1:	55                   	push   %ebp
f0100bc2:	89 e5                	mov    %esp,%ebp
f0100bc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100bc7:	e8 40 fe ff ff       	call   f0100a0c <cons_getc>
f0100bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 f2                	je     f0100bc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100bd8:	c9                   	leave  
f0100bd9:	c3                   	ret    

f0100bda <iscons>:

int
iscons(int fdnum)
{
f0100bda:	55                   	push   %ebp
f0100bdb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100bdd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100be2:	5d                   	pop    %ebp
f0100be3:	c3                   	ret    

f0100be4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100be4:	55                   	push   %ebp
f0100be5:	89 e5                	mov    %esp,%ebp
f0100be7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100bea:	83 ec 0c             	sub    $0xc,%esp
f0100bed:	ff 75 08             	pushl  0x8(%ebp)
f0100bf0:	e8 b5 ff ff ff       	call   f0100baa <cputchar>
f0100bf5:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100bfb:	83 c0 04             	add    $0x4,%eax
f0100bfe:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c01:	90                   	nop
f0100c02:	c9                   	leave  
f0100c03:	c3                   	ret    

f0100c04 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c04:	55                   	push   %ebp
f0100c05:	89 e5                	mov    %esp,%ebp
f0100c07:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c11:	ff 75 0c             	pushl  0xc(%ebp)
f0100c14:	ff 75 08             	pushl  0x8(%ebp)
f0100c17:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c1a:	50                   	push   %eax
f0100c1b:	68 e4 0b 10 f0       	push   $0xf0100be4
f0100c20:	e8 82 f5 02 00       	call   f01301a7 <vprintfmt>
f0100c25:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2b:	c9                   	leave  
f0100c2c:	c3                   	ret    

f0100c2d <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c2d:	55                   	push   %ebp
f0100c2e:	89 e5                	mov    %esp,%ebp
f0100c30:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c33:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c3c:	83 ec 08             	sub    $0x8,%esp
f0100c3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c42:	50                   	push   %eax
f0100c43:	e8 bc ff ff ff       	call   f0100c04 <vcprintf>
f0100c48:	83 c4 10             	add    $0x10,%esp
f0100c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100c51:	c9                   	leave  
f0100c52:	c3                   	ret    

f0100c53 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100c53:	55                   	push   %ebp
f0100c54:	89 e5                	mov    %esp,%ebp
f0100c56:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100c5c:	83 ec 08             	sub    $0x8,%esp
f0100c5f:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c65:	50                   	push   %eax
f0100c66:	68 71 2c 13 f0       	push   $0xf0132c71
f0100c6b:	e8 df f9 02 00       	call   f013064f <readline>
f0100c70:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100c73:	83 ec 0c             	sub    $0xc,%esp
f0100c76:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c7c:	50                   	push   %eax
f0100c7d:	e8 0d 00 00 00       	call   f0100c8f <execute_command>
f0100c82:	83 c4 10             	add    $0x10,%esp
f0100c85:	85 c0                	test   %eax,%eax
f0100c87:	78 02                	js     f0100c8b <run_command_prompt+0x38>
				break;
	}
f0100c89:	eb d1                	jmp    f0100c5c <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100c8b:	90                   	nop
	}
}
f0100c8c:	90                   	nop
f0100c8d:	c9                   	leave  
f0100c8e:	c3                   	ret    

f0100c8f <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100c8f:	55                   	push   %ebp
f0100c90:	89 e5                	mov    %esp,%ebp
f0100c92:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100c98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100c9b:	50                   	push   %eax
f0100c9c:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100c9f:	50                   	push   %eax
f0100ca0:	68 77 2c 13 f0       	push   $0xf0132c77
f0100ca5:	ff 75 08             	pushl  0x8(%ebp)
f0100ca8:	e8 dc 01 03 00       	call   f0130e89 <strsplit>
f0100cad:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100cb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100cb3:	85 c0                	test   %eax,%eax
f0100cb5:	75 0a                	jne    f0100cc1 <execute_command+0x32>
		return 0;
f0100cb7:	b8 00 00 00 00       	mov    $0x0,%eax
f0100cbc:	e9 37 01 00 00       	jmp    f0100df8 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100cc8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100ccf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100cd6:	e9 8c 00 00 00       	jmp    f0100d67 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100cdb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cde:	89 d0                	mov    %edx,%eax
f0100ce0:	01 c0                	add    %eax,%eax
f0100ce2:	01 d0                	add    %edx,%eax
f0100ce4:	c1 e0 02             	shl    $0x2,%eax
f0100ce7:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100cec:	8b 10                	mov    (%eax),%edx
f0100cee:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100cf1:	83 ec 08             	sub    $0x8,%esp
f0100cf4:	52                   	push   %edx
f0100cf5:	50                   	push   %eax
f0100cf6:	e8 66 fc 02 00       	call   f0130961 <strcmp>
f0100cfb:	83 c4 10             	add    $0x10,%esp
f0100cfe:	85 c0                	test   %eax,%eax
f0100d00:	75 09                	jne    f0100d0b <execute_command+0x7c>
		{
			command_found = 1;
f0100d02:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d09:	eb 6c                	jmp    f0100d77 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d0e:	83 ec 0c             	sub    $0xc,%esp
f0100d11:	50                   	push   %eax
f0100d12:	e8 3e fb 02 00       	call   f0130855 <strlen>
f0100d17:	83 c4 10             	add    $0x10,%esp
f0100d1a:	89 c1                	mov    %eax,%ecx
f0100d1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d1f:	89 d0                	mov    %edx,%eax
f0100d21:	01 c0                	add    %eax,%eax
f0100d23:	01 d0                	add    %edx,%eax
f0100d25:	c1 e0 02             	shl    $0x2,%eax
f0100d28:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d2d:	8b 10                	mov    (%eax),%edx
f0100d2f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d32:	83 ec 04             	sub    $0x4,%esp
f0100d35:	51                   	push   %ecx
f0100d36:	52                   	push   %edx
f0100d37:	50                   	push   %eax
f0100d38:	e8 5c fc 02 00       	call   f0130999 <strncmp>
f0100d3d:	83 c4 10             	add    $0x10,%esp
f0100d40:	85 c0                	test   %eax,%eax
f0100d42:	75 20                	jne    f0100d64 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d44:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d47:	89 d0                	mov    %edx,%eax
f0100d49:	01 c0                	add    %eax,%eax
f0100d4b:	01 d0                	add    %edx,%eax
f0100d4d:	c1 e0 02             	shl    $0x2,%eax
f0100d50:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d55:	8b 10                	mov    (%eax),%edx
f0100d57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d5a:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100d61:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d64:	ff 45 f0             	incl   -0x10(%ebp)
f0100d67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d6a:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0100d6f:	39 c2                	cmp    %eax,%edx
f0100d71:	0f 82 64 ff ff ff    	jb     f0100cdb <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100d77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d7b:	74 2b                	je     f0100da8 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100d7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d80:	89 d0                	mov    %edx,%eax
f0100d82:	01 c0                	add    %eax,%eax
f0100d84:	01 d0                	add    %edx,%eax
f0100d86:	c1 e0 02             	shl    $0x2,%eax
f0100d89:	05 48 15 19 f0       	add    $0xf0191548,%eax
f0100d8e:	8b 00                	mov    (%eax),%eax
f0100d90:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100d93:	83 ec 08             	sub    $0x8,%esp
f0100d96:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100d99:	51                   	push   %ecx
f0100d9a:	52                   	push   %edx
f0100d9b:	ff d0                	call   *%eax
f0100d9d:	83 c4 10             	add    $0x10,%esp
f0100da0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100da3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100da6:	eb 50                	jmp    f0100df8 <execute_command+0x169>
	}
	else if (count == 0)
f0100da8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100dac:	75 16                	jne    f0100dc4 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100dae:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100db1:	83 ec 08             	sub    $0x8,%esp
f0100db4:	50                   	push   %eax
f0100db5:	68 7c 2c 13 f0       	push   $0xf0132c7c
f0100dba:	e8 6e fe ff ff       	call   f0100c2d <cprintf>
f0100dbf:	83 c4 10             	add    $0x10,%esp
f0100dc2:	eb 2f                	jmp    f0100df3 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100dc4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100dcb:	eb 1e                	jmp    f0100deb <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100dcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dd0:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100dd7:	83 ec 08             	sub    $0x8,%esp
f0100dda:	50                   	push   %eax
f0100ddb:	68 92 2c 13 f0       	push   $0xf0132c92
f0100de0:	e8 48 fe ff ff       	call   f0100c2d <cprintf>
f0100de5:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100de8:	ff 45 e8             	incl   -0x18(%ebp)
f0100deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dee:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100df1:	7c da                	jl     f0100dcd <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100df3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df8:	c9                   	leave  
f0100df9:	c3                   	ret    

f0100dfa <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100dfa:	55                   	push   %ebp
f0100dfb:	89 e5                	mov    %esp,%ebp
f0100dfd:	c7 05 98 1e 6c f0 00 	movl   $0x0,0xf06c1e98
f0100e04:	00 00 00 
f0100e07:	90                   	nop
f0100e08:	5d                   	pop    %ebp
f0100e09:	c3                   	ret    

f0100e0a <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e0a:	55                   	push   %ebp
f0100e0b:	89 e5                	mov    %esp,%ebp
f0100e0d:	c7 05 98 1e 6c f0 01 	movl   $0x1,0xf06c1e98
f0100e14:	00 00 00 
f0100e17:	90                   	nop
f0100e18:	5d                   	pop    %ebp
f0100e19:	c3                   	ret    

f0100e1a <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e1a:	55                   	push   %ebp
f0100e1b:	89 e5                	mov    %esp,%ebp
f0100e1d:	c7 05 98 1e 6c f0 02 	movl   $0x2,0xf06c1e98
f0100e24:	00 00 00 
f0100e27:	90                   	nop
f0100e28:	5d                   	pop    %ebp
f0100e29:	c3                   	ret    

f0100e2a <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e2a:	55                   	push   %ebp
f0100e2b:	89 e5                	mov    %esp,%ebp
f0100e2d:	c7 05 98 1e 6c f0 03 	movl   $0x3,0xf06c1e98
f0100e34:	00 00 00 
f0100e37:	90                   	nop
f0100e38:	5d                   	pop    %ebp
f0100e39:	c3                   	ret    

f0100e3a <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e3a:	55                   	push   %ebp
f0100e3b:	89 e5                	mov    %esp,%ebp
f0100e3d:	c7 05 98 1e 6c f0 04 	movl   $0x4,0xf06c1e98
f0100e44:	00 00 00 
f0100e47:	90                   	nop
f0100e48:	5d                   	pop    %ebp
f0100e49:	c3                   	ret    

f0100e4a <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e4a:	55                   	push   %ebp
f0100e4b:	89 e5                	mov    %esp,%ebp
f0100e4d:	a1 98 1e 6c f0       	mov    0xf06c1e98,%eax
f0100e52:	85 c0                	test   %eax,%eax
f0100e54:	75 04                	jne    f0100e5a <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100e56:	b0 01                	mov    $0x1,%al
f0100e58:	eb 02                	jmp    f0100e5c <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100e5a:	b0 00                	mov    $0x0,%al
f0100e5c:	5d                   	pop    %ebp
f0100e5d:	c3                   	ret    

f0100e5e <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100e5e:	55                   	push   %ebp
f0100e5f:	89 e5                	mov    %esp,%ebp
f0100e61:	a1 98 1e 6c f0       	mov    0xf06c1e98,%eax
f0100e66:	83 f8 01             	cmp    $0x1,%eax
f0100e69:	75 04                	jne    f0100e6f <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100e6b:	b0 01                	mov    $0x1,%al
f0100e6d:	eb 02                	jmp    f0100e71 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100e6f:	b0 00                	mov    $0x0,%al
f0100e71:	5d                   	pop    %ebp
f0100e72:	c3                   	ret    

f0100e73 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100e73:	55                   	push   %ebp
f0100e74:	89 e5                	mov    %esp,%ebp
f0100e76:	a1 98 1e 6c f0       	mov    0xf06c1e98,%eax
f0100e7b:	83 f8 02             	cmp    $0x2,%eax
f0100e7e:	75 04                	jne    f0100e84 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100e80:	b0 01                	mov    $0x1,%al
f0100e82:	eb 02                	jmp    f0100e86 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100e84:	b0 00                	mov    $0x0,%al
f0100e86:	5d                   	pop    %ebp
f0100e87:	c3                   	ret    

f0100e88 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100e88:	55                   	push   %ebp
f0100e89:	89 e5                	mov    %esp,%ebp
f0100e8b:	a1 98 1e 6c f0       	mov    0xf06c1e98,%eax
f0100e90:	83 f8 03             	cmp    $0x3,%eax
f0100e93:	75 04                	jne    f0100e99 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100e95:	b0 01                	mov    $0x1,%al
f0100e97:	eb 02                	jmp    f0100e9b <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100e99:	b0 00                	mov    $0x0,%al
f0100e9b:	5d                   	pop    %ebp
f0100e9c:	c3                   	ret    

f0100e9d <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100e9d:	55                   	push   %ebp
f0100e9e:	89 e5                	mov    %esp,%ebp
f0100ea0:	a1 98 1e 6c f0       	mov    0xf06c1e98,%eax
f0100ea5:	83 f8 04             	cmp    $0x4,%eax
f0100ea8:	75 04                	jne    f0100eae <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eaa:	b0 01                	mov    $0x1,%al
f0100eac:	eb 02                	jmp    f0100eb0 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100eae:	b0 00                	mov    $0x0,%al
f0100eb0:	5d                   	pop    %ebp
f0100eb1:	c3                   	ret    

f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100eb2:	55                   	push   %ebp
f0100eb3:	89 e5                	mov    %esp,%ebp
f0100eb5:	c7 05 6c 1e 6c f0 01 	movl   $0x1,0xf06c1e6c
f0100ebc:	00 00 00 
f0100ebf:	90                   	nop
f0100ec0:	5d                   	pop    %ebp
f0100ec1:	c3                   	ret    

f0100ec2 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100ec2:	55                   	push   %ebp
f0100ec3:	89 e5                	mov    %esp,%ebp
f0100ec5:	c7 05 6c 1e 6c f0 02 	movl   $0x2,0xf06c1e6c
f0100ecc:	00 00 00 
f0100ecf:	90                   	nop
f0100ed0:	5d                   	pop    %ebp
f0100ed1:	c3                   	ret    

f0100ed2 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100ed2:	55                   	push   %ebp
f0100ed3:	89 e5                	mov    %esp,%ebp
f0100ed5:	c7 05 6c 1e 6c f0 03 	movl   $0x3,0xf06c1e6c
f0100edc:	00 00 00 
f0100edf:	90                   	nop
f0100ee0:	5d                   	pop    %ebp
f0100ee1:	c3                   	ret    

f0100ee2 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100ee2:	55                   	push   %ebp
f0100ee3:	89 e5                	mov    %esp,%ebp
f0100ee5:	c7 05 6c 1e 6c f0 04 	movl   $0x4,0xf06c1e6c
f0100eec:	00 00 00 
f0100eef:	90                   	nop
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 6c 1e 6c f0       	mov    0xf06c1e6c,%eax
f0100efa:	83 f8 01             	cmp    $0x1,%eax
f0100efd:	75 04                	jne    f0100f03 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	a1 6c 1e 6c f0       	mov    0xf06c1e6c,%eax
f0100f0f:	83 f8 02             	cmp    $0x2,%eax
f0100f12:	75 04                	jne    f0100f18 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f14:	b0 01                	mov    $0x1,%al
f0100f16:	eb 02                	jmp    f0100f1a <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f18:	b0 00                	mov    $0x0,%al
f0100f1a:	5d                   	pop    %ebp
f0100f1b:	c3                   	ret    

f0100f1c <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f1c:	55                   	push   %ebp
f0100f1d:	89 e5                	mov    %esp,%ebp
f0100f1f:	a1 6c 1e 6c f0       	mov    0xf06c1e6c,%eax
f0100f24:	83 f8 03             	cmp    $0x3,%eax
f0100f27:	75 04                	jne    f0100f2d <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f29:	b0 01                	mov    $0x1,%al
f0100f2b:	eb 02                	jmp    f0100f2f <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f2d:	b0 00                	mov    $0x0,%al
f0100f2f:	5d                   	pop    %ebp
f0100f30:	c3                   	ret    

f0100f31 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f31:	55                   	push   %ebp
f0100f32:	89 e5                	mov    %esp,%ebp
f0100f34:	a1 6c 1e 6c f0       	mov    0xf06c1e6c,%eax
f0100f39:	83 f8 04             	cmp    $0x4,%eax
f0100f3c:	75 04                	jne    f0100f42 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f3e:	b0 01                	mov    $0x1,%al
f0100f40:	eb 02                	jmp    f0100f44 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f42:	b0 00                	mov    $0x0,%al
f0100f44:	5d                   	pop    %ebp
f0100f45:	c3                   	ret    

f0100f46 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f46:	55                   	push   %ebp
f0100f47:	89 e5                	mov    %esp,%ebp
f0100f49:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100f4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f4f:	c1 e8 0c             	shr    $0xc,%eax
f0100f52:	89 c2                	mov    %eax,%edx
f0100f54:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0100f59:	39 c2                	cmp    %eax,%edx
f0100f5b:	72 14                	jb     f0100f71 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100f5d:	83 ec 04             	sub    $0x4,%esp
f0100f60:	68 98 2c 13 f0       	push   $0xf0132c98
f0100f65:	6a 55                	push   $0x55
f0100f67:	68 c0 2c 13 f0       	push   $0xf0132cc0
f0100f6c:	e8 35 f2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0100f71:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f0100f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f7a:	c1 e8 0c             	shr    $0xc,%eax
f0100f7d:	89 c1                	mov    %eax,%ecx
f0100f7f:	89 c8                	mov    %ecx,%eax
f0100f81:	01 c0                	add    %eax,%eax
f0100f83:	01 c8                	add    %ecx,%eax
f0100f85:	c1 e0 03             	shl    $0x3,%eax
f0100f88:	01 d0                	add    %edx,%eax
}
f0100f8a:	c9                   	leave  
f0100f8b:	c3                   	ret    

f0100f8c <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100f8c:	55                   	push   %ebp
f0100f8d:	89 e5                	mov    %esp,%ebp
f0100f8f:	53                   	push   %ebx
f0100f90:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100f93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f9a:	eb 3b                	jmp    f0100fd7 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100f9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f9f:	89 d0                	mov    %edx,%eax
f0100fa1:	01 c0                	add    %eax,%eax
f0100fa3:	01 d0                	add    %edx,%eax
f0100fa5:	c1 e0 02             	shl    $0x2,%eax
f0100fa8:	05 44 15 19 f0       	add    $0xf0191544,%eax
f0100fad:	8b 10                	mov    (%eax),%edx
f0100faf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100fb2:	89 c8                	mov    %ecx,%eax
f0100fb4:	01 c0                	add    %eax,%eax
f0100fb6:	01 c8                	add    %ecx,%eax
f0100fb8:	c1 e0 02             	shl    $0x2,%eax
f0100fbb:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100fc0:	8b 00                	mov    (%eax),%eax
f0100fc2:	83 ec 04             	sub    $0x4,%esp
f0100fc5:	52                   	push   %edx
f0100fc6:	50                   	push   %eax
f0100fc7:	68 3a 3b 13 f0       	push   $0xf0133b3a
f0100fcc:	e8 5c fc ff ff       	call   f0100c2d <cprintf>
f0100fd1:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0100fd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100fda:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0100fdf:	39 c2                	cmp    %eax,%edx
f0100fe1:	72 b9                	jb     f0100f9c <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0100fe3:	83 ec 0c             	sub    $0xc,%esp
f0100fe6:	68 43 3b 13 f0       	push   $0xf0133b43
f0100feb:	e8 3d fc ff ff       	call   f0100c2d <cprintf>
f0100ff0:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0100ff3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100ffa:	eb 42                	jmp    f010103e <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0100ffc:	8b 0d c0 1c 19 f0    	mov    0xf0191cc0,%ecx
f0101002:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101005:	89 d0                	mov    %edx,%eax
f0101007:	01 c0                	add    %eax,%eax
f0101009:	01 d0                	add    %edx,%eax
f010100b:	c1 e0 02             	shl    $0x2,%eax
f010100e:	01 c8                	add    %ecx,%eax
f0101010:	8b 50 04             	mov    0x4(%eax),%edx
f0101013:	8b 1d c0 1c 19 f0    	mov    0xf0191cc0,%ebx
f0101019:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010101c:	89 c8                	mov    %ecx,%eax
f010101e:	01 c0                	add    %eax,%eax
f0101020:	01 c8                	add    %ecx,%eax
f0101022:	c1 e0 02             	shl    $0x2,%eax
f0101025:	01 d8                	add    %ebx,%eax
f0101027:	8b 00                	mov    (%eax),%eax
f0101029:	83 ec 04             	sub    $0x4,%esp
f010102c:	52                   	push   %edx
f010102d:	50                   	push   %eax
f010102e:	68 58 3b 13 f0       	push   $0xf0133b58
f0101033:	e8 f5 fb ff ff       	call   f0100c2d <cprintf>
f0101038:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010103b:	ff 45 f4             	incl   -0xc(%ebp)
f010103e:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f0101043:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101046:	7c b4                	jl     f0100ffc <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101048:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010104d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101050:	c9                   	leave  
f0101051:	c3                   	ret    

f0101052 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101052:	55                   	push   %ebp
f0101053:	89 e5                	mov    %esp,%ebp
f0101055:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101058:	83 ec 0c             	sub    $0xc,%esp
f010105b:	68 74 3b 13 f0       	push   $0xf0133b74
f0101060:	e8 c8 fb ff ff       	call   f0100c2d <cprintf>
f0101065:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101068:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010106d:	83 ec 04             	sub    $0x4,%esp
f0101070:	50                   	push   %eax
f0101071:	68 0c 00 10 f0       	push   $0xf010000c
f0101076:	68 90 3b 13 f0       	push   $0xf0133b90
f010107b:	e8 ad fb ff ff       	call   f0100c2d <cprintf>
f0101080:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101083:	b8 d9 2a 13 00       	mov    $0x132ad9,%eax
f0101088:	83 ec 04             	sub    $0x4,%esp
f010108b:	50                   	push   %eax
f010108c:	68 d9 2a 13 f0       	push   $0xf0132ad9
f0101091:	68 cc 3b 13 f0       	push   $0xf0133bcc
f0101096:	e8 92 fb ff ff       	call   f0100c2d <cprintf>
f010109b:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010109e:	b8 b0 8f 65 00       	mov    $0x658fb0,%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	50                   	push   %eax
f01010a7:	68 b0 8f 65 f0       	push   $0xf0658fb0
f01010ac:	68 08 3c 13 f0       	push   $0xf0133c08
f01010b1:	e8 77 fb ff ff       	call   f0100c2d <cprintf>
f01010b6:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01010b9:	b8 fc 1f 6c 00       	mov    $0x6c1ffc,%eax
f01010be:	83 ec 04             	sub    $0x4,%esp
f01010c1:	50                   	push   %eax
f01010c2:	68 fc 1f 6c f0       	push   $0xf06c1ffc
f01010c7:	68 50 3c 13 f0       	push   $0xf0133c50
f01010cc:	e8 5c fb ff ff       	call   f0100c2d <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01010d4:	b8 fc 1f 6c f0       	mov    $0xf06c1ffc,%eax
f01010d9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01010df:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01010e4:	29 c2                	sub    %eax,%edx
f01010e6:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01010e8:	85 c0                	test   %eax,%eax
f01010ea:	79 05                	jns    f01010f1 <command_kernel_info+0x9f>
f01010ec:	05 ff 03 00 00       	add    $0x3ff,%eax
f01010f1:	c1 f8 0a             	sar    $0xa,%eax
f01010f4:	83 ec 08             	sub    $0x8,%esp
f01010f7:	50                   	push   %eax
f01010f8:	68 8c 3c 13 f0       	push   $0xf0133c8c
f01010fd:	e8 2b fb ff ff       	call   f0100c2d <cprintf>
f0101102:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010110a:	c9                   	leave  
f010110b:	c3                   	ret    

f010110c <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f010110c:	55                   	push   %ebp
f010110d:	89 e5                	mov    %esp,%ebp
f010110f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101112:	83 ec 04             	sub    $0x4,%esp
f0101115:	68 b8 3c 13 f0       	push   $0xf0133cb8
f010111a:	68 b0 00 00 00       	push   $0xb0
f010111f:	68 d9 3c 13 f0       	push   $0xf0133cd9
f0101124:	e8 7d f0 ff ff       	call   f01001a6 <_panic>

f0101129 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101129:	55                   	push   %ebp
f010112a:	89 e5                	mov    %esp,%ebp
f010112c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010112f:	83 ec 04             	sub    $0x4,%esp
f0101132:	68 b8 3c 13 f0       	push   $0xf0133cb8
f0101137:	68 ba 00 00 00       	push   $0xba
f010113c:	68 d9 3c 13 f0       	push   $0xf0133cd9
f0101141:	e8 60 f0 ff ff       	call   f01001a6 <_panic>

f0101146 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101146:	55                   	push   %ebp
f0101147:	89 e5                	mov    %esp,%ebp
f0101149:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010114c:	83 ec 04             	sub    $0x4,%esp
f010114f:	68 b8 3c 13 f0       	push   $0xf0133cb8
f0101154:	68 c3 00 00 00       	push   $0xc3
f0101159:	68 d9 3c 13 f0       	push   $0xf0133cd9
f010115e:	e8 43 f0 ff ff       	call   f01001a6 <_panic>

f0101163 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101163:	55                   	push   %ebp
f0101164:	89 e5                	mov    %esp,%ebp
f0101166:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	68 b8 3c 13 f0       	push   $0xf0133cb8
f0101171:	68 cf 00 00 00       	push   $0xcf
f0101176:	68 d9 3c 13 f0       	push   $0xf0133cd9
f010117b:	e8 26 f0 ff ff       	call   f01001a6 <_panic>

f0101180 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101180:	55                   	push   %ebp
f0101181:	89 e5                	mov    %esp,%ebp
f0101183:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101186:	83 ec 04             	sub    $0x4,%esp
f0101189:	68 b8 3c 13 f0       	push   $0xf0133cb8
f010118e:	68 d8 00 00 00       	push   $0xd8
f0101193:	68 d9 3c 13 f0       	push   $0xf0133cd9
f0101198:	e8 09 f0 ff ff       	call   f01001a6 <_panic>

f010119d <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010119d:	55                   	push   %ebp
f010119e:	89 e5                	mov    %esp,%ebp
f01011a0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a3:	83 ec 04             	sub    $0x4,%esp
f01011a6:	68 b8 3c 13 f0       	push   $0xf0133cb8
f01011ab:	68 e1 00 00 00       	push   $0xe1
f01011b0:	68 d9 3c 13 f0       	push   $0xf0133cd9
f01011b5:	e8 ec ef ff ff       	call   f01001a6 <_panic>

f01011ba <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01011ba:	55                   	push   %ebp
f01011bb:	89 e5                	mov    %esp,%ebp
f01011bd:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011c0:	83 ec 04             	sub    $0x4,%esp
f01011c3:	68 b8 3c 13 f0       	push   $0xf0133cb8
f01011c8:	68 ee 00 00 00       	push   $0xee
f01011cd:	68 d9 3c 13 f0       	push   $0xf0133cd9
f01011d2:	e8 cf ef ff ff       	call   f01001a6 <_panic>

f01011d7 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01011d7:	55                   	push   %ebp
f01011d8:	89 e5                	mov    %esp,%ebp
f01011da:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01011dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011e0:	83 c0 04             	add    $0x4,%eax
f01011e3:	8b 00                	mov    (%eax),%eax
f01011e5:	83 ec 04             	sub    $0x4,%esp
f01011e8:	6a 10                	push   $0x10
f01011ea:	6a 00                	push   $0x0
f01011ec:	50                   	push   %eax
f01011ed:	e8 c3 f9 02 00       	call   f0130bb5 <strtol>
f01011f2:	83 c4 10             	add    $0x10,%esp
f01011f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01011f8:	83 ec 0c             	sub    $0xc,%esp
f01011fb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01011fe:	50                   	push   %eax
f01011ff:	e8 a6 55 00 00       	call   f01067aa <allocate_frame>
f0101204:	83 c4 10             	add    $0x10,%esp
f0101207:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010120a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010120d:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0101212:	6a 06                	push   $0x6
f0101214:	ff 75 f4             	pushl  -0xc(%ebp)
f0101217:	52                   	push   %edx
f0101218:	50                   	push   %eax
f0101219:	e8 24 59 00 00       	call   f0106b42 <map_frame>
f010121e:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101226:	c9                   	leave  
f0101227:	c3                   	ret    

f0101228 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101228:	55                   	push   %ebp
f0101229:	89 e5                	mov    %esp,%ebp
f010122b:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010122e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101231:	83 c0 04             	add    $0x4,%eax
f0101234:	8b 00                	mov    (%eax),%eax
f0101236:	83 ec 04             	sub    $0x4,%esp
f0101239:	6a 10                	push   $0x10
f010123b:	6a 00                	push   $0x0
f010123d:	50                   	push   %eax
f010123e:	e8 72 f9 02 00       	call   f0130bb5 <strtol>
f0101243:	83 c4 10             	add    $0x10,%esp
f0101246:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101249:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f010124e:	83 ec 08             	sub    $0x8,%esp
f0101251:	ff 75 f4             	pushl  -0xc(%ebp)
f0101254:	50                   	push   %eax
f0101255:	e8 17 5a 00 00       	call   f0106c71 <unmap_frame>
f010125a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010125d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101262:	c9                   	leave  
f0101263:	c3                   	ret    

f0101264 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101264:	55                   	push   %ebp
f0101265:	89 e5                	mov    %esp,%ebp
f0101267:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010126a:	83 ec 04             	sub    $0x4,%esp
f010126d:	68 b8 3c 13 f0       	push   $0xf0133cb8
f0101272:	68 18 01 00 00       	push   $0x118
f0101277:	68 d9 3c 13 f0       	push   $0xf0133cd9
f010127c:	e8 25 ef ff ff       	call   f01001a6 <_panic>

f0101281 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101281:	55                   	push   %ebp
f0101282:	89 e5                	mov    %esp,%ebp
f0101284:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101287:	83 ec 04             	sub    $0x4,%esp
f010128a:	68 b8 3c 13 f0       	push   $0xf0133cb8
f010128f:	68 23 01 00 00       	push   $0x123
f0101294:	68 d9 3c 13 f0       	push   $0xf0133cd9
f0101299:	e8 08 ef ff ff       	call   f01001a6 <_panic>

f010129e <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010129e:	55                   	push   %ebp
f010129f:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012a6:	5d                   	pop    %ebp
f01012a7:	c3                   	ret    

f01012a8 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012a8:	55                   	push   %ebp
f01012a9:	89 e5                	mov    %esp,%ebp
f01012ab:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01012ae:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01012b2:	75 37                	jne    f01012eb <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01012b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012b7:	83 c0 04             	add    $0x4,%eax
f01012ba:	8b 00                	mov    (%eax),%eax
f01012bc:	83 ec 04             	sub    $0x4,%esp
f01012bf:	6a 10                	push   $0x10
f01012c1:	6a 00                	push   $0x0
f01012c3:	50                   	push   %eax
f01012c4:	e8 ec f8 02 00       	call   f0130bb5 <strtol>
f01012c9:	83 c4 10             	add    $0x10,%esp
f01012cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01012cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012d2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01012d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012d8:	83 c0 08             	add    $0x8,%eax
f01012db:	8b 00                	mov    (%eax),%eax
f01012dd:	8a 00                	mov    (%eax),%al
f01012df:	88 c2                	mov    %al,%dl
f01012e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012e4:	88 10                	mov    %dl,(%eax)
f01012e6:	e9 b9 00 00 00       	jmp    f01013a4 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01012eb:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01012ef:	0f 85 9f 00 00 00    	jne    f0101394 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01012f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012f8:	83 c0 04             	add    $0x4,%eax
f01012fb:	8b 00                	mov    (%eax),%eax
f01012fd:	83 ec 04             	sub    $0x4,%esp
f0101300:	6a 0a                	push   $0xa
f0101302:	6a 00                	push   $0x0
f0101304:	50                   	push   %eax
f0101305:	e8 ab f8 02 00       	call   f0130bb5 <strtol>
f010130a:	83 c4 10             	add    $0x10,%esp
f010130d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101310:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 00                	push   $0x0
f010131c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	ff 75 f4             	pushl  -0xc(%ebp)
f0101323:	e8 cf 81 00 00       	call   f01094f7 <envid2env>
f0101328:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010132b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132e:	83 c0 08             	add    $0x8,%eax
f0101331:	8b 00                	mov    (%eax),%eax
f0101333:	83 ec 04             	sub    $0x4,%esp
f0101336:	6a 10                	push   $0x10
f0101338:	6a 00                	push   $0x0
f010133a:	50                   	push   %eax
f010133b:	e8 75 f8 02 00       	call   f0130bb5 <strtol>
f0101340:	83 c4 10             	add    $0x10,%esp
f0101343:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101346:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101349:	85 c0                	test   %eax,%eax
f010134b:	75 07                	jne    f0101354 <command_writeusermem+0xac>
f010134d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101352:	eb 55                	jmp    f01013a9 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101354:	0f 20 d8             	mov    %cr3,%eax
f0101357:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010135a:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010135d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101360:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101363:	8b 40 60             	mov    0x60(%eax),%eax
f0101366:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101369:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010136c:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010136f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101372:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101375:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101378:	83 c0 0c             	add    $0xc,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	8a 00                	mov    (%eax),%al
f010137f:	88 c2                	mov    %al,%dl
f0101381:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101384:	88 10                	mov    %dl,(%eax)
f0101386:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101389:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010138c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010138f:	0f 22 d8             	mov    %eax,%cr3
f0101392:	eb 10                	jmp    f01013a4 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101394:	83 ec 0c             	sub    $0xc,%esp
f0101397:	68 f0 3c 13 f0       	push   $0xf0133cf0
f010139c:	e8 8c f8 ff ff       	call   f0100c2d <cprintf>
f01013a1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013a9:	c9                   	leave  
f01013aa:	c3                   	ret    

f01013ab <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01013ab:	55                   	push   %ebp
f01013ac:	89 e5                	mov    %esp,%ebp
f01013ae:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01013b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b4:	83 c0 04             	add    $0x4,%eax
f01013b7:	8b 00                	mov    (%eax),%eax
f01013b9:	83 ec 04             	sub    $0x4,%esp
f01013bc:	6a 10                	push   $0x10
f01013be:	6a 00                	push   $0x0
f01013c0:	50                   	push   %eax
f01013c1:	e8 ef f7 02 00       	call   f0130bb5 <strtol>
f01013c6:	83 c4 10             	add    $0x10,%esp
f01013c9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01013ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01013d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d4:	83 c0 08             	add    $0x8,%eax
f01013d7:	8b 00                	mov    (%eax),%eax
f01013d9:	83 ec 04             	sub    $0x4,%esp
f01013dc:	6a 0a                	push   $0xa
f01013de:	6a 00                	push   $0x0
f01013e0:	50                   	push   %eax
f01013e1:	e8 cf f7 02 00       	call   f0130bb5 <strtol>
f01013e6:	83 c4 10             	add    $0x10,%esp
f01013e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01013ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01013f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f6:	83 c0 0c             	add    $0xc,%eax
f01013f9:	8b 00                	mov    (%eax),%eax
f01013fb:	83 ec 0c             	sub    $0xc,%esp
f01013fe:	50                   	push   %eax
f01013ff:	e8 51 f4 02 00       	call   f0130855 <strlen>
f0101404:	83 c4 10             	add    $0x10,%esp
f0101407:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010140a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101411:	eb 30                	jmp    f0101443 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101413:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010141a:	eb 1c                	jmp    f0101438 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f010141c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010141f:	83 c0 0c             	add    $0xc,%eax
f0101422:	8b 10                	mov    (%eax),%edx
f0101424:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101427:	01 d0                	add    %edx,%eax
f0101429:	8a 00                	mov    (%eax),%al
f010142b:	88 c2                	mov    %al,%dl
f010142d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101430:	88 10                	mov    %dl,(%eax)
			address++;
f0101432:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101435:	ff 45 ec             	incl   -0x14(%ebp)
f0101438:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010143b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010143e:	7c dc                	jl     f010141c <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101440:	ff 45 f0             	incl   -0x10(%ebp)
f0101443:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101446:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101449:	7c c8                	jl     f0101413 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010144b:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101450:	c9                   	leave  
f0101451:	c3                   	ret    

f0101452 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101452:	55                   	push   %ebp
f0101453:	89 e5                	mov    %esp,%ebp
f0101455:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101458:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010145c:	75 42                	jne    f01014a0 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010145e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101461:	83 c0 04             	add    $0x4,%eax
f0101464:	8b 00                	mov    (%eax),%eax
f0101466:	83 ec 04             	sub    $0x4,%esp
f0101469:	6a 10                	push   $0x10
f010146b:	6a 00                	push   $0x0
f010146d:	50                   	push   %eax
f010146e:	e8 42 f7 02 00       	call   f0130bb5 <strtol>
f0101473:	83 c4 10             	add    $0x10,%esp
f0101476:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101479:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010147c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010147f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101482:	8a 00                	mov    (%eax),%al
f0101484:	0f b6 c0             	movzbl %al,%eax
f0101487:	83 ec 04             	sub    $0x4,%esp
f010148a:	50                   	push   %eax
f010148b:	ff 75 d8             	pushl  -0x28(%ebp)
f010148e:	68 1a 3d 13 f0       	push   $0xf0133d1a
f0101493:	e8 95 f7 ff ff       	call   f0100c2d <cprintf>
f0101498:	83 c4 10             	add    $0x10,%esp
f010149b:	e9 c4 00 00 00       	jmp    f0101564 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014a0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014a4:	0f 85 aa 00 00 00    	jne    f0101554 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014ad:	83 c0 04             	add    $0x4,%eax
f01014b0:	8b 00                	mov    (%eax),%eax
f01014b2:	83 ec 04             	sub    $0x4,%esp
f01014b5:	6a 0a                	push   $0xa
f01014b7:	6a 00                	push   $0x0
f01014b9:	50                   	push   %eax
f01014ba:	e8 f6 f6 02 00       	call   f0130bb5 <strtol>
f01014bf:	83 c4 10             	add    $0x10,%esp
f01014c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01014c5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01014cc:	83 ec 04             	sub    $0x4,%esp
f01014cf:	6a 00                	push   $0x0
f01014d1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01014d4:	50                   	push   %eax
f01014d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01014d8:	e8 1a 80 00 00       	call   f01094f7 <envid2env>
f01014dd:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01014e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e3:	83 c0 08             	add    $0x8,%eax
f01014e6:	8b 00                	mov    (%eax),%eax
f01014e8:	83 ec 04             	sub    $0x4,%esp
f01014eb:	6a 10                	push   $0x10
f01014ed:	6a 00                	push   $0x0
f01014ef:	50                   	push   %eax
f01014f0:	e8 c0 f6 02 00       	call   f0130bb5 <strtol>
f01014f5:	83 c4 10             	add    $0x10,%esp
f01014f8:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01014fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01014fe:	85 c0                	test   %eax,%eax
f0101500:	75 07                	jne    f0101509 <command_readusermem+0xb7>
f0101502:	b8 00 00 00 00       	mov    $0x0,%eax
f0101507:	eb 60                	jmp    f0101569 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101509:	0f 20 d8             	mov    %cr3,%eax
f010150c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010150f:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101512:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0101515:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101518:	8b 40 60             	mov    0x60(%eax),%eax
f010151b:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010151e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101521:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010152a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010152d:	8a 00                	mov    (%eax),%al
f010152f:	0f b6 c0             	movzbl %al,%eax
f0101532:	83 ec 04             	sub    $0x4,%esp
f0101535:	50                   	push   %eax
f0101536:	ff 75 f0             	pushl  -0x10(%ebp)
f0101539:	68 1a 3d 13 f0       	push   $0xf0133d1a
f010153e:	e8 ea f6 ff ff       	call   f0100c2d <cprintf>
f0101543:	83 c4 10             	add    $0x10,%esp
f0101546:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010154c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010154f:	0f 22 d8             	mov    %eax,%cr3
f0101552:	eb 10                	jmp    f0101564 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101554:	83 ec 0c             	sub    $0xc,%esp
f0101557:	68 34 3d 13 f0       	push   $0xf0133d34
f010155c:	e8 cc f6 ff ff       	call   f0100c2d <cprintf>
f0101561:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101564:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101569:	c9                   	leave  
f010156a:	c3                   	ret    

f010156b <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010156b:	55                   	push   %ebp
f010156c:	89 e5                	mov    %esp,%ebp
f010156e:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101571:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101574:	83 c0 04             	add    $0x4,%eax
f0101577:	8b 00                	mov    (%eax),%eax
f0101579:	83 ec 04             	sub    $0x4,%esp
f010157c:	6a 10                	push   $0x10
f010157e:	6a 00                	push   $0x0
f0101580:	50                   	push   %eax
f0101581:	e8 2f f6 02 00       	call   f0130bb5 <strtol>
f0101586:	83 c4 10             	add    $0x10,%esp
f0101589:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010158e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101591:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101594:	83 c0 08             	add    $0x8,%eax
f0101597:	8b 00                	mov    (%eax),%eax
f0101599:	83 ec 04             	sub    $0x4,%esp
f010159c:	6a 0a                	push   $0xa
f010159e:	6a 00                	push   $0x0
f01015a0:	50                   	push   %eax
f01015a1:	e8 0f f6 02 00       	call   f0130bb5 <strtol>
f01015a6:	83 c4 10             	add    $0x10,%esp
f01015a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01015ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01015b3:	eb 22                	jmp    f01015d7 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01015b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01015b8:	8d 50 01             	lea    0x1(%eax),%edx
f01015bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01015be:	8a 00                	mov    (%eax),%al
f01015c0:	0f b6 c0             	movzbl %al,%eax
f01015c3:	83 ec 08             	sub    $0x8,%esp
f01015c6:	50                   	push   %eax
f01015c7:	68 5e 3d 13 f0       	push   $0xf0133d5e
f01015cc:	e8 5c f6 ff ff       	call   f0100c2d <cprintf>
f01015d1:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01015d4:	ff 45 f0             	incl   -0x10(%ebp)
f01015d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01015da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01015dd:	7c d6                	jl     f01015b5 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01015df:	83 ec 0c             	sub    $0xc,%esp
f01015e2:	68 61 3d 13 f0       	push   $0xf0133d61
f01015e7:	e8 41 f6 ff ff       	call   f0100c2d <cprintf>
f01015ec:	83 c4 10             	add    $0x10,%esp
	return 0;
f01015ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01015f4:	c9                   	leave  
f01015f5:	c3                   	ret    

f01015f6 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01015f6:	55                   	push   %ebp
f01015f7:	89 e5                	mov    %esp,%ebp
f01015f9:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01015fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015ff:	83 c0 04             	add    $0x4,%eax
f0101602:	8b 00                	mov    (%eax),%eax
f0101604:	83 ec 04             	sub    $0x4,%esp
f0101607:	6a 0a                	push   $0xa
f0101609:	6a 00                	push   $0x0
f010160b:	50                   	push   %eax
f010160c:	e8 a4 f5 02 00       	call   f0130bb5 <strtol>
f0101611:	83 c4 10             	add    $0x10,%esp
f0101614:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101617:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010161e:	83 ec 04             	sub    $0x4,%esp
f0101621:	6a 00                	push   $0x0
f0101623:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101626:	50                   	push   %eax
f0101627:	ff 75 ec             	pushl  -0x14(%ebp)
f010162a:	e8 c8 7e 00 00       	call   f01094f7 <envid2env>
f010162f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101632:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101635:	83 c0 08             	add    $0x8,%eax
f0101638:	8b 00                	mov    (%eax),%eax
f010163a:	83 ec 04             	sub    $0x4,%esp
f010163d:	6a 10                	push   $0x10
f010163f:	6a 00                	push   $0x0
f0101641:	50                   	push   %eax
f0101642:	e8 6e f5 02 00       	call   f0130bb5 <strtol>
f0101647:	83 c4 10             	add    $0x10,%esp
f010164a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010164d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101650:	83 c0 0c             	add    $0xc,%eax
f0101653:	8b 00                	mov    (%eax),%eax
f0101655:	83 ec 04             	sub    $0x4,%esp
f0101658:	6a 0a                	push   $0xa
f010165a:	6a 00                	push   $0x0
f010165c:	50                   	push   %eax
f010165d:	e8 53 f5 02 00       	call   f0130bb5 <strtol>
f0101662:	83 c4 10             	add    $0x10,%esp
f0101665:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101668:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010166b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010166e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101671:	85 c0                	test   %eax,%eax
f0101673:	75 07                	jne    f010167c <command_readuserblock+0x86>
f0101675:	b8 00 00 00 00       	mov    $0x0,%eax
f010167a:	eb 65                	jmp    f01016e1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010167c:	0f 20 d8             	mov    %cr3,%eax
f010167f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101682:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101685:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101688:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010168b:	8b 40 60             	mov    0x60(%eax),%eax
f010168e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101694:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101697:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010169e:	eb 28                	jmp    f01016c8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016a3:	8a 00                	mov    (%eax),%al
f01016a5:	0f b6 d0             	movzbl %al,%edx
f01016a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016ab:	8a 00                	mov    (%eax),%al
f01016ad:	0f b6 c0             	movzbl %al,%eax
f01016b0:	52                   	push   %edx
f01016b1:	50                   	push   %eax
f01016b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01016b5:	68 63 3d 13 f0       	push   $0xf0133d63
f01016ba:	e8 6e f5 ff ff       	call   f0100c2d <cprintf>
f01016bf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01016c2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01016c5:	ff 45 f0             	incl   -0x10(%ebp)
f01016c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016cb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01016ce:	7c d0                	jl     f01016a0 <command_readuserblock+0xaa>
f01016d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01016d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01016d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01016d9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01016dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016e1:	c9                   	leave  
f01016e2:	c3                   	ret    

f01016e3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01016e3:	55                   	push   %ebp
f01016e4:	89 e5                	mov    %esp,%ebp
f01016e6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016ec:	83 c0 04             	add    $0x4,%eax
f01016ef:	8b 00                	mov    (%eax),%eax
f01016f1:	83 ec 04             	sub    $0x4,%esp
f01016f4:	6a 0a                	push   $0xa
f01016f6:	6a 00                	push   $0x0
f01016f8:	50                   	push   %eax
f01016f9:	e8 b7 f4 02 00       	call   f0130bb5 <strtol>
f01016fe:	83 c4 10             	add    $0x10,%esp
f0101701:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101704:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f010170b:	83 ec 04             	sub    $0x4,%esp
f010170e:	6a 00                	push   $0x0
f0101710:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101713:	50                   	push   %eax
f0101714:	ff 75 f4             	pushl  -0xc(%ebp)
f0101717:	e8 db 7d 00 00       	call   f01094f7 <envid2env>
f010171c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010171f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101722:	85 c0                	test   %eax,%eax
f0101724:	75 0a                	jne    f0101730 <command_remove_table+0x4d>
f0101726:	b8 00 00 00 00       	mov    $0x0,%eax
f010172b:	e9 a1 00 00 00       	jmp    f01017d1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101730:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101733:	83 c0 08             	add    $0x8,%eax
f0101736:	8b 00                	mov    (%eax),%eax
f0101738:	83 ec 04             	sub    $0x4,%esp
f010173b:	6a 10                	push   $0x10
f010173d:	6a 00                	push   $0x0
f010173f:	50                   	push   %eax
f0101740:	e8 70 f4 02 00       	call   f0130bb5 <strtol>
f0101745:	83 c4 10             	add    $0x10,%esp
f0101748:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010174b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010174e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101751:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101754:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101757:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010175a:	c1 ea 16             	shr    $0x16,%edx
f010175d:	c1 e2 02             	shl    $0x2,%edx
f0101760:	01 d0                	add    %edx,%eax
f0101762:	8b 00                	mov    (%eax),%eax
f0101764:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101769:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f010176c:	83 ec 0c             	sub    $0xc,%esp
f010176f:	ff 75 e8             	pushl  -0x18(%ebp)
f0101772:	e8 cf f7 ff ff       	call   f0100f46 <to_frame_info>
f0101777:	83 c4 10             	add    $0x10,%esp
f010177a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f010177d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101780:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101786:	83 ec 0c             	sub    $0xc,%esp
f0101789:	ff 75 e4             	pushl  -0x1c(%ebp)
f010178c:	e8 2e 51 00 00       	call   f01068bf <free_frame>
f0101791:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101794:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101797:	c1 e8 16             	shr    $0x16,%eax
f010179a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f010179d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01017a6:	c1 e2 02             	shl    $0x2,%edx
f01017a9:	01 c2                	add    %eax,%edx
f01017ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017b1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01017b4:	c1 e1 02             	shl    $0x2,%ecx
f01017b7:	01 c8                	add    %ecx,%eax
f01017b9:	8b 00                	mov    (%eax),%eax
f01017bb:	83 e0 fe             	and    $0xfffffffe,%eax
f01017be:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01017c0:	0f 20 d8             	mov    %cr3,%eax
f01017c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01017c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017c9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01017cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017d1:	c9                   	leave  
f01017d2:	c3                   	ret    

f01017d3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01017d3:	55                   	push   %ebp
f01017d4:	89 e5                	mov    %esp,%ebp
f01017d6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01017d9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01017dd:	7e 06                	jle    f01017e5 <command_allocuserpage+0x12>
f01017df:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01017e3:	7e 1a                	jle    f01017ff <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01017e5:	83 ec 0c             	sub    $0xc,%esp
f01017e8:	68 74 3d 13 f0       	push   $0xf0133d74
f01017ed:	e8 3b f4 ff ff       	call   f0100c2d <cprintf>
f01017f2:	83 c4 10             	add    $0x10,%esp
		return 0;
f01017f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01017fa:	e9 46 01 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	83 c0 04             	add    $0x4,%eax
f0101805:	8b 00                	mov    (%eax),%eax
f0101807:	83 ec 04             	sub    $0x4,%esp
f010180a:	6a 0a                	push   $0xa
f010180c:	6a 00                	push   $0x0
f010180e:	50                   	push   %eax
f010180f:	e8 a1 f3 02 00       	call   f0130bb5 <strtol>
f0101814:	83 c4 10             	add    $0x10,%esp
f0101817:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f010181a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101821:	83 ec 04             	sub    $0x4,%esp
f0101824:	6a 00                	push   $0x0
f0101826:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101829:	50                   	push   %eax
f010182a:	ff 75 f0             	pushl  -0x10(%ebp)
f010182d:	e8 c5 7c 00 00       	call   f01094f7 <envid2env>
f0101832:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101835:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101838:	85 c0                	test   %eax,%eax
f010183a:	75 0a                	jne    f0101846 <command_allocuserpage+0x73>
f010183c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101841:	e9 ff 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101846:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101849:	83 c0 08             	add    $0x8,%eax
f010184c:	8b 00                	mov    (%eax),%eax
f010184e:	83 ec 04             	sub    $0x4,%esp
f0101851:	6a 10                	push   $0x10
f0101853:	6a 00                	push   $0x0
f0101855:	50                   	push   %eax
f0101856:	e8 5a f3 02 00       	call   f0130bb5 <strtol>
f010185b:	83 c4 10             	add    $0x10,%esp
f010185e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101861:	83 ec 0c             	sub    $0xc,%esp
f0101864:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101867:	50                   	push   %eax
f0101868:	e8 3d 4f 00 00       	call   f01067aa <allocate_frame>
f010186d:	83 c4 10             	add    $0x10,%esp
f0101870:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101873:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101877:	75 1a                	jne    f0101893 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101879:	83 ec 0c             	sub    $0xc,%esp
f010187c:	68 9e 3d 13 f0       	push   $0xf0133d9e
f0101881:	e8 a7 f3 ff ff       	call   f0100c2d <cprintf>
f0101886:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101889:	b8 00 00 00 00       	mov    $0x0,%eax
f010188e:	e9 b2 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0101893:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101897:	75 1d                	jne    f01018b6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101899:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010189c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010189f:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018a2:	6a 06                	push   $0x6
f01018a4:	ff 75 ec             	pushl  -0x14(%ebp)
f01018a7:	52                   	push   %edx
f01018a8:	50                   	push   %eax
f01018a9:	e8 94 52 00 00       	call   f0106b42 <map_frame>
f01018ae:	83 c4 10             	add    $0x10,%esp
f01018b1:	e9 8a 00 00 00       	jmp    f0101940 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01018b6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ba:	0f 85 80 00 00 00    	jne    f0101940 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01018c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c3:	83 c0 0c             	add    $0xc,%eax
f01018c6:	8b 00                	mov    (%eax),%eax
f01018c8:	8a 00                	mov    (%eax),%al
f01018ca:	3c 72                	cmp    $0x72,%al
f01018cc:	74 0e                	je     f01018dc <command_allocuserpage+0x109>
f01018ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018d1:	83 c0 0c             	add    $0xc,%eax
f01018d4:	8b 00                	mov    (%eax),%eax
f01018d6:	8a 00                	mov    (%eax),%al
f01018d8:	3c 52                	cmp    $0x52,%al
f01018da:	75 09                	jne    f01018e5 <command_allocuserpage+0x112>
			rw = 0 ;
f01018dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01018e3:	eb 3c                	jmp    f0101921 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01018e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018e8:	83 c0 0c             	add    $0xc,%eax
f01018eb:	8b 00                	mov    (%eax),%eax
f01018ed:	8a 00                	mov    (%eax),%al
f01018ef:	3c 77                	cmp    $0x77,%al
f01018f1:	74 0e                	je     f0101901 <command_allocuserpage+0x12e>
f01018f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f6:	83 c0 0c             	add    $0xc,%eax
f01018f9:	8b 00                	mov    (%eax),%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	3c 57                	cmp    $0x57,%al
f01018ff:	75 09                	jne    f010190a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101901:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101908:	eb 17                	jmp    f0101921 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f010190a:	83 ec 0c             	sub    $0xc,%esp
f010190d:	68 b8 3d 13 f0       	push   $0xf0133db8
f0101912:	e8 16 f3 ff ff       	call   f0100c2d <cprintf>
f0101917:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f010191a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101921:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101924:	83 c8 04             	or     $0x4,%eax
f0101927:	89 c1                	mov    %eax,%ecx
f0101929:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010192c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010192f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101932:	51                   	push   %ecx
f0101933:	ff 75 ec             	pushl  -0x14(%ebp)
f0101936:	52                   	push   %edx
f0101937:	50                   	push   %eax
f0101938:	e8 05 52 00 00       	call   f0106b42 <map_frame>
f010193d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101940:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101945:	c9                   	leave  
f0101946:	c3                   	ret    

f0101947 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101947:	55                   	push   %ebp
f0101948:	89 e5                	mov    %esp,%ebp
f010194a:	56                   	push   %esi
f010194b:	53                   	push   %ebx
f010194c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f010194f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101952:	83 ec 0c             	sub    $0xc,%esp
f0101955:	50                   	push   %eax
f0101956:	e8 57 54 00 00       	call   f0106db2 <calculate_available_frames>
f010195b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f010195e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101961:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101964:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101967:	8b 75 ec             	mov    -0x14(%ebp),%esi
f010196a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010196d:	01 de                	add    %ebx,%esi
f010196f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101972:	01 f3                	add    %esi,%ebx
f0101974:	83 ec 0c             	sub    $0xc,%esp
f0101977:	51                   	push   %ecx
f0101978:	52                   	push   %edx
f0101979:	50                   	push   %eax
f010197a:	53                   	push   %ebx
f010197b:	68 fc 3d 13 f0       	push   $0xf0133dfc
f0101980:	e8 a8 f2 ff ff       	call   f0100c2d <cprintf>
f0101985:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101988:	a1 b0 1e 6c f0       	mov    0xf06c1eb0,%eax
f010198d:	83 ec 08             	sub    $0x8,%esp
f0101990:	50                   	push   %eax
f0101991:	68 54 3e 13 f0       	push   $0xf0133e54
f0101996:	e8 92 f2 ff ff       	call   f0100c2d <cprintf>
f010199b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010199e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01019a6:	5b                   	pop    %ebx
f01019a7:	5e                   	pop    %esi
f01019a8:	5d                   	pop    %ebp
f01019a9:	c3                   	ret    

f01019aa <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f01019aa:	55                   	push   %ebp
f01019ab:	89 e5                	mov    %esp,%ebp
f01019ad:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f01019b0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f01019b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f01019be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f01019c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01019c8:	83 f8 02             	cmp    $0x2,%eax
f01019cb:	74 39                	je     f0101a06 <CreateEnv+0x5c>
f01019cd:	83 f8 03             	cmp    $0x3,%eax
f01019d0:	75 1d                	jne    f01019ef <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f01019d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d5:	83 c0 08             	add    $0x8,%eax
f01019d8:	8b 00                	mov    (%eax),%eax
f01019da:	83 ec 04             	sub    $0x4,%esp
f01019dd:	6a 0a                	push   $0xa
f01019df:	6a 00                	push   $0x0
f01019e1:	50                   	push   %eax
f01019e2:	e8 ce f1 02 00       	call   f0130bb5 <strtol>
f01019e7:	83 c4 10             	add    $0x10,%esp
f01019ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		case 2:
			break;
f01019ed:	eb 17                	jmp    f0101a06 <CreateEnv+0x5c>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	68 90 3e 13 f0       	push   $0xf0133e90
f01019f7:	e8 31 f2 ff ff       	call   f0100c2d <cprintf>
f01019fc:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01019ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a04:	eb 58                	jmp    f0101a5e <CreateEnv+0xb4>
		switch (number_of_arguments)
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
		case 2:
			break;
f0101a06:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a07:	83 ec 0c             	sub    $0xc,%esp
f0101a0a:	6a 02                	push   $0x2
f0101a0c:	e8 86 bc 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f0101a11:	83 c4 10             	add    $0x10,%esp
f0101a14:	85 c0                	test   %eax,%eax
f0101a16:	74 07                	je     f0101a1f <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0101a18:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101a1f:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0101a23:	76 19                	jbe    f0101a3e <CreateEnv+0x94>
f0101a25:	68 00 3f 13 f0       	push   $0xf0133f00
f0101a2a:	68 45 3f 13 f0       	push   $0xf0133f45
f0101a2f:	68 71 02 00 00       	push   $0x271
f0101a34:	68 d9 3c 13 f0       	push   $0xf0133cd9
f0101a39:	e8 68 e7 ff ff       	call   f01001a6 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a41:	83 c0 04             	add    $0x4,%eax
f0101a44:	8b 00                	mov    (%eax),%eax
f0101a46:	ff 75 f0             	pushl  -0x10(%ebp)
f0101a49:	ff 75 f4             	pushl  -0xc(%ebp)
f0101a4c:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a4f:	50                   	push   %eax
f0101a50:	e8 47 6d 00 00       	call   f010879c <env_create>
f0101a55:	83 c4 10             	add    $0x10,%esp
f0101a58:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101a5e:	c9                   	leave  
f0101a5f:	c3                   	ret    

f0101a60 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101a60:	55                   	push   %ebp
f0101a61:	89 e5                	mov    %esp,%ebp
f0101a63:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101a66:	83 ec 08             	sub    $0x8,%esp
f0101a69:	ff 75 0c             	pushl  0xc(%ebp)
f0101a6c:	ff 75 08             	pushl  0x8(%ebp)
f0101a6f:	e8 36 ff ff ff       	call   f01019aa <CreateEnv>
f0101a74:	83 c4 10             	add    $0x10,%esp
f0101a77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101a7e:	75 07                	jne    f0101a87 <command_run_program+0x27>
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	eb 46                	jmp    f0101acd <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a8a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101a8d:	83 ec 08             	sub    $0x8,%esp
f0101a90:	50                   	push   %eax
f0101a91:	68 5a 3f 13 f0       	push   $0xf0133f5a
f0101a96:	e8 92 f1 ff ff       	call   f0100c2d <cprintf>
f0101a9b:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101a9e:	c7 05 b0 1e 6c f0 00 	movl   $0x0,0xf06c1eb0
f0101aa5:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101aa8:	83 ec 0c             	sub    $0xc,%esp
f0101aab:	ff 75 f4             	pushl  -0xc(%ebp)
f0101aae:	e8 c4 35 00 00       	call   f0105077 <sched_new_env>
f0101ab3:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ab9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101abc:	83 ec 0c             	sub    $0xc,%esp
f0101abf:	50                   	push   %eax
f0101ac0:	e8 cf 35 00 00       	call   f0105094 <sched_run_env>
f0101ac5:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ac8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101acd:	c9                   	leave  
f0101ace:	c3                   	ret    

f0101acf <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101acf:	55                   	push   %ebp
f0101ad0:	89 e5                	mov    %esp,%ebp
f0101ad2:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ad8:	83 c0 04             	add    $0x4,%eax
f0101adb:	8b 00                	mov    (%eax),%eax
f0101add:	83 ec 04             	sub    $0x4,%esp
f0101ae0:	6a 0a                	push   $0xa
f0101ae2:	6a 00                	push   $0x0
f0101ae4:	50                   	push   %eax
f0101ae5:	e8 cb f0 02 00       	call   f0130bb5 <strtol>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101af3:	83 ec 0c             	sub    $0xc,%esp
f0101af6:	50                   	push   %eax
f0101af7:	e8 c4 39 00 00       	call   f01054c0 <sched_kill_env>
f0101afc:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b04:	c9                   	leave  
f0101b05:	c3                   	ret    

f0101b06 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101b06:	55                   	push   %ebp
f0101b07:	89 e5                	mov    %esp,%ebp
f0101b09:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101b0c:	83 ec 08             	sub    $0x8,%esp
f0101b0f:	ff 75 0c             	pushl  0xc(%ebp)
f0101b12:	ff 75 08             	pushl  0x8(%ebp)
f0101b15:	e8 90 fe ff ff       	call   f01019aa <CreateEnv>
f0101b1a:	83 c4 10             	add    $0x10,%esp
f0101b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101b24:	75 07                	jne    f0101b2d <commnad_load_env+0x27>
		return 0 ;
f0101b26:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b2b:	eb 2a                	jmp    f0101b57 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101b2d:	83 ec 0c             	sub    $0xc,%esp
f0101b30:	ff 75 f4             	pushl  -0xc(%ebp)
f0101b33:	e8 3f 35 00 00       	call   f0105077 <sched_new_env>
f0101b38:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b3e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101b41:	83 ec 08             	sub    $0x8,%esp
f0101b44:	50                   	push   %eax
f0101b45:	68 5a 3f 13 f0       	push   $0xf0133f5a
f0101b4a:	e8 de f0 ff ff       	call   f0100c2d <cprintf>
f0101b4f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101b52:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b57:	c9                   	leave  
f0101b58:	c3                   	ret    

f0101b59 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101b59:	55                   	push   %ebp
f0101b5a:	89 e5                	mov    %esp,%ebp
f0101b5c:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101b5f:	c7 05 b0 1e 6c f0 00 	movl   $0x0,0xf06c1eb0
f0101b66:	00 00 00 
	sched_run_all();
f0101b69:	e8 4a 31 00 00       	call   f0104cb8 <sched_run_all>

	return 0 ;
f0101b6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b73:	c9                   	leave  
f0101b74:	c3                   	ret    

f0101b75 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101b75:	55                   	push   %ebp
f0101b76:	89 e5                	mov    %esp,%ebp
f0101b78:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101b7b:	e8 2d 2f 00 00       	call   f0104aad <sched_print_all>

	return 0 ;
f0101b80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b85:	c9                   	leave  
f0101b86:	c3                   	ret    

f0101b87 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101b87:	55                   	push   %ebp
f0101b88:	89 e5                	mov    %esp,%ebp
f0101b8a:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101b8d:	e8 99 31 00 00       	call   f0104d2b <sched_kill_all>

	return 0 ;
f0101b92:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b97:	c9                   	leave  
f0101b98:	c3                   	ret    

f0101b99 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101b99:	55                   	push   %ebp
f0101b9a:	89 e5                	mov    %esp,%ebp
f0101b9c:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101b9f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101ba3:	7f 1a                	jg     f0101bbf <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101ba5:	83 ec 0c             	sub    $0xc,%esp
f0101ba8:	68 70 3f 13 f0       	push   $0xf0133f70
f0101bad:	e8 7b f0 ff ff       	call   f0100c2d <cprintf>
f0101bb2:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bba:	e9 83 00 00 00       	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101bbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc2:	83 c0 04             	add    $0x4,%eax
f0101bc5:	8b 00                	mov    (%eax),%eax
f0101bc7:	83 ec 04             	sub    $0x4,%esp
f0101bca:	6a 0a                	push   $0xa
f0101bcc:	6a 00                	push   $0x0
f0101bce:	50                   	push   %eax
f0101bcf:	e8 e1 ef 02 00       	call   f0130bb5 <strtol>
f0101bd4:	83 c4 10             	add    $0x10,%esp
f0101bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101bda:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101bde:	75 20                	jne    f0101c00 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101be0:	83 ec 0c             	sub    $0xc,%esp
f0101be3:	ff 75 f4             	pushl  -0xc(%ebp)
f0101be6:	e8 21 ba 00 00       	call   f010d60c <setPageReplacmentAlgorithmLRU>
f0101beb:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101bee:	83 ec 0c             	sub    $0xc,%esp
f0101bf1:	68 d0 3f 13 f0       	push   $0xf0133fd0
f0101bf6:	e8 32 f0 ff ff       	call   f0100c2d <cprintf>
f0101bfb:	83 c4 10             	add    $0x10,%esp
f0101bfe:	eb 3d                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101c00:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101c04:	75 20                	jne    f0101c26 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101c06:	83 ec 0c             	sub    $0xc,%esp
f0101c09:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c0c:	e8 fb b9 00 00       	call   f010d60c <setPageReplacmentAlgorithmLRU>
f0101c11:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101c14:	83 ec 0c             	sub    $0xc,%esp
f0101c17:	68 14 40 13 f0       	push   $0xf0134014
f0101c1c:	e8 0c f0 ff ff       	call   f0100c2d <cprintf>
f0101c21:	83 c4 10             	add    $0x10,%esp
f0101c24:	eb 17                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101c26:	83 ec 0c             	sub    $0xc,%esp
f0101c29:	68 54 40 13 f0       	push   $0xf0134054
f0101c2e:	e8 fa ef ff ff       	call   f0100c2d <cprintf>
f0101c33:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3b:	eb 05                	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101c3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c42:	c9                   	leave  
f0101c43:	c3                   	ret    

f0101c44 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101c44:	55                   	push   %ebp
f0101c45:	89 e5                	mov    %esp,%ebp
f0101c47:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101c4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c4d:	83 c0 04             	add    $0x4,%eax
f0101c50:	8b 00                	mov    (%eax),%eax
f0101c52:	83 ec 04             	sub    $0x4,%esp
f0101c55:	6a 0a                	push   $0xa
f0101c57:	6a 00                	push   $0x0
f0101c59:	50                   	push   %eax
f0101c5a:	e8 56 ef 02 00       	call   f0130bb5 <strtol>
f0101c5f:	83 c4 10             	add    $0x10,%esp
f0101c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101c65:	83 ec 0c             	sub    $0xc,%esp
f0101c68:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c6b:	e8 0f ba 00 00       	call   f010d67f <setPageReplacmentAlgorithmNchanceCLOCK>
f0101c70:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101c73:	83 ec 0c             	sub    $0xc,%esp
f0101c76:	68 a8 40 13 f0       	push   $0xf01340a8
f0101c7b:	e8 ad ef ff ff       	call   f0100c2d <cprintf>
f0101c80:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101c83:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c88:	c9                   	leave  
f0101c89:	c3                   	ret    

f0101c8a <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101c8a:	55                   	push   %ebp
f0101c8b:	89 e5                	mov    %esp,%ebp
f0101c8d:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101c90:	e8 aa b9 00 00       	call   f010d63f <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101c95:	83 ec 0c             	sub    $0xc,%esp
f0101c98:	68 dc 40 13 f0       	push   $0xf01340dc
f0101c9d:	e8 8b ef ff ff       	call   f0100c2d <cprintf>
f0101ca2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101caa:	c9                   	leave  
f0101cab:	c3                   	ret    

f0101cac <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101cac:	55                   	push   %ebp
f0101cad:	89 e5                	mov    %esp,%ebp
f0101caf:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101cb2:	e8 98 b9 00 00       	call   f010d64f <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101cb7:	83 ec 0c             	sub    $0xc,%esp
f0101cba:	68 08 41 13 f0       	push   $0xf0134108
f0101cbf:	e8 69 ef ff ff       	call   f0100c2d <cprintf>
f0101cc4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101cc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ccc:	c9                   	leave  
f0101ccd:	c3                   	ret    

f0101cce <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101cce:	55                   	push   %ebp
f0101ccf:	89 e5                	mov    %esp,%ebp
f0101cd1:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101cd4:	e8 86 b9 00 00       	call   f010d65f <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101cd9:	83 ec 0c             	sub    $0xc,%esp
f0101cdc:	68 30 41 13 f0       	push   $0xf0134130
f0101ce1:	e8 47 ef ff ff       	call   f0100c2d <cprintf>
f0101ce6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ce9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cee:	c9                   	leave  
f0101cef:	c3                   	ret    

f0101cf0 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101cf0:	55                   	push   %ebp
f0101cf1:	89 e5                	mov    %esp,%ebp
f0101cf3:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101cf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cf9:	83 c0 04             	add    $0x4,%eax
f0101cfc:	8b 00                	mov    (%eax),%eax
f0101cfe:	83 ec 04             	sub    $0x4,%esp
f0101d01:	6a 0a                	push   $0xa
f0101d03:	6a 00                	push   $0x0
f0101d05:	50                   	push   %eax
f0101d06:	e8 aa ee 02 00       	call   f0130bb5 <strtol>
f0101d0b:	83 c4 10             	add    $0x10,%esp
f0101d0e:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101d11:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101d15:	83 ec 0c             	sub    $0xc,%esp
f0101d18:	50                   	push   %eax
f0101d19:	e8 b4 29 00 00       	call   f01046d2 <sched_init_RR>
f0101d1e:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101d21:	a0 68 1e 6c f0       	mov    0xf06c1e68,%al
f0101d26:	0f b6 c0             	movzbl %al,%eax
f0101d29:	83 ec 08             	sub    $0x8,%esp
f0101d2c:	50                   	push   %eax
f0101d2d:	68 64 41 13 f0       	push   $0xf0134164
f0101d32:	e8 f6 ee ff ff       	call   f0100c2d <cprintf>
f0101d37:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d3f:	c9                   	leave  
f0101d40:	c3                   	ret    

f0101d41 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101d41:	55                   	push   %ebp
f0101d42:	89 e5                	mov    %esp,%ebp
f0101d44:	53                   	push   %ebx
f0101d45:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101d48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d4b:	83 c0 04             	add    $0x4,%eax
f0101d4e:	8b 00                	mov    (%eax),%eax
f0101d50:	83 ec 04             	sub    $0x4,%esp
f0101d53:	6a 0a                	push   $0xa
f0101d55:	6a 00                	push   $0x0
f0101d57:	50                   	push   %eax
f0101d58:	e8 58 ee 02 00       	call   f0130bb5 <strtol>
f0101d5d:	83 c4 10             	add    $0x10,%esp
f0101d60:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d63:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101d6a:	eb 2e                	jmp    f0101d9a <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d6f:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101d7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d7f:	01 d0                	add    %edx,%eax
f0101d81:	8b 00                	mov    (%eax),%eax
f0101d83:	83 ec 04             	sub    $0x4,%esp
f0101d86:	6a 0a                	push   $0xa
f0101d88:	6a 00                	push   $0x0
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 25 ee 02 00       	call   f0130bb5 <strtol>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d97:	ff 45 f4             	incl   -0xc(%ebp)
f0101d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101da0:	7c ca                	jl     f0101d6c <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101da2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101da6:	83 ec 08             	sub    $0x8,%esp
f0101da9:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101dac:	52                   	push   %edx
f0101dad:	50                   	push   %eax
f0101dae:	e8 75 29 00 00       	call   f0104728 <sched_init_MLFQ>
f0101db3:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101db6:	83 ec 0c             	sub    $0xc,%esp
f0101db9:	68 9c 41 13 f0       	push   $0xf013419c
f0101dbe:	e8 6a ee ff ff       	call   f0100c2d <cprintf>
f0101dc3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101dc6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dcd:	eb 21                	jmp    f0101df0 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0101dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd2:	05 68 1e 6c f0       	add    $0xf06c1e68,%eax
f0101dd7:	8a 00                	mov    (%eax),%al
f0101dd9:	0f b6 c0             	movzbl %al,%eax
f0101ddc:	83 ec 08             	sub    $0x8,%esp
f0101ddf:	50                   	push   %eax
f0101de0:	68 c9 41 13 f0       	push   $0xf01341c9
f0101de5:	e8 43 ee ff ff       	call   f0100c2d <cprintf>
f0101dea:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ded:	ff 45 f0             	incl   -0x10(%ebp)
f0101df0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0101df5:	0f b6 c0             	movzbl %al,%eax
f0101df8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101dfb:	7f d2                	jg     f0101dcf <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0101dfd:	83 ec 0c             	sub    $0xc,%esp
f0101e00:	68 61 3d 13 f0       	push   $0xf0133d61
f0101e05:	e8 23 ee ff ff       	call   f0100c2d <cprintf>
f0101e0a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101e15:	c9                   	leave  
f0101e16:	c3                   	ret    

f0101e17 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0101e17:	55                   	push   %ebp
f0101e18:	89 e5                	mov    %esp,%ebp
f0101e1a:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0101e1d:	e8 39 25 00 00       	call   f010435b <isSchedMethodMLFQ>
f0101e22:	85 c0                	test   %eax,%eax
f0101e24:	74 59                	je     f0101e7f <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0101e26:	83 ec 0c             	sub    $0xc,%esp
f0101e29:	68 d0 41 13 f0       	push   $0xf01341d0
f0101e2e:	e8 fa ed ff ff       	call   f0100c2d <cprintf>
f0101e33:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101e3d:	eb 21                	jmp    f0101e60 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0101e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e42:	05 68 1e 6c f0       	add    $0xf06c1e68,%eax
f0101e47:	8a 00                	mov    (%eax),%al
f0101e49:	0f b6 c0             	movzbl %al,%eax
f0101e4c:	83 ec 08             	sub    $0x8,%esp
f0101e4f:	50                   	push   %eax
f0101e50:	68 c9 41 13 f0       	push   $0xf01341c9
f0101e55:	e8 d3 ed ff ff       	call   f0100c2d <cprintf>
f0101e5a:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e5d:	ff 45 f4             	incl   -0xc(%ebp)
f0101e60:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0101e65:	0f b6 c0             	movzbl %al,%eax
f0101e68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0101e6b:	7f d2                	jg     f0101e3f <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	68 61 3d 13 f0       	push   $0xf0133d61
f0101e75:	e8 b3 ed ff ff       	call   f0100c2d <cprintf>
f0101e7a:	83 c4 10             	add    $0x10,%esp
f0101e7d:	eb 34                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0101e7f:	e8 bd 24 00 00       	call   f0104341 <isSchedMethodRR>
f0101e84:	85 c0                	test   %eax,%eax
f0101e86:	74 1b                	je     f0101ea3 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0101e88:	a0 68 1e 6c f0       	mov    0xf06c1e68,%al
f0101e8d:	0f b6 c0             	movzbl %al,%eax
f0101e90:	83 ec 08             	sub    $0x8,%esp
f0101e93:	50                   	push   %eax
f0101e94:	68 04 42 13 f0       	push   $0xf0134204
f0101e99:	e8 8f ed ff ff       	call   f0100c2d <cprintf>
f0101e9e:	83 c4 10             	add    $0x10,%esp
f0101ea1:	eb 10                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0101ea3:	83 ec 0c             	sub    $0xc,%esp
f0101ea6:	68 40 42 13 f0       	push   $0xf0134240
f0101eab:	e8 7d ed ff ff       	call   f0100c2d <cprintf>
f0101eb0:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101eb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eb8:	c9                   	leave  
f0101eb9:	c3                   	ret    

f0101eba <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0101eba:	55                   	push   %ebp
f0101ebb:	89 e5                	mov    %esp,%ebp
f0101ebd:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0101ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ec3:	83 c0 04             	add    $0x4,%eax
f0101ec6:	8b 00                	mov    (%eax),%eax
f0101ec8:	83 ec 04             	sub    $0x4,%esp
f0101ecb:	6a 0a                	push   $0xa
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	50                   	push   %eax
f0101ed0:	e8 e0 ec 02 00       	call   f0130bb5 <strtol>
f0101ed5:	83 c4 10             	add    $0x10,%esp
f0101ed8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0101edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ede:	0f b6 c0             	movzbl %al,%eax
f0101ee1:	83 ec 0c             	sub    $0xc,%esp
f0101ee4:	50                   	push   %eax
f0101ee5:	e8 08 dc 02 00       	call   f012faf2 <chksch>
f0101eea:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0101eed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101ef1:	75 12                	jne    f0101f05 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0101ef3:	83 ec 0c             	sub    $0xc,%esp
f0101ef6:	68 68 42 13 f0       	push   $0xf0134268
f0101efb:	e8 2d ed ff ff       	call   f0100c2d <cprintf>
f0101f00:	83 c4 10             	add    $0x10,%esp
f0101f03:	eb 16                	jmp    f0101f1b <command_sch_test+0x61>
	else if (status == 1)
f0101f05:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101f09:	75 10                	jne    f0101f1b <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0101f0b:	83 ec 0c             	sub    $0xc,%esp
f0101f0e:	68 90 42 13 f0       	push   $0xf0134290
f0101f13:	e8 15 ed ff ff       	call   f0100c2d <cprintf>
f0101f18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f20:	c9                   	leave  
f0101f21:	c3                   	ret    

f0101f22 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0101f22:	55                   	push   %ebp
f0101f23:	89 e5                	mov    %esp,%ebp
f0101f25:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0101f28:	e8 80 b7 00 00       	call   f010d6ad <isPageReplacmentAlgorithmCLOCK>
f0101f2d:	85 c0                	test   %eax,%eax
f0101f2f:	74 15                	je     f0101f46 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0101f31:	83 ec 0c             	sub    $0xc,%esp
f0101f34:	68 b4 42 13 f0       	push   $0xf01342b4
f0101f39:	e8 ef ec ff ff       	call   f0100c2d <cprintf>
f0101f3e:	83 c4 10             	add    $0x10,%esp
f0101f41:	e9 8c 00 00 00       	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0101f46:	83 ec 0c             	sub    $0xc,%esp
f0101f49:	6a 01                	push   $0x1
f0101f4b:	e8 47 b7 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f0101f50:	83 c4 10             	add    $0x10,%esp
f0101f53:	85 c0                	test   %eax,%eax
f0101f55:	74 12                	je     f0101f69 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0101f57:	83 ec 0c             	sub    $0xc,%esp
f0101f5a:	68 dc 42 13 f0       	push   $0xf01342dc
f0101f5f:	e8 c9 ec ff ff       	call   f0100c2d <cprintf>
f0101f64:	83 c4 10             	add    $0x10,%esp
f0101f67:	eb 69                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101f69:	83 ec 0c             	sub    $0xc,%esp
f0101f6c:	6a 02                	push   $0x2
f0101f6e:	e8 24 b7 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f0101f73:	83 c4 10             	add    $0x10,%esp
f0101f76:	85 c0                	test   %eax,%eax
f0101f78:	74 12                	je     f0101f8c <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0101f7a:	83 ec 0c             	sub    $0xc,%esp
f0101f7d:	68 1c 43 13 f0       	push   $0xf013431c
f0101f82:	e8 a6 ec ff ff       	call   f0100c2d <cprintf>
f0101f87:	83 c4 10             	add    $0x10,%esp
f0101f8a:	eb 46                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0101f8c:	e8 37 b7 00 00       	call   f010d6c8 <isPageReplacmentAlgorithmFIFO>
f0101f91:	85 c0                	test   %eax,%eax
f0101f93:	74 12                	je     f0101fa7 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0101f95:	83 ec 0c             	sub    $0xc,%esp
f0101f98:	68 58 43 13 f0       	push   $0xf0134358
f0101f9d:	e8 8b ec ff ff       	call   f0100c2d <cprintf>
f0101fa2:	83 c4 10             	add    $0x10,%esp
f0101fa5:	eb 2b                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0101fa7:	e8 37 b7 00 00       	call   f010d6e3 <isPageReplacmentAlgorithmModifiedCLOCK>
f0101fac:	85 c0                	test   %eax,%eax
f0101fae:	74 12                	je     f0101fc2 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0101fb0:	83 ec 0c             	sub    $0xc,%esp
f0101fb3:	68 7c 43 13 f0       	push   $0xf013437c
f0101fb8:	e8 70 ec ff ff       	call   f0100c2d <cprintf>
f0101fbd:	83 c4 10             	add    $0x10,%esp
f0101fc0:	eb 10                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0101fc2:	83 ec 0c             	sub    $0xc,%esp
f0101fc5:	68 ac 43 13 f0       	push   $0xf01343ac
f0101fca:	e8 5e ec ff ff       	call   f0100c2d <cprintf>
f0101fcf:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fd7:	c9                   	leave  
f0101fd8:	c3                   	ret    

f0101fd9 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0101fd9:	55                   	push   %ebp
f0101fda:	89 e5                	mov    %esp,%ebp
f0101fdc:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0101fdf:	e8 ce ee ff ff       	call   f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0101fe4:	83 ec 0c             	sub    $0xc,%esp
f0101fe7:	68 d8 43 13 f0       	push   $0xf01343d8
f0101fec:	e8 3c ec ff ff       	call   f0100c2d <cprintf>
f0101ff1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ff4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ff9:	c9                   	leave  
f0101ffa:	c3                   	ret    

f0101ffb <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0101ffb:	55                   	push   %ebp
f0101ffc:	89 e5                	mov    %esp,%ebp
f0101ffe:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102001:	e8 bc ee ff ff       	call   f0100ec2 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102006:	83 ec 0c             	sub    $0xc,%esp
f0102009:	68 08 44 13 f0       	push   $0xf0134408
f010200e:	e8 1a ec ff ff       	call   f0100c2d <cprintf>
f0102013:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102016:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102023:	e8 aa ee ff ff       	call   f0100ed2 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102028:	83 ec 0c             	sub    $0xc,%esp
f010202b:	68 38 44 13 f0       	push   $0xf0134438
f0102030:	e8 f8 eb ff ff       	call   f0100c2d <cprintf>
f0102035:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102038:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010203d:	c9                   	leave  
f010203e:	c3                   	ret    

f010203f <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010203f:	55                   	push   %ebp
f0102040:	89 e5                	mov    %esp,%ebp
f0102042:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102045:	e8 98 ee ff ff       	call   f0100ee2 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	68 68 44 13 f0       	push   $0xf0134468
f0102052:	e8 d6 eb ff ff       	call   f0100c2d <cprintf>
f0102057:	83 c4 10             	add    $0x10,%esp
	return 0;
f010205a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010205f:	c9                   	leave  
f0102060:	c3                   	ret    

f0102061 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102061:	55                   	push   %ebp
f0102062:	89 e5                	mov    %esp,%ebp
f0102064:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102067:	e8 86 ee ff ff       	call   f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>
f010206c:	84 c0                	test   %al,%al
f010206e:	74 12                	je     f0102082 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102070:	83 ec 0c             	sub    $0xc,%esp
f0102073:	68 98 44 13 f0       	push   $0xf0134498
f0102078:	e8 b0 eb ff ff       	call   f0100c2d <cprintf>
f010207d:	83 c4 10             	add    $0x10,%esp
f0102080:	eb 61                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102082:	e8 80 ee ff ff       	call   f0100f07 <isUHeapPlacementStrategyBESTFIT>
f0102087:	84 c0                	test   %al,%al
f0102089:	74 12                	je     f010209d <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f010208b:	83 ec 0c             	sub    $0xc,%esp
f010208e:	68 c4 44 13 f0       	push   $0xf01344c4
f0102093:	e8 95 eb ff ff       	call   f0100c2d <cprintf>
f0102098:	83 c4 10             	add    $0x10,%esp
f010209b:	eb 46                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010209d:	e8 7a ee ff ff       	call   f0100f1c <isUHeapPlacementStrategyNEXTFIT>
f01020a2:	84 c0                	test   %al,%al
f01020a4:	74 12                	je     f01020b8 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01020a6:	83 ec 0c             	sub    $0xc,%esp
f01020a9:	68 f0 44 13 f0       	push   $0xf01344f0
f01020ae:	e8 7a eb ff ff       	call   f0100c2d <cprintf>
f01020b3:	83 c4 10             	add    $0x10,%esp
f01020b6:	eb 2b                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01020b8:	e8 74 ee ff ff       	call   f0100f31 <isUHeapPlacementStrategyWORSTFIT>
f01020bd:	84 c0                	test   %al,%al
f01020bf:	74 12                	je     f01020d3 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01020c1:	83 ec 0c             	sub    $0xc,%esp
f01020c4:	68 1c 45 13 f0       	push   $0xf013451c
f01020c9:	e8 5f eb ff ff       	call   f0100c2d <cprintf>
f01020ce:	83 c4 10             	add    $0x10,%esp
f01020d1:	eb 10                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01020d3:	83 ec 0c             	sub    $0xc,%esp
f01020d6:	68 48 45 13 f0       	push   $0xf0134548
f01020db:	e8 4d eb ff ff       	call   f0100c2d <cprintf>
f01020e0:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020e8:	c9                   	leave  
f01020e9:	c3                   	ret    

f01020ea <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01020ea:	55                   	push   %ebp
f01020eb:	89 e5                	mov    %esp,%ebp
f01020ed:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01020f0:	e8 05 ed ff ff       	call   f0100dfa <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01020f5:	83 ec 0c             	sub    $0xc,%esp
f01020f8:	68 74 45 13 f0       	push   $0xf0134574
f01020fd:	e8 2b eb ff ff       	call   f0100c2d <cprintf>
f0102102:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010210a:	c9                   	leave  
f010210b:	c3                   	ret    

f010210c <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010210c:	55                   	push   %ebp
f010210d:	89 e5                	mov    %esp,%ebp
f010210f:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102112:	e8 f3 ec ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102117:	83 ec 0c             	sub    $0xc,%esp
f010211a:	68 74 45 13 f0       	push   $0xf0134574
f010211f:	e8 09 eb ff ff       	call   f0100c2d <cprintf>
f0102124:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102127:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212c:	c9                   	leave  
f010212d:	c3                   	ret    

f010212e <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010212e:	55                   	push   %ebp
f010212f:	89 e5                	mov    %esp,%ebp
f0102131:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0102134:	e8 e1 ec ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102139:	83 ec 0c             	sub    $0xc,%esp
f010213c:	68 a8 45 13 f0       	push   $0xf01345a8
f0102141:	e8 e7 ea ff ff       	call   f0100c2d <cprintf>
f0102146:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102149:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214e:	c9                   	leave  
f010214f:	c3                   	ret    

f0102150 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102150:	55                   	push   %ebp
f0102151:	89 e5                	mov    %esp,%ebp
f0102153:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102156:	e8 cf ec ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010215b:	83 ec 0c             	sub    $0xc,%esp
f010215e:	68 d8 45 13 f0       	push   $0xf01345d8
f0102163:	e8 c5 ea ff ff       	call   f0100c2d <cprintf>
f0102168:	83 c4 10             	add    $0x10,%esp
	return 0;
f010216b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102170:	c9                   	leave  
f0102171:	c3                   	ret    

f0102172 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102172:	55                   	push   %ebp
f0102173:	89 e5                	mov    %esp,%ebp
f0102175:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102178:	e8 bd ec ff ff       	call   f0100e3a <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010217d:	83 ec 0c             	sub    $0xc,%esp
f0102180:	68 08 46 13 f0       	push   $0xf0134608
f0102185:	e8 a3 ea ff ff       	call   f0100c2d <cprintf>
f010218a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010218d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102192:	c9                   	leave  
f0102193:	c3                   	ret    

f0102194 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102194:	55                   	push   %ebp
f0102195:	89 e5                	mov    %esp,%ebp
f0102197:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010219a:	e8 ab ec ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f010219f:	84 c0                	test   %al,%al
f01021a1:	74 12                	je     f01021b5 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01021a3:	83 ec 0c             	sub    $0xc,%esp
f01021a6:	68 3c 46 13 f0       	push   $0xf013463c
f01021ab:	e8 7d ea ff ff       	call   f0100c2d <cprintf>
f01021b0:	83 c4 10             	add    $0x10,%esp
f01021b3:	eb 7c                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01021b5:	e8 a4 ec ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01021ba:	84 c0                	test   %al,%al
f01021bc:	74 12                	je     f01021d0 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01021be:	83 ec 0c             	sub    $0xc,%esp
f01021c1:	68 78 46 13 f0       	push   $0xf0134678
f01021c6:	e8 62 ea ff ff       	call   f0100c2d <cprintf>
f01021cb:	83 c4 10             	add    $0x10,%esp
f01021ce:	eb 61                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01021d0:	e8 9e ec ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01021d5:	84 c0                	test   %al,%al
f01021d7:	74 12                	je     f01021eb <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01021d9:	83 ec 0c             	sub    $0xc,%esp
f01021dc:	68 a8 46 13 f0       	push   $0xf01346a8
f01021e1:	e8 47 ea ff ff       	call   f0100c2d <cprintf>
f01021e6:	83 c4 10             	add    $0x10,%esp
f01021e9:	eb 46                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01021eb:	e8 98 ec ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f01021f0:	84 c0                	test   %al,%al
f01021f2:	74 12                	je     f0102206 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01021f4:	83 ec 0c             	sub    $0xc,%esp
f01021f7:	68 d4 46 13 f0       	push   $0xf01346d4
f01021fc:	e8 2c ea ff ff       	call   f0100c2d <cprintf>
f0102201:	83 c4 10             	add    $0x10,%esp
f0102204:	eb 2b                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102206:	e8 92 ec ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f010220b:	84 c0                	test   %al,%al
f010220d:	74 12                	je     f0102221 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010220f:	83 ec 0c             	sub    $0xc,%esp
f0102212:	68 00 47 13 f0       	push   $0xf0134700
f0102217:	e8 11 ea ff ff       	call   f0100c2d <cprintf>
f010221c:	83 c4 10             	add    $0x10,%esp
f010221f:	eb 10                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102221:	83 ec 0c             	sub    $0xc,%esp
f0102224:	68 30 47 13 f0       	push   $0xf0134730
f0102229:	e8 ff e9 ff ff       	call   f0100c2d <cprintf>
f010222e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102231:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102236:	c9                   	leave  
f0102237:	c3                   	ret    

f0102238 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102238:	55                   	push   %ebp
f0102239:	89 e5                	mov    %esp,%ebp
f010223b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010223e:	e8 17 b5 00 00       	call   f010d75a <isBufferingEnabled>
f0102243:	84 c0                	test   %al,%al
f0102245:	75 12                	jne    f0102259 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 60 47 13 f0       	push   $0xf0134760
f010224f:	e8 d9 e9 ff ff       	call   f0100c2d <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 1d                	jmp    f0102276 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	6a 00                	push   $0x0
f010225e:	e8 d1 b4 00 00       	call   f010d734 <enableModifiedBuffer>
f0102263:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102266:	83 ec 0c             	sub    $0xc,%esp
f0102269:	68 9c 47 13 f0       	push   $0xf013479c
f010226e:	e8 ba e9 ff ff       	call   f0100c2d <cprintf>
f0102273:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010227b:	c9                   	leave  
f010227c:	c3                   	ret    

f010227d <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010227d:	55                   	push   %ebp
f010227e:	89 e5                	mov    %esp,%ebp
f0102280:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102283:	e8 d2 b4 00 00       	call   f010d75a <isBufferingEnabled>
f0102288:	84 c0                	test   %al,%al
f010228a:	75 12                	jne    f010229e <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010228c:	83 ec 0c             	sub    $0xc,%esp
f010228f:	68 60 47 13 f0       	push   $0xf0134760
f0102294:	e8 94 e9 ff ff       	call   f0100c2d <cprintf>
f0102299:	83 c4 10             	add    $0x10,%esp
f010229c:	eb 1d                	jmp    f01022bb <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010229e:	83 ec 0c             	sub    $0xc,%esp
f01022a1:	6a 01                	push   $0x1
f01022a3:	e8 8c b4 00 00       	call   f010d734 <enableModifiedBuffer>
f01022a8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01022ab:	83 ec 0c             	sub    $0xc,%esp
f01022ae:	68 c0 47 13 f0       	push   $0xf01347c0
f01022b3:	e8 75 e9 ff ff       	call   f0100c2d <cprintf>
f01022b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01022bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022c0:	c9                   	leave  
f01022c1:	c3                   	ret    

f01022c2 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01022c2:	55                   	push   %ebp
f01022c3:	89 e5                	mov    %esp,%ebp
f01022c5:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01022c8:	83 ec 0c             	sub    $0xc,%esp
f01022cb:	6a 00                	push   $0x0
f01022cd:	e8 7a b4 00 00       	call   f010d74c <enableBuffering>
f01022d2:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01022d5:	83 ec 0c             	sub    $0xc,%esp
f01022d8:	6a 00                	push   $0x0
f01022da:	e8 55 b4 00 00       	call   f010d734 <enableModifiedBuffer>
f01022df:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01022e2:	83 ec 0c             	sub    $0xc,%esp
f01022e5:	68 e0 47 13 f0       	push   $0xf01347e0
f01022ea:	e8 3e e9 ff ff       	call   f0100c2d <cprintf>
f01022ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f7:	c9                   	leave  
f01022f8:	c3                   	ret    

f01022f9 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01022ff:	83 ec 0c             	sub    $0xc,%esp
f0102302:	6a 01                	push   $0x1
f0102304:	e8 43 b4 00 00       	call   f010d74c <enableBuffering>
f0102309:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010230c:	83 ec 0c             	sub    $0xc,%esp
f010230f:	6a 01                	push   $0x1
f0102311:	e8 1e b4 00 00       	call   f010d734 <enableModifiedBuffer>
f0102316:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102319:	e8 54 b4 00 00       	call   f010d772 <getModifiedBufferLength>
f010231e:	85 c0                	test   %eax,%eax
f0102320:	75 59                	jne    f010237b <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 fc 47 13 f0       	push   $0xf01347fc
f010232a:	e8 fe e8 ff ff       	call   f0100c2d <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102332:	83 ec 08             	sub    $0x8,%esp
f0102335:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102338:	50                   	push   %eax
f0102339:	68 2c 48 13 f0       	push   $0xf013482c
f010233e:	e8 0c e3 02 00       	call   f013064f <readline>
f0102343:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102346:	83 ec 04             	sub    $0x4,%esp
f0102349:	6a 0a                	push   $0xa
f010234b:	6a 00                	push   $0x0
f010234d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102350:	50                   	push   %eax
f0102351:	e8 5f e8 02 00       	call   f0130bb5 <strtol>
f0102356:	83 c4 10             	add    $0x10,%esp
f0102359:	83 ec 0c             	sub    $0xc,%esp
f010235c:	50                   	push   %eax
f010235d:	e8 02 b4 00 00       	call   f010d764 <setModifiedBufferLength>
f0102362:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102365:	e8 08 b4 00 00       	call   f010d772 <getModifiedBufferLength>
f010236a:	83 ec 08             	sub    $0x8,%esp
f010236d:	50                   	push   %eax
f010236e:	68 58 48 13 f0       	push   $0xf0134858
f0102373:	e8 b5 e8 ff ff       	call   f0100c2d <cprintf>
f0102378:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f010237b:	83 ec 0c             	sub    $0xc,%esp
f010237e:	68 7d 48 13 f0       	push   $0xf013487d
f0102383:	e8 a5 e8 ff ff       	call   f0100c2d <cprintf>
f0102388:	83 c4 10             	add    $0x10,%esp
	return 0;
f010238b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102390:	c9                   	leave  
f0102391:	c3                   	ret    

f0102392 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102392:	55                   	push   %ebp
f0102393:	89 e5                	mov    %esp,%ebp
f0102395:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102398:	e8 bd b3 00 00       	call   f010d75a <isBufferingEnabled>
f010239d:	84 c0                	test   %al,%al
f010239f:	75 12                	jne    f01023b3 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01023a1:	83 ec 0c             	sub    $0xc,%esp
f01023a4:	68 98 48 13 f0       	push   $0xf0134898
f01023a9:	e8 7f e8 ff ff       	call   f0100c2d <cprintf>
f01023ae:	83 c4 10             	add    $0x10,%esp
f01023b1:	eb 19                	jmp    f01023cc <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01023b3:	e8 8a b3 00 00       	call   f010d742 <isModifiedBufferEnabled>
f01023b8:	84 c0                	test   %al,%al
f01023ba:	75 10                	jne    f01023cc <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01023bc:	83 ec 0c             	sub    $0xc,%esp
f01023bf:	68 e8 48 13 f0       	push   $0xf01348e8
f01023c4:	e8 64 e8 ff ff       	call   f0100c2d <cprintf>
f01023c9:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01023cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023cf:	83 c0 04             	add    $0x4,%eax
f01023d2:	8b 00                	mov    (%eax),%eax
f01023d4:	83 ec 04             	sub    $0x4,%esp
f01023d7:	6a 0a                	push   $0xa
f01023d9:	6a 00                	push   $0x0
f01023db:	50                   	push   %eax
f01023dc:	e8 d4 e7 02 00       	call   f0130bb5 <strtol>
f01023e1:	83 c4 10             	add    $0x10,%esp
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	50                   	push   %eax
f01023e8:	e8 77 b3 00 00       	call   f010d764 <setModifiedBufferLength>
f01023ed:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01023f0:	e8 7d b3 00 00       	call   f010d772 <getModifiedBufferLength>
f01023f5:	83 ec 08             	sub    $0x8,%esp
f01023f8:	50                   	push   %eax
f01023f9:	68 58 48 13 f0       	push   $0xf0134858
f01023fe:	e8 2a e8 ff ff       	call   f0100c2d <cprintf>
f0102403:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102406:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010240b:	c9                   	leave  
f010240c:	c3                   	ret    

f010240d <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010240d:	55                   	push   %ebp
f010240e:	89 e5                	mov    %esp,%ebp
f0102410:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102413:	e8 42 b3 00 00       	call   f010d75a <isBufferingEnabled>
f0102418:	84 c0                	test   %al,%al
f010241a:	75 12                	jne    f010242e <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010241c:	83 ec 0c             	sub    $0xc,%esp
f010241f:	68 98 48 13 f0       	push   $0xf0134898
f0102424:	e8 04 e8 ff ff       	call   f0100c2d <cprintf>
f0102429:	83 c4 10             	add    $0x10,%esp
f010242c:	eb 19                	jmp    f0102447 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010242e:	e8 0f b3 00 00       	call   f010d742 <isModifiedBufferEnabled>
f0102433:	84 c0                	test   %al,%al
f0102435:	75 10                	jne    f0102447 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102437:	83 ec 0c             	sub    $0xc,%esp
f010243a:	68 e8 48 13 f0       	push   $0xf01348e8
f010243f:	e8 e9 e7 ff ff       	call   f0100c2d <cprintf>
f0102444:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102447:	e8 26 b3 00 00       	call   f010d772 <getModifiedBufferLength>
f010244c:	83 ec 08             	sub    $0x8,%esp
f010244f:	50                   	push   %eax
f0102450:	68 2e 49 13 f0       	push   $0xf013492e
f0102455:	e8 d3 e7 ff ff       	call   f0100c2d <cprintf>
f010245a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010245d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102462:	c9                   	leave  
f0102463:	c3                   	ret    

f0102464 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102464:	55                   	push   %ebp
f0102465:	89 e5                	mov    %esp,%ebp
f0102467:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f010246a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102471:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102475:	75 1b                	jne    f0102492 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102477:	8b 45 0c             	mov    0xc(%ebp),%eax
f010247a:	83 c0 04             	add    $0x4,%eax
f010247d:	8b 00                	mov    (%eax),%eax
f010247f:	83 ec 04             	sub    $0x4,%esp
f0102482:	6a 0a                	push   $0xa
f0102484:	6a 00                	push   $0x0
f0102486:	50                   	push   %eax
f0102487:	e8 29 e7 02 00       	call   f0130bb5 <strtol>
f010248c:	83 c4 10             	add    $0x10,%esp
f010248f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102492:	e8 b3 e9 ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f0102497:	84 c0                	test   %al,%al
f0102499:	74 0a                	je     f01024a5 <command_test_kmalloc+0x41>
		test_kmalloc();
f010249b:	e8 c1 4a 01 00       	call   f0116f61 <test_kmalloc>
f01024a0:	e9 e8 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01024a5:	e8 b4 e9 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01024aa:	84 c0                	test   %al,%al
f01024ac:	74 44                	je     f01024f2 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01024ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024b2:	75 1a                	jne    f01024ce <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01024b4:	83 ec 0c             	sub    $0xc,%esp
f01024b7:	68 4c 49 13 f0       	push   $0xf013494c
f01024bc:	e8 6c e7 ff ff       	call   f0100c2d <cprintf>
f01024c1:	83 c4 10             	add    $0x10,%esp
			return 0;
f01024c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01024c9:	e9 c4 00 00 00       	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01024ce:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024d2:	75 0a                	jne    f01024de <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01024d4:	e8 11 99 01 00       	call   f011bdea <test_kmalloc_firstfit1>
f01024d9:	e9 af 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01024de:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01024e2:	0f 85 a5 00 00 00    	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01024e8:	e8 9f ac 01 00       	call   f011d18c <test_kmalloc_firstfit2>
f01024ed:	e9 9b 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01024f2:	e8 7c e9 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01024f7:	84 c0                	test   %al,%al
f01024f9:	74 44                	je     f010253f <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01024fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024ff:	75 17                	jne    f0102518 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102501:	83 ec 0c             	sub    $0xc,%esp
f0102504:	68 9c 49 13 f0       	push   $0xf013499c
f0102509:	e8 1f e7 ff ff       	call   f0100c2d <cprintf>
f010250e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102511:	b8 00 00 00 00       	mov    $0x0,%eax
f0102516:	eb 7a                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102518:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010251c:	75 07                	jne    f0102525 <command_test_kmalloc+0xc1>
			test_kmalloc();
f010251e:	e8 3e 4a 01 00       	call   f0116f61 <test_kmalloc>
f0102523:	eb 68                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102525:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102529:	75 07                	jne    f0102532 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f010252b:	e8 84 73 01 00       	call   f01198b4 <test_kmalloc_bestfit1>
f0102530:	eb 5b                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 3)
f0102532:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102536:	75 55                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102538:	e8 cd 85 01 00       	call   f011ab0a <test_kmalloc_bestfit2>
f010253d:	eb 4e                	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010253f:	e8 44 e9 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102544:	84 c0                	test   %al,%al
f0102546:	74 37                	je     f010257f <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102548:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010254c:	75 17                	jne    f0102565 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010254e:	83 ec 0c             	sub    $0xc,%esp
f0102551:	68 ec 49 13 f0       	push   $0xf01349ec
f0102556:	e8 d2 e6 ff ff       	call   f0100c2d <cprintf>
f010255b:	83 c4 10             	add    $0x10,%esp
			return 0;
f010255e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102563:	eb 2d                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102565:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102569:	75 07                	jne    f0102572 <command_test_kmalloc+0x10e>
			test_kmalloc();
f010256b:	e8 f1 49 01 00       	call   f0116f61 <test_kmalloc>
f0102570:	eb 1b                	jmp    f010258d <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102572:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102576:	75 15                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102578:	e8 42 5c 01 00       	call   f01181bf <test_kmalloc_nextfit>
f010257d:	eb 0e                	jmp    f010258d <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010257f:	e8 19 e9 ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f0102584:	84 c0                	test   %al,%al
f0102586:	74 05                	je     f010258d <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102588:	e8 94 ba 01 00       	call   f011e021 <test_kmalloc_worstfit>
	return 0;
f010258d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102592:	c9                   	leave  
f0102593:	c3                   	ret    

f0102594 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102594:	55                   	push   %ebp
f0102595:	89 e5                	mov    %esp,%ebp
f0102597:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010259a:	e8 d4 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f010259f:	84 c0                	test   %al,%al
f01025a1:	75 09                	jne    f01025ac <command_test_kfree+0x18>
f01025a3:	e8 b6 e8 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	74 07                	je     f01025b3 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01025ac:	e8 12 f2 01 00       	call   f01217c3 <test_kfree_bestfirstfit>
f01025b1:	eb 05                	jmp    f01025b8 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01025b3:	e8 b9 d0 01 00       	call   f011f671 <test_kfree>
	}
	return 0;
f01025b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025bd:	c9                   	leave  
f01025be:	c3                   	ret    

f01025bf <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01025bf:	55                   	push   %ebp
f01025c0:	89 e5                	mov    %esp,%ebp
f01025c2:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01025c5:	e8 f5 0b 02 00       	call   f01231bf <test_kheap_phys_addr>
	return 0;
f01025ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025cf:	c9                   	leave  
f01025d0:	c3                   	ret    

f01025d1 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01025d1:	55                   	push   %ebp
f01025d2:	89 e5                	mov    %esp,%ebp
f01025d4:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01025d7:	e8 b3 20 02 00       	call   f012468f <test_kheap_virt_addr>
	return 0;
f01025dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025e1:	c9                   	leave  
f01025e2:	c3                   	ret    

f01025e3 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01025e3:	55                   	push   %ebp
f01025e4:	89 e5                	mov    %esp,%ebp
f01025e6:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01025e9:	e8 7e 35 02 00       	call   f0125b6c <test_three_creation_functions>
	return 0;
f01025ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025f3:	c9                   	leave  
f01025f4:	c3                   	ret    

f01025f5 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01025f5:	55                   	push   %ebp
f01025f6:	89 e5                	mov    %esp,%ebp
f01025f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01025fb:	e8 88 e8 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102600:	84 c0                	test   %al,%al
f0102602:	74 07                	je     f010260b <command_test_krealloc+0x16>
		test_krealloc();
f0102604:	e8 7a 8f 02 00       	call   f012b583 <test_krealloc>
f0102609:	eb 0e                	jmp    f0102619 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f010260b:	e8 63 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102610:	84 c0                	test   %al,%al
f0102612:	74 05                	je     f0102619 <command_test_krealloc+0x24>
		test_krealloc_BF();
f0102614:	e8 1a af 02 00       	call   f012d533 <test_krealloc_BF>
	return 0;
f0102619:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010261e:	c9                   	leave  
f010261f:	c3                   	ret    

f0102620 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102620:	55                   	push   %ebp
f0102621:	89 e5                	mov    %esp,%ebp
f0102623:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102626:	e8 69 35 01 00       	call   f0115b94 <test_priority_normal_and_higher>
	return 0;
f010262b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102630:	c9                   	leave  
f0102631:	c3                   	ret    

f0102632 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102632:	55                   	push   %ebp
f0102633:	89 e5                	mov    %esp,%ebp
f0102635:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102638:	e8 31 3f 01 00       	call   f011656e <test_priority_normal_and_lower>
	return 0;
f010263d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102642:	c9                   	leave  
f0102643:	c3                   	ret    

f0102644 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102644:	55                   	push   %ebp
f0102645:	89 e5                	mov    %esp,%ebp
f0102647:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010264a:	e8 57 37 02 00       	call   f0125da6 <test_kfreeall>
	return 0;
f010264f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102654:	c9                   	leave  
f0102655:	c3                   	ret    

f0102656 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102656:	55                   	push   %ebp
f0102657:	89 e5                	mov    %esp,%ebp
f0102659:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010265c:	e8 31 4e 02 00       	call   f0127492 <test_kexpand>
	return 0;
f0102661:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102666:	c9                   	leave  
f0102667:	c3                   	ret    

f0102668 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102668:	55                   	push   %ebp
f0102669:	89 e5                	mov    %esp,%ebp
f010266b:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010266e:	e8 a0 5b 02 00       	call   f0128213 <test_kshrink>
	return 0;
f0102673:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102678:	c9                   	leave  
f0102679:	c3                   	ret    

f010267a <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f010267a:	55                   	push   %ebp
f010267b:	89 e5                	mov    %esp,%ebp
f010267d:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102680:	e8 7b 6a 02 00       	call   f0129100 <test_kfreelast>
	return 0;
f0102685:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010268a:	c9                   	leave  
f010268b:	c3                   	ret    

f010268c <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010268c:	55                   	push   %ebp
f010268d:	89 e5                	mov    %esp,%ebp
f010268f:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102692:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102695:	83 c0 04             	add    $0x4,%eax
f0102698:	8b 00                	mov    (%eax),%eax
f010269a:	83 ec 04             	sub    $0x4,%esp
f010269d:	6a 0a                	push   $0xa
f010269f:	6a 00                	push   $0x0
f01026a1:	50                   	push   %eax
f01026a2:	e8 0e e5 02 00       	call   f0130bb5 <strtol>
f01026a7:	83 c4 10             	add    $0x10,%esp
f01026aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01026ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01026b4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026bb:	a1 44 fa 6b f0       	mov    0xf06bfa44,%eax
f01026c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01026c3:	eb 3d                	jmp    f0102702 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01026c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01026c8:	05 18 da 01 00       	add    $0x1da18,%eax
f01026cd:	83 ec 08             	sub    $0x8,%esp
f01026d0:	68 3a 4a 13 f0       	push   $0xf0134a3a
f01026d5:	50                   	push   %eax
f01026d6:	e8 86 e2 02 00       	call   f0130961 <strcmp>
f01026db:	83 c4 10             	add    $0x10,%esp
f01026de:	85 c0                	test   %eax,%eax
f01026e0:	75 12                	jne    f01026f4 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01026e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026e6:	74 07                	je     f01026ef <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01026e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01026ef:	ff 45 f4             	incl   -0xc(%ebp)
f01026f2:	eb 06                	jmp    f01026fa <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01026f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026f8:	74 31                	je     f010272b <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026fa:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f01026ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102702:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102706:	74 08                	je     f0102710 <command_test_sc_MLFQ+0x84>
f0102708:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010270b:	8b 40 44             	mov    0x44(%eax),%eax
f010270e:	eb 05                	jmp    f0102715 <command_test_sc_MLFQ+0x89>
f0102710:	b8 00 00 00 00       	mov    $0x0,%eax
f0102715:	a3 4c fa 6b f0       	mov    %eax,0xf06bfa4c
f010271a:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f010271f:	85 c0                	test   %eax,%eax
f0102721:	75 a2                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102723:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102727:	75 9c                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102729:	eb 01                	jmp    f010272c <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010272b:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010272c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010272f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0102732:	75 12                	jne    f0102746 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f0102734:	83 ec 0c             	sub    $0xc,%esp
f0102737:	68 44 4a 13 f0       	push   $0xf0134a44
f010273c:	e8 ec e4 ff ff       	call   f0100c2d <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
f0102744:	eb 17                	jmp    f010275d <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102746:	83 ec 04             	sub    $0x4,%esp
f0102749:	68 7d 4a 13 f0       	push   $0xf0134a7d
f010274e:	68 8b 04 00 00       	push   $0x48b
f0102753:	68 d9 3c 13 f0       	push   $0xf0133cd9
f0102758:	e8 49 da ff ff       	call   f01001a6 <_panic>
	}
	return 0;
f010275d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102762:	c9                   	leave  
f0102763:	c3                   	ret    

f0102764 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f0102764:	55                   	push   %ebp
f0102765:	89 e5                	mov    %esp,%ebp
f0102767:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010276a:	e8 d6 dd 00 00       	call   f0110545 <TestAutoCompleteCommand>
f010276f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102772:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102777:	c9                   	leave  
f0102778:	c3                   	ret    

f0102779 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102779:	55                   	push   %ebp
f010277a:	89 e5                	mov    %esp,%ebp
f010277c:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010277f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102783:	74 1a                	je     f010279f <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102785:	83 ec 0c             	sub    $0xc,%esp
f0102788:	68 94 4a 13 f0       	push   $0xf0134a94
f010278d:	e8 9b e4 ff ff       	call   f0100c2d <cprintf>
f0102792:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102795:	b8 00 00 00 00       	mov    $0x0,%eax
f010279a:	e9 82 01 00 00       	jmp    f0102921 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f010279f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027a2:	83 c0 04             	add    $0x4,%eax
f01027a5:	8b 00                	mov    (%eax),%eax
f01027a7:	83 ec 08             	sub    $0x8,%esp
f01027aa:	68 cc 4a 13 f0       	push   $0xf0134acc
f01027af:	50                   	push   %eax
f01027b0:	e8 ac e1 02 00       	call   f0130961 <strcmp>
f01027b5:	83 c4 10             	add    $0x10,%esp
f01027b8:	85 c0                	test   %eax,%eax
f01027ba:	75 0a                	jne    f01027c6 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01027bc:	e8 2e b3 00 00       	call   f010daef <test_initialize_MemBlocksList>
f01027c1:	e9 56 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01027c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027c9:	83 c0 04             	add    $0x4,%eax
f01027cc:	8b 00                	mov    (%eax),%eax
f01027ce:	83 ec 08             	sub    $0x8,%esp
f01027d1:	68 d1 4a 13 f0       	push   $0xf0134ad1
f01027d6:	50                   	push   %eax
f01027d7:	e8 85 e1 02 00       	call   f0130961 <strcmp>
f01027dc:	83 c4 10             	add    $0x10,%esp
f01027df:	85 c0                	test   %eax,%eax
f01027e1:	75 0a                	jne    f01027ed <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01027e3:	e8 1b b4 00 00       	call   f010dc03 <test_insert_sorted_allocList>
f01027e8:	e9 2f 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01027ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027f0:	83 c0 04             	add    $0x4,%eax
f01027f3:	8b 00                	mov    (%eax),%eax
f01027f5:	83 ec 08             	sub    $0x8,%esp
f01027f8:	68 d7 4a 13 f0       	push   $0xf0134ad7
f01027fd:	50                   	push   %eax
f01027fe:	e8 5e e1 02 00       	call   f0130961 <strcmp>
f0102803:	83 c4 10             	add    $0x10,%esp
f0102806:	85 c0                	test   %eax,%eax
f0102808:	75 0a                	jne    f0102814 <command_test_lists+0x9b>
	{
		test_find_block();
f010280a:	e8 b2 b8 00 00       	call   f010e0c1 <test_find_block>
f010280f:	e9 08 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102814:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102817:	83 c0 04             	add    $0x4,%eax
f010281a:	8b 00                	mov    (%eax),%eax
f010281c:	83 ec 08             	sub    $0x8,%esp
f010281f:	68 dc 4a 13 f0       	push   $0xf0134adc
f0102824:	50                   	push   %eax
f0102825:	e8 37 e1 02 00       	call   f0130961 <strcmp>
f010282a:	83 c4 10             	add    $0x10,%esp
f010282d:	85 c0                	test   %eax,%eax
f010282f:	74 1d                	je     f010284e <command_test_lists+0xd5>
f0102831:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102834:	83 c0 04             	add    $0x4,%eax
f0102837:	8b 00                	mov    (%eax),%eax
f0102839:	83 ec 08             	sub    $0x8,%esp
f010283c:	68 df 4a 13 f0       	push   $0xf0134adf
f0102841:	50                   	push   %eax
f0102842:	e8 1a e1 02 00       	call   f0130961 <strcmp>
f0102847:	83 c4 10             	add    $0x10,%esp
f010284a:	85 c0                	test   %eax,%eax
f010284c:	75 0a                	jne    f0102858 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f010284e:	e8 c9 bb 00 00       	call   f010e41c <test_alloc_block_FF>
f0102853:	e9 c4 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102858:	8b 45 0c             	mov    0xc(%ebp),%eax
f010285b:	83 c0 04             	add    $0x4,%eax
f010285e:	8b 00                	mov    (%eax),%eax
f0102860:	83 ec 08             	sub    $0x8,%esp
f0102863:	68 e2 4a 13 f0       	push   $0xf0134ae2
f0102868:	50                   	push   %eax
f0102869:	e8 f3 e0 02 00       	call   f0130961 <strcmp>
f010286e:	83 c4 10             	add    $0x10,%esp
f0102871:	85 c0                	test   %eax,%eax
f0102873:	74 1d                	je     f0102892 <command_test_lists+0x119>
f0102875:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102878:	83 c0 04             	add    $0x4,%eax
f010287b:	8b 00                	mov    (%eax),%eax
f010287d:	83 ec 08             	sub    $0x8,%esp
f0102880:	68 e5 4a 13 f0       	push   $0xf0134ae5
f0102885:	50                   	push   %eax
f0102886:	e8 d6 e0 02 00       	call   f0130961 <strcmp>
f010288b:	83 c4 10             	add    $0x10,%esp
f010288e:	85 c0                	test   %eax,%eax
f0102890:	75 0a                	jne    f010289c <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102892:	e8 03 c0 00 00       	call   f010e89a <test_alloc_block_BF>
f0102897:	e9 80 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 08             	sub    $0x8,%esp
f01028a7:	68 e8 4a 13 f0       	push   $0xf0134ae8
f01028ac:	50                   	push   %eax
f01028ad:	e8 af e0 02 00       	call   f0130961 <strcmp>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	85 c0                	test   %eax,%eax
f01028b7:	74 1d                	je     f01028d6 <command_test_lists+0x15d>
f01028b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028bc:	83 c0 04             	add    $0x4,%eax
f01028bf:	8b 00                	mov    (%eax),%eax
f01028c1:	83 ec 08             	sub    $0x8,%esp
f01028c4:	68 eb 4a 13 f0       	push   $0xf0134aeb
f01028c9:	50                   	push   %eax
f01028ca:	e8 92 e0 02 00       	call   f0130961 <strcmp>
f01028cf:	83 c4 10             	add    $0x10,%esp
f01028d2:	85 c0                	test   %eax,%eax
f01028d4:	75 07                	jne    f01028dd <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f01028d6:	e8 46 c6 00 00       	call   f010ef21 <test_alloc_block_NF>
f01028db:	eb 3f                	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f01028dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e0:	83 c0 04             	add    $0x4,%eax
f01028e3:	8b 00                	mov    (%eax),%eax
f01028e5:	83 ec 08             	sub    $0x8,%esp
f01028e8:	68 ee 4a 13 f0       	push   $0xf0134aee
f01028ed:	50                   	push   %eax
f01028ee:	e8 6e e0 02 00       	call   f0130961 <strcmp>
f01028f3:	83 c4 10             	add    $0x10,%esp
f01028f6:	85 c0                	test   %eax,%eax
f01028f8:	74 1d                	je     f0102917 <command_test_lists+0x19e>
f01028fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028fd:	83 c0 04             	add    $0x4,%eax
f0102900:	8b 00                	mov    (%eax),%eax
f0102902:	83 ec 08             	sub    $0x8,%esp
f0102905:	68 f4 4a 13 f0       	push   $0xf0134af4
f010290a:	50                   	push   %eax
f010290b:	e8 51 e0 02 00       	call   f0130961 <strcmp>
f0102910:	83 c4 10             	add    $0x10,%esp
f0102913:	85 c0                	test   %eax,%eax
f0102915:	75 05                	jne    f010291c <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102917:	e8 93 ce 00 00       	call   f010f7af <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102929:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010292d:	74 1a                	je     f0102949 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010292f:	83 ec 0c             	sub    $0xc,%esp
f0102932:	68 fc 4a 13 f0       	push   $0xf0134afc
f0102937:	e8 f1 e2 ff ff       	call   f0100c2d <cprintf>
f010293c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010293f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102944:	e9 e1 00 00 00       	jmp    f0102a2a <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010294c:	83 c0 04             	add    $0x4,%eax
f010294f:	8b 00                	mov    (%eax),%eax
f0102951:	83 ec 08             	sub    $0x8,%esp
f0102954:	68 35 4b 13 f0       	push   $0xf0134b35
f0102959:	50                   	push   %eax
f010295a:	e8 02 e0 02 00       	call   f0130961 <strcmp>
f010295f:	83 c4 10             	add    $0x10,%esp
f0102962:	85 c0                	test   %eax,%eax
f0102964:	75 0a                	jne    f0102970 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102966:	e8 6e e6 00 00       	call   f0110fd9 <test_cut_paste_pages>
f010296b:	e9 b5 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102970:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102973:	83 c0 04             	add    $0x4,%eax
f0102976:	8b 00                	mov    (%eax),%eax
f0102978:	83 ec 08             	sub    $0x8,%esp
f010297b:	68 3e 4b 13 f0       	push   $0xf0134b3e
f0102980:	50                   	push   %eax
f0102981:	e8 db df 02 00       	call   f0130961 <strcmp>
f0102986:	83 c4 10             	add    $0x10,%esp
f0102989:	85 c0                	test   %eax,%eax
f010298b:	75 0a                	jne    f0102997 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f010298d:	e8 92 f0 00 00       	call   f0111a24 <test_copy_paste_chunk>
f0102992:	e9 8e 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102997:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299a:	83 c0 04             	add    $0x4,%eax
f010299d:	8b 00                	mov    (%eax),%eax
f010299f:	83 ec 08             	sub    $0x8,%esp
f01029a2:	68 48 4b 13 f0       	push   $0xf0134b48
f01029a7:	50                   	push   %eax
f01029a8:	e8 b4 df 02 00       	call   f0130961 <strcmp>
f01029ad:	83 c4 10             	add    $0x10,%esp
f01029b0:	85 c0                	test   %eax,%eax
f01029b2:	75 07                	jne    f01029bb <command_test_chunks+0x98>
	{
		test_share_chunk();
f01029b4:	e8 69 01 01 00       	call   f0112b22 <test_share_chunk>
f01029b9:	eb 6a                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f01029bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029be:	83 c0 04             	add    $0x4,%eax
f01029c1:	8b 00                	mov    (%eax),%eax
f01029c3:	83 ec 08             	sub    $0x8,%esp
f01029c6:	68 4e 4b 13 f0       	push   $0xf0134b4e
f01029cb:	50                   	push   %eax
f01029cc:	e8 90 df 02 00       	call   f0130961 <strcmp>
f01029d1:	83 c4 10             	add    $0x10,%esp
f01029d4:	85 c0                	test   %eax,%eax
f01029d6:	75 07                	jne    f01029df <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f01029d8:	e8 6d 0b 01 00       	call   f011354a <test_allocate_chunk>
f01029dd:	eb 46                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f01029df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029e2:	83 c0 04             	add    $0x4,%eax
f01029e5:	8b 00                	mov    (%eax),%eax
f01029e7:	83 ec 08             	sub    $0x8,%esp
f01029ea:	68 57 4b 13 f0       	push   $0xf0134b57
f01029ef:	50                   	push   %eax
f01029f0:	e8 6c df 02 00       	call   f0130961 <strcmp>
f01029f5:	83 c4 10             	add    $0x10,%esp
f01029f8:	85 c0                	test   %eax,%eax
f01029fa:	75 07                	jne    f0102a03 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f01029fc:	e8 f8 13 01 00       	call   f0113df9 <test_calculate_required_frames>
f0102a01:	eb 22                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102a03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a06:	83 c0 04             	add    $0x4,%eax
f0102a09:	8b 00                	mov    (%eax),%eax
f0102a0b:	83 ec 08             	sub    $0x8,%esp
f0102a0e:	68 66 4b 13 f0       	push   $0xf0134b66
f0102a13:	50                   	push   %eax
f0102a14:	e8 48 df 02 00       	call   f0130961 <strcmp>
f0102a19:	83 c4 10             	add    $0x10,%esp
f0102a1c:	85 c0                	test   %eax,%eax
f0102a1e:	75 05                	jne    f0102a25 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102a20:	e8 48 1c 01 00       	call   f011466d <test_calculate_allocated_space>
	}
	return 0;
f0102a25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a2a:	c9                   	leave  
f0102a2b:	c3                   	ret    

f0102a2c <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102a2c:	55                   	push   %ebp
f0102a2d:	89 e5                	mov    %esp,%ebp
f0102a2f:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a32:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a36:	74 1a                	je     f0102a52 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102a38:	83 ec 0c             	sub    $0xc,%esp
f0102a3b:	68 78 4b 13 f0       	push   $0xf0134b78
f0102a40:	e8 e8 e1 ff ff       	call   f0100c2d <cprintf>
f0102a45:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a48:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a4d:	e9 e1 00 00 00       	jmp    f0102b33 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102a52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a55:	83 c0 04             	add    $0x4,%eax
f0102a58:	8b 00                	mov    (%eax),%eax
f0102a5a:	83 ec 08             	sub    $0x8,%esp
f0102a5d:	68 ae 4b 13 f0       	push   $0xf0134bae
f0102a62:	50                   	push   %eax
f0102a63:	e8 f9 de 02 00       	call   f0130961 <strcmp>
f0102a68:	83 c4 10             	add    $0x10,%esp
f0102a6b:	85 c0                	test   %eax,%eax
f0102a6d:	75 0a                	jne    f0102a79 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102a6f:	e8 56 dc 00 00       	call   f01106ca <test_pt_set_page_permissions>
f0102a74:	e9 b5 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102a79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a7c:	83 c0 04             	add    $0x4,%eax
f0102a7f:	8b 00                	mov    (%eax),%eax
f0102a81:	83 ec 08             	sub    $0x8,%esp
f0102a84:	68 b6 4b 13 f0       	push   $0xf0134bb6
f0102a89:	50                   	push   %eax
f0102a8a:	e8 d2 de 02 00       	call   f0130961 <strcmp>
f0102a8f:	83 c4 10             	add    $0x10,%esp
f0102a92:	85 c0                	test   %eax,%eax
f0102a94:	75 0a                	jne    f0102aa0 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102a96:	e8 92 de 00 00       	call   f011092d <test_pt_set_page_permissions_invalid_va>
f0102a9b:	e9 8e 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa3:	83 c0 04             	add    $0x4,%eax
f0102aa6:	8b 00                	mov    (%eax),%eax
f0102aa8:	83 ec 08             	sub    $0x8,%esp
f0102aab:	68 be 4b 13 f0       	push   $0xf0134bbe
f0102ab0:	50                   	push   %eax
f0102ab1:	e8 ab de 02 00       	call   f0130961 <strcmp>
f0102ab6:	83 c4 10             	add    $0x10,%esp
f0102ab9:	85 c0                	test   %eax,%eax
f0102abb:	75 07                	jne    f0102ac4 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102abd:	e8 b4 de 00 00       	call   f0110976 <test_pt_get_page_permissions>
f0102ac2:	eb 6a                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 c6 4b 13 f0       	push   $0xf0134bc6
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 87 de 02 00       	call   f0130961 <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102ae1:	e8 d4 df 00 00       	call   f0110aba <test_pt_clear_page_table_entry>
f0102ae6:	eb 46                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 cd 4b 13 f0       	push   $0xf0134bcd
f0102af8:	50                   	push   %eax
f0102af9:	e8 63 de 02 00       	call   f0130961 <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	75 07                	jne    f0102b0c <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102b05:	e8 09 e1 00 00       	call   f0110c13 <test_pt_clear_page_table_entry_invalid_va>
f0102b0a:	eb 22                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 d4 4b 13 f0       	push   $0xf0134bd4
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 3f de 02 00       	call   f0130961 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 05                	jne    f0102b2e <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102b29:	e8 1d e1 00 00       	call   f0110c4b <test_virtual_to_physical>
	}
	return 0;
f0102b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b33:	c9                   	leave  
f0102b34:	c3                   	ret    

f0102b35 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102b35:	55                   	push   %ebp
f0102b36:	89 e5                	mov    %esp,%ebp
f0102b38:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b3e:	83 c0 08             	add    $0x8,%eax
f0102b41:	8b 00                	mov    (%eax),%eax
f0102b43:	83 ec 08             	sub    $0x8,%esp
f0102b46:	68 d8 4b 13 f0       	push   $0xf0134bd8
f0102b4b:	50                   	push   %eax
f0102b4c:	e8 10 de 02 00       	call   f0130961 <strcmp>
f0102b51:	83 c4 10             	add    $0x10,%esp
f0102b54:	85 c0                	test   %eax,%eax
f0102b56:	75 20                	jne    f0102b78 <command_test_kheap+0x43>
f0102b58:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b5c:	74 1a                	je     f0102b78 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102b5e:	83 ec 0c             	sub    $0xc,%esp
f0102b61:	68 e0 4b 13 f0       	push   $0xf0134be0
f0102b66:	e8 c2 e0 ff ff       	call   f0100c2d <cprintf>
f0102b6b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b73:	e9 33 03 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7b:	83 c0 08             	add    $0x8,%eax
f0102b7e:	8b 00                	mov    (%eax),%eax
f0102b80:	83 ec 08             	sub    $0x8,%esp
f0102b83:	68 d8 4b 13 f0       	push   $0xf0134bd8
f0102b88:	50                   	push   %eax
f0102b89:	e8 d3 dd 02 00       	call   f0130961 <strcmp>
f0102b8e:	83 c4 10             	add    $0x10,%esp
f0102b91:	85 c0                	test   %eax,%eax
f0102b93:	74 20                	je     f0102bb5 <command_test_kheap+0x80>
f0102b95:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b99:	74 1a                	je     f0102bb5 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102b9b:	83 ec 0c             	sub    $0xc,%esp
f0102b9e:	68 30 4c 13 f0       	push   $0xf0134c30
f0102ba3:	e8 85 e0 ff ff       	call   f0100c2d <cprintf>
f0102ba8:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bab:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bb0:	e9 f6 02 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bb8:	83 c0 04             	add    $0x4,%eax
f0102bbb:	8b 00                	mov    (%eax),%eax
f0102bbd:	83 ec 08             	sub    $0x8,%esp
f0102bc0:	68 dc 4a 13 f0       	push   $0xf0134adc
f0102bc5:	50                   	push   %eax
f0102bc6:	e8 96 dd 02 00       	call   f0130961 <strcmp>
f0102bcb:	83 c4 10             	add    $0x10,%esp
f0102bce:	85 c0                	test   %eax,%eax
f0102bd0:	74 1d                	je     f0102bef <command_test_kheap+0xba>
f0102bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bd5:	83 c0 04             	add    $0x4,%eax
f0102bd8:	8b 00                	mov    (%eax),%eax
f0102bda:	83 ec 08             	sub    $0x8,%esp
f0102bdd:	68 df 4a 13 f0       	push   $0xf0134adf
f0102be2:	50                   	push   %eax
f0102be3:	e8 79 dd 02 00       	call   f0130961 <strcmp>
f0102be8:	83 c4 10             	add    $0x10,%esp
f0102beb:	85 c0                	test   %eax,%eax
f0102bed:	75 1a                	jne    f0102c09 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102bef:	e8 16 e2 ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102bf4:	83 ec 0c             	sub    $0xc,%esp
f0102bf7:	68 78 46 13 f0       	push   $0xf0134678
f0102bfc:	e8 2c e0 ff ff       	call   f0100c2d <cprintf>
f0102c01:	83 c4 10             	add    $0x10,%esp
f0102c04:	e9 a0 00 00 00       	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102c09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0c:	83 c0 04             	add    $0x4,%eax
f0102c0f:	8b 00                	mov    (%eax),%eax
f0102c11:	83 ec 08             	sub    $0x8,%esp
f0102c14:	68 e2 4a 13 f0       	push   $0xf0134ae2
f0102c19:	50                   	push   %eax
f0102c1a:	e8 42 dd 02 00       	call   f0130961 <strcmp>
f0102c1f:	83 c4 10             	add    $0x10,%esp
f0102c22:	85 c0                	test   %eax,%eax
f0102c24:	74 1d                	je     f0102c43 <command_test_kheap+0x10e>
f0102c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c29:	83 c0 04             	add    $0x4,%eax
f0102c2c:	8b 00                	mov    (%eax),%eax
f0102c2e:	83 ec 08             	sub    $0x8,%esp
f0102c31:	68 e5 4a 13 f0       	push   $0xf0134ae5
f0102c36:	50                   	push   %eax
f0102c37:	e8 25 dd 02 00       	call   f0130961 <strcmp>
f0102c3c:	83 c4 10             	add    $0x10,%esp
f0102c3f:	85 c0                	test   %eax,%eax
f0102c41:	75 17                	jne    f0102c5a <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102c43:	e8 d2 e1 ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102c48:	83 ec 0c             	sub    $0xc,%esp
f0102c4b:	68 a8 46 13 f0       	push   $0xf01346a8
f0102c50:	e8 d8 df ff ff       	call   f0100c2d <cprintf>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	eb 4f                	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c5d:	83 c0 04             	add    $0x4,%eax
f0102c60:	8b 00                	mov    (%eax),%eax
f0102c62:	83 ec 08             	sub    $0x8,%esp
f0102c65:	68 e8 4a 13 f0       	push   $0xf0134ae8
f0102c6a:	50                   	push   %eax
f0102c6b:	e8 f1 dc 02 00       	call   f0130961 <strcmp>
f0102c70:	83 c4 10             	add    $0x10,%esp
f0102c73:	85 c0                	test   %eax,%eax
f0102c75:	74 1d                	je     f0102c94 <command_test_kheap+0x15f>
f0102c77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c7a:	83 c0 04             	add    $0x4,%eax
f0102c7d:	8b 00                	mov    (%eax),%eax
f0102c7f:	83 ec 08             	sub    $0x8,%esp
f0102c82:	68 eb 4a 13 f0       	push   $0xf0134aeb
f0102c87:	50                   	push   %eax
f0102c88:	e8 d4 dc 02 00       	call   f0130961 <strcmp>
f0102c8d:	83 c4 10             	add    $0x10,%esp
f0102c90:	85 c0                	test   %eax,%eax
f0102c92:	75 15                	jne    f0102ca9 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102c94:	e8 91 e1 ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102c99:	83 ec 0c             	sub    $0xc,%esp
f0102c9c:	68 d4 46 13 f0       	push   $0xf01346d4
f0102ca1:	e8 87 df ff ff       	call   f0100c2d <cprintf>
f0102ca6:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102ca9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cac:	83 c0 08             	add    $0x8,%eax
f0102caf:	8b 00                	mov    (%eax),%eax
f0102cb1:	83 ec 08             	sub    $0x8,%esp
f0102cb4:	68 d8 4b 13 f0       	push   $0xf0134bd8
f0102cb9:	50                   	push   %eax
f0102cba:	e8 a2 dc 02 00       	call   f0130961 <strcmp>
f0102cbf:	83 c4 10             	add    $0x10,%esp
f0102cc2:	85 c0                	test   %eax,%eax
f0102cc4:	0f 85 13 01 00 00    	jne    f0102ddd <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102cca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ccd:	83 c0 0c             	add    $0xc,%eax
f0102cd0:	8b 00                	mov    (%eax),%eax
f0102cd2:	83 ec 04             	sub    $0x4,%esp
f0102cd5:	6a 0a                	push   $0xa
f0102cd7:	6a 00                	push   $0x0
f0102cd9:	50                   	push   %eax
f0102cda:	e8 d6 de 02 00       	call   f0130bb5 <strtol>
f0102cdf:	83 c4 10             	add    $0x10,%esp
f0102ce2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ce5:	e8 74 e1 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102cea:	84 c0                	test   %al,%al
f0102cec:	74 54                	je     f0102d42 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102cee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102cf2:	75 1a                	jne    f0102d0e <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102cf4:	83 ec 0c             	sub    $0xc,%esp
f0102cf7:	68 4c 49 13 f0       	push   $0xf013494c
f0102cfc:	e8 2c df ff ff       	call   f0100c2d <cprintf>
f0102d01:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d04:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d09:	e9 9d 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102d0e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d12:	75 0a                	jne    f0102d1e <command_test_kheap+0x1e9>
				test_kmalloc();
f0102d14:	e8 48 42 01 00       	call   f0116f61 <test_kmalloc>
f0102d19:	e9 b5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d1e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d22:	75 0a                	jne    f0102d2e <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102d24:	e8 c1 90 01 00       	call   f011bdea <test_kmalloc_firstfit1>
f0102d29:	e9 a5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d2e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d32:	0f 85 9b 00 00 00    	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102d38:	e8 4f a4 01 00       	call   f011d18c <test_kmalloc_firstfit2>
f0102d3d:	e9 91 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102d42:	e8 2c e1 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102d47:	84 c0                	test   %al,%al
f0102d49:	74 47                	je     f0102d92 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102d4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d4f:	75 1a                	jne    f0102d6b <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102d51:	83 ec 0c             	sub    $0xc,%esp
f0102d54:	68 9c 49 13 f0       	push   $0xf013499c
f0102d59:	e8 cf de ff ff       	call   f0100c2d <cprintf>
f0102d5e:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d61:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d66:	e9 40 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102d6b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d6f:	75 07                	jne    f0102d78 <command_test_kheap+0x243>
				test_kmalloc();
f0102d71:	e8 eb 41 01 00       	call   f0116f61 <test_kmalloc>
f0102d76:	eb 5b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d78:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d7c:	75 07                	jne    f0102d85 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102d7e:	e8 31 6b 01 00       	call   f01198b4 <test_kmalloc_bestfit1>
f0102d83:	eb 4e                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d85:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d89:	75 48                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102d8b:	e8 7a 7d 01 00       	call   f011ab0a <test_kmalloc_bestfit2>
f0102d90:	eb 41                	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102d92:	e8 f1 e0 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102d97:	84 c0                	test   %al,%al
f0102d99:	74 38                	je     f0102dd3 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102d9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d9f:	75 1a                	jne    f0102dbb <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102da1:	83 ec 0c             	sub    $0xc,%esp
f0102da4:	68 ec 49 13 f0       	push   $0xf01349ec
f0102da9:	e8 7f de ff ff       	call   f0100c2d <cprintf>
f0102dae:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102db6:	e9 f0 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102dbb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102dbf:	75 07                	jne    f0102dc8 <command_test_kheap+0x293>
				test_kmalloc();
f0102dc1:	e8 9b 41 01 00       	call   f0116f61 <test_kmalloc>
f0102dc6:	eb 0b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102dc8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102dcc:	75 05                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102dce:	e8 ec 53 01 00       	call   f01181bf <test_kmalloc_nextfit>
		}
		return 0;
f0102dd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dd8:	e9 ce 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 08             	add    $0x8,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 74 4c 13 f0       	push   $0xf0134c74
f0102ded:	50                   	push   %eax
f0102dee:	e8 6e db 02 00       	call   f0130961 <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 28                	jne    f0102e22 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102dfa:	e8 74 e0 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102dff:	84 c0                	test   %al,%al
f0102e01:	75 09                	jne    f0102e0c <command_test_kheap+0x2d7>
f0102e03:	e8 56 e0 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102e08:	84 c0                	test   %al,%al
f0102e0a:	74 07                	je     f0102e13 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0102e0c:	e8 b2 e9 01 00       	call   f01217c3 <test_kfree_bestfirstfit>
f0102e11:	eb 05                	jmp    f0102e18 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0102e13:	e8 59 c8 01 00       	call   f011f671 <test_kfree>
		}
		return 0;
f0102e18:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e1d:	e9 89 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f0102e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e25:	83 c0 08             	add    $0x8,%eax
f0102e28:	8b 00                	mov    (%eax),%eax
f0102e2a:	83 ec 08             	sub    $0x8,%esp
f0102e2d:	68 7a 4c 13 f0       	push   $0xf0134c7a
f0102e32:	50                   	push   %eax
f0102e33:	e8 29 db 02 00       	call   f0130961 <strcmp>
f0102e38:	83 c4 10             	add    $0x10,%esp
f0102e3b:	85 c0                	test   %eax,%eax
f0102e3d:	75 0c                	jne    f0102e4b <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f0102e3f:	e8 7b 03 02 00       	call   f01231bf <test_kheap_phys_addr>
		return 0;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e49:	eb 60                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0102e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4e:	83 c0 08             	add    $0x8,%eax
f0102e51:	8b 00                	mov    (%eax),%eax
f0102e53:	83 ec 08             	sub    $0x8,%esp
f0102e56:	68 84 4c 13 f0       	push   $0xf0134c84
f0102e5b:	50                   	push   %eax
f0102e5c:	e8 00 db 02 00       	call   f0130961 <strcmp>
f0102e61:	83 c4 10             	add    $0x10,%esp
f0102e64:	85 c0                	test   %eax,%eax
f0102e66:	75 0c                	jne    f0102e74 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0102e68:	e8 22 18 02 00       	call   f012468f <test_kheap_virt_addr>
		return 0;
f0102e6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e72:	eb 37                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f0102e74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e77:	83 c0 08             	add    $0x8,%eax
f0102e7a:	8b 00                	mov    (%eax),%eax
f0102e7c:	83 ec 08             	sub    $0x8,%esp
f0102e7f:	68 8e 4c 13 f0       	push   $0xf0134c8e
f0102e84:	50                   	push   %eax
f0102e85:	e8 d7 da 02 00       	call   f0130961 <strcmp>
f0102e8a:	83 c4 10             	add    $0x10,%esp
f0102e8d:	85 c0                	test   %eax,%eax
f0102e8f:	75 15                	jne    f0102ea6 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0102e91:	e8 dd df ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102e96:	84 c0                	test   %al,%al
f0102e98:	74 05                	je     f0102e9f <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0102e9a:	e8 94 a6 02 00       	call   f012d533 <test_krealloc_BF>
		}
		return 0;
f0102e9f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ea4:	eb 05                	jmp    f0102eab <command_test_kheap+0x376>
	}
	return 0;
f0102ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eab:	c9                   	leave  
f0102eac:	c3                   	ret    

f0102ead <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0102ead:	55                   	push   %ebp
f0102eae:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0102eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0102eb3:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f0102eb9:	29 d0                	sub    %edx,%eax
f0102ebb:	c1 f8 03             	sar    $0x3,%eax
f0102ebe:	89 c2                	mov    %eax,%edx
f0102ec0:	89 d0                	mov    %edx,%eax
f0102ec2:	c1 e0 02             	shl    $0x2,%eax
f0102ec5:	01 d0                	add    %edx,%eax
f0102ec7:	c1 e0 02             	shl    $0x2,%eax
f0102eca:	01 d0                	add    %edx,%eax
f0102ecc:	c1 e0 02             	shl    $0x2,%eax
f0102ecf:	01 d0                	add    %edx,%eax
f0102ed1:	89 c1                	mov    %eax,%ecx
f0102ed3:	c1 e1 08             	shl    $0x8,%ecx
f0102ed6:	01 c8                	add    %ecx,%eax
f0102ed8:	89 c1                	mov    %eax,%ecx
f0102eda:	c1 e1 10             	shl    $0x10,%ecx
f0102edd:	01 c8                	add    %ecx,%eax
f0102edf:	01 c0                	add    %eax,%eax
f0102ee1:	01 d0                	add    %edx,%eax
}
f0102ee3:	5d                   	pop    %ebp
f0102ee4:	c3                   	ret    

f0102ee5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0102ee5:	55                   	push   %ebp
f0102ee6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0102ee8:	ff 75 08             	pushl  0x8(%ebp)
f0102eeb:	e8 bd ff ff ff       	call   f0102ead <to_frame_number>
f0102ef0:	83 c4 04             	add    $0x4,%esp
f0102ef3:	c1 e0 0c             	shl    $0xc,%eax
}
f0102ef6:	c9                   	leave  
f0102ef7:	c3                   	ret    

f0102ef8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102ef8:	55                   	push   %ebp
f0102ef9:	89 e5                	mov    %esp,%ebp
f0102efb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102efe:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f01:	c1 e8 0c             	shr    $0xc,%eax
f0102f04:	89 c2                	mov    %eax,%edx
f0102f06:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0102f0b:	39 c2                	cmp    %eax,%edx
f0102f0d:	72 14                	jb     f0102f23 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102f0f:	83 ec 04             	sub    $0x4,%esp
f0102f12:	68 98 4c 13 f0       	push   $0xf0134c98
f0102f17:	6a 55                	push   $0x55
f0102f19:	68 c0 4c 13 f0       	push   $0xf0134cc0
f0102f1e:	e8 83 d2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0102f23:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f0102f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f2c:	c1 e8 0c             	shr    $0xc,%eax
f0102f2f:	89 c1                	mov    %eax,%ecx
f0102f31:	89 c8                	mov    %ecx,%eax
f0102f33:	01 c0                	add    %eax,%eax
f0102f35:	01 c8                	add    %ecx,%eax
f0102f37:	c1 e0 03             	shl    $0x3,%eax
f0102f3a:	01 d0                	add    %edx,%eax
}
f0102f3c:	c9                   	leave  
f0102f3d:	c3                   	ret    

f0102f3e <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0102f3e:	55                   	push   %ebp
f0102f3f:	89 e5                	mov    %esp,%ebp
f0102f41:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f47:	05 00 14 00 00       	add    $0x1400,%eax
f0102f4c:	c1 e0 03             	shl    $0x3,%eax
f0102f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f52:	83 ec 04             	sub    $0x4,%esp
f0102f55:	6a 08                	push   $0x8
f0102f57:	ff 75 0c             	pushl  0xc(%ebp)
f0102f5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f5d:	e8 46 e0 02 00       	call   f0130fa8 <ide_read>
f0102f62:	83 c4 10             	add    $0x10,%esp
f0102f65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0102f68:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102f6b:	c9                   	leave  
f0102f6c:	c3                   	ret    

f0102f6d <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0102f6d:	55                   	push   %ebp
f0102f6e:	89 e5                	mov    %esp,%ebp
f0102f70:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f76:	05 00 14 00 00       	add    $0x1400,%eax
f0102f7b:	c1 e0 03             	shl    $0x3,%eax
f0102f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f81:	83 ec 04             	sub    $0x4,%esp
f0102f84:	6a 08                	push   $0x8
f0102f86:	ff 75 0c             	pushl  0xc(%ebp)
f0102f89:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f8c:	e8 57 e1 02 00       	call   f01310e8 <ide_write>
f0102f91:	83 c4 10             	add    $0x10,%esp
f0102f94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0102f97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102f9b:	74 14                	je     f0102fb1 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0102f9d:	83 ec 04             	sub    $0x4,%esp
f0102fa0:	68 e2 4c 13 f0       	push   $0xf0134ce2
f0102fa5:	6a 2e                	push   $0x2e
f0102fa7:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0102fac:	e8 f5 d1 ff ff       	call   f01001a6 <_panic>
	return success;
f0102fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102fb4:	c9                   	leave  
f0102fb5:	c3                   	ret    

f0102fb6 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0102fb6:	55                   	push   %ebp
f0102fb7:	89 e5                	mov    %esp,%ebp
f0102fb9:	53                   	push   %ebx
f0102fba:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0102fbd:	c7 05 f4 1e 6c f0 00 	movl   $0x0,0xf06c1ef4
f0102fc4:	00 00 00 
f0102fc7:	c7 05 f8 1e 6c f0 00 	movl   $0x0,0xf06c1ef8
f0102fce:	00 00 00 
f0102fd1:	c7 05 00 1f 6c f0 00 	movl   $0x0,0xf06c1f00
f0102fd8:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0102fdb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0102fe2:	e9 e8 00 00 00       	jmp    f01030cf <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0102fe7:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f0102fed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102ff0:	89 d0                	mov    %edx,%eax
f0102ff2:	01 c0                	add    %eax,%eax
f0102ff4:	01 d0                	add    %edx,%eax
f0102ff6:	c1 e0 03             	shl    $0x3,%eax
f0102ff9:	01 c8                	add    %ecx,%eax
f0102ffb:	83 ec 0c             	sub    $0xc,%esp
f0102ffe:	50                   	push   %eax
f0102fff:	e8 8b 37 00 00       	call   f010678f <initialize_frame_info>
f0103004:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103007:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f010300d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103010:	89 d0                	mov    %edx,%eax
f0103012:	01 c0                	add    %eax,%eax
f0103014:	01 d0                	add    %edx,%eax
f0103016:	c1 e0 03             	shl    $0x3,%eax
f0103019:	01 c8                	add    %ecx,%eax
f010301b:	85 c0                	test   %eax,%eax
f010301d:	75 14                	jne    f0103033 <initialize_disk_page_file+0x7d>
f010301f:	83 ec 04             	sub    $0x4,%esp
f0103022:	68 18 4d 13 f0       	push   $0xf0134d18
f0103027:	6a 59                	push   $0x59
f0103029:	68 f9 4c 13 f0       	push   $0xf0134cf9
f010302e:	e8 73 d1 ff ff       	call   f01001a6 <_panic>
f0103033:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f0103039:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010303c:	89 d0                	mov    %edx,%eax
f010303e:	01 c0                	add    %eax,%eax
f0103040:	01 d0                	add    %edx,%eax
f0103042:	c1 e0 03             	shl    $0x3,%eax
f0103045:	01 c8                	add    %ecx,%eax
f0103047:	8b 15 f4 1e 6c f0    	mov    0xf06c1ef4,%edx
f010304d:	89 10                	mov    %edx,(%eax)
f010304f:	8b 00                	mov    (%eax),%eax
f0103051:	85 c0                	test   %eax,%eax
f0103053:	74 1f                	je     f0103074 <initialize_disk_page_file+0xbe>
f0103055:	8b 15 f4 1e 6c f0    	mov    0xf06c1ef4,%edx
f010305b:	8b 1d e4 9a 65 f0    	mov    0xf0659ae4,%ebx
f0103061:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103064:	89 c8                	mov    %ecx,%eax
f0103066:	01 c0                	add    %eax,%eax
f0103068:	01 c8                	add    %ecx,%eax
f010306a:	c1 e0 03             	shl    $0x3,%eax
f010306d:	01 d8                	add    %ebx,%eax
f010306f:	89 42 04             	mov    %eax,0x4(%edx)
f0103072:	eb 19                	jmp    f010308d <initialize_disk_page_file+0xd7>
f0103074:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f010307a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010307d:	89 d0                	mov    %edx,%eax
f010307f:	01 c0                	add    %eax,%eax
f0103081:	01 d0                	add    %edx,%eax
f0103083:	c1 e0 03             	shl    $0x3,%eax
f0103086:	01 c8                	add    %ecx,%eax
f0103088:	a3 f8 1e 6c f0       	mov    %eax,0xf06c1ef8
f010308d:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f0103093:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103096:	89 d0                	mov    %edx,%eax
f0103098:	01 c0                	add    %eax,%eax
f010309a:	01 d0                	add    %edx,%eax
f010309c:	c1 e0 03             	shl    $0x3,%eax
f010309f:	01 c8                	add    %ecx,%eax
f01030a1:	a3 f4 1e 6c f0       	mov    %eax,0xf06c1ef4
f01030a6:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f01030ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01030af:	89 d0                	mov    %edx,%eax
f01030b1:	01 c0                	add    %eax,%eax
f01030b3:	01 d0                	add    %edx,%eax
f01030b5:	c1 e0 03             	shl    $0x3,%eax
f01030b8:	01 c8                	add    %ecx,%eax
f01030ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01030c1:	a1 00 1f 6c f0       	mov    0xf06c1f00,%eax
f01030c6:	40                   	inc    %eax
f01030c7:	a3 00 1f 6c f0       	mov    %eax,0xf06c1f00
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01030cc:	ff 45 f4             	incl   -0xc(%ebp)
f01030cf:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01030d6:	0f 8e 0b ff ff ff    	jle    f0102fe7 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01030dc:	90                   	nop
f01030dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030e0:	c9                   	leave  
f01030e1:	c3                   	ret    

f01030e2 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01030e2:	55                   	push   %ebp
f01030e3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01030e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01030e8:	8b 15 e4 9a 65 f0    	mov    0xf0659ae4,%edx
f01030ee:	29 d0                	sub    %edx,%eax
f01030f0:	c1 f8 03             	sar    $0x3,%eax
f01030f3:	89 c2                	mov    %eax,%edx
f01030f5:	89 d0                	mov    %edx,%eax
f01030f7:	c1 e0 02             	shl    $0x2,%eax
f01030fa:	01 d0                	add    %edx,%eax
f01030fc:	c1 e0 02             	shl    $0x2,%eax
f01030ff:	01 d0                	add    %edx,%eax
f0103101:	c1 e0 02             	shl    $0x2,%eax
f0103104:	01 d0                	add    %edx,%eax
f0103106:	89 c1                	mov    %eax,%ecx
f0103108:	c1 e1 08             	shl    $0x8,%ecx
f010310b:	01 c8                	add    %ecx,%eax
f010310d:	89 c1                	mov    %eax,%ecx
f010310f:	c1 e1 10             	shl    $0x10,%ecx
f0103112:	01 c8                	add    %ecx,%eax
f0103114:	01 c0                	add    %eax,%eax
f0103116:	01 d0                	add    %edx,%eax
}
f0103118:	5d                   	pop    %ebp
f0103119:	c3                   	ret    

f010311a <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010311a:	55                   	push   %ebp
f010311b:	89 e5                	mov    %esp,%ebp
f010311d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103120:	a1 f4 1e 6c f0       	mov    0xf06c1ef4,%eax
f0103125:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010312c:	75 0a                	jne    f0103138 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010312e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103133:	e9 a7 00 00 00       	jmp    f01031df <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103138:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010313c:	75 14                	jne    f0103152 <allocate_disk_frame+0x38>
f010313e:	83 ec 04             	sub    $0x4,%esp
f0103141:	68 3b 4d 13 f0       	push   $0xf0134d3b
f0103146:	6a 78                	push   $0x78
f0103148:	68 f9 4c 13 f0       	push   $0xf0134cf9
f010314d:	e8 54 d0 ff ff       	call   f01001a6 <_panic>
f0103152:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103155:	8b 00                	mov    (%eax),%eax
f0103157:	85 c0                	test   %eax,%eax
f0103159:	74 10                	je     f010316b <allocate_disk_frame+0x51>
f010315b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010315e:	8b 00                	mov    (%eax),%eax
f0103160:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103163:	8b 52 04             	mov    0x4(%edx),%edx
f0103166:	89 50 04             	mov    %edx,0x4(%eax)
f0103169:	eb 0b                	jmp    f0103176 <allocate_disk_frame+0x5c>
f010316b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010316e:	8b 40 04             	mov    0x4(%eax),%eax
f0103171:	a3 f8 1e 6c f0       	mov    %eax,0xf06c1ef8
f0103176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103179:	8b 40 04             	mov    0x4(%eax),%eax
f010317c:	85 c0                	test   %eax,%eax
f010317e:	74 0f                	je     f010318f <allocate_disk_frame+0x75>
f0103180:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103183:	8b 40 04             	mov    0x4(%eax),%eax
f0103186:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103189:	8b 12                	mov    (%edx),%edx
f010318b:	89 10                	mov    %edx,(%eax)
f010318d:	eb 0a                	jmp    f0103199 <allocate_disk_frame+0x7f>
f010318f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103192:	8b 00                	mov    (%eax),%eax
f0103194:	a3 f4 1e 6c f0       	mov    %eax,0xf06c1ef4
f0103199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010319c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01031a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031a5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01031ac:	a1 00 1f 6c f0       	mov    0xf06c1f00,%eax
f01031b1:	48                   	dec    %eax
f01031b2:	a3 00 1f 6c f0       	mov    %eax,0xf06c1f00
	initialize_frame_info(ptr_frame_info);
f01031b7:	83 ec 0c             	sub    $0xc,%esp
f01031ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01031bd:	e8 cd 35 00 00       	call   f010678f <initialize_frame_info>
f01031c2:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01031c5:	83 ec 0c             	sub    $0xc,%esp
f01031c8:	ff 75 f4             	pushl  -0xc(%ebp)
f01031cb:	e8 12 ff ff ff       	call   f01030e2 <to_disk_frame_number>
f01031d0:	83 c4 10             	add    $0x10,%esp
f01031d3:	89 c2                	mov    %eax,%edx
f01031d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031d8:	89 10                	mov    %edx,(%eax)
	return 0;
f01031da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031df:	c9                   	leave  
f01031e0:	c3                   	ret    

f01031e1 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01031e1:	55                   	push   %ebp
f01031e2:	89 e5                	mov    %esp,%ebp
f01031e4:	53                   	push   %ebx
f01031e5:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01031e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01031ec:	0f 84 ca 00 00 00    	je     f01032bc <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01031f2:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f01031f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01031fb:	89 d0                	mov    %edx,%eax
f01031fd:	01 c0                	add    %eax,%eax
f01031ff:	01 d0                	add    %edx,%eax
f0103201:	c1 e0 03             	shl    $0x3,%eax
f0103204:	01 c8                	add    %ecx,%eax
f0103206:	85 c0                	test   %eax,%eax
f0103208:	75 17                	jne    f0103221 <free_disk_frame+0x40>
f010320a:	83 ec 04             	sub    $0x4,%esp
f010320d:	68 18 4d 13 f0       	push   $0xf0134d18
f0103212:	68 85 00 00 00       	push   $0x85
f0103217:	68 f9 4c 13 f0       	push   $0xf0134cf9
f010321c:	e8 85 cf ff ff       	call   f01001a6 <_panic>
f0103221:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f0103227:	8b 55 08             	mov    0x8(%ebp),%edx
f010322a:	89 d0                	mov    %edx,%eax
f010322c:	01 c0                	add    %eax,%eax
f010322e:	01 d0                	add    %edx,%eax
f0103230:	c1 e0 03             	shl    $0x3,%eax
f0103233:	01 c8                	add    %ecx,%eax
f0103235:	8b 15 f4 1e 6c f0    	mov    0xf06c1ef4,%edx
f010323b:	89 10                	mov    %edx,(%eax)
f010323d:	8b 00                	mov    (%eax),%eax
f010323f:	85 c0                	test   %eax,%eax
f0103241:	74 1f                	je     f0103262 <free_disk_frame+0x81>
f0103243:	8b 15 f4 1e 6c f0    	mov    0xf06c1ef4,%edx
f0103249:	8b 1d e4 9a 65 f0    	mov    0xf0659ae4,%ebx
f010324f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103252:	89 c8                	mov    %ecx,%eax
f0103254:	01 c0                	add    %eax,%eax
f0103256:	01 c8                	add    %ecx,%eax
f0103258:	c1 e0 03             	shl    $0x3,%eax
f010325b:	01 d8                	add    %ebx,%eax
f010325d:	89 42 04             	mov    %eax,0x4(%edx)
f0103260:	eb 19                	jmp    f010327b <free_disk_frame+0x9a>
f0103262:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f0103268:	8b 55 08             	mov    0x8(%ebp),%edx
f010326b:	89 d0                	mov    %edx,%eax
f010326d:	01 c0                	add    %eax,%eax
f010326f:	01 d0                	add    %edx,%eax
f0103271:	c1 e0 03             	shl    $0x3,%eax
f0103274:	01 c8                	add    %ecx,%eax
f0103276:	a3 f8 1e 6c f0       	mov    %eax,0xf06c1ef8
f010327b:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f0103281:	8b 55 08             	mov    0x8(%ebp),%edx
f0103284:	89 d0                	mov    %edx,%eax
f0103286:	01 c0                	add    %eax,%eax
f0103288:	01 d0                	add    %edx,%eax
f010328a:	c1 e0 03             	shl    $0x3,%eax
f010328d:	01 c8                	add    %ecx,%eax
f010328f:	a3 f4 1e 6c f0       	mov    %eax,0xf06c1ef4
f0103294:	8b 0d e4 9a 65 f0    	mov    0xf0659ae4,%ecx
f010329a:	8b 55 08             	mov    0x8(%ebp),%edx
f010329d:	89 d0                	mov    %edx,%eax
f010329f:	01 c0                	add    %eax,%eax
f01032a1:	01 d0                	add    %edx,%eax
f01032a3:	c1 e0 03             	shl    $0x3,%eax
f01032a6:	01 c8                	add    %ecx,%eax
f01032a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032af:	a1 00 1f 6c f0       	mov    0xf06c1f00,%eax
f01032b4:	40                   	inc    %eax
f01032b5:	a3 00 1f 6c f0       	mov    %eax,0xf06c1f00
f01032ba:	eb 01                	jmp    f01032bd <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01032bc:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01032bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032c0:	c9                   	leave  
f01032c1:	c3                   	ret    

f01032c2 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01032c2:	55                   	push   %ebp
f01032c3:	89 e5                	mov    %esp,%ebp
f01032c5:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01032c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032cb:	c1 e8 16             	shr    $0x16,%eax
f01032ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01032d8:	01 d0                	add    %edx,%eax
f01032da:	8b 00                	mov    (%eax),%eax
f01032dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01032df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01032e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01032ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01032ed:	c1 e8 0c             	shr    $0xc,%eax
f01032f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01032f3:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f01032f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01032fb:	72 17                	jb     f0103314 <get_disk_page_table+0x52>
f01032fd:	ff 75 f0             	pushl  -0x10(%ebp)
f0103300:	68 5c 4d 13 f0       	push   $0xf0134d5c
f0103305:	68 92 00 00 00       	push   $0x92
f010330a:	68 f9 4c 13 f0       	push   $0xf0134cf9
f010330f:	e8 92 ce ff ff       	call   f01001a6 <_panic>
f0103314:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103317:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010331c:	89 c2                	mov    %eax,%edx
f010331e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103321:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103323:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103327:	0f 85 b7 00 00 00    	jne    f01033e4 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010332d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103331:	0f 84 9d 00 00 00    	je     f01033d4 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103337:	83 ec 0c             	sub    $0xc,%esp
f010333a:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010333d:	50                   	push   %eax
f010333e:	e8 67 34 00 00       	call   f01067aa <allocate_frame>
f0103343:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103346:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103349:	83 ec 0c             	sub    $0xc,%esp
f010334c:	50                   	push   %eax
f010334d:	e8 93 fb ff ff       	call   f0102ee5 <to_physical_address>
f0103352:	83 c4 10             	add    $0x10,%esp
f0103355:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103358:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010335b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010335e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103361:	c1 e8 0c             	shr    $0xc,%eax
f0103364:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103367:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f010336c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010336f:	72 17                	jb     f0103388 <get_disk_page_table+0xc6>
f0103371:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103374:	68 5c 4d 13 f0       	push   $0xf0134d5c
f0103379:	68 ae 00 00 00       	push   $0xae
f010337e:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103383:	e8 1e ce ff ff       	call   f01001a6 <_panic>
f0103388:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010338b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103390:	89 c2                	mov    %eax,%edx
f0103392:	8b 45 14             	mov    0x14(%ebp),%eax
f0103395:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103397:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010339a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f01033a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a3:	c1 e8 16             	shr    $0x16,%eax
f01033a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01033ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01033b0:	01 d0                	add    %edx,%eax
f01033b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01033b5:	83 ca 01             	or     $0x1,%edx
f01033b8:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01033ba:	8b 45 14             	mov    0x14(%ebp),%eax
f01033bd:	8b 00                	mov    (%eax),%eax
f01033bf:	83 ec 04             	sub    $0x4,%esp
f01033c2:	68 00 10 00 00       	push   $0x1000
f01033c7:	6a 00                	push   $0x0
f01033c9:	50                   	push   %eax
f01033ca:	e8 74 d6 02 00       	call   f0130a43 <memset>
f01033cf:	83 c4 10             	add    $0x10,%esp
f01033d2:	eb 10                	jmp    f01033e4 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01033d4:	8b 45 14             	mov    0x14(%ebp),%eax
f01033d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01033dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01033e2:	eb 05                	jmp    f01033e9 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01033e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e9:	c9                   	leave  
f01033ea:	c3                   	ret    

f01033eb <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01033eb:	55                   	push   %ebp
f01033ec:	89 e5                	mov    %esp,%ebp
f01033ee:	83 ec 28             	sub    $0x28,%esp
f01033f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01033f4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01033f7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01033fb:	74 75                	je     f0103472 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01033fd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103407:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010340c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010340f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103412:	ba 00 00 00 00       	mov    $0x0,%edx
f0103417:	f7 75 f4             	divl   -0xc(%ebp)
f010341a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010341d:	29 d0                	sub    %edx,%eax
f010341f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103422:	73 32                	jae    f0103456 <pf_add_empty_env_page+0x6b>
f0103424:	8b 45 08             	mov    0x8(%ebp),%eax
f0103427:	8b 90 14 da 01 00    	mov    0x1da14(%eax),%edx
f010342d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103432:	29 d0                	sub    %edx,%eax
f0103434:	c1 e0 0c             	shl    $0xc,%eax
f0103437:	2d 00 20 40 11       	sub    $0x11402000,%eax
f010343c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010343f:	76 15                	jbe    f0103456 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103441:	8b 45 08             	mov    0x8(%ebp),%eax
f0103444:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f010344a:	8d 50 01             	lea    0x1(%eax),%edx
f010344d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103450:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103456:	a1 9c 1e 6c f0       	mov    0xf06c1e9c,%eax
f010345b:	83 ec 04             	sub    $0x4,%esp
f010345e:	50                   	push   %eax
f010345f:	ff 75 0c             	pushl  0xc(%ebp)
f0103462:	ff 75 08             	pushl  0x8(%ebp)
f0103465:	e8 b2 00 00 00       	call   f010351c <pf_add_env_page>
f010346a:	83 c4 10             	add    $0x10,%esp
f010346d:	e9 a8 00 00 00       	jmp    f010351a <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103472:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103479:	76 19                	jbe    f0103494 <pf_add_empty_env_page+0xa9>
f010347b:	68 8c 4d 13 f0       	push   $0xf0134d8c
f0103480:	68 b2 4d 13 f0       	push   $0xf0134db2
f0103485:	68 d1 00 00 00       	push   $0xd1
f010348a:	68 f9 4c 13 f0       	push   $0xf0134cf9
f010348f:	e8 12 cd ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103494:	8b 45 08             	mov    0x8(%ebp),%eax
f0103497:	83 c0 64             	add    $0x64,%eax
f010349a:	83 ec 08             	sub    $0x8,%esp
f010349d:	50                   	push   %eax
f010349e:	ff 75 08             	pushl  0x8(%ebp)
f01034a1:	e8 46 06 00 00       	call   f0103aec <get_disk_page_directory>
f01034a6:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01034a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01034ac:	8b 40 64             	mov    0x64(%eax),%eax
f01034af:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01034b2:	52                   	push   %edx
f01034b3:	6a 01                	push   $0x1
f01034b5:	ff 75 0c             	pushl  0xc(%ebp)
f01034b8:	50                   	push   %eax
f01034b9:	e8 04 fe ff ff       	call   f01032c2 <get_disk_page_table>
f01034be:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01034c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01034c7:	c1 ea 0c             	shr    $0xc,%edx
f01034ca:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01034d0:	c1 e2 02             	shl    $0x2,%edx
f01034d3:	01 d0                	add    %edx,%eax
f01034d5:	8b 00                	mov    (%eax),%eax
f01034d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01034da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01034dd:	85 c0                	test   %eax,%eax
f01034df:	75 34                	jne    f0103515 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01034e1:	83 ec 0c             	sub    $0xc,%esp
f01034e4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01034e7:	50                   	push   %eax
f01034e8:	e8 2d fc ff ff       	call   f010311a <allocate_disk_frame>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01034f3:	75 07                	jne    f01034fc <pf_add_empty_env_page+0x111>
f01034f5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01034fa:	eb 1e                	jmp    f010351a <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01034fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103502:	c1 ea 0c             	shr    $0xc,%edx
f0103505:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010350b:	c1 e2 02             	shl    $0x2,%edx
f010350e:	01 c2                	add    %eax,%edx
f0103510:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103513:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103515:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010351a:	c9                   	leave  
f010351b:	c3                   	ret    

f010351c <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010351c:	55                   	push   %ebp
f010351d:	89 e5                	mov    %esp,%ebp
f010351f:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103522:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103529:	76 19                	jbe    f0103544 <pf_add_env_page+0x28>
f010352b:	68 8c 4d 13 f0       	push   $0xf0134d8c
f0103530:	68 b2 4d 13 f0       	push   $0xf0134db2
f0103535:	68 e6 00 00 00       	push   $0xe6
f010353a:	68 f9 4c 13 f0       	push   $0xf0134cf9
f010353f:	e8 62 cc ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103544:	8b 45 08             	mov    0x8(%ebp),%eax
f0103547:	83 c0 64             	add    $0x64,%eax
f010354a:	83 ec 08             	sub    $0x8,%esp
f010354d:	50                   	push   %eax
f010354e:	ff 75 08             	pushl  0x8(%ebp)
f0103551:	e8 96 05 00 00       	call   f0103aec <get_disk_page_directory>
f0103556:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103559:	8b 45 08             	mov    0x8(%ebp),%eax
f010355c:	8b 40 64             	mov    0x64(%eax),%eax
f010355f:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103562:	52                   	push   %edx
f0103563:	6a 01                	push   $0x1
f0103565:	ff 75 0c             	pushl  0xc(%ebp)
f0103568:	50                   	push   %eax
f0103569:	e8 54 fd ff ff       	call   f01032c2 <get_disk_page_table>
f010356e:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103571:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103574:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103577:	c1 ea 0c             	shr    $0xc,%edx
f010357a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103580:	c1 e2 02             	shl    $0x2,%edx
f0103583:	01 d0                	add    %edx,%eax
f0103585:	8b 00                	mov    (%eax),%eax
f0103587:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010358a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010358d:	85 c0                	test   %eax,%eax
f010358f:	75 34                	jne    f01035c5 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103591:	83 ec 0c             	sub    $0xc,%esp
f0103594:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103597:	50                   	push   %eax
f0103598:	e8 7d fb ff ff       	call   f010311a <allocate_disk_frame>
f010359d:	83 c4 10             	add    $0x10,%esp
f01035a0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01035a3:	75 07                	jne    f01035ac <pf_add_env_page+0x90>
f01035a5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01035aa:	eb 31                	jmp    f01035dd <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01035ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035af:	8b 55 0c             	mov    0xc(%ebp),%edx
f01035b2:	c1 ea 0c             	shr    $0xc,%edx
f01035b5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01035bb:	c1 e2 02             	shl    $0x2,%edx
f01035be:	01 c2                	add    %eax,%edx
f01035c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c3:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01035c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c8:	83 ec 08             	sub    $0x8,%esp
f01035cb:	ff 75 10             	pushl  0x10(%ebp)
f01035ce:	50                   	push   %eax
f01035cf:	e8 99 f9 ff ff       	call   f0102f6d <write_disk_page>
f01035d4:	83 c4 10             	add    $0x10,%esp
f01035d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01035da:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01035dd:	c9                   	leave  
f01035de:	c3                   	ret    

f01035df <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01035df:	55                   	push   %ebp
f01035e0:	89 e5                	mov    %esp,%ebp
f01035e2:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01035e5:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035ec:	76 19                	jbe    f0103607 <pf_update_env_page+0x28>
f01035ee:	68 8c 4d 13 f0       	push   $0xf0134d8c
f01035f3:	68 b2 4d 13 f0       	push   $0xf0134db2
f01035f8:	68 08 01 00 00       	push   $0x108
f01035fd:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103602:	e8 9f cb ff ff       	call   f01001a6 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103607:	8b 45 08             	mov    0x8(%ebp),%eax
f010360a:	83 c0 64             	add    $0x64,%eax
f010360d:	83 ec 08             	sub    $0x8,%esp
f0103610:	50                   	push   %eax
f0103611:	ff 75 08             	pushl  0x8(%ebp)
f0103614:	e8 d3 04 00 00       	call   f0103aec <get_disk_page_directory>
f0103619:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010361c:	8b 45 08             	mov    0x8(%ebp),%eax
f010361f:	8b 40 64             	mov    0x64(%eax),%eax
f0103622:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103625:	52                   	push   %edx
f0103626:	6a 00                	push   $0x0
f0103628:	ff 75 0c             	pushl  0xc(%ebp)
f010362b:	50                   	push   %eax
f010362c:	e8 91 fc ff ff       	call   f01032c2 <get_disk_page_table>
f0103631:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103634:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103637:	85 c0                	test   %eax,%eax
f0103639:	74 29                	je     f0103664 <pf_update_env_page+0x85>
f010363b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010363e:	85 c0                	test   %eax,%eax
f0103640:	0f 84 43 01 00 00    	je     f0103789 <pf_update_env_page+0x1aa>
f0103646:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103649:	8b 55 0c             	mov    0xc(%ebp),%edx
f010364c:	c1 ea 0c             	shr    $0xc,%edx
f010364f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103655:	c1 e2 02             	shl    $0x2,%edx
f0103658:	01 d0                	add    %edx,%eax
f010365a:	8b 00                	mov    (%eax),%eax
f010365c:	85 c0                	test   %eax,%eax
f010365e:	0f 85 25 01 00 00    	jne    f0103789 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0103664:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103667:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010366d:	85 c0                	test   %eax,%eax
f010366f:	79 09                	jns    f010367a <pf_update_env_page+0x9b>
f0103671:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103678:	76 38                	jbe    f01036b2 <pf_update_env_page+0xd3>
f010367a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103681:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103684:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103689:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010368c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010368f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103694:	f7 75 f0             	divl   -0x10(%ebp)
f0103697:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010369a:	29 d0                	sub    %edx,%eax
f010369c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010369f:	0f 87 cd 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
f01036a5:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01036ac:	0f 87 c0 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01036b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01036b8:	83 ec 04             	sub    $0x4,%esp
f01036bb:	8d 55 d0             	lea    -0x30(%ebp),%edx
f01036be:	52                   	push   %edx
f01036bf:	ff 75 0c             	pushl  0xc(%ebp)
f01036c2:	50                   	push   %eax
f01036c3:	e8 39 35 00 00       	call   f0106c01 <get_frame_info>
f01036c8:	83 c4 10             	add    $0x10,%esp
f01036cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01036ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d1:	3b 45 10             	cmp    0x10(%ebp),%eax
f01036d4:	75 52                	jne    f0103728 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01036d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01036d9:	83 ec 04             	sub    $0x4,%esp
f01036dc:	50                   	push   %eax
f01036dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01036e0:	ff 75 08             	pushl  0x8(%ebp)
f01036e3:	e8 34 fe ff ff       	call   f010351c <pf_add_env_page>
f01036e8:	83 c4 10             	add    $0x10,%esp
f01036eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01036ee:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01036f2:	75 17                	jne    f010370b <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01036f4:	83 ec 04             	sub    $0x4,%esp
f01036f7:	68 c8 4d 13 f0       	push   $0xf0134dc8
f01036fc:	68 1d 01 00 00       	push   $0x11d
f0103701:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103706:	e8 9b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010370b:	8b 45 08             	mov    0x8(%ebp),%eax
f010370e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103714:	8d 50 01             	lea    0x1(%eax),%edx
f0103717:	8b 45 08             	mov    0x8(%ebp),%eax
f010371a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
				return ret ;
f0103720:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103723:	e9 ff 00 00 00       	jmp    f0103827 <pf_update_env_page+0x248>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103728:	83 ec 04             	sub    $0x4,%esp
f010372b:	6a 00                	push   $0x0
f010372d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103730:	ff 75 08             	pushl  0x8(%ebp)
f0103733:	e8 b3 fc ff ff       	call   f01033eb <pf_add_empty_env_page>
f0103738:	83 c4 10             	add    $0x10,%esp
f010373b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010373e:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103742:	75 17                	jne    f010375b <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103744:	83 ec 04             	sub    $0x4,%esp
f0103747:	68 f4 4d 13 f0       	push   $0xf0134df4
f010374c:	68 28 01 00 00       	push   $0x128
f0103751:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103756:	e8 4b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010375b:	8b 45 08             	mov    0x8(%ebp),%eax
f010375e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103764:	8d 50 01             	lea    0x1(%eax),%edx
f0103767:	8b 45 08             	mov    0x8(%ebp),%eax
f010376a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103770:	eb 17                	jmp    f0103789 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103772:	83 ec 04             	sub    $0x4,%esp
f0103775:	68 40 4e 13 f0       	push   $0xf0134e40
f010377a:	68 2f 01 00 00       	push   $0x12f
f010377f:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103784:	e8 1d ca ff ff       	call   f01001a6 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 24 fb ff ff       	call   f01032c2 <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01037a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01037a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037a7:	c1 ea 0c             	shr    $0xc,%edx
f01037aa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b0:	c1 e2 02             	shl    $0x2,%edx
f01037b3:	01 d0                	add    %edx,%eax
f01037b5:	8b 00                	mov    (%eax),%eax
f01037b7:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f01037ba:	83 ec 0c             	sub    $0xc,%esp
f01037bd:	ff 75 10             	pushl  0x10(%ebp)
f01037c0:	e8 20 f7 ff ff       	call   f0102ee5 <to_physical_address>
f01037c5:	83 c4 10             	add    $0x10,%esp
f01037c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01037cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037ce:	c1 e8 0c             	shr    $0xc,%eax
f01037d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01037d4:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f01037d9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f01037dc:	72 17                	jb     f01037f5 <pf_update_env_page+0x216>
f01037de:	ff 75 dc             	pushl  -0x24(%ebp)
f01037e1:	68 5c 4d 13 f0       	push   $0xf0134d5c
f01037e6:	68 47 01 00 00       	push   $0x147
f01037eb:	68 f9 4c 13 f0       	push   $0xf0134cf9
f01037f0:	e8 b1 c9 ff ff       	call   f01001a6 <_panic>
f01037f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037f8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01037fd:	83 ec 08             	sub    $0x8,%esp
f0103800:	50                   	push   %eax
f0103801:	ff 75 e0             	pushl  -0x20(%ebp)
f0103804:	e8 64 f7 ff ff       	call   f0102f6d <write_disk_page>
f0103809:	83 c4 10             	add    $0x10,%esp
f010380c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f010380f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103812:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f0103818:	8d 50 01             	lea    0x1(%eax),%edx
f010381b:	8b 45 08             	mov    0x8(%ebp),%eax
f010381e:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
	//======================

	return ret;
f0103824:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103827:	c9                   	leave  
f0103828:	c3                   	ret    

f0103829 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103829:	55                   	push   %ebp
f010382a:	89 e5                	mov    %esp,%ebp
f010382c:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f010382f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103832:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103835:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103838:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010383d:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103840:	8b 45 08             	mov    0x8(%ebp),%eax
f0103843:	8b 40 64             	mov    0x64(%eax),%eax
f0103846:	85 c0                	test   %eax,%eax
f0103848:	75 0a                	jne    f0103854 <pf_read_env_page+0x2b>
f010384a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010384f:	e9 90 00 00 00       	jmp    f01038e4 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103854:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103857:	8b 45 08             	mov    0x8(%ebp),%eax
f010385a:	8b 40 64             	mov    0x64(%eax),%eax
f010385d:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103860:	51                   	push   %ecx
f0103861:	6a 00                	push   $0x0
f0103863:	52                   	push   %edx
f0103864:	50                   	push   %eax
f0103865:	e8 58 fa ff ff       	call   f01032c2 <get_disk_page_table>
f010386a:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010386d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103870:	85 c0                	test   %eax,%eax
f0103872:	75 07                	jne    f010387b <pf_read_env_page+0x52>
f0103874:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103879:	eb 69                	jmp    f01038e4 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010387b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010387e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103881:	c1 ea 0c             	shr    $0xc,%edx
f0103884:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010388a:	c1 e2 02             	shl    $0x2,%edx
f010388d:	01 d0                	add    %edx,%eax
f010388f:	8b 00                	mov    (%eax),%eax
f0103891:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103894:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103898:	75 07                	jne    f01038a1 <pf_read_env_page+0x78>
f010389a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010389f:	eb 43                	jmp    f01038e4 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f01038a1:	83 ec 08             	sub    $0x8,%esp
f01038a4:	ff 75 0c             	pushl  0xc(%ebp)
f01038a7:	ff 75 f0             	pushl  -0x10(%ebp)
f01038aa:	e8 8f f6 ff ff       	call   f0102f3e <read_disk_page>
f01038af:	83 c4 10             	add    $0x10,%esp
f01038b2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f01038b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01038b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038bb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038be:	6a 40                	push   $0x40
f01038c0:	6a 00                	push   $0x0
f01038c2:	52                   	push   %edx
f01038c3:	50                   	push   %eax
f01038c4:	e8 2b 3e 00 00       	call   f01076f4 <pt_set_page_permissions>
f01038c9:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f01038cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cf:	8b 80 08 da 01 00    	mov    0x1da08(%eax),%eax
f01038d5:	8d 50 01             	lea    0x1(%eax),%edx
f01038d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038db:	89 90 08 da 01 00    	mov    %edx,0x1da08(%eax)
	//======================

	return disk_read_error;
f01038e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01038e4:	c9                   	leave  
f01038e5:	c3                   	ret    

f01038e6 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01038e6:	55                   	push   %ebp
f01038e7:	89 e5                	mov    %esp,%ebp
f01038e9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01038ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ef:	8b 40 64             	mov    0x64(%eax),%eax
f01038f2:	85 c0                	test   %eax,%eax
f01038f4:	74 62                	je     f0103958 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 b7 f9 ff ff       	call   f01032c2 <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010390e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103911:	85 c0                	test   %eax,%eax
f0103913:	74 46                	je     f010395b <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103915:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103918:	8b 55 0c             	mov    0xc(%ebp),%edx
f010391b:	c1 ea 0c             	shr    $0xc,%edx
f010391e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103924:	c1 e2 02             	shl    $0x2,%edx
f0103927:	01 d0                	add    %edx,%eax
f0103929:	8b 00                	mov    (%eax),%eax
f010392b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010392e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103931:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103934:	c1 ea 0c             	shr    $0xc,%edx
f0103937:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010393d:	c1 e2 02             	shl    $0x2,%edx
f0103940:	01 d0                	add    %edx,%eax
f0103942:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103948:	83 ec 0c             	sub    $0xc,%esp
f010394b:	ff 75 f4             	pushl  -0xc(%ebp)
f010394e:	e8 8e f8 ff ff       	call   f01031e1 <free_disk_frame>
f0103953:	83 c4 10             	add    $0x10,%esp
f0103956:	eb 04                	jmp    f010395c <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103958:	90                   	nop
f0103959:	eb 01                	jmp    f010395c <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010395b:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010395c:	c9                   	leave  
f010395d:	c3                   	ret    

f010395e <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010395e:	55                   	push   %ebp
f010395f:	89 e5                	mov    %esp,%ebp
f0103961:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103964:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010396b:	e9 ee 00 00 00       	jmp    f0103a5e <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103970:	8b 45 08             	mov    0x8(%ebp),%eax
f0103973:	8b 40 64             	mov    0x64(%eax),%eax
f0103976:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103979:	c1 e2 02             	shl    $0x2,%edx
f010397c:	01 d0                	add    %edx,%eax
f010397e:	8b 00                	mov    (%eax),%eax
f0103980:	83 e0 01             	and    $0x1,%eax
f0103983:	85 c0                	test   %eax,%eax
f0103985:	0f 84 cf 00 00 00    	je     f0103a5a <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010398b:	8b 45 08             	mov    0x8(%ebp),%eax
f010398e:	8b 40 64             	mov    0x64(%eax),%eax
f0103991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103994:	c1 e2 02             	shl    $0x2,%edx
f0103997:	01 d0                	add    %edx,%eax
f0103999:	8b 00                	mov    (%eax),%eax
f010399b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01039a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01039a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01039a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039ac:	c1 e8 0c             	shr    $0xc,%eax
f01039af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01039b2:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f01039b7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01039ba:	72 17                	jb     f01039d3 <pf_free_env+0x75>
f01039bc:	ff 75 e8             	pushl  -0x18(%ebp)
f01039bf:	68 5c 4d 13 f0       	push   $0xf0134d5c
f01039c4:	68 96 01 00 00       	push   $0x196
f01039c9:	68 f9 4c 13 f0       	push   $0xf0134cf9
f01039ce:	e8 d3 c7 ff ff       	call   f01001a6 <_panic>
f01039d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039d6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01039db:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01039de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01039e5:	eb 3a                	jmp    f0103a21 <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01039e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01039f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01039f4:	01 d0                	add    %edx,%eax
f01039f6:	8b 00                	mov    (%eax),%eax
f01039f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01039fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103a05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103a08:	01 d0                	add    %edx,%eax
f0103a0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103a10:	83 ec 0c             	sub    $0xc,%esp
f0103a13:	ff 75 dc             	pushl  -0x24(%ebp)
f0103a16:	e8 c6 f7 ff ff       	call   f01031e1 <free_disk_frame>
f0103a1b:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103a1e:	ff 45 f0             	incl   -0x10(%ebp)
f0103a21:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103a28:	76 bd                	jbe    f01039e7 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2d:	8b 40 64             	mov    0x64(%eax),%eax
f0103a30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a33:	c1 e2 02             	shl    $0x2,%edx
f0103a36:	01 d0                	add    %edx,%eax
f0103a38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0103a3e:	83 ec 0c             	sub    $0xc,%esp
f0103a41:	ff 75 ec             	pushl  -0x14(%ebp)
f0103a44:	e8 af f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a49:	83 c4 10             	add    $0x10,%esp
f0103a4c:	83 ec 0c             	sub    $0xc,%esp
f0103a4f:	50                   	push   %eax
f0103a50:	e8 e4 2e 00 00       	call   f0106939 <decrement_references>
f0103a55:	83 c4 10             	add    $0x10,%esp
f0103a58:	eb 01                	jmp    f0103a5b <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103a5a:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103a5b:	ff 45 f4             	incl   -0xc(%ebp)
f0103a5e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103a65:	0f 86 05 ff ff ff    	jbe    f0103970 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0103a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6e:	8b 40 68             	mov    0x68(%eax),%eax
f0103a71:	83 ec 0c             	sub    $0xc,%esp
f0103a74:	50                   	push   %eax
f0103a75:	e8 7e f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a7a:	83 c4 10             	add    $0x10,%esp
f0103a7d:	83 ec 0c             	sub    $0xc,%esp
f0103a80:	50                   	push   %eax
f0103a81:	e8 b3 2e 00 00       	call   f0106939 <decrement_references>
f0103a86:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a8c:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103a93:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a96:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103a9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103aa3:	85 c0                	test   %eax,%eax
f0103aa5:	74 42                	je     f0103ae9 <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103aa7:	83 ec 0c             	sub    $0xc,%esp
f0103aaa:	ff 75 08             	pushl  0x8(%ebp)
f0103aad:	e8 ee 03 00 00       	call   f0103ea0 <__pf_remove_env_all_tables>
f0103ab2:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0103ab5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ab8:	8b 40 70             	mov    0x70(%eax),%eax
f0103abb:	83 ec 0c             	sub    $0xc,%esp
f0103abe:	50                   	push   %eax
f0103abf:	e8 34 f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103ac4:	83 c4 10             	add    $0x10,%esp
f0103ac7:	83 ec 0c             	sub    $0xc,%esp
f0103aca:	50                   	push   %eax
f0103acb:	e8 69 2e 00 00       	call   f0106939 <decrement_references>
f0103ad0:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad6:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103ae7:	eb 01                	jmp    f0103aea <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103ae9:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103aea:	c9                   	leave  
f0103aeb:	c3                   	ret    

f0103aec <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103aec:	55                   	push   %ebp
f0103aed:	89 e5                	mov    %esp,%ebp
f0103aef:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af5:	8b 50 64             	mov    0x64(%eax),%edx
f0103af8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103afb:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103afd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b00:	8b 00                	mov    (%eax),%eax
f0103b02:	85 c0                	test   %eax,%eax
f0103b04:	0f 85 aa 00 00 00    	jne    f0103bb4 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103b0a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103b11:	83 ec 0c             	sub    $0xc,%esp
f0103b14:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103b17:	50                   	push   %eax
f0103b18:	e8 8d 2c 00 00       	call   f01067aa <allocate_frame>
f0103b1d:	83 c4 10             	add    $0x10,%esp
f0103b20:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103b23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103b27:	79 08                	jns    f0103b31 <get_disk_page_directory+0x45>
				return r;
f0103b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b2c:	e9 88 00 00 00       	jmp    f0103bb9 <get_disk_page_directory+0xcd>
			p->references = 1;
f0103b31:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b34:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103b3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b3d:	83 ec 0c             	sub    $0xc,%esp
f0103b40:	50                   	push   %eax
f0103b41:	e8 9f f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b46:	83 c4 10             	add    $0x10,%esp
f0103b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b4f:	c1 e8 0c             	shr    $0xc,%eax
f0103b52:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b55:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0103b5a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b5d:	72 17                	jb     f0103b76 <get_disk_page_directory+0x8a>
f0103b5f:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b62:	68 5c 4d 13 f0       	push   $0xf0134d5c
f0103b67:	68 ee 01 00 00       	push   $0x1ee
f0103b6c:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103b71:	e8 30 c6 ff ff       	call   f01001a6 <_panic>
f0103b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b79:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b7e:	89 c2                	mov    %eax,%edx
f0103b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b83:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0103b85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b88:	83 ec 0c             	sub    $0xc,%esp
f0103b8b:	50                   	push   %eax
f0103b8c:	e8 54 f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b91:	83 c4 10             	add    $0x10,%esp
f0103b94:	89 c2                	mov    %eax,%edx
f0103b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b99:	89 50 68             	mov    %edx,0x68(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b9f:	8b 00                	mov    (%eax),%eax
f0103ba1:	83 ec 04             	sub    $0x4,%esp
f0103ba4:	68 00 10 00 00       	push   $0x1000
f0103ba9:	6a 00                	push   $0x0
f0103bab:	50                   	push   %eax
f0103bac:	e8 92 ce 02 00       	call   f0130a43 <memset>
f0103bb1:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103bb9:	c9                   	leave  
f0103bba:	c3                   	ret    

f0103bbb <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103bbb:	55                   	push   %ebp
f0103bbc:	89 e5                	mov    %esp,%ebp
f0103bbe:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103bc1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103bc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103bcf:	e9 a6 00 00 00       	jmp    f0103c7a <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd7:	8b 40 64             	mov    0x64(%eax),%eax
f0103bda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bdd:	c1 e2 02             	shl    $0x2,%edx
f0103be0:	01 d0                	add    %edx,%eax
f0103be2:	8b 00                	mov    (%eax),%eax
f0103be4:	83 e0 01             	and    $0x1,%eax
f0103be7:	85 c0                	test   %eax,%eax
f0103be9:	0f 84 87 00 00 00    	je     f0103c76 <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf2:	8b 40 64             	mov    0x64(%eax),%eax
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	c1 e2 02             	shl    $0x2,%edx
f0103bfb:	01 d0                	add    %edx,%eax
f0103bfd:	8b 00                	mov    (%eax),%eax
f0103bff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c04:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0103c07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c0a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c10:	c1 e8 0c             	shr    $0xc,%eax
f0103c13:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103c16:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0103c1b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103c1e:	72 17                	jb     f0103c37 <pf_calculate_allocated_pages+0x7c>
f0103c20:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103c23:	68 5c 4d 13 f0       	push   $0xf0134d5c
f0103c28:	68 0e 02 00 00       	push   $0x20e
f0103c2d:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103c32:	e8 6f c5 ff ff       	call   f01001a6 <_panic>
f0103c37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c3a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c3f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c42:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103c49:	eb 20                	jmp    f0103c6b <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103c4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103c58:	01 d0                	add    %edx,%eax
f0103c5a:	8b 00                	mov    (%eax),%eax
f0103c5c:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0103c5f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0103c63:	74 03                	je     f0103c68 <pf_calculate_allocated_pages+0xad>
				counter ++;
f0103c65:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c68:	ff 45 ec             	incl   -0x14(%ebp)
f0103c6b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103c72:	76 d7                	jbe    f0103c4b <pf_calculate_allocated_pages+0x90>
f0103c74:	eb 01                	jmp    f0103c77 <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103c76:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103c77:	ff 45 f4             	incl   -0xc(%ebp)
f0103c7a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c81:	0f 86 4d ff ff ff    	jbe    f0103bd4 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103c87:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103c8a:	c9                   	leave  
f0103c8b:	c3                   	ret    

f0103c8c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103c8c:	55                   	push   %ebp
f0103c8d:	89 e5                	mov    %esp,%ebp
f0103c8f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103c92:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103c99:	a1 f4 1e 6c f0       	mov    0xf06c1ef4,%eax
f0103c9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ca1:	eb 0b                	jmp    f0103cae <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ca3:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103ca6:	a1 fc 1e 6c f0       	mov    0xf06c1efc,%eax
f0103cab:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103cae:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cb2:	74 07                	je     f0103cbb <pf_calculate_free_frames+0x2f>
f0103cb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103cb7:	8b 00                	mov    (%eax),%eax
f0103cb9:	eb 05                	jmp    f0103cc0 <pf_calculate_free_frames+0x34>
f0103cbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0103cc0:	a3 fc 1e 6c f0       	mov    %eax,0xf06c1efc
f0103cc5:	a1 fc 1e 6c f0       	mov    0xf06c1efc,%eax
f0103cca:	85 c0                	test   %eax,%eax
f0103ccc:	75 d5                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
f0103cce:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cd2:	75 cf                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103cd4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103cd7:	c9                   	leave  
f0103cd8:	c3                   	ret    

f0103cd9 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103cd9:	55                   	push   %ebp
f0103cda:	89 e5                	mov    %esp,%ebp
f0103cdc:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103cdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ce2:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103ce5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce8:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103cea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ced:	8b 00                	mov    (%eax),%eax
f0103cef:	85 c0                	test   %eax,%eax
f0103cf1:	0f 85 aa 00 00 00    	jne    f0103da1 <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103cf7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103cfe:	83 ec 0c             	sub    $0xc,%esp
f0103d01:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103d04:	50                   	push   %eax
f0103d05:	e8 a0 2a 00 00       	call   f01067aa <allocate_frame>
f0103d0a:	83 c4 10             	add    $0x10,%esp
f0103d0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103d10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103d14:	79 08                	jns    f0103d1e <get_disk_table_directory+0x45>
				return r;
f0103d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d19:	e9 88 00 00 00       	jmp    f0103da6 <get_disk_table_directory+0xcd>
			p->references = 1;
f0103d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d21:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103d27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d2a:	83 ec 0c             	sub    $0xc,%esp
f0103d2d:	50                   	push   %eax
f0103d2e:	e8 b2 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d33:	83 c4 10             	add    $0x10,%esp
f0103d36:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d3c:	c1 e8 0c             	shr    $0xc,%eax
f0103d3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103d42:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0103d47:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103d4a:	72 17                	jb     f0103d63 <get_disk_table_directory+0x8a>
f0103d4c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103d4f:	68 5c 4d 13 f0       	push   $0xf0134d5c
f0103d54:	68 4c 02 00 00       	push   $0x24c
f0103d59:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103d5e:	e8 43 c4 ff ff       	call   f01001a6 <_panic>
f0103d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d66:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d6b:	89 c2                	mov    %eax,%edx
f0103d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d70:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f0103d72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d75:	83 ec 0c             	sub    $0xc,%esp
f0103d78:	50                   	push   %eax
f0103d79:	e8 67 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d7e:	83 c4 10             	add    $0x10,%esp
f0103d81:	89 c2                	mov    %eax,%edx
f0103d83:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d86:	89 50 70             	mov    %edx,0x70(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103d89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d8c:	8b 00                	mov    (%eax),%eax
f0103d8e:	83 ec 04             	sub    $0x4,%esp
f0103d91:	68 00 10 00 00       	push   $0x1000
f0103d96:	6a 00                	push   $0x0
f0103d98:	50                   	push   %eax
f0103d99:	e8 a5 cc 02 00       	call   f0130a43 <memset>
f0103d9e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103da1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103da6:	c9                   	leave  
f0103da7:	c3                   	ret    

f0103da8 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103da8:	55                   	push   %ebp
f0103da9:	89 e5                	mov    %esp,%ebp
f0103dab:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103dae:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103db5:	76 19                	jbe    f0103dd0 <__pf_write_env_table+0x28>
f0103db7:	68 8c 4d 13 f0       	push   $0xf0134d8c
f0103dbc:	68 b2 4d 13 f0       	push   $0xf0134db2
f0103dc1:	68 5a 02 00 00       	push   $0x25a
f0103dc6:	68 f9 4c 13 f0       	push   $0xf0134cf9
f0103dcb:	e8 d6 c3 ff ff       	call   f01001a6 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103dd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd3:	83 c0 6c             	add    $0x6c,%eax
f0103dd6:	83 ec 08             	sub    $0x8,%esp
f0103dd9:	50                   	push   %eax
f0103dda:	ff 75 08             	pushl  0x8(%ebp)
f0103ddd:	e8 f7 fe ff ff       	call   f0103cd9 <get_disk_table_directory>
f0103de2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103de5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de8:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103deb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103dee:	c1 ea 16             	shr    $0x16,%edx
f0103df1:	c1 e2 02             	shl    $0x2,%edx
f0103df4:	01 d0                	add    %edx,%eax
f0103df6:	8b 00                	mov    (%eax),%eax
f0103df8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103dfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dfe:	85 c0                	test   %eax,%eax
f0103e00:	75 31                	jne    f0103e33 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e02:	83 ec 0c             	sub    $0xc,%esp
f0103e05:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e08:	50                   	push   %eax
f0103e09:	e8 0c f3 ff ff       	call   f010311a <allocate_disk_frame>
f0103e0e:	83 c4 10             	add    $0x10,%esp
f0103e11:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e14:	75 07                	jne    f0103e1d <__pf_write_env_table+0x75>
f0103e16:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e1b:	eb 2e                	jmp    f0103e4b <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e20:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e23:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e26:	c1 ea 16             	shr    $0x16,%edx
f0103e29:	c1 e2 02             	shl    $0x2,%edx
f0103e2c:	01 c2                	add    %eax,%edx
f0103e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e31:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e36:	83 ec 08             	sub    $0x8,%esp
f0103e39:	ff 75 10             	pushl  0x10(%ebp)
f0103e3c:	50                   	push   %eax
f0103e3d:	e8 2b f1 ff ff       	call   f0102f6d <write_disk_page>
f0103e42:	83 c4 10             	add    $0x10,%esp
f0103e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103e4b:	c9                   	leave  
f0103e4c:	c3                   	ret    

f0103e4d <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e4d:	55                   	push   %ebp
f0103e4e:	89 e5                	mov    %esp,%ebp
f0103e50:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e56:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e59:	85 c0                	test   %eax,%eax
f0103e5b:	75 07                	jne    f0103e64 <__pf_read_env_table+0x17>
f0103e5d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e62:	eb 3a                	jmp    f0103e9e <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e67:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e6d:	c1 ea 16             	shr    $0x16,%edx
f0103e70:	c1 e2 02             	shl    $0x2,%edx
f0103e73:	01 d0                	add    %edx,%eax
f0103e75:	8b 00                	mov    (%eax),%eax
f0103e77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e7e:	75 07                	jne    f0103e87 <__pf_read_env_table+0x3a>
f0103e80:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e85:	eb 17                	jmp    f0103e9e <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103e87:	83 ec 08             	sub    $0x8,%esp
f0103e8a:	ff 75 10             	pushl  0x10(%ebp)
f0103e8d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e90:	e8 a9 f0 ff ff       	call   f0102f3e <read_disk_page>
f0103e95:	83 c4 10             	add    $0x10,%esp
f0103e98:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103e9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103e9e:	c9                   	leave  
f0103e9f:	c3                   	ret    

f0103ea0 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103ea0:	55                   	push   %ebp
f0103ea1:	89 e5                	mov    %esp,%ebp
f0103ea3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103ea6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ea9:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eac:	85 c0                	test   %eax,%eax
f0103eae:	74 4c                	je     f0103efc <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103eb7:	eb 38                	jmp    f0103ef1 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103eb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ebc:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ebf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ec2:	c1 e2 02             	shl    $0x2,%edx
f0103ec5:	01 d0                	add    %edx,%eax
f0103ec7:	8b 00                	mov    (%eax),%eax
f0103ec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103ecc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ecf:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ed5:	c1 e2 02             	shl    $0x2,%edx
f0103ed8:	01 d0                	add    %edx,%eax
f0103eda:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103ee0:	83 ec 0c             	sub    $0xc,%esp
f0103ee3:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ee6:	e8 f6 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103eeb:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eee:	ff 45 f4             	incl   -0xc(%ebp)
f0103ef1:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103ef8:	76 bf                	jbe    f0103eb9 <__pf_remove_env_all_tables+0x19>
f0103efa:	eb 01                	jmp    f0103efd <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103efc:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103efd:	c9                   	leave  
f0103efe:	c3                   	ret    

f0103eff <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103eff:	55                   	push   %ebp
f0103f00:	89 e5                	mov    %esp,%ebp
f0103f02:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f05:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f09:	75 10                	jne    f0103f1b <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f0b:	83 ec 0c             	sub    $0xc,%esp
f0103f0e:	68 bc 4e 13 f0       	push   $0xf0134ebc
f0103f13:	e8 15 cd ff ff       	call   f0100c2d <cprintf>
f0103f18:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f1e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f21:	85 c0                	test   %eax,%eax
f0103f23:	74 3d                	je     f0103f62 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f28:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2e:	c1 ea 16             	shr    $0x16,%edx
f0103f31:	c1 e2 02             	shl    $0x2,%edx
f0103f34:	01 d0                	add    %edx,%eax
f0103f36:	8b 00                	mov    (%eax),%eax
f0103f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f41:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f44:	c1 ea 16             	shr    $0x16,%edx
f0103f47:	c1 e2 02             	shl    $0x2,%edx
f0103f4a:	01 d0                	add    %edx,%eax
f0103f4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f52:	83 ec 0c             	sub    $0xc,%esp
f0103f55:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f58:	e8 84 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103f5d:	83 c4 10             	add    $0x10,%esp
f0103f60:	eb 01                	jmp    f0103f63 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f62:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103f63:	c9                   	leave  
f0103f64:	c3                   	ret    

f0103f65 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103f65:	55                   	push   %ebp
f0103f66:	89 e5                	mov    %esp,%ebp
f0103f68:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103f6b:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103f72:	eb 1f                	jmp    f0103f93 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f77:	83 ec 04             	sub    $0x4,%esp
f0103f7a:	6a 08                	push   $0x8
f0103f7c:	ff 75 08             	pushl  0x8(%ebp)
f0103f7f:	50                   	push   %eax
f0103f80:	e8 63 d1 02 00       	call   f01310e8 <ide_write>
f0103f85:	83 c4 10             	add    $0x10,%esp
f0103f88:	85 c0                	test   %eax,%eax
f0103f8a:	75 12                	jne    f0103f9e <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103f8c:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103f93:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103f9a:	7e d8                	jle    f0103f74 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9c:	eb 01                	jmp    f0103f9f <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103f9e:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9f:	90                   	nop
f0103fa0:	c9                   	leave  
f0103fa1:	c3                   	ret    

f0103fa2 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103fa2:	55                   	push   %ebp
f0103fa3:	89 e5                	mov    %esp,%ebp
f0103fa5:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fa8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fab:	0f b6 c0             	movzbl %al,%eax
f0103fae:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fb5:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fb8:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103fbb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103fbe:	ee                   	out    %al,(%dx)
f0103fbf:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103fc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103fc9:	89 c2                	mov    %eax,%edx
f0103fcb:	ec                   	in     (%dx),%al
f0103fcc:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0103fcf:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0103fd2:	0f b6 c0             	movzbl %al,%eax
}
f0103fd5:	c9                   	leave  
f0103fd6:	c3                   	ret    

f0103fd7 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0103fd7:	55                   	push   %ebp
f0103fd8:	89 e5                	mov    %esp,%ebp
f0103fda:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fe0:	0f b6 c0             	movzbl %al,%eax
f0103fe3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fea:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fed:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103ff0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103ff3:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0103ff4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ff7:	0f b6 c0             	movzbl %al,%eax
f0103ffa:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104001:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104004:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104007:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010400a:	ee                   	out    %al,(%dx)
}
f010400b:	90                   	nop
f010400c:	c9                   	leave  
f010400d:	c3                   	ret    

f010400e <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f010400e:	55                   	push   %ebp
f010400f:	89 e5                	mov    %esp,%ebp
f0104011:	53                   	push   %ebx
f0104012:	83 ec 24             	sub    $0x24,%esp
f0104015:	8b 45 08             	mov    0x8(%ebp),%eax
f0104018:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010401b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104022:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104026:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010402c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010402d:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104031:	77 48                	ja     f010407b <kclock_start+0x6d>
f0104033:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010403a:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f010403e:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104044:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104045:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104049:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010404e:	99                   	cltd   
f010404f:	f7 fb                	idiv   %ebx
f0104051:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104057:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010405b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104060:	99                   	cltd   
f0104061:	f7 fb                	idiv   %ebx
f0104063:	89 c3                	mov    %eax,%ebx
f0104065:	89 c8                	mov    %ecx,%eax
f0104067:	99                   	cltd   
f0104068:	f7 fb                	idiv   %ebx
f010406a:	0f b7 c0             	movzwl %ax,%eax
f010406d:	83 ec 0c             	sub    $0xc,%esp
f0104070:	50                   	push   %eax
f0104071:	e8 b8 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104076:	83 c4 10             	add    $0x10,%esp
f0104079:	eb 13                	jmp    f010408e <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010407b:	6a 35                	push   $0x35
f010407d:	68 e0 4e 13 f0       	push   $0xf0134ee0
f0104082:	6a 33                	push   $0x33
f0104084:	68 3c 4f 13 f0       	push   $0xf0134f3c
f0104089:	e8 18 c1 ff ff       	call   f01001a6 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010408e:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0104094:	0f b7 c0             	movzwl %ax,%eax
f0104097:	25 fe ff 00 00       	and    $0xfffe,%eax
f010409c:	83 ec 0c             	sub    $0xc,%esp
f010409f:	50                   	push   %eax
f01040a0:	e8 2d 1b 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040a5:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01040a8:	90                   	nop
f01040a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01040ac:	c9                   	leave  
f01040ad:	c3                   	ret    

f01040ae <kclock_stop>:

void
kclock_stop(void)
{
f01040ae:	55                   	push   %ebp
f01040af:	89 e5                	mov    %esp,%ebp
f01040b1:	83 ec 18             	sub    $0x18,%esp
f01040b4:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01040bb:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01040bf:	8a 45 f3             	mov    -0xd(%ebp),%al
f01040c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01040c5:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01040c6:	83 ec 0c             	sub    $0xc,%esp
f01040c9:	68 ff ff 00 00       	push   $0xffff
f01040ce:	e8 ff 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040d3:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01040d6:	90                   	nop
f01040d7:	c9                   	leave  
f01040d8:	c3                   	ret    

f01040d9 <kclock_resume>:

void
kclock_resume(void)
{
f01040d9:	55                   	push   %ebp
f01040da:	89 e5                	mov    %esp,%ebp
f01040dc:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01040df:	e8 8c 01 00 00       	call   f0104270 <kclock_read_cnt0>
f01040e4:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01040e8:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01040ed:	77 06                	ja     f01040f5 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01040ef:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01040f5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01040f9:	83 e0 01             	and    $0x1,%eax
f01040fc:	66 85 c0             	test   %ax,%ax
f01040ff:	74 09                	je     f010410a <kclock_resume+0x31>
		cnt0++;
f0104101:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104105:	40                   	inc    %eax
f0104106:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010410a:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104111:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104115:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104118:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010411b:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010411c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	50                   	push   %eax
f0104124:	e8 05 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104129:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010412c:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0104132:	0f b7 c0             	movzwl %ax,%eax
f0104135:	25 fe ff 00 00       	and    $0xfffe,%eax
f010413a:	83 ec 0c             	sub    $0xc,%esp
f010413d:	50                   	push   %eax
f010413e:	e8 8f 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0104143:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104146:	90                   	nop
f0104147:	c9                   	leave  
f0104148:	c3                   	ret    

f0104149 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104149:	55                   	push   %ebp
f010414a:	89 e5                	mov    %esp,%ebp
f010414c:	83 ec 28             	sub    $0x28,%esp
f010414f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104152:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104155:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010415c:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104160:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104163:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104166:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104167:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010416b:	83 ec 0c             	sub    $0xc,%esp
f010416e:	50                   	push   %eax
f010416f:	e8 ba 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104174:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104177:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f010417d:	0f b7 c0             	movzwl %ax,%eax
f0104180:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104185:	83 ec 0c             	sub    $0xc,%esp
f0104188:	50                   	push   %eax
f0104189:	e8 44 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f010418e:	83 c4 10             	add    $0x10,%esp

}
f0104191:	90                   	nop
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	53                   	push   %ebx
f0104198:	83 ec 24             	sub    $0x24,%esp
f010419b:	8b 45 08             	mov    0x8(%ebp),%eax
f010419e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041a1:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041a5:	77 6c                	ja     f0104213 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01041a7:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041ab:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01041b0:	99                   	cltd   
f01041b1:	f7 fb                	idiv   %ebx
f01041b3:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01041b9:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041bd:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01041c2:	99                   	cltd   
f01041c3:	f7 fb                	idiv   %ebx
f01041c5:	89 c3                	mov    %eax,%ebx
f01041c7:	89 c8                	mov    %ecx,%eax
f01041c9:	99                   	cltd   
f01041ca:	f7 fb                	idiv   %ebx
f01041cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01041cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041d2:	25 01 00 00 80       	and    $0x80000001,%eax
f01041d7:	85 c0                	test   %eax,%eax
f01041d9:	79 05                	jns    f01041e0 <kclock_set_quantum+0x4c>
f01041db:	48                   	dec    %eax
f01041dc:	83 c8 fe             	or     $0xfffffffe,%eax
f01041df:	40                   	inc    %eax
f01041e0:	83 f8 01             	cmp    $0x1,%eax
f01041e3:	75 03                	jne    f01041e8 <kclock_set_quantum+0x54>
			cnt++;
f01041e5:	ff 45 f4             	incl   -0xc(%ebp)
f01041e8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041ef:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041f3:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01041f9:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01041fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041fd:	0f b7 c0             	movzwl %ax,%eax
f0104200:	83 ec 0c             	sub    $0xc,%esp
f0104203:	50                   	push   %eax
f0104204:	e8 25 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104209:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f010420c:	e8 9d fe ff ff       	call   f01040ae <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104211:	eb 16                	jmp    f0104229 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104213:	6a 35                	push   $0x35
f0104215:	68 e0 4e 13 f0       	push   $0xf0134ee0
f010421a:	68 c9 00 00 00       	push   $0xc9
f010421f:	68 3c 4f 13 f0       	push   $0xf0134f3c
f0104224:	e8 7d bf ff ff       	call   f01001a6 <_panic>
	}
}
f0104229:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010422c:	c9                   	leave  
f010422d:	c3                   	ret    

f010422e <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f010422e:	55                   	push   %ebp
f010422f:	89 e5                	mov    %esp,%ebp
f0104231:	83 ec 14             	sub    $0x14,%esp
f0104234:	8b 45 08             	mov    0x8(%ebp),%eax
f0104237:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f010423b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010423e:	0f b6 c0             	movzbl %al,%eax
f0104241:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104248:	88 45 f6             	mov    %al,-0xa(%ebp)
f010424b:	8a 45 f6             	mov    -0xa(%ebp),%al
f010424e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104251:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104252:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104255:	66 c1 e8 08          	shr    $0x8,%ax
f0104259:	0f b6 c0             	movzbl %al,%eax
f010425c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104263:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104266:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104269:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010426c:	ee                   	out    %al,(%dx)
}
f010426d:	90                   	nop
f010426e:	c9                   	leave  
f010426f:	c3                   	ret    

f0104270 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104270:	55                   	push   %ebp
f0104271:	89 e5                	mov    %esp,%ebp
f0104273:	83 ec 20             	sub    $0x20,%esp
f0104276:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010427d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104280:	89 c2                	mov    %eax,%edx
f0104282:	ec                   	in     (%dx),%al
f0104283:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104286:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104289:	88 45 ff             	mov    %al,-0x1(%ebp)
f010428c:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104293:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104296:	89 c2                	mov    %eax,%edx
f0104298:	ec                   	in     (%dx),%al
f0104299:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f010429c:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010429f:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042a2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01042a6:	c1 e0 08             	shl    $0x8,%eax
f01042a9:	89 c2                	mov    %eax,%edx
f01042ab:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01042af:	09 d0                	or     %edx,%eax
f01042b1:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01042b8:	c9                   	leave  
f01042b9:	c3                   	ret    

f01042ba <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01042ba:	55                   	push   %ebp
f01042bb:	89 e5                	mov    %esp,%ebp
f01042bd:	83 ec 30             	sub    $0x30,%esp
f01042c0:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042ca:	89 c2                	mov    %eax,%edx
f01042cc:	ec                   	in     (%dx),%al
f01042cd:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01042d0:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01042d3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042d6:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01042dd:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01042e1:	8a 45 dc             	mov    -0x24(%ebp),%al
f01042e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01042e7:	ee                   	out    %al,(%dx)
f01042e8:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042f2:	89 c2                	mov    %eax,%edx
f01042f4:	ec                   	in     (%dx),%al
f01042f5:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01042f8:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042fb:	88 45 f3             	mov    %al,-0xd(%ebp)
f01042fe:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104305:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104308:	89 c2                	mov    %eax,%edx
f010430a:	ec                   	in     (%dx),%al
f010430b:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f010430e:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104311:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104314:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104318:	c1 e0 08             	shl    $0x8,%eax
f010431b:	89 c2                	mov    %eax,%edx
f010431d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104321:	09 d0                	or     %edx,%eax
f0104323:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104327:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010432b:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104332:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104335:	8a 45 df             	mov    -0x21(%ebp),%al
f0104338:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010433b:	ee                   	out    %al,(%dx)

	return cnt0 ;
f010433c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010433f:	c9                   	leave  
f0104340:	c3                   	ret    

f0104341 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104341:	55                   	push   %ebp
f0104342:	89 e5                	mov    %esp,%ebp
f0104344:	a1 88 1e 6c f0       	mov    0xf06c1e88,%eax
f0104349:	85 c0                	test   %eax,%eax
f010434b:	75 07                	jne    f0104354 <isSchedMethodRR+0x13>
f010434d:	b8 01 00 00 00       	mov    $0x1,%eax
f0104352:	eb 05                	jmp    f0104359 <isSchedMethodRR+0x18>
f0104354:	b8 00 00 00 00       	mov    $0x0,%eax
f0104359:	5d                   	pop    %ebp
f010435a:	c3                   	ret    

f010435b <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010435b:	55                   	push   %ebp
f010435c:	89 e5                	mov    %esp,%ebp
f010435e:	a1 88 1e 6c f0       	mov    0xf06c1e88,%eax
f0104363:	83 f8 01             	cmp    $0x1,%eax
f0104366:	75 07                	jne    f010436f <isSchedMethodMLFQ+0x14>
f0104368:	b8 01 00 00 00       	mov    $0x1,%eax
f010436d:	eb 05                	jmp    f0104374 <isSchedMethodMLFQ+0x19>
f010436f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104374:	5d                   	pop    %ebp
f0104375:	c3                   	ret    

f0104376 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0104376:	55                   	push   %ebp
f0104377:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104379:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010437d:	74 1d                	je     f010439c <init_queue+0x26>
	{
		LIST_INIT(queue);
f010437f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104382:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104388:	8b 45 08             	mov    0x8(%ebp),%eax
f010438b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104392:	8b 45 08             	mov    0x8(%ebp),%eax
f0104395:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010439c:	90                   	nop
f010439d:	5d                   	pop    %ebp
f010439e:	c3                   	ret    

f010439f <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f010439f:	55                   	push   %ebp
f01043a0:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043a6:	74 08                	je     f01043b0 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01043a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01043ae:	eb 05                	jmp    f01043b5 <queue_size+0x16>
	}
	else
	{
		return 0;
f01043b0:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01043b5:	5d                   	pop    %ebp
f01043b6:	c3                   	ret    

f01043b7 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01043b7:	55                   	push   %ebp
f01043b8:	89 e5                	mov    %esp,%ebp
f01043ba:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01043bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c1:	74 66                	je     f0104429 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f01043c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c7:	75 14                	jne    f01043dd <enqueue+0x26>
f01043c9:	83 ec 04             	sub    $0x4,%esp
f01043cc:	68 50 4f 13 f0       	push   $0xf0134f50
f01043d1:	6a 2f                	push   $0x2f
f01043d3:	68 73 4f 13 f0       	push   $0xf0134f73
f01043d8:	e8 c9 bd ff ff       	call   f01001a6 <_panic>
f01043dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e0:	8b 10                	mov    (%eax),%edx
f01043e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e5:	89 50 44             	mov    %edx,0x44(%eax)
f01043e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043eb:	8b 40 44             	mov    0x44(%eax),%eax
f01043ee:	85 c0                	test   %eax,%eax
f01043f0:	74 0d                	je     f01043ff <enqueue+0x48>
f01043f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f5:	8b 00                	mov    (%eax),%eax
f01043f7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043fa:	89 50 48             	mov    %edx,0x48(%eax)
f01043fd:	eb 09                	jmp    f0104408 <enqueue+0x51>
f01043ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	89 50 04             	mov    %edx,0x4(%eax)
f0104408:	8b 45 08             	mov    0x8(%ebp),%eax
f010440b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010440e:	89 10                	mov    %edx,(%eax)
f0104410:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104413:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010441a:	8b 45 08             	mov    0x8(%ebp),%eax
f010441d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104420:	8d 50 01             	lea    0x1(%eax),%edx
f0104423:	8b 45 08             	mov    0x8(%ebp),%eax
f0104426:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104429:	90                   	nop
f010442a:	c9                   	leave  
f010442b:	c3                   	ret    

f010442c <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010442c:	55                   	push   %ebp
f010442d:	89 e5                	mov    %esp,%ebp
f010442f:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f0104432:	8b 45 08             	mov    0x8(%ebp),%eax
f0104435:	8b 40 04             	mov    0x4(%eax),%eax
f0104438:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010443b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010443f:	0f 84 8a 00 00 00    	je     f01044cf <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f0104445:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104449:	75 14                	jne    f010445f <dequeue+0x33>
f010444b:	83 ec 04             	sub    $0x4,%esp
f010444e:	68 84 4f 13 f0       	push   $0xf0134f84
f0104453:	6a 38                	push   $0x38
f0104455:	68 73 4f 13 f0       	push   $0xf0134f73
f010445a:	e8 47 bd ff ff       	call   f01001a6 <_panic>
f010445f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104462:	8b 40 44             	mov    0x44(%eax),%eax
f0104465:	85 c0                	test   %eax,%eax
f0104467:	74 11                	je     f010447a <dequeue+0x4e>
f0104469:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010446c:	8b 40 44             	mov    0x44(%eax),%eax
f010446f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104472:	8b 52 48             	mov    0x48(%edx),%edx
f0104475:	89 50 48             	mov    %edx,0x48(%eax)
f0104478:	eb 0c                	jmp    f0104486 <dequeue+0x5a>
f010447a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010447d:	8b 50 48             	mov    0x48(%eax),%edx
f0104480:	8b 45 08             	mov    0x8(%ebp),%eax
f0104483:	89 50 04             	mov    %edx,0x4(%eax)
f0104486:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104489:	8b 40 48             	mov    0x48(%eax),%eax
f010448c:	85 c0                	test   %eax,%eax
f010448e:	74 11                	je     f01044a1 <dequeue+0x75>
f0104490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104493:	8b 40 48             	mov    0x48(%eax),%eax
f0104496:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104499:	8b 52 44             	mov    0x44(%edx),%edx
f010449c:	89 50 44             	mov    %edx,0x44(%eax)
f010449f:	eb 0b                	jmp    f01044ac <dequeue+0x80>
f01044a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044a4:	8b 50 44             	mov    0x44(%eax),%edx
f01044a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01044aa:	89 10                	mov    %edx,(%eax)
f01044ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044af:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01044b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044b9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01044c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01044c6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01044c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044cc:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01044cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01044d2:	c9                   	leave  
f01044d3:	c3                   	ret    

f01044d4 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01044d4:	55                   	push   %ebp
f01044d5:	89 e5                	mov    %esp,%ebp
f01044d7:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f01044da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044de:	0f 84 8a 00 00 00    	je     f010456e <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f01044e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044e8:	75 14                	jne    f01044fe <remove_from_queue+0x2a>
f01044ea:	83 ec 04             	sub    $0x4,%esp
f01044ed:	68 84 4f 13 f0       	push   $0xf0134f84
f01044f2:	6a 41                	push   $0x41
f01044f4:	68 73 4f 13 f0       	push   $0xf0134f73
f01044f9:	e8 a8 bc ff ff       	call   f01001a6 <_panic>
f01044fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104501:	8b 40 44             	mov    0x44(%eax),%eax
f0104504:	85 c0                	test   %eax,%eax
f0104506:	74 11                	je     f0104519 <remove_from_queue+0x45>
f0104508:	8b 45 0c             	mov    0xc(%ebp),%eax
f010450b:	8b 40 44             	mov    0x44(%eax),%eax
f010450e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104511:	8b 52 48             	mov    0x48(%edx),%edx
f0104514:	89 50 48             	mov    %edx,0x48(%eax)
f0104517:	eb 0c                	jmp    f0104525 <remove_from_queue+0x51>
f0104519:	8b 45 0c             	mov    0xc(%ebp),%eax
f010451c:	8b 50 48             	mov    0x48(%eax),%edx
f010451f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104522:	89 50 04             	mov    %edx,0x4(%eax)
f0104525:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104528:	8b 40 48             	mov    0x48(%eax),%eax
f010452b:	85 c0                	test   %eax,%eax
f010452d:	74 11                	je     f0104540 <remove_from_queue+0x6c>
f010452f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104532:	8b 40 48             	mov    0x48(%eax),%eax
f0104535:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104538:	8b 52 44             	mov    0x44(%edx),%edx
f010453b:	89 50 44             	mov    %edx,0x44(%eax)
f010453e:	eb 0b                	jmp    f010454b <remove_from_queue+0x77>
f0104540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104543:	8b 50 44             	mov    0x44(%eax),%edx
f0104546:	8b 45 08             	mov    0x8(%ebp),%eax
f0104549:	89 10                	mov    %edx,(%eax)
f010454b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010454e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104555:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104558:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010455f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104562:	8b 40 0c             	mov    0xc(%eax),%eax
f0104565:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104568:	8b 45 08             	mov    0x8(%ebp),%eax
f010456b:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010456e:	90                   	nop
f010456f:	c9                   	leave  
f0104570:	c3                   	ret    

f0104571 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104571:	55                   	push   %ebp
f0104572:	89 e5                	mov    %esp,%ebp
f0104574:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0104577:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f010457e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104581:	8b 00                	mov    (%eax),%eax
f0104583:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104586:	eb 19                	jmp    f01045a1 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0104588:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010458b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010458e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104591:	75 05                	jne    f0104598 <find_env_in_queue+0x27>
		{
			return ptr_env;
f0104593:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104596:	eb 37                	jmp    f01045cf <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104598:	8b 45 08             	mov    0x8(%ebp),%eax
f010459b:	8b 40 08             	mov    0x8(%eax),%eax
f010459e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045a5:	74 08                	je     f01045af <find_env_in_queue+0x3e>
f01045a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045aa:	8b 40 44             	mov    0x44(%eax),%eax
f01045ad:	eb 05                	jmp    f01045b4 <find_env_in_queue+0x43>
f01045af:	b8 00 00 00 00       	mov    $0x0,%eax
f01045b4:	8b 55 08             	mov    0x8(%ebp),%edx
f01045b7:	89 42 08             	mov    %eax,0x8(%edx)
f01045ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bd:	8b 40 08             	mov    0x8(%eax),%eax
f01045c0:	85 c0                	test   %eax,%eax
f01045c2:	75 c4                	jne    f0104588 <find_env_in_queue+0x17>
f01045c4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045c8:	75 be                	jne    f0104588 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01045ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045cf:	c9                   	leave  
f01045d0:	c3                   	ret    

f01045d1 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f01045d1:	55                   	push   %ebp
f01045d2:	89 e5                	mov    %esp,%ebp
f01045d4:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f01045d7:	83 ec 04             	sub    $0x4,%esp
f01045da:	68 a4 4f 13 f0       	push   $0xf0134fa4
f01045df:	6a 58                	push   $0x58
f01045e1:	68 73 4f 13 f0       	push   $0xf0134f73
f01045e6:	e8 bb bb ff ff       	call   f01001a6 <_panic>

f01045eb <fos_scheduler>:

}

void
fos_scheduler(void)
{
f01045eb:	55                   	push   %ebp
f01045ec:	89 e5                	mov    %esp,%ebp
f01045ee:	83 ec 18             	sub    $0x18,%esp
	chk1();
f01045f1:	e8 35 b5 02 00       	call   f012fb2b <chk1>
	scheduler_status = SCH_STARTED;
f01045f6:	c7 05 94 1e 6c f0 01 	movl   $0x1,0xf06c1e94
f01045fd:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104600:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104607:	a1 88 1e 6c f0       	mov    0xf06c1e88,%eax
f010460c:	85 c0                	test   %eax,%eax
f010460e:	75 48                	jne    f0104658 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104610:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0104615:	85 c0                	test   %eax,%eax
f0104617:	74 16                	je     f010462f <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104619:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010461e:	83 ec 08             	sub    $0x8,%esp
f0104621:	50                   	push   %eax
f0104622:	68 f0 9a 65 f0       	push   $0xf0659af0
f0104627:	e8 8b fd ff ff       	call   f01043b7 <enqueue>
f010462c:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010462f:	83 ec 0c             	sub    $0xc,%esp
f0104632:	68 f0 9a 65 f0       	push   $0xf0659af0
f0104637:	e8 f0 fd ff ff       	call   f010442c <dequeue>
f010463c:	83 c4 10             	add    $0x10,%esp
f010463f:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104642:	a0 68 1e 6c f0       	mov    0xf06c1e68,%al
f0104647:	0f b6 c0             	movzbl %al,%eax
f010464a:	83 ec 0c             	sub    $0xc,%esp
f010464d:	50                   	push   %eax
f010464e:	e8 41 fb ff ff       	call   f0104194 <kclock_set_quantum>
f0104653:	83 c4 10             	add    $0x10,%esp
f0104656:	eb 12                	jmp    f010466a <fos_scheduler+0x7f>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104658:	a1 88 1e 6c f0       	mov    0xf06c1e88,%eax
f010465d:	83 f8 01             	cmp    $0x1,%eax
f0104660:	75 08                	jne    f010466a <fos_scheduler+0x7f>
	{
		next_env = fos_scheduler_MLFQ();
f0104662:	e8 6a ff ff ff       	call   f01045d1 <fos_scheduler_MLFQ>
f0104667:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010466a:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010466f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0104672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104675:	a3 14 92 65 f0       	mov    %eax,0xf0659214
	chk2(next_env) ;
f010467a:	83 ec 0c             	sub    $0xc,%esp
f010467d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104680:	e8 e3 b4 02 00       	call   f012fb68 <chk2>
f0104685:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0104688:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010468b:	a3 14 92 65 f0       	mov    %eax,0xf0659214

	//sched_print_all();

	if(next_env != NULL)
f0104690:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104694:	74 0b                	je     f01046a1 <fos_scheduler+0xb6>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0104696:	83 ec 0c             	sub    $0xc,%esp
f0104699:	ff 75 f4             	pushl  -0xc(%ebp)
f010469c:	e8 c6 4d 00 00       	call   f0109467 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01046a1:	c7 05 14 92 65 f0 00 	movl   $0x0,0xf0659214
f01046a8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01046ab:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f01046b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01046b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01046b6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01046b9:	c7 05 94 1e 6c f0 00 	movl   $0x0,0xf06c1e94
f01046c0:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01046c3:	83 ec 0c             	sub    $0xc,%esp
f01046c6:	6a 00                	push   $0x0
f01046c8:	e8 86 c5 ff ff       	call   f0100c53 <run_command_prompt>
f01046cd:	83 c4 10             	add    $0x10,%esp
f01046d0:	eb f1                	jmp    f01046c3 <fos_scheduler+0xd8>

f01046d2 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01046d2:	55                   	push   %ebp
f01046d3:	89 e5                	mov    %esp,%ebp
f01046d5:	83 ec 18             	sub    $0x18,%esp
f01046d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01046db:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f01046de:	c7 05 94 1e 6c f0 00 	movl   $0x0,0xf06c1e94
f01046e5:	00 00 00 
	scheduler_method = SCH_RR;
f01046e8:	c7 05 88 1e 6c f0 00 	movl   $0x0,0xf06c1e88
f01046ef:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01046f2:	c6 05 bc 1e 6c f0 01 	movb   $0x1,0xf06c1ebc
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f01046f9:	8a 45 f4             	mov    -0xc(%ebp),%al
f01046fc:	a2 68 1e 6c f0       	mov    %al,0xf06c1e68
	kclock_set_quantum(quantums[0]);
f0104701:	a0 68 1e 6c f0       	mov    0xf06c1e68,%al
f0104706:	0f b6 c0             	movzbl %al,%eax
f0104709:	83 ec 0c             	sub    $0xc,%esp
f010470c:	50                   	push   %eax
f010470d:	e8 82 fa ff ff       	call   f0104194 <kclock_set_quantum>
f0104712:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104715:	83 ec 0c             	sub    $0xc,%esp
f0104718:	68 f0 9a 65 f0       	push   $0xf0659af0
f010471d:	e8 54 fc ff ff       	call   f0104376 <init_queue>
f0104722:	83 c4 10             	add    $0x10,%esp
}
f0104725:	90                   	nop
f0104726:	c9                   	leave  
f0104727:	c3                   	ret    

f0104728 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0104728:	55                   	push   %ebp
f0104729:	89 e5                	mov    %esp,%ebp
f010472b:	83 ec 18             	sub    $0x18,%esp
f010472e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104731:	88 45 f4             	mov    %al,-0xc(%ebp)

	//[1] Create the ready queues and initialize them using init_queue()
	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
#else
	panic("sched_init_MLFQ: Kernel Heap is disabled");
f0104734:	83 ec 04             	sub    $0x4,%esp
f0104737:	68 d8 4f 13 f0       	push   $0xf0134fd8
f010473c:	68 cc 00 00 00       	push   $0xcc
f0104741:	68 73 4f 13 f0       	push   $0xf0134f73
f0104746:	e8 5b ba ff ff       	call   f01001a6 <_panic>

f010474b <sched_init>:
#endif
}


void sched_init()
{
f010474b:	55                   	push   %ebp
f010474c:	89 e5                	mov    %esp,%ebp
f010474e:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0104751:	c7 05 58 fa 6b f0 00 	movl   $0x0,0xf06bfa58
f0104758:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f010475b:	83 ec 0c             	sub    $0xc,%esp
f010475e:	6a 0a                	push   $0xa
f0104760:	e8 6d ff ff ff       	call   f01046d2 <sched_init_RR>
f0104765:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104768:	83 ec 0c             	sub    $0xc,%esp
f010476b:	68 78 1e 6c f0       	push   $0xf06c1e78
f0104770:	e8 01 fc ff ff       	call   f0104376 <init_queue>
f0104775:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104778:	83 ec 0c             	sub    $0xc,%esp
f010477b:	68 44 fa 6b f0       	push   $0xf06bfa44
f0104780:	e8 f1 fb ff ff       	call   f0104376 <init_queue>
f0104785:	83 c4 10             	add    $0x10,%esp
}
f0104788:	90                   	nop
f0104789:	c9                   	leave  
f010478a:	c3                   	ret    

f010478b <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010478b:	55                   	push   %ebp
f010478c:	89 e5                	mov    %esp,%ebp
f010478e:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f0104791:	83 ec 0c             	sub    $0xc,%esp
f0104794:	68 f0 9a 65 f0       	push   $0xf0659af0
f0104799:	e8 40 2e 00 00       	call   f01075de <kfree>
f010479e:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f01047a1:	83 ec 0c             	sub    $0xc,%esp
f01047a4:	68 68 1e 6c f0       	push   $0xf06c1e68
f01047a9:	e8 30 2e 00 00       	call   f01075de <kfree>
f01047ae:	83 c4 10             	add    $0x10,%esp
}
f01047b1:	90                   	nop
f01047b2:	c9                   	leave  
f01047b3:	c3                   	ret    

f01047b4 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f01047b4:	55                   	push   %ebp
f01047b5:	89 e5                	mov    %esp,%ebp
f01047b7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01047ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047be:	74 1d                	je     f01047dd <sched_insert_ready+0x29>
	{
		env->env_status = ENV_READY ;
f01047c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c3:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01047ca:	83 ec 08             	sub    $0x8,%esp
f01047cd:	ff 75 08             	pushl  0x8(%ebp)
f01047d0:	68 f0 9a 65 f0       	push   $0xf0659af0
f01047d5:	e8 dd fb ff ff       	call   f01043b7 <enqueue>
f01047da:	83 c4 10             	add    $0x10,%esp
	}
}
f01047dd:	90                   	nop
f01047de:	c9                   	leave  
f01047df:	c3                   	ret    

f01047e0 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01047e0:	55                   	push   %ebp
f01047e1:	89 e5                	mov    %esp,%ebp
f01047e3:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01047e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047ea:	0f 84 02 01 00 00    	je     f01048f2 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01047f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01047f7:	e9 e5 00 00 00       	jmp    f01048e1 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01047fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01047ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104802:	89 c2                	mov    %eax,%edx
f0104804:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104807:	c1 e0 04             	shl    $0x4,%eax
f010480a:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f010480f:	52                   	push   %edx
f0104810:	50                   	push   %eax
f0104811:	e8 5b fd ff ff       	call   f0104571 <find_env_in_queue>
f0104816:	83 c4 08             	add    $0x8,%esp
f0104819:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f010481c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104820:	0f 84 b8 00 00 00    	je     f01048de <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0104826:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010482a:	75 17                	jne    f0104843 <sched_remove_ready+0x63>
f010482c:	83 ec 04             	sub    $0x4,%esp
f010482f:	68 84 4f 13 f0       	push   $0xf0134f84
f0104834:	68 f5 00 00 00       	push   $0xf5
f0104839:	68 73 4f 13 f0       	push   $0xf0134f73
f010483e:	e8 63 b9 ff ff       	call   f01001a6 <_panic>
f0104843:	8b 45 08             	mov    0x8(%ebp),%eax
f0104846:	8b 40 44             	mov    0x44(%eax),%eax
f0104849:	85 c0                	test   %eax,%eax
f010484b:	74 11                	je     f010485e <sched_remove_ready+0x7e>
f010484d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104850:	8b 40 44             	mov    0x44(%eax),%eax
f0104853:	8b 55 08             	mov    0x8(%ebp),%edx
f0104856:	8b 52 48             	mov    0x48(%edx),%edx
f0104859:	89 50 48             	mov    %edx,0x48(%eax)
f010485c:	eb 14                	jmp    f0104872 <sched_remove_ready+0x92>
f010485e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104861:	8b 40 48             	mov    0x48(%eax),%eax
f0104864:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104867:	c1 e2 04             	shl    $0x4,%edx
f010486a:	81 c2 f4 9a 65 f0    	add    $0xf0659af4,%edx
f0104870:	89 02                	mov    %eax,(%edx)
f0104872:	8b 45 08             	mov    0x8(%ebp),%eax
f0104875:	8b 40 48             	mov    0x48(%eax),%eax
f0104878:	85 c0                	test   %eax,%eax
f010487a:	74 11                	je     f010488d <sched_remove_ready+0xad>
f010487c:	8b 45 08             	mov    0x8(%ebp),%eax
f010487f:	8b 40 48             	mov    0x48(%eax),%eax
f0104882:	8b 55 08             	mov    0x8(%ebp),%edx
f0104885:	8b 52 44             	mov    0x44(%edx),%edx
f0104888:	89 50 44             	mov    %edx,0x44(%eax)
f010488b:	eb 14                	jmp    f01048a1 <sched_remove_ready+0xc1>
f010488d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104890:	8b 40 44             	mov    0x44(%eax),%eax
f0104893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104896:	c1 e2 04             	shl    $0x4,%edx
f0104899:	81 c2 f0 9a 65 f0    	add    $0xf0659af0,%edx
f010489f:	89 02                	mov    %eax,(%edx)
f01048a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01048ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01048b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b8:	c1 e0 04             	shl    $0x4,%eax
f01048bb:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f01048c0:	8b 00                	mov    (%eax),%eax
f01048c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01048c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c8:	c1 e0 04             	shl    $0x4,%eax
f01048cb:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f01048d0:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01048d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048d5:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01048dc:	eb 14                	jmp    f01048f2 <sched_remove_ready+0x112>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048de:	ff 45 f4             	incl   -0xc(%ebp)
f01048e1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01048e6:	0f b6 c0             	movzbl %al,%eax
f01048e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01048ec:	0f 8f 0a ff ff ff    	jg     f01047fc <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01048f2:	c9                   	leave  
f01048f3:	c3                   	ret    

f01048f4 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01048f4:	55                   	push   %ebp
f01048f5:	89 e5                	mov    %esp,%ebp
f01048f7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01048fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048fe:	74 1d                	je     f010491d <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104900:	8b 45 08             	mov    0x8(%ebp),%eax
f0104903:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f010490a:	83 ec 08             	sub    $0x8,%esp
f010490d:	ff 75 08             	pushl  0x8(%ebp)
f0104910:	68 78 1e 6c f0       	push   $0xf06c1e78
f0104915:	e8 9d fa ff ff       	call   f01043b7 <enqueue>
f010491a:	83 c4 10             	add    $0x10,%esp
	}
}
f010491d:	90                   	nop
f010491e:	c9                   	leave  
f010491f:	c3                   	ret    

f0104920 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104920:	55                   	push   %ebp
f0104921:	89 e5                	mov    %esp,%ebp
f0104923:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104926:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010492a:	0f 84 92 00 00 00    	je     f01049c2 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104930:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104934:	75 17                	jne    f010494d <sched_remove_new+0x2d>
f0104936:	83 ec 04             	sub    $0x4,%esp
f0104939:	68 84 4f 13 f0       	push   $0xf0134f84
f010493e:	68 09 01 00 00       	push   $0x109
f0104943:	68 73 4f 13 f0       	push   $0xf0134f73
f0104948:	e8 59 b8 ff ff       	call   f01001a6 <_panic>
f010494d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104950:	8b 40 44             	mov    0x44(%eax),%eax
f0104953:	85 c0                	test   %eax,%eax
f0104955:	74 11                	je     f0104968 <sched_remove_new+0x48>
f0104957:	8b 45 08             	mov    0x8(%ebp),%eax
f010495a:	8b 40 44             	mov    0x44(%eax),%eax
f010495d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104960:	8b 52 48             	mov    0x48(%edx),%edx
f0104963:	89 50 48             	mov    %edx,0x48(%eax)
f0104966:	eb 0b                	jmp    f0104973 <sched_remove_new+0x53>
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	8b 40 48             	mov    0x48(%eax),%eax
f010496e:	a3 7c 1e 6c f0       	mov    %eax,0xf06c1e7c
f0104973:	8b 45 08             	mov    0x8(%ebp),%eax
f0104976:	8b 40 48             	mov    0x48(%eax),%eax
f0104979:	85 c0                	test   %eax,%eax
f010497b:	74 11                	je     f010498e <sched_remove_new+0x6e>
f010497d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104980:	8b 40 48             	mov    0x48(%eax),%eax
f0104983:	8b 55 08             	mov    0x8(%ebp),%edx
f0104986:	8b 52 44             	mov    0x44(%edx),%edx
f0104989:	89 50 44             	mov    %edx,0x44(%eax)
f010498c:	eb 0b                	jmp    f0104999 <sched_remove_new+0x79>
f010498e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104991:	8b 40 44             	mov    0x44(%eax),%eax
f0104994:	a3 78 1e 6c f0       	mov    %eax,0xf06c1e78
f0104999:	8b 45 08             	mov    0x8(%ebp),%eax
f010499c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01049a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01049ad:	a1 84 1e 6c f0       	mov    0xf06c1e84,%eax
f01049b2:	48                   	dec    %eax
f01049b3:	a3 84 1e 6c f0       	mov    %eax,0xf06c1e84
		env->env_status = ENV_UNKNOWN;
f01049b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bb:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01049c2:	90                   	nop
f01049c3:	c9                   	leave  
f01049c4:	c3                   	ret    

f01049c5 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f01049c5:	55                   	push   %ebp
f01049c6:	89 e5                	mov    %esp,%ebp
f01049c8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049cf:	74 34                	je     f0104a05 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01049d1:	e8 84 8d 00 00       	call   f010d75a <isBufferingEnabled>
f01049d6:	84 c0                	test   %al,%al
f01049d8:	74 0e                	je     f01049e8 <sched_insert_exit+0x23>
f01049da:	83 ec 0c             	sub    $0xc,%esp
f01049dd:	ff 75 08             	pushl  0x8(%ebp)
f01049e0:	e8 eb 5e 00 00       	call   f010a8d0 <cleanup_buffers>
f01049e5:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f01049f2:	83 ec 08             	sub    $0x8,%esp
f01049f5:	ff 75 08             	pushl  0x8(%ebp)
f01049f8:	68 44 fa 6b f0       	push   $0xf06bfa44
f01049fd:	e8 b5 f9 ff ff       	call   f01043b7 <enqueue>
f0104a02:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a05:	90                   	nop
f0104a06:	c9                   	leave  
f0104a07:	c3                   	ret    

f0104a08 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104a08:	55                   	push   %ebp
f0104a09:	89 e5                	mov    %esp,%ebp
f0104a0b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a12:	0f 84 92 00 00 00    	je     f0104aaa <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104a18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a1c:	75 17                	jne    f0104a35 <sched_remove_exit+0x2d>
f0104a1e:	83 ec 04             	sub    $0x4,%esp
f0104a21:	68 84 4f 13 f0       	push   $0xf0134f84
f0104a26:	68 1b 01 00 00       	push   $0x11b
f0104a2b:	68 73 4f 13 f0       	push   $0xf0134f73
f0104a30:	e8 71 b7 ff ff       	call   f01001a6 <_panic>
f0104a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a38:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3b:	85 c0                	test   %eax,%eax
f0104a3d:	74 11                	je     f0104a50 <sched_remove_exit+0x48>
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	8b 40 44             	mov    0x44(%eax),%eax
f0104a45:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a48:	8b 52 48             	mov    0x48(%edx),%edx
f0104a4b:	89 50 48             	mov    %edx,0x48(%eax)
f0104a4e:	eb 0b                	jmp    f0104a5b <sched_remove_exit+0x53>
f0104a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a53:	8b 40 48             	mov    0x48(%eax),%eax
f0104a56:	a3 48 fa 6b f0       	mov    %eax,0xf06bfa48
f0104a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a61:	85 c0                	test   %eax,%eax
f0104a63:	74 11                	je     f0104a76 <sched_remove_exit+0x6e>
f0104a65:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a68:	8b 40 48             	mov    0x48(%eax),%eax
f0104a6b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a6e:	8b 52 44             	mov    0x44(%edx),%edx
f0104a71:	89 50 44             	mov    %edx,0x44(%eax)
f0104a74:	eb 0b                	jmp    f0104a81 <sched_remove_exit+0x79>
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	8b 40 44             	mov    0x44(%eax),%eax
f0104a7c:	a3 44 fa 6b f0       	mov    %eax,0xf06bfa44
f0104a81:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a84:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a8e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a95:	a1 50 fa 6b f0       	mov    0xf06bfa50,%eax
f0104a9a:	48                   	dec    %eax
f0104a9b:	a3 50 fa 6b f0       	mov    %eax,0xf06bfa50
		env->env_status = ENV_UNKNOWN;
f0104aa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104aaa:	90                   	nop
f0104aab:	c9                   	leave  
f0104aac:	c3                   	ret    

f0104aad <sched_print_all>:

void sched_print_all()
{
f0104aad:	55                   	push   %ebp
f0104aae:	89 e5                	mov    %esp,%ebp
f0104ab0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ab3:	a1 78 1e 6c f0       	mov    0xf06c1e78,%eax
f0104ab8:	85 c0                	test   %eax,%eax
f0104aba:	74 6c                	je     f0104b28 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104abc:	83 ec 0c             	sub    $0xc,%esp
f0104abf:	68 04 50 13 f0       	push   $0xf0135004
f0104ac4:	e8 64 c1 ff ff       	call   f0100c2d <cprintf>
f0104ac9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104acc:	a1 78 1e 6c f0       	mov    0xf06c1e78,%eax
f0104ad1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ad4:	eb 29                	jmp    f0104aff <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ad9:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ae2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ae5:	83 ec 04             	sub    $0x4,%esp
f0104ae8:	52                   	push   %edx
f0104ae9:	50                   	push   %eax
f0104aea:	68 26 50 13 f0       	push   $0xf0135026
f0104aef:	e8 39 c1 ff ff       	call   f0100c2d <cprintf>
f0104af4:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104af7:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f0104afc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104aff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b03:	74 08                	je     f0104b0d <sched_print_all+0x60>
f0104b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b08:	8b 40 44             	mov    0x44(%eax),%eax
f0104b0b:	eb 05                	jmp    f0104b12 <sched_print_all+0x65>
f0104b0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104b12:	a3 80 1e 6c f0       	mov    %eax,0xf06c1e80
f0104b17:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f0104b1c:	85 c0                	test   %eax,%eax
f0104b1e:	75 b6                	jne    f0104ad6 <sched_print_all+0x29>
f0104b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b24:	75 b0                	jne    f0104ad6 <sched_print_all+0x29>
f0104b26:	eb 10                	jmp    f0104b38 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104b28:	83 ec 0c             	sub    $0xc,%esp
f0104b2b:	68 30 50 13 f0       	push   $0xf0135030
f0104b30:	e8 f8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b35:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104b38:	83 ec 0c             	sub    $0xc,%esp
f0104b3b:	68 4c 50 13 f0       	push   $0xf013504c
f0104b40:	e8 e8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104b48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104b4f:	e9 cb 00 00 00       	jmp    f0104c1f <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104b54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b57:	c1 e0 04             	shl    $0x4,%eax
f0104b5a:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f0104b5f:	8b 00                	mov    (%eax),%eax
f0104b61:	85 c0                	test   %eax,%eax
f0104b63:	0f 84 90 00 00 00    	je     f0104bf9 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104b69:	83 ec 08             	sub    $0x8,%esp
f0104b6c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104b6f:	68 80 50 13 f0       	push   $0xf0135080
f0104b74:	e8 b4 c0 ff ff       	call   f0100c2d <cprintf>
f0104b79:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b7f:	c1 e0 04             	shl    $0x4,%eax
f0104b82:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f0104b87:	8b 00                	mov    (%eax),%eax
f0104b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b8c:	eb 31                	jmp    f0104bbf <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b91:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b9a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104b9d:	83 ec 04             	sub    $0x4,%esp
f0104ba0:	52                   	push   %edx
f0104ba1:	50                   	push   %eax
f0104ba2:	68 26 50 13 f0       	push   $0xf0135026
f0104ba7:	e8 81 c0 ff ff       	call   f0100c2d <cprintf>
f0104bac:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104baf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104bb2:	c1 e0 04             	shl    $0x4,%eax
f0104bb5:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f0104bba:	8b 00                	mov    (%eax),%eax
f0104bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc3:	74 08                	je     f0104bcd <sched_print_all+0x120>
f0104bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc8:	8b 40 44             	mov    0x44(%eax),%eax
f0104bcb:	eb 05                	jmp    f0104bd2 <sched_print_all+0x125>
f0104bcd:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104bd5:	c1 e2 04             	shl    $0x4,%edx
f0104bd8:	81 c2 f8 9a 65 f0    	add    $0xf0659af8,%edx
f0104bde:	89 02                	mov    %eax,(%edx)
f0104be0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104be3:	c1 e0 04             	shl    $0x4,%eax
f0104be6:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f0104beb:	8b 00                	mov    (%eax),%eax
f0104bed:	85 c0                	test   %eax,%eax
f0104bef:	75 9d                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bf5:	75 97                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf7:	eb 13                	jmp    f0104c0c <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104bf9:	83 ec 08             	sub    $0x8,%esp
f0104bfc:	ff 75 f0             	pushl  -0x10(%ebp)
f0104bff:	68 a8 50 13 f0       	push   $0xf01350a8
f0104c04:	e8 24 c0 ff ff       	call   f0100c2d <cprintf>
f0104c09:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104c0c:	83 ec 0c             	sub    $0xc,%esp
f0104c0f:	68 4c 50 13 f0       	push   $0xf013504c
f0104c14:	e8 14 c0 ff ff       	call   f0100c2d <cprintf>
f0104c19:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c1c:	ff 45 f0             	incl   -0x10(%ebp)
f0104c1f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0104c24:	0f b6 c0             	movzbl %al,%eax
f0104c27:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104c2a:	0f 8f 24 ff ff ff    	jg     f0104b54 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104c30:	a1 44 fa 6b f0       	mov    0xf06bfa44,%eax
f0104c35:	85 c0                	test   %eax,%eax
f0104c37:	74 6c                	je     f0104ca5 <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104c39:	83 ec 0c             	sub    $0xc,%esp
f0104c3c:	68 cc 50 13 f0       	push   $0xf01350cc
f0104c41:	e8 e7 bf ff ff       	call   f0100c2d <cprintf>
f0104c46:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c49:	a1 44 fa 6b f0       	mov    0xf06bfa44,%eax
f0104c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c51:	eb 29                	jmp    f0104c7c <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c56:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c62:	83 ec 04             	sub    $0x4,%esp
f0104c65:	52                   	push   %edx
f0104c66:	50                   	push   %eax
f0104c67:	68 26 50 13 f0       	push   $0xf0135026
f0104c6c:	e8 bc bf ff ff       	call   f0100c2d <cprintf>
f0104c71:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c74:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f0104c79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c80:	74 08                	je     f0104c8a <sched_print_all+0x1dd>
f0104c82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c85:	8b 40 44             	mov    0x44(%eax),%eax
f0104c88:	eb 05                	jmp    f0104c8f <sched_print_all+0x1e2>
f0104c8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c8f:	a3 4c fa 6b f0       	mov    %eax,0xf06bfa4c
f0104c94:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f0104c99:	85 c0                	test   %eax,%eax
f0104c9b:	75 b6                	jne    f0104c53 <sched_print_all+0x1a6>
f0104c9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ca1:	75 b0                	jne    f0104c53 <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104ca3:	eb 10                	jmp    f0104cb5 <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104ca5:	83 ec 0c             	sub    $0xc,%esp
f0104ca8:	68 ee 50 13 f0       	push   $0xf01350ee
f0104cad:	e8 7b bf ff ff       	call   f0100c2d <cprintf>
f0104cb2:	83 c4 10             	add    $0x10,%esp
	}
}
f0104cb5:	90                   	nop
f0104cb6:	c9                   	leave  
f0104cb7:	c3                   	ret    

f0104cb8 <sched_run_all>:

void sched_run_all()
{
f0104cb8:	55                   	push   %ebp
f0104cb9:	89 e5                	mov    %esp,%ebp
f0104cbb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104cbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104cc5:	a1 78 1e 6c f0       	mov    0xf06c1e78,%eax
f0104cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ccd:	eb 24                	jmp    f0104cf3 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104ccf:	83 ec 0c             	sub    $0xc,%esp
f0104cd2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104cd5:	e8 46 fc ff ff       	call   f0104920 <sched_remove_new>
f0104cda:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104cdd:	83 ec 0c             	sub    $0xc,%esp
f0104ce0:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ce3:	e8 cc fa ff ff       	call   f01047b4 <sched_insert_ready>
f0104ce8:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104ceb:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f0104cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cf7:	74 08                	je     f0104d01 <sched_run_all+0x49>
f0104cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cfc:	8b 40 44             	mov    0x44(%eax),%eax
f0104cff:	eb 05                	jmp    f0104d06 <sched_run_all+0x4e>
f0104d01:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d06:	a3 80 1e 6c f0       	mov    %eax,0xf06c1e80
f0104d0b:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f0104d10:	85 c0                	test   %eax,%eax
f0104d12:	75 bb                	jne    f0104ccf <sched_run_all+0x17>
f0104d14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d18:	75 b5                	jne    f0104ccf <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104d1a:	a1 94 1e 6c f0       	mov    0xf06c1e94,%eax
f0104d1f:	85 c0                	test   %eax,%eax
f0104d21:	75 05                	jne    f0104d28 <sched_run_all+0x70>
		fos_scheduler();
f0104d23:	e8 c3 f8 ff ff       	call   f01045eb <fos_scheduler>
}
f0104d28:	90                   	nop
f0104d29:	c9                   	leave  
f0104d2a:	c3                   	ret    

f0104d2b <sched_kill_all>:

void sched_kill_all()
{
f0104d2b:	55                   	push   %ebp
f0104d2c:	89 e5                	mov    %esp,%ebp
f0104d2e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104d31:	a1 78 1e 6c f0       	mov    0xf06c1e78,%eax
f0104d36:	85 c0                	test   %eax,%eax
f0104d38:	0f 84 98 00 00 00    	je     f0104dd6 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104d3e:	83 ec 0c             	sub    $0xc,%esp
f0104d41:	68 0c 51 13 f0       	push   $0xf013510c
f0104d46:	e8 e2 be ff ff       	call   f0100c2d <cprintf>
f0104d4b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104d4e:	a1 78 1e 6c f0       	mov    0xf06c1e78,%eax
f0104d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d56:	eb 55                	jmp    f0104dad <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d5b:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d64:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d67:	83 ec 04             	sub    $0x4,%esp
f0104d6a:	52                   	push   %edx
f0104d6b:	50                   	push   %eax
f0104d6c:	68 38 51 13 f0       	push   $0xf0135138
f0104d71:	e8 b7 be ff ff       	call   f0100c2d <cprintf>
f0104d76:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104d79:	83 ec 0c             	sub    $0xc,%esp
f0104d7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d7f:	e8 9c fb ff ff       	call   f0104920 <sched_remove_new>
f0104d84:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104d87:	83 ec 0c             	sub    $0xc,%esp
f0104d8a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d8d:	e8 29 47 00 00       	call   f01094bb <env_free>
f0104d92:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104d95:	83 ec 0c             	sub    $0xc,%esp
f0104d98:	68 4b 51 13 f0       	push   $0xf013514b
f0104d9d:	e8 8b be ff ff       	call   f0100c2d <cprintf>
f0104da2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104da5:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f0104daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db1:	74 08                	je     f0104dbb <sched_kill_all+0x90>
f0104db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db6:	8b 40 44             	mov    0x44(%eax),%eax
f0104db9:	eb 05                	jmp    f0104dc0 <sched_kill_all+0x95>
f0104dbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc0:	a3 80 1e 6c f0       	mov    %eax,0xf06c1e80
f0104dc5:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f0104dca:	85 c0                	test   %eax,%eax
f0104dcc:	75 8a                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd2:	75 84                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dd4:	eb 10                	jmp    f0104de6 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104dd6:	83 ec 0c             	sub    $0xc,%esp
f0104dd9:	68 51 51 13 f0       	push   $0xf0135151
f0104dde:	e8 4a be ff ff       	call   f0100c2d <cprintf>
f0104de3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104de6:	83 ec 0c             	sub    $0xc,%esp
f0104de9:	68 4c 50 13 f0       	push   $0xf013504c
f0104dee:	e8 3a be ff ff       	call   f0100c2d <cprintf>
f0104df3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104df6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104dfd:	e9 a0 01 00 00       	jmp    f0104fa2 <sched_kill_all+0x277>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e05:	c1 e0 04             	shl    $0x4,%eax
f0104e08:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f0104e0d:	8b 00                	mov    (%eax),%eax
f0104e0f:	85 c0                	test   %eax,%eax
f0104e11:	0f 84 65 01 00 00    	je     f0104f7c <sched_kill_all+0x251>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104e17:	83 ec 08             	sub    $0x8,%esp
f0104e1a:	ff 75 f0             	pushl  -0x10(%ebp)
f0104e1d:	68 6c 51 13 f0       	push   $0xf013516c
f0104e22:	e8 06 be ff ff       	call   f0100c2d <cprintf>
f0104e27:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e2d:	c1 e0 04             	shl    $0x4,%eax
f0104e30:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f0104e35:	8b 00                	mov    (%eax),%eax
f0104e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e3a:	e9 fb 00 00 00       	jmp    f0104f3a <sched_kill_all+0x20f>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e42:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e4b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e4e:	83 ec 04             	sub    $0x4,%esp
f0104e51:	52                   	push   %edx
f0104e52:	50                   	push   %eax
f0104e53:	68 38 51 13 f0       	push   $0xf0135138
f0104e58:	e8 d0 bd ff ff       	call   f0100c2d <cprintf>
f0104e5d:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104e60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e64:	75 17                	jne    f0104e7d <sched_kill_all+0x152>
f0104e66:	83 ec 04             	sub    $0x4,%esp
f0104e69:	68 84 4f 13 f0       	push   $0xf0134f84
f0104e6e:	68 76 01 00 00       	push   $0x176
f0104e73:	68 73 4f 13 f0       	push   $0xf0134f73
f0104e78:	e8 29 b3 ff ff       	call   f01001a6 <_panic>
f0104e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e80:	8b 40 44             	mov    0x44(%eax),%eax
f0104e83:	85 c0                	test   %eax,%eax
f0104e85:	74 11                	je     f0104e98 <sched_kill_all+0x16d>
f0104e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e8a:	8b 40 44             	mov    0x44(%eax),%eax
f0104e8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e90:	8b 52 48             	mov    0x48(%edx),%edx
f0104e93:	89 50 48             	mov    %edx,0x48(%eax)
f0104e96:	eb 14                	jmp    f0104eac <sched_kill_all+0x181>
f0104e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9b:	8b 40 48             	mov    0x48(%eax),%eax
f0104e9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ea1:	c1 e2 04             	shl    $0x4,%edx
f0104ea4:	81 c2 f4 9a 65 f0    	add    $0xf0659af4,%edx
f0104eaa:	89 02                	mov    %eax,(%edx)
f0104eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eaf:	8b 40 48             	mov    0x48(%eax),%eax
f0104eb2:	85 c0                	test   %eax,%eax
f0104eb4:	74 11                	je     f0104ec7 <sched_kill_all+0x19c>
f0104eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb9:	8b 40 48             	mov    0x48(%eax),%eax
f0104ebc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ebf:	8b 52 44             	mov    0x44(%edx),%edx
f0104ec2:	89 50 44             	mov    %edx,0x44(%eax)
f0104ec5:	eb 14                	jmp    f0104edb <sched_kill_all+0x1b0>
f0104ec7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eca:	8b 40 44             	mov    0x44(%eax),%eax
f0104ecd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ed0:	c1 e2 04             	shl    $0x4,%edx
f0104ed3:	81 c2 f0 9a 65 f0    	add    $0xf0659af0,%edx
f0104ed9:	89 02                	mov    %eax,(%edx)
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ef2:	c1 e0 04             	shl    $0x4,%eax
f0104ef5:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f0104efa:	8b 00                	mov    (%eax),%eax
f0104efc:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104eff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f02:	c1 e0 04             	shl    $0x4,%eax
f0104f05:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f0104f0a:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0104f0c:	83 ec 0c             	sub    $0xc,%esp
f0104f0f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f12:	e8 a4 45 00 00       	call   f01094bb <env_free>
f0104f17:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104f1a:	83 ec 0c             	sub    $0xc,%esp
f0104f1d:	68 4b 51 13 f0       	push   $0xf013514b
f0104f22:	e8 06 bd ff ff       	call   f0100c2d <cprintf>
f0104f27:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f2d:	c1 e0 04             	shl    $0x4,%eax
f0104f30:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f0104f35:	8b 00                	mov    (%eax),%eax
f0104f37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f3e:	74 08                	je     f0104f48 <sched_kill_all+0x21d>
f0104f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f43:	8b 40 44             	mov    0x44(%eax),%eax
f0104f46:	eb 05                	jmp    f0104f4d <sched_kill_all+0x222>
f0104f48:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f50:	c1 e2 04             	shl    $0x4,%edx
f0104f53:	81 c2 f8 9a 65 f0    	add    $0xf0659af8,%edx
f0104f59:	89 02                	mov    %eax,(%edx)
f0104f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f5e:	c1 e0 04             	shl    $0x4,%eax
f0104f61:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f0104f66:	8b 00                	mov    (%eax),%eax
f0104f68:	85 c0                	test   %eax,%eax
f0104f6a:	0f 85 cf fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f74:	0f 85 c5 fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f7a:	eb 13                	jmp    f0104f8f <sched_kill_all+0x264>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0104f7c:	83 ec 08             	sub    $0x8,%esp
f0104f7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f82:	68 a8 50 13 f0       	push   $0xf01350a8
f0104f87:	e8 a1 bc ff ff       	call   f0100c2d <cprintf>
f0104f8c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104f8f:	83 ec 0c             	sub    $0xc,%esp
f0104f92:	68 4c 50 13 f0       	push   $0xf013504c
f0104f97:	e8 91 bc ff ff       	call   f0100c2d <cprintf>
f0104f9c:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f9f:	ff 45 f0             	incl   -0x10(%ebp)
f0104fa2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0104fa7:	0f b6 c0             	movzbl %al,%eax
f0104faa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104fad:	0f 8f 4f fe ff ff    	jg     f0104e02 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0104fb3:	a1 44 fa 6b f0       	mov    0xf06bfa44,%eax
f0104fb8:	85 c0                	test   %eax,%eax
f0104fba:	0f 84 98 00 00 00    	je     f0105058 <sched_kill_all+0x32d>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0104fc0:	83 ec 0c             	sub    $0xc,%esp
f0104fc3:	68 a0 51 13 f0       	push   $0xf01351a0
f0104fc8:	e8 60 bc ff ff       	call   f0100c2d <cprintf>
f0104fcd:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104fd0:	a1 44 fa 6b f0       	mov    0xf06bfa44,%eax
f0104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd8:	eb 55                	jmp    f010502f <sched_kill_all+0x304>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fdd:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe9:	83 ec 04             	sub    $0x4,%esp
f0104fec:	52                   	push   %edx
f0104fed:	50                   	push   %eax
f0104fee:	68 38 51 13 f0       	push   $0xf0135138
f0104ff3:	e8 35 bc ff ff       	call   f0100c2d <cprintf>
f0104ff8:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0104ffb:	83 ec 0c             	sub    $0xc,%esp
f0104ffe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105001:	e8 02 fa ff ff       	call   f0104a08 <sched_remove_exit>
f0105006:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105009:	83 ec 0c             	sub    $0xc,%esp
f010500c:	ff 75 f4             	pushl  -0xc(%ebp)
f010500f:	e8 a7 44 00 00       	call   f01094bb <env_free>
f0105014:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105017:	83 ec 0c             	sub    $0xc,%esp
f010501a:	68 4b 51 13 f0       	push   $0xf013514b
f010501f:	e8 09 bc ff ff       	call   f0100c2d <cprintf>
f0105024:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105027:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f010502c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010502f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105033:	74 08                	je     f010503d <sched_kill_all+0x312>
f0105035:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105038:	8b 40 44             	mov    0x44(%eax),%eax
f010503b:	eb 05                	jmp    f0105042 <sched_kill_all+0x317>
f010503d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105042:	a3 4c fa 6b f0       	mov    %eax,0xf06bfa4c
f0105047:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	75 8a                	jne    f0104fda <sched_kill_all+0x2af>
f0105050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105054:	75 84                	jne    f0104fda <sched_kill_all+0x2af>
f0105056:	eb 10                	jmp    f0105068 <sched_kill_all+0x33d>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105058:	83 ec 0c             	sub    $0xc,%esp
f010505b:	68 ee 50 13 f0       	push   $0xf01350ee
f0105060:	e8 c8 bb ff ff       	call   f0100c2d <cprintf>
f0105065:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105068:	c7 05 14 92 65 f0 00 	movl   $0x0,0xf0659214
f010506f:	00 00 00 
	fos_scheduler();
f0105072:	e8 74 f5 ff ff       	call   f01045eb <fos_scheduler>

f0105077 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105077:	55                   	push   %ebp
f0105078:	89 e5                	mov    %esp,%ebp
f010507a:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010507d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105081:	74 0e                	je     f0105091 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105083:	83 ec 0c             	sub    $0xc,%esp
f0105086:	ff 75 08             	pushl  0x8(%ebp)
f0105089:	e8 66 f8 ff ff       	call   f01048f4 <sched_insert_new>
f010508e:	83 c4 10             	add    $0x10,%esp
	}
}
f0105091:	90                   	nop
f0105092:	c9                   	leave  
f0105093:	c3                   	ret    

f0105094 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105094:	55                   	push   %ebp
f0105095:	89 e5                	mov    %esp,%ebp
f0105097:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010509a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050a1:	a1 78 1e 6c f0       	mov    0xf06c1e78,%eax
f01050a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050a9:	eb 3d                	jmp    f01050e8 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f01050ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ae:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050b1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01050b4:	75 2a                	jne    f01050e0 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f01050b6:	83 ec 0c             	sub    $0xc,%esp
f01050b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01050bc:	e8 5f f8 ff ff       	call   f0104920 <sched_remove_new>
f01050c1:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f01050c4:	83 ec 0c             	sub    $0xc,%esp
f01050c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01050ca:	e8 e5 f6 ff ff       	call   f01047b4 <sched_insert_ready>
f01050cf:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f01050d2:	a1 94 1e 6c f0       	mov    0xf06c1e94,%eax
f01050d7:	85 c0                	test   %eax,%eax
f01050d9:	75 36                	jne    f0105111 <sched_run_env+0x7d>
			{
				fos_scheduler();
f01050db:	e8 0b f5 ff ff       	call   f01045eb <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050e0:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f01050e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050ec:	74 08                	je     f01050f6 <sched_run_env+0x62>
f01050ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f1:	8b 40 44             	mov    0x44(%eax),%eax
f01050f4:	eb 05                	jmp    f01050fb <sched_run_env+0x67>
f01050f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01050fb:	a3 80 1e 6c f0       	mov    %eax,0xf06c1e80
f0105100:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f0105105:	85 c0                	test   %eax,%eax
f0105107:	75 a2                	jne    f01050ab <sched_run_env+0x17>
f0105109:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510d:	75 9c                	jne    f01050ab <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010510f:	eb 01                	jmp    f0105112 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105111:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105112:	90                   	nop
f0105113:	c9                   	leave  
f0105114:	c3                   	ret    

f0105115 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0105115:	55                   	push   %ebp
f0105116:	89 e5                	mov    %esp,%ebp
f0105118:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010511b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105122:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105129:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010512d:	75 59                	jne    f0105188 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010512f:	a1 78 1e 6c f0       	mov    0xf06c1e78,%eax
f0105134:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105137:	eb 28                	jmp    f0105161 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f0105139:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010513f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105142:	75 15                	jne    f0105159 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105144:	83 ec 0c             	sub    $0xc,%esp
f0105147:	ff 75 f4             	pushl  -0xc(%ebp)
f010514a:	e8 d1 f7 ff ff       	call   f0104920 <sched_remove_new>
f010514f:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105152:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105159:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f010515e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105161:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105165:	74 08                	je     f010516f <sched_exit_env+0x5a>
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8b 40 44             	mov    0x44(%eax),%eax
f010516d:	eb 05                	jmp    f0105174 <sched_exit_env+0x5f>
f010516f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105174:	a3 80 1e 6c f0       	mov    %eax,0xf06c1e80
f0105179:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f010517e:	85 c0                	test   %eax,%eax
f0105180:	75 b7                	jne    f0105139 <sched_exit_env+0x24>
f0105182:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105186:	75 b1                	jne    f0105139 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105188:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010518c:	0f 85 6e 01 00 00    	jne    f0105300 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105192:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105199:	e9 4e 01 00 00       	jmp    f01052ec <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010519e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051a1:	c1 e0 04             	shl    $0x4,%eax
f01051a4:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f01051a9:	8b 00                	mov    (%eax),%eax
f01051ab:	85 c0                	test   %eax,%eax
f01051ad:	0f 84 30 01 00 00    	je     f01052e3 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01051b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01051ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051bd:	c1 e0 04             	shl    $0x4,%eax
f01051c0:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f01051c5:	8b 00                	mov    (%eax),%eax
f01051c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ca:	e9 d4 00 00 00       	jmp    f01052a3 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01051cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051d8:	0f 85 b5 00 00 00    	jne    f0105293 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01051de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e2:	75 17                	jne    f01051fb <sched_exit_env+0xe6>
f01051e4:	83 ec 04             	sub    $0x4,%esp
f01051e7:	68 84 4f 13 f0       	push   $0xf0134f84
f01051ec:	68 e1 01 00 00       	push   $0x1e1
f01051f1:	68 73 4f 13 f0       	push   $0xf0134f73
f01051f6:	e8 ab af ff ff       	call   f01001a6 <_panic>
f01051fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051fe:	8b 40 44             	mov    0x44(%eax),%eax
f0105201:	85 c0                	test   %eax,%eax
f0105203:	74 11                	je     f0105216 <sched_exit_env+0x101>
f0105205:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105208:	8b 40 44             	mov    0x44(%eax),%eax
f010520b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010520e:	8b 52 48             	mov    0x48(%edx),%edx
f0105211:	89 50 48             	mov    %edx,0x48(%eax)
f0105214:	eb 14                	jmp    f010522a <sched_exit_env+0x115>
f0105216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105219:	8b 40 48             	mov    0x48(%eax),%eax
f010521c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010521f:	c1 e2 04             	shl    $0x4,%edx
f0105222:	81 c2 f4 9a 65 f0    	add    $0xf0659af4,%edx
f0105228:	89 02                	mov    %eax,(%edx)
f010522a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010522d:	8b 40 48             	mov    0x48(%eax),%eax
f0105230:	85 c0                	test   %eax,%eax
f0105232:	74 11                	je     f0105245 <sched_exit_env+0x130>
f0105234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105237:	8b 40 48             	mov    0x48(%eax),%eax
f010523a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010523d:	8b 52 44             	mov    0x44(%edx),%edx
f0105240:	89 50 44             	mov    %edx,0x44(%eax)
f0105243:	eb 14                	jmp    f0105259 <sched_exit_env+0x144>
f0105245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105248:	8b 40 44             	mov    0x44(%eax),%eax
f010524b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010524e:	c1 e2 04             	shl    $0x4,%edx
f0105251:	81 c2 f0 9a 65 f0    	add    $0xf0659af0,%edx
f0105257:	89 02                	mov    %eax,(%edx)
f0105259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010525c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105266:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010526d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105270:	c1 e0 04             	shl    $0x4,%eax
f0105273:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f0105278:	8b 00                	mov    (%eax),%eax
f010527a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010527d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105280:	c1 e0 04             	shl    $0x4,%eax
f0105283:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f0105288:	89 10                	mov    %edx,(%eax)
						found = 1;
f010528a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105291:	eb 50                	jmp    f01052e3 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105293:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105296:	c1 e0 04             	shl    $0x4,%eax
f0105299:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f010529e:	8b 00                	mov    (%eax),%eax
f01052a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052a7:	74 08                	je     f01052b1 <sched_exit_env+0x19c>
f01052a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052ac:	8b 40 44             	mov    0x44(%eax),%eax
f01052af:	eb 05                	jmp    f01052b6 <sched_exit_env+0x1a1>
f01052b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01052b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052b9:	c1 e2 04             	shl    $0x4,%edx
f01052bc:	81 c2 f8 9a 65 f0    	add    $0xf0659af8,%edx
f01052c2:	89 02                	mov    %eax,(%edx)
f01052c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01052c7:	c1 e0 04             	shl    $0x4,%eax
f01052ca:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f01052cf:	8b 00                	mov    (%eax),%eax
f01052d1:	85 c0                	test   %eax,%eax
f01052d3:	0f 85 f6 fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
f01052d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052dd:	0f 85 ec fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01052e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052e7:	75 16                	jne    f01052ff <sched_exit_env+0x1ea>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052e9:	ff 45 ec             	incl   -0x14(%ebp)
f01052ec:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01052f1:	0f b6 c0             	movzbl %al,%eax
f01052f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01052f7:	0f 8f a1 fe ff ff    	jg     f010519e <sched_exit_env+0x89>
f01052fd:	eb 01                	jmp    f0105300 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01052ff:	90                   	nop
		}
	}
	if (!found)
f0105300:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105304:	75 1c                	jne    f0105322 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f0105306:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010530b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010530e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105311:	75 0f                	jne    f0105322 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0105313:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0105318:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010531b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105322:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105326:	74 2a                	je     f0105352 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105328:	83 ec 0c             	sub    $0xc,%esp
f010532b:	ff 75 f4             	pushl  -0xc(%ebp)
f010532e:	e8 92 f6 ff ff       	call   f01049c5 <sched_insert_exit>
f0105333:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0105336:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010533b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010533e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105341:	75 0f                	jne    f0105352 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f0105343:	c7 05 14 92 65 f0 00 	movl   $0x0,0xf0659214
f010534a:	00 00 00 
			fos_scheduler();
f010534d:	e8 99 f2 ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105352:	90                   	nop
f0105353:	c9                   	leave  
f0105354:	c3                   	ret    

f0105355 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105355:	55                   	push   %ebp
f0105356:	89 e5                	mov    %esp,%ebp
f0105358:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010535b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105362:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105369:	e9 3e 01 00 00       	jmp    f01054ac <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010536e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105371:	c1 e0 04             	shl    $0x4,%eax
f0105374:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f0105379:	8b 00                	mov    (%eax),%eax
f010537b:	85 c0                	test   %eax,%eax
f010537d:	0f 84 26 01 00 00    	je     f01054a9 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105383:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010538a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010538d:	c1 e0 04             	shl    $0x4,%eax
f0105390:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f0105395:	8b 00                	mov    (%eax),%eax
f0105397:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010539a:	e9 ca 00 00 00       	jmp    f0105469 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010539f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a3:	75 17                	jne    f01053bc <sched_exit_all_ready_envs+0x67>
f01053a5:	83 ec 04             	sub    $0x4,%esp
f01053a8:	68 84 4f 13 f0       	push   $0xf0134f84
f01053ad:	68 0c 02 00 00       	push   $0x20c
f01053b2:	68 73 4f 13 f0       	push   $0xf0134f73
f01053b7:	e8 ea ad ff ff       	call   f01001a6 <_panic>
f01053bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053bf:	8b 40 44             	mov    0x44(%eax),%eax
f01053c2:	85 c0                	test   %eax,%eax
f01053c4:	74 11                	je     f01053d7 <sched_exit_all_ready_envs+0x82>
f01053c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c9:	8b 40 44             	mov    0x44(%eax),%eax
f01053cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053cf:	8b 52 48             	mov    0x48(%edx),%edx
f01053d2:	89 50 48             	mov    %edx,0x48(%eax)
f01053d5:	eb 14                	jmp    f01053eb <sched_exit_all_ready_envs+0x96>
f01053d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053da:	8b 40 48             	mov    0x48(%eax),%eax
f01053dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	81 c2 f4 9a 65 f0    	add    $0xf0659af4,%edx
f01053e9:	89 02                	mov    %eax,(%edx)
f01053eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ee:	8b 40 48             	mov    0x48(%eax),%eax
f01053f1:	85 c0                	test   %eax,%eax
f01053f3:	74 11                	je     f0105406 <sched_exit_all_ready_envs+0xb1>
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 48             	mov    0x48(%eax),%eax
f01053fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053fe:	8b 52 44             	mov    0x44(%edx),%edx
f0105401:	89 50 44             	mov    %edx,0x44(%eax)
f0105404:	eb 14                	jmp    f010541a <sched_exit_all_ready_envs+0xc5>
f0105406:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105409:	8b 40 44             	mov    0x44(%eax),%eax
f010540c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010540f:	c1 e2 04             	shl    $0x4,%edx
f0105412:	81 c2 f0 9a 65 f0    	add    $0xf0659af0,%edx
f0105418:	89 02                	mov    %eax,(%edx)
f010541a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010541d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105424:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105427:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010542e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105431:	c1 e0 04             	shl    $0x4,%eax
f0105434:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f0105439:	8b 00                	mov    (%eax),%eax
f010543b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010543e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105441:	c1 e0 04             	shl    $0x4,%eax
f0105444:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f0105449:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f010544b:	83 ec 0c             	sub    $0xc,%esp
f010544e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105451:	e8 6f f5 ff ff       	call   f01049c5 <sched_insert_exit>
f0105456:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105459:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010545c:	c1 e0 04             	shl    $0x4,%eax
f010545f:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f0105464:	8b 00                	mov    (%eax),%eax
f0105466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105469:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010546d:	74 08                	je     f0105477 <sched_exit_all_ready_envs+0x122>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	eb 05                	jmp    f010547c <sched_exit_all_ready_envs+0x127>
f0105477:	b8 00 00 00 00       	mov    $0x0,%eax
f010547c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010547f:	c1 e2 04             	shl    $0x4,%edx
f0105482:	81 c2 f8 9a 65 f0    	add    $0xf0659af8,%edx
f0105488:	89 02                	mov    %eax,(%edx)
f010548a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010548d:	c1 e0 04             	shl    $0x4,%eax
f0105490:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f0105495:	8b 00                	mov    (%eax),%eax
f0105497:	85 c0                	test   %eax,%eax
f0105499:	0f 85 00 ff ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>
f010549f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054a3:	0f 85 f6 fe ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054a9:	ff 45 f0             	incl   -0x10(%ebp)
f01054ac:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01054b1:	0f b6 c0             	movzbl %al,%eax
f01054b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01054b7:	0f 8f b1 fe ff ff    	jg     f010536e <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01054bd:	90                   	nop
f01054be:	c9                   	leave  
f01054bf:	c3                   	ret    

f01054c0 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f01054c0:	55                   	push   %ebp
f01054c1:	89 e5                	mov    %esp,%ebp
f01054c3:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01054cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01054d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054d8:	0f 85 a0 00 00 00    	jne    f010557e <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01054de:	a1 78 1e 6c f0       	mov    0xf06c1e78,%eax
f01054e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054e6:	eb 67                	jmp    f010554f <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f01054e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054eb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054ee:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054f1:	75 54                	jne    f0105547 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01054f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f6:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01054fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105502:	83 ec 04             	sub    $0x4,%esp
f0105505:	52                   	push   %edx
f0105506:	50                   	push   %eax
f0105507:	68 cc 51 13 f0       	push   $0xf01351cc
f010550c:	e8 1c b7 ff ff       	call   f0100c2d <cprintf>
f0105511:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105514:	83 ec 0c             	sub    $0xc,%esp
f0105517:	ff 75 f4             	pushl  -0xc(%ebp)
f010551a:	e8 01 f4 ff ff       	call   f0104920 <sched_remove_new>
f010551f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105522:	83 ec 0c             	sub    $0xc,%esp
f0105525:	ff 75 f4             	pushl  -0xc(%ebp)
f0105528:	e8 8e 3f 00 00       	call   f01094bb <env_free>
f010552d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105530:	83 ec 0c             	sub    $0xc,%esp
f0105533:	68 4b 51 13 f0       	push   $0xf013514b
f0105538:	e8 f0 b6 ff ff       	call   f0100c2d <cprintf>
f010553d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105540:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105547:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f010554c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010554f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105553:	74 08                	je     f010555d <sched_kill_env+0x9d>
f0105555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105558:	8b 40 44             	mov    0x44(%eax),%eax
f010555b:	eb 05                	jmp    f0105562 <sched_kill_env+0xa2>
f010555d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105562:	a3 80 1e 6c f0       	mov    %eax,0xf06c1e80
f0105567:	a1 80 1e 6c f0       	mov    0xf06c1e80,%eax
f010556c:	85 c0                	test   %eax,%eax
f010556e:	0f 85 74 ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
f0105574:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105578:	0f 85 6a ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010557e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105582:	0f 85 ad 01 00 00    	jne    f0105735 <sched_kill_env+0x275>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105588:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010558f:	e9 8d 01 00 00       	jmp    f0105721 <sched_kill_env+0x261>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105594:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105597:	c1 e0 04             	shl    $0x4,%eax
f010559a:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f010559f:	8b 00                	mov    (%eax),%eax
f01055a1:	85 c0                	test   %eax,%eax
f01055a3:	0f 84 6f 01 00 00    	je     f0105718 <sched_kill_env+0x258>
			{
				ptr_env=NULL;
f01055a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055b3:	c1 e0 04             	shl    $0x4,%eax
f01055b6:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f01055bb:	8b 00                	mov    (%eax),%eax
f01055bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055c0:	e9 13 01 00 00       	jmp    f01056d8 <sched_kill_env+0x218>
				{
					if(ptr_env->env_id == envId)
f01055c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055c8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055ce:	0f 85 f4 00 00 00    	jne    f01056c8 <sched_kill_env+0x208>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01055d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055d7:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01055dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055e0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01055e6:	52                   	push   %edx
f01055e7:	50                   	push   %eax
f01055e8:	68 f4 51 13 f0       	push   $0xf01351f4
f01055ed:	e8 3b b6 ff ff       	call   f0100c2d <cprintf>
f01055f2:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01055f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055f9:	75 17                	jne    f0105612 <sched_kill_env+0x152>
f01055fb:	83 ec 04             	sub    $0x4,%esp
f01055fe:	68 84 4f 13 f0       	push   $0xf0134f84
f0105603:	68 33 02 00 00       	push   $0x233
f0105608:	68 73 4f 13 f0       	push   $0xf0134f73
f010560d:	e8 94 ab ff ff       	call   f01001a6 <_panic>
f0105612:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105615:	8b 40 44             	mov    0x44(%eax),%eax
f0105618:	85 c0                	test   %eax,%eax
f010561a:	74 11                	je     f010562d <sched_kill_env+0x16d>
f010561c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010561f:	8b 40 44             	mov    0x44(%eax),%eax
f0105622:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105625:	8b 52 48             	mov    0x48(%edx),%edx
f0105628:	89 50 48             	mov    %edx,0x48(%eax)
f010562b:	eb 14                	jmp    f0105641 <sched_kill_env+0x181>
f010562d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105630:	8b 40 48             	mov    0x48(%eax),%eax
f0105633:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105636:	c1 e2 04             	shl    $0x4,%edx
f0105639:	81 c2 f4 9a 65 f0    	add    $0xf0659af4,%edx
f010563f:	89 02                	mov    %eax,(%edx)
f0105641:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105644:	8b 40 48             	mov    0x48(%eax),%eax
f0105647:	85 c0                	test   %eax,%eax
f0105649:	74 11                	je     f010565c <sched_kill_env+0x19c>
f010564b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564e:	8b 40 48             	mov    0x48(%eax),%eax
f0105651:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105654:	8b 52 44             	mov    0x44(%edx),%edx
f0105657:	89 50 44             	mov    %edx,0x44(%eax)
f010565a:	eb 14                	jmp    f0105670 <sched_kill_env+0x1b0>
f010565c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010565f:	8b 40 44             	mov    0x44(%eax),%eax
f0105662:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105665:	c1 e2 04             	shl    $0x4,%edx
f0105668:	81 c2 f0 9a 65 f0    	add    $0xf0659af0,%edx
f010566e:	89 02                	mov    %eax,(%edx)
f0105670:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105673:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105684:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105687:	c1 e0 04             	shl    $0x4,%eax
f010568a:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f010568f:	8b 00                	mov    (%eax),%eax
f0105691:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105694:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105697:	c1 e0 04             	shl    $0x4,%eax
f010569a:	05 fc 9a 65 f0       	add    $0xf0659afc,%eax
f010569f:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 0f 3e 00 00       	call   f01094bb <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 4b 51 13 f0       	push   $0xf013514b
f01056b7:	e8 71 b5 ff ff       	call   f0100c2d <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01056c6:	eb 50                	jmp    f0105718 <sched_kill_env+0x258>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056cb:	c1 e0 04             	shl    $0x4,%eax
f01056ce:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f01056d3:	8b 00                	mov    (%eax),%eax
f01056d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056dc:	74 08                	je     f01056e6 <sched_kill_env+0x226>
f01056de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e1:	8b 40 44             	mov    0x44(%eax),%eax
f01056e4:	eb 05                	jmp    f01056eb <sched_kill_env+0x22b>
f01056e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01056eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056ee:	c1 e2 04             	shl    $0x4,%edx
f01056f1:	81 c2 f8 9a 65 f0    	add    $0xf0659af8,%edx
f01056f7:	89 02                	mov    %eax,(%edx)
f01056f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056fc:	c1 e0 04             	shl    $0x4,%eax
f01056ff:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f0105704:	8b 00                	mov    (%eax),%eax
f0105706:	85 c0                	test   %eax,%eax
f0105708:	0f 85 b7 fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
f010570e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105712:	0f 85 ad fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f0105718:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010571c:	75 16                	jne    f0105734 <sched_kill_env+0x274>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010571e:	ff 45 ec             	incl   -0x14(%ebp)
f0105721:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0105726:	0f b6 c0             	movzbl %al,%eax
f0105729:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010572c:	0f 8f 62 fe ff ff    	jg     f0105594 <sched_kill_env+0xd4>
f0105732:	eb 01                	jmp    f0105735 <sched_kill_env+0x275>
						//return;
					}
				}
			}
			if (found)
				break;
f0105734:	90                   	nop
		}
	}
	if (!found)
f0105735:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105739:	0f 85 a7 00 00 00    	jne    f01057e6 <sched_kill_env+0x326>
	{
		ptr_env=NULL;
f010573f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105746:	a1 44 fa 6b f0       	mov    0xf06bfa44,%eax
f010574b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010574e:	eb 67                	jmp    f01057b7 <sched_kill_env+0x2f7>
		{
			if(ptr_env->env_id == envId)
f0105750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105753:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105756:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105759:	75 54                	jne    f01057af <sched_kill_env+0x2ef>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010575b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575e:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105767:	8b 40 4c             	mov    0x4c(%eax),%eax
f010576a:	83 ec 04             	sub    $0x4,%esp
f010576d:	52                   	push   %edx
f010576e:	50                   	push   %eax
f010576f:	68 20 52 13 f0       	push   $0xf0135220
f0105774:	e8 b4 b4 ff ff       	call   f0100c2d <cprintf>
f0105779:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010577c:	83 ec 0c             	sub    $0xc,%esp
f010577f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105782:	e8 81 f2 ff ff       	call   f0104a08 <sched_remove_exit>
f0105787:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010578a:	83 ec 0c             	sub    $0xc,%esp
f010578d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105790:	e8 26 3d 00 00       	call   f01094bb <env_free>
f0105795:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105798:	83 ec 0c             	sub    $0xc,%esp
f010579b:	68 4b 51 13 f0       	push   $0xf013514b
f01057a0:	e8 88 b4 ff ff       	call   f0100c2d <cprintf>
f01057a5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01057a8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057af:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f01057b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057bb:	74 08                	je     f01057c5 <sched_kill_env+0x305>
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 44             	mov    0x44(%eax),%eax
f01057c3:	eb 05                	jmp    f01057ca <sched_kill_env+0x30a>
f01057c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01057ca:	a3 4c fa 6b f0       	mov    %eax,0xf06bfa4c
f01057cf:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f01057d4:	85 c0                	test   %eax,%eax
f01057d6:	0f 85 74 ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
f01057dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057e0:	0f 85 6a ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
				//return;
			}
		}
	}

	if (!found)
f01057e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057ea:	0f 85 a0 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
	{
		if (curenv->env_id == envId)
f01057f0:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01057f5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fb:	0f 85 8f 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
		{
			ptr_env = curenv;
f0105801:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0105806:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105809:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010580c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580f:	83 f8 02             	cmp    $0x2,%eax
f0105812:	74 19                	je     f010582d <sched_kill_env+0x36d>
f0105814:	68 48 52 13 f0       	push   $0xf0135248
f0105819:	68 68 52 13 f0       	push   $0xf0135268
f010581e:	68 56 02 00 00       	push   $0x256
f0105823:	68 73 4f 13 f0       	push   $0xf0134f73
f0105828:	e8 79 a9 ff ff       	call   f01001a6 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105836:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105839:	8b 40 4c             	mov    0x4c(%eax),%eax
f010583c:	83 ec 04             	sub    $0x4,%esp
f010583f:	52                   	push   %edx
f0105840:	50                   	push   %eax
f0105841:	68 80 52 13 f0       	push   $0xf0135280
f0105846:	e8 e2 b3 ff ff       	call   f0100c2d <cprintf>
f010584b:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f010584e:	83 ec 0c             	sub    $0xc,%esp
f0105851:	ff 75 f4             	pushl  -0xc(%ebp)
f0105854:	e8 62 3c 00 00       	call   f01094bb <env_free>
f0105859:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010585c:	83 ec 0c             	sub    $0xc,%esp
f010585f:	68 4b 51 13 f0       	push   $0xf013514b
f0105864:	e8 c4 b3 ff ff       	call   f0100c2d <cprintf>
f0105869:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010586c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105873:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f0105878:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010587b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010587e:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105881:	c7 05 14 92 65 f0 00 	movl   $0x0,0xf0659214
f0105888:	00 00 00 
			fos_scheduler();
f010588b:	e8 5b ed ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105890:	90                   	nop
f0105891:	c9                   	leave  
f0105892:	c3                   	ret    

f0105893 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105893:	55                   	push   %ebp
f0105894:	89 e5                	mov    %esp,%ebp
f0105896:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105899:	83 ec 0c             	sub    $0xc,%esp
f010589c:	6a 01                	push   $0x1
f010589e:	e8 f4 7d 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f01058a3:	83 c4 10             	add    $0x10,%esp
f01058a6:	85 c0                	test   %eax,%eax
f01058a8:	74 05                	je     f01058af <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f01058aa:	e8 05 00 00 00       	call   f01058b4 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01058af:	e8 37 ed ff ff       	call   f01045eb <fos_scheduler>

f01058b4 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f01058b4:	55                   	push   %ebp
f01058b5:	89 e5                	mov    %esp,%ebp
f01058b7:	53                   	push   %ebx
f01058b8:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f01058bb:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01058c0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01058c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01058c7:	0f 84 cf 01 00 00    	je     f0105a9c <update_WS_time_stamps+0x1e8>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01058cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01058d4:	e9 ce 00 00 00       	jmp    f01059a7 <update_WS_time_stamps+0xf3>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f01058d9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058df:	89 d0                	mov    %edx,%eax
f01058e1:	01 c0                	add    %eax,%eax
f01058e3:	01 d0                	add    %edx,%eax
f01058e5:	c1 e0 03             	shl    $0x3,%eax
f01058e8:	01 c8                	add    %ecx,%eax
f01058ea:	83 c0 7c             	add    $0x7c,%eax
f01058ed:	8a 00                	mov    (%eax),%al
f01058ef:	3c 01                	cmp    $0x1,%al
f01058f1:	0f 84 ad 00 00 00    	je     f01059a4 <update_WS_time_stamps+0xf0>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f01058f7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058fd:	89 d0                	mov    %edx,%eax
f01058ff:	01 c0                	add    %eax,%eax
f0105901:	01 d0                	add    %edx,%eax
f0105903:	c1 e0 03             	shl    $0x3,%eax
f0105906:	01 c8                	add    %ecx,%eax
f0105908:	83 c0 78             	add    $0x78,%eax
f010590b:	8b 00                	mov    (%eax),%eax
f010590d:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105910:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105913:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105916:	83 ec 08             	sub    $0x8,%esp
f0105919:	ff 75 e8             	pushl  -0x18(%ebp)
f010591c:	50                   	push   %eax
f010591d:	e8 86 1e 00 00       	call   f01077a8 <pt_get_page_permissions>
f0105922:	83 c4 10             	add    $0x10,%esp
f0105925:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105928:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010592b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010592e:	89 d0                	mov    %edx,%eax
f0105930:	01 c0                	add    %eax,%eax
f0105932:	01 d0                	add    %edx,%eax
f0105934:	c1 e0 03             	shl    $0x3,%eax
f0105937:	01 c8                	add    %ecx,%eax
f0105939:	83 e8 80             	sub    $0xffffff80,%eax
f010593c:	8b 00                	mov    (%eax),%eax
f010593e:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105941:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105944:	83 e0 20             	and    $0x20,%eax
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 3b                	je     f0105986 <update_WS_time_stamps+0xd2>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010594b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010594e:	c1 e8 02             	shr    $0x2,%eax
f0105951:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105956:	89 c1                	mov    %eax,%ecx
f0105958:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010595b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010595e:	89 d0                	mov    %edx,%eax
f0105960:	01 c0                	add    %eax,%eax
f0105962:	01 d0                	add    %edx,%eax
f0105964:	c1 e0 03             	shl    $0x3,%eax
f0105967:	01 d8                	add    %ebx,%eax
f0105969:	83 e8 80             	sub    $0xffffff80,%eax
f010596c:	89 08                	mov    %ecx,(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010596e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105971:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105974:	6a 20                	push   $0x20
f0105976:	6a 00                	push   $0x0
f0105978:	ff 75 e8             	pushl  -0x18(%ebp)
f010597b:	50                   	push   %eax
f010597c:	e8 73 1d 00 00       	call   f01076f4 <pt_set_page_permissions>
f0105981:	83 c4 10             	add    $0x10,%esp
f0105984:	eb 1e                	jmp    f01059a4 <update_WS_time_stamps+0xf0>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105986:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105989:	c1 e8 02             	shr    $0x2,%eax
f010598c:	89 c1                	mov    %eax,%ecx
f010598e:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105994:	89 d0                	mov    %edx,%eax
f0105996:	01 c0                	add    %eax,%eax
f0105998:	01 d0                	add    %edx,%eax
f010599a:	c1 e0 03             	shl    $0x3,%eax
f010599d:	01 d8                	add    %ebx,%eax
f010599f:	83 e8 80             	sub    $0xffffff80,%eax
f01059a2:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01059a4:	ff 45 f4             	incl   -0xc(%ebp)
f01059a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059aa:	8b 50 74             	mov    0x74(%eax),%edx
f01059ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b0:	39 c2                	cmp    %eax,%edx
f01059b2:	0f 87 21 ff ff ff    	ja     f01058d9 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01059b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01059bf:	e9 ce 00 00 00       	jmp    f0105a92 <update_WS_time_stamps+0x1de>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01059c4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ca:	89 d0                	mov    %edx,%eax
f01059cc:	01 c0                	add    %eax,%eax
f01059ce:	01 d0                	add    %edx,%eax
f01059d0:	c1 e0 03             	shl    $0x3,%eax
f01059d3:	01 c8                	add    %ecx,%eax
f01059d5:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01059da:	8a 00                	mov    (%eax),%al
f01059dc:	3c 01                	cmp    $0x1,%al
f01059de:	0f 84 ab 00 00 00    	je     f0105a8f <update_WS_time_stamps+0x1db>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01059e4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ea:	89 d0                	mov    %edx,%eax
f01059ec:	01 c0                	add    %eax,%eax
f01059ee:	01 d0                	add    %edx,%eax
f01059f0:	c1 e0 03             	shl    $0x3,%eax
f01059f3:	01 c8                	add    %ecx,%eax
f01059f5:	05 38 d5 01 00       	add    $0x1d538,%eax
f01059fa:	8b 00                	mov    (%eax),%eax
f01059fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f01059ff:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a05:	89 d0                	mov    %edx,%eax
f0105a07:	01 c0                	add    %eax,%eax
f0105a09:	01 d0                	add    %edx,%eax
f0105a0b:	c1 e0 03             	shl    $0x3,%eax
f0105a0e:	01 c8                	add    %ecx,%eax
f0105a10:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a15:	8b 00                	mov    (%eax),%eax
f0105a17:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105a1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a1d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a20:	83 ec 08             	sub    $0x8,%esp
f0105a23:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a26:	50                   	push   %eax
f0105a27:	e8 9b 1e 00 00       	call   f01078c7 <pd_is_table_used>
f0105a2c:	83 c4 10             	add    $0x10,%esp
f0105a2f:	85 c0                	test   %eax,%eax
f0105a31:	74 3c                	je     f0105a6f <update_WS_time_stamps+0x1bb>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105a33:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a36:	c1 e8 02             	shr    $0x2,%eax
f0105a39:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105a3e:	89 c1                	mov    %eax,%ecx
f0105a40:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a43:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a46:	89 d0                	mov    %edx,%eax
f0105a48:	01 c0                	add    %eax,%eax
f0105a4a:	01 d0                	add    %edx,%eax
f0105a4c:	c1 e0 03             	shl    $0x3,%eax
f0105a4f:	01 d8                	add    %ebx,%eax
f0105a51:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a56:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a5b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a5e:	83 ec 08             	sub    $0x8,%esp
f0105a61:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a64:	50                   	push   %eax
f0105a65:	e8 81 1e 00 00       	call   f01078eb <pd_set_table_unused>
f0105a6a:	83 c4 10             	add    $0x10,%esp
f0105a6d:	eb 20                	jmp    f0105a8f <update_WS_time_stamps+0x1db>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105a6f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a72:	c1 e8 02             	shr    $0x2,%eax
f0105a75:	89 c1                	mov    %eax,%ecx
f0105a77:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a7d:	89 d0                	mov    %edx,%eax
f0105a7f:	01 c0                	add    %eax,%eax
f0105a81:	01 d0                	add    %edx,%eax
f0105a83:	c1 e0 03             	shl    $0x3,%eax
f0105a86:	01 d8                	add    %ebx,%eax
f0105a88:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a8d:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a8f:	ff 45 f0             	incl   -0x10(%ebp)
f0105a92:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105a96:	0f 8e 28 ff ff ff    	jle    f01059c4 <update_WS_time_stamps+0x110>
					}
				}
			}
		}
	}
}
f0105a9c:	90                   	nop
f0105a9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105aa0:	c9                   	leave  
f0105aa1:	c3                   	ret    

f0105aa2 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105aa2:	55                   	push   %ebp
f0105aa3:	89 e5                	mov    %esp,%ebp
f0105aa5:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105aa8:	c7 05 0c 92 65 f0 01 	movl   $0x1,0xf065920c
f0105aaf:	00 00 00 
f0105ab2:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105ab9:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105abd:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105ac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ac3:	ee                   	out    %al,(%dx)
f0105ac4:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105acb:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105acf:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105ad2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ad5:	ee                   	out    %al,(%dx)
f0105ad6:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105add:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105ae1:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105ae4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105ae7:	ee                   	out    %al,(%dx)
f0105ae8:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105aef:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105af3:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105af6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105af9:	ee                   	out    %al,(%dx)
f0105afa:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b01:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105b05:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105b08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105b0b:	ee                   	out    %al,(%dx)
f0105b0c:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105b13:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105b17:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105b1a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b1d:	ee                   	out    %al,(%dx)
f0105b1e:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105b25:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105b29:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105b2c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105b2f:	ee                   	out    %al,(%dx)
f0105b30:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105b37:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105b3b:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105b3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105b41:	ee                   	out    %al,(%dx)
f0105b42:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105b49:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105b4d:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105b50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105b53:	ee                   	out    %al,(%dx)
f0105b54:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105b5b:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105b5f:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105b62:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105b65:	ee                   	out    %al,(%dx)
f0105b66:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105b6d:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105b71:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105b74:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105b77:	ee                   	out    %al,(%dx)
f0105b78:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105b7f:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105b83:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105b86:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105b89:	ee                   	out    %al,(%dx)
f0105b8a:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105b91:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105b95:	8a 45 be             	mov    -0x42(%ebp),%al
f0105b98:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105b9b:	ee                   	out    %al,(%dx)
f0105b9c:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105ba3:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105ba7:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105baa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105bad:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105bae:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105bb4:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105bb8:	74 15                	je     f0105bcf <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105bba:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105bc0:	0f b7 c0             	movzwl %ax,%eax
f0105bc3:	83 ec 0c             	sub    $0xc,%esp
f0105bc6:	50                   	push   %eax
f0105bc7:	e8 06 00 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0105bcc:	83 c4 10             	add    $0x10,%esp
}
f0105bcf:	90                   	nop
f0105bd0:	c9                   	leave  
f0105bd1:	c3                   	ret    

f0105bd2 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105bd2:	55                   	push   %ebp
f0105bd3:	89 e5                	mov    %esp,%ebp
f0105bd5:	83 ec 14             	sub    $0x14,%esp
f0105bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bdb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105bdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105be2:	66 a3 b0 18 19 f0    	mov    %ax,0xf01918b0
	if (!didinit)
f0105be8:	a1 0c 92 65 f0       	mov    0xf065920c,%eax
f0105bed:	85 c0                	test   %eax,%eax
f0105bef:	74 34                	je     f0105c25 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bf4:	0f b6 c0             	movzbl %al,%eax
f0105bf7:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105bfe:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c01:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105c04:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105c07:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105c08:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c0b:	66 c1 e8 08          	shr    $0x8,%ax
f0105c0f:	0f b6 c0             	movzbl %al,%eax
f0105c12:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105c19:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105c1c:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105c1f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105c22:	ee                   	out    %al,(%dx)
f0105c23:	eb 01                	jmp    f0105c26 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105c25:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105c26:	c9                   	leave  
f0105c27:	c3                   	ret    

f0105c28 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105c28:	55                   	push   %ebp
f0105c29:	89 e5                	mov    %esp,%ebp
f0105c2b:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105c2e:	83 ec 08             	sub    $0x8,%esp
f0105c31:	68 00 10 00 00       	push   $0x1000
f0105c36:	68 00 10 00 00       	push   $0x1000
f0105c3b:	e8 5d 02 00 00       	call   f0105e9d <boot_allocate_space>
f0105c40:	83 c4 10             	add    $0x10,%esp
f0105c43:	a3 b8 1e 6c f0       	mov    %eax,0xf06c1eb8
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105c48:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0105c4d:	83 ec 04             	sub    $0x4,%esp
f0105c50:	68 00 10 00 00       	push   $0x1000
f0105c55:	6a 00                	push   $0x0
f0105c57:	50                   	push   %eax
f0105c58:	e8 e6 ad 02 00       	call   f0130a43 <memset>
f0105c5d:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105c60:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0105c65:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105c68:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105c6f:	77 14                	ja     f0105c85 <initialize_kernel_VM+0x5d>
f0105c71:	ff 75 e8             	pushl  -0x18(%ebp)
f0105c74:	68 ac 52 13 f0       	push   $0xf01352ac
f0105c79:	6a 45                	push   $0x45
f0105c7b:	68 e0 52 13 f0       	push   $0xf01352e0
f0105c80:	e8 21 a5 ff ff       	call   f01001a6 <_panic>
f0105c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105c88:	05 00 00 00 10       	add    $0x10000000,%eax
f0105c8d:	a3 e8 1e 6c f0       	mov    %eax,0xf06c1ee8
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105c92:	c7 45 e4 00 90 18 f0 	movl   $0xf0189000,-0x1c(%ebp)
f0105c99:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105ca0:	77 14                	ja     f0105cb6 <initialize_kernel_VM+0x8e>
f0105ca2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105ca5:	68 ac 52 13 f0       	push   $0xf01352ac
f0105caa:	6a 4d                	push   $0x4d
f0105cac:	68 e0 52 13 f0       	push   $0xf01352e0
f0105cb1:	e8 f0 a4 ff ff       	call   f01001a6 <_panic>
f0105cb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cb9:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105cbf:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0105cc4:	83 ec 0c             	sub    $0xc,%esp
f0105cc7:	6a 02                	push   $0x2
f0105cc9:	52                   	push   %edx
f0105cca:	68 00 80 00 00       	push   $0x8000
f0105ccf:	68 00 80 bf ef       	push   $0xefbf8000
f0105cd4:	50                   	push   %eax
f0105cd5:	e8 24 02 00 00       	call   f0105efe <boot_map_range>
f0105cda:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105cdd:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105ce4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105ceb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105cf2:	eb 25                	jmp    f0105d19 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105cf4:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105cf7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105cfa:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0105cff:	83 ec 04             	sub    $0x4,%esp
f0105d02:	6a 01                	push   $0x1
f0105d04:	52                   	push   %edx
f0105d05:	50                   	push   %eax
f0105d06:	e8 67 02 00 00       	call   f0105f72 <boot_get_page_table>
f0105d0b:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d0e:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105d15:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105d19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1d:	72 d5                	jb     f0105cf4 <initialize_kernel_VM+0xcc>
f0105d1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d23:	77 06                	ja     f0105d2b <initialize_kernel_VM+0x103>
f0105d25:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105d29:	76 c9                	jbe    f0105cf4 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105d2b:	8b 15 50 1e 6c f0    	mov    0xf06c1e50,%edx
f0105d31:	89 d0                	mov    %edx,%eax
f0105d33:	01 c0                	add    %eax,%eax
f0105d35:	01 d0                	add    %edx,%eax
f0105d37:	c1 e0 03             	shl    $0x3,%eax
f0105d3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105d3d:	83 ec 08             	sub    $0x8,%esp
f0105d40:	68 00 10 00 00       	push   $0x1000
f0105d45:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d48:	e8 50 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d4d:	83 c4 10             	add    $0x10,%esp
f0105d50:	a3 90 1e 6c f0       	mov    %eax,0xf06c1e90
	memset(frames_info, 0, array_size);
f0105d55:	a1 90 1e 6c f0       	mov    0xf06c1e90,%eax
f0105d5a:	83 ec 04             	sub    $0x4,%esp
f0105d5d:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d60:	6a 00                	push   $0x0
f0105d62:	50                   	push   %eax
f0105d63:	e8 db ac 02 00       	call   f0130a43 <memset>
f0105d68:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105d6b:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105d72:	83 ec 08             	sub    $0x8,%esp
f0105d75:	68 00 10 00 00       	push   $0x1000
f0105d7a:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d7d:	e8 1b 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d82:	83 c4 10             	add    $0x10,%esp
f0105d85:	a3 e4 9a 65 f0       	mov    %eax,0xf0659ae4
	memset(disk_frames_info , 0, disk_array_size);
f0105d8a:	a1 e4 9a 65 f0       	mov    0xf0659ae4,%eax
f0105d8f:	83 ec 04             	sub    $0x4,%esp
f0105d92:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d95:	6a 00                	push   $0x0
f0105d97:	50                   	push   %eax
f0105d98:	e8 a6 ac 02 00       	call   f0130a43 <memset>
f0105d9d:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105da0:	e8 02 05 00 00       	call   f01062a7 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105da5:	83 ec 0c             	sub    $0xc,%esp
f0105da8:	6a 08                	push   $0x8
f0105daa:	e8 31 98 02 00       	call   f012f5e0 <nearest_pow2_ceil>
f0105daf:	83 c4 10             	add    $0x10,%esp
f0105db2:	83 ec 04             	sub    $0x4,%esp
f0105db5:	50                   	push   %eax
f0105db6:	6a 08                	push   $0x8
f0105db8:	68 00 53 13 f0       	push   $0xf0135300
f0105dbd:	e8 6b ae ff ff       	call   f0100c2d <cprintf>
f0105dc2:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105dc5:	c7 45 d8 40 55 0f 00 	movl   $0xf5540,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105dcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105dcf:	83 ec 08             	sub    $0x8,%esp
f0105dd2:	68 00 10 00 00       	push   $0x1000
f0105dd7:	50                   	push   %eax
f0105dd8:	e8 c0 00 00 00       	call   f0105e9d <boot_allocate_space>
f0105ddd:	83 c4 10             	add    $0x10,%esp
f0105de0:	a3 10 92 65 f0       	mov    %eax,0xf0659210
	memset(envs , 0, envs_size);
f0105de5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105de8:	a1 10 92 65 f0       	mov    0xf0659210,%eax
f0105ded:	83 ec 04             	sub    $0x4,%esp
f0105df0:	52                   	push   %edx
f0105df1:	6a 00                	push   $0x0
f0105df3:	50                   	push   %eax
f0105df4:	e8 4a ac 02 00       	call   f0130a43 <memset>
f0105df9:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105dfc:	a1 10 92 65 f0       	mov    0xf0659210,%eax
f0105e01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105e04:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105e0b:	77 17                	ja     f0105e24 <initialize_kernel_VM+0x1fc>
f0105e0d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105e10:	68 ac 52 13 f0       	push   $0xf01352ac
f0105e15:	68 96 00 00 00       	push   $0x96
f0105e1a:	68 e0 52 13 f0       	push   $0xf01352e0
f0105e1f:	e8 82 a3 ff ff       	call   f01001a6 <_panic>
f0105e24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105e27:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105e2d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e30:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0105e35:	83 ec 0c             	sub    $0xc,%esp
f0105e38:	6a 04                	push   $0x4
f0105e3a:	51                   	push   %ecx
f0105e3b:	52                   	push   %edx
f0105e3c:	68 00 00 c0 ee       	push   $0xeec00000
f0105e41:	50                   	push   %eax
f0105e42:	e8 b7 00 00 00       	call   f0105efe <boot_map_range>
f0105e47:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105e4a:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0105e4f:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105e54:	8b 15 b8 1e 6c f0    	mov    0xf06c1eb8,%edx
f0105e5a:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105e60:	8b 12                	mov    (%edx),%edx
f0105e62:	83 ca 05             	or     $0x5,%edx
f0105e65:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105e67:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0105e6c:	83 ec 0c             	sub    $0xc,%esp
f0105e6f:	6a 02                	push   $0x2
f0105e71:	6a 00                	push   $0x0
f0105e73:	68 ff ff ff 0f       	push   $0xfffffff
f0105e78:	68 00 00 00 f0       	push   $0xf0000000
f0105e7d:	50                   	push   %eax
f0105e7e:	e8 7b 00 00 00       	call   f0105efe <boot_map_range>
f0105e83:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105e86:	e8 2c 9f 02 00       	call   f012fdb7 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105e8b:	c7 05 40 fa 6b f0 19 	movl   $0x19,0xf06bfa40
f0105e92:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105e95:	e8 0d 03 00 00       	call   f01061a7 <turn_on_paging>
}
f0105e9a:	90                   	nop
f0105e9b:	c9                   	leave  
f0105e9c:	c3                   	ret    

f0105e9d <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105e9d:	55                   	push   %ebp
f0105e9e:	89 e5                	mov    %esp,%ebp
f0105ea0:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105ea3:	a1 b4 1e 6c f0       	mov    0xf06c1eb4,%eax
f0105ea8:	85 c0                	test   %eax,%eax
f0105eaa:	75 0a                	jne    f0105eb6 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105eac:	c7 05 b4 1e 6c f0 fc 	movl   $0xf06c1ffc,0xf06c1eb4
f0105eb3:	1f 6c f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105ebc:	a1 b4 1e 6c f0       	mov    0xf06c1eb4,%eax
f0105ec1:	89 c2                	mov    %eax,%edx
f0105ec3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105ec6:	01 d0                	add    %edx,%eax
f0105ec8:	48                   	dec    %eax
f0105ec9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105ecc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105ecf:	ba 00 00 00 00       	mov    $0x0,%edx
f0105ed4:	f7 75 fc             	divl   -0x4(%ebp)
f0105ed7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105eda:	29 d0                	sub    %edx,%eax
f0105edc:	a3 b4 1e 6c f0       	mov    %eax,0xf06c1eb4

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105ee1:	a1 b4 1e 6c f0       	mov    0xf06c1eb4,%eax
f0105ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105ee9:	8b 15 b4 1e 6c f0    	mov    0xf06c1eb4,%edx
f0105eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0105ef2:	01 d0                	add    %edx,%eax
f0105ef4:	a3 b4 1e 6c f0       	mov    %eax,0xf06c1eb4

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105efc:	c9                   	leave  
f0105efd:	c3                   	ret    

f0105efe <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105efe:	55                   	push   %ebp
f0105eff:	89 e5                	mov    %esp,%ebp
f0105f01:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105f04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105f12:	eb 53                	jmp    f0105f67 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105f14:	83 ec 04             	sub    $0x4,%esp
f0105f17:	6a 01                	push   $0x1
f0105f19:	ff 75 0c             	pushl  0xc(%ebp)
f0105f1c:	ff 75 08             	pushl  0x8(%ebp)
f0105f1f:	e8 4e 00 00 00       	call   f0105f72 <boot_get_page_table>
f0105f24:	83 c4 10             	add    $0x10,%esp
f0105f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f2d:	c1 e8 0c             	shr    $0xc,%eax
f0105f30:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105f35:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105f3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f45:	01 c2                	add    %eax,%edx
f0105f47:	8b 45 18             	mov    0x18(%ebp),%eax
f0105f4a:	0b 45 14             	or     0x14(%ebp),%eax
f0105f4d:	83 c8 01             	or     $0x1,%eax
f0105f50:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105f52:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0105f59:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f60:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f6a:	3b 45 10             	cmp    0x10(%ebp),%eax
f0105f6d:	72 a5                	jb     f0105f14 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0105f6f:	90                   	nop
f0105f70:	c9                   	leave  
f0105f71:	c3                   	ret    

f0105f72 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0105f72:	55                   	push   %ebp
f0105f73:	89 e5                	mov    %esp,%ebp
f0105f75:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0105f78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f7b:	c1 e8 16             	shr    $0x16,%eax
f0105f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0105f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f8e:	01 d0                	add    %edx,%eax
f0105f90:	8b 00                	mov    (%eax),%eax
f0105f92:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0105f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f98:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105f9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0105fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fa3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105fa6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fa9:	c1 e8 0c             	shr    $0xc,%eax
f0105fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105faf:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0105fb4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0105fb7:	72 17                	jb     f0105fd0 <boot_get_page_table+0x5e>
f0105fb9:	ff 75 e8             	pushl  -0x18(%ebp)
f0105fbc:	68 28 53 13 f0       	push   $0xf0135328
f0105fc1:	68 15 01 00 00       	push   $0x115
f0105fc6:	68 e0 52 13 f0       	push   $0xf01352e0
f0105fcb:	e8 d6 a1 ff ff       	call   f01001a6 <_panic>
f0105fd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fd3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105fd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0105fdb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105fdf:	75 72                	jne    f0106053 <boot_get_page_table+0xe1>
	{
		if (create)
f0105fe1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0105fe5:	74 65                	je     f010604c <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0105fe7:	83 ec 08             	sub    $0x8,%esp
f0105fea:	68 00 10 00 00       	push   $0x1000
f0105fef:	68 00 10 00 00       	push   $0x1000
f0105ff4:	e8 a4 fe ff ff       	call   f0105e9d <boot_allocate_space>
f0105ff9:	83 c4 10             	add    $0x10,%esp
f0105ffc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0105fff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106002:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106005:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010600c:	77 17                	ja     f0106025 <boot_get_page_table+0xb3>
f010600e:	ff 75 dc             	pushl  -0x24(%ebp)
f0106011:	68 ac 52 13 f0       	push   $0xf01352ac
f0106016:	68 1b 01 00 00       	push   $0x11b
f010601b:	68 e0 52 13 f0       	push   $0xf01352e0
f0106020:	e8 81 a1 ff ff       	call   f01001a6 <_panic>
f0106025:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106028:	05 00 00 00 10       	add    $0x10000000,%eax
f010602d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010603a:	8b 45 08             	mov    0x8(%ebp),%eax
f010603d:	01 d0                	add    %edx,%eax
f010603f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106042:	83 ca 03             	or     $0x3,%edx
f0106045:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106047:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010604a:	eb 0a                	jmp    f0106056 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f010604c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106051:	eb 03                	jmp    f0106056 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106053:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106056:	c9                   	leave  
f0106057:	c3                   	ret    

f0106058 <nvram_read>:


int nvram_read(int r)
{
f0106058:	55                   	push   %ebp
f0106059:	89 e5                	mov    %esp,%ebp
f010605b:	53                   	push   %ebx
f010605c:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010605f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106062:	83 ec 0c             	sub    $0xc,%esp
f0106065:	50                   	push   %eax
f0106066:	e8 37 df ff ff       	call   f0103fa2 <mc146818_read>
f010606b:	83 c4 10             	add    $0x10,%esp
f010606e:	89 c3                	mov    %eax,%ebx
f0106070:	8b 45 08             	mov    0x8(%ebp),%eax
f0106073:	40                   	inc    %eax
f0106074:	83 ec 0c             	sub    $0xc,%esp
f0106077:	50                   	push   %eax
f0106078:	e8 25 df ff ff       	call   f0103fa2 <mc146818_read>
f010607d:	83 c4 10             	add    $0x10,%esp
f0106080:	c1 e0 08             	shl    $0x8,%eax
f0106083:	09 d8                	or     %ebx,%eax
}
f0106085:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106088:	c9                   	leave  
f0106089:	c3                   	ret    

f010608a <detect_memory>:

void detect_memory()
{
f010608a:	55                   	push   %ebp
f010608b:	89 e5                	mov    %esp,%ebp
f010608d:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106090:	83 ec 0c             	sub    $0xc,%esp
f0106093:	6a 15                	push   $0x15
f0106095:	e8 be ff ff ff       	call   f0106058 <nvram_read>
f010609a:	83 c4 10             	add    $0x10,%esp
f010609d:	c1 e0 0a             	shl    $0xa,%eax
f01060a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01060a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01060ae:	83 ec 0c             	sub    $0xc,%esp
f01060b1:	6a 17                	push   $0x17
f01060b3:	e8 a0 ff ff ff       	call   f0106058 <nvram_read>
f01060b8:	83 c4 10             	add    $0x10,%esp
f01060bb:	c1 e0 0a             	shl    $0xa,%eax
f01060be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01060c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01060c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01060cc:	83 ec 0c             	sub    $0xc,%esp
f01060cf:	6a 34                	push   $0x34
f01060d1:	e8 82 ff ff ff       	call   f0106058 <nvram_read>
f01060d6:	83 c4 10             	add    $0x10,%esp
f01060d9:	c1 e0 10             	shl    $0x10,%eax
f01060dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01060df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f01060ea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01060ee:	74 18                	je     f0106108 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f01060f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060f3:	05 00 00 00 01       	add    $0x1000000,%eax
f01060f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01060fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060fe:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106103:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106106:	eb 19                	jmp    f0106121 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106108:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010610c:	74 0d                	je     f010611b <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f010610e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106111:	05 00 00 10 00       	add    $0x100000,%eax
f0106116:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106119:	eb 06                	jmp    f0106121 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010611b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106121:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106128:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010612e:	76 32                	jbe    f0106162 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106130:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106133:	c1 e8 0a             	shr    $0xa,%eax
f0106136:	89 c2                	mov    %eax,%edx
f0106138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010613b:	c1 e8 0a             	shr    $0xa,%eax
f010613e:	83 ec 04             	sub    $0x4,%esp
f0106141:	52                   	push   %edx
f0106142:	50                   	push   %eax
f0106143:	68 58 53 13 f0       	push   $0xf0135358
f0106148:	e8 e0 aa ff ff       	call   f0100c2d <cprintf>
f010614d:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	68 a0 53 13 f0       	push   $0xf01353a0
f0106158:	e8 d0 aa ff ff       	call   f0100c2d <cprintf>
f010615d:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106160:	eb fe                	jmp    f0106160 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106162:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106165:	c1 e8 0c             	shr    $0xc,%eax
f0106168:	a3 50 1e 6c f0       	mov    %eax,0xf06c1e50

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f010616d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106170:	c1 e8 0a             	shr    $0xa,%eax
f0106173:	83 ec 08             	sub    $0x8,%esp
f0106176:	50                   	push   %eax
f0106177:	68 34 54 13 f0       	push   $0xf0135434
f010617c:	e8 ac aa ff ff       	call   f0100c2d <cprintf>
f0106181:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106184:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106187:	c1 e8 0a             	shr    $0xa,%eax
f010618a:	89 c2                	mov    %eax,%edx
f010618c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010618f:	c1 e8 0a             	shr    $0xa,%eax
f0106192:	83 ec 04             	sub    $0x4,%esp
f0106195:	52                   	push   %edx
f0106196:	50                   	push   %eax
f0106197:	68 55 54 13 f0       	push   $0xf0135455
f010619c:	e8 8c aa ff ff       	call   f0100c2d <cprintf>
f01061a1:	83 c4 10             	add    $0x10,%esp
}
f01061a4:	90                   	nop
f01061a5:	c9                   	leave  
f01061a6:	c3                   	ret    

f01061a7 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01061a7:	55                   	push   %ebp
f01061a8:	89 e5                	mov    %esp,%ebp
f01061aa:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01061ad:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01061b4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061bb:	eb 24                	jmp    f01061e1 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01061bd:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01061c2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061c5:	c1 e2 02             	shl    $0x2,%edx
f01061c8:	01 c2                	add    %eax,%edx
f01061ca:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01061cf:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01061d2:	c1 e1 02             	shl    $0x2,%ecx
f01061d5:	01 c8                	add    %ecx,%eax
f01061d7:	8b 00                	mov    (%eax),%eax
f01061d9:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061db:	ff 45 fc             	incl   -0x4(%ebp)
f01061de:	ff 45 f8             	incl   -0x8(%ebp)
f01061e1:	a1 b4 1e 6c f0       	mov    0xf06c1eb4,%eax
f01061e6:	c1 e8 16             	shr    $0x16,%eax
f01061e9:	89 c2                	mov    %eax,%edx
f01061eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01061ee:	39 c2                	cmp    %eax,%edx
f01061f0:	77 cb                	ja     f01061bd <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f01061f2:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f01061f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01061fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01061fd:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106200:	0f 20 c0             	mov    %cr0,%eax
f0106203:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106206:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106209:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010620c:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106213:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106217:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010621a:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010621d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106220:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106223:	0f 01 15 f0 18 19 f0 	lgdtl  0xf01918f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010622a:	b8 23 00 00 00       	mov    $0x23,%eax
f010622f:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106231:	b8 23 00 00 00       	mov    $0x23,%eax
f0106236:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106238:	b8 10 00 00 00       	mov    $0x10,%eax
f010623d:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010623f:	b8 10 00 00 00       	mov    $0x10,%eax
f0106244:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106246:	b8 10 00 00 00       	mov    $0x10,%eax
f010624b:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010624d:	ea 54 62 10 f0 08 00 	ljmp   $0x8,$0xf0106254
	asm volatile("lldt %%ax" :: "a" (0));
f0106254:	b8 00 00 00 00       	mov    $0x0,%eax
f0106259:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010625c:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106263:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010626a:	eb 19                	jmp    f0106285 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010626c:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0106271:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106274:	c1 e2 02             	shl    $0x2,%edx
f0106277:	01 d0                	add    %edx,%eax
f0106279:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010627f:	ff 45 f4             	incl   -0xc(%ebp)
f0106282:	ff 45 f0             	incl   -0x10(%ebp)
f0106285:	a1 b4 1e 6c f0       	mov    0xf06c1eb4,%eax
f010628a:	c1 e8 16             	shr    $0x16,%eax
f010628d:	89 c2                	mov    %eax,%edx
f010628f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106292:	39 c2                	cmp    %eax,%edx
f0106294:	77 d6                	ja     f010626c <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106296:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f010629b:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010629e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062a1:	0f 22 d8             	mov    %eax,%cr3
}
f01062a4:	90                   	nop
f01062a5:	c9                   	leave  
f01062a6:	c3                   	ret    

f01062a7 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01062a7:	55                   	push   %ebp
f01062a8:	89 e5                	mov    %esp,%ebp
f01062aa:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01062ad:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01062b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01062b5:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01062bc:	77 17                	ja     f01062d5 <setup_listing_to_all_page_tables_entries+0x2e>
f01062be:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c1:	68 ac 52 13 f0       	push   $0xf01352ac
f01062c6:	68 ab 01 00 00       	push   $0x1ab
f01062cb:	68 e0 52 13 f0       	push   $0xf01352e0
f01062d0:	e8 d1 9e ff ff       	call   f01001a6 <_panic>
f01062d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062d8:	05 00 00 00 10       	add    $0x10000000,%eax
f01062dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01062e0:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01062e5:	05 fc 0e 00 00       	add    $0xefc,%eax
f01062ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062ed:	83 ca 03             	or     $0x3,%edx
f01062f0:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f01062f2:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01062f7:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01062fd:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0106302:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106305:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010630c:	77 17                	ja     f0106325 <setup_listing_to_all_page_tables_entries+0x7e>
f010630e:	ff 75 ec             	pushl  -0x14(%ebp)
f0106311:	68 ac 52 13 f0       	push   $0xf01352ac
f0106316:	68 b0 01 00 00       	push   $0x1b0
f010631b:	68 e0 52 13 f0       	push   $0xf01352e0
f0106320:	e8 81 9e ff ff       	call   f01001a6 <_panic>
f0106325:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106328:	05 00 00 00 10       	add    $0x10000000,%eax
f010632d:	83 c8 05             	or     $0x5,%eax
f0106330:	89 02                	mov    %eax,(%edx)

}
f0106332:	90                   	nop
f0106333:	c9                   	leave  
f0106334:	c3                   	ret    

f0106335 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106335:	55                   	push   %ebp
f0106336:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106338:	8b 45 08             	mov    0x8(%ebp),%eax
f010633b:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f0106341:	29 d0                	sub    %edx,%eax
f0106343:	c1 f8 03             	sar    $0x3,%eax
f0106346:	89 c2                	mov    %eax,%edx
f0106348:	89 d0                	mov    %edx,%eax
f010634a:	c1 e0 02             	shl    $0x2,%eax
f010634d:	01 d0                	add    %edx,%eax
f010634f:	c1 e0 02             	shl    $0x2,%eax
f0106352:	01 d0                	add    %edx,%eax
f0106354:	c1 e0 02             	shl    $0x2,%eax
f0106357:	01 d0                	add    %edx,%eax
f0106359:	89 c1                	mov    %eax,%ecx
f010635b:	c1 e1 08             	shl    $0x8,%ecx
f010635e:	01 c8                	add    %ecx,%eax
f0106360:	89 c1                	mov    %eax,%ecx
f0106362:	c1 e1 10             	shl    $0x10,%ecx
f0106365:	01 c8                	add    %ecx,%eax
f0106367:	01 c0                	add    %eax,%eax
f0106369:	01 d0                	add    %edx,%eax
}
f010636b:	5d                   	pop    %ebp
f010636c:	c3                   	ret    

f010636d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010636d:	55                   	push   %ebp
f010636e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106370:	ff 75 08             	pushl  0x8(%ebp)
f0106373:	e8 bd ff ff ff       	call   f0106335 <to_frame_number>
f0106378:	83 c4 04             	add    $0x4,%esp
f010637b:	c1 e0 0c             	shl    $0xc,%eax
}
f010637e:	c9                   	leave  
f010637f:	c3                   	ret    

f0106380 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106380:	55                   	push   %ebp
f0106381:	89 e5                	mov    %esp,%ebp
f0106383:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106386:	8b 45 08             	mov    0x8(%ebp),%eax
f0106389:	c1 e8 0c             	shr    $0xc,%eax
f010638c:	89 c2                	mov    %eax,%edx
f010638e:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0106393:	39 c2                	cmp    %eax,%edx
f0106395:	72 14                	jb     f01063ab <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106397:	83 ec 04             	sub    $0x4,%esp
f010639a:	68 74 54 13 f0       	push   $0xf0135474
f010639f:	6a 55                	push   $0x55
f01063a1:	68 99 54 13 f0       	push   $0xf0135499
f01063a6:	e8 fb 9d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01063ab:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f01063b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01063b4:	c1 e8 0c             	shr    $0xc,%eax
f01063b7:	89 c1                	mov    %eax,%ecx
f01063b9:	89 c8                	mov    %ecx,%eax
f01063bb:	01 c0                	add    %eax,%eax
f01063bd:	01 c8                	add    %ecx,%eax
f01063bf:	c1 e0 03             	shl    $0x3,%eax
f01063c2:	01 d0                	add    %edx,%eax
}
f01063c4:	c9                   	leave  
f01063c5:	c3                   	ret    

f01063c6 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f01063c6:	55                   	push   %ebp
f01063c7:	89 e5                	mov    %esp,%ebp
f01063c9:	83 ec 10             	sub    $0x10,%esp
f01063cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01063cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f01063d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01063d5:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f01063d8:	90                   	nop
f01063d9:	c9                   	leave  
f01063da:	c3                   	ret    

f01063db <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f01063db:	55                   	push   %ebp
f01063dc:	89 e5                	mov    %esp,%ebp
f01063de:	53                   	push   %ebx
f01063df:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f01063e2:	c7 05 58 1e 6c f0 00 	movl   $0x0,0xf06c1e58
f01063e9:	00 00 00 
f01063ec:	c7 05 5c 1e 6c f0 00 	movl   $0x0,0xf06c1e5c
f01063f3:	00 00 00 
f01063f6:	c7 05 64 1e 6c f0 00 	movl   $0x0,0xf06c1e64
f01063fd:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106400:	c7 05 c0 9a 65 f0 00 	movl   $0x0,0xf0659ac0
f0106407:	00 00 00 
f010640a:	c7 05 c4 9a 65 f0 00 	movl   $0x0,0xf0659ac4
f0106411:	00 00 00 
f0106414:	c7 05 cc 9a 65 f0 00 	movl   $0x0,0xf0659acc
f010641b:	00 00 00 

	frames_info[0].references = 1;
f010641e:	a1 90 1e 6c f0       	mov    0xf06c1e90,%eax
f0106423:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106429:	a1 90 1e 6c f0       	mov    0xf06c1e90,%eax
f010642e:	83 c0 18             	add    $0x18,%eax
f0106431:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106437:	a1 90 1e 6c f0       	mov    0xf06c1e90,%eax
f010643c:	83 c0 30             	add    $0x30,%eax
f010643f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106445:	c7 05 9c 1e 6c f0 00 	movl   $0xf0001000,0xf06c1e9c
f010644c:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f010644f:	c7 05 c0 1e 6c f0 00 	movl   $0xf0002000,0xf06c1ec0
f0106456:	20 00 f0 
	i =0;
f0106459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106460:	eb 1f                	jmp    f0106481 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0106462:	8b 15 9c 1e 6c f0    	mov    0xf06c1e9c,%edx
f0106468:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010646b:	01 d0                	add    %edx,%eax
f010646d:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106470:	8b 15 c0 1e 6c f0    	mov    0xf06c1ec0,%edx
f0106476:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106479:	01 d0                	add    %edx,%eax
f010647b:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f010647e:	ff 45 f4             	incl   -0xc(%ebp)
f0106481:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106488:	7e d8                	jle    f0106462 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f010648a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106491:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106494:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106499:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010649c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649f:	ba 00 00 00 00       	mov    $0x0,%edx
f01064a4:	f7 75 f0             	divl   -0x10(%ebp)
f01064a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064aa:	29 d0                	sub    %edx,%eax
f01064ac:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01064af:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01064b6:	e9 e8 00 00 00       	jmp    f01065a3 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f01064bb:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f01064c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064c4:	89 d0                	mov    %edx,%eax
f01064c6:	01 c0                	add    %eax,%eax
f01064c8:	01 d0                	add    %edx,%eax
f01064ca:	c1 e0 03             	shl    $0x3,%eax
f01064cd:	01 c8                	add    %ecx,%eax
f01064cf:	83 ec 0c             	sub    $0xc,%esp
f01064d2:	50                   	push   %eax
f01064d3:	e8 b7 02 00 00       	call   f010678f <initialize_frame_info>
f01064d8:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01064db:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f01064e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064e4:	89 d0                	mov    %edx,%eax
f01064e6:	01 c0                	add    %eax,%eax
f01064e8:	01 d0                	add    %edx,%eax
f01064ea:	c1 e0 03             	shl    $0x3,%eax
f01064ed:	01 c8                	add    %ecx,%eax
f01064ef:	85 c0                	test   %eax,%eax
f01064f1:	75 14                	jne    f0106507 <initialize_paging+0x12c>
f01064f3:	83 ec 04             	sub    $0x4,%esp
f01064f6:	68 b4 54 13 f0       	push   $0xf01354b4
f01064fb:	6a 5c                	push   $0x5c
f01064fd:	68 d7 54 13 f0       	push   $0xf01354d7
f0106502:	e8 9f 9c ff ff       	call   f01001a6 <_panic>
f0106507:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f010650d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106510:	89 d0                	mov    %edx,%eax
f0106512:	01 c0                	add    %eax,%eax
f0106514:	01 d0                	add    %edx,%eax
f0106516:	c1 e0 03             	shl    $0x3,%eax
f0106519:	01 c8                	add    %ecx,%eax
f010651b:	8b 15 58 1e 6c f0    	mov    0xf06c1e58,%edx
f0106521:	89 10                	mov    %edx,(%eax)
f0106523:	8b 00                	mov    (%eax),%eax
f0106525:	85 c0                	test   %eax,%eax
f0106527:	74 1f                	je     f0106548 <initialize_paging+0x16d>
f0106529:	8b 15 58 1e 6c f0    	mov    0xf06c1e58,%edx
f010652f:	8b 1d 90 1e 6c f0    	mov    0xf06c1e90,%ebx
f0106535:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106538:	89 c8                	mov    %ecx,%eax
f010653a:	01 c0                	add    %eax,%eax
f010653c:	01 c8                	add    %ecx,%eax
f010653e:	c1 e0 03             	shl    $0x3,%eax
f0106541:	01 d8                	add    %ebx,%eax
f0106543:	89 42 04             	mov    %eax,0x4(%edx)
f0106546:	eb 19                	jmp    f0106561 <initialize_paging+0x186>
f0106548:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f010654e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106551:	89 d0                	mov    %edx,%eax
f0106553:	01 c0                	add    %eax,%eax
f0106555:	01 d0                	add    %edx,%eax
f0106557:	c1 e0 03             	shl    $0x3,%eax
f010655a:	01 c8                	add    %ecx,%eax
f010655c:	a3 5c 1e 6c f0       	mov    %eax,0xf06c1e5c
f0106561:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f0106567:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010656a:	89 d0                	mov    %edx,%eax
f010656c:	01 c0                	add    %eax,%eax
f010656e:	01 d0                	add    %edx,%eax
f0106570:	c1 e0 03             	shl    $0x3,%eax
f0106573:	01 c8                	add    %ecx,%eax
f0106575:	a3 58 1e 6c f0       	mov    %eax,0xf06c1e58
f010657a:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f0106580:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106583:	89 d0                	mov    %edx,%eax
f0106585:	01 c0                	add    %eax,%eax
f0106587:	01 d0                	add    %edx,%eax
f0106589:	c1 e0 03             	shl    $0x3,%eax
f010658c:	01 c8                	add    %ecx,%eax
f010658e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106595:	a1 64 1e 6c f0       	mov    0xf06c1e64,%eax
f010659a:	40                   	inc    %eax
f010659b:	a3 64 1e 6c f0       	mov    %eax,0xf06c1e64
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065a0:	ff 45 f4             	incl   -0xc(%ebp)
f01065a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01065a6:	85 c0                	test   %eax,%eax
f01065a8:	79 05                	jns    f01065af <initialize_paging+0x1d4>
f01065aa:	05 ff 0f 00 00       	add    $0xfff,%eax
f01065af:	c1 f8 0c             	sar    $0xc,%eax
f01065b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01065b5:	0f 8f 00 ff ff ff    	jg     f01064bb <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065bb:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01065c2:	eb 1d                	jmp    f01065e1 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f01065c4:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f01065ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065cd:	89 d0                	mov    %edx,%eax
f01065cf:	01 c0                	add    %eax,%eax
f01065d1:	01 d0                	add    %edx,%eax
f01065d3:	c1 e0 03             	shl    $0x3,%eax
f01065d6:	01 c8                	add    %ecx,%eax
f01065d8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065de:	ff 45 f4             	incl   -0xc(%ebp)
f01065e1:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01065e8:	7e da                	jle    f01065c4 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01065ea:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01065f1:	a1 b4 1e 6c f0       	mov    0xf06c1eb4,%eax
f01065f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01065f9:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106600:	77 14                	ja     f0106616 <initialize_paging+0x23b>
f0106602:	ff 75 e0             	pushl  -0x20(%ebp)
f0106605:	68 f4 54 13 f0       	push   $0xf01354f4
f010660a:	6a 64                	push   $0x64
f010660c:	68 d7 54 13 f0       	push   $0xf01354d7
f0106611:	e8 90 9b ff ff       	call   f01001a6 <_panic>
f0106616:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106619:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010661f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106622:	01 d0                	add    %edx,%eax
f0106624:	48                   	dec    %eax
f0106625:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106628:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010662b:	ba 00 00 00 00       	mov    $0x0,%edx
f0106630:	f7 75 e4             	divl   -0x1c(%ebp)
f0106633:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106636:	29 d0                	sub    %edx,%eax
f0106638:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010663b:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106642:	eb 1d                	jmp    f0106661 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f0106644:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f010664a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010664d:	89 d0                	mov    %edx,%eax
f010664f:	01 c0                	add    %eax,%eax
f0106651:	01 d0                	add    %edx,%eax
f0106653:	c1 e0 03             	shl    $0x3,%eax
f0106656:	01 c8                	add    %ecx,%eax
f0106658:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010665e:	ff 45 f4             	incl   -0xc(%ebp)
f0106661:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106664:	85 c0                	test   %eax,%eax
f0106666:	79 05                	jns    f010666d <initialize_paging+0x292>
f0106668:	05 ff 0f 00 00       	add    $0xfff,%eax
f010666d:	c1 f8 0c             	sar    $0xc,%eax
f0106670:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106673:	7f cf                	jg     f0106644 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106675:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106678:	85 c0                	test   %eax,%eax
f010667a:	79 05                	jns    f0106681 <initialize_paging+0x2a6>
f010667c:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106681:	c1 f8 0c             	sar    $0xc,%eax
f0106684:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106687:	e9 e8 00 00 00       	jmp    f0106774 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f010668c:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f0106692:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106695:	89 d0                	mov    %edx,%eax
f0106697:	01 c0                	add    %eax,%eax
f0106699:	01 d0                	add    %edx,%eax
f010669b:	c1 e0 03             	shl    $0x3,%eax
f010669e:	01 c8                	add    %ecx,%eax
f01066a0:	83 ec 0c             	sub    $0xc,%esp
f01066a3:	50                   	push   %eax
f01066a4:	e8 e6 00 00 00       	call   f010678f <initialize_frame_info>
f01066a9:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01066ac:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f01066b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b5:	89 d0                	mov    %edx,%eax
f01066b7:	01 c0                	add    %eax,%eax
f01066b9:	01 d0                	add    %edx,%eax
f01066bb:	c1 e0 03             	shl    $0x3,%eax
f01066be:	01 c8                	add    %ecx,%eax
f01066c0:	85 c0                	test   %eax,%eax
f01066c2:	75 14                	jne    f01066d8 <initialize_paging+0x2fd>
f01066c4:	83 ec 04             	sub    $0x4,%esp
f01066c7:	68 b4 54 13 f0       	push   $0xf01354b4
f01066cc:	6a 70                	push   $0x70
f01066ce:	68 d7 54 13 f0       	push   $0xf01354d7
f01066d3:	e8 ce 9a ff ff       	call   f01001a6 <_panic>
f01066d8:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f01066de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066e1:	89 d0                	mov    %edx,%eax
f01066e3:	01 c0                	add    %eax,%eax
f01066e5:	01 d0                	add    %edx,%eax
f01066e7:	c1 e0 03             	shl    $0x3,%eax
f01066ea:	01 c8                	add    %ecx,%eax
f01066ec:	8b 15 58 1e 6c f0    	mov    0xf06c1e58,%edx
f01066f2:	89 10                	mov    %edx,(%eax)
f01066f4:	8b 00                	mov    (%eax),%eax
f01066f6:	85 c0                	test   %eax,%eax
f01066f8:	74 1f                	je     f0106719 <initialize_paging+0x33e>
f01066fa:	8b 15 58 1e 6c f0    	mov    0xf06c1e58,%edx
f0106700:	8b 1d 90 1e 6c f0    	mov    0xf06c1e90,%ebx
f0106706:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106709:	89 c8                	mov    %ecx,%eax
f010670b:	01 c0                	add    %eax,%eax
f010670d:	01 c8                	add    %ecx,%eax
f010670f:	c1 e0 03             	shl    $0x3,%eax
f0106712:	01 d8                	add    %ebx,%eax
f0106714:	89 42 04             	mov    %eax,0x4(%edx)
f0106717:	eb 19                	jmp    f0106732 <initialize_paging+0x357>
f0106719:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f010671f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106722:	89 d0                	mov    %edx,%eax
f0106724:	01 c0                	add    %eax,%eax
f0106726:	01 d0                	add    %edx,%eax
f0106728:	c1 e0 03             	shl    $0x3,%eax
f010672b:	01 c8                	add    %ecx,%eax
f010672d:	a3 5c 1e 6c f0       	mov    %eax,0xf06c1e5c
f0106732:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f0106738:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010673b:	89 d0                	mov    %edx,%eax
f010673d:	01 c0                	add    %eax,%eax
f010673f:	01 d0                	add    %edx,%eax
f0106741:	c1 e0 03             	shl    $0x3,%eax
f0106744:	01 c8                	add    %ecx,%eax
f0106746:	a3 58 1e 6c f0       	mov    %eax,0xf06c1e58
f010674b:	8b 0d 90 1e 6c f0    	mov    0xf06c1e90,%ecx
f0106751:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106754:	89 d0                	mov    %edx,%eax
f0106756:	01 c0                	add    %eax,%eax
f0106758:	01 d0                	add    %edx,%eax
f010675a:	c1 e0 03             	shl    $0x3,%eax
f010675d:	01 c8                	add    %ecx,%eax
f010675f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106766:	a1 64 1e 6c f0       	mov    0xf06c1e64,%eax
f010676b:	40                   	inc    %eax
f010676c:	a3 64 1e 6c f0       	mov    %eax,0xf06c1e64
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106771:	ff 45 f4             	incl   -0xc(%ebp)
f0106774:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106777:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f010677c:	39 c2                	cmp    %eax,%edx
f010677e:	0f 82 08 ff ff ff    	jb     f010668c <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0106784:	e8 2d c8 ff ff       	call   f0102fb6 <initialize_disk_page_file>
}
f0106789:	90                   	nop
f010678a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010678d:	c9                   	leave  
f010678e:	c3                   	ret    

f010678f <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010678f:	55                   	push   %ebp
f0106790:	89 e5                	mov    %esp,%ebp
f0106792:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106795:	83 ec 04             	sub    $0x4,%esp
f0106798:	6a 18                	push   $0x18
f010679a:	6a 00                	push   $0x0
f010679c:	ff 75 08             	pushl  0x8(%ebp)
f010679f:	e8 9f a2 02 00       	call   f0130a43 <memset>
f01067a4:	83 c4 10             	add    $0x10,%esp
}
f01067a7:	90                   	nop
f01067a8:	c9                   	leave  
f01067a9:	c3                   	ret    

f01067aa <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01067aa:	55                   	push   %ebp
f01067ab:	89 e5                	mov    %esp,%ebp
f01067ad:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01067b0:	8b 15 58 1e 6c f0    	mov    0xf06c1e58,%edx
f01067b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01067b9:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01067bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01067c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067c5:	8b 00                	mov    (%eax),%eax
f01067c7:	85 c0                	test   %eax,%eax
f01067c9:	75 17                	jne    f01067e2 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01067cb:	83 ec 04             	sub    $0x4,%esp
f01067ce:	68 28 55 13 f0       	push   $0xf0135528
f01067d3:	68 99 00 00 00       	push   $0x99
f01067d8:	68 d7 54 13 f0       	push   $0xf01354d7
f01067dd:	e8 c4 99 ff ff       	call   f01001a6 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01067e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067e5:	8b 00                	mov    (%eax),%eax
f01067e7:	85 c0                	test   %eax,%eax
f01067e9:	75 17                	jne    f0106802 <allocate_frame+0x58>
f01067eb:	83 ec 04             	sub    $0x4,%esp
f01067ee:	68 75 55 13 f0       	push   $0xf0135575
f01067f3:	68 9c 00 00 00       	push   $0x9c
f01067f8:	68 d7 54 13 f0       	push   $0xf01354d7
f01067fd:	e8 a4 99 ff ff       	call   f01001a6 <_panic>
f0106802:	8b 45 08             	mov    0x8(%ebp),%eax
f0106805:	8b 00                	mov    (%eax),%eax
f0106807:	8b 00                	mov    (%eax),%eax
f0106809:	85 c0                	test   %eax,%eax
f010680b:	74 14                	je     f0106821 <allocate_frame+0x77>
f010680d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106810:	8b 00                	mov    (%eax),%eax
f0106812:	8b 00                	mov    (%eax),%eax
f0106814:	8b 55 08             	mov    0x8(%ebp),%edx
f0106817:	8b 12                	mov    (%edx),%edx
f0106819:	8b 52 04             	mov    0x4(%edx),%edx
f010681c:	89 50 04             	mov    %edx,0x4(%eax)
f010681f:	eb 0d                	jmp    f010682e <allocate_frame+0x84>
f0106821:	8b 45 08             	mov    0x8(%ebp),%eax
f0106824:	8b 00                	mov    (%eax),%eax
f0106826:	8b 40 04             	mov    0x4(%eax),%eax
f0106829:	a3 5c 1e 6c f0       	mov    %eax,0xf06c1e5c
f010682e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106831:	8b 00                	mov    (%eax),%eax
f0106833:	8b 40 04             	mov    0x4(%eax),%eax
f0106836:	85 c0                	test   %eax,%eax
f0106838:	74 13                	je     f010684d <allocate_frame+0xa3>
f010683a:	8b 45 08             	mov    0x8(%ebp),%eax
f010683d:	8b 00                	mov    (%eax),%eax
f010683f:	8b 40 04             	mov    0x4(%eax),%eax
f0106842:	8b 55 08             	mov    0x8(%ebp),%edx
f0106845:	8b 12                	mov    (%edx),%edx
f0106847:	8b 12                	mov    (%edx),%edx
f0106849:	89 10                	mov    %edx,(%eax)
f010684b:	eb 0c                	jmp    f0106859 <allocate_frame+0xaf>
f010684d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106850:	8b 00                	mov    (%eax),%eax
f0106852:	8b 00                	mov    (%eax),%eax
f0106854:	a3 58 1e 6c f0       	mov    %eax,0xf06c1e58
f0106859:	8b 45 08             	mov    0x8(%ebp),%eax
f010685c:	8b 00                	mov    (%eax),%eax
f010685e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106864:	8b 45 08             	mov    0x8(%ebp),%eax
f0106867:	8b 00                	mov    (%eax),%eax
f0106869:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106870:	a1 64 1e 6c f0       	mov    0xf06c1e64,%eax
f0106875:	48                   	dec    %eax
f0106876:	a3 64 1e 6c f0       	mov    %eax,0xf06c1e64

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f010687b:	8b 45 08             	mov    0x8(%ebp),%eax
f010687e:	8b 00                	mov    (%eax),%eax
f0106880:	8a 40 14             	mov    0x14(%eax),%al
f0106883:	84 c0                	test   %al,%al
f0106885:	74 20                	je     f01068a7 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0106887:	8b 45 08             	mov    0x8(%ebp),%eax
f010688a:	8b 00                	mov    (%eax),%eax
f010688c:	8b 50 0c             	mov    0xc(%eax),%edx
f010688f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106892:	8b 00                	mov    (%eax),%eax
f0106894:	8b 40 10             	mov    0x10(%eax),%eax
f0106897:	8b 40 5c             	mov    0x5c(%eax),%eax
f010689a:	83 ec 08             	sub    $0x8,%esp
f010689d:	52                   	push   %edx
f010689e:	50                   	push   %eax
f010689f:	e8 5f 0f 00 00       	call   f0107803 <pt_clear_page_table_entry>
f01068a4:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01068a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01068aa:	8b 00                	mov    (%eax),%eax
f01068ac:	83 ec 0c             	sub    $0xc,%esp
f01068af:	50                   	push   %eax
f01068b0:	e8 da fe ff ff       	call   f010678f <initialize_frame_info>
f01068b5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01068b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01068bd:	c9                   	leave  
f01068be:	c3                   	ret    

f01068bf <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01068bf:	55                   	push   %ebp
f01068c0:	89 e5                	mov    %esp,%ebp
f01068c2:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01068c5:	83 ec 0c             	sub    $0xc,%esp
f01068c8:	ff 75 08             	pushl  0x8(%ebp)
f01068cb:	e8 bf fe ff ff       	call   f010678f <initialize_frame_info>
f01068d0:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01068d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01068d7:	75 17                	jne    f01068f0 <free_frame+0x31>
f01068d9:	83 ec 04             	sub    $0x4,%esp
f01068dc:	68 b4 54 13 f0       	push   $0xf01354b4
f01068e1:	68 b9 00 00 00       	push   $0xb9
f01068e6:	68 d7 54 13 f0       	push   $0xf01354d7
f01068eb:	e8 b6 98 ff ff       	call   f01001a6 <_panic>
f01068f0:	8b 15 58 1e 6c f0    	mov    0xf06c1e58,%edx
f01068f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01068f9:	89 10                	mov    %edx,(%eax)
f01068fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fe:	8b 00                	mov    (%eax),%eax
f0106900:	85 c0                	test   %eax,%eax
f0106902:	74 0d                	je     f0106911 <free_frame+0x52>
f0106904:	a1 58 1e 6c f0       	mov    0xf06c1e58,%eax
f0106909:	8b 55 08             	mov    0x8(%ebp),%edx
f010690c:	89 50 04             	mov    %edx,0x4(%eax)
f010690f:	eb 08                	jmp    f0106919 <free_frame+0x5a>
f0106911:	8b 45 08             	mov    0x8(%ebp),%eax
f0106914:	a3 5c 1e 6c f0       	mov    %eax,0xf06c1e5c
f0106919:	8b 45 08             	mov    0x8(%ebp),%eax
f010691c:	a3 58 1e 6c f0       	mov    %eax,0xf06c1e58
f0106921:	8b 45 08             	mov    0x8(%ebp),%eax
f0106924:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010692b:	a1 64 1e 6c f0       	mov    0xf06c1e64,%eax
f0106930:	40                   	inc    %eax
f0106931:	a3 64 1e 6c f0       	mov    %eax,0xf06c1e64
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106936:	90                   	nop
f0106937:	c9                   	leave  
f0106938:	c3                   	ret    

f0106939 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106939:	55                   	push   %ebp
f010693a:	89 e5                	mov    %esp,%ebp
f010693c:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f010693f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106942:	8b 40 08             	mov    0x8(%eax),%eax
f0106945:	48                   	dec    %eax
f0106946:	8b 55 08             	mov    0x8(%ebp),%edx
f0106949:	66 89 42 08          	mov    %ax,0x8(%edx)
f010694d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106950:	8b 40 08             	mov    0x8(%eax),%eax
f0106953:	66 85 c0             	test   %ax,%ax
f0106956:	75 0e                	jne    f0106966 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106958:	83 ec 0c             	sub    $0xc,%esp
f010695b:	ff 75 08             	pushl  0x8(%ebp)
f010695e:	e8 5c ff ff ff       	call   f01068bf <free_frame>
f0106963:	83 c4 10             	add    $0x10,%esp
}
f0106966:	90                   	nop
f0106967:	c9                   	leave  
f0106968:	c3                   	ret    

f0106969 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106969:	55                   	push   %ebp
f010696a:	89 e5                	mov    %esp,%ebp
f010696c:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010696f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106972:	c1 e8 16             	shr    $0x16,%eax
f0106975:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010697c:	8b 45 08             	mov    0x8(%ebp),%eax
f010697f:	01 d0                	add    %edx,%eax
f0106981:	8b 00                	mov    (%eax),%eax
f0106983:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106986:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106989:	83 e0 01             	and    $0x1,%eax
f010698c:	85 c0                	test   %eax,%eax
f010698e:	74 4e                	je     f01069de <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106993:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106998:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010699b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010699e:	c1 e8 0c             	shr    $0xc,%eax
f01069a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01069a4:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f01069a9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01069ac:	72 17                	jb     f01069c5 <get_page_table+0x5c>
f01069ae:	ff 75 f0             	pushl  -0x10(%ebp)
f01069b1:	68 94 55 13 f0       	push   $0xf0135594
f01069b6:	68 e2 00 00 00       	push   $0xe2
f01069bb:	68 d7 54 13 f0       	push   $0xf01354d7
f01069c0:	e8 e1 97 ff ff       	call   f01001a6 <_panic>
f01069c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069c8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01069cd:	89 c2                	mov    %eax,%edx
f01069cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01069d2:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f01069d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01069d9:	e9 8f 00 00 00       	jmp    f0106a6d <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01069de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069e2:	74 7b                	je     f0106a5f <get_page_table+0xf6>
f01069e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e7:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f01069ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069ed:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f01069f0:	83 ec 0c             	sub    $0xc,%esp
f01069f3:	6a 00                	push   $0x0
f01069f5:	e8 95 56 00 00       	call   f010c08f <fault_handler>
f01069fa:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a00:	c1 e8 16             	shr    $0x16,%eax
f0106a03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a0d:	01 d0                	add    %edx,%eax
f0106a0f:	8b 00                	mov    (%eax),%eax
f0106a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a22:	c1 e8 0c             	shr    $0xc,%eax
f0106a25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a28:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0106a2d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106a30:	72 17                	jb     f0106a49 <get_page_table+0xe0>
f0106a32:	ff 75 e8             	pushl  -0x18(%ebp)
f0106a35:	68 94 55 13 f0       	push   $0xf0135594
f0106a3a:	68 fa 00 00 00       	push   $0xfa
f0106a3f:	68 d7 54 13 f0       	push   $0xf01354d7
f0106a44:	e8 5d 97 ff ff       	call   f01001a6 <_panic>
f0106a49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a4c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a51:	89 c2                	mov    %eax,%edx
f0106a53:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a56:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106a58:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a5d:	eb 0e                	jmp    f0106a6d <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106a5f:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106a68:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106a6d:	c9                   	leave  
f0106a6e:	c3                   	ret    

f0106a6f <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106a6f:	55                   	push   %ebp
f0106a70:	89 e5                	mov    %esp,%ebp
f0106a72:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0106a75:	83 ec 04             	sub    $0x4,%esp
f0106a78:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106a7b:	50                   	push   %eax
f0106a7c:	ff 75 0c             	pushl  0xc(%ebp)
f0106a7f:	ff 75 08             	pushl  0x8(%ebp)
f0106a82:	e8 08 00 00 00       	call   f0106a8f <__static_cpt>
f0106a87:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0106a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106a8d:	c9                   	leave  
f0106a8e:	c3                   	ret    

f0106a8f <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a8f:	55                   	push   %ebp
f0106a90:	89 e5                	mov    %esp,%ebp
f0106a92:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106a95:	83 ec 0c             	sub    $0xc,%esp
f0106a98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106a9b:	50                   	push   %eax
f0106a9c:	e8 09 fd ff ff       	call   f01067aa <allocate_frame>
f0106aa1:	83 c4 10             	add    $0x10,%esp
f0106aa4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106aa7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aaa:	83 ec 0c             	sub    $0xc,%esp
f0106aad:	50                   	push   %eax
f0106aae:	e8 ba f8 ff ff       	call   f010636d <to_physical_address>
f0106ab3:	83 c4 10             	add    $0x10,%esp
f0106ab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106abc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ac2:	c1 e8 0c             	shr    $0xc,%eax
f0106ac5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ac8:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0106acd:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ad0:	72 17                	jb     f0106ae9 <__static_cpt+0x5a>
f0106ad2:	ff 75 ec             	pushl  -0x14(%ebp)
f0106ad5:	68 94 55 13 f0       	push   $0xf0135594
f0106ada:	68 30 01 00 00       	push   $0x130
f0106adf:	68 d7 54 13 f0       	push   $0xf01354d7
f0106ae4:	e8 bd 96 ff ff       	call   f01001a6 <_panic>
f0106ae9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106aec:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106af1:	89 c2                	mov    %eax,%edx
f0106af3:	8b 45 10             	mov    0x10(%ebp),%eax
f0106af6:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106af8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106afb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106b01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b04:	c1 e8 16             	shr    $0x16,%eax
f0106b07:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b11:	01 d0                	add    %edx,%eax
f0106b13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106b16:	83 ca 07             	or     $0x7,%edx
f0106b19:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106b1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b1e:	8b 00                	mov    (%eax),%eax
f0106b20:	83 ec 04             	sub    $0x4,%esp
f0106b23:	68 00 10 00 00       	push   $0x1000
f0106b28:	6a 00                	push   $0x0
f0106b2a:	50                   	push   %eax
f0106b2b:	e8 13 9f 02 00       	call   f0130a43 <memset>
f0106b30:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106b33:	0f 20 d8             	mov    %cr3,%eax
f0106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106b39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b3c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106b3f:	90                   	nop
f0106b40:	c9                   	leave  
f0106b41:	c3                   	ret    

f0106b42 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106b42:	55                   	push   %ebp
f0106b43:	89 e5                	mov    %esp,%ebp
f0106b45:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106b48:	ff 75 0c             	pushl  0xc(%ebp)
f0106b4b:	e8 1d f8 ff ff       	call   f010636d <to_physical_address>
f0106b50:	83 c4 04             	add    $0x4,%esp
f0106b53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106b56:	83 ec 04             	sub    $0x4,%esp
f0106b59:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b5c:	50                   	push   %eax
f0106b5d:	ff 75 10             	pushl  0x10(%ebp)
f0106b60:	ff 75 08             	pushl  0x8(%ebp)
f0106b63:	e8 01 fe ff ff       	call   f0106969 <get_page_table>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	83 f8 01             	cmp    $0x1,%eax
f0106b6e:	75 15                	jne    f0106b85 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0106b70:	83 ec 04             	sub    $0x4,%esp
f0106b73:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b76:	50                   	push   %eax
f0106b77:	ff 75 10             	pushl  0x10(%ebp)
f0106b7a:	ff 75 08             	pushl  0x8(%ebp)
f0106b7d:	e8 0d ff ff ff       	call   f0106a8f <__static_cpt>
f0106b82:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106b85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b88:	8b 55 10             	mov    0x10(%ebp),%edx
f0106b8b:	c1 ea 0c             	shr    $0xc,%edx
f0106b8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106b94:	c1 e2 02             	shl    $0x2,%edx
f0106b97:	01 d0                	add    %edx,%eax
f0106b99:	8b 00                	mov    (%eax),%eax
f0106b9b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ba1:	83 e0 01             	and    $0x1,%eax
f0106ba4:	85 c0                	test   %eax,%eax
f0106ba6:	74 25                	je     f0106bcd <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106bb3:	75 07                	jne    f0106bbc <map_frame+0x7a>
			return 0;
f0106bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bba:	eb 43                	jmp    f0106bff <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106bbc:	83 ec 08             	sub    $0x8,%esp
f0106bbf:	ff 75 10             	pushl  0x10(%ebp)
f0106bc2:	ff 75 08             	pushl  0x8(%ebp)
f0106bc5:	e8 a7 00 00 00       	call   f0106c71 <unmap_frame>
f0106bca:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106bd0:	8b 40 08             	mov    0x8(%eax),%eax
f0106bd3:	40                   	inc    %eax
f0106bd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106bd7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106bdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bde:	8b 55 10             	mov    0x10(%ebp),%edx
f0106be1:	c1 ea 0c             	shr    $0xc,%edx
f0106be4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106bea:	c1 e2 02             	shl    $0x2,%edx
f0106bed:	01 c2                	add    %eax,%edx
f0106bef:	8b 45 14             	mov    0x14(%ebp),%eax
f0106bf2:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106bf5:	83 c8 01             	or     $0x1,%eax
f0106bf8:	89 02                	mov    %eax,(%edx)

	return 0;
f0106bfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106bff:	c9                   	leave  
f0106c00:	c3                   	ret    

f0106c01 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c01:	55                   	push   %ebp
f0106c02:	89 e5                	mov    %esp,%ebp
f0106c04:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106c07:	83 ec 04             	sub    $0x4,%esp
f0106c0a:	ff 75 10             	pushl  0x10(%ebp)
f0106c0d:	ff 75 0c             	pushl  0xc(%ebp)
f0106c10:	ff 75 08             	pushl  0x8(%ebp)
f0106c13:	e8 51 fd ff ff       	call   f0106969 <get_page_table>
f0106c18:	83 c4 10             	add    $0x10,%esp
f0106c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106c1e:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c21:	8b 00                	mov    (%eax),%eax
f0106c23:	85 c0                	test   %eax,%eax
f0106c25:	74 43                	je     f0106c6a <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106c27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2a:	c1 e8 0c             	shr    $0xc,%eax
f0106c2d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106c32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106c35:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c38:	8b 00                	mov    (%eax),%eax
f0106c3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3d:	c1 e2 02             	shl    $0x2,%edx
f0106c40:	01 d0                	add    %edx,%eax
f0106c42:	8b 00                	mov    (%eax),%eax
f0106c44:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106c47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4b:	74 16                	je     f0106c63 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106c55:	83 ec 0c             	sub    $0xc,%esp
f0106c58:	50                   	push   %eax
f0106c59:	e8 22 f7 ff ff       	call   f0106380 <to_frame_info>
f0106c5e:	83 c4 10             	add    $0x10,%esp
f0106c61:	eb 0c                	jmp    f0106c6f <get_frame_info+0x6e>
		}
		return 0;
f0106c63:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c68:	eb 05                	jmp    f0106c6f <get_frame_info+0x6e>
	}
	return 0;
f0106c6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106c6f:	c9                   	leave  
f0106c70:	c3                   	ret    

f0106c71 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106c71:	55                   	push   %ebp
f0106c72:	89 e5                	mov    %esp,%ebp
f0106c74:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106c77:	83 ec 04             	sub    $0x4,%esp
f0106c7a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106c7d:	50                   	push   %eax
f0106c7e:	ff 75 0c             	pushl  0xc(%ebp)
f0106c81:	ff 75 08             	pushl  0x8(%ebp)
f0106c84:	e8 78 ff ff ff       	call   f0106c01 <get_frame_info>
f0106c89:	83 c4 10             	add    $0x10,%esp
f0106c8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106c8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c93:	74 60                	je     f0106cf5 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c98:	8a 40 14             	mov    0x14(%eax),%al
f0106c9b:	84 c0                	test   %al,%al
f0106c9d:	74 1c                	je     f0106cbb <unmap_frame+0x4a>
f0106c9f:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ca6:	77 13                	ja     f0106cbb <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ca8:	83 ec 08             	sub    $0x8,%esp
f0106cab:	ff 75 0c             	pushl  0xc(%ebp)
f0106cae:	68 c4 55 13 f0       	push   $0xf01355c4
f0106cb3:	e8 75 9f ff ff       	call   f0100c2d <cprintf>
f0106cb8:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106cbb:	83 ec 0c             	sub    $0xc,%esp
f0106cbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0106cc1:	e8 73 fc ff ff       	call   f0106939 <decrement_references>
f0106cc6:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ccc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ccf:	c1 ea 0c             	shr    $0xc,%edx
f0106cd2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cd8:	c1 e2 02             	shl    $0x2,%edx
f0106cdb:	01 d0                	add    %edx,%eax
f0106cdd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ce3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ce6:	83 ec 08             	sub    $0x8,%esp
f0106ce9:	50                   	push   %eax
f0106cea:	ff 75 08             	pushl  0x8(%ebp)
f0106ced:	e8 d4 f6 ff ff       	call   f01063c6 <tlb_invalidate>
f0106cf2:	83 c4 10             	add    $0x10,%esp
	}
}
f0106cf5:	90                   	nop
f0106cf6:	c9                   	leave  
f0106cf7:	c3                   	ret    

f0106cf8 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106cf8:	55                   	push   %ebp
f0106cf9:	89 e5                	mov    %esp,%ebp
f0106cfb:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106cfe:	ff 75 0c             	pushl  0xc(%ebp)
f0106d01:	e8 67 f6 ff ff       	call   f010636d <to_physical_address>
f0106d06:	83 c4 04             	add    $0x4,%esp
f0106d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106d0c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d0f:	c1 e8 16             	shr    $0x16,%eax
f0106d12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d1c:	01 d0                	add    %edx,%eax
f0106d1e:	8b 00                	mov    (%eax),%eax
f0106d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106d26:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106d2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d31:	c1 e8 0c             	shr    $0xc,%eax
f0106d34:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106d37:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0106d3c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106d3f:	72 17                	jb     f0106d58 <loadtime_map_frame+0x60>
f0106d41:	ff 75 ec             	pushl  -0x14(%ebp)
f0106d44:	68 94 55 13 f0       	push   $0xf0135594
f0106d49:	68 e6 01 00 00       	push   $0x1e6
f0106d4e:	68 d7 54 13 f0       	push   $0xf01354d7
f0106d53:	e8 4e 94 ff ff       	call   f01001a6 <_panic>
f0106d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d5b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106d60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106d63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106d67:	75 15                	jne    f0106d7e <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0106d69:	83 ec 04             	sub    $0x4,%esp
f0106d6c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0106d6f:	50                   	push   %eax
f0106d70:	ff 75 10             	pushl  0x10(%ebp)
f0106d73:	ff 75 08             	pushl  0x8(%ebp)
f0106d76:	e8 14 fd ff ff       	call   f0106a8f <__static_cpt>
f0106d7b:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0106d7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d81:	8b 40 08             	mov    0x8(%eax),%eax
f0106d84:	40                   	inc    %eax
f0106d85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d88:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d8f:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d92:	c1 ea 0c             	shr    $0xc,%edx
f0106d95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d9b:	c1 e2 02             	shl    $0x2,%edx
f0106d9e:	01 c2                	add    %eax,%edx
f0106da0:	8b 45 14             	mov    0x14(%ebp),%eax
f0106da3:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106da6:	83 c8 01             	or     $0x1,%eax
f0106da9:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106db0:	c9                   	leave  
f0106db1:	c3                   	ret    

f0106db2 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106db2:	55                   	push   %ebp
f0106db3:	89 e5                	mov    %esp,%ebp
f0106db5:	57                   	push   %edi
f0106db6:	56                   	push   %esi
f0106db7:	53                   	push   %ebx
f0106db8:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106dbb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106dc2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106dc9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106dd0:	a1 58 1e 6c f0       	mov    0xf06c1e58,%eax
f0106dd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106dd8:	eb 1a                	jmp    f0106df4 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ddd:	8a 40 14             	mov    0x14(%eax),%al
f0106de0:	84 c0                	test   %al,%al
f0106de2:	74 05                	je     f0106de9 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106de4:	ff 45 e8             	incl   -0x18(%ebp)
f0106de7:	eb 03                	jmp    f0106dec <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106de9:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106dec:	a1 60 1e 6c f0       	mov    0xf06c1e60,%eax
f0106df1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106df4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106df8:	74 07                	je     f0106e01 <calculate_available_frames+0x4f>
f0106dfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfd:	8b 00                	mov    (%eax),%eax
f0106dff:	eb 05                	jmp    f0106e06 <calculate_available_frames+0x54>
f0106e01:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e06:	a3 60 1e 6c f0       	mov    %eax,0xf06c1e60
f0106e0b:	a1 60 1e 6c f0       	mov    0xf06c1e60,%eax
f0106e10:	85 c0                	test   %eax,%eax
f0106e12:	75 c6                	jne    f0106dda <calculate_available_frames+0x28>
f0106e14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e18:	75 c0                	jne    f0106dda <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e1a:	a1 c0 9a 65 f0       	mov    0xf0659ac0,%eax
f0106e1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e22:	eb 0b                	jmp    f0106e2f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106e24:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e27:	a1 c8 9a 65 f0       	mov    0xf0659ac8,%eax
f0106e2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e33:	74 07                	je     f0106e3c <calculate_available_frames+0x8a>
f0106e35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e38:	8b 00                	mov    (%eax),%eax
f0106e3a:	eb 05                	jmp    f0106e41 <calculate_available_frames+0x8f>
f0106e3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e41:	a3 c8 9a 65 f0       	mov    %eax,0xf0659ac8
f0106e46:	a1 c8 9a 65 f0       	mov    0xf0659ac8,%eax
f0106e4b:	85 c0                	test   %eax,%eax
f0106e4d:	75 d5                	jne    f0106e24 <calculate_available_frames+0x72>
f0106e4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e53:	75 cf                	jne    f0106e24 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106e55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e58:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106e5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106e61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106e64:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e6a:	89 c3                	mov    %eax,%ebx
f0106e6c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106e6f:	ba 03 00 00 00       	mov    $0x3,%edx
f0106e74:	89 df                	mov    %ebx,%edi
f0106e76:	89 c6                	mov    %eax,%esi
f0106e78:	89 d1                	mov    %edx,%ecx
f0106e7a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106e7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e7f:	83 c4 20             	add    $0x20,%esp
f0106e82:	5b                   	pop    %ebx
f0106e83:	5e                   	pop    %esi
f0106e84:	5f                   	pop    %edi
f0106e85:	5d                   	pop    %ebp
f0106e86:	c2 04 00             	ret    $0x4

f0106e89 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e89:	55                   	push   %ebp
f0106e8a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e8f:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f0106e95:	29 d0                	sub    %edx,%eax
f0106e97:	c1 f8 03             	sar    $0x3,%eax
f0106e9a:	89 c2                	mov    %eax,%edx
f0106e9c:	89 d0                	mov    %edx,%eax
f0106e9e:	c1 e0 02             	shl    $0x2,%eax
f0106ea1:	01 d0                	add    %edx,%eax
f0106ea3:	c1 e0 02             	shl    $0x2,%eax
f0106ea6:	01 d0                	add    %edx,%eax
f0106ea8:	c1 e0 02             	shl    $0x2,%eax
f0106eab:	01 d0                	add    %edx,%eax
f0106ead:	89 c1                	mov    %eax,%ecx
f0106eaf:	c1 e1 08             	shl    $0x8,%ecx
f0106eb2:	01 c8                	add    %ecx,%eax
f0106eb4:	89 c1                	mov    %eax,%ecx
f0106eb6:	c1 e1 10             	shl    $0x10,%ecx
f0106eb9:	01 c8                	add    %ecx,%eax
f0106ebb:	01 c0                	add    %eax,%eax
f0106ebd:	01 d0                	add    %edx,%eax
}
f0106ebf:	5d                   	pop    %ebp
f0106ec0:	c3                   	ret    

f0106ec1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106ec1:	55                   	push   %ebp
f0106ec2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106ec4:	ff 75 08             	pushl  0x8(%ebp)
f0106ec7:	e8 bd ff ff ff       	call   f0106e89 <to_frame_number>
f0106ecc:	83 c4 04             	add    $0x4,%esp
f0106ecf:	c1 e0 0c             	shl    $0xc,%eax
}
f0106ed2:	c9                   	leave  
f0106ed3:	c3                   	ret    

f0106ed4 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106ed4:	55                   	push   %ebp
f0106ed5:	89 e5                	mov    %esp,%ebp
f0106ed7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0106edd:	c1 e8 0c             	shr    $0xc,%eax
f0106ee0:	89 c2                	mov    %eax,%edx
f0106ee2:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0106ee7:	39 c2                	cmp    %eax,%edx
f0106ee9:	72 14                	jb     f0106eff <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106eeb:	83 ec 04             	sub    $0x4,%esp
f0106eee:	68 e8 55 13 f0       	push   $0xf01355e8
f0106ef3:	6a 55                	push   $0x55
f0106ef5:	68 0d 56 13 f0       	push   $0xf013560d
f0106efa:	e8 a7 92 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0106eff:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f0106f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f08:	c1 e8 0c             	shr    $0xc,%eax
f0106f0b:	89 c1                	mov    %eax,%ecx
f0106f0d:	89 c8                	mov    %ecx,%eax
f0106f0f:	01 c0                	add    %eax,%eax
f0106f11:	01 c8                	add    %ecx,%eax
f0106f13:	c1 e0 03             	shl    $0x3,%eax
f0106f16:	01 d0                	add    %edx,%eax
}
f0106f18:	c9                   	leave  
f0106f19:	c3                   	ret    

f0106f1a <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0106f1a:	55                   	push   %ebp
f0106f1b:	89 e5                	mov    %esp,%ebp
f0106f1d:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106f27:	eb 5f                	jmp    f0106f88 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0106f29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f2c:	89 d0                	mov    %edx,%eax
f0106f2e:	01 c0                	add    %eax,%eax
f0106f30:	01 d0                	add    %edx,%eax
f0106f32:	01 c0                	add    %eax,%eax
f0106f34:	01 d0                	add    %edx,%eax
f0106f36:	c1 e0 02             	shl    $0x2,%eax
f0106f39:	01 d0                	add    %edx,%eax
f0106f3b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f42:	01 d0                	add    %edx,%eax
f0106f44:	c1 e0 04             	shl    $0x4,%eax
f0106f47:	05 00 9b 65 f0       	add    $0xf0659b00,%eax
f0106f4c:	83 ec 04             	sub    $0x4,%esp
f0106f4f:	68 50 10 00 00       	push   $0x1050
f0106f54:	6a 00                	push   $0x0
f0106f56:	50                   	push   %eax
f0106f57:	e8 e7 9a 02 00       	call   f0130a43 <memset>
f0106f5c:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0106f5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f62:	89 d0                	mov    %edx,%eax
f0106f64:	01 c0                	add    %eax,%eax
f0106f66:	01 d0                	add    %edx,%eax
f0106f68:	01 c0                	add    %eax,%eax
f0106f6a:	01 d0                	add    %edx,%eax
f0106f6c:	c1 e0 02             	shl    $0x2,%eax
f0106f6f:	01 d0                	add    %edx,%eax
f0106f71:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f78:	01 d0                	add    %edx,%eax
f0106f7a:	c1 e0 04             	shl    $0x4,%eax
f0106f7d:	05 4d 9b 65 f0       	add    $0xf0659b4d,%eax
f0106f82:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f85:	ff 45 f4             	incl   -0xc(%ebp)
f0106f88:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0106f8c:	7e 9b                	jle    f0106f29 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0106f8e:	90                   	nop
f0106f8f:	c9                   	leave  
f0106f90:	c3                   	ret    

f0106f91 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0106f91:	55                   	push   %ebp
f0106f92:	89 e5                	mov    %esp,%ebp
f0106f94:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0106f97:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106fa5:	eb 34                	jmp    f0106fdb <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0106fa7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106faa:	89 d0                	mov    %edx,%eax
f0106fac:	01 c0                	add    %eax,%eax
f0106fae:	01 d0                	add    %edx,%eax
f0106fb0:	01 c0                	add    %eax,%eax
f0106fb2:	01 d0                	add    %edx,%eax
f0106fb4:	c1 e0 02             	shl    $0x2,%eax
f0106fb7:	01 d0                	add    %edx,%eax
f0106fb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106fc0:	01 d0                	add    %edx,%eax
f0106fc2:	c1 e0 04             	shl    $0x4,%eax
f0106fc5:	05 4d 9b 65 f0       	add    $0xf0659b4d,%eax
f0106fca:	8a 00                	mov    (%eax),%al
f0106fcc:	84 c0                	test   %al,%al
f0106fce:	74 08                	je     f0106fd8 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0106fd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0106fd6:	eb 09                	jmp    f0106fe1 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0106fd8:	ff 45 f0             	incl   -0x10(%ebp)
f0106fdb:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0106fdf:	7e c6                	jle    f0106fa7 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0106fe1:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0106fe5:	75 14                	jne    f0106ffb <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f0106fe7:	83 ec 04             	sub    $0x4,%esp
f0106fea:	68 28 56 13 f0       	push   $0xf0135628
f0106fef:	6a 54                	push   $0x54
f0106ff1:	68 78 56 13 f0       	push   $0xf0135678
f0106ff6:	e8 ab 91 ff ff       	call   f01001a6 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0106ffb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ffe:	89 d0                	mov    %edx,%eax
f0107000:	01 c0                	add    %eax,%eax
f0107002:	01 d0                	add    %edx,%eax
f0107004:	01 c0                	add    %eax,%eax
f0107006:	01 d0                	add    %edx,%eax
f0107008:	c1 e0 02             	shl    $0x2,%eax
f010700b:	01 d0                	add    %edx,%eax
f010700d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107014:	01 d0                	add    %edx,%eax
f0107016:	c1 e0 04             	shl    $0x4,%eax
f0107019:	8d 90 00 9b 65 f0    	lea    -0xf9a6500(%eax),%edx
f010701f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107022:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107024:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107027:	89 d0                	mov    %edx,%eax
f0107029:	01 c0                	add    %eax,%eax
f010702b:	01 d0                	add    %edx,%eax
f010702d:	01 c0                	add    %eax,%eax
f010702f:	01 d0                	add    %edx,%eax
f0107031:	c1 e0 02             	shl    $0x2,%eax
f0107034:	01 d0                	add    %edx,%eax
f0107036:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010703d:	01 d0                	add    %edx,%eax
f010703f:	c1 e0 04             	shl    $0x4,%eax
f0107042:	05 4d 9b 65 f0       	add    $0xf0659b4d,%eax
f0107047:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010704a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010704d:	89 d0                	mov    %edx,%eax
f010704f:	01 c0                	add    %eax,%eax
f0107051:	01 d0                	add    %edx,%eax
f0107053:	01 c0                	add    %eax,%eax
f0107055:	01 d0                	add    %edx,%eax
f0107057:	c1 e0 02             	shl    $0x2,%eax
f010705a:	01 d0                	add    %edx,%eax
f010705c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107063:	01 d0                	add    %edx,%eax
f0107065:	c1 e0 04             	shl    $0x4,%eax
f0107068:	83 c0 50             	add    $0x50,%eax
f010706b:	05 00 9b 65 f0       	add    $0xf0659b00,%eax
f0107070:	83 ec 04             	sub    $0x4,%esp
f0107073:	68 00 10 00 00       	push   $0x1000
f0107078:	6a 00                	push   $0x0
f010707a:	50                   	push   %eax
f010707b:	e8 c3 99 02 00       	call   f0130a43 <memset>
f0107080:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107083:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107086:	c9                   	leave  
f0107087:	c3                   	ret    

f0107088 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107088:	55                   	push   %ebp
f0107089:	89 e5                	mov    %esp,%ebp
f010708b:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010708e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107095:	e9 95 00 00 00       	jmp    f010712f <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010709a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010709d:	89 d0                	mov    %edx,%eax
f010709f:	01 c0                	add    %eax,%eax
f01070a1:	01 d0                	add    %edx,%eax
f01070a3:	01 c0                	add    %eax,%eax
f01070a5:	01 d0                	add    %edx,%eax
f01070a7:	c1 e0 02             	shl    $0x2,%eax
f01070aa:	01 d0                	add    %edx,%eax
f01070ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070b3:	01 d0                	add    %edx,%eax
f01070b5:	c1 e0 04             	shl    $0x4,%eax
f01070b8:	05 4d 9b 65 f0       	add    $0xf0659b4d,%eax
f01070bd:	8a 00                	mov    (%eax),%al
f01070bf:	84 c0                	test   %al,%al
f01070c1:	75 68                	jne    f010712b <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01070c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070c6:	89 d0                	mov    %edx,%eax
f01070c8:	01 c0                	add    %eax,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	01 c0                	add    %eax,%eax
f01070ce:	01 d0                	add    %edx,%eax
f01070d0:	c1 e0 02             	shl    $0x2,%eax
f01070d3:	01 d0                	add    %edx,%eax
f01070d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070dc:	01 d0                	add    %edx,%eax
f01070de:	c1 e0 04             	shl    $0x4,%eax
f01070e1:	05 00 9b 65 f0       	add    $0xf0659b00,%eax
f01070e6:	8b 00                	mov    (%eax),%eax
f01070e8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01070eb:	75 3f                	jne    f010712c <get_share_object_ID+0xa4>
f01070ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070f0:	89 d0                	mov    %edx,%eax
f01070f2:	01 c0                	add    %eax,%eax
f01070f4:	01 d0                	add    %edx,%eax
f01070f6:	01 c0                	add    %eax,%eax
f01070f8:	01 d0                	add    %edx,%eax
f01070fa:	c1 e0 02             	shl    $0x2,%eax
f01070fd:	01 d0                	add    %edx,%eax
f01070ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107106:	01 d0                	add    %edx,%eax
f0107108:	c1 e0 04             	shl    $0x4,%eax
f010710b:	05 00 9b 65 f0       	add    $0xf0659b00,%eax
f0107110:	83 c0 04             	add    $0x4,%eax
f0107113:	83 ec 08             	sub    $0x8,%esp
f0107116:	50                   	push   %eax
f0107117:	ff 75 0c             	pushl  0xc(%ebp)
f010711a:	e8 42 98 02 00       	call   f0130961 <strcmp>
f010711f:	83 c4 10             	add    $0x10,%esp
f0107122:	85 c0                	test   %eax,%eax
f0107124:	75 06                	jne    f010712c <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107126:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107129:	eb 13                	jmp    f010713e <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010712b:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010712c:	ff 45 f4             	incl   -0xc(%ebp)
f010712f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107133:	0f 8e 61 ff ff ff    	jle    f010709a <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107139:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010713e:	c9                   	leave  
f010713f:	c3                   	ret    

f0107140 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107140:	55                   	push   %ebp
f0107141:	89 e5                	mov    %esp,%ebp
f0107143:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107146:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010714a:	76 0a                	jbe    f0107156 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f010714c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107151:	e9 93 00 00 00       	jmp    f01071e9 <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107156:	8b 55 08             	mov    0x8(%ebp),%edx
f0107159:	89 d0                	mov    %edx,%eax
f010715b:	01 c0                	add    %eax,%eax
f010715d:	01 d0                	add    %edx,%eax
f010715f:	01 c0                	add    %eax,%eax
f0107161:	01 d0                	add    %edx,%eax
f0107163:	c1 e0 02             	shl    $0x2,%eax
f0107166:	01 d0                	add    %edx,%eax
f0107168:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010716f:	01 d0                	add    %edx,%eax
f0107171:	c1 e0 04             	shl    $0x4,%eax
f0107174:	83 c0 50             	add    $0x50,%eax
f0107177:	05 00 9b 65 f0       	add    $0xf0659b00,%eax
f010717c:	83 ec 0c             	sub    $0xc,%esp
f010717f:	50                   	push   %eax
f0107180:	e8 3e 01 00 00       	call   f01072c3 <clear_frames_storage>
f0107185:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107188:	8b 55 08             	mov    0x8(%ebp),%edx
f010718b:	89 d0                	mov    %edx,%eax
f010718d:	01 c0                	add    %eax,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	01 c0                	add    %eax,%eax
f0107193:	01 d0                	add    %edx,%eax
f0107195:	c1 e0 02             	shl    $0x2,%eax
f0107198:	01 d0                	add    %edx,%eax
f010719a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071a1:	01 d0                	add    %edx,%eax
f01071a3:	c1 e0 04             	shl    $0x4,%eax
f01071a6:	05 00 9b 65 f0       	add    $0xf0659b00,%eax
f01071ab:	83 ec 04             	sub    $0x4,%esp
f01071ae:	68 50 10 00 00       	push   $0x1050
f01071b3:	6a 00                	push   $0x0
f01071b5:	50                   	push   %eax
f01071b6:	e8 88 98 02 00       	call   f0130a43 <memset>
f01071bb:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01071be:	8b 55 08             	mov    0x8(%ebp),%edx
f01071c1:	89 d0                	mov    %edx,%eax
f01071c3:	01 c0                	add    %eax,%eax
f01071c5:	01 d0                	add    %edx,%eax
f01071c7:	01 c0                	add    %eax,%eax
f01071c9:	01 d0                	add    %edx,%eax
f01071cb:	c1 e0 02             	shl    $0x2,%eax
f01071ce:	01 d0                	add    %edx,%eax
f01071d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071d7:	01 d0                	add    %edx,%eax
f01071d9:	c1 e0 04             	shl    $0x4,%eax
f01071dc:	05 4d 9b 65 f0       	add    $0xf0659b4d,%eax
f01071e1:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f01071e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01071e9:	c9                   	leave  
f01071ea:	c3                   	ret    

f01071eb <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01071eb:	55                   	push   %ebp
f01071ec:	89 e5                	mov    %esp,%ebp
f01071ee:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01071f1:	83 ec 0c             	sub    $0xc,%esp
f01071f4:	68 00 10 00 00       	push   $0x1000
f01071f9:	e8 c6 03 00 00       	call   f01075c4 <kmalloc>
f01071fe:	83 c4 10             	add    $0x10,%esp
f0107201:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107204:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107208:	75 17                	jne    f0107221 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010720a:	83 ec 04             	sub    $0x4,%esp
f010720d:	68 99 56 13 f0       	push   $0xf0135699
f0107212:	68 a9 00 00 00       	push   $0xa9
f0107217:	68 78 56 13 f0       	push   $0xf0135678
f010721c:	e8 85 8f ff ff       	call   f01001a6 <_panic>
	}
	return frames_storage;
f0107221:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107224:	c9                   	leave  
f0107225:	c3                   	ret    

f0107226 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107226:	55                   	push   %ebp
f0107227:	89 e5                	mov    %esp,%ebp
f0107229:	53                   	push   %ebx
f010722a:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f010722d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107230:	c1 e0 0c             	shl    $0xc,%eax
f0107233:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107236:	83 ec 04             	sub    $0x4,%esp
f0107239:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010723c:	50                   	push   %eax
f010723d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107240:	ff 75 08             	pushl  0x8(%ebp)
f0107243:	e8 21 f7 ff ff       	call   f0106969 <get_page_table>
f0107248:	83 c4 10             	add    $0x10,%esp
f010724b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f010724e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107252:	75 15                	jne    f0107269 <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107254:	83 ec 04             	sub    $0x4,%esp
f0107257:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010725a:	50                   	push   %eax
f010725b:	ff 75 f4             	pushl  -0xc(%ebp)
f010725e:	ff 75 08             	pushl  0x8(%ebp)
f0107261:	e8 29 f8 ff ff       	call   f0106a8f <__static_cpt>
f0107266:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107269:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010726c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726f:	c1 ea 0c             	shr    $0xc,%edx
f0107272:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107278:	c1 e2 02             	shl    $0x2,%edx
f010727b:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f010727e:	83 ec 0c             	sub    $0xc,%esp
f0107281:	ff 75 0c             	pushl  0xc(%ebp)
f0107284:	e8 38 fc ff ff       	call   f0106ec1 <to_physical_address>
f0107289:	83 c4 10             	add    $0x10,%esp
f010728c:	83 c8 01             	or     $0x1,%eax
f010728f:	89 03                	mov    %eax,(%ebx)
}
f0107291:	90                   	nop
f0107292:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107295:	c9                   	leave  
f0107296:	c3                   	ret    

f0107297 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107297:	55                   	push   %ebp
f0107298:	89 e5                	mov    %esp,%ebp
f010729a:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f010729d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01072a0:	c1 e0 0c             	shl    $0xc,%eax
f01072a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01072a6:	83 ec 04             	sub    $0x4,%esp
f01072a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01072ac:	50                   	push   %eax
f01072ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01072b0:	ff 75 08             	pushl  0x8(%ebp)
f01072b3:	e8 49 f9 ff ff       	call   f0106c01 <get_frame_info>
f01072b8:	83 c4 10             	add    $0x10,%esp
f01072bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01072be:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01072c1:	c9                   	leave  
f01072c2:	c3                   	ret    

f01072c3 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01072c3:	55                   	push   %ebp
f01072c4:	89 e5                	mov    %esp,%ebp
f01072c6:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01072c9:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01072d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01072d7:	eb 5b                	jmp    f0107334 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01072e6:	01 d0                	add    %edx,%eax
f01072e8:	8b 00                	mov    (%eax),%eax
f01072ea:	85 c0                	test   %eax,%eax
f01072ec:	74 43                	je     f0107331 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01072fb:	01 d0                	add    %edx,%eax
f01072fd:	8b 00                	mov    (%eax),%eax
f01072ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107304:	83 ec 0c             	sub    $0xc,%esp
f0107307:	50                   	push   %eax
f0107308:	e8 c7 fb ff ff       	call   f0106ed4 <to_frame_info>
f010730d:	83 c4 10             	add    $0x10,%esp
f0107310:	83 ec 0c             	sub    $0xc,%esp
f0107313:	50                   	push   %eax
f0107314:	e8 a6 f5 ff ff       	call   f01068bf <free_frame>
f0107319:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f010731c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010731f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107326:	8b 45 08             	mov    0x8(%ebp),%eax
f0107329:	01 d0                	add    %edx,%eax
f010732b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107331:	ff 45 f4             	incl   -0xc(%ebp)
f0107334:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010733b:	7e 9c                	jle    f01072d9 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f010733d:	90                   	nop
f010733e:	c9                   	leave  
f010733f:	c3                   	ret    

f0107340 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107340:	55                   	push   %ebp
f0107341:	89 e5                	mov    %esp,%ebp
f0107343:	83 ec 18             	sub    $0x18,%esp
f0107346:	8b 45 14             	mov    0x14(%ebp),%eax
f0107349:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f010734c:	83 ec 04             	sub    $0x4,%esp
f010734f:	68 b8 56 13 f0       	push   $0xf01356b8
f0107354:	68 fa 00 00 00       	push   $0xfa
f0107359:	68 78 56 13 f0       	push   $0xf0135678
f010735e:	e8 43 8e ff ff       	call   f01001a6 <_panic>

f0107363 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107363:	55                   	push   %ebp
f0107364:	89 e5                	mov    %esp,%ebp
f0107366:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107369:	83 ec 04             	sub    $0x4,%esp
f010736c:	68 ec 56 13 f0       	push   $0xf01356ec
f0107371:	68 0c 01 00 00       	push   $0x10c
f0107376:	68 78 56 13 f0       	push   $0xf0135678
f010737b:	e8 26 8e ff ff       	call   f01001a6 <_panic>

f0107380 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107380:	55                   	push   %ebp
f0107381:	89 e5                	mov    %esp,%ebp
f0107383:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f0107386:	83 ec 04             	sub    $0x4,%esp
f0107389:	68 20 57 13 f0       	push   $0xf0135720
f010738e:	68 1b 01 00 00       	push   $0x11b
f0107393:	68 78 56 13 f0       	push   $0xf0135678
f0107398:	e8 09 8e ff ff       	call   f01001a6 <_panic>

f010739d <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010739d:	55                   	push   %ebp
f010739e:	89 e5                	mov    %esp,%ebp
f01073a0:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f01073a3:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01073a8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01073ab:	83 ec 04             	sub    $0x4,%esp
f01073ae:	68 50 57 13 f0       	push   $0xf0135750
f01073b3:	68 33 01 00 00       	push   $0x133
f01073b8:	68 78 56 13 f0       	push   $0xf0135678
f01073bd:	e8 e4 8d ff ff       	call   f01001a6 <_panic>

f01073c2 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01073c2:	55                   	push   %ebp
f01073c3:	89 e5                	mov    %esp,%ebp
f01073c5:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01073c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073cb:	c1 e8 0c             	shr    $0xc,%eax
f01073ce:	89 c2                	mov    %eax,%edx
f01073d0:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f01073d5:	39 c2                	cmp    %eax,%edx
f01073d7:	72 14                	jb     f01073ed <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01073d9:	83 ec 04             	sub    $0x4,%esp
f01073dc:	68 80 57 13 f0       	push   $0xf0135780
f01073e1:	6a 55                	push   $0x55
f01073e3:	68 a5 57 13 f0       	push   $0xf01357a5
f01073e8:	e8 b9 8d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01073ed:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f01073f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f6:	c1 e8 0c             	shr    $0xc,%eax
f01073f9:	89 c1                	mov    %eax,%ecx
f01073fb:	89 c8                	mov    %ecx,%eax
f01073fd:	01 c0                	add    %eax,%eax
f01073ff:	01 c8                	add    %ecx,%eax
f0107401:	c1 e0 03             	shl    $0x3,%eax
f0107404:	01 d0                	add    %edx,%eax
}
f0107406:	c9                   	leave  
f0107407:	c3                   	ret    

f0107408 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107408:	55                   	push   %ebp
f0107409:	89 e5                	mov    %esp,%ebp
f010740b:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f010740e:	c7 05 d0 9a 65 f0 00 	movl   $0x0,0xf0659ad0
f0107415:	00 00 00 
f0107418:	c7 05 d4 9a 65 f0 00 	movl   $0x0,0xf0659ad4
f010741f:	00 00 00 
f0107422:	c7 05 dc 9a 65 f0 00 	movl   $0x0,0xf0659adc
f0107429:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010742c:	c7 05 a0 1e 6c f0 00 	movl   $0x0,0xf06c1ea0
f0107433:	00 00 00 
f0107436:	c7 05 a4 1e 6c f0 00 	movl   $0x0,0xf06c1ea4
f010743d:	00 00 00 
f0107440:	c7 05 ac 1e 6c f0 00 	movl   $0x0,0xf06c1eac
f0107447:	00 00 00 
	uint32 arr_size = 0;
f010744a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107451:	c7 05 54 fa 6b f0 ff 	movl   $0x9fff,0xf06bfa54
f0107458:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f010745b:	c7 05 e0 9a 65 f0 00 	movl   $0xf6000000,0xf0659ae0
f0107462:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107465:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010746c:	a1 54 fa 6b f0       	mov    0xf06bfa54,%eax
f0107471:	c1 e0 04             	shl    $0x4,%eax
f0107474:	89 c2                	mov    %eax,%edx
f0107476:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107479:	01 d0                	add    %edx,%eax
f010747b:	48                   	dec    %eax
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	ba 00 00 00 00       	mov    $0x0,%edx
f0107487:	f7 75 f0             	divl   -0x10(%ebp)
f010748a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010748d:	29 d0                	sub    %edx,%eax
f010748f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107492:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0107497:	6a 03                	push   $0x3
f0107499:	ff 75 f4             	pushl  -0xc(%ebp)
f010749c:	68 00 00 00 f6       	push   $0xf6000000
f01074a1:	50                   	push   %eax
f01074a2:	e8 df 10 00 00       	call   f0108586 <allocate_chunk>
f01074a7:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f01074aa:	a1 54 fa 6b f0       	mov    0xf06bfa54,%eax
f01074af:	83 ec 0c             	sub    $0xc,%esp
f01074b2:	50                   	push   %eax
f01074b3:	e8 07 9f 02 00       	call   f01313bf <initialize_MemBlocksList>
f01074b8:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f01074bb:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f01074c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f01074c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074c6:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f01074cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01074cf:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f01074d2:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f01074d7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01074da:	89 c2                	mov    %eax,%edx
f01074dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01074df:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f01074e2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01074e6:	75 14                	jne    f01074fc <initialize_dyn_block_system+0xf4>
f01074e8:	83 ec 04             	sub    $0x4,%esp
f01074eb:	68 bf 57 13 f0       	push   $0xf01357bf
f01074f0:	6a 30                	push   $0x30
f01074f2:	68 dd 57 13 f0       	push   $0xf01357dd
f01074f7:	e8 aa 8c ff ff       	call   f01001a6 <_panic>
f01074fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01074ff:	8b 00                	mov    (%eax),%eax
f0107501:	85 c0                	test   %eax,%eax
f0107503:	74 10                	je     f0107515 <initialize_dyn_block_system+0x10d>
f0107505:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107508:	8b 00                	mov    (%eax),%eax
f010750a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010750d:	8b 52 04             	mov    0x4(%edx),%edx
f0107510:	89 50 04             	mov    %edx,0x4(%eax)
f0107513:	eb 0b                	jmp    f0107520 <initialize_dyn_block_system+0x118>
f0107515:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107518:	8b 40 04             	mov    0x4(%eax),%eax
f010751b:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f0107520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107523:	8b 40 04             	mov    0x4(%eax),%eax
f0107526:	85 c0                	test   %eax,%eax
f0107528:	74 0f                	je     f0107539 <initialize_dyn_block_system+0x131>
f010752a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010752d:	8b 40 04             	mov    0x4(%eax),%eax
f0107530:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107533:	8b 12                	mov    (%edx),%edx
f0107535:	89 10                	mov    %edx,(%eax)
f0107537:	eb 0a                	jmp    f0107543 <initialize_dyn_block_system+0x13b>
f0107539:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010753c:	8b 00                	mov    (%eax),%eax
f010753e:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f0107543:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107546:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010754c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010754f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107556:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010755b:	48                   	dec    %eax
f010755c:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107561:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107565:	75 14                	jne    f010757b <initialize_dyn_block_system+0x173>
f0107567:	83 ec 04             	sub    $0x4,%esp
f010756a:	68 f0 57 13 f0       	push   $0xf01357f0
f010756f:	6a 32                	push   $0x32
f0107571:	68 dd 57 13 f0       	push   $0xf01357dd
f0107576:	e8 2b 8c ff ff       	call   f01001a6 <_panic>
f010757b:	8b 15 a0 1e 6c f0    	mov    0xf06c1ea0,%edx
f0107581:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107584:	89 10                	mov    %edx,(%eax)
f0107586:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107589:	8b 00                	mov    (%eax),%eax
f010758b:	85 c0                	test   %eax,%eax
f010758d:	74 0d                	je     f010759c <initialize_dyn_block_system+0x194>
f010758f:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0107594:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107597:	89 50 04             	mov    %edx,0x4(%eax)
f010759a:	eb 08                	jmp    f01075a4 <initialize_dyn_block_system+0x19c>
f010759c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010759f:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f01075a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075a7:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f01075ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075af:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01075b6:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f01075bb:	40                   	inc    %eax
f01075bc:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac

}
f01075c1:	90                   	nop
f01075c2:	c9                   	leave  
f01075c3:	c3                   	ret    

f01075c4 <kmalloc>:

void* kmalloc(unsigned int size)
{
f01075c4:	55                   	push   %ebp
f01075c5:	89 e5                	mov    %esp,%ebp
f01075c7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f01075ca:	83 ec 04             	sub    $0x4,%esp
f01075cd:	68 14 58 13 f0       	push   $0xf0135814
f01075d2:	6a 3a                	push   $0x3a
f01075d4:	68 dd 57 13 f0       	push   $0xf01357dd
f01075d9:	e8 ad 8c ff ff       	call   f010028b <_panic_into_prompt>

f01075de <kfree>:


}

void kfree(void* virtual_address)
{
f01075de:	55                   	push   %ebp
f01075df:	89 e5                	mov    %esp,%ebp
f01075e1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f01075e4:	83 ec 04             	sub    $0x4,%esp
f01075e7:	68 3c 58 13 f0       	push   $0xf013583c
f01075ec:	6a 48                	push   $0x48
f01075ee:	68 dd 57 13 f0       	push   $0xf01357dd
f01075f3:	e8 ae 8b ff ff       	call   f01001a6 <_panic>

f01075f8 <kheap_virtual_address>:

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f01075f8:	55                   	push   %ebp
f01075f9:	89 e5                	mov    %esp,%ebp
f01075fb:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f01075fe:	83 ec 0c             	sub    $0xc,%esp
f0107601:	ff 75 08             	pushl  0x8(%ebp)
f0107604:	e8 b9 fd ff ff       	call   f01073c2 <to_frame_info>
f0107609:	83 c4 10             	add    $0x10,%esp
f010760c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(physical_address!=E_NO_MEM)
f010760f:	83 7d 08 fc          	cmpl   $0xfffffffc,0x8(%ebp)
f0107613:	74 08                	je     f010761d <kheap_virtual_address+0x25>
		{
		return convert_to_va->va;
f0107615:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107618:	8b 40 0c             	mov    0xc(%eax),%eax
f010761b:	eb 05                	jmp    f0107622 <kheap_virtual_address+0x2a>
		}
		else
		{
			return 0;
f010761d:	b8 00 00 00 00       	mov    $0x0,%eax
		}

	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107622:	c9                   	leave  
f0107623:	c3                   	ret    

f0107624 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107624:	55                   	push   %ebp
f0107625:	89 e5                	mov    %esp,%ebp
f0107627:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f010762a:	83 ec 04             	sub    $0x4,%esp
f010762d:	68 60 58 13 f0       	push   $0xf0135860
f0107632:	6a 65                	push   $0x65
f0107634:	68 dd 57 13 f0       	push   $0xf01357dd
f0107639:	e8 68 8b ff ff       	call   f01001a6 <_panic>

f010763e <kfreeall>:
	//refer to the project presentation and documentation for details
}


void kfreeall()
{
f010763e:	55                   	push   %ebp
f010763f:	89 e5                	mov    %esp,%ebp
f0107641:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107644:	83 ec 04             	sub    $0x4,%esp
f0107647:	68 95 58 13 f0       	push   $0xf0135895
f010764c:	6a 6e                	push   $0x6e
f010764e:	68 dd 57 13 f0       	push   $0xf01357dd
f0107653:	e8 4e 8b ff ff       	call   f01001a6 <_panic>

f0107658 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107658:	55                   	push   %ebp
f0107659:	89 e5                	mov    %esp,%ebp
f010765b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010765e:	83 ec 04             	sub    $0x4,%esp
f0107661:	68 95 58 13 f0       	push   $0xf0135895
f0107666:	6a 74                	push   $0x74
f0107668:	68 dd 57 13 f0       	push   $0xf01357dd
f010766d:	e8 34 8b ff ff       	call   f01001a6 <_panic>

f0107672 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107672:	55                   	push   %ebp
f0107673:	89 e5                	mov    %esp,%ebp
f0107675:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107678:	83 ec 04             	sub    $0x4,%esp
f010767b:	68 95 58 13 f0       	push   $0xf0135895
f0107680:	6a 79                	push   $0x79
f0107682:	68 dd 57 13 f0       	push   $0xf01357dd
f0107687:	e8 1a 8b ff ff       	call   f01001a6 <_panic>

f010768c <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f010768c:	55                   	push   %ebp
f010768d:	89 e5                	mov    %esp,%ebp
f010768f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107692:	83 ec 04             	sub    $0x4,%esp
f0107695:	68 a8 58 13 f0       	push   $0xf01358a8
f010769a:	68 90 00 00 00       	push   $0x90
f010769f:	68 dd 57 13 f0       	push   $0xf01357dd
f01076a4:	e8 fd 8a ff ff       	call   f01001a6 <_panic>

f01076a9 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01076a9:	55                   	push   %ebp
f01076aa:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01076ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01076af:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f01076b5:	29 d0                	sub    %edx,%eax
f01076b7:	c1 f8 03             	sar    $0x3,%eax
f01076ba:	89 c2                	mov    %eax,%edx
f01076bc:	89 d0                	mov    %edx,%eax
f01076be:	c1 e0 02             	shl    $0x2,%eax
f01076c1:	01 d0                	add    %edx,%eax
f01076c3:	c1 e0 02             	shl    $0x2,%eax
f01076c6:	01 d0                	add    %edx,%eax
f01076c8:	c1 e0 02             	shl    $0x2,%eax
f01076cb:	01 d0                	add    %edx,%eax
f01076cd:	89 c1                	mov    %eax,%ecx
f01076cf:	c1 e1 08             	shl    $0x8,%ecx
f01076d2:	01 c8                	add    %ecx,%eax
f01076d4:	89 c1                	mov    %eax,%ecx
f01076d6:	c1 e1 10             	shl    $0x10,%ecx
f01076d9:	01 c8                	add    %ecx,%eax
f01076db:	01 c0                	add    %eax,%eax
f01076dd:	01 d0                	add    %edx,%eax
}
f01076df:	5d                   	pop    %ebp
f01076e0:	c3                   	ret    

f01076e1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01076e1:	55                   	push   %ebp
f01076e2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01076e4:	ff 75 08             	pushl  0x8(%ebp)
f01076e7:	e8 bd ff ff ff       	call   f01076a9 <to_frame_number>
f01076ec:	83 c4 04             	add    $0x4,%esp
f01076ef:	c1 e0 0c             	shl    $0xc,%eax
}
f01076f2:	c9                   	leave  
f01076f3:	c3                   	ret    

f01076f4 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f01076f4:	55                   	push   %ebp
f01076f5:	89 e5                	mov    %esp,%ebp
f01076f7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f01076fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107701:	83 ec 04             	sub    $0x4,%esp
f0107704:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107707:	50                   	push   %eax
f0107708:	ff 75 0c             	pushl  0xc(%ebp)
f010770b:	ff 75 08             	pushl  0x8(%ebp)
f010770e:	e8 56 f2 ff ff       	call   f0106969 <get_page_table>
f0107713:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107716:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107719:	85 c0                	test   %eax,%eax
f010771b:	74 75                	je     f0107792 <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f010771d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107720:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107723:	c1 ea 0c             	shr    $0xc,%edx
f0107726:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010772c:	c1 e2 02             	shl    $0x2,%edx
f010772f:	01 d0                	add    %edx,%eax
f0107731:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107734:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107737:	c1 e9 0c             	shr    $0xc,%ecx
f010773a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107740:	c1 e1 02             	shl    $0x2,%ecx
f0107743:	01 ca                	add    %ecx,%edx
f0107745:	8b 12                	mov    (%edx),%edx
f0107747:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010774a:	f7 d1                	not    %ecx
f010774c:	21 ca                	and    %ecx,%edx
f010774e:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107753:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107756:	c1 ea 0c             	shr    $0xc,%edx
f0107759:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010775f:	c1 e2 02             	shl    $0x2,%edx
f0107762:	01 c2                	add    %eax,%edx
f0107764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107767:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010776a:	c1 e9 0c             	shr    $0xc,%ecx
f010776d:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107773:	c1 e1 02             	shl    $0x2,%ecx
f0107776:	01 c8                	add    %ecx,%eax
f0107778:	8b 00                	mov    (%eax),%eax
f010777a:	0b 45 10             	or     0x10(%ebp),%eax
f010777d:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f010777f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107782:	83 ec 08             	sub    $0x8,%esp
f0107785:	50                   	push   %eax
f0107786:	6a 00                	push   $0x0
f0107788:	e8 39 ec ff ff       	call   f01063c6 <tlb_invalidate>
f010778d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107790:	eb 14                	jmp    f01077a6 <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107792:	83 ec 04             	sub    $0x4,%esp
f0107795:	68 cf 58 13 f0       	push   $0xf01358cf
f010779a:	6a 19                	push   $0x19
f010779c:	68 ec 58 13 f0       	push   $0xf01358ec
f01077a1:	e8 00 8a ff ff       	call   f01001a6 <_panic>
	}
}
f01077a6:	c9                   	leave  
f01077a7:	c3                   	ret    

f01077a8 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f01077a8:	55                   	push   %ebp
f01077a9:	89 e5                	mov    %esp,%ebp
f01077ab:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f01077ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f01077b5:	83 ec 04             	sub    $0x4,%esp
f01077b8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01077bb:	50                   	push   %eax
f01077bc:	ff 75 0c             	pushl  0xc(%ebp)
f01077bf:	ff 75 08             	pushl  0x8(%ebp)
f01077c2:	e8 a2 f1 ff ff       	call   f0106969 <get_page_table>
f01077c7:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f01077ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077cd:	85 c0                	test   %eax,%eax
f01077cf:	74 2b                	je     f01077fc <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f01077d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01077d7:	c1 ea 0c             	shr    $0xc,%edx
f01077da:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01077e0:	c1 e2 02             	shl    $0x2,%edx
f01077e3:	01 d0                	add    %edx,%eax
f01077e5:	8b 00                	mov    (%eax),%eax
f01077e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f01077ea:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f01077f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077f4:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f01077f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01077fa:	eb 05                	jmp    f0107801 <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f01077fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107801:	c9                   	leave  
f0107802:	c3                   	ret    

f0107803 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107803:	55                   	push   %ebp
f0107804:	89 e5                	mov    %esp,%ebp
f0107806:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107809:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107810:	83 ec 04             	sub    $0x4,%esp
f0107813:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107816:	50                   	push   %eax
f0107817:	ff 75 0c             	pushl  0xc(%ebp)
f010781a:	ff 75 08             	pushl  0x8(%ebp)
f010781d:	e8 47 f1 ff ff       	call   f0106969 <get_page_table>
f0107822:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107825:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107828:	85 c0                	test   %eax,%eax
f010782a:	74 2d                	je     f0107859 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f010782c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010782f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107832:	c1 ea 0c             	shr    $0xc,%edx
f0107835:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010783b:	c1 e2 02             	shl    $0x2,%edx
f010783e:	01 d0                	add    %edx,%eax
f0107840:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107846:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107849:	83 ec 08             	sub    $0x8,%esp
f010784c:	50                   	push   %eax
f010784d:	6a 00                	push   $0x0
f010784f:	e8 72 eb ff ff       	call   f01063c6 <tlb_invalidate>
f0107854:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107857:	eb 14                	jmp    f010786d <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107859:	83 ec 04             	sub    $0x4,%esp
f010785c:	68 cf 58 13 f0       	push   $0xf01358cf
f0107861:	6a 42                	push   $0x42
f0107863:	68 ec 58 13 f0       	push   $0xf01358ec
f0107868:	e8 39 89 ff ff       	call   f01001a6 <_panic>
	}
}
f010786d:	c9                   	leave  
f010786e:	c3                   	ret    

f010786f <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f010786f:	55                   	push   %ebp
f0107870:	89 e5                	mov    %esp,%ebp
f0107872:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107875:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f010787c:	83 ec 04             	sub    $0x4,%esp
f010787f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107882:	50                   	push   %eax
f0107883:	ff 75 0c             	pushl  0xc(%ebp)
f0107886:	ff 75 08             	pushl  0x8(%ebp)
f0107889:	e8 db f0 ff ff       	call   f0106969 <get_page_table>
f010788e:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107891:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107894:	85 c0                	test   %eax,%eax
f0107896:	74 28                	je     f01078c0 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107898:	83 ec 04             	sub    $0x4,%esp
f010789b:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010789e:	50                   	push   %eax
f010789f:	ff 75 0c             	pushl  0xc(%ebp)
f01078a2:	ff 75 08             	pushl  0x8(%ebp)
f01078a5:	e8 57 f3 ff ff       	call   f0106c01 <get_frame_info>
f01078aa:	83 c4 10             	add    $0x10,%esp
f01078ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f01078b0:	83 ec 0c             	sub    $0xc,%esp
f01078b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01078b6:	e8 26 fe ff ff       	call   f01076e1 <to_physical_address>
f01078bb:	83 c4 10             	add    $0x10,%esp
f01078be:	eb 05                	jmp    f01078c5 <virtual_to_physical+0x56>
	}
	return -1;
f01078c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f01078c5:	c9                   	leave  
f01078c6:	c3                   	ret    

f01078c7 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f01078c7:	55                   	push   %ebp
f01078c8:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f01078ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078cd:	c1 e8 16             	shr    $0x16,%eax
f01078d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01078d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01078da:	01 d0                	add    %edx,%eax
f01078dc:	8b 00                	mov    (%eax),%eax
f01078de:	83 e0 20             	and    $0x20,%eax
f01078e1:	85 c0                	test   %eax,%eax
f01078e3:	0f 95 c0             	setne  %al
f01078e6:	0f b6 c0             	movzbl %al,%eax
}
f01078e9:	5d                   	pop    %ebp
f01078ea:	c3                   	ret    

f01078eb <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01078eb:	55                   	push   %ebp
f01078ec:	89 e5                	mov    %esp,%ebp
f01078ee:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01078f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078f4:	c1 e8 16             	shr    $0x16,%eax
f01078f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01078fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0107901:	01 d0                	add    %edx,%eax
f0107903:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107906:	c1 ea 16             	shr    $0x16,%edx
f0107909:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107910:	8b 55 08             	mov    0x8(%ebp),%edx
f0107913:	01 ca                	add    %ecx,%edx
f0107915:	8b 12                	mov    (%edx),%edx
f0107917:	83 e2 df             	and    $0xffffffdf,%edx
f010791a:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f010791c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010791f:	83 ec 08             	sub    $0x8,%esp
f0107922:	50                   	push   %eax
f0107923:	6a 00                	push   $0x0
f0107925:	e8 9c ea ff ff       	call   f01063c6 <tlb_invalidate>
f010792a:	83 c4 10             	add    $0x10,%esp
}
f010792d:	90                   	nop
f010792e:	c9                   	leave  
f010792f:	c3                   	ret    

f0107930 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107930:	55                   	push   %ebp
f0107931:	89 e5                	mov    %esp,%ebp
f0107933:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107936:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107939:	c1 e8 16             	shr    $0x16,%eax
f010793c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107943:	8b 45 08             	mov    0x8(%ebp),%eax
f0107946:	01 d0                	add    %edx,%eax
f0107948:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010794e:	0f 20 d8             	mov    %cr3,%eax
f0107951:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107954:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107957:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010795a:	90                   	nop
f010795b:	c9                   	leave  
f010795c:	c3                   	ret    

f010795d <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f010795d:	55                   	push   %ebp
f010795e:	89 e5                	mov    %esp,%ebp
f0107960:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107963:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010796a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107971:	eb 20                	jmp    f0107993 <env_page_ws_get_size+0x36>
f0107973:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107976:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107979:	89 d0                	mov    %edx,%eax
f010797b:	01 c0                	add    %eax,%eax
f010797d:	01 d0                	add    %edx,%eax
f010797f:	c1 e0 03             	shl    $0x3,%eax
f0107982:	01 c8                	add    %ecx,%eax
f0107984:	83 c0 7c             	add    $0x7c,%eax
f0107987:	8a 00                	mov    (%eax),%al
f0107989:	84 c0                	test   %al,%al
f010798b:	75 03                	jne    f0107990 <env_page_ws_get_size+0x33>
f010798d:	ff 45 f8             	incl   -0x8(%ebp)
f0107990:	ff 45 fc             	incl   -0x4(%ebp)
f0107993:	8b 45 08             	mov    0x8(%ebp),%eax
f0107996:	8b 50 74             	mov    0x74(%eax),%edx
f0107999:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010799c:	39 c2                	cmp    %eax,%edx
f010799e:	77 d3                	ja     f0107973 <env_page_ws_get_size+0x16>
	return counter;
f01079a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01079a3:	c9                   	leave  
f01079a4:	c3                   	ret    

f01079a5 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01079a5:	55                   	push   %ebp
f01079a6:	89 e5                	mov    %esp,%ebp
f01079a8:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01079ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f01079b2:	eb 4c                	jmp    f0107a00 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f01079b4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01079b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01079ba:	89 d0                	mov    %edx,%eax
f01079bc:	01 c0                	add    %eax,%eax
f01079be:	01 d0                	add    %edx,%eax
f01079c0:	c1 e0 03             	shl    $0x3,%eax
f01079c3:	01 c8                	add    %ecx,%eax
f01079c5:	83 c0 78             	add    $0x78,%eax
f01079c8:	8b 00                	mov    (%eax),%eax
f01079ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079d0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01079d5:	89 c2                	mov    %eax,%edx
f01079d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01079da:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01079dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079e0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01079e5:	39 c2                	cmp    %eax,%edx
f01079e7:	75 14                	jne    f01079fd <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f01079e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079ec:	83 ec 08             	sub    $0x8,%esp
f01079ef:	50                   	push   %eax
f01079f0:	ff 75 08             	pushl  0x8(%ebp)
f01079f3:	e8 bc 00 00 00       	call   f0107ab4 <env_page_ws_clear_entry>
f01079f8:	83 c4 10             	add    $0x10,%esp
			break;
f01079fb:	eb 10                	jmp    f0107a0d <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01079fd:	ff 45 f4             	incl   -0xc(%ebp)
f0107a00:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a03:	8b 50 74             	mov    0x74(%eax),%edx
f0107a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a09:	39 c2                	cmp    %eax,%edx
f0107a0b:	77 a7                	ja     f01079b4 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107a0d:	90                   	nop
f0107a0e:	c9                   	leave  
f0107a0f:	c3                   	ret    

f0107a10 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107a10:	55                   	push   %ebp
f0107a11:	89 e5                	mov    %esp,%ebp
f0107a13:	53                   	push   %ebx
f0107a14:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107a17:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a1a:	8b 40 74             	mov    0x74(%eax),%eax
f0107a1d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107a20:	77 16                	ja     f0107a38 <env_page_ws_set_entry+0x28>
f0107a22:	68 08 59 13 f0       	push   $0xf0135908
f0107a27:	68 3e 59 13 f0       	push   $0xf013593e
f0107a2c:	6a 26                	push   $0x26
f0107a2e:	68 54 59 13 f0       	push   $0xf0135954
f0107a33:	e8 6e 87 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107a38:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107a3f:	76 16                	jbe    f0107a57 <env_page_ws_set_entry+0x47>
f0107a41:	68 74 59 13 f0       	push   $0xf0135974
f0107a46:	68 3e 59 13 f0       	push   $0xf013593e
f0107a4b:	6a 27                	push   $0x27
f0107a4d:	68 54 59 13 f0       	push   $0xf0135954
f0107a52:	e8 4f 87 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107a57:	8b 45 10             	mov    0x10(%ebp),%eax
f0107a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a60:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a65:	89 c1                	mov    %eax,%ecx
f0107a67:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107a6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a6d:	89 d0                	mov    %edx,%eax
f0107a6f:	01 c0                	add    %eax,%eax
f0107a71:	01 d0                	add    %edx,%eax
f0107a73:	c1 e0 03             	shl    $0x3,%eax
f0107a76:	01 d8                	add    %ebx,%eax
f0107a78:	83 c0 78             	add    $0x78,%eax
f0107a7b:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107a7d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a80:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a83:	89 d0                	mov    %edx,%eax
f0107a85:	01 c0                	add    %eax,%eax
f0107a87:	01 d0                	add    %edx,%eax
f0107a89:	c1 e0 03             	shl    $0x3,%eax
f0107a8c:	01 c8                	add    %ecx,%eax
f0107a8e:	83 c0 7c             	add    $0x7c,%eax
f0107a91:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107a94:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a97:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a9a:	89 d0                	mov    %edx,%eax
f0107a9c:	01 c0                	add    %eax,%eax
f0107a9e:	01 d0                	add    %edx,%eax
f0107aa0:	c1 e0 03             	shl    $0x3,%eax
f0107aa3:	01 c8                	add    %ecx,%eax
f0107aa5:	83 e8 80             	sub    $0xffffff80,%eax
f0107aa8:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107aae:	90                   	nop
}
f0107aaf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107ab2:	c9                   	leave  
f0107ab3:	c3                   	ret    

f0107ab4 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107ab4:	55                   	push   %ebp
f0107ab5:	89 e5                	mov    %esp,%ebp
f0107ab7:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107aba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107abd:	8b 40 74             	mov    0x74(%eax),%eax
f0107ac0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ac3:	77 16                	ja     f0107adb <env_page_ws_clear_entry+0x27>
f0107ac5:	68 a8 59 13 f0       	push   $0xf01359a8
f0107aca:	68 3e 59 13 f0       	push   $0xf013593e
f0107acf:	6a 32                	push   $0x32
f0107ad1:	68 54 59 13 f0       	push   $0xf0135954
f0107ad6:	e8 cb 86 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107adb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ade:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ae1:	89 d0                	mov    %edx,%eax
f0107ae3:	01 c0                	add    %eax,%eax
f0107ae5:	01 d0                	add    %edx,%eax
f0107ae7:	c1 e0 03             	shl    $0x3,%eax
f0107aea:	01 c8                	add    %ecx,%eax
f0107aec:	83 c0 78             	add    $0x78,%eax
f0107aef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107af5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107af8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107afb:	89 d0                	mov    %edx,%eax
f0107afd:	01 c0                	add    %eax,%eax
f0107aff:	01 d0                	add    %edx,%eax
f0107b01:	c1 e0 03             	shl    $0x3,%eax
f0107b04:	01 c8                	add    %ecx,%eax
f0107b06:	83 c0 7c             	add    $0x7c,%eax
f0107b09:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107b0c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b0f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b12:	89 d0                	mov    %edx,%eax
f0107b14:	01 c0                	add    %eax,%eax
f0107b16:	01 d0                	add    %edx,%eax
f0107b18:	c1 e0 03             	shl    $0x3,%eax
f0107b1b:	01 c8                	add    %ecx,%eax
f0107b1d:	83 e8 80             	sub    $0xffffff80,%eax
f0107b20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0107b26:	90                   	nop
f0107b27:	c9                   	leave  
f0107b28:	c3                   	ret    

f0107b29 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107b29:	55                   	push   %ebp
f0107b2a:	89 e5                	mov    %esp,%ebp
f0107b2c:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107b2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b32:	8b 40 74             	mov    0x74(%eax),%eax
f0107b35:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107b38:	77 16                	ja     f0107b50 <env_page_ws_get_virtual_address+0x27>
f0107b3a:	68 a8 59 13 f0       	push   $0xf01359a8
f0107b3f:	68 3e 59 13 f0       	push   $0xf013593e
f0107b44:	6a 3a                	push   $0x3a
f0107b46:	68 54 59 13 f0       	push   $0xf0135954
f0107b4b:	e8 56 86 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0107b50:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b53:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b56:	89 d0                	mov    %edx,%eax
f0107b58:	01 c0                	add    %eax,%eax
f0107b5a:	01 d0                	add    %edx,%eax
f0107b5c:	c1 e0 03             	shl    $0x3,%eax
f0107b5f:	01 c8                	add    %ecx,%eax
f0107b61:	83 c0 78             	add    $0x78,%eax
f0107b64:	8b 00                	mov    (%eax),%eax
f0107b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b6c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0107b71:	c9                   	leave  
f0107b72:	c3                   	ret    

f0107b73 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107b73:	55                   	push   %ebp
f0107b74:	89 e5                	mov    %esp,%ebp
f0107b76:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107b79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b7c:	8b 40 74             	mov    0x74(%eax),%eax
f0107b7f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107b82:	77 16                	ja     f0107b9a <env_page_ws_get_time_stamp+0x27>
f0107b84:	68 a8 59 13 f0       	push   $0xf01359a8
f0107b89:	68 3e 59 13 f0       	push   $0xf013593e
f0107b8e:	6a 40                	push   $0x40
f0107b90:	68 54 59 13 f0       	push   $0xf0135954
f0107b95:	e8 0c 86 ff ff       	call   f01001a6 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0107b9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b9d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ba0:	89 d0                	mov    %edx,%eax
f0107ba2:	01 c0                	add    %eax,%eax
f0107ba4:	01 d0                	add    %edx,%eax
f0107ba6:	c1 e0 03             	shl    $0x3,%eax
f0107ba9:	01 c8                	add    %ecx,%eax
f0107bab:	83 e8 80             	sub    $0xffffff80,%eax
f0107bae:	8b 00                	mov    (%eax),%eax
}
f0107bb0:	c9                   	leave  
f0107bb1:	c3                   	ret    

f0107bb2 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107bb2:	55                   	push   %ebp
f0107bb3:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107bb5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107bb8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107bbb:	89 d0                	mov    %edx,%eax
f0107bbd:	01 c0                	add    %eax,%eax
f0107bbf:	01 d0                	add    %edx,%eax
f0107bc1:	c1 e0 03             	shl    $0x3,%eax
f0107bc4:	01 c8                	add    %ecx,%eax
f0107bc6:	83 c0 7c             	add    $0x7c,%eax
f0107bc9:	8a 00                	mov    (%eax),%al
f0107bcb:	0f b6 c0             	movzbl %al,%eax
}
f0107bce:	5d                   	pop    %ebp
f0107bcf:	c3                   	ret    

f0107bd0 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0107bd0:	55                   	push   %ebp
f0107bd1:	89 e5                	mov    %esp,%ebp
f0107bd3:	53                   	push   %ebx
f0107bd4:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0107bd7:	83 ec 0c             	sub    $0xc,%esp
f0107bda:	6a 02                	push   $0x2
f0107bdc:	e8 b6 5a 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f0107be1:	83 c4 10             	add    $0x10,%esp
f0107be4:	85 c0                	test   %eax,%eax
f0107be6:	0f 84 fe 00 00 00    	je     f0107cea <env_page_ws_print+0x11a>
	{
		int i = 0;
f0107bec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0107bf3:	83 ec 0c             	sub    $0xc,%esp
f0107bf6:	68 e0 59 13 f0       	push   $0xf01359e0
f0107bfb:	e8 2d 90 ff ff       	call   f0100c2d <cprintf>
f0107c00:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107c03:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c06:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f0107c0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107c0f:	eb 2c                	jmp    f0107c3d <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c14:	8b 10                	mov    (%eax),%edx
f0107c16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c19:	8d 48 01             	lea    0x1(%eax),%ecx
f0107c1c:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107c1f:	83 ec 04             	sub    $0x4,%esp
f0107c22:	52                   	push   %edx
f0107c23:	50                   	push   %eax
f0107c24:	68 fa 59 13 f0       	push   $0xf01359fa
f0107c29:	e8 ff 8f ff ff       	call   f0100c2d <cprintf>
f0107c2e:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107c31:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c34:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107c3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107c3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c41:	74 08                	je     f0107c4b <env_page_ws_print+0x7b>
f0107c43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c46:	8b 40 10             	mov    0x10(%eax),%eax
f0107c49:	eb 05                	jmp    f0107c50 <env_page_ws_print+0x80>
f0107c4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c50:	8b 55 08             	mov    0x8(%ebp),%edx
f0107c53:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f0107c59:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c5c:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107c62:	85 c0                	test   %eax,%eax
f0107c64:	75 ab                	jne    f0107c11 <env_page_ws_print+0x41>
f0107c66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c6a:	75 a5                	jne    f0107c11 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0107c6c:	83 ec 0c             	sub    $0xc,%esp
f0107c6f:	68 02 5a 13 f0       	push   $0xf0135a02
f0107c74:	e8 b4 8f ff ff       	call   f0100c2d <cprintf>
f0107c79:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107c7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c7f:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0107c85:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107c88:	eb 2c                	jmp    f0107cb6 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107c8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c8d:	8b 10                	mov    (%eax),%edx
f0107c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c92:	8d 48 01             	lea    0x1(%eax),%ecx
f0107c95:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107c98:	83 ec 04             	sub    $0x4,%esp
f0107c9b:	52                   	push   %edx
f0107c9c:	50                   	push   %eax
f0107c9d:	68 fa 59 13 f0       	push   $0xf01359fa
f0107ca2:	e8 86 8f ff ff       	call   f0100c2d <cprintf>
f0107ca7:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107caa:	8b 45 08             	mov    0x8(%ebp),%eax
f0107cad:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107cb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107cb6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107cba:	74 08                	je     f0107cc4 <env_page_ws_print+0xf4>
f0107cbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cbf:	8b 40 10             	mov    0x10(%eax),%eax
f0107cc2:	eb 05                	jmp    f0107cc9 <env_page_ws_print+0xf9>
f0107cc4:	b8 00 00 00 00       	mov    $0x0,%eax
f0107cc9:	8b 55 08             	mov    0x8(%ebp),%edx
f0107ccc:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f0107cd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107cd5:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107cdb:	85 c0                	test   %eax,%eax
f0107cdd:	75 ab                	jne    f0107c8a <env_page_ws_print+0xba>
f0107cdf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ce3:	75 a5                	jne    f0107c8a <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107ce5:	e9 94 01 00 00       	jmp    f0107e7e <env_page_ws_print+0x2ae>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0107cea:	83 ec 0c             	sub    $0xc,%esp
f0107ced:	68 1d 5a 13 f0       	push   $0xf0135a1d
f0107cf2:	e8 36 8f ff ff       	call   f0100c2d <cprintf>
f0107cf7:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107cfa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107d01:	e9 69 01 00 00       	jmp    f0107e6f <env_page_ws_print+0x29f>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0107d06:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d09:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107d0c:	89 d0                	mov    %edx,%eax
f0107d0e:	01 c0                	add    %eax,%eax
f0107d10:	01 d0                	add    %edx,%eax
f0107d12:	c1 e0 03             	shl    $0x3,%eax
f0107d15:	01 c8                	add    %ecx,%eax
f0107d17:	83 c0 7c             	add    $0x7c,%eax
f0107d1a:	8a 00                	mov    (%eax),%al
f0107d1c:	84 c0                	test   %al,%al
f0107d1e:	74 43                	je     f0107d63 <env_page_ws_print+0x193>
			{
				cprintf("EMPTY LOCATION");
f0107d20:	83 ec 0c             	sub    $0xc,%esp
f0107d23:	68 27 5a 13 f0       	push   $0xf0135a27
f0107d28:	e8 00 8f ff ff       	call   f0100c2d <cprintf>
f0107d2d:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f0107d30:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d33:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107d39:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107d3c:	75 10                	jne    f0107d4e <env_page_ws_print+0x17e>
				{
					cprintf("		<--");
f0107d3e:	83 ec 0c             	sub    $0xc,%esp
f0107d41:	68 36 5a 13 f0       	push   $0xf0135a36
f0107d46:	e8 e2 8e ff ff       	call   f0100c2d <cprintf>
f0107d4b:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0107d4e:	83 ec 0c             	sub    $0xc,%esp
f0107d51:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0107d56:	e8 d2 8e ff ff       	call   f0100c2d <cprintf>
f0107d5b:	83 c4 10             	add    $0x10,%esp
				continue;
f0107d5e:	e9 09 01 00 00       	jmp    f0107e6c <env_page_ws_print+0x29c>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0107d63:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d66:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107d69:	89 d0                	mov    %edx,%eax
f0107d6b:	01 c0                	add    %eax,%eax
f0107d6d:	01 d0                	add    %edx,%eax
f0107d6f:	c1 e0 03             	shl    $0x3,%eax
f0107d72:	01 c8                	add    %ecx,%eax
f0107d74:	83 c0 78             	add    $0x78,%eax
f0107d77:	8b 00                	mov    (%eax),%eax
f0107d79:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0107d7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107d82:	89 d0                	mov    %edx,%eax
f0107d84:	01 c0                	add    %eax,%eax
f0107d86:	01 d0                	add    %edx,%eax
f0107d88:	c1 e0 03             	shl    $0x3,%eax
f0107d8b:	01 c8                	add    %ecx,%eax
f0107d8d:	83 e8 80             	sub    $0xffffff80,%eax
f0107d90:	8b 00                	mov    (%eax),%eax
f0107d92:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0107d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d98:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107d9b:	83 ec 08             	sub    $0x8,%esp
f0107d9e:	ff 75 e8             	pushl  -0x18(%ebp)
f0107da1:	50                   	push   %eax
f0107da2:	e8 01 fa ff ff       	call   f01077a8 <pt_get_page_permissions>
f0107da7:	83 c4 10             	add    $0x10,%esp
f0107daa:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0107dad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107db0:	83 e0 40             	and    $0x40,%eax
f0107db3:	85 c0                	test   %eax,%eax
f0107db5:	0f 95 c0             	setne  %al
f0107db8:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0107dbb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107dbe:	83 e0 20             	and    $0x20,%eax
f0107dc1:	85 c0                	test   %eax,%eax
f0107dc3:	0f 95 c0             	setne  %al
f0107dc6:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0107dc9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107dcc:	25 00 02 00 00       	and    $0x200,%eax
f0107dd1:	85 c0                	test   %eax,%eax
f0107dd3:	0f 95 c0             	setne  %al
f0107dd6:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0107dd9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ddc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107ddf:	89 d0                	mov    %edx,%eax
f0107de1:	01 c0                	add    %eax,%eax
f0107de3:	01 d0                	add    %edx,%eax
f0107de5:	c1 e0 03             	shl    $0x3,%eax
f0107de8:	01 c8                	add    %ecx,%eax
f0107dea:	83 c0 78             	add    $0x78,%eax
f0107ded:	8b 00                	mov    (%eax),%eax
f0107def:	83 ec 04             	sub    $0x4,%esp
f0107df2:	50                   	push   %eax
f0107df3:	ff 75 ec             	pushl  -0x14(%ebp)
f0107df6:	68 3e 5a 13 f0       	push   $0xf0135a3e
f0107dfb:	e8 2d 8e ff ff       	call   f0100c2d <cprintf>
f0107e00:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0107e03:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e06:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107e09:	89 d0                	mov    %edx,%eax
f0107e0b:	01 c0                	add    %eax,%eax
f0107e0d:	01 d0                	add    %edx,%eax
f0107e0f:	c1 e0 03             	shl    $0x3,%eax
f0107e12:	01 c8                	add    %ecx,%eax
f0107e14:	05 84 00 00 00       	add    $0x84,%eax
f0107e19:	8b 18                	mov    (%eax),%ebx
f0107e1b:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0107e1f:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0107e23:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0107e27:	83 ec 08             	sub    $0x8,%esp
f0107e2a:	53                   	push   %ebx
f0107e2b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107e2e:	51                   	push   %ecx
f0107e2f:	52                   	push   %edx
f0107e30:	50                   	push   %eax
f0107e31:	68 50 5a 13 f0       	push   $0xf0135a50
f0107e36:	e8 f2 8d ff ff       	call   f0100c2d <cprintf>
f0107e3b:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0107e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e41:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107e47:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107e4a:	75 10                	jne    f0107e5c <env_page_ws_print+0x28c>
			{
				cprintf(" <--");
f0107e4c:	83 ec 0c             	sub    $0xc,%esp
f0107e4f:	68 97 5a 13 f0       	push   $0xf0135a97
f0107e54:	e8 d4 8d ff ff       	call   f0100c2d <cprintf>
f0107e59:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107e5c:	83 ec 0c             	sub    $0xc,%esp
f0107e5f:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0107e64:	e8 c4 8d ff ff       	call   f0100c2d <cprintf>
f0107e69:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107e6c:	ff 45 ec             	incl   -0x14(%ebp)
f0107e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e72:	8b 40 74             	mov    0x74(%eax),%eax
f0107e75:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107e78:	0f 87 88 fe ff ff    	ja     f0107d06 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107e7e:	90                   	nop
f0107e7f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107e82:	c9                   	leave  
f0107e83:	c3                   	ret    

f0107e84 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0107e84:	55                   	push   %ebp
f0107e85:	89 e5                	mov    %esp,%ebp
f0107e87:	53                   	push   %ebx
f0107e88:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0107e8b:	83 ec 0c             	sub    $0xc,%esp
f0107e8e:	68 9c 5a 13 f0       	push   $0xf0135a9c
f0107e93:	e8 95 8d ff ff       	call   f0100c2d <cprintf>
f0107e98:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0107e9b:	83 ec 0c             	sub    $0xc,%esp
f0107e9e:	68 d1 5a 13 f0       	push   $0xf0135ad1
f0107ea3:	e8 85 8d ff ff       	call   f0100c2d <cprintf>
f0107ea8:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107eab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107eb2:	e9 16 01 00 00       	jmp    f0107fcd <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f0107eb7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107eba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ebd:	89 d0                	mov    %edx,%eax
f0107ebf:	01 c0                	add    %eax,%eax
f0107ec1:	01 d0                	add    %edx,%eax
f0107ec3:	c1 e0 03             	shl    $0x3,%eax
f0107ec6:	01 c8                	add    %ecx,%eax
f0107ec8:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107ecd:	8a 00                	mov    (%eax),%al
f0107ecf:	84 c0                	test   %al,%al
f0107ed1:	74 43                	je     f0107f16 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0107ed3:	83 ec 0c             	sub    $0xc,%esp
f0107ed6:	68 27 5a 13 f0       	push   $0xf0135a27
f0107edb:	e8 4d 8d ff ff       	call   f0100c2d <cprintf>
f0107ee0:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0107ee3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ee6:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107eec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107eef:	75 10                	jne    f0107f01 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0107ef1:	83 ec 0c             	sub    $0xc,%esp
f0107ef4:	68 36 5a 13 f0       	push   $0xf0135a36
f0107ef9:	e8 2f 8d ff ff       	call   f0100c2d <cprintf>
f0107efe:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107f01:	83 ec 0c             	sub    $0xc,%esp
f0107f04:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0107f09:	e8 1f 8d ff ff       	call   f0100c2d <cprintf>
f0107f0e:	83 c4 10             	add    $0x10,%esp
			continue;
f0107f11:	e9 b4 00 00 00       	jmp    f0107fca <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0107f16:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f1c:	89 d0                	mov    %edx,%eax
f0107f1e:	01 c0                	add    %eax,%eax
f0107f20:	01 d0                	add    %edx,%eax
f0107f22:	c1 e0 03             	shl    $0x3,%eax
f0107f25:	01 c8                	add    %ecx,%eax
f0107f27:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107f2c:	8b 00                	mov    (%eax),%eax
f0107f2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0107f31:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f37:	89 d0                	mov    %edx,%eax
f0107f39:	01 c0                	add    %eax,%eax
f0107f3b:	01 d0                	add    %edx,%eax
f0107f3d:	c1 e0 03             	shl    $0x3,%eax
f0107f40:	01 c8                	add    %ecx,%eax
f0107f42:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107f47:	8b 00                	mov    (%eax),%eax
f0107f49:	83 ec 04             	sub    $0x4,%esp
f0107f4c:	50                   	push   %eax
f0107f4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107f50:	68 dc 5a 13 f0       	push   $0xf0135adc
f0107f55:	e8 d3 8c ff ff       	call   f0100c2d <cprintf>
f0107f5a:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0107f5d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f63:	89 d0                	mov    %edx,%eax
f0107f65:	01 c0                	add    %eax,%eax
f0107f67:	01 d0                	add    %edx,%eax
f0107f69:	c1 e0 03             	shl    $0x3,%eax
f0107f6c:	01 c8                	add    %ecx,%eax
f0107f6e:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107f73:	8b 18                	mov    (%eax),%ebx
f0107f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f78:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107f7b:	83 ec 08             	sub    $0x8,%esp
f0107f7e:	ff 75 f0             	pushl  -0x10(%ebp)
f0107f81:	50                   	push   %eax
f0107f82:	e8 40 f9 ff ff       	call   f01078c7 <pd_is_table_used>
f0107f87:	83 c4 10             	add    $0x10,%esp
f0107f8a:	83 ec 04             	sub    $0x4,%esp
f0107f8d:	53                   	push   %ebx
f0107f8e:	50                   	push   %eax
f0107f8f:	68 f4 5a 13 f0       	push   $0xf0135af4
f0107f94:	e8 94 8c ff ff       	call   f0100c2d <cprintf>
f0107f99:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0107f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f9f:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107fa5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107fa8:	75 10                	jne    f0107fba <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f0107faa:	83 ec 0c             	sub    $0xc,%esp
f0107fad:	68 97 5a 13 f0       	push   $0xf0135a97
f0107fb2:	e8 76 8c ff ff       	call   f0100c2d <cprintf>
f0107fb7:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0107fba:	83 ec 0c             	sub    $0xc,%esp
f0107fbd:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0107fc2:	e8 66 8c ff ff       	call   f0100c2d <cprintf>
f0107fc7:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107fca:	ff 45 f4             	incl   -0xc(%ebp)
f0107fcd:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107fd1:	0f 86 e0 fe ff ff    	jbe    f0107eb7 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0107fd7:	90                   	nop
f0107fd8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107fdb:	c9                   	leave  
f0107fdc:	c3                   	ret    

f0107fdd <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0107fdd:	55                   	push   %ebp
f0107fde:	89 e5                	mov    %esp,%ebp
f0107fe0:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107fe3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107fea:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0107ff1:	eb 22                	jmp    f0108015 <env_table_ws_get_size+0x38>
f0107ff3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ff6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107ff9:	89 d0                	mov    %edx,%eax
f0107ffb:	01 c0                	add    %eax,%eax
f0107ffd:	01 d0                	add    %edx,%eax
f0107fff:	c1 e0 03             	shl    $0x3,%eax
f0108002:	01 c8                	add    %ecx,%eax
f0108004:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0108009:	8a 00                	mov    (%eax),%al
f010800b:	84 c0                	test   %al,%al
f010800d:	75 03                	jne    f0108012 <env_table_ws_get_size+0x35>
f010800f:	ff 45 f8             	incl   -0x8(%ebp)
f0108012:	ff 45 fc             	incl   -0x4(%ebp)
f0108015:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108019:	7e d8                	jle    f0107ff3 <env_table_ws_get_size+0x16>
	return counter;
f010801b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010801e:	c9                   	leave  
f010801f:	c3                   	ret    

f0108020 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108020:	55                   	push   %ebp
f0108021:	89 e5                	mov    %esp,%ebp
f0108023:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108026:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f010802d:	eb 4e                	jmp    f010807d <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f010802f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108032:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108035:	89 d0                	mov    %edx,%eax
f0108037:	01 c0                	add    %eax,%eax
f0108039:	01 d0                	add    %edx,%eax
f010803b:	c1 e0 03             	shl    $0x3,%eax
f010803e:	01 c8                	add    %ecx,%eax
f0108040:	05 38 d5 01 00       	add    $0x1d538,%eax
f0108045:	8b 00                	mov    (%eax),%eax
f0108047:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010804a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010804d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108052:	89 c2                	mov    %eax,%edx
f0108054:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108057:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010805a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010805d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108062:	39 c2                	cmp    %eax,%edx
f0108064:	75 14                	jne    f010807a <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0108066:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108069:	83 ec 08             	sub    $0x8,%esp
f010806c:	50                   	push   %eax
f010806d:	ff 75 08             	pushl  0x8(%ebp)
f0108070:	e8 bc 00 00 00       	call   f0108131 <env_table_ws_clear_entry>
f0108075:	83 c4 10             	add    $0x10,%esp
			break;
f0108078:	eb 09                	jmp    f0108083 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010807a:	ff 45 f4             	incl   -0xc(%ebp)
f010807d:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108081:	7e ac                	jle    f010802f <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108083:	90                   	nop
f0108084:	c9                   	leave  
f0108085:	c3                   	ret    

f0108086 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108086:	55                   	push   %ebp
f0108087:	89 e5                	mov    %esp,%ebp
f0108089:	53                   	push   %ebx
f010808a:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010808d:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108091:	76 19                	jbe    f01080ac <env_table_ws_set_entry+0x26>
f0108093:	68 18 5b 13 f0       	push   $0xf0135b18
f0108098:	68 3e 59 13 f0       	push   $0xf013593e
f010809d:	68 b6 00 00 00       	push   $0xb6
f01080a2:	68 54 59 13 f0       	push   $0xf0135954
f01080a7:	e8 fa 80 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01080ac:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01080b3:	76 19                	jbe    f01080ce <env_table_ws_set_entry+0x48>
f01080b5:	68 74 59 13 f0       	push   $0xf0135974
f01080ba:	68 3e 59 13 f0       	push   $0xf013593e
f01080bf:	68 b7 00 00 00       	push   $0xb7
f01080c4:	68 54 59 13 f0       	push   $0xf0135954
f01080c9:	e8 d8 80 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01080ce:	8b 45 10             	mov    0x10(%ebp),%eax
f01080d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080d7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01080dc:	89 c1                	mov    %eax,%ecx
f01080de:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01080e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080e4:	89 d0                	mov    %edx,%eax
f01080e6:	01 c0                	add    %eax,%eax
f01080e8:	01 d0                	add    %edx,%eax
f01080ea:	c1 e0 03             	shl    $0x3,%eax
f01080ed:	01 d8                	add    %ebx,%eax
f01080ef:	05 38 d5 01 00       	add    $0x1d538,%eax
f01080f4:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01080f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01080f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080fc:	89 d0                	mov    %edx,%eax
f01080fe:	01 c0                	add    %eax,%eax
f0108100:	01 d0                	add    %edx,%eax
f0108102:	c1 e0 03             	shl    $0x3,%eax
f0108105:	01 c8                	add    %ecx,%eax
f0108107:	05 3c d5 01 00       	add    $0x1d53c,%eax
f010810c:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010810f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108112:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108115:	89 d0                	mov    %edx,%eax
f0108117:	01 c0                	add    %eax,%eax
f0108119:	01 d0                	add    %edx,%eax
f010811b:	c1 e0 03             	shl    $0x3,%eax
f010811e:	01 c8                	add    %ecx,%eax
f0108120:	05 40 d5 01 00       	add    $0x1d540,%eax
f0108125:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f010812b:	90                   	nop
}
f010812c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010812f:	c9                   	leave  
f0108130:	c3                   	ret    

f0108131 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108131:	55                   	push   %ebp
f0108132:	89 e5                	mov    %esp,%ebp
f0108134:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108137:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010813b:	76 19                	jbe    f0108156 <env_table_ws_clear_entry+0x25>
f010813d:	68 18 5b 13 f0       	push   $0xf0135b18
f0108142:	68 3e 59 13 f0       	push   $0xf013593e
f0108147:	68 c2 00 00 00       	push   $0xc2
f010814c:	68 54 59 13 f0       	push   $0xf0135954
f0108151:	e8 50 80 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108156:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108159:	8b 55 0c             	mov    0xc(%ebp),%edx
f010815c:	89 d0                	mov    %edx,%eax
f010815e:	01 c0                	add    %eax,%eax
f0108160:	01 d0                	add    %edx,%eax
f0108162:	c1 e0 03             	shl    $0x3,%eax
f0108165:	01 c8                	add    %ecx,%eax
f0108167:	05 38 d5 01 00       	add    $0x1d538,%eax
f010816c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108172:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108175:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108178:	89 d0                	mov    %edx,%eax
f010817a:	01 c0                	add    %eax,%eax
f010817c:	01 d0                	add    %edx,%eax
f010817e:	c1 e0 03             	shl    $0x3,%eax
f0108181:	01 c8                	add    %ecx,%eax
f0108183:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0108188:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f010818b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010818e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108191:	89 d0                	mov    %edx,%eax
f0108193:	01 c0                	add    %eax,%eax
f0108195:	01 d0                	add    %edx,%eax
f0108197:	c1 e0 03             	shl    $0x3,%eax
f010819a:	01 c8                	add    %ecx,%eax
f010819c:	05 40 d5 01 00       	add    $0x1d540,%eax
f01081a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01081a7:	90                   	nop
f01081a8:	c9                   	leave  
f01081a9:	c3                   	ret    

f01081aa <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01081aa:	55                   	push   %ebp
f01081ab:	89 e5                	mov    %esp,%ebp
f01081ad:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01081b0:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01081b4:	76 19                	jbe    f01081cf <env_table_ws_get_virtual_address+0x25>
f01081b6:	68 18 5b 13 f0       	push   $0xf0135b18
f01081bb:	68 3e 59 13 f0       	push   $0xf013593e
f01081c0:	68 ca 00 00 00       	push   $0xca
f01081c5:	68 54 59 13 f0       	push   $0xf0135954
f01081ca:	e8 d7 7f ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f01081cf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01081d2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081d5:	89 d0                	mov    %edx,%eax
f01081d7:	01 c0                	add    %eax,%eax
f01081d9:	01 d0                	add    %edx,%eax
f01081db:	c1 e0 03             	shl    $0x3,%eax
f01081de:	01 c8                	add    %ecx,%eax
f01081e0:	05 38 d5 01 00       	add    $0x1d538,%eax
f01081e5:	8b 00                	mov    (%eax),%eax
f01081e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01081ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ed:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f01081f2:	c9                   	leave  
f01081f3:	c3                   	ret    

f01081f4 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01081f4:	55                   	push   %ebp
f01081f5:	89 e5                	mov    %esp,%ebp
f01081f7:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01081fa:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01081fe:	76 19                	jbe    f0108219 <env_table_ws_get_time_stamp+0x25>
f0108200:	68 18 5b 13 f0       	push   $0xf0135b18
f0108205:	68 3e 59 13 f0       	push   $0xf013593e
f010820a:	68 d1 00 00 00       	push   $0xd1
f010820f:	68 54 59 13 f0       	push   $0xf0135954
f0108214:	e8 8d 7f ff ff       	call   f01001a6 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108219:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010821c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010821f:	89 d0                	mov    %edx,%eax
f0108221:	01 c0                	add    %eax,%eax
f0108223:	01 d0                	add    %edx,%eax
f0108225:	c1 e0 03             	shl    $0x3,%eax
f0108228:	01 c8                	add    %ecx,%eax
f010822a:	05 40 d5 01 00       	add    $0x1d540,%eax
f010822f:	8b 00                	mov    (%eax),%eax
}
f0108231:	c9                   	leave  
f0108232:	c3                   	ret    

f0108233 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108233:	55                   	push   %ebp
f0108234:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108236:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108239:	8b 55 0c             	mov    0xc(%ebp),%edx
f010823c:	89 d0                	mov    %edx,%eax
f010823e:	01 c0                	add    %eax,%eax
f0108240:	01 d0                	add    %edx,%eax
f0108242:	c1 e0 03             	shl    $0x3,%eax
f0108245:	01 c8                	add    %ecx,%eax
f0108247:	05 3c d5 01 00       	add    $0x1d53c,%eax
f010824c:	8a 00                	mov    (%eax),%al
f010824e:	0f b6 c0             	movzbl %al,%eax
}
f0108251:	5d                   	pop    %ebp
f0108252:	c3                   	ret    

f0108253 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108253:	55                   	push   %ebp
f0108254:	89 e5                	mov    %esp,%ebp
f0108256:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0108259:	83 ec 04             	sub    $0x4,%esp
f010825c:	68 4c 5b 13 f0       	push   $0xf0135b4c
f0108261:	68 e5 00 00 00       	push   $0xe5
f0108266:	68 54 59 13 f0       	push   $0xf0135954
f010826b:	e8 36 7f ff ff       	call   f01001a6 <_panic>

f0108270 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108270:	55                   	push   %ebp
f0108271:	89 e5                	mov    %esp,%ebp
f0108273:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0108276:	83 ec 04             	sub    $0x4,%esp
f0108279:	68 78 5b 13 f0       	push   $0xf0135b78
f010827e:	68 ec 00 00 00       	push   $0xec
f0108283:	68 54 59 13 f0       	push   $0xf0135954
f0108288:	e8 19 7f ff ff       	call   f01001a6 <_panic>

f010828d <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f010828d:	55                   	push   %ebp
f010828e:	89 e5                	mov    %esp,%ebp
f0108290:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108293:	83 ec 04             	sub    $0x4,%esp
f0108296:	68 a8 5b 13 f0       	push   $0xf0135ba8
f010829b:	68 f3 00 00 00       	push   $0xf3
f01082a0:	68 54 59 13 f0       	push   $0xf0135954
f01082a5:	e8 fc 7e ff ff       	call   f01001a6 <_panic>

f01082aa <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01082aa:	55                   	push   %ebp
f01082ab:	89 e5                	mov    %esp,%ebp
f01082ad:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f01082b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01082b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f01082b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082b9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f01082bc:	8b 45 10             	mov    0x10(%ebp),%eax
f01082bf:	25 ff 0f 00 00       	and    $0xfff,%eax
f01082c4:	85 c0                	test   %eax,%eax
f01082c6:	74 11                	je     f01082d9 <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f01082c8:	8b 45 10             	mov    0x10(%ebp),%eax
f01082cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01082ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01082d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f01082d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082dc:	25 ff 0f 00 00       	and    $0xfff,%eax
f01082e1:	85 c0                	test   %eax,%eax
f01082e3:	74 11                	je     f01082f6 <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f01082e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01082eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01082ee:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f01082f6:	8b 45 14             	mov    0x14(%ebp),%eax
f01082f9:	c1 e0 0c             	shl    $0xc,%eax
f01082fc:	89 c2                	mov    %eax,%edx
f01082fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108301:	01 d0                	add    %edx,%eax
f0108303:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108306:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108309:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010830c:	eb 4b                	jmp    f0108359 <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f010830e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108315:	83 ec 04             	sub    $0x4,%esp
f0108318:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010831b:	50                   	push   %eax
f010831c:	ff 75 ec             	pushl  -0x14(%ebp)
f010831f:	ff 75 08             	pushl  0x8(%ebp)
f0108322:	e8 42 e6 ff ff       	call   f0106969 <get_page_table>
f0108327:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f010832a:	83 ec 04             	sub    $0x4,%esp
f010832d:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108330:	50                   	push   %eax
f0108331:	ff 75 ec             	pushl  -0x14(%ebp)
f0108334:	ff 75 08             	pushl  0x8(%ebp)
f0108337:	e8 c5 e8 ff ff       	call   f0106c01 <get_frame_info>
f010833c:	83 c4 10             	add    $0x10,%esp
f010833f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108342:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108346:	74 0a                	je     f0108352 <cut_paste_pages+0xa8>
			return -1;
f0108348:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010834d:	e9 d4 00 00 00       	jmp    f0108426 <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108352:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108359:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010835c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010835f:	72 ad                	jb     f010830e <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108364:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108367:	e9 a9 00 00 00       	jmp    f0108415 <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f010836c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108373:	83 ec 04             	sub    $0x4,%esp
f0108376:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108379:	50                   	push   %eax
f010837a:	ff 75 e8             	pushl  -0x18(%ebp)
f010837d:	ff 75 08             	pushl  0x8(%ebp)
f0108380:	e8 e4 e5 ff ff       	call   f0106969 <get_page_table>
f0108385:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f0108388:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010838b:	85 c0                	test   %eax,%eax
f010838d:	75 14                	jne    f01083a3 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f010838f:	83 ec 08             	sub    $0x8,%esp
f0108392:	ff 75 e8             	pushl  -0x18(%ebp)
f0108395:	ff 75 08             	pushl  0x8(%ebp)
f0108398:	e8 d2 e6 ff ff       	call   f0106a6f <create_page_table>
f010839d:	83 c4 10             	add    $0x10,%esp
f01083a0:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01083a3:	83 ec 04             	sub    $0x4,%esp
f01083a6:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01083a9:	50                   	push   %eax
f01083aa:	ff 75 e8             	pushl  -0x18(%ebp)
f01083ad:	ff 75 08             	pushl  0x8(%ebp)
f01083b0:	e8 4c e8 ff ff       	call   f0106c01 <get_frame_info>
f01083b5:	83 c4 10             	add    $0x10,%esp
f01083b8:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f01083bb:	83 ec 08             	sub    $0x8,%esp
f01083be:	ff 75 f0             	pushl  -0x10(%ebp)
f01083c1:	ff 75 08             	pushl  0x8(%ebp)
f01083c4:	e8 df f3 ff ff       	call   f01077a8 <pt_get_page_permissions>
f01083c9:	83 c4 10             	add    $0x10,%esp
f01083cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f01083cf:	83 ec 08             	sub    $0x8,%esp
f01083d2:	ff 75 f0             	pushl  -0x10(%ebp)
f01083d5:	ff 75 08             	pushl  0x8(%ebp)
f01083d8:	e8 94 e8 ff ff       	call   f0106c71 <unmap_frame>
f01083dd:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f01083e0:	83 ec 0c             	sub    $0xc,%esp
f01083e3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f01083e6:	50                   	push   %eax
f01083e7:	e8 be e3 ff ff       	call   f01067aa <allocate_frame>
f01083ec:	83 c4 10             	add    $0x10,%esp
f01083ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f01083f2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01083f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01083f8:	ff 75 e8             	pushl  -0x18(%ebp)
f01083fb:	50                   	push   %eax
f01083fc:	ff 75 08             	pushl  0x8(%ebp)
f01083ff:	e8 3e e7 ff ff       	call   f0106b42 <map_frame>
f0108404:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f0108407:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f010840e:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108415:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108418:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010841b:	0f 82 4b ff ff ff    	jb     f010836c <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108421:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108426:	c9                   	leave  
f0108427:	c3                   	ret    

f0108428 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108428:	55                   	push   %ebp
f0108429:	89 e5                	mov    %esp,%ebp
f010842b:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f010842e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f0108435:	8b 45 10             	mov    0x10(%ebp),%eax
f0108438:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f010843b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010843e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108441:	8b 45 10             	mov    0x10(%ebp),%eax
f0108444:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108447:	e9 d1 00 00 00       	jmp    f010851d <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f010844c:	83 ec 04             	sub    $0x4,%esp
f010844f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108452:	50                   	push   %eax
f0108453:	ff 75 f0             	pushl  -0x10(%ebp)
f0108456:	ff 75 08             	pushl  0x8(%ebp)
f0108459:	e8 0b e5 ff ff       	call   f0106969 <get_page_table>
f010845e:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108461:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108464:	85 c0                	test   %eax,%eax
f0108466:	75 14                	jne    f010847c <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f0108468:	83 ec 08             	sub    $0x8,%esp
f010846b:	ff 75 f0             	pushl  -0x10(%ebp)
f010846e:	ff 75 08             	pushl  0x8(%ebp)
f0108471:	e8 f9 e5 ff ff       	call   f0106a6f <create_page_table>
f0108476:	83 c4 10             	add    $0x10,%esp
f0108479:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f010847c:	83 ec 04             	sub    $0x4,%esp
f010847f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108482:	50                   	push   %eax
f0108483:	ff 75 f0             	pushl  -0x10(%ebp)
f0108486:	ff 75 08             	pushl  0x8(%ebp)
f0108489:	e8 73 e7 ff ff       	call   f0106c01 <get_frame_info>
f010848e:	83 c4 10             	add    $0x10,%esp
f0108491:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f0108494:	83 ec 08             	sub    $0x8,%esp
f0108497:	ff 75 f0             	pushl  -0x10(%ebp)
f010849a:	ff 75 08             	pushl  0x8(%ebp)
f010849d:	e8 06 f3 ff ff       	call   f01077a8 <pt_get_page_permissions>
f01084a2:	83 c4 10             	add    $0x10,%esp
f01084a5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f01084a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01084ab:	85 c0                	test   %eax,%eax
f01084ad:	74 14                	je     f01084c3 <copy_paste_chunk+0x9b>
f01084af:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01084b2:	83 e0 02             	and    $0x2,%eax
f01084b5:	85 c0                	test   %eax,%eax
f01084b7:	75 0a                	jne    f01084c3 <copy_paste_chunk+0x9b>
			return -1;
f01084b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01084be:	e9 a7 00 00 00       	jmp    f010856a <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f01084c3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01084c6:	85 c0                	test   %eax,%eax
f01084c8:	75 45                	jne    f010850f <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f01084ca:	83 ec 08             	sub    $0x8,%esp
f01084cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01084d0:	ff 75 08             	pushl  0x8(%ebp)
f01084d3:	e8 d0 f2 ff ff       	call   f01077a8 <pt_get_page_permissions>
f01084d8:	83 c4 10             	add    $0x10,%esp
f01084db:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f01084de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01084e1:	83 e0 04             	and    $0x4,%eax
f01084e4:	83 c8 02             	or     $0x2,%eax
f01084e7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f01084ea:	83 ec 0c             	sub    $0xc,%esp
f01084ed:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01084f0:	50                   	push   %eax
f01084f1:	e8 b4 e2 ff ff       	call   f01067aa <allocate_frame>
f01084f6:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f01084f9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01084fc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01084ff:	52                   	push   %edx
f0108500:	ff 75 f0             	pushl  -0x10(%ebp)
f0108503:	50                   	push   %eax
f0108504:	ff 75 08             	pushl  0x8(%ebp)
f0108507:	e8 36 e6 ff ff       	call   f0106b42 <map_frame>
f010850c:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f010850f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108516:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010851d:	8b 55 10             	mov    0x10(%ebp),%edx
f0108520:	8b 45 14             	mov    0x14(%ebp),%eax
f0108523:	01 d0                	add    %edx,%eax
f0108525:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108528:	0f 87 1e ff ff ff    	ja     f010844c <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f010852e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108531:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f0108534:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108537:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f010853a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010853d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108540:	eb 16                	jmp    f0108558 <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108542:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108545:	8b 10                	mov    (%eax),%edx
f0108547:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010854a:	89 10                	mov    %edx,(%eax)
	    frame++;
f010854c:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108550:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108554:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f0108558:	8b 55 0c             	mov    0xc(%ebp),%edx
f010855b:	8b 45 14             	mov    0x14(%ebp),%eax
f010855e:	01 d0                	add    %edx,%eax
f0108560:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108563:	77 dd                	ja     f0108542 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108565:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010856a:	c9                   	leave  
f010856b:	c3                   	ret    

f010856c <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f010856c:	55                   	push   %ebp
f010856d:	89 e5                	mov    %esp,%ebp
f010856f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f0108572:	83 ec 04             	sub    $0x4,%esp
f0108575:	68 d4 5b 13 f0       	push   $0xf0135bd4
f010857a:	6a 7d                	push   $0x7d
f010857c:	68 fe 5b 13 f0       	push   $0xf0135bfe
f0108581:	e8 20 7c ff ff       	call   f01001a6 <_panic>

f0108586 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108586:	55                   	push   %ebp
f0108587:	89 e5                	mov    %esp,%ebp
f0108589:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f010858c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108593:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108596:	8b 45 10             	mov    0x10(%ebp),%eax
f0108599:	01 d0                	add    %edx,%eax
f010859b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f010859e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f01085a5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f01085ac:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f01085b3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f01085ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01085c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01085c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01085c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f01085cb:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01085d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01085d8:	01 d0                	add    %edx,%eax
f01085da:	48                   	dec    %eax
f01085db:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01085de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01085e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01085e6:	f7 75 dc             	divl   -0x24(%ebp)
f01085e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01085ec:	29 d0                	sub    %edx,%eax
f01085ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f01085f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01085f7:	e9 94 00 00 00       	jmp    f0108690 <allocate_chunk+0x10a>
	{
		new_virtual_address=count;
f01085fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01085ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108602:	83 ec 04             	sub    $0x4,%esp
f0108605:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108608:	50                   	push   %eax
f0108609:	ff 75 d4             	pushl  -0x2c(%ebp)
f010860c:	ff 75 08             	pushl  0x8(%ebp)
f010860f:	e8 55 e3 ff ff       	call   f0106969 <get_page_table>
f0108614:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108617:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010861a:	85 c0                	test   %eax,%eax
f010861c:	75 14                	jne    f0108632 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f010861e:	83 ec 08             	sub    $0x8,%esp
f0108621:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108624:	ff 75 08             	pushl  0x8(%ebp)
f0108627:	e8 43 e4 ff ff       	call   f0106a6f <create_page_table>
f010862c:	83 c4 10             	add    $0x10,%esp
f010862f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108632:	83 ec 04             	sub    $0x4,%esp
f0108635:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108638:	50                   	push   %eax
f0108639:	ff 75 d4             	pushl  -0x2c(%ebp)
f010863c:	ff 75 08             	pushl  0x8(%ebp)
f010863f:	e8 bd e5 ff ff       	call   f0106c01 <get_frame_info>
f0108644:	83 c4 10             	add    $0x10,%esp
f0108647:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f010864a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010864d:	85 c0                	test   %eax,%eax
f010864f:	74 07                	je     f0108658 <allocate_chunk+0xd2>
		{
			return -1;
f0108651:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108656:	eb 49                	jmp    f01086a1 <allocate_chunk+0x11b>
		}
	    result= allocate_frame(&sb_chunck);
f0108658:	83 ec 0c             	sub    $0xc,%esp
f010865b:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010865e:	50                   	push   %eax
f010865f:	e8 46 e1 ff ff       	call   f01067aa <allocate_frame>
f0108664:	83 c4 10             	add    $0x10,%esp
f0108667:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f010866a:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f010866e:	74 19                	je     f0108689 <allocate_chunk+0x103>
		{
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108670:	8b 55 14             	mov    0x14(%ebp),%edx
f0108673:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108676:	52                   	push   %edx
f0108677:	ff 75 d4             	pushl  -0x2c(%ebp)
f010867a:	50                   	push   %eax
f010867b:	ff 75 08             	pushl  0x8(%ebp)
f010867e:	e8 bf e4 ff ff       	call   f0106b42 <map_frame>
f0108683:	83 c4 10             	add    $0x10,%esp
f0108686:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108689:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108690:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108693:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108696:	0f 82 60 ff ff ff    	jb     f01085fc <allocate_chunk+0x76>
		if(result != E_NO_MEM)
		{
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f010869c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01086a1:	c9                   	leave  
f01086a2:	c3                   	ret    

f01086a3 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f01086a3:	55                   	push   %ebp
f01086a4:	89 e5                	mov    %esp,%ebp
f01086a6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f01086a9:	83 ec 04             	sub    $0x4,%esp
f01086ac:	68 1c 5c 13 f0       	push   $0xf0135c1c
f01086b1:	68 b1 00 00 00       	push   $0xb1
f01086b6:	68 fe 5b 13 f0       	push   $0xf0135bfe
f01086bb:	e8 e6 7a ff ff       	call   f01001a6 <_panic>

f01086c0 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f01086c0:	55                   	push   %ebp
f01086c1:	89 e5                	mov    %esp,%ebp
f01086c3:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f01086c6:	83 ec 04             	sub    $0x4,%esp
f01086c9:	68 54 5c 13 f0       	push   $0xf0135c54
f01086ce:	68 c0 00 00 00       	push   $0xc0
f01086d3:	68 fe 5b 13 f0       	push   $0xf0135bfe
f01086d8:	e8 c9 7a ff ff       	call   f01001a6 <_panic>

f01086dd <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01086dd:	55                   	push   %ebp
f01086de:	89 e5                	mov    %esp,%ebp
f01086e0:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01086e3:	83 ec 04             	sub    $0x4,%esp
f01086e6:	68 8c 5c 13 f0       	push   $0xf0135c8c
f01086eb:	68 d5 00 00 00       	push   $0xd5
f01086f0:	68 fe 5b 13 f0       	push   $0xf0135bfe
f01086f5:	e8 ac 7a ff ff       	call   f01001a6 <_panic>

f01086fa <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01086fa:	55                   	push   %ebp
f01086fb:	89 e5                	mov    %esp,%ebp
f01086fd:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108700:	83 ec 04             	sub    $0x4,%esp
f0108703:	68 bc 5c 13 f0       	push   $0xf0135cbc
f0108708:	68 df 00 00 00       	push   $0xdf
f010870d:	68 fe 5b 13 f0       	push   $0xf0135bfe
f0108712:	e8 8f 7a ff ff       	call   f01001a6 <_panic>

f0108717 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108717:	55                   	push   %ebp
f0108718:	89 e5                	mov    %esp,%ebp
f010871a:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f010871d:	83 ec 04             	sub    $0x4,%esp
f0108720:	68 e8 5c 13 f0       	push   $0xf0135ce8
f0108725:	68 ed 00 00 00       	push   $0xed
f010872a:	68 fe 5b 13 f0       	push   $0xf0135bfe
f010872f:	e8 72 7a ff ff       	call   f01001a6 <_panic>

f0108734 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108734:	55                   	push   %ebp
f0108735:	89 e5                	mov    %esp,%ebp
f0108737:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f010873a:	83 ec 04             	sub    $0x4,%esp
f010873d:	68 28 5d 13 f0       	push   $0xf0135d28
f0108742:	68 fd 00 00 00       	push   $0xfd
f0108747:	68 fe 5b 13 f0       	push   $0xf0135bfe
f010874c:	e8 55 7a ff ff       	call   f01001a6 <_panic>

f0108751 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108751:	55                   	push   %ebp
f0108752:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108754:	8b 45 08             	mov    0x8(%ebp),%eax
f0108757:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f010875d:	29 d0                	sub    %edx,%eax
f010875f:	c1 f8 03             	sar    $0x3,%eax
f0108762:	89 c2                	mov    %eax,%edx
f0108764:	89 d0                	mov    %edx,%eax
f0108766:	c1 e0 02             	shl    $0x2,%eax
f0108769:	01 d0                	add    %edx,%eax
f010876b:	c1 e0 02             	shl    $0x2,%eax
f010876e:	01 d0                	add    %edx,%eax
f0108770:	c1 e0 02             	shl    $0x2,%eax
f0108773:	01 d0                	add    %edx,%eax
f0108775:	89 c1                	mov    %eax,%ecx
f0108777:	c1 e1 08             	shl    $0x8,%ecx
f010877a:	01 c8                	add    %ecx,%eax
f010877c:	89 c1                	mov    %eax,%ecx
f010877e:	c1 e1 10             	shl    $0x10,%ecx
f0108781:	01 c8                	add    %ecx,%eax
f0108783:	01 c0                	add    %eax,%eax
f0108785:	01 d0                	add    %edx,%eax
}
f0108787:	5d                   	pop    %ebp
f0108788:	c3                   	ret    

f0108789 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108789:	55                   	push   %ebp
f010878a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010878c:	ff 75 08             	pushl  0x8(%ebp)
f010878f:	e8 bd ff ff ff       	call   f0108751 <to_frame_number>
f0108794:	83 c4 04             	add    $0x4,%esp
f0108797:	c1 e0 0c             	shl    $0xc,%eax
}
f010879a:	c9                   	leave  
f010879b:	c3                   	ret    

f010879c <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010879c:	55                   	push   %ebp
f010879d:	89 e5                	mov    %esp,%ebp
f010879f:	57                   	push   %edi
f01087a0:	56                   	push   %esi
f01087a1:	53                   	push   %ebx
f01087a2:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f01087a8:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f01087af:	83 ec 0c             	sub    $0xc,%esp
f01087b2:	ff 75 08             	pushl  0x8(%ebp)
f01087b5:	e8 c8 22 00 00       	call   f010aa82 <get_user_program_info>
f01087ba:	83 c4 10             	add    $0x10,%esp
f01087bd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f01087c0:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01087c4:	75 0a                	jne    f01087d0 <env_create+0x34>
f01087c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01087cb:	e9 8f 0c 00 00       	jmp    f010945f <env_create+0xcc3>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f01087d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01087d3:	8b 40 08             	mov    0x8(%eax),%eax
f01087d6:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01087d9:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%ebp)
f01087e0:	00 00 00 
	if(allocate_environment(&e) < 0)
f01087e3:	83 ec 0c             	sub    $0xc,%esp
f01087e6:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01087ec:	50                   	push   %eax
f01087ed:	e8 32 10 00 00       	call   f0109824 <allocate_environment>
f01087f2:	83 c4 10             	add    $0x10,%esp
f01087f5:	85 c0                	test   %eax,%eax
f01087f7:	79 0a                	jns    f0108803 <env_create+0x67>
	{
		return 0;
f01087f9:	b8 00 00 00 00       	mov    $0x0,%eax
f01087fe:	e9 5c 0c 00 00       	jmp    f010945f <env_create+0xcc3>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108803:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108806:	8b 00                	mov    (%eax),%eax
f0108808:	83 ec 0c             	sub    $0xc,%esp
f010880b:	50                   	push   %eax
f010880c:	e8 44 80 02 00       	call   f0130855 <strlen>
f0108811:	83 c4 10             	add    $0x10,%esp
f0108814:	83 f8 3f             	cmp    $0x3f,%eax
f0108817:	7f 20                	jg     f0108839 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108819:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010881c:	8b 00                	mov    (%eax),%eax
f010881e:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108824:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010882a:	83 ec 08             	sub    $0x8,%esp
f010882d:	50                   	push   %eax
f010882e:	52                   	push   %edx
f010882f:	e8 70 80 02 00       	call   f01308a4 <strcpy>
f0108834:	83 c4 10             	add    $0x10,%esp
f0108837:	eb 20                	jmp    f0108859 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108839:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010883c:	8b 00                	mov    (%eax),%eax
f010883e:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108844:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010884a:	83 ec 04             	sub    $0x4,%esp
f010884d:	6a 3f                	push   $0x3f
f010884f:	50                   	push   %eax
f0108850:	52                   	push   %edx
f0108851:	e8 7c 80 02 00       	call   f01308d2 <strncpy>
f0108856:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108859:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0108860:	00 00 00 

		allocate_frame(&p) ;
f0108863:	83 ec 0c             	sub    $0xc,%esp
f0108866:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010886c:	50                   	push   %eax
f010886d:	e8 38 df ff ff       	call   f01067aa <allocate_frame>
f0108872:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108875:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010887b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108881:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0108887:	83 ec 0c             	sub    $0xc,%esp
f010888a:	50                   	push   %eax
f010888b:	e8 f9 fe ff ff       	call   f0108789 <to_physical_address>
f0108890:	83 c4 10             	add    $0x10,%esp
f0108893:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108896:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108899:	c1 e8 0c             	shr    $0xc,%eax
f010889c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010889f:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f01088a4:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f01088a7:	72 17                	jb     f01088c0 <env_create+0x124>
f01088a9:	ff 75 b0             	pushl  -0x50(%ebp)
f01088ac:	68 54 5d 13 f0       	push   $0xf0135d54
f01088b1:	68 8d 00 00 00       	push   $0x8d
f01088b6:	68 83 5d 13 f0       	push   $0xf0135d83
f01088bb:	e8 e6 78 ff ff       	call   f01001a6 <_panic>
f01088c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01088c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01088c8:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f01088cb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01088d1:	83 ec 0c             	sub    $0xc,%esp
f01088d4:	50                   	push   %eax
f01088d5:	e8 af fe ff ff       	call   f0108789 <to_physical_address>
f01088da:	83 c4 10             	add    $0x10,%esp
f01088dd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f01088e0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01088e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088e9:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01088ec:	83 ec 0c             	sub    $0xc,%esp
f01088ef:	6a 02                	push   $0x2
f01088f1:	e8 a1 4d 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f01088f6:	83 c4 10             	add    $0x10,%esp
f01088f9:	85 c0                	test   %eax,%eax
f01088fb:	74 21                	je     f010891e <env_create+0x182>
	{
		e->SecondListSize = LRU_second_list_size;
f01088fd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108903:	8b 55 10             	mov    0x10(%ebp),%edx
f0108906:	89 90 a4 ea 01 00    	mov    %edx,0x1eaa4(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f010890c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108912:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108915:	2b 55 10             	sub    0x10(%ebp),%edx
f0108918:	89 90 a0 ea 01 00    	mov    %edx,0x1eaa0(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f010891e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108922:	75 12                	jne    f0108936 <env_create+0x19a>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108924:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010892a:	c7 80 5c da 01 00 0a 	movl   $0xa,0x1da5c(%eax)
f0108931:	00 00 00 
f0108934:	eb 0f                	jmp    f0108945 <env_create+0x1a9>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108936:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010893c:	8b 55 14             	mov    0x14(%ebp),%edx
f010893f:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108945:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010894b:	83 ec 04             	sub    $0x4,%esp
f010894e:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108951:	ff 75 a8             	pushl  -0x58(%ebp)
f0108954:	50                   	push   %eax
f0108955:	e8 ed 16 00 00       	call   f010a047 <initialize_environment>
f010895a:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010895d:	0f 20 d8             	mov    %cr3,%eax
f0108960:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108963:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108966:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108969:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010896f:	8b 40 60             	mov    0x60(%eax),%eax
f0108972:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108978:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010897e:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108981:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108988:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f010898f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108995:	8b 40 74             	mov    0x74(%eax),%eax
f0108998:	48                   	dec    %eax
f0108999:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f010899c:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
f01089a3:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01089a6:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f01089ac:	83 ec 08             	sub    $0x8,%esp
f01089af:	ff 75 b8             	pushl  -0x48(%ebp)
f01089b2:	50                   	push   %eax
f01089b3:	e8 ff 1d 00 00       	call   f010a7b7 <PROGRAM_SEGMENT_FIRST>
f01089b8:	83 c4 0c             	add    $0xc,%esp
f01089bb:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f01089c1:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f01089c7:	b9 05 00 00 00       	mov    $0x5,%ecx
f01089cc:	89 c7                	mov    %eax,%edi
f01089ce:	89 d6                	mov    %edx,%esi
f01089d0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01089d2:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f01089d8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01089db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01089de:	8b 40 10             	mov    0x10(%eax),%eax
f01089e1:	83 f8 ff             	cmp    $0xffffffff,%eax
f01089e4:	75 07                	jne    f01089ed <env_create+0x251>
f01089e6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01089ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01089f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089f3:	e9 24 03 00 00       	jmp    f0108d1c <env_create+0x580>
	{
		segment_counter++;
f01089f8:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f01089fb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0108a02:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108a05:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a0b:	83 ec 0c             	sub    $0xc,%esp
f0108a0e:	8d 95 40 ff ff ff    	lea    -0xc0(%ebp),%edx
f0108a14:	52                   	push   %edx
f0108a15:	ff 75 dc             	pushl  -0x24(%ebp)
f0108a18:	8d 95 24 ff ff ff    	lea    -0xdc(%ebp),%edx
f0108a1e:	52                   	push   %edx
f0108a1f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108a22:	50                   	push   %eax
f0108a23:	e8 f4 0e 00 00       	call   f010991c <program_segment_alloc_map_copy_workingset>
f0108a28:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108a2b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108a31:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108a34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a37:	8b 00                	mov    (%eax),%eax
f0108a39:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108a3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a3f:	8b 40 0c             	mov    0xc(%eax),%eax
f0108a42:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108a45:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108a48:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108a4b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108a4e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a53:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108a56:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108a5d:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108a60:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108a63:	01 d0                	add    %edx,%eax
f0108a65:	48                   	dec    %eax
f0108a66:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108a69:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108a6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0108a71:	f7 75 84             	divl   -0x7c(%ebp)
f0108a74:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108a77:	29 d0                	sub    %edx,%eax
f0108a79:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108a7f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108a82:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108a85:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108a8b:	a1 c0 1e 6c f0       	mov    0xf06c1ec0,%eax
f0108a90:	83 ec 04             	sub    $0x4,%esp
f0108a93:	68 00 10 00 00       	push   $0x1000
f0108a98:	6a 00                	push   $0x0
f0108a9a:	50                   	push   %eax
f0108a9b:	e8 a3 7f 02 00       	call   f0130a43 <memset>
f0108aa0:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108aa3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108aa6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108aa9:	8b 15 c0 1e 6c f0    	mov    0xf06c1ec0,%edx
f0108aaf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108ab5:	01 d0                	add    %edx,%eax
f0108ab7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108aba:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108abd:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108ac0:	eb 13                	jmp    f0108ad5 <env_create+0x339>
		{
			*dst_ptr = *src_ptr ;
f0108ac2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108ac5:	8a 10                	mov    (%eax),%dl
f0108ac7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108aca:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108acc:	ff 45 cc             	incl   -0x34(%ebp)
f0108acf:	ff 45 d4             	incl   -0x2c(%ebp)
f0108ad2:	ff 45 d0             	incl   -0x30(%ebp)
f0108ad5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108ad8:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0108ade:	72 e2                	jb     f0108ac2 <env_create+0x326>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108ae0:	8b 15 c0 1e 6c f0    	mov    0xf06c1ec0,%edx
f0108ae6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108aec:	83 ec 04             	sub    $0x4,%esp
f0108aef:	52                   	push   %edx
f0108af0:	ff 75 88             	pushl  -0x78(%ebp)
f0108af3:	50                   	push   %eax
f0108af4:	e8 23 aa ff ff       	call   f010351c <pf_add_env_page>
f0108af9:	83 c4 10             	add    $0x10,%esp
f0108afc:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108aff:	75 17                	jne    f0108b18 <env_create+0x37c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108b01:	83 ec 04             	sub    $0x4,%esp
f0108b04:	68 a0 5d 13 f0       	push   $0xf0135da0
f0108b09:	68 e1 00 00 00       	push   $0xe1
f0108b0e:	68 83 5d 13 f0       	push   $0xf0135d83
f0108b13:	e8 8e 76 ff ff       	call   f01001a6 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0108b18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b1b:	8b 50 04             	mov    0x4(%eax),%edx
f0108b1e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108b21:	01 d0                	add    %edx,%eax
f0108b23:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0108b29:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0108b2f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b34:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0108b3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b3d:	8b 50 04             	mov    0x4(%eax),%edx
f0108b40:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108b43:	01 d0                	add    %edx,%eax
f0108b45:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108b4b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108b51:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108b54:	eb 43                	jmp    f0108b99 <env_create+0x3fd>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108b56:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108b59:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b5f:	83 ec 04             	sub    $0x4,%esp
f0108b62:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b65:	52                   	push   %edx
f0108b66:	50                   	push   %eax
f0108b67:	e8 b0 a9 ff ff       	call   f010351c <pf_add_env_page>
f0108b6c:	83 c4 10             	add    $0x10,%esp
f0108b6f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108b72:	75 17                	jne    f0108b8b <env_create+0x3ef>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108b74:	83 ec 04             	sub    $0x4,%esp
f0108b77:	68 a0 5d 13 f0       	push   $0xf0135da0
f0108b7c:	68 ee 00 00 00       	push   $0xee
f0108b81:	68 83 5d 13 f0       	push   $0xf0135d83
f0108b86:	e8 1b 76 ff ff       	call   f01001a6 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108b8b:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108b92:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108b99:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b9c:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0108ba2:	72 b2                	jb     f0108b56 <env_create+0x3ba>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0108ba4:	a1 c0 1e 6c f0       	mov    0xf06c1ec0,%eax
f0108ba9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0108bac:	83 ec 04             	sub    $0x4,%esp
f0108baf:	68 00 10 00 00       	push   $0x1000
f0108bb4:	6a 00                	push   $0x0
f0108bb6:	ff 75 d0             	pushl  -0x30(%ebp)
f0108bb9:	e8 85 7e 02 00       	call   f0130a43 <memset>
f0108bbe:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108bc1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0108bc7:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108bca:	eb 13                	jmp    f0108bdf <env_create+0x443>
		{
			*dst_ptr = *src_ptr;
f0108bcc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108bcf:	8a 10                	mov    (%eax),%dl
f0108bd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bd4:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108bd6:	ff 45 cc             	incl   -0x34(%ebp)
f0108bd9:	ff 45 d4             	incl   -0x2c(%ebp)
f0108bdc:	ff 45 d0             	incl   -0x30(%ebp)
f0108bdf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108be2:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0108be8:	72 e2                	jb     f0108bcc <env_create+0x430>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108bea:	8b 15 c0 1e 6c f0    	mov    0xf06c1ec0,%edx
f0108bf0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bf6:	83 ec 04             	sub    $0x4,%esp
f0108bf9:	52                   	push   %edx
f0108bfa:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0108c00:	50                   	push   %eax
f0108c01:	e8 16 a9 ff ff       	call   f010351c <pf_add_env_page>
f0108c06:	83 c4 10             	add    $0x10,%esp
f0108c09:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108c0c:	75 17                	jne    f0108c25 <env_create+0x489>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108c0e:	83 ec 04             	sub    $0x4,%esp
f0108c11:	68 a0 5d 13 f0       	push   $0xf0135da0
f0108c16:	68 fd 00 00 00       	push   $0xfd
f0108c1b:	68 83 5d 13 f0       	push   $0xf0135d83
f0108c20:	e8 81 75 ff ff       	call   f01001a6 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0108c25:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0108c2c:	10 00 00 
f0108c2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c32:	8b 50 04             	mov    0x4(%eax),%edx
f0108c35:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108c38:	01 c2                	add    %eax,%edx
f0108c3a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0108c40:	01 d0                	add    %edx,%eax
f0108c42:	48                   	dec    %eax
f0108c43:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0108c49:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108c4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c54:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0108c5a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108c60:	29 d0                	sub    %edx,%eax
f0108c62:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0108c65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c68:	8b 50 08             	mov    0x8(%eax),%edx
f0108c6b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108c6e:	01 d0                	add    %edx,%eax
f0108c70:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0108c73:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108c79:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0108c80:	eb 41                	jmp    f0108cc3 <env_create+0x527>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0108c82:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c88:	83 ec 04             	sub    $0x4,%esp
f0108c8b:	6a 01                	push   $0x1
f0108c8d:	ff 75 c8             	pushl  -0x38(%ebp)
f0108c90:	50                   	push   %eax
f0108c91:	e8 55 a7 ff ff       	call   f01033eb <pf_add_empty_env_page>
f0108c96:	83 c4 10             	add    $0x10,%esp
f0108c99:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108c9c:	75 17                	jne    f0108cb5 <env_create+0x519>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108c9e:	83 ec 04             	sub    $0x4,%esp
f0108ca1:	68 a0 5d 13 f0       	push   $0xf0135da0
f0108ca6:	68 0a 01 00 00       	push   $0x10a
f0108cab:	68 83 5d 13 f0       	push   $0xf0135d83
f0108cb0:	e8 f1 74 ff ff       	call   f01001a6 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108cb5:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108cbc:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0108cc3:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0108cca:	10 00 00 
f0108ccd:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0108cd3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0108cd9:	01 d0                	add    %edx,%eax
f0108cdb:	48                   	dec    %eax
f0108cdc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0108ce2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108ce8:	ba 00 00 00 00       	mov    $0x0,%edx
f0108ced:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0108cf3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108cf9:	29 d0                	sub    %edx,%eax
f0108cfb:	89 c2                	mov    %eax,%edx
f0108cfd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108d00:	39 c2                	cmp    %eax,%edx
f0108d02:	0f 87 7a ff ff ff    	ja     f0108c82 <env_create+0x4e6>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108d08:	83 ec 08             	sub    $0x8,%esp
f0108d0b:	ff 75 b8             	pushl  -0x48(%ebp)
f0108d0e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108d11:	e8 96 19 00 00       	call   f010a6ac <PROGRAM_SEGMENT_NEXT>
f0108d16:	83 c4 10             	add    $0x10,%esp
f0108d19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108d1c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108d20:	0f 85 d2 fc ff ff    	jne    f01089f8 <env_create+0x25c>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0108d26:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0108d2d:	e9 9c 00 00 00       	jmp    f0108dce <env_create+0x632>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0108d32:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108d38:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108d3b:	89 d0                	mov    %edx,%eax
f0108d3d:	01 c0                	add    %eax,%eax
f0108d3f:	01 d0                	add    %edx,%eax
f0108d41:	c1 e0 03             	shl    $0x3,%eax
f0108d44:	01 c8                	add    %ecx,%eax
f0108d46:	83 c0 7c             	add    $0x7c,%eax
f0108d49:	8a 00                	mov    (%eax),%al
f0108d4b:	84 c0                	test   %al,%al
f0108d4d:	75 7c                	jne    f0108dcb <env_create+0x62f>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108d4f:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108d55:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108d58:	89 d0                	mov    %edx,%eax
f0108d5a:	01 c0                	add    %eax,%eax
f0108d5c:	01 d0                	add    %edx,%eax
f0108d5e:	c1 e0 03             	shl    $0x3,%eax
f0108d61:	01 c8                	add    %ecx,%eax
f0108d63:	83 c0 78             	add    $0x78,%eax
f0108d66:	8b 00                	mov    (%eax),%eax
f0108d68:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0108d6e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d74:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108d77:	83 ec 04             	sub    $0x4,%esp
f0108d7a:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108d80:	52                   	push   %edx
f0108d81:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0108d87:	50                   	push   %eax
f0108d88:	e8 dc db ff ff       	call   f0106969 <get_page_table>
f0108d8d:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0108d90:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108d96:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0108d9c:	c1 ea 0c             	shr    $0xc,%edx
f0108d9f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108da5:	c1 e2 02             	shl    $0x2,%edx
f0108da8:	01 d0                	add    %edx,%eax
f0108daa:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0108db0:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0108db6:	c1 e9 0c             	shr    $0xc,%ecx
f0108db9:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108dbf:	c1 e1 02             	shl    $0x2,%ecx
f0108dc2:	01 ca                	add    %ecx,%edx
f0108dc4:	8b 12                	mov    (%edx),%edx
f0108dc6:	83 e2 bf             	and    $0xffffffbf,%edx
f0108dc9:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0108dcb:	ff 45 c4             	incl   -0x3c(%ebp)
f0108dce:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108dd4:	8b 50 74             	mov    0x74(%eax),%edx
f0108dd7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108dda:	39 c2                	cmp    %eax,%edx
f0108ddc:	0f 87 50 ff ff ff    	ja     f0108d32 <env_create+0x596>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0108de2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108de5:	8b 50 08             	mov    0x8(%eax),%edx
f0108de8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108dee:	83 ec 08             	sub    $0x8,%esp
f0108df1:	52                   	push   %edx
f0108df2:	50                   	push   %eax
f0108df3:	e8 3a 18 00 00       	call   f010a632 <set_environment_entry_point>
f0108df8:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0108dfb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e01:	c7 80 14 da 01 00 01 	movl   $0x1,0x1da14(%eax)
f0108e08:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0108e0b:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0108e12:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0108e15:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108e1c:	e9 9a 05 00 00       	jmp    f01093bb <env_create+0xc1f>
	{
		struct FrameInfo *pp = NULL;
f0108e21:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%ebp)
f0108e28:	00 00 00 
		allocate_frame(&pp);
f0108e2b:	83 ec 0c             	sub    $0xc,%esp
f0108e2e:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0108e34:	50                   	push   %eax
f0108e35:	e8 70 d9 ff ff       	call   f01067aa <allocate_frame>
f0108e3a:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0108e3d:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0108e43:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e49:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108e4c:	6a 06                	push   $0x6
f0108e4e:	ff 75 c0             	pushl  -0x40(%ebp)
f0108e51:	52                   	push   %edx
f0108e52:	50                   	push   %eax
f0108e53:	e8 a0 de ff ff       	call   f0106cf8 <loadtime_map_frame>
f0108e58:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0108e5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108e5e:	83 ec 04             	sub    $0x4,%esp
f0108e61:	68 00 10 00 00       	push   $0x1000
f0108e66:	6a 00                	push   $0x0
f0108e68:	50                   	push   %eax
f0108e69:	e8 d5 7b 02 00       	call   f0130a43 <memset>
f0108e6e:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0108e71:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e77:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108e7d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e83:	83 ec 04             	sub    $0x4,%esp
f0108e86:	ff 75 c0             	pushl  -0x40(%ebp)
f0108e89:	52                   	push   %edx
f0108e8a:	50                   	push   %eax
f0108e8b:	e8 80 eb ff ff       	call   f0107a10 <env_page_ws_set_entry>
f0108e90:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108e93:	83 ec 0c             	sub    $0xc,%esp
f0108e96:	6a 02                	push   $0x2
f0108e98:	e8 fa 47 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f0108e9d:	83 c4 10             	add    $0x10,%esp
f0108ea0:	85 c0                	test   %eax,%eax
f0108ea2:	0f 84 b2 04 00 00    	je     f010935a <env_create+0xbbe>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108ea8:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108eae:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108eb4:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108eba:	89 d0                	mov    %edx,%eax
f0108ebc:	01 c0                	add    %eax,%eax
f0108ebe:	01 d0                	add    %edx,%eax
f0108ec0:	c1 e0 03             	shl    $0x3,%eax
f0108ec3:	83 c0 70             	add    $0x70,%eax
f0108ec6:	01 c8                	add    %ecx,%eax
f0108ec8:	83 c0 08             	add    $0x8,%eax
f0108ecb:	85 c0                	test   %eax,%eax
f0108ecd:	75 17                	jne    f0108ee6 <env_create+0x74a>
f0108ecf:	83 ec 04             	sub    $0x4,%esp
f0108ed2:	68 e5 5d 13 f0       	push   $0xf0135de5
f0108ed7:	68 41 01 00 00       	push   $0x141
f0108edc:	68 83 5d 13 f0       	push   $0xf0135d83
f0108ee1:	e8 c0 72 ff ff       	call   f01001a6 <_panic>
f0108ee6:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108eec:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ef2:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ef8:	89 d0                	mov    %edx,%eax
f0108efa:	01 c0                	add    %eax,%eax
f0108efc:	01 d0                	add    %edx,%eax
f0108efe:	c1 e0 03             	shl    $0x3,%eax
f0108f01:	01 c8                	add    %ecx,%eax
f0108f03:	05 88 00 00 00       	add    $0x88,%eax
f0108f08:	8b 00                	mov    (%eax),%eax
f0108f0a:	85 c0                	test   %eax,%eax
f0108f0c:	74 4d                	je     f0108f5b <env_create+0x7bf>
f0108f0e:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108f14:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f1a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f20:	89 d0                	mov    %edx,%eax
f0108f22:	01 c0                	add    %eax,%eax
f0108f24:	01 d0                	add    %edx,%eax
f0108f26:	c1 e0 03             	shl    $0x3,%eax
f0108f29:	01 c8                	add    %ecx,%eax
f0108f2b:	05 88 00 00 00       	add    $0x88,%eax
f0108f30:	8b 10                	mov    (%eax),%edx
f0108f32:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108f38:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f3e:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108f44:	89 c8                	mov    %ecx,%eax
f0108f46:	01 c0                	add    %eax,%eax
f0108f48:	01 c8                	add    %ecx,%eax
f0108f4a:	c1 e0 03             	shl    $0x3,%eax
f0108f4d:	01 d8                	add    %ebx,%eax
f0108f4f:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f54:	8b 00                	mov    (%eax),%eax
f0108f56:	89 42 14             	mov    %eax,0x14(%edx)
f0108f59:	eb 30                	jmp    f0108f8b <env_create+0x7ef>
f0108f5b:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108f61:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108f67:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f6d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108f73:	89 c8                	mov    %ecx,%eax
f0108f75:	01 c0                	add    %eax,%eax
f0108f77:	01 c8                	add    %ecx,%eax
f0108f79:	c1 e0 03             	shl    $0x3,%eax
f0108f7c:	01 d8                	add    %ebx,%eax
f0108f7e:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f83:	8b 00                	mov    (%eax),%eax
f0108f85:	89 82 74 ea 01 00    	mov    %eax,0x1ea74(%edx)
f0108f8b:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108f91:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f97:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f9d:	89 d0                	mov    %edx,%eax
f0108f9f:	01 c0                	add    %eax,%eax
f0108fa1:	01 d0                	add    %edx,%eax
f0108fa3:	c1 e0 03             	shl    $0x3,%eax
f0108fa6:	01 c8                	add    %ecx,%eax
f0108fa8:	05 8c 00 00 00       	add    $0x8c,%eax
f0108fad:	8b 00                	mov    (%eax),%eax
f0108faf:	85 c0                	test   %eax,%eax
f0108fb1:	74 4d                	je     f0109000 <env_create+0x864>
f0108fb3:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108fb9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fbf:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108fc5:	89 d0                	mov    %edx,%eax
f0108fc7:	01 c0                	add    %eax,%eax
f0108fc9:	01 d0                	add    %edx,%eax
f0108fcb:	c1 e0 03             	shl    $0x3,%eax
f0108fce:	01 c8                	add    %ecx,%eax
f0108fd0:	05 8c 00 00 00       	add    $0x8c,%eax
f0108fd5:	8b 10                	mov    (%eax),%edx
f0108fd7:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108fdd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fe3:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108fe9:	89 c8                	mov    %ecx,%eax
f0108feb:	01 c0                	add    %eax,%eax
f0108fed:	01 c8                	add    %ecx,%eax
f0108fef:	c1 e0 03             	shl    $0x3,%eax
f0108ff2:	01 d8                	add    %ebx,%eax
f0108ff4:	05 88 00 00 00       	add    $0x88,%eax
f0108ff9:	8b 00                	mov    (%eax),%eax
f0108ffb:	89 42 10             	mov    %eax,0x10(%edx)
f0108ffe:	eb 30                	jmp    f0109030 <env_create+0x894>
f0109000:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0109006:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010900c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109012:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109018:	89 c8                	mov    %ecx,%eax
f010901a:	01 c0                	add    %eax,%eax
f010901c:	01 c8                	add    %ecx,%eax
f010901e:	c1 e0 03             	shl    $0x3,%eax
f0109021:	01 d8                	add    %ebx,%eax
f0109023:	05 88 00 00 00       	add    $0x88,%eax
f0109028:	8b 00                	mov    (%eax),%eax
f010902a:	89 82 70 ea 01 00    	mov    %eax,0x1ea70(%edx)
f0109030:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0109036:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010903c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109042:	89 d0                	mov    %edx,%eax
f0109044:	01 c0                	add    %eax,%eax
f0109046:	01 d0                	add    %edx,%eax
f0109048:	c1 e0 03             	shl    $0x3,%eax
f010904b:	01 c8                	add    %ecx,%eax
f010904d:	05 88 00 00 00       	add    $0x88,%eax
f0109052:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109058:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010905e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109064:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010906a:	89 d0                	mov    %edx,%eax
f010906c:	01 c0                	add    %eax,%eax
f010906e:	01 d0                	add    %edx,%eax
f0109070:	c1 e0 03             	shl    $0x3,%eax
f0109073:	01 c8                	add    %ecx,%eax
f0109075:	05 8c 00 00 00       	add    $0x8c,%eax
f010907a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109080:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109086:	8b 90 7c ea 01 00    	mov    0x1ea7c(%eax),%edx
f010908c:	4a                   	dec    %edx
f010908d:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109093:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109099:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010909f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01090a5:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f01090ab:	39 c2                	cmp    %eax,%edx
f01090ad:	0f 83 56 01 00 00    	jae    f0109209 <env_create+0xa6d>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01090b3:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01090b9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01090bf:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01090c5:	89 d0                	mov    %edx,%eax
f01090c7:	01 c0                	add    %eax,%eax
f01090c9:	01 d0                	add    %edx,%eax
f01090cb:	c1 e0 03             	shl    $0x3,%eax
f01090ce:	83 c0 70             	add    $0x70,%eax
f01090d1:	01 c8                	add    %ecx,%eax
f01090d3:	83 c0 08             	add    $0x8,%eax
f01090d6:	85 c0                	test   %eax,%eax
f01090d8:	75 17                	jne    f01090f1 <env_create+0x955>
f01090da:	83 ec 04             	sub    $0x4,%esp
f01090dd:	68 04 5e 13 f0       	push   $0xf0135e04
f01090e2:	68 46 01 00 00       	push   $0x146
f01090e7:	68 83 5d 13 f0       	push   $0xf0135d83
f01090ec:	e8 b5 70 ff ff       	call   f01001a6 <_panic>
f01090f1:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01090f7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01090fd:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109103:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109109:	8b 98 80 ea 01 00    	mov    0x1ea80(%eax),%ebx
f010910f:	89 d0                	mov    %edx,%eax
f0109111:	01 c0                	add    %eax,%eax
f0109113:	01 d0                	add    %edx,%eax
f0109115:	c1 e0 03             	shl    $0x3,%eax
f0109118:	01 c8                	add    %ecx,%eax
f010911a:	05 88 00 00 00       	add    $0x88,%eax
f010911f:	89 18                	mov    %ebx,(%eax)
f0109121:	89 d0                	mov    %edx,%eax
f0109123:	01 c0                	add    %eax,%eax
f0109125:	01 d0                	add    %edx,%eax
f0109127:	c1 e0 03             	shl    $0x3,%eax
f010912a:	01 c8                	add    %ecx,%eax
f010912c:	05 88 00 00 00       	add    $0x88,%eax
f0109131:	8b 00                	mov    (%eax),%eax
f0109133:	85 c0                	test   %eax,%eax
f0109135:	74 34                	je     f010916b <env_create+0x9cf>
f0109137:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010913d:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0109143:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0109149:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010914f:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109155:	89 c8                	mov    %ecx,%eax
f0109157:	01 c0                	add    %eax,%eax
f0109159:	01 c8                	add    %ecx,%eax
f010915b:	c1 e0 03             	shl    $0x3,%eax
f010915e:	83 c0 70             	add    $0x70,%eax
f0109161:	01 d8                	add    %ebx,%eax
f0109163:	83 c0 08             	add    $0x8,%eax
f0109166:	89 42 14             	mov    %eax,0x14(%edx)
f0109169:	eb 2f                	jmp    f010919a <env_create+0x9fe>
f010916b:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0109171:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0109177:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010917d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109183:	89 c8                	mov    %ecx,%eax
f0109185:	01 c0                	add    %eax,%eax
f0109187:	01 c8                	add    %ecx,%eax
f0109189:	c1 e0 03             	shl    $0x3,%eax
f010918c:	83 c0 70             	add    $0x70,%eax
f010918f:	01 d8                	add    %ebx,%eax
f0109191:	83 c0 08             	add    $0x8,%eax
f0109194:	89 82 84 ea 01 00    	mov    %eax,0x1ea84(%edx)
f010919a:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01091a0:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01091a6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01091ac:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01091b2:	89 c8                	mov    %ecx,%eax
f01091b4:	01 c0                	add    %eax,%eax
f01091b6:	01 c8                	add    %ecx,%eax
f01091b8:	c1 e0 03             	shl    $0x3,%eax
f01091bb:	83 c0 70             	add    $0x70,%eax
f01091be:	01 d8                	add    %ebx,%eax
f01091c0:	83 c0 08             	add    $0x8,%eax
f01091c3:	89 82 80 ea 01 00    	mov    %eax,0x1ea80(%edx)
f01091c9:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01091cf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01091d5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01091db:	89 d0                	mov    %edx,%eax
f01091dd:	01 c0                	add    %eax,%eax
f01091df:	01 d0                	add    %edx,%eax
f01091e1:	c1 e0 03             	shl    $0x3,%eax
f01091e4:	01 c8                	add    %ecx,%eax
f01091e6:	05 8c 00 00 00       	add    $0x8c,%eax
f01091eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01091f1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01091f7:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f01091fd:	42                   	inc    %edx
f01091fe:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0109204:	e9 51 01 00 00       	jmp    f010935a <env_create+0xbbe>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109209:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010920f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109215:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010921b:	89 d0                	mov    %edx,%eax
f010921d:	01 c0                	add    %eax,%eax
f010921f:	01 d0                	add    %edx,%eax
f0109221:	c1 e0 03             	shl    $0x3,%eax
f0109224:	83 c0 70             	add    $0x70,%eax
f0109227:	01 c8                	add    %ecx,%eax
f0109229:	83 c0 08             	add    $0x8,%eax
f010922c:	85 c0                	test   %eax,%eax
f010922e:	75 17                	jne    f0109247 <env_create+0xaab>
f0109230:	83 ec 04             	sub    $0x4,%esp
f0109233:	68 04 5e 13 f0       	push   $0xf0135e04
f0109238:	68 4a 01 00 00       	push   $0x14a
f010923d:	68 83 5d 13 f0       	push   $0xf0135d83
f0109242:	e8 5f 6f ff ff       	call   f01001a6 <_panic>
f0109247:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010924d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109253:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109259:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010925f:	8b 98 90 ea 01 00    	mov    0x1ea90(%eax),%ebx
f0109265:	89 d0                	mov    %edx,%eax
f0109267:	01 c0                	add    %eax,%eax
f0109269:	01 d0                	add    %edx,%eax
f010926b:	c1 e0 03             	shl    $0x3,%eax
f010926e:	01 c8                	add    %ecx,%eax
f0109270:	05 88 00 00 00       	add    $0x88,%eax
f0109275:	89 18                	mov    %ebx,(%eax)
f0109277:	89 d0                	mov    %edx,%eax
f0109279:	01 c0                	add    %eax,%eax
f010927b:	01 d0                	add    %edx,%eax
f010927d:	c1 e0 03             	shl    $0x3,%eax
f0109280:	01 c8                	add    %ecx,%eax
f0109282:	05 88 00 00 00       	add    $0x88,%eax
f0109287:	8b 00                	mov    (%eax),%eax
f0109289:	85 c0                	test   %eax,%eax
f010928b:	74 34                	je     f01092c1 <env_create+0xb25>
f010928d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109293:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0109299:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010929f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01092a5:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01092ab:	89 c8                	mov    %ecx,%eax
f01092ad:	01 c0                	add    %eax,%eax
f01092af:	01 c8                	add    %ecx,%eax
f01092b1:	c1 e0 03             	shl    $0x3,%eax
f01092b4:	83 c0 70             	add    $0x70,%eax
f01092b7:	01 d8                	add    %ebx,%eax
f01092b9:	83 c0 08             	add    $0x8,%eax
f01092bc:	89 42 14             	mov    %eax,0x14(%edx)
f01092bf:	eb 2f                	jmp    f01092f0 <env_create+0xb54>
f01092c1:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01092c7:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01092cd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01092d3:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01092d9:	89 c8                	mov    %ecx,%eax
f01092db:	01 c0                	add    %eax,%eax
f01092dd:	01 c8                	add    %ecx,%eax
f01092df:	c1 e0 03             	shl    $0x3,%eax
f01092e2:	83 c0 70             	add    $0x70,%eax
f01092e5:	01 d8                	add    %ebx,%eax
f01092e7:	83 c0 08             	add    $0x8,%eax
f01092ea:	89 82 94 ea 01 00    	mov    %eax,0x1ea94(%edx)
f01092f0:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01092f6:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01092fc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109302:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109308:	89 c8                	mov    %ecx,%eax
f010930a:	01 c0                	add    %eax,%eax
f010930c:	01 c8                	add    %ecx,%eax
f010930e:	c1 e0 03             	shl    $0x3,%eax
f0109311:	83 c0 70             	add    $0x70,%eax
f0109314:	01 d8                	add    %ebx,%eax
f0109316:	83 c0 08             	add    $0x8,%eax
f0109319:	89 82 90 ea 01 00    	mov    %eax,0x1ea90(%edx)
f010931f:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0109325:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010932b:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109331:	89 d0                	mov    %edx,%eax
f0109333:	01 c0                	add    %eax,%eax
f0109335:	01 d0                	add    %edx,%eax
f0109337:	c1 e0 03             	shl    $0x3,%eax
f010933a:	01 c8                	add    %ecx,%eax
f010933c:	05 8c 00 00 00       	add    $0x8c,%eax
f0109341:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109347:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010934d:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f0109353:	42                   	inc    %edx
f0109354:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
				}
			}
			e->page_last_WS_index ++;
f010935a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109360:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109366:	42                   	inc    %edx
f0109367:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f010936d:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0109373:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109379:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f010937f:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0109385:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109388:	ba 00 00 00 00       	mov    $0x0,%edx
f010938d:	f7 f3                	div    %ebx
f010938f:	89 d0                	mov    %edx,%eax
f0109391:	89 81 e8 d9 01 00    	mov    %eax,0x1d9e8(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109397:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010939d:	83 ec 04             	sub    $0x4,%esp
f01093a0:	6a 01                	push   $0x1
f01093a2:	ff 75 c0             	pushl  -0x40(%ebp)
f01093a5:	50                   	push   %eax
f01093a6:	e8 40 a0 ff ff       	call   f01033eb <pf_add_empty_env_page>
f01093ab:	83 c4 10             	add    $0x10,%esp
f01093ae:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01093b4:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01093bb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01093be:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f01093c4:	0f 83 57 fa ff ff    	jae    f0108e21 <env_create+0x685>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01093ca:	83 ec 0c             	sub    $0xc,%esp
f01093cd:	6a 02                	push   $0x2
f01093cf:	e8 c3 42 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f01093d4:	83 c4 10             	add    $0x10,%esp
f01093d7:	85 c0                	test   %eax,%eax
f01093d9:	74 72                	je     f010944d <env_create+0xcb1>
	{
		struct WorkingSetElement * elm = NULL;
f01093db:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01093e2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01093e8:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f01093ee:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01093f1:	eb 2b                	jmp    f010941e <env_create+0xc82>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01093f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01093f6:	8b 10                	mov    (%eax),%edx
f01093f8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01093fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109401:	6a 01                	push   $0x1
f0109403:	6a 00                	push   $0x0
f0109405:	52                   	push   %edx
f0109406:	50                   	push   %eax
f0109407:	e8 e8 e2 ff ff       	call   f01076f4 <pt_set_page_permissions>
f010940c:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f010940f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109415:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010941b:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010941e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109424:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109428:	74 08                	je     f0109432 <env_create+0xc96>
f010942a:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010942d:	8b 52 10             	mov    0x10(%edx),%edx
f0109430:	eb 05                	jmp    f0109437 <env_create+0xc9b>
f0109432:	ba 00 00 00 00       	mov    $0x0,%edx
f0109437:	89 90 98 ea 01 00    	mov    %edx,0x1ea98(%eax)
f010943d:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0109443:	85 c0                	test   %eax,%eax
f0109445:	75 ac                	jne    f01093f3 <env_create+0xc57>
f0109447:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010944b:	75 a6                	jne    f01093f3 <env_create+0xc57>
f010944d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109450:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0109453:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0109456:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109459:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
}
f010945f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109462:	5b                   	pop    %ebx
f0109463:	5e                   	pop    %esi
f0109464:	5f                   	pop    %edi
f0109465:	5d                   	pop    %ebp
f0109466:	c3                   	ret    

f0109467 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109467:	55                   	push   %ebp
f0109468:	89 e5                	mov    %esp,%ebp
f010946a:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f010946d:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0109472:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109475:	74 25                	je     f010949c <env_run+0x35>
	{
		curenv = e ;
f0109477:	8b 45 08             	mov    0x8(%ebp),%eax
f010947a:	a3 14 92 65 f0       	mov    %eax,0xf0659214
		curenv->env_runs++ ;
f010947f:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0109484:	8b 50 58             	mov    0x58(%eax),%edx
f0109487:	42                   	inc    %edx
f0109488:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f010948b:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0109490:	8b 40 60             	mov    0x60(%eax),%eax
f0109493:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109496:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109499:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010949c:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01094a1:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f01094a8:	e8 2c ac ff ff       	call   f01040d9 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f01094ad:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01094b2:	83 ec 0c             	sub    $0xc,%esp
f01094b5:	50                   	push   %eax
f01094b6:	e8 11 01 00 00       	call   f01095cc <env_pop_tf>

f01094bb <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01094bb:	55                   	push   %ebp
f01094bc:	89 e5                	mov    %esp,%ebp
f01094be:	83 ec 08             	sub    $0x8,%esp
	unshare_pws_at_user_space(e);
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f01094c1:	83 ec 04             	sub    $0x4,%esp
f01094c4:	68 28 5e 13 f0       	push   $0xf0135e28
f01094c9:	68 9d 01 00 00       	push   $0x19d
f01094ce:	68 83 5d 13 f0       	push   $0xf0135d83
f01094d3:	e8 ce 6c ff ff       	call   f01001a6 <_panic>

f01094d8 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01094d8:	55                   	push   %ebp
f01094d9:	89 e5                	mov    %esp,%ebp
f01094db:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01094de:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01094e3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01094e6:	83 ec 0c             	sub    $0xc,%esp
f01094e9:	50                   	push   %eax
f01094ea:	e8 26 bc ff ff       	call   f0105115 <sched_exit_env>
f01094ef:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01094f2:	e8 f4 b0 ff ff       	call   f01045eb <fos_scheduler>

f01094f7 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01094f7:	55                   	push   %ebp
f01094f8:	89 e5                	mov    %esp,%ebp
f01094fa:	53                   	push   %ebx
f01094fb:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01094fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109502:	75 15                	jne    f0109519 <envid2env+0x22>
		*env_store = curenv;
f0109504:	8b 15 14 92 65 f0    	mov    0xf0659214,%edx
f010950a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010950d:	89 10                	mov    %edx,(%eax)
		return 0;
f010950f:	b8 00 00 00 00       	mov    $0x0,%eax
f0109514:	e9 ae 00 00 00       	jmp    f01095c7 <envid2env+0xd0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109519:	8b 1d 10 92 65 f0    	mov    0xf0659210,%ebx
f010951f:	83 ec 0c             	sub    $0xc,%esp
f0109522:	6a 08                	push   $0x8
f0109524:	e8 b7 60 02 00       	call   f012f5e0 <nearest_pow2_ceil>
f0109529:	83 c4 10             	add    $0x10,%esp
f010952c:	8d 50 ff             	lea    -0x1(%eax),%edx
f010952f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109532:	21 c2                	and    %eax,%edx
f0109534:	89 d0                	mov    %edx,%eax
f0109536:	01 c0                	add    %eax,%eax
f0109538:	01 d0                	add    %edx,%eax
f010953a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109541:	01 c8                	add    %ecx,%eax
f0109543:	c1 e0 02             	shl    $0x2,%eax
f0109546:	01 d0                	add    %edx,%eax
f0109548:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f010954f:	01 c8                	add    %ecx,%eax
f0109551:	c1 e0 02             	shl    $0x2,%eax
f0109554:	01 d0                	add    %edx,%eax
f0109556:	c1 e0 02             	shl    $0x2,%eax
f0109559:	01 d0                	add    %edx,%eax
f010955b:	c1 e0 03             	shl    $0x3,%eax
f010955e:	01 d8                	add    %ebx,%eax
f0109560:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109563:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109566:	8b 40 54             	mov    0x54(%eax),%eax
f0109569:	85 c0                	test   %eax,%eax
f010956b:	74 0b                	je     f0109578 <envid2env+0x81>
f010956d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109570:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109573:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109576:	74 10                	je     f0109588 <envid2env+0x91>
		*env_store = 0;
f0109578:	8b 45 0c             	mov    0xc(%ebp),%eax
f010957b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109581:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109586:	eb 3f                	jmp    f01095c7 <envid2env+0xd0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109588:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010958c:	74 2c                	je     f01095ba <envid2env+0xc3>
f010958e:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f0109593:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109596:	74 22                	je     f01095ba <envid2env+0xc3>
f0109598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010959b:	8b 50 50             	mov    0x50(%eax),%edx
f010959e:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f01095a3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01095a6:	39 c2                	cmp    %eax,%edx
f01095a8:	74 10                	je     f01095ba <envid2env+0xc3>
		*env_store = 0;
f01095aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01095ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01095b3:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01095b8:	eb 0d                	jmp    f01095c7 <envid2env+0xd0>
	}

	*env_store = e;
f01095ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01095bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01095c0:	89 10                	mov    %edx,(%eax)
	return 0;
f01095c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01095c7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01095ca:	c9                   	leave  
f01095cb:	c3                   	ret    

f01095cc <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f01095cc:	55                   	push   %ebp
f01095cd:	89 e5                	mov    %esp,%ebp
f01095cf:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f01095d2:	8b 65 08             	mov    0x8(%ebp),%esp
f01095d5:	61                   	popa   
f01095d6:	07                   	pop    %es
f01095d7:	1f                   	pop    %ds
f01095d8:	83 c4 08             	add    $0x8,%esp
f01095db:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01095dc:	83 ec 04             	sub    $0x4,%esp
f01095df:	68 4f 5e 13 f0       	push   $0xf0135e4f
f01095e4:	68 fc 01 00 00       	push   $0x1fc
f01095e9:	68 83 5d 13 f0       	push   $0xf0135d83
f01095ee:	e8 b3 6b ff ff       	call   f01001a6 <_panic>

f01095f3 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01095f3:	55                   	push   %ebp
f01095f4:	89 e5                	mov    %esp,%ebp
f01095f6:	56                   	push   %esi
f01095f7:	53                   	push   %ebx
f01095f8:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f01095fb:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109602:	e9 0b 02 00 00       	jmp    f0109812 <env_init+0x21f>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109607:	8b 0d 10 92 65 f0    	mov    0xf0659210,%ecx
f010960d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109610:	89 d0                	mov    %edx,%eax
f0109612:	01 c0                	add    %eax,%eax
f0109614:	01 d0                	add    %edx,%eax
f0109616:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010961d:	01 d8                	add    %ebx,%eax
f010961f:	c1 e0 02             	shl    $0x2,%eax
f0109622:	01 d0                	add    %edx,%eax
f0109624:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010962b:	01 d8                	add    %ebx,%eax
f010962d:	c1 e0 02             	shl    $0x2,%eax
f0109630:	01 d0                	add    %edx,%eax
f0109632:	c1 e0 02             	shl    $0x2,%eax
f0109635:	01 d0                	add    %edx,%eax
f0109637:	c1 e0 03             	shl    $0x3,%eax
f010963a:	01 c8                	add    %ecx,%eax
f010963c:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109643:	8b 0d 10 92 65 f0    	mov    0xf0659210,%ecx
f0109649:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010964c:	89 d0                	mov    %edx,%eax
f010964e:	01 c0                	add    %eax,%eax
f0109650:	01 d0                	add    %edx,%eax
f0109652:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109659:	01 d8                	add    %ebx,%eax
f010965b:	c1 e0 02             	shl    $0x2,%eax
f010965e:	01 d0                	add    %edx,%eax
f0109660:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109667:	01 d8                	add    %ebx,%eax
f0109669:	c1 e0 02             	shl    $0x2,%eax
f010966c:	01 d0                	add    %edx,%eax
f010966e:	c1 e0 02             	shl    $0x2,%eax
f0109671:	01 d0                	add    %edx,%eax
f0109673:	c1 e0 03             	shl    $0x3,%eax
f0109676:	01 c8                	add    %ecx,%eax
f0109678:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010967f:	8b 0d 10 92 65 f0    	mov    0xf0659210,%ecx
f0109685:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109688:	89 d0                	mov    %edx,%eax
f010968a:	01 c0                	add    %eax,%eax
f010968c:	01 d0                	add    %edx,%eax
f010968e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109695:	01 d8                	add    %ebx,%eax
f0109697:	c1 e0 02             	shl    $0x2,%eax
f010969a:	01 d0                	add    %edx,%eax
f010969c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01096a3:	01 d8                	add    %ebx,%eax
f01096a5:	c1 e0 02             	shl    $0x2,%eax
f01096a8:	01 d0                	add    %edx,%eax
f01096aa:	c1 e0 02             	shl    $0x2,%eax
f01096ad:	01 d0                	add    %edx,%eax
f01096af:	c1 e0 03             	shl    $0x3,%eax
f01096b2:	01 c8                	add    %ecx,%eax
f01096b4:	85 c0                	test   %eax,%eax
f01096b6:	75 17                	jne    f01096cf <env_init+0xdc>
f01096b8:	83 ec 04             	sub    $0x4,%esp
f01096bb:	68 04 5e 13 f0       	push   $0xf0135e04
f01096c0:	68 18 02 00 00       	push   $0x218
f01096c5:	68 83 5d 13 f0       	push   $0xf0135d83
f01096ca:	e8 d7 6a ff ff       	call   f01001a6 <_panic>
f01096cf:	8b 0d 10 92 65 f0    	mov    0xf0659210,%ecx
f01096d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096d8:	89 d0                	mov    %edx,%eax
f01096da:	01 c0                	add    %eax,%eax
f01096dc:	01 d0                	add    %edx,%eax
f01096de:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01096e5:	01 d8                	add    %ebx,%eax
f01096e7:	c1 e0 02             	shl    $0x2,%eax
f01096ea:	01 d0                	add    %edx,%eax
f01096ec:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01096f3:	01 d8                	add    %ebx,%eax
f01096f5:	c1 e0 02             	shl    $0x2,%eax
f01096f8:	01 d0                	add    %edx,%eax
f01096fa:	c1 e0 02             	shl    $0x2,%eax
f01096fd:	01 d0                	add    %edx,%eax
f01096ff:	c1 e0 03             	shl    $0x3,%eax
f0109702:	01 c8                	add    %ecx,%eax
f0109704:	8b 15 18 92 65 f0    	mov    0xf0659218,%edx
f010970a:	89 50 44             	mov    %edx,0x44(%eax)
f010970d:	8b 40 44             	mov    0x44(%eax),%eax
f0109710:	85 c0                	test   %eax,%eax
f0109712:	74 40                	je     f0109754 <env_init+0x161>
f0109714:	8b 0d 18 92 65 f0    	mov    0xf0659218,%ecx
f010971a:	8b 1d 10 92 65 f0    	mov    0xf0659210,%ebx
f0109720:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109723:	89 d0                	mov    %edx,%eax
f0109725:	01 c0                	add    %eax,%eax
f0109727:	01 d0                	add    %edx,%eax
f0109729:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0109730:	01 f0                	add    %esi,%eax
f0109732:	c1 e0 02             	shl    $0x2,%eax
f0109735:	01 d0                	add    %edx,%eax
f0109737:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010973e:	01 f0                	add    %esi,%eax
f0109740:	c1 e0 02             	shl    $0x2,%eax
f0109743:	01 d0                	add    %edx,%eax
f0109745:	c1 e0 02             	shl    $0x2,%eax
f0109748:	01 d0                	add    %edx,%eax
f010974a:	c1 e0 03             	shl    $0x3,%eax
f010974d:	01 d8                	add    %ebx,%eax
f010974f:	89 41 48             	mov    %eax,0x48(%ecx)
f0109752:	eb 3a                	jmp    f010978e <env_init+0x19b>
f0109754:	8b 0d 10 92 65 f0    	mov    0xf0659210,%ecx
f010975a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010975d:	89 d0                	mov    %edx,%eax
f010975f:	01 c0                	add    %eax,%eax
f0109761:	01 d0                	add    %edx,%eax
f0109763:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010976a:	01 d8                	add    %ebx,%eax
f010976c:	c1 e0 02             	shl    $0x2,%eax
f010976f:	01 d0                	add    %edx,%eax
f0109771:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109778:	01 d8                	add    %ebx,%eax
f010977a:	c1 e0 02             	shl    $0x2,%eax
f010977d:	01 d0                	add    %edx,%eax
f010977f:	c1 e0 02             	shl    $0x2,%eax
f0109782:	01 d0                	add    %edx,%eax
f0109784:	c1 e0 03             	shl    $0x3,%eax
f0109787:	01 c8                	add    %ecx,%eax
f0109789:	a3 1c 92 65 f0       	mov    %eax,0xf065921c
f010978e:	8b 0d 10 92 65 f0    	mov    0xf0659210,%ecx
f0109794:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109797:	89 d0                	mov    %edx,%eax
f0109799:	01 c0                	add    %eax,%eax
f010979b:	01 d0                	add    %edx,%eax
f010979d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01097a4:	01 d8                	add    %ebx,%eax
f01097a6:	c1 e0 02             	shl    $0x2,%eax
f01097a9:	01 d0                	add    %edx,%eax
f01097ab:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01097b2:	01 d8                	add    %ebx,%eax
f01097b4:	c1 e0 02             	shl    $0x2,%eax
f01097b7:	01 d0                	add    %edx,%eax
f01097b9:	c1 e0 02             	shl    $0x2,%eax
f01097bc:	01 d0                	add    %edx,%eax
f01097be:	c1 e0 03             	shl    $0x3,%eax
f01097c1:	01 c8                	add    %ecx,%eax
f01097c3:	a3 18 92 65 f0       	mov    %eax,0xf0659218
f01097c8:	8b 0d 10 92 65 f0    	mov    0xf0659210,%ecx
f01097ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01097d1:	89 d0                	mov    %edx,%eax
f01097d3:	01 c0                	add    %eax,%eax
f01097d5:	01 d0                	add    %edx,%eax
f01097d7:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01097de:	01 d8                	add    %ebx,%eax
f01097e0:	c1 e0 02             	shl    $0x2,%eax
f01097e3:	01 d0                	add    %edx,%eax
f01097e5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01097ec:	01 d8                	add    %ebx,%eax
f01097ee:	c1 e0 02             	shl    $0x2,%eax
f01097f1:	01 d0                	add    %edx,%eax
f01097f3:	c1 e0 02             	shl    $0x2,%eax
f01097f6:	01 d0                	add    %edx,%eax
f01097f8:	c1 e0 03             	shl    $0x3,%eax
f01097fb:	01 c8                	add    %ecx,%eax
f01097fd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109804:	a1 24 92 65 f0       	mov    0xf0659224,%eax
f0109809:	40                   	inc    %eax
f010980a:	a3 24 92 65 f0       	mov    %eax,0xf0659224
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010980f:	ff 4d f4             	decl   -0xc(%ebp)
f0109812:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109816:	0f 89 eb fd ff ff    	jns    f0109607 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010981c:	90                   	nop
f010981d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0109820:	5b                   	pop    %ebx
f0109821:	5e                   	pop    %esi
f0109822:	5d                   	pop    %ebp
f0109823:	c3                   	ret    

f0109824 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109824:	55                   	push   %ebp
f0109825:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109827:	8b 15 18 92 65 f0    	mov    0xf0659218,%edx
f010982d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109830:	89 10                	mov    %edx,(%eax)
f0109832:	8b 45 08             	mov    0x8(%ebp),%eax
f0109835:	8b 00                	mov    (%eax),%eax
f0109837:	85 c0                	test   %eax,%eax
f0109839:	75 07                	jne    f0109842 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010983b:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109840:	eb 11                	jmp    f0109853 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109842:	8b 45 08             	mov    0x8(%ebp),%eax
f0109845:	8b 00                	mov    (%eax),%eax
f0109847:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010984e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109853:	5d                   	pop    %ebp
f0109854:	c3                   	ret    

f0109855 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109855:	55                   	push   %ebp
f0109856:	89 e5                	mov    %esp,%ebp
f0109858:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010985b:	83 ec 04             	sub    $0x4,%esp
f010985e:	68 a8 ea 01 00       	push   $0x1eaa8
f0109863:	6a 00                	push   $0x0
f0109865:	ff 75 08             	pushl  0x8(%ebp)
f0109868:	e8 d6 71 02 00       	call   f0130a43 <memset>
f010986d:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109870:	8b 45 08             	mov    0x8(%ebp),%eax
f0109873:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010987a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010987e:	75 17                	jne    f0109897 <free_environment+0x42>
f0109880:	83 ec 04             	sub    $0x4,%esp
f0109883:	68 04 5e 13 f0       	push   $0xf0135e04
f0109888:	68 35 02 00 00       	push   $0x235
f010988d:	68 83 5d 13 f0       	push   $0xf0135d83
f0109892:	e8 0f 69 ff ff       	call   f01001a6 <_panic>
f0109897:	8b 15 18 92 65 f0    	mov    0xf0659218,%edx
f010989d:	8b 45 08             	mov    0x8(%ebp),%eax
f01098a0:	89 50 44             	mov    %edx,0x44(%eax)
f01098a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01098a6:	8b 40 44             	mov    0x44(%eax),%eax
f01098a9:	85 c0                	test   %eax,%eax
f01098ab:	74 0d                	je     f01098ba <free_environment+0x65>
f01098ad:	a1 18 92 65 f0       	mov    0xf0659218,%eax
f01098b2:	8b 55 08             	mov    0x8(%ebp),%edx
f01098b5:	89 50 48             	mov    %edx,0x48(%eax)
f01098b8:	eb 08                	jmp    f01098c2 <free_environment+0x6d>
f01098ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01098bd:	a3 1c 92 65 f0       	mov    %eax,0xf065921c
f01098c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01098c5:	a3 18 92 65 f0       	mov    %eax,0xf0659218
f01098ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01098cd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01098d4:	a1 24 92 65 f0       	mov    0xf0659224,%eax
f01098d9:	40                   	inc    %eax
f01098da:	a3 24 92 65 f0       	mov    %eax,0xf0659224
}
f01098df:	90                   	nop
f01098e0:	c9                   	leave  
f01098e1:	c3                   	ret    

f01098e2 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f01098e2:	55                   	push   %ebp
f01098e3:	89 e5                	mov    %esp,%ebp
f01098e5:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f01098e8:	83 ec 04             	sub    $0x4,%esp
f01098eb:	68 5c 5e 13 f0       	push   $0xf0135e5c
f01098f0:	68 3f 02 00 00       	push   $0x23f
f01098f5:	68 83 5d 13 f0       	push   $0xf0135d83
f01098fa:	e8 a7 68 ff ff       	call   f01001a6 <_panic>

f01098ff <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f01098ff:	55                   	push   %ebp
f0109900:	89 e5                	mov    %esp,%ebp
f0109902:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f0109905:	83 ec 04             	sub    $0x4,%esp
f0109908:	68 90 5e 13 f0       	push   $0xf0135e90
f010990d:	68 4b 02 00 00       	push   $0x24b
f0109912:	68 83 5d 13 f0       	push   $0xf0135d83
f0109917:	e8 8a 68 ff ff       	call   f01001a6 <_panic>

f010991c <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010991c:	55                   	push   %ebp
f010991d:	89 e5                	mov    %esp,%ebp
f010991f:	53                   	push   %ebx
f0109920:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109923:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109926:	8b 40 0c             	mov    0xc(%eax),%eax
f0109929:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010992c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010992f:	8b 40 08             	mov    0x8(%eax),%eax
f0109932:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109935:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010993c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010993f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109942:	01 c2                	add    %eax,%edx
f0109944:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109947:	01 d0                	add    %edx,%eax
f0109949:	48                   	dec    %eax
f010994a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010994d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109950:	ba 00 00 00 00       	mov    $0x0,%edx
f0109955:	f7 75 dc             	divl   -0x24(%ebp)
f0109958:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010995b:	29 d0                	sub    %edx,%eax
f010995d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109960:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109963:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109966:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109969:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010996e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109971:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109978:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010997f:	8b 45 10             	mov    0x10(%ebp),%eax
f0109982:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109988:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010998f:	0f 85 12 06 00 00    	jne    f0109fa7 <program_segment_alloc_map_copy_workingset+0x68b>
f0109995:	8b 45 08             	mov    0x8(%ebp),%eax
f0109998:	05 18 da 01 00       	add    $0x1da18,%eax
f010999d:	83 ec 08             	sub    $0x8,%esp
f01099a0:	68 c4 5e 13 f0       	push   $0xf0135ec4
f01099a5:	50                   	push   %eax
f01099a6:	e8 b6 6f 02 00       	call   f0130961 <strcmp>
f01099ab:	83 c4 10             	add    $0x10,%esp
f01099ae:	85 c0                	test   %eax,%eax
f01099b0:	0f 84 f1 05 00 00    	je     f0109fa7 <program_segment_alloc_map_copy_workingset+0x68b>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f01099b6:	8b 45 14             	mov    0x14(%ebp),%eax
f01099b9:	83 f8 06             	cmp    $0x6,%eax
f01099bc:	76 05                	jbe    f01099c3 <program_segment_alloc_map_copy_workingset+0xa7>
f01099be:	b8 06 00 00 00       	mov    $0x6,%eax
f01099c3:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f01099c6:	e9 dc 05 00 00       	jmp    f0109fa7 <program_segment_alloc_map_copy_workingset+0x68b>
	{
		// Allocate a page
		allocate_frame(&p) ;
f01099cb:	83 ec 0c             	sub    $0xc,%esp
f01099ce:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01099d1:	50                   	push   %eax
f01099d2:	e8 d3 cd ff ff       	call   f01067aa <allocate_frame>
f01099d7:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f01099da:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01099dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01099e0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01099e3:	6a 06                	push   $0x6
f01099e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01099e8:	52                   	push   %edx
f01099e9:	50                   	push   %eax
f01099ea:	e8 09 d3 ff ff       	call   f0106cf8 <loadtime_map_frame>
f01099ef:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f01099f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01099f5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01099fb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01099fe:	89 d0                	mov    %edx,%eax
f0109a00:	01 c0                	add    %eax,%eax
f0109a02:	01 d0                	add    %edx,%eax
f0109a04:	c1 e0 03             	shl    $0x3,%eax
f0109a07:	01 c8                	add    %ecx,%eax
f0109a09:	8d 50 78             	lea    0x78(%eax),%edx
f0109a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a0f:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109a11:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a14:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a1a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a1d:	89 d0                	mov    %edx,%eax
f0109a1f:	01 c0                	add    %eax,%eax
f0109a21:	01 d0                	add    %edx,%eax
f0109a23:	c1 e0 03             	shl    $0x3,%eax
f0109a26:	01 c8                	add    %ecx,%eax
f0109a28:	83 c0 7c             	add    $0x7c,%eax
f0109a2b:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109a2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a31:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a37:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a3a:	89 d0                	mov    %edx,%eax
f0109a3c:	01 c0                	add    %eax,%eax
f0109a3e:	01 d0                	add    %edx,%eax
f0109a40:	c1 e0 03             	shl    $0x3,%eax
f0109a43:	01 c8                	add    %ecx,%eax
f0109a45:	83 e8 80             	sub    $0xffffff80,%eax
f0109a48:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109a4e:	83 ec 0c             	sub    $0xc,%esp
f0109a51:	6a 02                	push   $0x2
f0109a53:	e8 3f 3c 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f0109a58:	83 c4 10             	add    $0x10,%esp
f0109a5b:	85 c0                	test   %eax,%eax
f0109a5d:	0f 84 11 04 00 00    	je     f0109e74 <program_segment_alloc_map_copy_workingset+0x558>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109a63:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a66:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a6c:	89 d0                	mov    %edx,%eax
f0109a6e:	01 c0                	add    %eax,%eax
f0109a70:	01 d0                	add    %edx,%eax
f0109a72:	c1 e0 03             	shl    $0x3,%eax
f0109a75:	8d 50 70             	lea    0x70(%eax),%edx
f0109a78:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a7b:	01 d0                	add    %edx,%eax
f0109a7d:	83 c0 08             	add    $0x8,%eax
f0109a80:	85 c0                	test   %eax,%eax
f0109a82:	75 17                	jne    f0109a9b <program_segment_alloc_map_copy_workingset+0x17f>
f0109a84:	83 ec 04             	sub    $0x4,%esp
f0109a87:	68 e5 5d 13 f0       	push   $0xf0135de5
f0109a8c:	68 7d 02 00 00       	push   $0x27d
f0109a91:	68 83 5d 13 f0       	push   $0xf0135d83
f0109a96:	e8 0b 67 ff ff       	call   f01001a6 <_panic>
f0109a9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a9e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109aa4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109aa7:	89 d0                	mov    %edx,%eax
f0109aa9:	01 c0                	add    %eax,%eax
f0109aab:	01 d0                	add    %edx,%eax
f0109aad:	c1 e0 03             	shl    $0x3,%eax
f0109ab0:	01 c8                	add    %ecx,%eax
f0109ab2:	05 88 00 00 00       	add    $0x88,%eax
f0109ab7:	8b 00                	mov    (%eax),%eax
f0109ab9:	85 c0                	test   %eax,%eax
f0109abb:	74 41                	je     f0109afe <program_segment_alloc_map_copy_workingset+0x1e2>
f0109abd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ac0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109ac6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ac9:	89 d0                	mov    %edx,%eax
f0109acb:	01 c0                	add    %eax,%eax
f0109acd:	01 d0                	add    %edx,%eax
f0109acf:	c1 e0 03             	shl    $0x3,%eax
f0109ad2:	01 c8                	add    %ecx,%eax
f0109ad4:	05 88 00 00 00       	add    $0x88,%eax
f0109ad9:	8b 10                	mov    (%eax),%edx
f0109adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ade:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109ae4:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109ae7:	89 c8                	mov    %ecx,%eax
f0109ae9:	01 c0                	add    %eax,%eax
f0109aeb:	01 c8                	add    %ecx,%eax
f0109aed:	c1 e0 03             	shl    $0x3,%eax
f0109af0:	01 d8                	add    %ebx,%eax
f0109af2:	05 8c 00 00 00       	add    $0x8c,%eax
f0109af7:	8b 00                	mov    (%eax),%eax
f0109af9:	89 42 14             	mov    %eax,0x14(%edx)
f0109afc:	eb 27                	jmp    f0109b25 <program_segment_alloc_map_copy_workingset+0x209>
f0109afe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b01:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109b07:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b0a:	89 d0                	mov    %edx,%eax
f0109b0c:	01 c0                	add    %eax,%eax
f0109b0e:	01 d0                	add    %edx,%eax
f0109b10:	c1 e0 03             	shl    $0x3,%eax
f0109b13:	01 c8                	add    %ecx,%eax
f0109b15:	05 8c 00 00 00       	add    $0x8c,%eax
f0109b1a:	8b 10                	mov    (%eax),%edx
f0109b1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b1f:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f0109b25:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b28:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109b2e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b31:	89 d0                	mov    %edx,%eax
f0109b33:	01 c0                	add    %eax,%eax
f0109b35:	01 d0                	add    %edx,%eax
f0109b37:	c1 e0 03             	shl    $0x3,%eax
f0109b3a:	01 c8                	add    %ecx,%eax
f0109b3c:	05 8c 00 00 00       	add    $0x8c,%eax
f0109b41:	8b 00                	mov    (%eax),%eax
f0109b43:	85 c0                	test   %eax,%eax
f0109b45:	74 41                	je     f0109b88 <program_segment_alloc_map_copy_workingset+0x26c>
f0109b47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b4a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109b50:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b53:	89 d0                	mov    %edx,%eax
f0109b55:	01 c0                	add    %eax,%eax
f0109b57:	01 d0                	add    %edx,%eax
f0109b59:	c1 e0 03             	shl    $0x3,%eax
f0109b5c:	01 c8                	add    %ecx,%eax
f0109b5e:	05 8c 00 00 00       	add    $0x8c,%eax
f0109b63:	8b 10                	mov    (%eax),%edx
f0109b65:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b68:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109b6e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109b71:	89 c8                	mov    %ecx,%eax
f0109b73:	01 c0                	add    %eax,%eax
f0109b75:	01 c8                	add    %ecx,%eax
f0109b77:	c1 e0 03             	shl    $0x3,%eax
f0109b7a:	01 d8                	add    %ebx,%eax
f0109b7c:	05 88 00 00 00       	add    $0x88,%eax
f0109b81:	8b 00                	mov    (%eax),%eax
f0109b83:	89 42 10             	mov    %eax,0x10(%edx)
f0109b86:	eb 27                	jmp    f0109baf <program_segment_alloc_map_copy_workingset+0x293>
f0109b88:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b8b:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109b91:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b94:	89 d0                	mov    %edx,%eax
f0109b96:	01 c0                	add    %eax,%eax
f0109b98:	01 d0                	add    %edx,%eax
f0109b9a:	c1 e0 03             	shl    $0x3,%eax
f0109b9d:	01 c8                	add    %ecx,%eax
f0109b9f:	05 88 00 00 00       	add    $0x88,%eax
f0109ba4:	8b 10                	mov    (%eax),%edx
f0109ba6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ba9:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109baf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bb2:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109bb8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bbb:	89 d0                	mov    %edx,%eax
f0109bbd:	01 c0                	add    %eax,%eax
f0109bbf:	01 d0                	add    %edx,%eax
f0109bc1:	c1 e0 03             	shl    $0x3,%eax
f0109bc4:	01 c8                	add    %ecx,%eax
f0109bc6:	05 88 00 00 00       	add    $0x88,%eax
f0109bcb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109bd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bd4:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109bda:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bdd:	89 d0                	mov    %edx,%eax
f0109bdf:	01 c0                	add    %eax,%eax
f0109be1:	01 d0                	add    %edx,%eax
f0109be3:	c1 e0 03             	shl    $0x3,%eax
f0109be6:	01 c8                	add    %ecx,%eax
f0109be8:	05 8c 00 00 00       	add    $0x8c,%eax
f0109bed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bf6:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f0109bfc:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109bff:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c02:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0109c08:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c0b:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0109c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c14:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f0109c1a:	48                   	dec    %eax
f0109c1b:	39 c2                	cmp    %eax,%edx
f0109c1d:	0f 83 2b 01 00 00    	jae    f0109d4e <program_segment_alloc_map_copy_workingset+0x432>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109c23:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c26:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109c2c:	89 d0                	mov    %edx,%eax
f0109c2e:	01 c0                	add    %eax,%eax
f0109c30:	01 d0                	add    %edx,%eax
f0109c32:	c1 e0 03             	shl    $0x3,%eax
f0109c35:	8d 50 70             	lea    0x70(%eax),%edx
f0109c38:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c3b:	01 d0                	add    %edx,%eax
f0109c3d:	83 c0 08             	add    $0x8,%eax
f0109c40:	85 c0                	test   %eax,%eax
f0109c42:	75 17                	jne    f0109c5b <program_segment_alloc_map_copy_workingset+0x33f>
f0109c44:	83 ec 04             	sub    $0x4,%esp
f0109c47:	68 04 5e 13 f0       	push   $0xf0135e04
f0109c4c:	68 81 02 00 00       	push   $0x281
f0109c51:	68 83 5d 13 f0       	push   $0xf0135d83
f0109c56:	e8 4b 65 ff ff       	call   f01001a6 <_panic>
f0109c5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c5e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109c64:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c67:	8b 88 80 ea 01 00    	mov    0x1ea80(%eax),%ecx
f0109c6d:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109c70:	89 d0                	mov    %edx,%eax
f0109c72:	01 c0                	add    %eax,%eax
f0109c74:	01 d0                	add    %edx,%eax
f0109c76:	c1 e0 03             	shl    $0x3,%eax
f0109c79:	01 d8                	add    %ebx,%eax
f0109c7b:	05 88 00 00 00       	add    $0x88,%eax
f0109c80:	89 08                	mov    %ecx,(%eax)
f0109c82:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c85:	89 d0                	mov    %edx,%eax
f0109c87:	01 c0                	add    %eax,%eax
f0109c89:	01 d0                	add    %edx,%eax
f0109c8b:	c1 e0 03             	shl    $0x3,%eax
f0109c8e:	01 c8                	add    %ecx,%eax
f0109c90:	05 88 00 00 00       	add    $0x88,%eax
f0109c95:	8b 00                	mov    (%eax),%eax
f0109c97:	85 c0                	test   %eax,%eax
f0109c99:	74 2b                	je     f0109cc6 <program_segment_alloc_map_copy_workingset+0x3aa>
f0109c9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c9e:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0109ca4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca7:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109cad:	89 c8                	mov    %ecx,%eax
f0109caf:	01 c0                	add    %eax,%eax
f0109cb1:	01 c8                	add    %ecx,%eax
f0109cb3:	c1 e0 03             	shl    $0x3,%eax
f0109cb6:	8d 48 70             	lea    0x70(%eax),%ecx
f0109cb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cbc:	01 c8                	add    %ecx,%eax
f0109cbe:	83 c0 08             	add    $0x8,%eax
f0109cc1:	89 42 14             	mov    %eax,0x14(%edx)
f0109cc4:	eb 26                	jmp    f0109cec <program_segment_alloc_map_copy_workingset+0x3d0>
f0109cc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cc9:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109ccf:	89 d0                	mov    %edx,%eax
f0109cd1:	01 c0                	add    %eax,%eax
f0109cd3:	01 d0                	add    %edx,%eax
f0109cd5:	c1 e0 03             	shl    $0x3,%eax
f0109cd8:	8d 50 70             	lea    0x70(%eax),%edx
f0109cdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cde:	01 d0                	add    %edx,%eax
f0109ce0:	8d 50 08             	lea    0x8(%eax),%edx
f0109ce3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ce6:	89 90 84 ea 01 00    	mov    %edx,0x1ea84(%eax)
f0109cec:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cef:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109cf5:	89 d0                	mov    %edx,%eax
f0109cf7:	01 c0                	add    %eax,%eax
f0109cf9:	01 d0                	add    %edx,%eax
f0109cfb:	c1 e0 03             	shl    $0x3,%eax
f0109cfe:	8d 50 70             	lea    0x70(%eax),%edx
f0109d01:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d04:	01 d0                	add    %edx,%eax
f0109d06:	8d 50 08             	lea    0x8(%eax),%edx
f0109d09:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d0c:	89 90 80 ea 01 00    	mov    %edx,0x1ea80(%eax)
f0109d12:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d15:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109d1b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109d1e:	89 d0                	mov    %edx,%eax
f0109d20:	01 c0                	add    %eax,%eax
f0109d22:	01 d0                	add    %edx,%eax
f0109d24:	c1 e0 03             	shl    $0x3,%eax
f0109d27:	01 c8                	add    %ecx,%eax
f0109d29:	05 8c 00 00 00       	add    $0x8c,%eax
f0109d2e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109d34:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d37:	8b 80 8c ea 01 00    	mov    0x1ea8c(%eax),%eax
f0109d3d:	8d 50 01             	lea    0x1(%eax),%edx
f0109d40:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d43:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0109d49:	e9 26 01 00 00       	jmp    f0109e74 <program_segment_alloc_map_copy_workingset+0x558>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109d4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d51:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109d57:	89 d0                	mov    %edx,%eax
f0109d59:	01 c0                	add    %eax,%eax
f0109d5b:	01 d0                	add    %edx,%eax
f0109d5d:	c1 e0 03             	shl    $0x3,%eax
f0109d60:	8d 50 70             	lea    0x70(%eax),%edx
f0109d63:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d66:	01 d0                	add    %edx,%eax
f0109d68:	83 c0 08             	add    $0x8,%eax
f0109d6b:	85 c0                	test   %eax,%eax
f0109d6d:	75 17                	jne    f0109d86 <program_segment_alloc_map_copy_workingset+0x46a>
f0109d6f:	83 ec 04             	sub    $0x4,%esp
f0109d72:	68 04 5e 13 f0       	push   $0xf0135e04
f0109d77:	68 86 02 00 00       	push   $0x286
f0109d7c:	68 83 5d 13 f0       	push   $0xf0135d83
f0109d81:	e8 20 64 ff ff       	call   f01001a6 <_panic>
f0109d86:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d89:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109d8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d92:	8b 88 90 ea 01 00    	mov    0x1ea90(%eax),%ecx
f0109d98:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109d9b:	89 d0                	mov    %edx,%eax
f0109d9d:	01 c0                	add    %eax,%eax
f0109d9f:	01 d0                	add    %edx,%eax
f0109da1:	c1 e0 03             	shl    $0x3,%eax
f0109da4:	01 d8                	add    %ebx,%eax
f0109da6:	05 88 00 00 00       	add    $0x88,%eax
f0109dab:	89 08                	mov    %ecx,(%eax)
f0109dad:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109db0:	89 d0                	mov    %edx,%eax
f0109db2:	01 c0                	add    %eax,%eax
f0109db4:	01 d0                	add    %edx,%eax
f0109db6:	c1 e0 03             	shl    $0x3,%eax
f0109db9:	01 c8                	add    %ecx,%eax
f0109dbb:	05 88 00 00 00       	add    $0x88,%eax
f0109dc0:	8b 00                	mov    (%eax),%eax
f0109dc2:	85 c0                	test   %eax,%eax
f0109dc4:	74 2b                	je     f0109df1 <program_segment_alloc_map_copy_workingset+0x4d5>
f0109dc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dc9:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0109dcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dd2:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109dd8:	89 c8                	mov    %ecx,%eax
f0109dda:	01 c0                	add    %eax,%eax
f0109ddc:	01 c8                	add    %ecx,%eax
f0109dde:	c1 e0 03             	shl    $0x3,%eax
f0109de1:	8d 48 70             	lea    0x70(%eax),%ecx
f0109de4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de7:	01 c8                	add    %ecx,%eax
f0109de9:	83 c0 08             	add    $0x8,%eax
f0109dec:	89 42 14             	mov    %eax,0x14(%edx)
f0109def:	eb 26                	jmp    f0109e17 <program_segment_alloc_map_copy_workingset+0x4fb>
f0109df1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109df4:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109dfa:	89 d0                	mov    %edx,%eax
f0109dfc:	01 c0                	add    %eax,%eax
f0109dfe:	01 d0                	add    %edx,%eax
f0109e00:	c1 e0 03             	shl    $0x3,%eax
f0109e03:	8d 50 70             	lea    0x70(%eax),%edx
f0109e06:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e09:	01 d0                	add    %edx,%eax
f0109e0b:	8d 50 08             	lea    0x8(%eax),%edx
f0109e0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e11:	89 90 94 ea 01 00    	mov    %edx,0x1ea94(%eax)
f0109e17:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e1a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109e20:	89 d0                	mov    %edx,%eax
f0109e22:	01 c0                	add    %eax,%eax
f0109e24:	01 d0                	add    %edx,%eax
f0109e26:	c1 e0 03             	shl    $0x3,%eax
f0109e29:	8d 50 70             	lea    0x70(%eax),%edx
f0109e2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2f:	01 d0                	add    %edx,%eax
f0109e31:	8d 50 08             	lea    0x8(%eax),%edx
f0109e34:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e37:	89 90 90 ea 01 00    	mov    %edx,0x1ea90(%eax)
f0109e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e40:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109e46:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e49:	89 d0                	mov    %edx,%eax
f0109e4b:	01 c0                	add    %eax,%eax
f0109e4d:	01 d0                	add    %edx,%eax
f0109e4f:	c1 e0 03             	shl    $0x3,%eax
f0109e52:	01 c8                	add    %ecx,%eax
f0109e54:	05 8c 00 00 00       	add    $0x8c,%eax
f0109e59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109e5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e62:	8b 80 9c ea 01 00    	mov    0x1ea9c(%eax),%eax
f0109e68:	8d 50 01             	lea    0x1(%eax),%edx
f0109e6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e6e:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f0109e74:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e77:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109e7d:	8d 50 01             	lea    0x1(%eax),%edx
f0109e80:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e83:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0109e89:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e8c:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109e92:	8b 55 08             	mov    0x8(%ebp),%edx
f0109e95:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109e98:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e9d:	f7 f1                	div    %ecx
f0109e9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea2:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0109ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109eab:	c1 e8 16             	shr    $0x16,%eax
f0109eae:	89 c2                	mov    %eax,%edx
f0109eb0:	8b 45 18             	mov    0x18(%ebp),%eax
f0109eb3:	8b 00                	mov    (%eax),%eax
f0109eb5:	39 c2                	cmp    %eax,%edx
f0109eb7:	0f 84 d3 00 00 00    	je     f0109f90 <program_segment_alloc_map_copy_workingset+0x674>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f0109ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ec0:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ec9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109ecc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109ecf:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109ed4:	89 c1                	mov    %eax,%ecx
f0109ed6:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109ed9:	89 d0                	mov    %edx,%eax
f0109edb:	01 c0                	add    %eax,%eax
f0109edd:	01 d0                	add    %edx,%eax
f0109edf:	c1 e0 03             	shl    $0x3,%eax
f0109ee2:	01 d8                	add    %ebx,%eax
f0109ee4:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109ee9:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0109eeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eee:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109ef4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ef7:	89 d0                	mov    %edx,%eax
f0109ef9:	01 c0                	add    %eax,%eax
f0109efb:	01 d0                	add    %edx,%eax
f0109efd:	c1 e0 03             	shl    $0x3,%eax
f0109f00:	01 c8                	add    %ecx,%eax
f0109f02:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109f07:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0109f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f0d:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109f13:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f16:	89 d0                	mov    %edx,%eax
f0109f18:	01 c0                	add    %eax,%eax
f0109f1a:	01 d0                	add    %edx,%eax
f0109f1c:	c1 e0 03             	shl    $0x3,%eax
f0109f1f:	01 c8                	add    %ecx,%eax
f0109f21:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109f26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f0109f2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f2f:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109f35:	8d 50 01             	lea    0x1(%eax),%edx
f0109f38:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f3b:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f0109f41:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f44:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109f4a:	b9 32 00 00 00       	mov    $0x32,%ecx
f0109f4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f54:	f7 f1                	div    %ecx
f0109f56:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f59:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			if (e->table_last_WS_index == 0)
f0109f5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f62:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109f68:	85 c0                	test   %eax,%eax
f0109f6a:	75 17                	jne    f0109f83 <program_segment_alloc_map_copy_workingset+0x667>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0109f6c:	83 ec 04             	sub    $0x4,%esp
f0109f6f:	68 c8 5e 13 f0       	push   $0xf0135ec8
f0109f74:	68 96 02 00 00       	push   $0x296
f0109f79:	68 83 5d 13 f0       	push   $0xf0135d83
f0109f7e:	e8 23 62 ff ff       	call   f01001a6 <_panic>
			(*lastTableNumber) = PDX(iVA);
f0109f83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f86:	c1 e8 16             	shr    $0x16,%eax
f0109f89:	89 c2                	mov    %eax,%edx
f0109f8b:	8b 45 18             	mov    0x18(%ebp),%eax
f0109f8e:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0109f90:	8b 45 10             	mov    0x10(%ebp),%eax
f0109f93:	8b 00                	mov    (%eax),%eax
f0109f95:	8d 50 01             	lea    0x1(%eax),%edx
f0109f98:	8b 45 10             	mov    0x10(%ebp),%eax
f0109f9b:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109f9d:	ff 45 f0             	incl   -0x10(%ebp)
f0109fa0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109faa:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0109fad:	73 0c                	jae    f0109fbb <program_segment_alloc_map_copy_workingset+0x69f>
f0109faf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109fb2:	3b 45 14             	cmp    0x14(%ebp),%eax
f0109fb5:	0f 82 10 fa ff ff    	jb     f01099cb <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f0109fbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fbe:	8b 00                	mov    (%eax),%eax
f0109fc0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f0109fc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fc6:	8b 40 0c             	mov    0xc(%eax),%eax
f0109fc9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109fcc:	eb 10                	jmp    f0109fde <program_segment_alloc_map_copy_workingset+0x6c2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f0109fce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109fd1:	8a 10                	mov    (%eax),%dl
f0109fd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109fd6:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f0109fd8:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f0109fdb:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109fde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109fe1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0109fe4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109fe7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109fec:	89 c2                	mov    %eax,%edx
f0109fee:	8b 45 10             	mov    0x10(%ebp),%eax
f0109ff1:	8b 00                	mov    (%eax),%eax
f0109ff3:	c1 e0 0c             	shl    $0xc,%eax
f0109ff6:	01 c2                	add    %eax,%edx
f0109ff8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109ffb:	39 c2                	cmp    %eax,%edx
f0109ffd:	76 1d                	jbe    f010a01c <program_segment_alloc_map_copy_workingset+0x700>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f0109fff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a002:	8b 50 04             	mov    0x4(%eax),%edx
f010a005:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a008:	01 c2                	add    %eax,%edx
f010a00a:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a00d:	39 c2                	cmp    %eax,%edx
f010a00f:	77 bd                	ja     f0109fce <program_segment_alloc_map_copy_workingset+0x6b2>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a011:	eb 09                	jmp    f010a01c <program_segment_alloc_map_copy_workingset+0x700>
	{
		*dst_ptr = 0;
f010a013:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a016:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a019:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a01c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a01f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a022:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a025:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a02a:	89 c2                	mov    %eax,%edx
f010a02c:	8b 45 10             	mov    0x10(%ebp),%eax
f010a02f:	8b 00                	mov    (%eax),%eax
f010a031:	c1 e0 0c             	shl    $0xc,%eax
f010a034:	01 c2                	add    %eax,%edx
f010a036:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a039:	39 c2                	cmp    %eax,%edx
f010a03b:	77 d6                	ja     f010a013 <program_segment_alloc_map_copy_workingset+0x6f7>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a03d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a042:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a045:	c9                   	leave  
f010a046:	c3                   	ret    

f010a047 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a047:	55                   	push   %ebp
f010a048:	89 e5                	mov    %esp,%ebp
f010a04a:	53                   	push   %ebx
f010a04b:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a04e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a051:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a054:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a057:	8b 45 08             	mov    0x8(%ebp),%eax
f010a05a:	8b 55 10             	mov    0x10(%ebp),%edx
f010a05d:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a060:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a067:	eb 17                	jmp    f010a080 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a069:	8b 45 08             	mov    0x8(%ebp),%eax
f010a06c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a06f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a072:	c1 e2 02             	shl    $0x2,%edx
f010a075:	01 d0                	add    %edx,%eax
f010a077:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a07d:	ff 45 f4             	incl   -0xc(%ebp)
f010a080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a083:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a088:	76 df                	jbe    f010a069 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a08a:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a091:	eb 22                	jmp    f010a0b5 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a093:	8b 45 08             	mov    0x8(%ebp),%eax
f010a096:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a099:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a09c:	c1 e2 02             	shl    $0x2,%edx
f010a09f:	01 c2                	add    %eax,%edx
f010a0a1:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f010a0a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a0a9:	c1 e1 02             	shl    $0x2,%ecx
f010a0ac:	01 c8                	add    %ecx,%eax
f010a0ae:	8b 00                	mov    (%eax),%eax
f010a0b0:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a0b2:	ff 45 f4             	incl   -0xc(%ebp)
f010a0b5:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a0bc:	7e d5                	jle    f010a093 <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a0be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c1:	8b 15 10 92 65 f0    	mov    0xf0659210,%edx
f010a0c7:	29 d0                	sub    %edx,%eax
f010a0c9:	c1 f8 03             	sar    $0x3,%eax
f010a0cc:	89 c2                	mov    %eax,%edx
f010a0ce:	89 d0                	mov    %edx,%eax
f010a0d0:	c1 e0 03             	shl    $0x3,%eax
f010a0d3:	01 d0                	add    %edx,%eax
f010a0d5:	c1 e0 03             	shl    $0x3,%eax
f010a0d8:	01 d0                	add    %edx,%eax
f010a0da:	01 c0                	add    %eax,%eax
f010a0dc:	01 d0                	add    %edx,%eax
f010a0de:	01 c0                	add    %eax,%eax
f010a0e0:	01 d0                	add    %edx,%eax
f010a0e2:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a0e9:	01 c8                	add    %ecx,%eax
f010a0eb:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a0f2:	01 c8                	add    %ecx,%eax
f010a0f4:	c1 e0 02             	shl    $0x2,%eax
f010a0f7:	01 d0                	add    %edx,%eax
f010a0f9:	01 c0                	add    %eax,%eax
f010a0fb:	01 d0                	add    %edx,%eax
f010a0fd:	01 c0                	add    %eax,%eax
f010a0ff:	01 d0                	add    %edx,%eax
f010a101:	c1 e0 02             	shl    $0x2,%eax
f010a104:	01 d0                	add    %edx,%eax
f010a106:	01 c0                	add    %eax,%eax
f010a108:	01 d0                	add    %edx,%eax
f010a10a:	c1 e0 09             	shl    $0x9,%eax
f010a10d:	29 d0                	sub    %edx,%eax
f010a10f:	c1 e0 02             	shl    $0x2,%eax
f010a112:	01 d0                	add    %edx,%eax
f010a114:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a117:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a11a:	89 d0                	mov    %edx,%eax
f010a11c:	01 c0                	add    %eax,%eax
f010a11e:	01 d0                	add    %edx,%eax
f010a120:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f010a127:	01 c8                	add    %ecx,%eax
f010a129:	c1 e0 02             	shl    $0x2,%eax
f010a12c:	01 d0                	add    %edx,%eax
f010a12e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f010a135:	01 c8                	add    %ecx,%eax
f010a137:	c1 e0 02             	shl    $0x2,%eax
f010a13a:	01 d0                	add    %edx,%eax
f010a13c:	c1 e0 02             	shl    $0x2,%eax
f010a13f:	01 d0                	add    %edx,%eax
f010a141:	c1 e0 03             	shl    $0x3,%eax
f010a144:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a149:	8d 50 78             	lea    0x78(%eax),%edx
f010a14c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a14f:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a155:	83 ec 0c             	sub    $0xc,%esp
f010a158:	6a 02                	push   $0x2
f010a15a:	e8 38 35 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f010a15f:	83 c4 10             	add    $0x10,%esp
f010a162:	85 c0                	test   %eax,%eax
f010a164:	0f 84 25 01 00 00    	je     f010a28f <initialize_environment+0x248>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a16a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a171:	e9 08 01 00 00       	jmp    f010a27e <initialize_environment+0x237>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a176:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a179:	89 d0                	mov    %edx,%eax
f010a17b:	01 c0                	add    %eax,%eax
f010a17d:	01 d0                	add    %edx,%eax
f010a17f:	c1 e0 03             	shl    $0x3,%eax
f010a182:	8d 50 70             	lea    0x70(%eax),%edx
f010a185:	8b 45 08             	mov    0x8(%ebp),%eax
f010a188:	01 d0                	add    %edx,%eax
f010a18a:	83 c0 08             	add    $0x8,%eax
f010a18d:	85 c0                	test   %eax,%eax
f010a18f:	75 17                	jne    f010a1a8 <initialize_environment+0x161>
f010a191:	83 ec 04             	sub    $0x4,%esp
f010a194:	68 04 5e 13 f0       	push   $0xf0135e04
f010a199:	68 f4 02 00 00       	push   $0x2f4
f010a19e:	68 83 5d 13 f0       	push   $0xf0135d83
f010a1a3:	e8 fe 5f ff ff       	call   f01001a6 <_panic>
f010a1a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ab:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f010a1b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a1b4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a1b7:	89 c8                	mov    %ecx,%eax
f010a1b9:	01 c0                	add    %eax,%eax
f010a1bb:	01 c8                	add    %ecx,%eax
f010a1bd:	c1 e0 03             	shl    $0x3,%eax
f010a1c0:	01 d8                	add    %ebx,%eax
f010a1c2:	05 88 00 00 00       	add    $0x88,%eax
f010a1c7:	89 10                	mov    %edx,(%eax)
f010a1c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a1cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a1cf:	89 d0                	mov    %edx,%eax
f010a1d1:	01 c0                	add    %eax,%eax
f010a1d3:	01 d0                	add    %edx,%eax
f010a1d5:	c1 e0 03             	shl    $0x3,%eax
f010a1d8:	01 c8                	add    %ecx,%eax
f010a1da:	05 88 00 00 00       	add    $0x88,%eax
f010a1df:	8b 00                	mov    (%eax),%eax
f010a1e1:	85 c0                	test   %eax,%eax
f010a1e3:	74 25                	je     f010a20a <initialize_environment+0x1c3>
f010a1e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1e8:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f010a1ee:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a1f1:	89 c8                	mov    %ecx,%eax
f010a1f3:	01 c0                	add    %eax,%eax
f010a1f5:	01 c8                	add    %ecx,%eax
f010a1f7:	c1 e0 03             	shl    $0x3,%eax
f010a1fa:	8d 48 70             	lea    0x70(%eax),%ecx
f010a1fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a200:	01 c8                	add    %ecx,%eax
f010a202:	83 c0 08             	add    $0x8,%eax
f010a205:	89 42 14             	mov    %eax,0x14(%edx)
f010a208:	eb 20                	jmp    f010a22a <initialize_environment+0x1e3>
f010a20a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a20d:	89 d0                	mov    %edx,%eax
f010a20f:	01 c0                	add    %eax,%eax
f010a211:	01 d0                	add    %edx,%eax
f010a213:	c1 e0 03             	shl    $0x3,%eax
f010a216:	8d 50 70             	lea    0x70(%eax),%edx
f010a219:	8b 45 08             	mov    0x8(%ebp),%eax
f010a21c:	01 d0                	add    %edx,%eax
f010a21e:	8d 50 08             	lea    0x8(%eax),%edx
f010a221:	8b 45 08             	mov    0x8(%ebp),%eax
f010a224:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f010a22a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a22d:	89 d0                	mov    %edx,%eax
f010a22f:	01 c0                	add    %eax,%eax
f010a231:	01 d0                	add    %edx,%eax
f010a233:	c1 e0 03             	shl    $0x3,%eax
f010a236:	8d 50 70             	lea    0x70(%eax),%edx
f010a239:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23c:	01 d0                	add    %edx,%eax
f010a23e:	8d 50 08             	lea    0x8(%eax),%edx
f010a241:	8b 45 08             	mov    0x8(%ebp),%eax
f010a244:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f010a24a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a24d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a250:	89 d0                	mov    %edx,%eax
f010a252:	01 c0                	add    %eax,%eax
f010a254:	01 d0                	add    %edx,%eax
f010a256:	c1 e0 03             	shl    $0x3,%eax
f010a259:	01 c8                	add    %ecx,%eax
f010a25b:	05 8c 00 00 00       	add    $0x8c,%eax
f010a260:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a266:	8b 45 08             	mov    0x8(%ebp),%eax
f010a269:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f010a26f:	8d 50 01             	lea    0x1(%eax),%edx
f010a272:	8b 45 08             	mov    0x8(%ebp),%eax
f010a275:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a27b:	ff 45 f0             	incl   -0x10(%ebp)
f010a27e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a281:	8b 50 74             	mov    0x74(%eax),%edx
f010a284:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a287:	39 c2                	cmp    %eax,%edx
f010a289:	0f 87 e7 fe ff ff    	ja     f010a176 <initialize_environment+0x12f>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a28f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a296:	eb 4e                	jmp    f010a2e6 <initialize_environment+0x29f>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a298:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a29b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a29e:	89 d0                	mov    %edx,%eax
f010a2a0:	01 c0                	add    %eax,%eax
f010a2a2:	01 d0                	add    %edx,%eax
f010a2a4:	c1 e0 03             	shl    $0x3,%eax
f010a2a7:	01 c8                	add    %ecx,%eax
f010a2a9:	83 c0 78             	add    $0x78,%eax
f010a2ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a2b2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2b8:	89 d0                	mov    %edx,%eax
f010a2ba:	01 c0                	add    %eax,%eax
f010a2bc:	01 d0                	add    %edx,%eax
f010a2be:	c1 e0 03             	shl    $0x3,%eax
f010a2c1:	01 c8                	add    %ecx,%eax
f010a2c3:	83 c0 7c             	add    $0x7c,%eax
f010a2c6:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a2c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2cf:	89 d0                	mov    %edx,%eax
f010a2d1:	01 c0                	add    %eax,%eax
f010a2d3:	01 d0                	add    %edx,%eax
f010a2d5:	c1 e0 03             	shl    $0x3,%eax
f010a2d8:	01 c8                	add    %ecx,%eax
f010a2da:	83 e8 80             	sub    $0xffffff80,%eax
f010a2dd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a2e3:	ff 45 f4             	incl   -0xc(%ebp)
f010a2e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e9:	8b 50 74             	mov    0x74(%eax),%edx
f010a2ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2ef:	39 c2                	cmp    %eax,%edx
f010a2f1:	77 a5                	ja     f010a298 <initialize_environment+0x251>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a2f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f6:	c7 80 e8 d9 01 00 00 	movl   $0x0,0x1d9e8(%eax)
f010a2fd:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a300:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a307:	eb 54                	jmp    f010a35d <initialize_environment+0x316>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a309:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a30c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a30f:	89 d0                	mov    %edx,%eax
f010a311:	01 c0                	add    %eax,%eax
f010a313:	01 d0                	add    %edx,%eax
f010a315:	c1 e0 03             	shl    $0x3,%eax
f010a318:	01 c8                	add    %ecx,%eax
f010a31a:	05 38 d5 01 00       	add    $0x1d538,%eax
f010a31f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a325:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a328:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a32b:	89 d0                	mov    %edx,%eax
f010a32d:	01 c0                	add    %eax,%eax
f010a32f:	01 d0                	add    %edx,%eax
f010a331:	c1 e0 03             	shl    $0x3,%eax
f010a334:	01 c8                	add    %ecx,%eax
f010a336:	05 3c d5 01 00       	add    $0x1d53c,%eax
f010a33b:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a33e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a341:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a344:	89 d0                	mov    %edx,%eax
f010a346:	01 c0                	add    %eax,%eax
f010a348:	01 d0                	add    %edx,%eax
f010a34a:	c1 e0 03             	shl    $0x3,%eax
f010a34d:	01 c8                	add    %ecx,%eax
f010a34f:	05 40 d5 01 00       	add    $0x1d540,%eax
f010a354:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a35a:	ff 45 f4             	incl   -0xc(%ebp)
f010a35d:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a361:	7e a6                	jle    f010a309 <initialize_environment+0x2c2>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a363:	8b 45 08             	mov    0x8(%ebp),%eax
f010a366:	c7 80 ec d9 01 00 00 	movl   $0x0,0x1d9ec(%eax)
f010a36d:	00 00 00 

	e->pageFaultsCounter=0;
f010a370:	8b 45 08             	mov    0x8(%ebp),%eax
f010a373:	c7 80 f0 d9 01 00 00 	movl   $0x0,0x1d9f0(%eax)
f010a37a:	00 00 00 
	e->tableFaultsCounter=0;
f010a37d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a380:	c7 80 f4 d9 01 00 00 	movl   $0x0,0x1d9f4(%eax)
f010a387:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a38a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38d:	c7 80 f8 d9 01 00 00 	movl   $0x0,0x1d9f8(%eax)
f010a394:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a397:	8b 45 08             	mov    0x8(%ebp),%eax
f010a39a:	c7 80 fc d9 01 00 00 	movl   $0x0,0x1d9fc(%eax)
f010a3a1:	00 00 00 

	e->nModifiedPages=0;
f010a3a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a7:	c7 80 00 da 01 00 00 	movl   $0x0,0x1da00(%eax)
f010a3ae:	00 00 00 
	e->nNotModifiedPages=0;
f010a3b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b4:	c7 80 04 da 01 00 00 	movl   $0x0,0x1da04(%eax)
f010a3bb:	00 00 00 
	e->nClocks = 0;
f010a3be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c1:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f010a3c8:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a3cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ce:	c7 80 08 da 01 00 00 	movl   $0x0,0x1da08(%eax)
f010a3d5:	00 00 00 
	e->nPageOut = 0;
f010a3d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3db:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f010a3e2:	00 00 00 
	e->nNewPageAdded = 0;
f010a3e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e8:	c7 80 10 da 01 00 00 	movl   $0x0,0x1da10(%eax)
f010a3ef:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a3f2:	83 ec 0c             	sub    $0xc,%esp
f010a3f5:	ff 75 08             	pushl  0x8(%ebp)
f010a3f8:	e8 09 00 00 00       	call   f010a406 <complete_environment_initialization>
f010a3fd:	83 c4 10             	add    $0x10,%esp
}
f010a400:	90                   	nop
f010a401:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a404:	c9                   	leave  
f010a405:	c3                   	ret    

f010a406 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a406:	55                   	push   %ebp
f010a407:	89 e5                	mov    %esp,%ebp
f010a409:	53                   	push   %ebx
f010a40a:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a40d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a410:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a413:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a419:	8b 45 08             	mov    0x8(%ebp),%eax
f010a41c:	8b 40 60             	mov    0x60(%eax),%eax
f010a41f:	83 c8 03             	or     $0x3,%eax
f010a422:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a424:	8b 45 08             	mov    0x8(%ebp),%eax
f010a427:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a42a:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a430:	8b 45 08             	mov    0x8(%ebp),%eax
f010a433:	8b 40 60             	mov    0x60(%eax),%eax
f010a436:	83 c8 05             	or     $0x5,%eax
f010a439:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a43b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a43e:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a445:	8b 45 08             	mov    0x8(%ebp),%eax
f010a448:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a44f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a452:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a459:	8b 45 08             	mov    0x8(%ebp),%eax
f010a45c:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a463:	8b 45 08             	mov    0x8(%ebp),%eax
f010a466:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a469:	83 ec 0c             	sub    $0xc,%esp
f010a46c:	6a 08                	push   $0x8
f010a46e:	e8 a2 51 02 00       	call   f012f615 <log2_ceil>
f010a473:	83 c4 10             	add    $0x10,%esp
f010a476:	ba 01 00 00 00       	mov    $0x1,%edx
f010a47b:	88 c1                	mov    %al,%cl
f010a47d:	d3 e2                	shl    %cl,%edx
f010a47f:	89 d0                	mov    %edx,%eax
f010a481:	01 d8                	add    %ebx,%eax
f010a483:	89 c3                	mov    %eax,%ebx
f010a485:	83 ec 0c             	sub    $0xc,%esp
f010a488:	6a 08                	push   $0x8
f010a48a:	e8 51 51 02 00       	call   f012f5e0 <nearest_pow2_ceil>
f010a48f:	83 c4 10             	add    $0x10,%esp
f010a492:	f7 d8                	neg    %eax
f010a494:	21 d8                	and    %ebx,%eax
f010a496:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a499:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a49d:	7f 1b                	jg     f010a4ba <complete_environment_initialization+0xb4>
		generation = 1 << ENVGENSHIFT;
f010a49f:	83 ec 0c             	sub    $0xc,%esp
f010a4a2:	6a 08                	push   $0x8
f010a4a4:	e8 6c 51 02 00       	call   f012f615 <log2_ceil>
f010a4a9:	83 c4 10             	add    $0x10,%esp
f010a4ac:	ba 01 00 00 00       	mov    $0x1,%edx
f010a4b1:	88 c1                	mov    %al,%cl
f010a4b3:	d3 e2                	shl    %cl,%edx
f010a4b5:	89 d0                	mov    %edx,%eax
f010a4b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a4ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4bd:	8b 15 10 92 65 f0    	mov    0xf0659210,%edx
f010a4c3:	29 d0                	sub    %edx,%eax
f010a4c5:	c1 f8 03             	sar    $0x3,%eax
f010a4c8:	89 c2                	mov    %eax,%edx
f010a4ca:	89 d0                	mov    %edx,%eax
f010a4cc:	c1 e0 03             	shl    $0x3,%eax
f010a4cf:	01 d0                	add    %edx,%eax
f010a4d1:	c1 e0 03             	shl    $0x3,%eax
f010a4d4:	01 d0                	add    %edx,%eax
f010a4d6:	01 c0                	add    %eax,%eax
f010a4d8:	01 d0                	add    %edx,%eax
f010a4da:	01 c0                	add    %eax,%eax
f010a4dc:	01 d0                	add    %edx,%eax
f010a4de:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a4e5:	01 c8                	add    %ecx,%eax
f010a4e7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a4ee:	01 c8                	add    %ecx,%eax
f010a4f0:	c1 e0 02             	shl    $0x2,%eax
f010a4f3:	01 d0                	add    %edx,%eax
f010a4f5:	01 c0                	add    %eax,%eax
f010a4f7:	01 d0                	add    %edx,%eax
f010a4f9:	01 c0                	add    %eax,%eax
f010a4fb:	01 d0                	add    %edx,%eax
f010a4fd:	c1 e0 02             	shl    $0x2,%eax
f010a500:	01 d0                	add    %edx,%eax
f010a502:	01 c0                	add    %eax,%eax
f010a504:	01 d0                	add    %edx,%eax
f010a506:	c1 e0 09             	shl    $0x9,%eax
f010a509:	29 d0                	sub    %edx,%eax
f010a50b:	c1 e0 02             	shl    $0x2,%eax
f010a50e:	01 d0                	add    %edx,%eax
f010a510:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a513:	89 c2                	mov    %eax,%edx
f010a515:	8b 45 08             	mov    0x8(%ebp),%eax
f010a518:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a51b:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010a520:	85 c0                	test   %eax,%eax
f010a522:	75 0c                	jne    f010a530 <complete_environment_initialization+0x12a>
		e->env_parent_id = 0;//no parent;
f010a524:	8b 45 08             	mov    0x8(%ebp),%eax
f010a527:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a52e:	eb 0e                	jmp    f010a53e <complete_environment_initialization+0x138>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a530:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010a535:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a538:	8b 45 08             	mov    0x8(%ebp),%eax
f010a53b:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a53e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a541:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a548:	8b 45 08             	mov    0x8(%ebp),%eax
f010a54b:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a552:	8b 45 08             	mov    0x8(%ebp),%eax
f010a555:	83 ec 04             	sub    $0x4,%esp
f010a558:	6a 44                	push   $0x44
f010a55a:	6a 00                	push   $0x0
f010a55c:	50                   	push   %eax
f010a55d:	e8 e1 64 02 00       	call   f0130a43 <memset>
f010a562:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a565:	8b 45 08             	mov    0x8(%ebp),%eax
f010a568:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a56e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a571:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a577:	8b 45 08             	mov    0x8(%ebp),%eax
f010a57a:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a580:	8b 45 08             	mov    0x8(%ebp),%eax
f010a583:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a58a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a58d:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a593:	8b 45 08             	mov    0x8(%ebp),%eax
f010a596:	8b 40 38             	mov    0x38(%eax),%eax
f010a599:	80 cc 02             	or     $0x2,%ah
f010a59c:	89 c2                	mov    %eax,%edx
f010a59e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a1:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a5a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a5a8:	75 17                	jne    f010a5c1 <complete_environment_initialization+0x1bb>
f010a5aa:	83 ec 04             	sub    $0x4,%esp
f010a5ad:	68 e5 5d 13 f0       	push   $0xf0135de5
f010a5b2:	68 58 03 00 00       	push   $0x358
f010a5b7:	68 83 5d 13 f0       	push   $0xf0135d83
f010a5bc:	e8 e5 5b ff ff       	call   f01001a6 <_panic>
f010a5c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c4:	8b 40 44             	mov    0x44(%eax),%eax
f010a5c7:	85 c0                	test   %eax,%eax
f010a5c9:	74 11                	je     f010a5dc <complete_environment_initialization+0x1d6>
f010a5cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ce:	8b 40 44             	mov    0x44(%eax),%eax
f010a5d1:	8b 55 08             	mov    0x8(%ebp),%edx
f010a5d4:	8b 52 48             	mov    0x48(%edx),%edx
f010a5d7:	89 50 48             	mov    %edx,0x48(%eax)
f010a5da:	eb 0b                	jmp    f010a5e7 <complete_environment_initialization+0x1e1>
f010a5dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5df:	8b 40 48             	mov    0x48(%eax),%eax
f010a5e2:	a3 1c 92 65 f0       	mov    %eax,0xf065921c
f010a5e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ea:	8b 40 48             	mov    0x48(%eax),%eax
f010a5ed:	85 c0                	test   %eax,%eax
f010a5ef:	74 11                	je     f010a602 <complete_environment_initialization+0x1fc>
f010a5f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f4:	8b 40 48             	mov    0x48(%eax),%eax
f010a5f7:	8b 55 08             	mov    0x8(%ebp),%edx
f010a5fa:	8b 52 44             	mov    0x44(%edx),%edx
f010a5fd:	89 50 44             	mov    %edx,0x44(%eax)
f010a600:	eb 0b                	jmp    f010a60d <complete_environment_initialization+0x207>
f010a602:	8b 45 08             	mov    0x8(%ebp),%eax
f010a605:	8b 40 44             	mov    0x44(%eax),%eax
f010a608:	a3 18 92 65 f0       	mov    %eax,0xf0659218
f010a60d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a610:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a617:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a621:	a1 24 92 65 f0       	mov    0xf0659224,%eax
f010a626:	48                   	dec    %eax
f010a627:	a3 24 92 65 f0       	mov    %eax,0xf0659224
	return ;
f010a62c:	90                   	nop
}
f010a62d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a630:	c9                   	leave  
f010a631:	c3                   	ret    

f010a632 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a632:	55                   	push   %ebp
f010a633:	89 e5                	mov    %esp,%ebp
f010a635:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a638:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a63b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a63e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a641:	8b 00                	mov    (%eax),%eax
f010a643:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a648:	74 17                	je     f010a661 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a64a:	83 ec 04             	sub    $0x4,%esp
f010a64d:	68 6b 5f 13 f0       	push   $0xf0135f6b
f010a652:	68 64 03 00 00       	push   $0x364
f010a657:	68 83 5d 13 f0       	push   $0xf0135d83
f010a65c:	e8 45 5b ff ff       	call   f01001a6 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a661:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a664:	8b 40 18             	mov    0x18(%eax),%eax
f010a667:	89 c2                	mov    %eax,%edx
f010a669:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66c:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a66f:	90                   	nop
f010a670:	c9                   	leave  
f010a671:	c3                   	ret    

f010a672 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010a672:	55                   	push   %ebp
f010a673:	89 e5                	mov    %esp,%ebp
f010a675:	83 ec 08             	sub    $0x8,%esp
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
f010a678:	83 ec 04             	sub    $0x4,%esp
f010a67b:	68 84 5f 13 f0       	push   $0xf0135f84
f010a680:	68 81 03 00 00       	push   $0x381
f010a685:	68 83 5d 13 f0       	push   $0xf0135d83
f010a68a:	e8 17 5b ff ff       	call   f01001a6 <_panic>

f010a68f <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010a68f:	55                   	push   %ebp
f010a690:	89 e5                	mov    %esp,%ebp
f010a692:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
f010a695:	83 ec 04             	sub    $0x4,%esp
f010a698:	68 d4 5f 13 f0       	push   $0xf0135fd4
f010a69d:	68 a0 03 00 00       	push   $0x3a0
f010a6a2:	68 83 5d 13 f0       	push   $0xf0135d83
f010a6a7:	e8 fa 5a ff ff       	call   f01001a6 <_panic>

f010a6ac <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010a6ac:	55                   	push   %ebp
f010a6ad:	89 e5                	mov    %esp,%ebp
f010a6af:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010a6b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b5:	8b 40 10             	mov    0x10(%eax),%eax
f010a6b8:	8d 48 01             	lea    0x1(%eax),%ecx
f010a6bb:	8b 55 08             	mov    0x8(%ebp),%edx
f010a6be:	89 4a 10             	mov    %ecx,0x10(%edx)
f010a6c1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a6c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a6ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a6cd:	8b 00                	mov    (%eax),%eax
f010a6cf:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a6d4:	74 17                	je     f010a6ed <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010a6d6:	83 ec 04             	sub    $0x4,%esp
f010a6d9:	68 6b 5f 13 f0       	push   $0xf0135f6b
f010a6de:	68 ae 03 00 00       	push   $0x3ae
f010a6e3:	68 83 5d 13 f0       	push   $0xf0135d83
f010a6e8:	e8 b9 5a ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a6ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a6f0:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a6f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6f6:	01 d0                	add    %edx,%eax
f010a6f8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010a6fb:	eb 0f                	jmp    f010a70c <PROGRAM_SEGMENT_NEXT+0x60>
f010a6fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a700:	8b 40 10             	mov    0x10(%eax),%eax
f010a703:	8d 50 01             	lea    0x1(%eax),%edx
f010a706:	8b 45 08             	mov    0x8(%ebp),%eax
f010a709:	89 50 10             	mov    %edx,0x10(%eax)
f010a70c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70f:	8b 40 10             	mov    0x10(%eax),%eax
f010a712:	c1 e0 05             	shl    $0x5,%eax
f010a715:	89 c2                	mov    %eax,%edx
f010a717:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a71a:	01 d0                	add    %edx,%eax
f010a71c:	8b 00                	mov    (%eax),%eax
f010a71e:	83 f8 01             	cmp    $0x1,%eax
f010a721:	74 13                	je     f010a736 <PROGRAM_SEGMENT_NEXT+0x8a>
f010a723:	8b 45 08             	mov    0x8(%ebp),%eax
f010a726:	8b 50 10             	mov    0x10(%eax),%edx
f010a729:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a72c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a72f:	0f b7 c0             	movzwl %ax,%eax
f010a732:	39 c2                	cmp    %eax,%edx
f010a734:	72 c7                	jb     f010a6fd <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010a736:	8b 45 08             	mov    0x8(%ebp),%eax
f010a739:	8b 40 10             	mov    0x10(%eax),%eax
f010a73c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010a73f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a742:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a745:	0f b7 c0             	movzwl %ax,%eax
f010a748:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a74b:	7e 63                	jle    f010a7b0 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a74d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a750:	c1 e0 05             	shl    $0x5,%eax
f010a753:	89 c2                	mov    %eax,%edx
f010a755:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a758:	01 d0                	add    %edx,%eax
f010a75a:	8b 50 04             	mov    0x4(%eax),%edx
f010a75d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a760:	01 c2                	add    %eax,%edx
f010a762:	8b 45 08             	mov    0x8(%ebp),%eax
f010a765:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010a767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a76a:	c1 e0 05             	shl    $0x5,%eax
f010a76d:	89 c2                	mov    %eax,%edx
f010a76f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a772:	01 d0                	add    %edx,%eax
f010a774:	8b 50 14             	mov    0x14(%eax),%edx
f010a777:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77a:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010a77d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a780:	c1 e0 05             	shl    $0x5,%eax
f010a783:	89 c2                	mov    %eax,%edx
f010a785:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a788:	01 d0                	add    %edx,%eax
f010a78a:	8b 50 10             	mov    0x10(%eax),%edx
f010a78d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a790:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010a793:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a796:	c1 e0 05             	shl    $0x5,%eax
f010a799:	89 c2                	mov    %eax,%edx
f010a79b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a79e:	01 d0                	add    %edx,%eax
f010a7a0:	8b 40 08             	mov    0x8(%eax),%eax
f010a7a3:	89 c2                	mov    %eax,%edx
f010a7a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a8:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010a7ab:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ae:	eb 05                	jmp    f010a7b5 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010a7b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a7b5:	c9                   	leave  
f010a7b6:	c3                   	ret    

f010a7b7 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010a7b7:	55                   	push   %ebp
f010a7b8:	89 e5                	mov    %esp,%ebp
f010a7ba:	57                   	push   %edi
f010a7bb:	56                   	push   %esi
f010a7bc:	53                   	push   %ebx
f010a7bd:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010a7c0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a7c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a7cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a7d0:	8b 00                	mov    (%eax),%eax
f010a7d2:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a7d7:	74 17                	je     f010a7f0 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010a7d9:	83 ec 04             	sub    $0x4,%esp
f010a7dc:	68 6b 5f 13 f0       	push   $0xf0135f6b
f010a7e1:	68 ca 03 00 00       	push   $0x3ca
f010a7e6:	68 83 5d 13 f0       	push   $0xf0135d83
f010a7eb:	e8 b6 59 ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a7f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a7f3:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a7f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7f9:	01 d0                	add    %edx,%eax
f010a7fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010a7fe:	eb 07                	jmp    f010a807 <PROGRAM_SEGMENT_FIRST+0x50>
f010a800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a803:	40                   	inc    %eax
f010a804:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a807:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a80a:	c1 e0 05             	shl    $0x5,%eax
f010a80d:	89 c2                	mov    %eax,%edx
f010a80f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a812:	01 d0                	add    %edx,%eax
f010a814:	8b 00                	mov    (%eax),%eax
f010a816:	83 f8 01             	cmp    $0x1,%eax
f010a819:	74 10                	je     f010a82b <PROGRAM_SEGMENT_FIRST+0x74>
f010a81b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a81e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a821:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a824:	0f b7 c0             	movzwl %ax,%eax
f010a827:	39 c2                	cmp    %eax,%edx
f010a829:	72 d5                	jb     f010a800 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010a82b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a82e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010a831:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a834:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a837:	0f b7 c0             	movzwl %ax,%eax
f010a83a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010a83d:	7e 68                	jle    f010a8a7 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a83f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a842:	c1 e0 05             	shl    $0x5,%eax
f010a845:	89 c2                	mov    %eax,%edx
f010a847:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a84a:	01 d0                	add    %edx,%eax
f010a84c:	8b 50 04             	mov    0x4(%eax),%edx
f010a84f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a852:	01 d0                	add    %edx,%eax
f010a854:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010a857:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a85a:	c1 e0 05             	shl    $0x5,%eax
f010a85d:	89 c2                	mov    %eax,%edx
f010a85f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a862:	01 d0                	add    %edx,%eax
f010a864:	8b 40 14             	mov    0x14(%eax),%eax
f010a867:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010a86a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a86d:	c1 e0 05             	shl    $0x5,%eax
f010a870:	89 c2                	mov    %eax,%edx
f010a872:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a875:	01 d0                	add    %edx,%eax
f010a877:	8b 40 10             	mov    0x10(%eax),%eax
f010a87a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010a87d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a880:	c1 e0 05             	shl    $0x5,%eax
f010a883:	89 c2                	mov    %eax,%edx
f010a885:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a888:	01 d0                	add    %edx,%eax
f010a88a:	8b 40 08             	mov    0x8(%eax),%eax
f010a88d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010a890:	8b 45 08             	mov    0x8(%ebp),%eax
f010a893:	89 c3                	mov    %eax,%ebx
f010a895:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a898:	ba 05 00 00 00       	mov    $0x5,%edx
f010a89d:	89 df                	mov    %ebx,%edi
f010a89f:	89 c6                	mov    %eax,%esi
f010a8a1:	89 d1                	mov    %edx,%ecx
f010a8a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010a8a5:	eb 1c                	jmp    f010a8c3 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010a8a7:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010a8ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b1:	89 c3                	mov    %eax,%ebx
f010a8b3:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a8b6:	ba 05 00 00 00       	mov    $0x5,%edx
f010a8bb:	89 df                	mov    %ebx,%edi
f010a8bd:	89 c6                	mov    %eax,%esi
f010a8bf:	89 d1                	mov    %edx,%ecx
f010a8c1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010a8c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a8c9:	5b                   	pop    %ebx
f010a8ca:	5e                   	pop    %esi
f010a8cb:	5f                   	pop    %edi
f010a8cc:	5d                   	pop    %ebp
f010a8cd:	c2 04 00             	ret    $0x4

f010a8d0 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010a8d0:	55                   	push   %ebp
f010a8d1:	89 e5                	mov    %esp,%ebp
f010a8d3:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010a8d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a8dd:	a1 c0 9a 65 f0       	mov    0xf0659ac0,%eax
f010a8e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a8e5:	e9 c3 00 00 00       	jmp    f010a9ad <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010a8ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8ed:	8b 40 10             	mov    0x10(%eax),%eax
f010a8f0:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a8f3:	0f 85 ac 00 00 00    	jne    f010a9a5 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010a8f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8fc:	8b 50 0c             	mov    0xc(%eax),%edx
f010a8ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a902:	8b 40 10             	mov    0x10(%eax),%eax
f010a905:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a908:	83 ec 08             	sub    $0x8,%esp
f010a90b:	52                   	push   %edx
f010a90c:	50                   	push   %eax
f010a90d:	e8 f1 ce ff ff       	call   f0107803 <pt_clear_page_table_entry>
f010a912:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010a915:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a919:	75 17                	jne    f010a932 <cleanup_buffers+0x62>
f010a91b:	83 ec 04             	sub    $0x4,%esp
f010a91e:	68 e5 5d 13 f0       	push   $0xf0135de5
f010a923:	68 f1 03 00 00       	push   $0x3f1
f010a928:	68 83 5d 13 f0       	push   $0xf0135d83
f010a92d:	e8 74 58 ff ff       	call   f01001a6 <_panic>
f010a932:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a935:	8b 00                	mov    (%eax),%eax
f010a937:	85 c0                	test   %eax,%eax
f010a939:	74 10                	je     f010a94b <cleanup_buffers+0x7b>
f010a93b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a93e:	8b 00                	mov    (%eax),%eax
f010a940:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a943:	8b 52 04             	mov    0x4(%edx),%edx
f010a946:	89 50 04             	mov    %edx,0x4(%eax)
f010a949:	eb 0b                	jmp    f010a956 <cleanup_buffers+0x86>
f010a94b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a94e:	8b 40 04             	mov    0x4(%eax),%eax
f010a951:	a3 c4 9a 65 f0       	mov    %eax,0xf0659ac4
f010a956:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a959:	8b 40 04             	mov    0x4(%eax),%eax
f010a95c:	85 c0                	test   %eax,%eax
f010a95e:	74 0f                	je     f010a96f <cleanup_buffers+0x9f>
f010a960:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a963:	8b 40 04             	mov    0x4(%eax),%eax
f010a966:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a969:	8b 12                	mov    (%edx),%edx
f010a96b:	89 10                	mov    %edx,(%eax)
f010a96d:	eb 0a                	jmp    f010a979 <cleanup_buffers+0xa9>
f010a96f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a972:	8b 00                	mov    (%eax),%eax
f010a974:	a3 c0 9a 65 f0       	mov    %eax,0xf0659ac0
f010a979:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a97c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a982:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a985:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a98c:	a1 cc 9a 65 f0       	mov    0xf0659acc,%eax
f010a991:	48                   	dec    %eax
f010a992:	a3 cc 9a 65 f0       	mov    %eax,0xf0659acc

			free_frame(ptr_fi);
f010a997:	83 ec 0c             	sub    $0xc,%esp
f010a99a:	ff 75 f4             	pushl  -0xc(%ebp)
f010a99d:	e8 1d bf ff ff       	call   f01068bf <free_frame>
f010a9a2:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a9a5:	a1 c8 9a 65 f0       	mov    0xf0659ac8,%eax
f010a9aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a9ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a9b1:	74 07                	je     f010a9ba <cleanup_buffers+0xea>
f010a9b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9b6:	8b 00                	mov    (%eax),%eax
f010a9b8:	eb 05                	jmp    f010a9bf <cleanup_buffers+0xef>
f010a9ba:	b8 00 00 00 00       	mov    $0x0,%eax
f010a9bf:	a3 c8 9a 65 f0       	mov    %eax,0xf0659ac8
f010a9c4:	a1 c8 9a 65 f0       	mov    0xf0659ac8,%eax
f010a9c9:	85 c0                	test   %eax,%eax
f010a9cb:	0f 85 19 ff ff ff    	jne    f010a8ea <cleanup_buffers+0x1a>
f010a9d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a9d5:	0f 85 0f ff ff ff    	jne    f010a8ea <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010a9db:	90                   	nop
f010a9dc:	c9                   	leave  
f010a9dd:	c3                   	ret    

f010a9de <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010a9de:	55                   	push   %ebp
f010a9df:	89 e5                	mov    %esp,%ebp
f010a9e1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010a9e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010a9e8:	7e 06                	jle    f010a9f0 <set_program_priority+0x12>
f010a9ea:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a9ee:	7e 14                	jle    f010aa04 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010a9f0:	83 ec 04             	sub    $0x4,%esp
f010a9f3:	68 24 60 13 f0       	push   $0xf0136024
f010a9f8:	6a 10                	push   $0x10
f010a9fa:	68 48 60 13 f0       	push   $0xf0136048
f010a9ff:	e8 a2 57 ff ff       	call   f01001a6 <_panic>
		return;
	}
	if(env == NULL)
f010aa04:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa08:	74 75                	je     f010aa7f <set_program_priority+0xa1>
		return;
	switch(priority)
f010aa0a:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010aa0e:	77 56                	ja     f010aa66 <set_program_priority+0x88>
f010aa10:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa13:	c1 e0 02             	shl    $0x2,%eax
f010aa16:	05 84 60 13 f0       	add    $0xf0136084,%eax
f010aa1b:	8b 00                	mov    (%eax),%eax
f010aa1d:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010aa1f:	83 ec 08             	sub    $0x8,%esp
f010aa22:	6a 01                	push   $0x1
f010aa24:	ff 75 08             	pushl  0x8(%ebp)
f010aa27:	e8 61 d8 ff ff       	call   f010828d <half_WS_Size>
f010aa2c:	83 c4 10             	add    $0x10,%esp
			break;
f010aa2f:	eb 35                	jmp    f010aa66 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010aa31:	83 ec 08             	sub    $0x8,%esp
f010aa34:	6a 00                	push   $0x0
f010aa36:	ff 75 08             	pushl  0x8(%ebp)
f010aa39:	e8 4f d8 ff ff       	call   f010828d <half_WS_Size>
f010aa3e:	83 c4 10             	add    $0x10,%esp
			break;
f010aa41:	eb 23                	jmp    f010aa66 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010aa43:	83 ec 08             	sub    $0x8,%esp
f010aa46:	6a 01                	push   $0x1
f010aa48:	ff 75 08             	pushl  0x8(%ebp)
f010aa4b:	e8 20 d8 ff ff       	call   f0108270 <double_WS_Size>
f010aa50:	83 c4 10             	add    $0x10,%esp
			break;
f010aa53:	eb 11                	jmp    f010aa66 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010aa55:	83 ec 08             	sub    $0x8,%esp
f010aa58:	6a 00                	push   $0x0
f010aa5a:	ff 75 08             	pushl  0x8(%ebp)
f010aa5d:	e8 0e d8 ff ff       	call   f0108270 <double_WS_Size>
f010aa62:	83 c4 10             	add    $0x10,%esp
			break;
f010aa65:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010aa66:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa69:	8b 40 74             	mov    0x74(%eax),%eax
f010aa6c:	83 ec 08             	sub    $0x8,%esp
f010aa6f:	50                   	push   %eax
f010aa70:	68 65 60 13 f0       	push   $0xf0136065
f010aa75:	e8 b3 61 ff ff       	call   f0100c2d <cprintf>
f010aa7a:	83 c4 10             	add    $0x10,%esp
f010aa7d:	eb 01                	jmp    f010aa80 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010aa7f:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010aa80:	c9                   	leave  
f010aa81:	c3                   	ret    

f010aa82 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010aa82:	55                   	push   %ebp
f010aa83:	89 e5                	mov    %esp,%ebp
f010aa85:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aa88:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aa8f:	eb 29                	jmp    f010aaba <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010aa91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa94:	89 d0                	mov    %edx,%eax
f010aa96:	01 c0                	add    %eax,%eax
f010aa98:	01 d0                	add    %edx,%eax
f010aa9a:	c1 e0 02             	shl    $0x2,%eax
f010aa9d:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010aaa2:	8b 00                	mov    (%eax),%eax
f010aaa4:	83 ec 08             	sub    $0x8,%esp
f010aaa7:	50                   	push   %eax
f010aaa8:	ff 75 08             	pushl  0x8(%ebp)
f010aaab:	e8 b1 5e 02 00       	call   f0130961 <strcmp>
f010aab0:	83 c4 10             	add    $0x10,%esp
f010aab3:	85 c0                	test   %eax,%eax
f010aab5:	74 0f                	je     f010aac6 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aab7:	ff 45 f4             	incl   -0xc(%ebp)
f010aaba:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010aabf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010aac2:	7c cd                	jl     f010aa91 <get_user_program_info+0xf>
f010aac4:	eb 01                	jmp    f010aac7 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010aac6:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010aac7:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010aacc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010aacf:	75 1a                	jne    f010aaeb <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010aad1:	83 ec 08             	sub    $0x8,%esp
f010aad4:	ff 75 08             	pushl  0x8(%ebp)
f010aad7:	68 b1 6a 13 f0       	push   $0xf0136ab1
f010aadc:	e8 4c 61 ff ff       	call   f0100c2d <cprintf>
f010aae1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aae4:	b8 00 00 00 00       	mov    $0x0,%eax
f010aae9:	eb 11                	jmp    f010aafc <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010aaeb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaee:	89 d0                	mov    %edx,%eax
f010aaf0:	01 c0                	add    %eax,%eax
f010aaf2:	01 d0                	add    %edx,%eax
f010aaf4:	c1 e0 02             	shl    $0x2,%eax
f010aaf7:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010aafc:	c9                   	leave  
f010aafd:	c3                   	ret    

f010aafe <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010aafe:	55                   	push   %ebp
f010aaff:	89 e5                	mov    %esp,%ebp
f010ab01:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ab04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ab0b:	eb 30                	jmp    f010ab3d <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010ab0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab10:	89 d0                	mov    %edx,%eax
f010ab12:	01 c0                	add    %eax,%eax
f010ab14:	01 d0                	add    %edx,%eax
f010ab16:	c1 e0 02             	shl    $0x2,%eax
f010ab19:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010ab1e:	8b 00                	mov    (%eax),%eax
f010ab20:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab23:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010ab29:	83 ec 08             	sub    $0x8,%esp
f010ab2c:	50                   	push   %eax
f010ab2d:	52                   	push   %edx
f010ab2e:	e8 2e 5e 02 00       	call   f0130961 <strcmp>
f010ab33:	83 c4 10             	add    $0x10,%esp
f010ab36:	85 c0                	test   %eax,%eax
f010ab38:	74 0f                	je     f010ab49 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ab3a:	ff 45 f4             	incl   -0xc(%ebp)
f010ab3d:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010ab42:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ab45:	7c c6                	jl     f010ab0d <get_user_program_info_by_env+0xf>
f010ab47:	eb 01                	jmp    f010ab4a <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010ab49:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010ab4a:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010ab4f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ab52:	75 17                	jne    f010ab6b <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010ab54:	83 ec 0c             	sub    $0xc,%esp
f010ab57:	68 cc 6a 13 f0       	push   $0xf0136acc
f010ab5c:	e8 cc 60 ff ff       	call   f0100c2d <cprintf>
f010ab61:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ab64:	b8 00 00 00 00       	mov    $0x0,%eax
f010ab69:	eb 11                	jmp    f010ab7c <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010ab6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab6e:	89 d0                	mov    %edx,%eax
f010ab70:	01 c0                	add    %eax,%eax
f010ab72:	01 d0                	add    %edx,%eax
f010ab74:	c1 e0 02             	shl    $0x2,%eax
f010ab77:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010ab7c:	c9                   	leave  
f010ab7d:	c3                   	ret    

f010ab7e <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010ab7e:	55                   	push   %ebp
f010ab7f:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010ab81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab84:	83 f8 13             	cmp    $0x13,%eax
f010ab87:	77 0c                	ja     f010ab95 <trapname+0x17>
		return excnames[trapno];
f010ab89:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab8c:	8b 04 85 60 6e 13 f0 	mov    -0xfec91a0(,%eax,4),%eax
f010ab93:	eb 12                	jmp    f010aba7 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010ab95:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010ab99:	75 07                	jne    f010aba2 <trapname+0x24>
		return "System call";
f010ab9b:	b8 00 6b 13 f0       	mov    $0xf0136b00,%eax
f010aba0:	eb 05                	jmp    f010aba7 <trapname+0x29>
	return "(unknown trap)";
f010aba2:	b8 0c 6b 13 f0       	mov    $0xf0136b0c,%eax
}
f010aba7:	5d                   	pop    %ebp
f010aba8:	c3                   	ret    

f010aba9 <idt_init>:


void
idt_init(void)
{
f010aba9:	55                   	push   %ebp
f010abaa:	89 e5                	mov    %esp,%ebp
f010abac:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010abaf:	b8 ac c1 10 f0       	mov    $0xf010c1ac,%eax
f010abb4:	66 a3 b0 92 65 f0    	mov    %ax,0xf06592b0
f010abba:	66 c7 05 b2 92 65 f0 	movw   $0x8,0xf06592b2
f010abc1:	08 00 
f010abc3:	a0 b4 92 65 f0       	mov    0xf06592b4,%al
f010abc8:	83 e0 e0             	and    $0xffffffe0,%eax
f010abcb:	a2 b4 92 65 f0       	mov    %al,0xf06592b4
f010abd0:	a0 b4 92 65 f0       	mov    0xf06592b4,%al
f010abd5:	83 e0 1f             	and    $0x1f,%eax
f010abd8:	a2 b4 92 65 f0       	mov    %al,0xf06592b4
f010abdd:	a0 b5 92 65 f0       	mov    0xf06592b5,%al
f010abe2:	83 e0 f0             	and    $0xfffffff0,%eax
f010abe5:	83 c8 0e             	or     $0xe,%eax
f010abe8:	a2 b5 92 65 f0       	mov    %al,0xf06592b5
f010abed:	a0 b5 92 65 f0       	mov    0xf06592b5,%al
f010abf2:	83 e0 ef             	and    $0xffffffef,%eax
f010abf5:	a2 b5 92 65 f0       	mov    %al,0xf06592b5
f010abfa:	a0 b5 92 65 f0       	mov    0xf06592b5,%al
f010abff:	83 e0 9f             	and    $0xffffff9f,%eax
f010ac02:	a2 b5 92 65 f0       	mov    %al,0xf06592b5
f010ac07:	a0 b5 92 65 f0       	mov    0xf06592b5,%al
f010ac0c:	83 c8 80             	or     $0xffffff80,%eax
f010ac0f:	a2 b5 92 65 f0       	mov    %al,0xf06592b5
f010ac14:	b8 ac c1 10 f0       	mov    $0xf010c1ac,%eax
f010ac19:	c1 e8 10             	shr    $0x10,%eax
f010ac1c:	66 a3 b6 92 65 f0    	mov    %ax,0xf06592b6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010ac22:	b8 b4 c1 10 f0       	mov    $0xf010c1b4,%eax
f010ac27:	66 a3 c0 93 65 f0    	mov    %ax,0xf06593c0
f010ac2d:	66 c7 05 c2 93 65 f0 	movw   $0x8,0xf06593c2
f010ac34:	08 00 
f010ac36:	a0 c4 93 65 f0       	mov    0xf06593c4,%al
f010ac3b:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac3e:	a2 c4 93 65 f0       	mov    %al,0xf06593c4
f010ac43:	a0 c4 93 65 f0       	mov    0xf06593c4,%al
f010ac48:	83 e0 1f             	and    $0x1f,%eax
f010ac4b:	a2 c4 93 65 f0       	mov    %al,0xf06593c4
f010ac50:	a0 c5 93 65 f0       	mov    0xf06593c5,%al
f010ac55:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac58:	83 c8 0e             	or     $0xe,%eax
f010ac5b:	a2 c5 93 65 f0       	mov    %al,0xf06593c5
f010ac60:	a0 c5 93 65 f0       	mov    0xf06593c5,%al
f010ac65:	83 e0 ef             	and    $0xffffffef,%eax
f010ac68:	a2 c5 93 65 f0       	mov    %al,0xf06593c5
f010ac6d:	a0 c5 93 65 f0       	mov    0xf06593c5,%al
f010ac72:	83 c8 60             	or     $0x60,%eax
f010ac75:	a2 c5 93 65 f0       	mov    %al,0xf06593c5
f010ac7a:	a0 c5 93 65 f0       	mov    0xf06593c5,%al
f010ac7f:	83 c8 80             	or     $0xffffff80,%eax
f010ac82:	a2 c5 93 65 f0       	mov    %al,0xf06593c5
f010ac87:	b8 b4 c1 10 f0       	mov    $0xf010c1b4,%eax
f010ac8c:	c1 e8 10             	shr    $0x10,%eax
f010ac8f:	66 a3 c6 93 65 f0    	mov    %ax,0xf06593c6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010ac95:	b8 be c1 10 f0       	mov    $0xf010c1be,%eax
f010ac9a:	66 a3 80 92 65 f0    	mov    %ax,0xf0659280
f010aca0:	66 c7 05 82 92 65 f0 	movw   $0x8,0xf0659282
f010aca7:	08 00 
f010aca9:	a0 84 92 65 f0       	mov    0xf0659284,%al
f010acae:	83 e0 e0             	and    $0xffffffe0,%eax
f010acb1:	a2 84 92 65 f0       	mov    %al,0xf0659284
f010acb6:	a0 84 92 65 f0       	mov    0xf0659284,%al
f010acbb:	83 e0 1f             	and    $0x1f,%eax
f010acbe:	a2 84 92 65 f0       	mov    %al,0xf0659284
f010acc3:	a0 85 92 65 f0       	mov    0xf0659285,%al
f010acc8:	83 e0 f0             	and    $0xfffffff0,%eax
f010accb:	83 c8 0e             	or     $0xe,%eax
f010acce:	a2 85 92 65 f0       	mov    %al,0xf0659285
f010acd3:	a0 85 92 65 f0       	mov    0xf0659285,%al
f010acd8:	83 e0 ef             	and    $0xffffffef,%eax
f010acdb:	a2 85 92 65 f0       	mov    %al,0xf0659285
f010ace0:	a0 85 92 65 f0       	mov    0xf0659285,%al
f010ace5:	83 e0 9f             	and    $0xffffff9f,%eax
f010ace8:	a2 85 92 65 f0       	mov    %al,0xf0659285
f010aced:	a0 85 92 65 f0       	mov    0xf0659285,%al
f010acf2:	83 c8 80             	or     $0xffffff80,%eax
f010acf5:	a2 85 92 65 f0       	mov    %al,0xf0659285
f010acfa:	b8 be c1 10 f0       	mov    $0xf010c1be,%eax
f010acff:	c1 e8 10             	shr    $0x10,%eax
f010ad02:	66 a3 86 92 65 f0    	mov    %ax,0xf0659286


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010ad08:	b8 c6 c1 10 f0       	mov    $0xf010c1c6,%eax
f010ad0d:	66 a3 40 92 65 f0    	mov    %ax,0xf0659240
f010ad13:	66 c7 05 42 92 65 f0 	movw   $0x8,0xf0659242
f010ad1a:	08 00 
f010ad1c:	a0 44 92 65 f0       	mov    0xf0659244,%al
f010ad21:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad24:	a2 44 92 65 f0       	mov    %al,0xf0659244
f010ad29:	a0 44 92 65 f0       	mov    0xf0659244,%al
f010ad2e:	83 e0 1f             	and    $0x1f,%eax
f010ad31:	a2 44 92 65 f0       	mov    %al,0xf0659244
f010ad36:	a0 45 92 65 f0       	mov    0xf0659245,%al
f010ad3b:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad3e:	83 c8 0e             	or     $0xe,%eax
f010ad41:	a2 45 92 65 f0       	mov    %al,0xf0659245
f010ad46:	a0 45 92 65 f0       	mov    0xf0659245,%al
f010ad4b:	83 e0 ef             	and    $0xffffffef,%eax
f010ad4e:	a2 45 92 65 f0       	mov    %al,0xf0659245
f010ad53:	a0 45 92 65 f0       	mov    0xf0659245,%al
f010ad58:	83 c8 60             	or     $0x60,%eax
f010ad5b:	a2 45 92 65 f0       	mov    %al,0xf0659245
f010ad60:	a0 45 92 65 f0       	mov    0xf0659245,%al
f010ad65:	83 c8 80             	or     $0xffffff80,%eax
f010ad68:	a2 45 92 65 f0       	mov    %al,0xf0659245
f010ad6d:	b8 c6 c1 10 f0       	mov    $0xf010c1c6,%eax
f010ad72:	c1 e8 10             	shr    $0x10,%eax
f010ad75:	66 a3 46 92 65 f0    	mov    %ax,0xf0659246
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010ad7b:	b8 d0 c1 10 f0       	mov    $0xf010c1d0,%eax
f010ad80:	66 a3 48 92 65 f0    	mov    %ax,0xf0659248
f010ad86:	66 c7 05 4a 92 65 f0 	movw   $0x8,0xf065924a
f010ad8d:	08 00 
f010ad8f:	a0 4c 92 65 f0       	mov    0xf065924c,%al
f010ad94:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad97:	a2 4c 92 65 f0       	mov    %al,0xf065924c
f010ad9c:	a0 4c 92 65 f0       	mov    0xf065924c,%al
f010ada1:	83 e0 1f             	and    $0x1f,%eax
f010ada4:	a2 4c 92 65 f0       	mov    %al,0xf065924c
f010ada9:	a0 4d 92 65 f0       	mov    0xf065924d,%al
f010adae:	83 c8 0f             	or     $0xf,%eax
f010adb1:	a2 4d 92 65 f0       	mov    %al,0xf065924d
f010adb6:	a0 4d 92 65 f0       	mov    0xf065924d,%al
f010adbb:	83 e0 ef             	and    $0xffffffef,%eax
f010adbe:	a2 4d 92 65 f0       	mov    %al,0xf065924d
f010adc3:	a0 4d 92 65 f0       	mov    0xf065924d,%al
f010adc8:	83 c8 60             	or     $0x60,%eax
f010adcb:	a2 4d 92 65 f0       	mov    %al,0xf065924d
f010add0:	a0 4d 92 65 f0       	mov    0xf065924d,%al
f010add5:	83 c8 80             	or     $0xffffff80,%eax
f010add8:	a2 4d 92 65 f0       	mov    %al,0xf065924d
f010addd:	b8 d0 c1 10 f0       	mov    $0xf010c1d0,%eax
f010ade2:	c1 e8 10             	shr    $0x10,%eax
f010ade5:	66 a3 4e 92 65 f0    	mov    %ax,0xf065924e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010adeb:	b8 da c1 10 f0       	mov    $0xf010c1da,%eax
f010adf0:	66 a3 50 92 65 f0    	mov    %ax,0xf0659250
f010adf6:	66 c7 05 52 92 65 f0 	movw   $0x8,0xf0659252
f010adfd:	08 00 
f010adff:	a0 54 92 65 f0       	mov    0xf0659254,%al
f010ae04:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae07:	a2 54 92 65 f0       	mov    %al,0xf0659254
f010ae0c:	a0 54 92 65 f0       	mov    0xf0659254,%al
f010ae11:	83 e0 1f             	and    $0x1f,%eax
f010ae14:	a2 54 92 65 f0       	mov    %al,0xf0659254
f010ae19:	a0 55 92 65 f0       	mov    0xf0659255,%al
f010ae1e:	83 e0 f0             	and    $0xfffffff0,%eax
f010ae21:	83 c8 0e             	or     $0xe,%eax
f010ae24:	a2 55 92 65 f0       	mov    %al,0xf0659255
f010ae29:	a0 55 92 65 f0       	mov    0xf0659255,%al
f010ae2e:	83 e0 ef             	and    $0xffffffef,%eax
f010ae31:	a2 55 92 65 f0       	mov    %al,0xf0659255
f010ae36:	a0 55 92 65 f0       	mov    0xf0659255,%al
f010ae3b:	83 c8 60             	or     $0x60,%eax
f010ae3e:	a2 55 92 65 f0       	mov    %al,0xf0659255
f010ae43:	a0 55 92 65 f0       	mov    0xf0659255,%al
f010ae48:	83 c8 80             	or     $0xffffff80,%eax
f010ae4b:	a2 55 92 65 f0       	mov    %al,0xf0659255
f010ae50:	b8 da c1 10 f0       	mov    $0xf010c1da,%eax
f010ae55:	c1 e8 10             	shr    $0x10,%eax
f010ae58:	66 a3 56 92 65 f0    	mov    %ax,0xf0659256
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010ae5e:	b8 e4 c1 10 f0       	mov    $0xf010c1e4,%eax
f010ae63:	66 a3 58 92 65 f0    	mov    %ax,0xf0659258
f010ae69:	66 c7 05 5a 92 65 f0 	movw   $0x8,0xf065925a
f010ae70:	08 00 
f010ae72:	a0 5c 92 65 f0       	mov    0xf065925c,%al
f010ae77:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae7a:	a2 5c 92 65 f0       	mov    %al,0xf065925c
f010ae7f:	a0 5c 92 65 f0       	mov    0xf065925c,%al
f010ae84:	83 e0 1f             	and    $0x1f,%eax
f010ae87:	a2 5c 92 65 f0       	mov    %al,0xf065925c
f010ae8c:	a0 5d 92 65 f0       	mov    0xf065925d,%al
f010ae91:	83 c8 0f             	or     $0xf,%eax
f010ae94:	a2 5d 92 65 f0       	mov    %al,0xf065925d
f010ae99:	a0 5d 92 65 f0       	mov    0xf065925d,%al
f010ae9e:	83 e0 ef             	and    $0xffffffef,%eax
f010aea1:	a2 5d 92 65 f0       	mov    %al,0xf065925d
f010aea6:	a0 5d 92 65 f0       	mov    0xf065925d,%al
f010aeab:	83 c8 60             	or     $0x60,%eax
f010aeae:	a2 5d 92 65 f0       	mov    %al,0xf065925d
f010aeb3:	a0 5d 92 65 f0       	mov    0xf065925d,%al
f010aeb8:	83 c8 80             	or     $0xffffff80,%eax
f010aebb:	a2 5d 92 65 f0       	mov    %al,0xf065925d
f010aec0:	b8 e4 c1 10 f0       	mov    $0xf010c1e4,%eax
f010aec5:	c1 e8 10             	shr    $0x10,%eax
f010aec8:	66 a3 5e 92 65 f0    	mov    %ax,0xf065925e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010aece:	b8 ee c1 10 f0       	mov    $0xf010c1ee,%eax
f010aed3:	66 a3 60 92 65 f0    	mov    %ax,0xf0659260
f010aed9:	66 c7 05 62 92 65 f0 	movw   $0x8,0xf0659262
f010aee0:	08 00 
f010aee2:	a0 64 92 65 f0       	mov    0xf0659264,%al
f010aee7:	83 e0 e0             	and    $0xffffffe0,%eax
f010aeea:	a2 64 92 65 f0       	mov    %al,0xf0659264
f010aeef:	a0 64 92 65 f0       	mov    0xf0659264,%al
f010aef4:	83 e0 1f             	and    $0x1f,%eax
f010aef7:	a2 64 92 65 f0       	mov    %al,0xf0659264
f010aefc:	a0 65 92 65 f0       	mov    0xf0659265,%al
f010af01:	83 c8 0f             	or     $0xf,%eax
f010af04:	a2 65 92 65 f0       	mov    %al,0xf0659265
f010af09:	a0 65 92 65 f0       	mov    0xf0659265,%al
f010af0e:	83 e0 ef             	and    $0xffffffef,%eax
f010af11:	a2 65 92 65 f0       	mov    %al,0xf0659265
f010af16:	a0 65 92 65 f0       	mov    0xf0659265,%al
f010af1b:	83 c8 60             	or     $0x60,%eax
f010af1e:	a2 65 92 65 f0       	mov    %al,0xf0659265
f010af23:	a0 65 92 65 f0       	mov    0xf0659265,%al
f010af28:	83 c8 80             	or     $0xffffff80,%eax
f010af2b:	a2 65 92 65 f0       	mov    %al,0xf0659265
f010af30:	b8 ee c1 10 f0       	mov    $0xf010c1ee,%eax
f010af35:	c1 e8 10             	shr    $0x10,%eax
f010af38:	66 a3 66 92 65 f0    	mov    %ax,0xf0659266
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010af3e:	b8 f8 c1 10 f0       	mov    $0xf010c1f8,%eax
f010af43:	66 a3 68 92 65 f0    	mov    %ax,0xf0659268
f010af49:	66 c7 05 6a 92 65 f0 	movw   $0x8,0xf065926a
f010af50:	08 00 
f010af52:	a0 6c 92 65 f0       	mov    0xf065926c,%al
f010af57:	83 e0 e0             	and    $0xffffffe0,%eax
f010af5a:	a2 6c 92 65 f0       	mov    %al,0xf065926c
f010af5f:	a0 6c 92 65 f0       	mov    0xf065926c,%al
f010af64:	83 e0 1f             	and    $0x1f,%eax
f010af67:	a2 6c 92 65 f0       	mov    %al,0xf065926c
f010af6c:	a0 6d 92 65 f0       	mov    0xf065926d,%al
f010af71:	83 e0 f0             	and    $0xfffffff0,%eax
f010af74:	83 c8 0e             	or     $0xe,%eax
f010af77:	a2 6d 92 65 f0       	mov    %al,0xf065926d
f010af7c:	a0 6d 92 65 f0       	mov    0xf065926d,%al
f010af81:	83 e0 ef             	and    $0xffffffef,%eax
f010af84:	a2 6d 92 65 f0       	mov    %al,0xf065926d
f010af89:	a0 6d 92 65 f0       	mov    0xf065926d,%al
f010af8e:	83 c8 60             	or     $0x60,%eax
f010af91:	a2 6d 92 65 f0       	mov    %al,0xf065926d
f010af96:	a0 6d 92 65 f0       	mov    0xf065926d,%al
f010af9b:	83 c8 80             	or     $0xffffff80,%eax
f010af9e:	a2 6d 92 65 f0       	mov    %al,0xf065926d
f010afa3:	b8 f8 c1 10 f0       	mov    $0xf010c1f8,%eax
f010afa8:	c1 e8 10             	shr    $0x10,%eax
f010afab:	66 a3 6e 92 65 f0    	mov    %ax,0xf065926e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010afb1:	b8 02 c2 10 f0       	mov    $0xf010c202,%eax
f010afb6:	66 a3 70 92 65 f0    	mov    %ax,0xf0659270
f010afbc:	66 c7 05 72 92 65 f0 	movw   $0x8,0xf0659272
f010afc3:	08 00 
f010afc5:	a0 74 92 65 f0       	mov    0xf0659274,%al
f010afca:	83 e0 e0             	and    $0xffffffe0,%eax
f010afcd:	a2 74 92 65 f0       	mov    %al,0xf0659274
f010afd2:	a0 74 92 65 f0       	mov    0xf0659274,%al
f010afd7:	83 e0 1f             	and    $0x1f,%eax
f010afda:	a2 74 92 65 f0       	mov    %al,0xf0659274
f010afdf:	a0 75 92 65 f0       	mov    0xf0659275,%al
f010afe4:	83 e0 f0             	and    $0xfffffff0,%eax
f010afe7:	83 c8 0e             	or     $0xe,%eax
f010afea:	a2 75 92 65 f0       	mov    %al,0xf0659275
f010afef:	a0 75 92 65 f0       	mov    0xf0659275,%al
f010aff4:	83 e0 ef             	and    $0xffffffef,%eax
f010aff7:	a2 75 92 65 f0       	mov    %al,0xf0659275
f010affc:	a0 75 92 65 f0       	mov    0xf0659275,%al
f010b001:	83 c8 60             	or     $0x60,%eax
f010b004:	a2 75 92 65 f0       	mov    %al,0xf0659275
f010b009:	a0 75 92 65 f0       	mov    0xf0659275,%al
f010b00e:	83 c8 80             	or     $0xffffff80,%eax
f010b011:	a2 75 92 65 f0       	mov    %al,0xf0659275
f010b016:	b8 02 c2 10 f0       	mov    $0xf010c202,%eax
f010b01b:	c1 e8 10             	shr    $0x10,%eax
f010b01e:	66 a3 76 92 65 f0    	mov    %ax,0xf0659276
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b024:	b8 0c c2 10 f0       	mov    $0xf010c20c,%eax
f010b029:	66 a3 78 92 65 f0    	mov    %ax,0xf0659278
f010b02f:	66 c7 05 7a 92 65 f0 	movw   $0x8,0xf065927a
f010b036:	08 00 
f010b038:	a0 7c 92 65 f0       	mov    0xf065927c,%al
f010b03d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b040:	a2 7c 92 65 f0       	mov    %al,0xf065927c
f010b045:	a0 7c 92 65 f0       	mov    0xf065927c,%al
f010b04a:	83 e0 1f             	and    $0x1f,%eax
f010b04d:	a2 7c 92 65 f0       	mov    %al,0xf065927c
f010b052:	a0 7d 92 65 f0       	mov    0xf065927d,%al
f010b057:	83 e0 f0             	and    $0xfffffff0,%eax
f010b05a:	83 c8 0e             	or     $0xe,%eax
f010b05d:	a2 7d 92 65 f0       	mov    %al,0xf065927d
f010b062:	a0 7d 92 65 f0       	mov    0xf065927d,%al
f010b067:	83 e0 ef             	and    $0xffffffef,%eax
f010b06a:	a2 7d 92 65 f0       	mov    %al,0xf065927d
f010b06f:	a0 7d 92 65 f0       	mov    0xf065927d,%al
f010b074:	83 c8 60             	or     $0x60,%eax
f010b077:	a2 7d 92 65 f0       	mov    %al,0xf065927d
f010b07c:	a0 7d 92 65 f0       	mov    0xf065927d,%al
f010b081:	83 c8 80             	or     $0xffffff80,%eax
f010b084:	a2 7d 92 65 f0       	mov    %al,0xf065927d
f010b089:	b8 0c c2 10 f0       	mov    $0xf010c20c,%eax
f010b08e:	c1 e8 10             	shr    $0x10,%eax
f010b091:	66 a3 7e 92 65 f0    	mov    %ax,0xf065927e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b097:	b8 16 c2 10 f0       	mov    $0xf010c216,%eax
f010b09c:	66 a3 90 92 65 f0    	mov    %ax,0xf0659290
f010b0a2:	66 c7 05 92 92 65 f0 	movw   $0x8,0xf0659292
f010b0a9:	08 00 
f010b0ab:	a0 94 92 65 f0       	mov    0xf0659294,%al
f010b0b0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0b3:	a2 94 92 65 f0       	mov    %al,0xf0659294
f010b0b8:	a0 94 92 65 f0       	mov    0xf0659294,%al
f010b0bd:	83 e0 1f             	and    $0x1f,%eax
f010b0c0:	a2 94 92 65 f0       	mov    %al,0xf0659294
f010b0c5:	a0 95 92 65 f0       	mov    0xf0659295,%al
f010b0ca:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0cd:	83 c8 0e             	or     $0xe,%eax
f010b0d0:	a2 95 92 65 f0       	mov    %al,0xf0659295
f010b0d5:	a0 95 92 65 f0       	mov    0xf0659295,%al
f010b0da:	83 e0 ef             	and    $0xffffffef,%eax
f010b0dd:	a2 95 92 65 f0       	mov    %al,0xf0659295
f010b0e2:	a0 95 92 65 f0       	mov    0xf0659295,%al
f010b0e7:	83 c8 60             	or     $0x60,%eax
f010b0ea:	a2 95 92 65 f0       	mov    %al,0xf0659295
f010b0ef:	a0 95 92 65 f0       	mov    0xf0659295,%al
f010b0f4:	83 c8 80             	or     $0xffffff80,%eax
f010b0f7:	a2 95 92 65 f0       	mov    %al,0xf0659295
f010b0fc:	b8 16 c2 10 f0       	mov    $0xf010c216,%eax
f010b101:	c1 e8 10             	shr    $0x10,%eax
f010b104:	66 a3 96 92 65 f0    	mov    %ax,0xf0659296
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b10a:	b8 1e c2 10 f0       	mov    $0xf010c21e,%eax
f010b10f:	66 a3 98 92 65 f0    	mov    %ax,0xf0659298
f010b115:	66 c7 05 9a 92 65 f0 	movw   $0x8,0xf065929a
f010b11c:	08 00 
f010b11e:	a0 9c 92 65 f0       	mov    0xf065929c,%al
f010b123:	83 e0 e0             	and    $0xffffffe0,%eax
f010b126:	a2 9c 92 65 f0       	mov    %al,0xf065929c
f010b12b:	a0 9c 92 65 f0       	mov    0xf065929c,%al
f010b130:	83 e0 1f             	and    $0x1f,%eax
f010b133:	a2 9c 92 65 f0       	mov    %al,0xf065929c
f010b138:	a0 9d 92 65 f0       	mov    0xf065929d,%al
f010b13d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b140:	83 c8 0e             	or     $0xe,%eax
f010b143:	a2 9d 92 65 f0       	mov    %al,0xf065929d
f010b148:	a0 9d 92 65 f0       	mov    0xf065929d,%al
f010b14d:	83 e0 ef             	and    $0xffffffef,%eax
f010b150:	a2 9d 92 65 f0       	mov    %al,0xf065929d
f010b155:	a0 9d 92 65 f0       	mov    0xf065929d,%al
f010b15a:	83 c8 60             	or     $0x60,%eax
f010b15d:	a2 9d 92 65 f0       	mov    %al,0xf065929d
f010b162:	a0 9d 92 65 f0       	mov    0xf065929d,%al
f010b167:	83 c8 80             	or     $0xffffff80,%eax
f010b16a:	a2 9d 92 65 f0       	mov    %al,0xf065929d
f010b16f:	b8 1e c2 10 f0       	mov    $0xf010c21e,%eax
f010b174:	c1 e8 10             	shr    $0x10,%eax
f010b177:	66 a3 9e 92 65 f0    	mov    %ax,0xf065929e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b17d:	b8 22 c2 10 f0       	mov    $0xf010c222,%eax
f010b182:	66 a3 a0 92 65 f0    	mov    %ax,0xf06592a0
f010b188:	66 c7 05 a2 92 65 f0 	movw   $0x8,0xf06592a2
f010b18f:	08 00 
f010b191:	a0 a4 92 65 f0       	mov    0xf06592a4,%al
f010b196:	83 e0 e0             	and    $0xffffffe0,%eax
f010b199:	a2 a4 92 65 f0       	mov    %al,0xf06592a4
f010b19e:	a0 a4 92 65 f0       	mov    0xf06592a4,%al
f010b1a3:	83 e0 1f             	and    $0x1f,%eax
f010b1a6:	a2 a4 92 65 f0       	mov    %al,0xf06592a4
f010b1ab:	a0 a5 92 65 f0       	mov    0xf06592a5,%al
f010b1b0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1b3:	83 c8 0e             	or     $0xe,%eax
f010b1b6:	a2 a5 92 65 f0       	mov    %al,0xf06592a5
f010b1bb:	a0 a5 92 65 f0       	mov    0xf06592a5,%al
f010b1c0:	83 e0 ef             	and    $0xffffffef,%eax
f010b1c3:	a2 a5 92 65 f0       	mov    %al,0xf06592a5
f010b1c8:	a0 a5 92 65 f0       	mov    0xf06592a5,%al
f010b1cd:	83 c8 60             	or     $0x60,%eax
f010b1d0:	a2 a5 92 65 f0       	mov    %al,0xf06592a5
f010b1d5:	a0 a5 92 65 f0       	mov    0xf06592a5,%al
f010b1da:	83 c8 80             	or     $0xffffff80,%eax
f010b1dd:	a2 a5 92 65 f0       	mov    %al,0xf06592a5
f010b1e2:	b8 22 c2 10 f0       	mov    $0xf010c222,%eax
f010b1e7:	c1 e8 10             	shr    $0x10,%eax
f010b1ea:	66 a3 a6 92 65 f0    	mov    %ax,0xf06592a6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b1f0:	b8 26 c2 10 f0       	mov    $0xf010c226,%eax
f010b1f5:	66 a3 a8 92 65 f0    	mov    %ax,0xf06592a8
f010b1fb:	66 c7 05 aa 92 65 f0 	movw   $0x8,0xf06592aa
f010b202:	08 00 
f010b204:	a0 ac 92 65 f0       	mov    0xf06592ac,%al
f010b209:	83 e0 e0             	and    $0xffffffe0,%eax
f010b20c:	a2 ac 92 65 f0       	mov    %al,0xf06592ac
f010b211:	a0 ac 92 65 f0       	mov    0xf06592ac,%al
f010b216:	83 e0 1f             	and    $0x1f,%eax
f010b219:	a2 ac 92 65 f0       	mov    %al,0xf06592ac
f010b21e:	a0 ad 92 65 f0       	mov    0xf06592ad,%al
f010b223:	83 e0 f0             	and    $0xfffffff0,%eax
f010b226:	83 c8 0e             	or     $0xe,%eax
f010b229:	a2 ad 92 65 f0       	mov    %al,0xf06592ad
f010b22e:	a0 ad 92 65 f0       	mov    0xf06592ad,%al
f010b233:	83 e0 ef             	and    $0xffffffef,%eax
f010b236:	a2 ad 92 65 f0       	mov    %al,0xf06592ad
f010b23b:	a0 ad 92 65 f0       	mov    0xf06592ad,%al
f010b240:	83 c8 60             	or     $0x60,%eax
f010b243:	a2 ad 92 65 f0       	mov    %al,0xf06592ad
f010b248:	a0 ad 92 65 f0       	mov    0xf06592ad,%al
f010b24d:	83 c8 80             	or     $0xffffff80,%eax
f010b250:	a2 ad 92 65 f0       	mov    %al,0xf06592ad
f010b255:	b8 26 c2 10 f0       	mov    $0xf010c226,%eax
f010b25a:	c1 e8 10             	shr    $0x10,%eax
f010b25d:	66 a3 ae 92 65 f0    	mov    %ax,0xf06592ae
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b263:	b8 2a c2 10 f0       	mov    $0xf010c22a,%eax
f010b268:	66 a3 c0 92 65 f0    	mov    %ax,0xf06592c0
f010b26e:	66 c7 05 c2 92 65 f0 	movw   $0x8,0xf06592c2
f010b275:	08 00 
f010b277:	a0 c4 92 65 f0       	mov    0xf06592c4,%al
f010b27c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b27f:	a2 c4 92 65 f0       	mov    %al,0xf06592c4
f010b284:	a0 c4 92 65 f0       	mov    0xf06592c4,%al
f010b289:	83 e0 1f             	and    $0x1f,%eax
f010b28c:	a2 c4 92 65 f0       	mov    %al,0xf06592c4
f010b291:	a0 c5 92 65 f0       	mov    0xf06592c5,%al
f010b296:	83 e0 f0             	and    $0xfffffff0,%eax
f010b299:	83 c8 0e             	or     $0xe,%eax
f010b29c:	a2 c5 92 65 f0       	mov    %al,0xf06592c5
f010b2a1:	a0 c5 92 65 f0       	mov    0xf06592c5,%al
f010b2a6:	83 e0 ef             	and    $0xffffffef,%eax
f010b2a9:	a2 c5 92 65 f0       	mov    %al,0xf06592c5
f010b2ae:	a0 c5 92 65 f0       	mov    0xf06592c5,%al
f010b2b3:	83 c8 60             	or     $0x60,%eax
f010b2b6:	a2 c5 92 65 f0       	mov    %al,0xf06592c5
f010b2bb:	a0 c5 92 65 f0       	mov    0xf06592c5,%al
f010b2c0:	83 c8 80             	or     $0xffffff80,%eax
f010b2c3:	a2 c5 92 65 f0       	mov    %al,0xf06592c5
f010b2c8:	b8 2a c2 10 f0       	mov    $0xf010c22a,%eax
f010b2cd:	c1 e8 10             	shr    $0x10,%eax
f010b2d0:	66 a3 c6 92 65 f0    	mov    %ax,0xf06592c6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b2d6:	b8 30 c2 10 f0       	mov    $0xf010c230,%eax
f010b2db:	66 a3 c8 92 65 f0    	mov    %ax,0xf06592c8
f010b2e1:	66 c7 05 ca 92 65 f0 	movw   $0x8,0xf06592ca
f010b2e8:	08 00 
f010b2ea:	a0 cc 92 65 f0       	mov    0xf06592cc,%al
f010b2ef:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2f2:	a2 cc 92 65 f0       	mov    %al,0xf06592cc
f010b2f7:	a0 cc 92 65 f0       	mov    0xf06592cc,%al
f010b2fc:	83 e0 1f             	and    $0x1f,%eax
f010b2ff:	a2 cc 92 65 f0       	mov    %al,0xf06592cc
f010b304:	a0 cd 92 65 f0       	mov    0xf06592cd,%al
f010b309:	83 e0 f0             	and    $0xfffffff0,%eax
f010b30c:	83 c8 0e             	or     $0xe,%eax
f010b30f:	a2 cd 92 65 f0       	mov    %al,0xf06592cd
f010b314:	a0 cd 92 65 f0       	mov    0xf06592cd,%al
f010b319:	83 e0 ef             	and    $0xffffffef,%eax
f010b31c:	a2 cd 92 65 f0       	mov    %al,0xf06592cd
f010b321:	a0 cd 92 65 f0       	mov    0xf06592cd,%al
f010b326:	83 c8 60             	or     $0x60,%eax
f010b329:	a2 cd 92 65 f0       	mov    %al,0xf06592cd
f010b32e:	a0 cd 92 65 f0       	mov    0xf06592cd,%al
f010b333:	83 c8 80             	or     $0xffffff80,%eax
f010b336:	a2 cd 92 65 f0       	mov    %al,0xf06592cd
f010b33b:	b8 30 c2 10 f0       	mov    $0xf010c230,%eax
f010b340:	c1 e8 10             	shr    $0x10,%eax
f010b343:	66 a3 ce 92 65 f0    	mov    %ax,0xf06592ce
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b349:	b8 34 c2 10 f0       	mov    $0xf010c234,%eax
f010b34e:	66 a3 d0 92 65 f0    	mov    %ax,0xf06592d0
f010b354:	66 c7 05 d2 92 65 f0 	movw   $0x8,0xf06592d2
f010b35b:	08 00 
f010b35d:	a0 d4 92 65 f0       	mov    0xf06592d4,%al
f010b362:	83 e0 e0             	and    $0xffffffe0,%eax
f010b365:	a2 d4 92 65 f0       	mov    %al,0xf06592d4
f010b36a:	a0 d4 92 65 f0       	mov    0xf06592d4,%al
f010b36f:	83 e0 1f             	and    $0x1f,%eax
f010b372:	a2 d4 92 65 f0       	mov    %al,0xf06592d4
f010b377:	a0 d5 92 65 f0       	mov    0xf06592d5,%al
f010b37c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b37f:	83 c8 0e             	or     $0xe,%eax
f010b382:	a2 d5 92 65 f0       	mov    %al,0xf06592d5
f010b387:	a0 d5 92 65 f0       	mov    0xf06592d5,%al
f010b38c:	83 e0 ef             	and    $0xffffffef,%eax
f010b38f:	a2 d5 92 65 f0       	mov    %al,0xf06592d5
f010b394:	a0 d5 92 65 f0       	mov    0xf06592d5,%al
f010b399:	83 c8 60             	or     $0x60,%eax
f010b39c:	a2 d5 92 65 f0       	mov    %al,0xf06592d5
f010b3a1:	a0 d5 92 65 f0       	mov    0xf06592d5,%al
f010b3a6:	83 c8 80             	or     $0xffffff80,%eax
f010b3a9:	a2 d5 92 65 f0       	mov    %al,0xf06592d5
f010b3ae:	b8 34 c2 10 f0       	mov    $0xf010c234,%eax
f010b3b3:	c1 e8 10             	shr    $0x10,%eax
f010b3b6:	66 a3 d6 92 65 f0    	mov    %ax,0xf06592d6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b3bc:	b8 3a c2 10 f0       	mov    $0xf010c23a,%eax
f010b3c1:	66 a3 d8 92 65 f0    	mov    %ax,0xf06592d8
f010b3c7:	66 c7 05 da 92 65 f0 	movw   $0x8,0xf06592da
f010b3ce:	08 00 
f010b3d0:	a0 dc 92 65 f0       	mov    0xf06592dc,%al
f010b3d5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3d8:	a2 dc 92 65 f0       	mov    %al,0xf06592dc
f010b3dd:	a0 dc 92 65 f0       	mov    0xf06592dc,%al
f010b3e2:	83 e0 1f             	and    $0x1f,%eax
f010b3e5:	a2 dc 92 65 f0       	mov    %al,0xf06592dc
f010b3ea:	a0 dd 92 65 f0       	mov    0xf06592dd,%al
f010b3ef:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3f2:	83 c8 0e             	or     $0xe,%eax
f010b3f5:	a2 dd 92 65 f0       	mov    %al,0xf06592dd
f010b3fa:	a0 dd 92 65 f0       	mov    0xf06592dd,%al
f010b3ff:	83 e0 ef             	and    $0xffffffef,%eax
f010b402:	a2 dd 92 65 f0       	mov    %al,0xf06592dd
f010b407:	a0 dd 92 65 f0       	mov    0xf06592dd,%al
f010b40c:	83 c8 60             	or     $0x60,%eax
f010b40f:	a2 dd 92 65 f0       	mov    %al,0xf06592dd
f010b414:	a0 dd 92 65 f0       	mov    0xf06592dd,%al
f010b419:	83 c8 80             	or     $0xffffff80,%eax
f010b41c:	a2 dd 92 65 f0       	mov    %al,0xf06592dd
f010b421:	b8 3a c2 10 f0       	mov    $0xf010c23a,%eax
f010b426:	c1 e8 10             	shr    $0x10,%eax
f010b429:	66 a3 de 92 65 f0    	mov    %ax,0xf06592de


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b42f:	b8 40 c2 10 f0       	mov    $0xf010c240,%eax
f010b434:	66 a3 40 93 65 f0    	mov    %ax,0xf0659340
f010b43a:	66 c7 05 42 93 65 f0 	movw   $0x8,0xf0659342
f010b441:	08 00 
f010b443:	a0 44 93 65 f0       	mov    0xf0659344,%al
f010b448:	83 e0 e0             	and    $0xffffffe0,%eax
f010b44b:	a2 44 93 65 f0       	mov    %al,0xf0659344
f010b450:	a0 44 93 65 f0       	mov    0xf0659344,%al
f010b455:	83 e0 1f             	and    $0x1f,%eax
f010b458:	a2 44 93 65 f0       	mov    %al,0xf0659344
f010b45d:	a0 45 93 65 f0       	mov    0xf0659345,%al
f010b462:	83 e0 f0             	and    $0xfffffff0,%eax
f010b465:	83 c8 0e             	or     $0xe,%eax
f010b468:	a2 45 93 65 f0       	mov    %al,0xf0659345
f010b46d:	a0 45 93 65 f0       	mov    0xf0659345,%al
f010b472:	83 e0 ef             	and    $0xffffffef,%eax
f010b475:	a2 45 93 65 f0       	mov    %al,0xf0659345
f010b47a:	a0 45 93 65 f0       	mov    0xf0659345,%al
f010b47f:	83 c8 60             	or     $0x60,%eax
f010b482:	a2 45 93 65 f0       	mov    %al,0xf0659345
f010b487:	a0 45 93 65 f0       	mov    0xf0659345,%al
f010b48c:	83 c8 80             	or     $0xffffff80,%eax
f010b48f:	a2 45 93 65 f0       	mov    %al,0xf0659345
f010b494:	b8 40 c2 10 f0       	mov    $0xf010c240,%eax
f010b499:	c1 e8 10             	shr    $0x10,%eax
f010b49c:	66 a3 46 93 65 f0    	mov    %ax,0xf0659346
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b4a2:	b8 46 c2 10 f0       	mov    $0xf010c246,%eax
f010b4a7:	66 a3 48 93 65 f0    	mov    %ax,0xf0659348
f010b4ad:	66 c7 05 4a 93 65 f0 	movw   $0x8,0xf065934a
f010b4b4:	08 00 
f010b4b6:	a0 4c 93 65 f0       	mov    0xf065934c,%al
f010b4bb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4be:	a2 4c 93 65 f0       	mov    %al,0xf065934c
f010b4c3:	a0 4c 93 65 f0       	mov    0xf065934c,%al
f010b4c8:	83 e0 1f             	and    $0x1f,%eax
f010b4cb:	a2 4c 93 65 f0       	mov    %al,0xf065934c
f010b4d0:	a0 4d 93 65 f0       	mov    0xf065934d,%al
f010b4d5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4d8:	83 c8 0e             	or     $0xe,%eax
f010b4db:	a2 4d 93 65 f0       	mov    %al,0xf065934d
f010b4e0:	a0 4d 93 65 f0       	mov    0xf065934d,%al
f010b4e5:	83 e0 ef             	and    $0xffffffef,%eax
f010b4e8:	a2 4d 93 65 f0       	mov    %al,0xf065934d
f010b4ed:	a0 4d 93 65 f0       	mov    0xf065934d,%al
f010b4f2:	83 c8 60             	or     $0x60,%eax
f010b4f5:	a2 4d 93 65 f0       	mov    %al,0xf065934d
f010b4fa:	a0 4d 93 65 f0       	mov    0xf065934d,%al
f010b4ff:	83 c8 80             	or     $0xffffff80,%eax
f010b502:	a2 4d 93 65 f0       	mov    %al,0xf065934d
f010b507:	b8 46 c2 10 f0       	mov    $0xf010c246,%eax
f010b50c:	c1 e8 10             	shr    $0x10,%eax
f010b50f:	66 a3 4e 93 65 f0    	mov    %ax,0xf065934e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b515:	b8 4c c2 10 f0       	mov    $0xf010c24c,%eax
f010b51a:	66 a3 50 93 65 f0    	mov    %ax,0xf0659350
f010b520:	66 c7 05 52 93 65 f0 	movw   $0x8,0xf0659352
f010b527:	08 00 
f010b529:	a0 54 93 65 f0       	mov    0xf0659354,%al
f010b52e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b531:	a2 54 93 65 f0       	mov    %al,0xf0659354
f010b536:	a0 54 93 65 f0       	mov    0xf0659354,%al
f010b53b:	83 e0 1f             	and    $0x1f,%eax
f010b53e:	a2 54 93 65 f0       	mov    %al,0xf0659354
f010b543:	a0 55 93 65 f0       	mov    0xf0659355,%al
f010b548:	83 e0 f0             	and    $0xfffffff0,%eax
f010b54b:	83 c8 0e             	or     $0xe,%eax
f010b54e:	a2 55 93 65 f0       	mov    %al,0xf0659355
f010b553:	a0 55 93 65 f0       	mov    0xf0659355,%al
f010b558:	83 e0 ef             	and    $0xffffffef,%eax
f010b55b:	a2 55 93 65 f0       	mov    %al,0xf0659355
f010b560:	a0 55 93 65 f0       	mov    0xf0659355,%al
f010b565:	83 c8 60             	or     $0x60,%eax
f010b568:	a2 55 93 65 f0       	mov    %al,0xf0659355
f010b56d:	a0 55 93 65 f0       	mov    0xf0659355,%al
f010b572:	83 c8 80             	or     $0xffffff80,%eax
f010b575:	a2 55 93 65 f0       	mov    %al,0xf0659355
f010b57a:	b8 4c c2 10 f0       	mov    $0xf010c24c,%eax
f010b57f:	c1 e8 10             	shr    $0x10,%eax
f010b582:	66 a3 56 93 65 f0    	mov    %ax,0xf0659356
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b588:	b8 52 c2 10 f0       	mov    $0xf010c252,%eax
f010b58d:	66 a3 58 93 65 f0    	mov    %ax,0xf0659358
f010b593:	66 c7 05 5a 93 65 f0 	movw   $0x8,0xf065935a
f010b59a:	08 00 
f010b59c:	a0 5c 93 65 f0       	mov    0xf065935c,%al
f010b5a1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5a4:	a2 5c 93 65 f0       	mov    %al,0xf065935c
f010b5a9:	a0 5c 93 65 f0       	mov    0xf065935c,%al
f010b5ae:	83 e0 1f             	and    $0x1f,%eax
f010b5b1:	a2 5c 93 65 f0       	mov    %al,0xf065935c
f010b5b6:	a0 5d 93 65 f0       	mov    0xf065935d,%al
f010b5bb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5be:	83 c8 0e             	or     $0xe,%eax
f010b5c1:	a2 5d 93 65 f0       	mov    %al,0xf065935d
f010b5c6:	a0 5d 93 65 f0       	mov    0xf065935d,%al
f010b5cb:	83 e0 ef             	and    $0xffffffef,%eax
f010b5ce:	a2 5d 93 65 f0       	mov    %al,0xf065935d
f010b5d3:	a0 5d 93 65 f0       	mov    0xf065935d,%al
f010b5d8:	83 c8 60             	or     $0x60,%eax
f010b5db:	a2 5d 93 65 f0       	mov    %al,0xf065935d
f010b5e0:	a0 5d 93 65 f0       	mov    0xf065935d,%al
f010b5e5:	83 c8 80             	or     $0xffffff80,%eax
f010b5e8:	a2 5d 93 65 f0       	mov    %al,0xf065935d
f010b5ed:	b8 52 c2 10 f0       	mov    $0xf010c252,%eax
f010b5f2:	c1 e8 10             	shr    $0x10,%eax
f010b5f5:	66 a3 5e 93 65 f0    	mov    %ax,0xf065935e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b5fb:	b8 58 c2 10 f0       	mov    $0xf010c258,%eax
f010b600:	66 a3 60 93 65 f0    	mov    %ax,0xf0659360
f010b606:	66 c7 05 62 93 65 f0 	movw   $0x8,0xf0659362
f010b60d:	08 00 
f010b60f:	a0 64 93 65 f0       	mov    0xf0659364,%al
f010b614:	83 e0 e0             	and    $0xffffffe0,%eax
f010b617:	a2 64 93 65 f0       	mov    %al,0xf0659364
f010b61c:	a0 64 93 65 f0       	mov    0xf0659364,%al
f010b621:	83 e0 1f             	and    $0x1f,%eax
f010b624:	a2 64 93 65 f0       	mov    %al,0xf0659364
f010b629:	a0 65 93 65 f0       	mov    0xf0659365,%al
f010b62e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b631:	83 c8 0e             	or     $0xe,%eax
f010b634:	a2 65 93 65 f0       	mov    %al,0xf0659365
f010b639:	a0 65 93 65 f0       	mov    0xf0659365,%al
f010b63e:	83 e0 ef             	and    $0xffffffef,%eax
f010b641:	a2 65 93 65 f0       	mov    %al,0xf0659365
f010b646:	a0 65 93 65 f0       	mov    0xf0659365,%al
f010b64b:	83 c8 60             	or     $0x60,%eax
f010b64e:	a2 65 93 65 f0       	mov    %al,0xf0659365
f010b653:	a0 65 93 65 f0       	mov    0xf0659365,%al
f010b658:	83 c8 80             	or     $0xffffff80,%eax
f010b65b:	a2 65 93 65 f0       	mov    %al,0xf0659365
f010b660:	b8 58 c2 10 f0       	mov    $0xf010c258,%eax
f010b665:	c1 e8 10             	shr    $0x10,%eax
f010b668:	66 a3 66 93 65 f0    	mov    %ax,0xf0659366
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010b66e:	b8 5e c2 10 f0       	mov    $0xf010c25e,%eax
f010b673:	66 a3 68 93 65 f0    	mov    %ax,0xf0659368
f010b679:	66 c7 05 6a 93 65 f0 	movw   $0x8,0xf065936a
f010b680:	08 00 
f010b682:	a0 6c 93 65 f0       	mov    0xf065936c,%al
f010b687:	83 e0 e0             	and    $0xffffffe0,%eax
f010b68a:	a2 6c 93 65 f0       	mov    %al,0xf065936c
f010b68f:	a0 6c 93 65 f0       	mov    0xf065936c,%al
f010b694:	83 e0 1f             	and    $0x1f,%eax
f010b697:	a2 6c 93 65 f0       	mov    %al,0xf065936c
f010b69c:	a0 6d 93 65 f0       	mov    0xf065936d,%al
f010b6a1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6a4:	83 c8 0e             	or     $0xe,%eax
f010b6a7:	a2 6d 93 65 f0       	mov    %al,0xf065936d
f010b6ac:	a0 6d 93 65 f0       	mov    0xf065936d,%al
f010b6b1:	83 e0 ef             	and    $0xffffffef,%eax
f010b6b4:	a2 6d 93 65 f0       	mov    %al,0xf065936d
f010b6b9:	a0 6d 93 65 f0       	mov    0xf065936d,%al
f010b6be:	83 c8 60             	or     $0x60,%eax
f010b6c1:	a2 6d 93 65 f0       	mov    %al,0xf065936d
f010b6c6:	a0 6d 93 65 f0       	mov    0xf065936d,%al
f010b6cb:	83 c8 80             	or     $0xffffff80,%eax
f010b6ce:	a2 6d 93 65 f0       	mov    %al,0xf065936d
f010b6d3:	b8 5e c2 10 f0       	mov    $0xf010c25e,%eax
f010b6d8:	c1 e8 10             	shr    $0x10,%eax
f010b6db:	66 a3 6e 93 65 f0    	mov    %ax,0xf065936e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010b6e1:	b8 64 c2 10 f0       	mov    $0xf010c264,%eax
f010b6e6:	66 a3 70 93 65 f0    	mov    %ax,0xf0659370
f010b6ec:	66 c7 05 72 93 65 f0 	movw   $0x8,0xf0659372
f010b6f3:	08 00 
f010b6f5:	a0 74 93 65 f0       	mov    0xf0659374,%al
f010b6fa:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6fd:	a2 74 93 65 f0       	mov    %al,0xf0659374
f010b702:	a0 74 93 65 f0       	mov    0xf0659374,%al
f010b707:	83 e0 1f             	and    $0x1f,%eax
f010b70a:	a2 74 93 65 f0       	mov    %al,0xf0659374
f010b70f:	a0 75 93 65 f0       	mov    0xf0659375,%al
f010b714:	83 e0 f0             	and    $0xfffffff0,%eax
f010b717:	83 c8 0e             	or     $0xe,%eax
f010b71a:	a2 75 93 65 f0       	mov    %al,0xf0659375
f010b71f:	a0 75 93 65 f0       	mov    0xf0659375,%al
f010b724:	83 e0 ef             	and    $0xffffffef,%eax
f010b727:	a2 75 93 65 f0       	mov    %al,0xf0659375
f010b72c:	a0 75 93 65 f0       	mov    0xf0659375,%al
f010b731:	83 c8 60             	or     $0x60,%eax
f010b734:	a2 75 93 65 f0       	mov    %al,0xf0659375
f010b739:	a0 75 93 65 f0       	mov    0xf0659375,%al
f010b73e:	83 c8 80             	or     $0xffffff80,%eax
f010b741:	a2 75 93 65 f0       	mov    %al,0xf0659375
f010b746:	b8 64 c2 10 f0       	mov    $0xf010c264,%eax
f010b74b:	c1 e8 10             	shr    $0x10,%eax
f010b74e:	66 a3 76 93 65 f0    	mov    %ax,0xf0659376
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010b754:	b8 6a c2 10 f0       	mov    $0xf010c26a,%eax
f010b759:	66 a3 78 93 65 f0    	mov    %ax,0xf0659378
f010b75f:	66 c7 05 7a 93 65 f0 	movw   $0x8,0xf065937a
f010b766:	08 00 
f010b768:	a0 7c 93 65 f0       	mov    0xf065937c,%al
f010b76d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b770:	a2 7c 93 65 f0       	mov    %al,0xf065937c
f010b775:	a0 7c 93 65 f0       	mov    0xf065937c,%al
f010b77a:	83 e0 1f             	and    $0x1f,%eax
f010b77d:	a2 7c 93 65 f0       	mov    %al,0xf065937c
f010b782:	a0 7d 93 65 f0       	mov    0xf065937d,%al
f010b787:	83 e0 f0             	and    $0xfffffff0,%eax
f010b78a:	83 c8 0e             	or     $0xe,%eax
f010b78d:	a2 7d 93 65 f0       	mov    %al,0xf065937d
f010b792:	a0 7d 93 65 f0       	mov    0xf065937d,%al
f010b797:	83 e0 ef             	and    $0xffffffef,%eax
f010b79a:	a2 7d 93 65 f0       	mov    %al,0xf065937d
f010b79f:	a0 7d 93 65 f0       	mov    0xf065937d,%al
f010b7a4:	83 c8 60             	or     $0x60,%eax
f010b7a7:	a2 7d 93 65 f0       	mov    %al,0xf065937d
f010b7ac:	a0 7d 93 65 f0       	mov    0xf065937d,%al
f010b7b1:	83 c8 80             	or     $0xffffff80,%eax
f010b7b4:	a2 7d 93 65 f0       	mov    %al,0xf065937d
f010b7b9:	b8 6a c2 10 f0       	mov    $0xf010c26a,%eax
f010b7be:	c1 e8 10             	shr    $0x10,%eax
f010b7c1:	66 a3 7e 93 65 f0    	mov    %ax,0xf065937e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010b7c7:	b8 70 c2 10 f0       	mov    $0xf010c270,%eax
f010b7cc:	66 a3 80 93 65 f0    	mov    %ax,0xf0659380
f010b7d2:	66 c7 05 82 93 65 f0 	movw   $0x8,0xf0659382
f010b7d9:	08 00 
f010b7db:	a0 84 93 65 f0       	mov    0xf0659384,%al
f010b7e0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7e3:	a2 84 93 65 f0       	mov    %al,0xf0659384
f010b7e8:	a0 84 93 65 f0       	mov    0xf0659384,%al
f010b7ed:	83 e0 1f             	and    $0x1f,%eax
f010b7f0:	a2 84 93 65 f0       	mov    %al,0xf0659384
f010b7f5:	a0 85 93 65 f0       	mov    0xf0659385,%al
f010b7fa:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7fd:	83 c8 0e             	or     $0xe,%eax
f010b800:	a2 85 93 65 f0       	mov    %al,0xf0659385
f010b805:	a0 85 93 65 f0       	mov    0xf0659385,%al
f010b80a:	83 e0 ef             	and    $0xffffffef,%eax
f010b80d:	a2 85 93 65 f0       	mov    %al,0xf0659385
f010b812:	a0 85 93 65 f0       	mov    0xf0659385,%al
f010b817:	83 c8 60             	or     $0x60,%eax
f010b81a:	a2 85 93 65 f0       	mov    %al,0xf0659385
f010b81f:	a0 85 93 65 f0       	mov    0xf0659385,%al
f010b824:	83 c8 80             	or     $0xffffff80,%eax
f010b827:	a2 85 93 65 f0       	mov    %al,0xf0659385
f010b82c:	b8 70 c2 10 f0       	mov    $0xf010c270,%eax
f010b831:	c1 e8 10             	shr    $0x10,%eax
f010b834:	66 a3 86 93 65 f0    	mov    %ax,0xf0659386
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010b83a:	b8 76 c2 10 f0       	mov    $0xf010c276,%eax
f010b83f:	66 a3 88 93 65 f0    	mov    %ax,0xf0659388
f010b845:	66 c7 05 8a 93 65 f0 	movw   $0x8,0xf065938a
f010b84c:	08 00 
f010b84e:	a0 8c 93 65 f0       	mov    0xf065938c,%al
f010b853:	83 e0 e0             	and    $0xffffffe0,%eax
f010b856:	a2 8c 93 65 f0       	mov    %al,0xf065938c
f010b85b:	a0 8c 93 65 f0       	mov    0xf065938c,%al
f010b860:	83 e0 1f             	and    $0x1f,%eax
f010b863:	a2 8c 93 65 f0       	mov    %al,0xf065938c
f010b868:	a0 8d 93 65 f0       	mov    0xf065938d,%al
f010b86d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b870:	83 c8 0e             	or     $0xe,%eax
f010b873:	a2 8d 93 65 f0       	mov    %al,0xf065938d
f010b878:	a0 8d 93 65 f0       	mov    0xf065938d,%al
f010b87d:	83 e0 ef             	and    $0xffffffef,%eax
f010b880:	a2 8d 93 65 f0       	mov    %al,0xf065938d
f010b885:	a0 8d 93 65 f0       	mov    0xf065938d,%al
f010b88a:	83 c8 60             	or     $0x60,%eax
f010b88d:	a2 8d 93 65 f0       	mov    %al,0xf065938d
f010b892:	a0 8d 93 65 f0       	mov    0xf065938d,%al
f010b897:	83 c8 80             	or     $0xffffff80,%eax
f010b89a:	a2 8d 93 65 f0       	mov    %al,0xf065938d
f010b89f:	b8 76 c2 10 f0       	mov    $0xf010c276,%eax
f010b8a4:	c1 e8 10             	shr    $0x10,%eax
f010b8a7:	66 a3 8e 93 65 f0    	mov    %ax,0xf065938e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010b8ad:	b8 7c c2 10 f0       	mov    $0xf010c27c,%eax
f010b8b2:	66 a3 90 93 65 f0    	mov    %ax,0xf0659390
f010b8b8:	66 c7 05 92 93 65 f0 	movw   $0x8,0xf0659392
f010b8bf:	08 00 
f010b8c1:	a0 94 93 65 f0       	mov    0xf0659394,%al
f010b8c6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8c9:	a2 94 93 65 f0       	mov    %al,0xf0659394
f010b8ce:	a0 94 93 65 f0       	mov    0xf0659394,%al
f010b8d3:	83 e0 1f             	and    $0x1f,%eax
f010b8d6:	a2 94 93 65 f0       	mov    %al,0xf0659394
f010b8db:	a0 95 93 65 f0       	mov    0xf0659395,%al
f010b8e0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8e3:	83 c8 0e             	or     $0xe,%eax
f010b8e6:	a2 95 93 65 f0       	mov    %al,0xf0659395
f010b8eb:	a0 95 93 65 f0       	mov    0xf0659395,%al
f010b8f0:	83 e0 ef             	and    $0xffffffef,%eax
f010b8f3:	a2 95 93 65 f0       	mov    %al,0xf0659395
f010b8f8:	a0 95 93 65 f0       	mov    0xf0659395,%al
f010b8fd:	83 c8 60             	or     $0x60,%eax
f010b900:	a2 95 93 65 f0       	mov    %al,0xf0659395
f010b905:	a0 95 93 65 f0       	mov    0xf0659395,%al
f010b90a:	83 c8 80             	or     $0xffffff80,%eax
f010b90d:	a2 95 93 65 f0       	mov    %al,0xf0659395
f010b912:	b8 7c c2 10 f0       	mov    $0xf010c27c,%eax
f010b917:	c1 e8 10             	shr    $0x10,%eax
f010b91a:	66 a3 96 93 65 f0    	mov    %ax,0xf0659396
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010b920:	b8 82 c2 10 f0       	mov    $0xf010c282,%eax
f010b925:	66 a3 98 93 65 f0    	mov    %ax,0xf0659398
f010b92b:	66 c7 05 9a 93 65 f0 	movw   $0x8,0xf065939a
f010b932:	08 00 
f010b934:	a0 9c 93 65 f0       	mov    0xf065939c,%al
f010b939:	83 e0 e0             	and    $0xffffffe0,%eax
f010b93c:	a2 9c 93 65 f0       	mov    %al,0xf065939c
f010b941:	a0 9c 93 65 f0       	mov    0xf065939c,%al
f010b946:	83 e0 1f             	and    $0x1f,%eax
f010b949:	a2 9c 93 65 f0       	mov    %al,0xf065939c
f010b94e:	a0 9d 93 65 f0       	mov    0xf065939d,%al
f010b953:	83 e0 f0             	and    $0xfffffff0,%eax
f010b956:	83 c8 0e             	or     $0xe,%eax
f010b959:	a2 9d 93 65 f0       	mov    %al,0xf065939d
f010b95e:	a0 9d 93 65 f0       	mov    0xf065939d,%al
f010b963:	83 e0 ef             	and    $0xffffffef,%eax
f010b966:	a2 9d 93 65 f0       	mov    %al,0xf065939d
f010b96b:	a0 9d 93 65 f0       	mov    0xf065939d,%al
f010b970:	83 c8 60             	or     $0x60,%eax
f010b973:	a2 9d 93 65 f0       	mov    %al,0xf065939d
f010b978:	a0 9d 93 65 f0       	mov    0xf065939d,%al
f010b97d:	83 c8 80             	or     $0xffffff80,%eax
f010b980:	a2 9d 93 65 f0       	mov    %al,0xf065939d
f010b985:	b8 82 c2 10 f0       	mov    $0xf010c282,%eax
f010b98a:	c1 e8 10             	shr    $0x10,%eax
f010b98d:	66 a3 9e 93 65 f0    	mov    %ax,0xf065939e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010b993:	b8 88 c2 10 f0       	mov    $0xf010c288,%eax
f010b998:	66 a3 a0 93 65 f0    	mov    %ax,0xf06593a0
f010b99e:	66 c7 05 a2 93 65 f0 	movw   $0x8,0xf06593a2
f010b9a5:	08 00 
f010b9a7:	a0 a4 93 65 f0       	mov    0xf06593a4,%al
f010b9ac:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9af:	a2 a4 93 65 f0       	mov    %al,0xf06593a4
f010b9b4:	a0 a4 93 65 f0       	mov    0xf06593a4,%al
f010b9b9:	83 e0 1f             	and    $0x1f,%eax
f010b9bc:	a2 a4 93 65 f0       	mov    %al,0xf06593a4
f010b9c1:	a0 a5 93 65 f0       	mov    0xf06593a5,%al
f010b9c6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9c9:	83 c8 0e             	or     $0xe,%eax
f010b9cc:	a2 a5 93 65 f0       	mov    %al,0xf06593a5
f010b9d1:	a0 a5 93 65 f0       	mov    0xf06593a5,%al
f010b9d6:	83 e0 ef             	and    $0xffffffef,%eax
f010b9d9:	a2 a5 93 65 f0       	mov    %al,0xf06593a5
f010b9de:	a0 a5 93 65 f0       	mov    0xf06593a5,%al
f010b9e3:	83 c8 60             	or     $0x60,%eax
f010b9e6:	a2 a5 93 65 f0       	mov    %al,0xf06593a5
f010b9eb:	a0 a5 93 65 f0       	mov    0xf06593a5,%al
f010b9f0:	83 c8 80             	or     $0xffffff80,%eax
f010b9f3:	a2 a5 93 65 f0       	mov    %al,0xf06593a5
f010b9f8:	b8 88 c2 10 f0       	mov    $0xf010c288,%eax
f010b9fd:	c1 e8 10             	shr    $0x10,%eax
f010ba00:	66 a3 a6 93 65 f0    	mov    %ax,0xf06593a6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010ba06:	b8 8e c2 10 f0       	mov    $0xf010c28e,%eax
f010ba0b:	66 a3 a8 93 65 f0    	mov    %ax,0xf06593a8
f010ba11:	66 c7 05 aa 93 65 f0 	movw   $0x8,0xf06593aa
f010ba18:	08 00 
f010ba1a:	a0 ac 93 65 f0       	mov    0xf06593ac,%al
f010ba1f:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba22:	a2 ac 93 65 f0       	mov    %al,0xf06593ac
f010ba27:	a0 ac 93 65 f0       	mov    0xf06593ac,%al
f010ba2c:	83 e0 1f             	and    $0x1f,%eax
f010ba2f:	a2 ac 93 65 f0       	mov    %al,0xf06593ac
f010ba34:	a0 ad 93 65 f0       	mov    0xf06593ad,%al
f010ba39:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba3c:	83 c8 0e             	or     $0xe,%eax
f010ba3f:	a2 ad 93 65 f0       	mov    %al,0xf06593ad
f010ba44:	a0 ad 93 65 f0       	mov    0xf06593ad,%al
f010ba49:	83 e0 ef             	and    $0xffffffef,%eax
f010ba4c:	a2 ad 93 65 f0       	mov    %al,0xf06593ad
f010ba51:	a0 ad 93 65 f0       	mov    0xf06593ad,%al
f010ba56:	83 c8 60             	or     $0x60,%eax
f010ba59:	a2 ad 93 65 f0       	mov    %al,0xf06593ad
f010ba5e:	a0 ad 93 65 f0       	mov    0xf06593ad,%al
f010ba63:	83 c8 80             	or     $0xffffff80,%eax
f010ba66:	a2 ad 93 65 f0       	mov    %al,0xf06593ad
f010ba6b:	b8 8e c2 10 f0       	mov    $0xf010c28e,%eax
f010ba70:	c1 e8 10             	shr    $0x10,%eax
f010ba73:	66 a3 ae 93 65 f0    	mov    %ax,0xf06593ae
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010ba79:	b8 94 c2 10 f0       	mov    $0xf010c294,%eax
f010ba7e:	66 a3 b0 93 65 f0    	mov    %ax,0xf06593b0
f010ba84:	66 c7 05 b2 93 65 f0 	movw   $0x8,0xf06593b2
f010ba8b:	08 00 
f010ba8d:	a0 b4 93 65 f0       	mov    0xf06593b4,%al
f010ba92:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba95:	a2 b4 93 65 f0       	mov    %al,0xf06593b4
f010ba9a:	a0 b4 93 65 f0       	mov    0xf06593b4,%al
f010ba9f:	83 e0 1f             	and    $0x1f,%eax
f010baa2:	a2 b4 93 65 f0       	mov    %al,0xf06593b4
f010baa7:	a0 b5 93 65 f0       	mov    0xf06593b5,%al
f010baac:	83 e0 f0             	and    $0xfffffff0,%eax
f010baaf:	83 c8 0e             	or     $0xe,%eax
f010bab2:	a2 b5 93 65 f0       	mov    %al,0xf06593b5
f010bab7:	a0 b5 93 65 f0       	mov    0xf06593b5,%al
f010babc:	83 e0 ef             	and    $0xffffffef,%eax
f010babf:	a2 b5 93 65 f0       	mov    %al,0xf06593b5
f010bac4:	a0 b5 93 65 f0       	mov    0xf06593b5,%al
f010bac9:	83 c8 60             	or     $0x60,%eax
f010bacc:	a2 b5 93 65 f0       	mov    %al,0xf06593b5
f010bad1:	a0 b5 93 65 f0       	mov    0xf06593b5,%al
f010bad6:	83 c8 80             	or     $0xffffff80,%eax
f010bad9:	a2 b5 93 65 f0       	mov    %al,0xf06593b5
f010bade:	b8 94 c2 10 f0       	mov    $0xf010c294,%eax
f010bae3:	c1 e8 10             	shr    $0x10,%eax
f010bae6:	66 a3 b6 93 65 f0    	mov    %ax,0xf06593b6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010baec:	b8 9a c2 10 f0       	mov    $0xf010c29a,%eax
f010baf1:	66 a3 b8 93 65 f0    	mov    %ax,0xf06593b8
f010baf7:	66 c7 05 ba 93 65 f0 	movw   $0x8,0xf06593ba
f010bafe:	08 00 
f010bb00:	a0 bc 93 65 f0       	mov    0xf06593bc,%al
f010bb05:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb08:	a2 bc 93 65 f0       	mov    %al,0xf06593bc
f010bb0d:	a0 bc 93 65 f0       	mov    0xf06593bc,%al
f010bb12:	83 e0 1f             	and    $0x1f,%eax
f010bb15:	a2 bc 93 65 f0       	mov    %al,0xf06593bc
f010bb1a:	a0 bd 93 65 f0       	mov    0xf06593bd,%al
f010bb1f:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb22:	83 c8 0e             	or     $0xe,%eax
f010bb25:	a2 bd 93 65 f0       	mov    %al,0xf06593bd
f010bb2a:	a0 bd 93 65 f0       	mov    0xf06593bd,%al
f010bb2f:	83 e0 ef             	and    $0xffffffef,%eax
f010bb32:	a2 bd 93 65 f0       	mov    %al,0xf06593bd
f010bb37:	a0 bd 93 65 f0       	mov    0xf06593bd,%al
f010bb3c:	83 c8 60             	or     $0x60,%eax
f010bb3f:	a2 bd 93 65 f0       	mov    %al,0xf06593bd
f010bb44:	a0 bd 93 65 f0       	mov    0xf06593bd,%al
f010bb49:	83 c8 80             	or     $0xffffff80,%eax
f010bb4c:	a2 bd 93 65 f0       	mov    %al,0xf06593bd
f010bb51:	b8 9a c2 10 f0       	mov    $0xf010c29a,%eax
f010bb56:	c1 e8 10             	shr    $0x10,%eax
f010bb59:	66 a3 be 93 65 f0    	mov    %ax,0xf06593be



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bb5f:	c7 05 44 9a 65 f0 00 	movl   $0xefc00000,0xf0659a44
f010bb66:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bb69:	66 c7 05 48 9a 65 f0 	movw   $0x10,0xf0659a48
f010bb70:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bb72:	66 c7 05 e8 18 19 f0 	movw   $0x68,0xf01918e8
f010bb79:	68 00 
f010bb7b:	b8 40 9a 65 f0       	mov    $0xf0659a40,%eax
f010bb80:	66 a3 ea 18 19 f0    	mov    %ax,0xf01918ea
f010bb86:	b8 40 9a 65 f0       	mov    $0xf0659a40,%eax
f010bb8b:	c1 e8 10             	shr    $0x10,%eax
f010bb8e:	a2 ec 18 19 f0       	mov    %al,0xf01918ec
f010bb93:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bb98:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb9b:	83 c8 09             	or     $0x9,%eax
f010bb9e:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bba3:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bba8:	83 c8 10             	or     $0x10,%eax
f010bbab:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bbb0:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bbb5:	83 e0 9f             	and    $0xffffff9f,%eax
f010bbb8:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bbbd:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bbc2:	83 c8 80             	or     $0xffffff80,%eax
f010bbc5:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bbca:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bbcf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbd2:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bbd7:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bbdc:	83 e0 ef             	and    $0xffffffef,%eax
f010bbdf:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bbe4:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bbe9:	83 e0 df             	and    $0xffffffdf,%eax
f010bbec:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bbf1:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bbf6:	83 c8 40             	or     $0x40,%eax
f010bbf9:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bbfe:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bc03:	83 e0 7f             	and    $0x7f,%eax
f010bc06:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bc0b:	b8 40 9a 65 f0       	mov    $0xf0659a40,%eax
f010bc10:	c1 e8 18             	shr    $0x18,%eax
f010bc13:	a2 ef 18 19 f0       	mov    %al,0xf01918ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010bc18:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bc1d:	83 e0 ef             	and    $0xffffffef,%eax
f010bc20:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bc25:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010bc2b:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010bc2f:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010bc32:	0f 01 1d c8 1c 19 f0 	lidtl  0xf0191cc8
}
f010bc39:	90                   	nop
f010bc3a:	c9                   	leave  
f010bc3b:	c3                   	ret    

f010bc3c <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010bc3c:	55                   	push   %ebp
f010bc3d:	89 e5                	mov    %esp,%ebp
f010bc3f:	53                   	push   %ebx
f010bc40:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010bc43:	83 ec 08             	sub    $0x8,%esp
f010bc46:	ff 75 08             	pushl  0x8(%ebp)
f010bc49:	68 1b 6b 13 f0       	push   $0xf0136b1b
f010bc4e:	e8 da 4f ff ff       	call   f0100c2d <cprintf>
f010bc53:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010bc56:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc59:	83 ec 0c             	sub    $0xc,%esp
f010bc5c:	50                   	push   %eax
f010bc5d:	e8 fd 00 00 00       	call   f010bd5f <print_regs>
f010bc62:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010bc65:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc68:	8b 40 20             	mov    0x20(%eax),%eax
f010bc6b:	0f b7 c0             	movzwl %ax,%eax
f010bc6e:	83 ec 08             	sub    $0x8,%esp
f010bc71:	50                   	push   %eax
f010bc72:	68 2d 6b 13 f0       	push   $0xf0136b2d
f010bc77:	e8 b1 4f ff ff       	call   f0100c2d <cprintf>
f010bc7c:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010bc7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc82:	8b 40 24             	mov    0x24(%eax),%eax
f010bc85:	0f b7 c0             	movzwl %ax,%eax
f010bc88:	83 ec 08             	sub    $0x8,%esp
f010bc8b:	50                   	push   %eax
f010bc8c:	68 40 6b 13 f0       	push   $0xf0136b40
f010bc91:	e8 97 4f ff ff       	call   f0100c2d <cprintf>
f010bc96:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010bc99:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc9c:	8b 58 28             	mov    0x28(%eax),%ebx
f010bc9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bca2:	8b 40 28             	mov    0x28(%eax),%eax
f010bca5:	83 ec 0c             	sub    $0xc,%esp
f010bca8:	50                   	push   %eax
f010bca9:	e8 d0 ee ff ff       	call   f010ab7e <trapname>
f010bcae:	83 c4 10             	add    $0x10,%esp
f010bcb1:	89 c2                	mov    %eax,%edx
f010bcb3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bcb6:	8b 40 28             	mov    0x28(%eax),%eax
f010bcb9:	53                   	push   %ebx
f010bcba:	52                   	push   %edx
f010bcbb:	50                   	push   %eax
f010bcbc:	68 53 6b 13 f0       	push   $0xf0136b53
f010bcc1:	e8 67 4f ff ff       	call   f0100c2d <cprintf>
f010bcc6:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010bcc9:	8b 45 08             	mov    0x8(%ebp),%eax
f010bccc:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bccf:	83 ec 08             	sub    $0x8,%esp
f010bcd2:	50                   	push   %eax
f010bcd3:	68 6a 6b 13 f0       	push   $0xf0136b6a
f010bcd8:	e8 50 4f ff ff       	call   f0100c2d <cprintf>
f010bcdd:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010bce0:	8b 45 08             	mov    0x8(%ebp),%eax
f010bce3:	8b 40 30             	mov    0x30(%eax),%eax
f010bce6:	83 ec 08             	sub    $0x8,%esp
f010bce9:	50                   	push   %eax
f010bcea:	68 79 6b 13 f0       	push   $0xf0136b79
f010bcef:	e8 39 4f ff ff       	call   f0100c2d <cprintf>
f010bcf4:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010bcf7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bcfa:	8b 40 34             	mov    0x34(%eax),%eax
f010bcfd:	0f b7 c0             	movzwl %ax,%eax
f010bd00:	83 ec 08             	sub    $0x8,%esp
f010bd03:	50                   	push   %eax
f010bd04:	68 88 6b 13 f0       	push   $0xf0136b88
f010bd09:	e8 1f 4f ff ff       	call   f0100c2d <cprintf>
f010bd0e:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010bd11:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd14:	8b 40 38             	mov    0x38(%eax),%eax
f010bd17:	83 ec 08             	sub    $0x8,%esp
f010bd1a:	50                   	push   %eax
f010bd1b:	68 9b 6b 13 f0       	push   $0xf0136b9b
f010bd20:	e8 08 4f ff ff       	call   f0100c2d <cprintf>
f010bd25:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010bd28:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd2b:	8b 40 3c             	mov    0x3c(%eax),%eax
f010bd2e:	83 ec 08             	sub    $0x8,%esp
f010bd31:	50                   	push   %eax
f010bd32:	68 aa 6b 13 f0       	push   $0xf0136baa
f010bd37:	e8 f1 4e ff ff       	call   f0100c2d <cprintf>
f010bd3c:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010bd3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd42:	8b 40 40             	mov    0x40(%eax),%eax
f010bd45:	0f b7 c0             	movzwl %ax,%eax
f010bd48:	83 ec 08             	sub    $0x8,%esp
f010bd4b:	50                   	push   %eax
f010bd4c:	68 b9 6b 13 f0       	push   $0xf0136bb9
f010bd51:	e8 d7 4e ff ff       	call   f0100c2d <cprintf>
f010bd56:	83 c4 10             	add    $0x10,%esp
}
f010bd59:	90                   	nop
f010bd5a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bd5d:	c9                   	leave  
f010bd5e:	c3                   	ret    

f010bd5f <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010bd5f:	55                   	push   %ebp
f010bd60:	89 e5                	mov    %esp,%ebp
f010bd62:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010bd65:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd68:	8b 00                	mov    (%eax),%eax
f010bd6a:	83 ec 08             	sub    $0x8,%esp
f010bd6d:	50                   	push   %eax
f010bd6e:	68 cc 6b 13 f0       	push   $0xf0136bcc
f010bd73:	e8 b5 4e ff ff       	call   f0100c2d <cprintf>
f010bd78:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010bd7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd7e:	8b 40 04             	mov    0x4(%eax),%eax
f010bd81:	83 ec 08             	sub    $0x8,%esp
f010bd84:	50                   	push   %eax
f010bd85:	68 db 6b 13 f0       	push   $0xf0136bdb
f010bd8a:	e8 9e 4e ff ff       	call   f0100c2d <cprintf>
f010bd8f:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010bd92:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd95:	8b 40 08             	mov    0x8(%eax),%eax
f010bd98:	83 ec 08             	sub    $0x8,%esp
f010bd9b:	50                   	push   %eax
f010bd9c:	68 ea 6b 13 f0       	push   $0xf0136bea
f010bda1:	e8 87 4e ff ff       	call   f0100c2d <cprintf>
f010bda6:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010bda9:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdac:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdaf:	83 ec 08             	sub    $0x8,%esp
f010bdb2:	50                   	push   %eax
f010bdb3:	68 f9 6b 13 f0       	push   $0xf0136bf9
f010bdb8:	e8 70 4e ff ff       	call   f0100c2d <cprintf>
f010bdbd:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010bdc0:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdc3:	8b 40 10             	mov    0x10(%eax),%eax
f010bdc6:	83 ec 08             	sub    $0x8,%esp
f010bdc9:	50                   	push   %eax
f010bdca:	68 08 6c 13 f0       	push   $0xf0136c08
f010bdcf:	e8 59 4e ff ff       	call   f0100c2d <cprintf>
f010bdd4:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010bdd7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdda:	8b 40 14             	mov    0x14(%eax),%eax
f010bddd:	83 ec 08             	sub    $0x8,%esp
f010bde0:	50                   	push   %eax
f010bde1:	68 17 6c 13 f0       	push   $0xf0136c17
f010bde6:	e8 42 4e ff ff       	call   f0100c2d <cprintf>
f010bdeb:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010bdee:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdf1:	8b 40 18             	mov    0x18(%eax),%eax
f010bdf4:	83 ec 08             	sub    $0x8,%esp
f010bdf7:	50                   	push   %eax
f010bdf8:	68 26 6c 13 f0       	push   $0xf0136c26
f010bdfd:	e8 2b 4e ff ff       	call   f0100c2d <cprintf>
f010be02:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010be05:	8b 45 08             	mov    0x8(%ebp),%eax
f010be08:	8b 40 1c             	mov    0x1c(%eax),%eax
f010be0b:	83 ec 08             	sub    $0x8,%esp
f010be0e:	50                   	push   %eax
f010be0f:	68 35 6c 13 f0       	push   $0xf0136c35
f010be14:	e8 14 4e ff ff       	call   f0100c2d <cprintf>
f010be19:	83 c4 10             	add    $0x10,%esp
}
f010be1c:	90                   	nop
f010be1d:	c9                   	leave  
f010be1e:	c3                   	ret    

f010be1f <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010be1f:	55                   	push   %ebp
f010be20:	89 e5                	mov    %esp,%ebp
f010be22:	57                   	push   %edi
f010be23:	56                   	push   %esi
f010be24:	53                   	push   %ebx
f010be25:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010be28:	8b 45 08             	mov    0x8(%ebp),%eax
f010be2b:	8b 40 28             	mov    0x28(%eax),%eax
f010be2e:	83 f8 0e             	cmp    $0xe,%eax
f010be31:	75 29                	jne    f010be5c <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010be33:	83 ec 0c             	sub    $0xc,%esp
f010be36:	6a 01                	push   $0x1
f010be38:	e8 5a 18 00 00       	call   f010d697 <isPageReplacmentAlgorithmLRU>
f010be3d:	83 c4 10             	add    $0x10,%esp
f010be40:	85 c0                	test   %eax,%eax
f010be42:	74 05                	je     f010be49 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010be44:	e8 6b 9a ff ff       	call   f01058b4 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010be49:	83 ec 0c             	sub    $0xc,%esp
f010be4c:	ff 75 08             	pushl  0x8(%ebp)
f010be4f:	e8 3b 02 00 00       	call   f010c08f <fault_handler>
f010be54:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010be57:	e9 a5 00 00 00       	jmp    f010bf01 <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010be5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010be5f:	8b 40 28             	mov    0x28(%eax),%eax
f010be62:	83 f8 30             	cmp    $0x30,%eax
f010be65:	75 42                	jne    f010bea9 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010be67:	8b 45 08             	mov    0x8(%ebp),%eax
f010be6a:	8b 78 04             	mov    0x4(%eax),%edi
f010be6d:	8b 45 08             	mov    0x8(%ebp),%eax
f010be70:	8b 30                	mov    (%eax),%esi
f010be72:	8b 45 08             	mov    0x8(%ebp),%eax
f010be75:	8b 58 10             	mov    0x10(%eax),%ebx
f010be78:	8b 45 08             	mov    0x8(%ebp),%eax
f010be7b:	8b 48 18             	mov    0x18(%eax),%ecx
f010be7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010be81:	8b 50 14             	mov    0x14(%eax),%edx
f010be84:	8b 45 08             	mov    0x8(%ebp),%eax
f010be87:	8b 40 1c             	mov    0x1c(%eax),%eax
f010be8a:	83 ec 08             	sub    $0x8,%esp
f010be8d:	57                   	push   %edi
f010be8e:	56                   	push   %esi
f010be8f:	53                   	push   %ebx
f010be90:	51                   	push   %ecx
f010be91:	52                   	push   %edx
f010be92:	50                   	push   %eax
f010be93:	e8 4a 0f 00 00       	call   f010cde2 <syscall>
f010be98:	83 c4 20             	add    $0x20,%esp
f010be9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010be9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bea1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010bea4:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010bea7:	eb 58                	jmp    f010bf01 <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010bea9:	8b 45 08             	mov    0x8(%ebp),%eax
f010beac:	8b 40 28             	mov    0x28(%eax),%eax
f010beaf:	83 f8 08             	cmp    $0x8,%eax
f010beb2:	75 17                	jne    f010becb <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010beb4:	83 ec 04             	sub    $0x4,%esp
f010beb7:	68 44 6c 13 f0       	push   $0xf0136c44
f010bebc:	68 e7 00 00 00       	push   $0xe7
f010bec1:	68 53 6c 13 f0       	push   $0xf0136c53
f010bec6:	e8 db 42 ff ff       	call   f01001a6 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010becb:	8b 45 08             	mov    0x8(%ebp),%eax
f010bece:	8b 40 28             	mov    0x28(%eax),%eax
f010bed1:	83 f8 20             	cmp    $0x20,%eax
f010bed4:	75 07                	jne    f010bedd <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010bed6:	e8 b8 99 ff ff       	call   f0105893 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010bedb:	eb 24                	jmp    f010bf01 <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010bedd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bee0:	8b 40 34             	mov    0x34(%eax),%eax
f010bee3:	66 83 f8 08          	cmp    $0x8,%ax
f010bee7:	75 17                	jne    f010bf00 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010bee9:	83 ec 04             	sub    $0x4,%esp
f010beec:	68 64 6c 13 f0       	push   $0xf0136c64
f010bef1:	68 f4 00 00 00       	push   $0xf4
f010bef6:	68 53 6c 13 f0       	push   $0xf0136c53
f010befb:	e8 a6 42 ff ff       	call   f01001a6 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010bf00:	90                   	nop
		}
	}
	return;
}
f010bf01:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bf04:	5b                   	pop    %ebx
f010bf05:	5e                   	pop    %esi
f010bf06:	5f                   	pop    %edi
f010bf07:	5d                   	pop    %ebp
f010bf08:	c3                   	ret    

f010bf09 <trap>:

void trap(struct Trapframe *tf)
{
f010bf09:	55                   	push   %ebp
f010bf0a:	89 e5                	mov    %esp,%ebp
f010bf0c:	57                   	push   %edi
f010bf0d:	56                   	push   %esi
f010bf0e:	53                   	push   %ebx
f010bf0f:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010bf12:	e8 97 81 ff ff       	call   f01040ae <kclock_stop>

	int userTrap = 0;
f010bf17:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bf1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf21:	8b 40 34             	mov    0x34(%eax),%eax
f010bf24:	0f b7 c0             	movzwl %ax,%eax
f010bf27:	83 e0 03             	and    $0x3,%eax
f010bf2a:	83 f8 03             	cmp    $0x3,%eax
f010bf2d:	75 49                	jne    f010bf78 <trap+0x6f>
		assert(curenv);
f010bf2f:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010bf34:	85 c0                	test   %eax,%eax
f010bf36:	75 19                	jne    f010bf51 <trap+0x48>
f010bf38:	68 7d 6c 13 f0       	push   $0xf0136c7d
f010bf3d:	68 84 6c 13 f0       	push   $0xf0136c84
f010bf42:	68 04 01 00 00       	push   $0x104
f010bf47:	68 53 6c 13 f0       	push   $0xf0136c53
f010bf4c:	e8 55 42 ff ff       	call   f01001a6 <_panic>
		curenv->env_tf = *tf;
f010bf51:	8b 15 14 92 65 f0    	mov    0xf0659214,%edx
f010bf57:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf5a:	89 c3                	mov    %eax,%ebx
f010bf5c:	b8 11 00 00 00       	mov    $0x11,%eax
f010bf61:	89 d7                	mov    %edx,%edi
f010bf63:	89 de                	mov    %ebx,%esi
f010bf65:	89 c1                	mov    %eax,%ecx
f010bf67:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010bf69:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010bf6e:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010bf71:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010bf78:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf7b:	8b 40 28             	mov    0x28(%eax),%eax
f010bf7e:	83 f8 20             	cmp    $0x20,%eax
f010bf81:	75 40                	jne    f010bfc3 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010bf83:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bf87:	0f 84 a6 00 00 00    	je     f010c033 <trap+0x12a>
		{
			assert(curenv);
f010bf8d:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010bf92:	85 c0                	test   %eax,%eax
f010bf94:	75 19                	jne    f010bfaf <trap+0xa6>
f010bf96:	68 7d 6c 13 f0       	push   $0xf0136c7d
f010bf9b:	68 84 6c 13 f0       	push   $0xf0136c84
f010bfa0:	68 10 01 00 00       	push   $0x110
f010bfa5:	68 53 6c 13 f0       	push   $0xf0136c53
f010bfaa:	e8 f7 41 ff ff       	call   f01001a6 <_panic>
			curenv->nClocks++ ;
f010bfaf:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010bfb4:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f010bfba:	42                   	inc    %edx
f010bfbb:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
f010bfc1:	eb 70                	jmp    f010c033 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010bfc3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bfc6:	8b 40 28             	mov    0x28(%eax),%eax
f010bfc9:	83 f8 0e             	cmp    $0xe,%eax
f010bfcc:	75 65                	jne    f010c033 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010bfce:	a0 a8 9a 65 f0       	mov    0xf0659aa8,%al
f010bfd3:	84 c0                	test   %al,%al
f010bfd5:	74 5c                	je     f010c033 <trap+0x12a>
			if (userTrap){
f010bfd7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bfdb:	74 2c                	je     f010c009 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010bfdd:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010bfe2:	8b 15 14 92 65 f0    	mov    0xf0659214,%edx
f010bfe8:	8b 52 30             	mov    0x30(%edx),%edx
f010bfeb:	89 d1                	mov    %edx,%ecx
f010bfed:	8a 15 a8 9a 65 f0    	mov    0xf0659aa8,%dl
f010bff3:	0f b6 d2             	movzbl %dl,%edx
f010bff6:	01 ca                	add    %ecx,%edx
f010bff8:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010bffb:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c000:	83 ec 0c             	sub    $0xc,%esp
f010c003:	50                   	push   %eax
f010c004:	e8 5e d4 ff ff       	call   f0109467 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c009:	8b 45 08             	mov    0x8(%ebp),%eax
f010c00c:	8b 40 30             	mov    0x30(%eax),%eax
f010c00f:	89 c2                	mov    %eax,%edx
f010c011:	a0 a8 9a 65 f0       	mov    0xf0659aa8,%al
f010c016:	0f b6 c0             	movzbl %al,%eax
f010c019:	01 d0                	add    %edx,%eax
f010c01b:	89 c2                	mov    %eax,%edx
f010c01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c020:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c023:	e8 b1 80 ff ff       	call   f01040d9 <kclock_resume>
				env_pop_tf(tf);
f010c028:	83 ec 0c             	sub    $0xc,%esp
f010c02b:	ff 75 08             	pushl  0x8(%ebp)
f010c02e:	e8 99 d5 ff ff       	call   f01095cc <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c033:	83 ec 0c             	sub    $0xc,%esp
f010c036:	ff 75 08             	pushl  0x8(%ebp)
f010c039:	e8 e1 fd ff ff       	call   f010be1f <trap_dispatch>
f010c03e:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c041:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c045:	74 3d                	je     f010c084 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c047:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c04c:	85 c0                	test   %eax,%eax
f010c04e:	74 0d                	je     f010c05d <trap+0x154>
f010c050:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c055:	8b 40 54             	mov    0x54(%eax),%eax
f010c058:	83 f8 02             	cmp    $0x2,%eax
f010c05b:	74 19                	je     f010c076 <trap+0x16d>
f010c05d:	68 9c 6c 13 f0       	push   $0xf0136c9c
f010c062:	68 84 6c 13 f0       	push   $0xf0136c84
f010c067:	68 25 01 00 00       	push   $0x125
f010c06c:	68 53 6c 13 f0       	push   $0xf0136c53
f010c071:	e8 30 41 ff ff       	call   f01001a6 <_panic>
		env_run(curenv);
f010c076:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c07b:	83 ec 0c             	sub    $0xc,%esp
f010c07e:	50                   	push   %eax
f010c07f:	e8 e3 d3 ff ff       	call   f0109467 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c084:	83 ec 0c             	sub    $0xc,%esp
f010c087:	ff 75 08             	pushl  0x8(%ebp)
f010c08a:	e8 3d d5 ff ff       	call   f01095cc <env_pop_tf>

f010c08f <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010c08f:	55                   	push   %ebp
f010c090:	89 e5                	mov    %esp,%ebp
f010c092:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c095:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c09c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c09f:	8b 40 34             	mov    0x34(%eax),%eax
f010c0a2:	0f b7 c0             	movzwl %ax,%eax
f010c0a5:	83 e0 03             	and    $0x3,%eax
f010c0a8:	83 f8 03             	cmp    $0x3,%eax
f010c0ab:	75 07                	jne    f010c0b4 <fault_handler+0x25>
		userTrap = 1;
f010c0ad:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c0b4:	0f 20 d0             	mov    %cr2,%eax
f010c0b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010c0ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c0bd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c0c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c0c4:	75 29                	jne    f010c0ef <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c0c6:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c0cd:	77 40                	ja     f010c10f <fault_handler+0x80>
f010c0cf:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c0d6:	76 37                	jbe    f010c10f <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010c0d8:	83 ec 04             	sub    $0x4,%esp
f010c0db:	68 cc 6c 13 f0       	push   $0xf0136ccc
f010c0e0:	68 42 01 00 00       	push   $0x142
f010c0e5:	68 53 6c 13 f0       	push   $0xf0136c53
f010c0ea:	e8 b7 40 ff ff       	call   f01001a6 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c0ef:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c0f6:	76 17                	jbe    f010c10f <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010c0f8:	83 ec 04             	sub    $0x4,%esp
f010c0fb:	68 f0 6c 13 f0       	push   $0xf0136cf0
f010c100:	68 48 01 00 00       	push   $0x148
f010c105:	68 53 6c 13 f0       	push   $0xf0136c53
f010c10a:	e8 97 40 ff ff       	call   f01001a6 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c10f:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c114:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c117:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c11c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c11f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c122:	c1 ea 16             	shr    $0x16,%edx
f010c125:	c1 e2 02             	shl    $0x2,%edx
f010c128:	01 d0                	add    %edx,%eax
f010c12a:	8b 00                	mov    (%eax),%eax
f010c12c:	83 e0 01             	and    $0x1,%eax
f010c12f:	85 c0                	test   %eax,%eax
f010c131:	75 28                	jne    f010c15b <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c133:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c136:	8b 80 f4 d9 01 00    	mov    0x1d9f4(%eax),%eax
f010c13c:	8d 50 01             	lea    0x1(%eax),%edx
f010c13f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c142:	89 90 f4 d9 01 00    	mov    %edx,0x1d9f4(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c148:	83 ec 08             	sub    $0x8,%esp
f010c14b:	ff 75 ec             	pushl  -0x14(%ebp)
f010c14e:	ff 75 e8             	pushl  -0x18(%ebp)
f010c151:	e8 26 16 00 00       	call   f010d77c <table_fault_handler>
f010c156:	83 c4 10             	add    $0x10,%esp
f010c159:	eb 42                	jmp    f010c19d <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c15b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c15e:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f010c164:	8d 50 01             	lea    0x1(%eax),%edx
f010c167:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c16a:	89 90 f0 d9 01 00    	mov    %edx,0x1d9f0(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c170:	e8 e5 15 00 00       	call   f010d75a <isBufferingEnabled>
f010c175:	84 c0                	test   %al,%al
f010c177:	74 13                	je     f010c18c <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c179:	83 ec 08             	sub    $0x8,%esp
f010c17c:	ff 75 ec             	pushl  -0x14(%ebp)
f010c17f:	ff 75 e8             	pushl  -0x18(%ebp)
f010c182:	e8 31 16 00 00       	call   f010d7b8 <__page_fault_handler_with_buffering>
f010c187:	83 c4 10             	add    $0x10,%esp
f010c18a:	eb 11                	jmp    f010c19d <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c18c:	83 ec 08             	sub    $0x8,%esp
f010c18f:	ff 75 ec             	pushl  -0x14(%ebp)
f010c192:	ff 75 e8             	pushl  -0x18(%ebp)
f010c195:	e8 04 16 00 00       	call   f010d79e <page_fault_handler>
f010c19a:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c19d:	0f 20 d8             	mov    %cr3,%eax
f010c1a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c1a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c1a6:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c1a9:	90                   	nop
f010c1aa:	c9                   	leave  
f010c1ab:	c3                   	ret    

f010c1ac <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c1ac:	6a 0e                	push   $0xe
f010c1ae:	e9 ed 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c1b3:	90                   	nop

f010c1b4 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c1b4:	6a 00                	push   $0x0
f010c1b6:	6a 30                	push   $0x30
f010c1b8:	e9 e3 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c1bd:	90                   	nop

f010c1be <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c1be:	6a 08                	push   $0x8
f010c1c0:	e9 db 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c1c5:	90                   	nop

f010c1c6 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c1c6:	6a 00                	push   $0x0
f010c1c8:	6a 00                	push   $0x0
f010c1ca:	e9 d1 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c1cf:	90                   	nop

f010c1d0 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c1d0:	6a 00                	push   $0x0
f010c1d2:	6a 01                	push   $0x1
f010c1d4:	e9 c7 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c1d9:	90                   	nop

f010c1da <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c1da:	6a 00                	push   $0x0
f010c1dc:	6a 02                	push   $0x2
f010c1de:	e9 bd 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c1e3:	90                   	nop

f010c1e4 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c1e4:	6a 00                	push   $0x0
f010c1e6:	6a 03                	push   $0x3
f010c1e8:	e9 b3 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c1ed:	90                   	nop

f010c1ee <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c1ee:	6a 00                	push   $0x0
f010c1f0:	6a 04                	push   $0x4
f010c1f2:	e9 a9 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c1f7:	90                   	nop

f010c1f8 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c1f8:	6a 00                	push   $0x0
f010c1fa:	6a 05                	push   $0x5
f010c1fc:	e9 9f 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c201:	90                   	nop

f010c202 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c202:	6a 00                	push   $0x0
f010c204:	6a 06                	push   $0x6
f010c206:	e9 95 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c20b:	90                   	nop

f010c20c <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c20c:	6a 00                	push   $0x0
f010c20e:	6a 07                	push   $0x7
f010c210:	e9 8b 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c215:	90                   	nop

f010c216 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c216:	6a 0a                	push   $0xa
f010c218:	e9 83 00 00 00       	jmp    f010c2a0 <_alltraps>
f010c21d:	90                   	nop

f010c21e <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c21e:	6a 0b                	push   $0xb
f010c220:	eb 7e                	jmp    f010c2a0 <_alltraps>

f010c222 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c222:	6a 0c                	push   $0xc
f010c224:	eb 7a                	jmp    f010c2a0 <_alltraps>

f010c226 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c226:	6a 0d                	push   $0xd
f010c228:	eb 76                	jmp    f010c2a0 <_alltraps>

f010c22a <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c22a:	6a 00                	push   $0x0
f010c22c:	6a 10                	push   $0x10
f010c22e:	eb 70                	jmp    f010c2a0 <_alltraps>

f010c230 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c230:	6a 11                	push   $0x11
f010c232:	eb 6c                	jmp    f010c2a0 <_alltraps>

f010c234 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c234:	6a 00                	push   $0x0
f010c236:	6a 12                	push   $0x12
f010c238:	eb 66                	jmp    f010c2a0 <_alltraps>

f010c23a <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c23a:	6a 00                	push   $0x0
f010c23c:	6a 13                	push   $0x13
f010c23e:	eb 60                	jmp    f010c2a0 <_alltraps>

f010c240 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c240:	6a 00                	push   $0x0
f010c242:	6a 20                	push   $0x20
f010c244:	eb 5a                	jmp    f010c2a0 <_alltraps>

f010c246 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c246:	6a 00                	push   $0x0
f010c248:	6a 21                	push   $0x21
f010c24a:	eb 54                	jmp    f010c2a0 <_alltraps>

f010c24c <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c24c:	6a 00                	push   $0x0
f010c24e:	6a 22                	push   $0x22
f010c250:	eb 4e                	jmp    f010c2a0 <_alltraps>

f010c252 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c252:	6a 00                	push   $0x0
f010c254:	6a 23                	push   $0x23
f010c256:	eb 48                	jmp    f010c2a0 <_alltraps>

f010c258 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c258:	6a 00                	push   $0x0
f010c25a:	6a 24                	push   $0x24
f010c25c:	eb 42                	jmp    f010c2a0 <_alltraps>

f010c25e <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c25e:	6a 00                	push   $0x0
f010c260:	6a 25                	push   $0x25
f010c262:	eb 3c                	jmp    f010c2a0 <_alltraps>

f010c264 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c264:	6a 00                	push   $0x0
f010c266:	6a 26                	push   $0x26
f010c268:	eb 36                	jmp    f010c2a0 <_alltraps>

f010c26a <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c26a:	6a 00                	push   $0x0
f010c26c:	6a 27                	push   $0x27
f010c26e:	eb 30                	jmp    f010c2a0 <_alltraps>

f010c270 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c270:	6a 00                	push   $0x0
f010c272:	6a 28                	push   $0x28
f010c274:	eb 2a                	jmp    f010c2a0 <_alltraps>

f010c276 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c276:	6a 00                	push   $0x0
f010c278:	6a 29                	push   $0x29
f010c27a:	eb 24                	jmp    f010c2a0 <_alltraps>

f010c27c <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c27c:	6a 00                	push   $0x0
f010c27e:	6a 2a                	push   $0x2a
f010c280:	eb 1e                	jmp    f010c2a0 <_alltraps>

f010c282 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c282:	6a 00                	push   $0x0
f010c284:	6a 2b                	push   $0x2b
f010c286:	eb 18                	jmp    f010c2a0 <_alltraps>

f010c288 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c288:	6a 00                	push   $0x0
f010c28a:	6a 2c                	push   $0x2c
f010c28c:	eb 12                	jmp    f010c2a0 <_alltraps>

f010c28e <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c28e:	6a 00                	push   $0x0
f010c290:	6a 2d                	push   $0x2d
f010c292:	eb 0c                	jmp    f010c2a0 <_alltraps>

f010c294 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c294:	6a 00                	push   $0x0
f010c296:	6a 2e                	push   $0x2e
f010c298:	eb 06                	jmp    f010c2a0 <_alltraps>

f010c29a <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c29a:	6a 00                	push   $0x0
f010c29c:	6a 2f                	push   $0x2f
f010c29e:	eb 00                	jmp    f010c2a0 <_alltraps>

f010c2a0 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c2a0:	1e                   	push   %ds
push %es
f010c2a1:	06                   	push   %es
pushal
f010c2a2:	60                   	pusha  

mov $(GD_KD), %ax
f010c2a3:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c2a7:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c2a9:	8e c0                	mov    %eax,%es

push %esp
f010c2ab:	54                   	push   %esp

call trap
f010c2ac:	e8 58 fc ff ff       	call   f010bf09 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c2b1:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c2b2:	61                   	popa   
pop %es
f010c2b3:	07                   	pop    %es
pop %ds
f010c2b4:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c2b5:	83 c4 08             	add    $0x8,%esp

iret
f010c2b8:	cf                   	iret   

f010c2b9 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c2b9:	55                   	push   %ebp
f010c2ba:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c2bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2bf:	8b 15 90 1e 6c f0    	mov    0xf06c1e90,%edx
f010c2c5:	29 d0                	sub    %edx,%eax
f010c2c7:	c1 f8 03             	sar    $0x3,%eax
f010c2ca:	89 c2                	mov    %eax,%edx
f010c2cc:	89 d0                	mov    %edx,%eax
f010c2ce:	c1 e0 02             	shl    $0x2,%eax
f010c2d1:	01 d0                	add    %edx,%eax
f010c2d3:	c1 e0 02             	shl    $0x2,%eax
f010c2d6:	01 d0                	add    %edx,%eax
f010c2d8:	c1 e0 02             	shl    $0x2,%eax
f010c2db:	01 d0                	add    %edx,%eax
f010c2dd:	89 c1                	mov    %eax,%ecx
f010c2df:	c1 e1 08             	shl    $0x8,%ecx
f010c2e2:	01 c8                	add    %ecx,%eax
f010c2e4:	89 c1                	mov    %eax,%ecx
f010c2e6:	c1 e1 10             	shl    $0x10,%ecx
f010c2e9:	01 c8                	add    %ecx,%eax
f010c2eb:	01 c0                	add    %eax,%eax
f010c2ed:	01 d0                	add    %edx,%eax
}
f010c2ef:	5d                   	pop    %ebp
f010c2f0:	c3                   	ret    

f010c2f1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c2f1:	55                   	push   %ebp
f010c2f2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c2f4:	ff 75 08             	pushl  0x8(%ebp)
f010c2f7:	e8 bd ff ff ff       	call   f010c2b9 <to_frame_number>
f010c2fc:	83 c4 04             	add    $0x4,%esp
f010c2ff:	c1 e0 0c             	shl    $0xc,%eax
}
f010c302:	c9                   	leave  
f010c303:	c3                   	ret    

f010c304 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c304:	55                   	push   %ebp
f010c305:	89 e5                	mov    %esp,%ebp
f010c307:	83 ec 18             	sub    $0x18,%esp
f010c30a:	8b 45 10             	mov    0x10(%ebp),%eax
f010c30d:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c310:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c314:	74 26                	je     f010c33c <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c316:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c31b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c31e:	8b 15 14 92 65 f0    	mov    0xf0659214,%edx
f010c324:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010c32a:	83 ec 04             	sub    $0x4,%esp
f010c32d:	50                   	push   %eax
f010c32e:	52                   	push   %edx
f010c32f:	68 b0 6e 13 f0       	push   $0xf0136eb0
f010c334:	e8 f4 48 ff ff       	call   f0100c2d <cprintf>
f010c339:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c33c:	83 ec 04             	sub    $0x4,%esp
f010c33f:	ff 75 08             	pushl  0x8(%ebp)
f010c342:	ff 75 0c             	pushl  0xc(%ebp)
f010c345:	68 b9 6e 13 f0       	push   $0xf0136eb9
f010c34a:	e8 de 48 ff ff       	call   f0100c2d <cprintf>
f010c34f:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c352:	90                   	nop
f010c353:	c9                   	leave  
f010c354:	c3                   	ret    

f010c355 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c355:	55                   	push   %ebp
f010c356:	89 e5                	mov    %esp,%ebp
f010c358:	83 ec 18             	sub    $0x18,%esp
f010c35b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c35e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c361:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c365:	83 ec 08             	sub    $0x8,%esp
f010c368:	50                   	push   %eax
f010c369:	68 be 6e 13 f0       	push   $0xf0136ebe
f010c36e:	e8 ba 48 ff ff       	call   f0100c2d <cprintf>
f010c373:	83 c4 10             	add    $0x10,%esp
}
f010c376:	90                   	nop
f010c377:	c9                   	leave  
f010c378:	c3                   	ret    

f010c379 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c379:	55                   	push   %ebp
f010c37a:	89 e5                	mov    %esp,%ebp
f010c37c:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c37f:	e8 e3 46 ff ff       	call   f0100a67 <cons_getc2>
f010c384:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c387:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c38a:	c9                   	leave  
f010c38b:	c3                   	ret    

f010c38c <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c38c:	55                   	push   %ebp
f010c38d:	89 e5                	mov    %esp,%ebp
f010c38f:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c392:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c397:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c39a:	83 ec 0c             	sub    $0xc,%esp
f010c39d:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c3a0:	50                   	push   %eax
f010c3a1:	e8 04 a4 ff ff       	call   f01067aa <allocate_frame>
f010c3a6:	83 c4 10             	add    $0x10,%esp
f010c3a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c3ac:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c3b0:	75 08                	jne    f010c3ba <__sys_allocate_page+0x2e>
		return r ;
f010c3b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c3b5:	e9 d0 00 00 00       	jmp    f010c48a <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c3ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3bd:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c3c2:	77 0c                	ja     f010c3d0 <__sys_allocate_page+0x44>
f010c3c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3c7:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c3cc:	85 c0                	test   %eax,%eax
f010c3ce:	74 0a                	je     f010c3da <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c3d0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c3d5:	e9 b0 00 00 00       	jmp    f010c48a <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c3da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c3dd:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c3e2:	83 f8 04             	cmp    $0x4,%eax
f010c3e5:	74 0a                	je     f010c3f1 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c3e7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c3ec:	e9 99 00 00 00       	jmp    f010c48a <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c3f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c3f4:	83 ec 0c             	sub    $0xc,%esp
f010c3f7:	50                   	push   %eax
f010c3f8:	e8 f4 fe ff ff       	call   f010c2f1 <to_physical_address>
f010c3fd:	83 c4 10             	add    $0x10,%esp
f010c400:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c403:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c406:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c409:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c40c:	c1 e8 0c             	shr    $0xc,%eax
f010c40f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c412:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f010c417:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c41a:	72 17                	jb     f010c433 <__sys_allocate_page+0xa7>
f010c41c:	ff 75 e8             	pushl  -0x18(%ebp)
f010c41f:	68 c4 6e 13 f0       	push   $0xf0136ec4
f010c424:	68 8c 00 00 00       	push   $0x8c
f010c429:	68 f3 6e 13 f0       	push   $0xf0136ef3
f010c42e:	e8 73 3d ff ff       	call   f01001a6 <_panic>
f010c433:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c436:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c43b:	83 ec 04             	sub    $0x4,%esp
f010c43e:	68 00 10 00 00       	push   $0x1000
f010c443:	6a 00                	push   $0x0
f010c445:	50                   	push   %eax
f010c446:	e8 f8 45 02 00       	call   f0130a43 <memset>
f010c44b:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c44e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c451:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c454:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c457:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c45a:	ff 75 0c             	pushl  0xc(%ebp)
f010c45d:	51                   	push   %ecx
f010c45e:	52                   	push   %edx
f010c45f:	50                   	push   %eax
f010c460:	e8 dd a6 ff ff       	call   f0106b42 <map_frame>
f010c465:	83 c4 10             	add    $0x10,%esp
f010c468:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c46b:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c46f:	75 14                	jne    f010c485 <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010c471:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c474:	83 ec 0c             	sub    $0xc,%esp
f010c477:	50                   	push   %eax
f010c478:	e8 bc a4 ff ff       	call   f0106939 <decrement_references>
f010c47d:	83 c4 10             	add    $0x10,%esp
		return r;
f010c480:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c483:	eb 05                	jmp    f010c48a <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010c485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c48a:	c9                   	leave  
f010c48b:	c3                   	ret    

f010c48c <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c48c:	55                   	push   %ebp
f010c48d:	89 e5                	mov    %esp,%ebp
f010c48f:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c492:	83 ec 04             	sub    $0x4,%esp
f010c495:	68 07 6f 13 f0       	push   $0xf0136f07
f010c49a:	68 b3 00 00 00       	push   $0xb3
f010c49f:	68 f3 6e 13 f0       	push   $0xf0136ef3
f010c4a4:	e8 fd 3c ff ff       	call   f01001a6 <_panic>

f010c4a9 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c4a9:	55                   	push   %ebp
f010c4aa:	89 e5                	mov    %esp,%ebp
f010c4ac:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c4af:	83 ec 04             	sub    $0x4,%esp
f010c4b2:	68 28 6f 13 f0       	push   $0xf0136f28
f010c4b7:	68 c3 00 00 00       	push   $0xc3
f010c4bc:	68 f3 6e 13 f0       	push   $0xf0136ef3
f010c4c1:	e8 e0 3c ff ff       	call   f01001a6 <_panic>

f010c4c6 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c4c6:	55                   	push   %ebp
f010c4c7:	89 e5                	mov    %esp,%ebp
f010c4c9:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c4cc:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c4d1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c4d4:	83 ec 04             	sub    $0x4,%esp
f010c4d7:	ff 75 0c             	pushl  0xc(%ebp)
f010c4da:	ff 75 08             	pushl  0x8(%ebp)
f010c4dd:	50                   	push   %eax
f010c4de:	e8 dd c1 ff ff       	call   f01086c0 <calculate_required_frames>
f010c4e3:	83 c4 10             	add    $0x10,%esp
}
f010c4e6:	c9                   	leave  
f010c4e7:	c3                   	ret    

f010c4e8 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c4e8:	55                   	push   %ebp
f010c4e9:	89 e5                	mov    %esp,%ebp
f010c4eb:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c4ee:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c4f1:	83 ec 0c             	sub    $0xc,%esp
f010c4f4:	50                   	push   %eax
f010c4f5:	e8 b8 a8 ff ff       	call   f0106db2 <calculate_available_frames>
f010c4fa:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c4fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c500:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c503:	01 d0                	add    %edx,%eax
}
f010c505:	c9                   	leave  
f010c506:	c3                   	ret    

f010c507 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c507:	55                   	push   %ebp
f010c508:	89 e5                	mov    %esp,%ebp
f010c50a:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c50d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c510:	83 ec 0c             	sub    $0xc,%esp
f010c513:	50                   	push   %eax
f010c514:	e8 99 a8 ff ff       	call   f0106db2 <calculate_available_frames>
f010c519:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c51c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c51f:	c9                   	leave  
f010c520:	c3                   	ret    

f010c521 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c521:	55                   	push   %ebp
f010c522:	89 e5                	mov    %esp,%ebp
f010c524:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c527:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c52a:	83 ec 0c             	sub    $0xc,%esp
f010c52d:	50                   	push   %eax
f010c52e:	e8 7f a8 ff ff       	call   f0106db2 <calculate_available_frames>
f010c533:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c536:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c539:	c9                   	leave  
f010c53a:	c3                   	ret    

f010c53b <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c53b:	55                   	push   %ebp
f010c53c:	89 e5                	mov    %esp,%ebp
f010c53e:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c541:	83 ec 0c             	sub    $0xc,%esp
f010c544:	ff 75 08             	pushl  0x8(%ebp)
f010c547:	e8 2d 32 02 00       	call   f012f779 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c54c:	83 c4 10             	add    $0x10,%esp
}
f010c54f:	c9                   	leave  
f010c550:	c3                   	ret    

f010c551 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c551:	55                   	push   %ebp
f010c552:	89 e5                	mov    %esp,%ebp
f010c554:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c557:	e8 75 31 02 00       	call   f012f6d1 <scarce_memory>
}
f010c55c:	90                   	nop
f010c55d:	c9                   	leave  
f010c55e:	c3                   	ret    

f010c55f <sys_clearFFL>:

void sys_clearFFL()
{
f010c55f:	55                   	push   %ebp
f010c560:	89 e5                	mov    %esp,%ebp
f010c562:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c565:	a1 64 1e 6c f0       	mov    0xf06c1e64,%eax
f010c56a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c56d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c574:	eb 12                	jmp    f010c588 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c576:	83 ec 0c             	sub    $0xc,%esp
f010c579:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c57c:	50                   	push   %eax
f010c57d:	e8 28 a2 ff ff       	call   f01067aa <allocate_frame>
f010c582:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c585:	ff 45 f4             	incl   -0xc(%ebp)
f010c588:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c58b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c58e:	7c e6                	jl     f010c576 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c590:	90                   	nop
f010c591:	c9                   	leave  
f010c592:	c3                   	ret    

f010c593 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010c593:	55                   	push   %ebp
f010c594:	89 e5                	mov    %esp,%ebp
f010c596:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c599:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c59e:	83 ec 0c             	sub    $0xc,%esp
f010c5a1:	50                   	push   %eax
f010c5a2:	e8 14 76 ff ff       	call   f0103bbb <pf_calculate_allocated_pages>
f010c5a7:	83 c4 10             	add    $0x10,%esp
}
f010c5aa:	c9                   	leave  
f010c5ab:	c3                   	ret    

f010c5ac <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010c5ac:	55                   	push   %ebp
f010c5ad:	89 e5                	mov    %esp,%ebp
f010c5af:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c5b2:	e8 a3 11 00 00       	call   f010d75a <isBufferingEnabled>
f010c5b7:	84 c0                	test   %al,%al
f010c5b9:	74 19                	je     f010c5d4 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010c5bb:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c5c0:	83 ec 04             	sub    $0x4,%esp
f010c5c3:	ff 75 0c             	pushl  0xc(%ebp)
f010c5c6:	ff 75 08             	pushl  0x8(%ebp)
f010c5c9:	50                   	push   %eax
f010c5ca:	e8 48 c1 ff ff       	call   f0108717 <__free_user_mem_with_buffering>
f010c5cf:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010c5d2:	eb 18                	jmp    f010c5ec <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010c5d4:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c5d9:	83 ec 04             	sub    $0x4,%esp
f010c5dc:	ff 75 0c             	pushl  0xc(%ebp)
f010c5df:	ff 75 08             	pushl  0x8(%ebp)
f010c5e2:	50                   	push   %eax
f010c5e3:	e8 12 c1 ff ff       	call   f01086fa <free_user_mem>
f010c5e8:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c5eb:	90                   	nop
}
f010c5ec:	c9                   	leave  
f010c5ed:	c3                   	ret    

f010c5ee <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010c5ee:	55                   	push   %ebp
f010c5ef:	89 e5                	mov    %esp,%ebp
f010c5f1:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010c5f4:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c5f9:	83 ec 04             	sub    $0x4,%esp
f010c5fc:	ff 75 0c             	pushl  0xc(%ebp)
f010c5ff:	ff 75 08             	pushl  0x8(%ebp)
f010c602:	50                   	push   %eax
f010c603:	e8 d5 c0 ff ff       	call   f01086dd <allocate_user_mem>
f010c608:	83 c4 10             	add    $0x10,%esp
	return;
f010c60b:	90                   	nop
}
f010c60c:	c9                   	leave  
f010c60d:	c3                   	ret    

f010c60e <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010c60e:	55                   	push   %ebp
f010c60f:	89 e5                	mov    %esp,%ebp
f010c611:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010c614:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c619:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c61c:	ff 75 10             	pushl  0x10(%ebp)
f010c61f:	ff 75 0c             	pushl  0xc(%ebp)
f010c622:	ff 75 08             	pushl  0x8(%ebp)
f010c625:	50                   	push   %eax
f010c626:	e8 5b bf ff ff       	call   f0108586 <allocate_chunk>
f010c62b:	83 c4 10             	add    $0x10,%esp
	return;
f010c62e:	90                   	nop
}
f010c62f:	c9                   	leave  
f010c630:	c3                   	ret    

f010c631 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010c631:	55                   	push   %ebp
f010c632:	89 e5                	mov    %esp,%ebp
f010c634:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010c637:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c63c:	ff 75 10             	pushl  0x10(%ebp)
f010c63f:	ff 75 0c             	pushl  0xc(%ebp)
f010c642:	ff 75 08             	pushl  0x8(%ebp)
f010c645:	50                   	push   %eax
f010c646:	e8 e9 c0 ff ff       	call   f0108734 <move_user_mem>
f010c64b:	83 c4 10             	add    $0x10,%esp
	return;
f010c64e:	90                   	nop
}
f010c64f:	c9                   	leave  
f010c650:	c3                   	ret    

f010c651 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010c651:	55                   	push   %ebp
f010c652:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010c654:	a1 6c 1e 6c f0       	mov    0xf06c1e6c,%eax
}
f010c659:	5d                   	pop    %ebp
f010c65a:	c3                   	ret    

f010c65b <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010c65b:	55                   	push   %ebp
f010c65c:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010c65e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c661:	a3 6c 1e 6c f0       	mov    %eax,0xf06c1e6c
}
f010c666:	90                   	nop
f010c667:	5d                   	pop    %ebp
f010c668:	c3                   	ret    

f010c669 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010c669:	55                   	push   %ebp
f010c66a:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010c66c:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c671:	8b 15 14 92 65 f0    	mov    0xf0659214,%edx
f010c677:	8b 52 38             	mov    0x38(%edx),%edx
f010c67a:	80 e6 fd             	and    $0xfd,%dh
f010c67d:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c680:	90                   	nop
f010c681:	5d                   	pop    %ebp
f010c682:	c3                   	ret    

f010c683 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010c683:	55                   	push   %ebp
f010c684:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010c686:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c68b:	8b 15 14 92 65 f0    	mov    0xf0659214,%edx
f010c691:	8b 52 38             	mov    0x38(%edx),%edx
f010c694:	80 ce 02             	or     $0x2,%dh
f010c697:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c69a:	90                   	nop
f010c69b:	5d                   	pop    %ebp
f010c69c:	c3                   	ret    

f010c69d <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010c69d:	55                   	push   %ebp
f010c69e:	89 e5                	mov    %esp,%ebp
f010c6a0:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010c6a3:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c6a8:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c6ab:	83 ec 04             	sub    $0x4,%esp
f010c6ae:	ff 75 0c             	pushl  0xc(%ebp)
f010c6b1:	ff 75 08             	pushl  0x8(%ebp)
f010c6b4:	50                   	push   %eax
f010c6b5:	e8 de 13 00 00       	call   f010da98 <createSemaphore>
f010c6ba:	83 c4 10             	add    $0x10,%esp
}
f010c6bd:	c9                   	leave  
f010c6be:	c3                   	ret    

f010c6bf <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c6bf:	55                   	push   %ebp
f010c6c0:	89 e5                	mov    %esp,%ebp
f010c6c2:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010c6c5:	83 ec 08             	sub    $0x8,%esp
f010c6c8:	ff 75 0c             	pushl  0xc(%ebp)
f010c6cb:	ff 75 08             	pushl  0x8(%ebp)
f010c6ce:	e8 e2 13 00 00       	call   f010dab5 <waitSemaphore>
f010c6d3:	83 c4 10             	add    $0x10,%esp
}
f010c6d6:	90                   	nop
f010c6d7:	c9                   	leave  
f010c6d8:	c3                   	ret    

f010c6d9 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c6d9:	55                   	push   %ebp
f010c6da:	89 e5                	mov    %esp,%ebp
f010c6dc:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010c6df:	83 ec 08             	sub    $0x8,%esp
f010c6e2:	ff 75 0c             	pushl  0xc(%ebp)
f010c6e5:	ff 75 08             	pushl  0x8(%ebp)
f010c6e8:	e8 e5 13 00 00       	call   f010dad2 <signalSemaphore>
f010c6ed:	83 c4 10             	add    $0x10,%esp
}
f010c6f0:	90                   	nop
f010c6f1:	c9                   	leave  
f010c6f2:	c3                   	ret    

f010c6f3 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010c6f3:	55                   	push   %ebp
f010c6f4:	89 e5                	mov    %esp,%ebp
f010c6f6:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010c6f9:	83 ec 08             	sub    $0x8,%esp
f010c6fc:	ff 75 0c             	pushl  0xc(%ebp)
f010c6ff:	ff 75 08             	pushl  0x8(%ebp)
f010c702:	e8 37 12 00 00       	call   f010d93e <get_semaphore_object_ID>
f010c707:	83 c4 10             	add    $0x10,%esp
f010c70a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010c70d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c711:	78 06                	js     f010c719 <sys_getSemaphoreValue+0x26>
f010c713:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010c717:	7e 19                	jle    f010c732 <sys_getSemaphoreValue+0x3f>
f010c719:	68 48 6f 13 f0       	push   $0xf0136f48
f010c71e:	68 6d 6f 13 f0       	push   $0xf0136f6d
f010c723:	68 4a 01 00 00       	push   $0x14a
f010c728:	68 f3 6e 13 f0       	push   $0xf0136ef3
f010c72d:	e8 74 3a ff ff       	call   f01001a6 <_panic>

	return semaphores[semID].value ;
f010c732:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c735:	89 d0                	mov    %edx,%eax
f010c737:	c1 e0 02             	shl    $0x2,%eax
f010c73a:	01 d0                	add    %edx,%eax
f010c73c:	01 c0                	add    %eax,%eax
f010c73e:	01 d0                	add    %edx,%eax
f010c740:	01 c0                	add    %eax,%eax
f010c742:	01 d0                	add    %edx,%eax
f010c744:	c1 e0 02             	shl    $0x2,%eax
f010c747:	05 b4 fa 6b f0       	add    $0xf06bfab4,%eax
f010c74c:	8b 00                	mov    (%eax),%eax
}
f010c74e:	c9                   	leave  
f010c74f:	c3                   	ret    

f010c750 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c750:	55                   	push   %ebp
f010c751:	89 e5                	mov    %esp,%ebp
f010c753:	83 ec 18             	sub    $0x18,%esp
f010c756:	8b 45 10             	mov    0x10(%ebp),%eax
f010c759:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c75c:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c760:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c765:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c768:	83 ec 0c             	sub    $0xc,%esp
f010c76b:	ff 75 14             	pushl  0x14(%ebp)
f010c76e:	52                   	push   %edx
f010c76f:	ff 75 0c             	pushl  0xc(%ebp)
f010c772:	ff 75 08             	pushl  0x8(%ebp)
f010c775:	50                   	push   %eax
f010c776:	e8 c5 ab ff ff       	call   f0107340 <createSharedObject>
f010c77b:	83 c4 20             	add    $0x20,%esp
}
f010c77e:	c9                   	leave  
f010c77f:	c3                   	ret    

f010c780 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c780:	55                   	push   %ebp
f010c781:	89 e5                	mov    %esp,%ebp
f010c783:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c786:	83 ec 08             	sub    $0x8,%esp
f010c789:	ff 75 0c             	pushl  0xc(%ebp)
f010c78c:	ff 75 08             	pushl  0x8(%ebp)
f010c78f:	e8 cf ab ff ff       	call   f0107363 <getSizeOfSharedObject>
f010c794:	83 c4 10             	add    $0x10,%esp
}
f010c797:	c9                   	leave  
f010c798:	c3                   	ret    

f010c799 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c799:	55                   	push   %ebp
f010c79a:	89 e5                	mov    %esp,%ebp
f010c79c:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c79f:	83 ec 04             	sub    $0x4,%esp
f010c7a2:	ff 75 10             	pushl  0x10(%ebp)
f010c7a5:	ff 75 0c             	pushl  0xc(%ebp)
f010c7a8:	ff 75 08             	pushl  0x8(%ebp)
f010c7ab:	e8 d0 ab ff ff       	call   f0107380 <getSharedObject>
f010c7b0:	83 c4 10             	add    $0x10,%esp
}
f010c7b3:	c9                   	leave  
f010c7b4:	c3                   	ret    

f010c7b5 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c7b5:	55                   	push   %ebp
f010c7b6:	89 e5                	mov    %esp,%ebp
f010c7b8:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c7bb:	83 ec 08             	sub    $0x8,%esp
f010c7be:	ff 75 0c             	pushl  0xc(%ebp)
f010c7c1:	ff 75 08             	pushl  0x8(%ebp)
f010c7c4:	e8 d4 ab ff ff       	call   f010739d <freeSharedObject>
f010c7c9:	83 c4 10             	add    $0x10,%esp
}
f010c7cc:	c9                   	leave  
f010c7cd:	c3                   	ret    

f010c7ce <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c7ce:	55                   	push   %ebp
f010c7cf:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c7d1:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c7d6:	5d                   	pop    %ebp
f010c7d7:	c3                   	ret    

f010c7d8 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010c7d8:	55                   	push   %ebp
f010c7d9:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c7db:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c7e0:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c7e3:	5d                   	pop    %ebp
f010c7e4:	c3                   	ret    

f010c7e5 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c7e5:	55                   	push   %ebp
f010c7e6:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c7e8:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c7ed:	89 c2                	mov    %eax,%edx
f010c7ef:	a1 10 92 65 f0       	mov    0xf0659210,%eax
f010c7f4:	29 c2                	sub    %eax,%edx
f010c7f6:	89 d0                	mov    %edx,%eax
f010c7f8:	c1 f8 03             	sar    $0x3,%eax
f010c7fb:	89 c2                	mov    %eax,%edx
f010c7fd:	89 d0                	mov    %edx,%eax
f010c7ff:	c1 e0 03             	shl    $0x3,%eax
f010c802:	01 d0                	add    %edx,%eax
f010c804:	c1 e0 03             	shl    $0x3,%eax
f010c807:	01 d0                	add    %edx,%eax
f010c809:	01 c0                	add    %eax,%eax
f010c80b:	01 d0                	add    %edx,%eax
f010c80d:	01 c0                	add    %eax,%eax
f010c80f:	01 d0                	add    %edx,%eax
f010c811:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c818:	01 c8                	add    %ecx,%eax
f010c81a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c821:	01 c8                	add    %ecx,%eax
f010c823:	c1 e0 02             	shl    $0x2,%eax
f010c826:	01 d0                	add    %edx,%eax
f010c828:	01 c0                	add    %eax,%eax
f010c82a:	01 d0                	add    %edx,%eax
f010c82c:	01 c0                	add    %eax,%eax
f010c82e:	01 d0                	add    %edx,%eax
f010c830:	c1 e0 02             	shl    $0x2,%eax
f010c833:	01 d0                	add    %edx,%eax
f010c835:	01 c0                	add    %eax,%eax
f010c837:	01 d0                	add    %edx,%eax
f010c839:	c1 e0 09             	shl    $0x9,%eax
f010c83c:	29 d0                	sub    %edx,%eax
f010c83e:	c1 e0 02             	shl    $0x2,%eax
f010c841:	01 d0                	add    %edx,%eax
}
f010c843:	5d                   	pop    %ebp
f010c844:	c3                   	ret    

f010c845 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c845:	55                   	push   %ebp
f010c846:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c848:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c84d:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c850:	5d                   	pop    %ebp
f010c851:	c3                   	ret    

f010c852 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010c852:	55                   	push   %ebp
f010c853:	89 e5                	mov    %esp,%ebp
f010c855:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010c858:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c85c:	75 0a                	jne    f010c868 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010c85e:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c863:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c866:	eb 22                	jmp    f010c88a <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010c868:	83 ec 04             	sub    $0x4,%esp
f010c86b:	6a 00                	push   $0x0
f010c86d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c870:	50                   	push   %eax
f010c871:	ff 75 08             	pushl  0x8(%ebp)
f010c874:	e8 7e cc ff ff       	call   f01094f7 <envid2env>
f010c879:	83 c4 10             	add    $0x10,%esp
f010c87c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c87f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c883:	79 05                	jns    f010c88a <sys_destroy_env+0x38>
	{
		return r;
f010c885:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c888:	eb 5e                	jmp    f010c8e8 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010c88a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c88d:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c892:	39 c2                	cmp    %eax,%edx
f010c894:	75 1b                	jne    f010c8b1 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c896:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c89b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c89e:	83 ec 08             	sub    $0x8,%esp
f010c8a1:	50                   	push   %eax
f010c8a2:	68 82 6f 13 f0       	push   $0xf0136f82
f010c8a7:	e8 81 43 ff ff       	call   f0100c2d <cprintf>
f010c8ac:	83 c4 10             	add    $0x10,%esp
f010c8af:	eb 20                	jmp    f010c8d1 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c8b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c8b4:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c8b7:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010c8bc:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c8bf:	83 ec 04             	sub    $0x4,%esp
f010c8c2:	52                   	push   %edx
f010c8c3:	50                   	push   %eax
f010c8c4:	68 9d 6f 13 f0       	push   $0xf0136f9d
f010c8c9:	e8 5f 43 ff ff       	call   f0100c2d <cprintf>
f010c8ce:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c8d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c8d4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c8d7:	83 ec 0c             	sub    $0xc,%esp
f010c8da:	50                   	push   %eax
f010c8db:	e8 e0 8b ff ff       	call   f01054c0 <sched_kill_env>
f010c8e0:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c8e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c8e8:	c9                   	leave  
f010c8e9:	c3                   	ret    

f010c8ea <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010c8ea:	55                   	push   %ebp
f010c8eb:	89 e5                	mov    %esp,%ebp
f010c8ed:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010c8f0:	e8 e3 cb ff ff       	call   f01094d8 <env_exit>
	//env_run_cmd_prmpt();
}
f010c8f5:	90                   	nop
f010c8f6:	c9                   	leave  
f010c8f7:	c3                   	ret    

f010c8f8 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010c8f8:	55                   	push   %ebp
f010c8f9:	89 e5                	mov    %esp,%ebp
f010c8fb:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010c8fe:	ff 75 14             	pushl  0x14(%ebp)
f010c901:	ff 75 10             	pushl  0x10(%ebp)
f010c904:	ff 75 0c             	pushl  0xc(%ebp)
f010c907:	ff 75 08             	pushl  0x8(%ebp)
f010c90a:	e8 8d be ff ff       	call   f010879c <env_create>
f010c90f:	83 c4 10             	add    $0x10,%esp
f010c912:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010c915:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c919:	75 07                	jne    f010c922 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010c91b:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010c920:	eb 14                	jmp    f010c936 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010c922:	83 ec 0c             	sub    $0xc,%esp
f010c925:	ff 75 f4             	pushl  -0xc(%ebp)
f010c928:	e8 4a 87 ff ff       	call   f0105077 <sched_new_env>
f010c92d:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010c930:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c933:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c936:	c9                   	leave  
f010c937:	c3                   	ret    

f010c938 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010c938:	55                   	push   %ebp
f010c939:	89 e5                	mov    %esp,%ebp
f010c93b:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010c93e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c941:	83 ec 0c             	sub    $0xc,%esp
f010c944:	50                   	push   %eax
f010c945:	e8 4a 87 ff ff       	call   f0105094 <sched_run_env>
f010c94a:	83 c4 10             	add    $0x10,%esp
}
f010c94d:	90                   	nop
f010c94e:	c9                   	leave  
f010c94f:	c3                   	ret    

f010c950 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010c950:	55                   	push   %ebp
f010c951:	89 e5                	mov    %esp,%ebp
f010c953:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010c956:	0f 31                	rdtsc  
f010c958:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c95b:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010c95e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c961:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c964:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c967:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010c96a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c96d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c970:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c973:	89 01                	mov    %eax,(%ecx)
f010c975:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010c978:	8b 45 08             	mov    0x8(%ebp),%eax
f010c97b:	c9                   	leave  
f010c97c:	c2 04 00             	ret    $0x4

f010c97f <sys_rcr2>:

uint32 sys_rcr2()
{
f010c97f:	55                   	push   %ebp
f010c980:	89 e5                	mov    %esp,%ebp
f010c982:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c985:	0f 20 d0             	mov    %cr2,%eax
f010c988:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010c98b:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010c98e:	90                   	nop
}
f010c98f:	c9                   	leave  
f010c990:	c3                   	ret    

f010c991 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010c991:	55                   	push   %ebp
f010c992:	89 e5                	mov    %esp,%ebp
f010c994:	83 ec 04             	sub    $0x4,%esp
f010c997:	8b 45 08             	mov    0x8(%ebp),%eax
f010c99a:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010c99d:	8a 45 fc             	mov    -0x4(%ebp),%al
f010c9a0:	a2 a8 9a 65 f0       	mov    %al,0xf0659aa8
}
f010c9a5:	90                   	nop
f010c9a6:	c9                   	leave  
f010c9a7:	c3                   	ret    

f010c9a8 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010c9a8:	55                   	push   %ebp
f010c9a9:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010c9ab:	c7 05 f0 1f 6c f0 00 	movl   $0x0,0xf06c1ff0
f010c9b2:	00 00 00 
}
f010c9b5:	90                   	nop
f010c9b6:	5d                   	pop    %ebp
f010c9b7:	c3                   	ret    

f010c9b8 <inctst>:
void inctst()
{
f010c9b8:	55                   	push   %ebp
f010c9b9:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010c9bb:	a1 f0 1f 6c f0       	mov    0xf06c1ff0,%eax
f010c9c0:	40                   	inc    %eax
f010c9c1:	a3 f0 1f 6c f0       	mov    %eax,0xf06c1ff0
}
f010c9c6:	90                   	nop
f010c9c7:	5d                   	pop    %ebp
f010c9c8:	c3                   	ret    

f010c9c9 <gettst>:
uint32 gettst()
{
f010c9c9:	55                   	push   %ebp
f010c9ca:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010c9cc:	a1 f0 1f 6c f0       	mov    0xf06c1ff0,%eax
}
f010c9d1:	5d                   	pop    %ebp
f010c9d2:	c3                   	ret    

f010c9d3 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010c9d3:	55                   	push   %ebp
f010c9d4:	89 e5                	mov    %esp,%ebp
f010c9d6:	83 ec 28             	sub    $0x28,%esp
f010c9d9:	8b 45 14             	mov    0x14(%ebp),%eax
f010c9dc:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010c9df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010c9e6:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010c9ea:	83 f8 65             	cmp    $0x65,%eax
f010c9ed:	74 5d                	je     f010ca4c <tst+0x79>
f010c9ef:	83 f8 65             	cmp    $0x65,%eax
f010c9f2:	7f 0a                	jg     f010c9fe <tst+0x2b>
f010c9f4:	83 f8 62             	cmp    $0x62,%eax
f010c9f7:	74 73                	je     f010ca6c <tst+0x99>
f010c9f9:	e9 91 00 00 00       	jmp    f010ca8f <tst+0xbc>
f010c9fe:	83 f8 67             	cmp    $0x67,%eax
f010ca01:	74 29                	je     f010ca2c <tst+0x59>
f010ca03:	83 f8 6c             	cmp    $0x6c,%eax
f010ca06:	0f 85 83 00 00 00    	jne    f010ca8f <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010ca0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca0f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ca12:	73 09                	jae    f010ca1d <tst+0x4a>
			chk = 1;
f010ca14:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ca1b:	eb 68                	jmp    f010ca85 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010ca1d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ca21:	74 62                	je     f010ca85 <tst+0xb2>
			chk = 1;
f010ca23:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ca2a:	eb 59                	jmp    f010ca85 <tst+0xb2>
	case 'g':
		if (n > v1)
f010ca2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca2f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ca32:	76 09                	jbe    f010ca3d <tst+0x6a>
			chk = 1;
f010ca34:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ca3b:	eb 4b                	jmp    f010ca88 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010ca3d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ca41:	74 45                	je     f010ca88 <tst+0xb5>
			chk = 1;
f010ca43:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ca4a:	eb 3c                	jmp    f010ca88 <tst+0xb5>
	case 'e':
		if (n == v1)
f010ca4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca4f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ca52:	75 09                	jne    f010ca5d <tst+0x8a>
			chk = 1;
f010ca54:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ca5b:	eb 2e                	jmp    f010ca8b <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010ca5d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ca61:	74 28                	je     f010ca8b <tst+0xb8>
			chk = 1;
f010ca63:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ca6a:	eb 1f                	jmp    f010ca8b <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010ca6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca6f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ca72:	72 1a                	jb     f010ca8e <tst+0xbb>
f010ca74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca77:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ca7a:	77 12                	ja     f010ca8e <tst+0xbb>
			chk = 1;
f010ca7c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ca83:	eb 09                	jmp    f010ca8e <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ca85:	90                   	nop
f010ca86:	eb 07                	jmp    f010ca8f <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ca88:	90                   	nop
f010ca89:	eb 04                	jmp    f010ca8f <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ca8b:	90                   	nop
f010ca8c:	eb 01                	jmp    f010ca8f <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010ca8e:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010ca8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca93:	75 17                	jne    f010caac <tst+0xd9>
f010ca95:	83 ec 04             	sub    $0x4,%esp
f010ca98:	68 b5 6f 13 f0       	push   $0xf0136fb5
f010ca9d:	68 00 02 00 00       	push   $0x200
f010caa2:	68 f3 6e 13 f0       	push   $0xf0136ef3
f010caa7:	e8 fa 36 ff ff       	call   f01001a6 <_panic>
	tstcnt++ ;
f010caac:	a1 f0 1f 6c f0       	mov    0xf06c1ff0,%eax
f010cab1:	40                   	inc    %eax
f010cab2:	a3 f0 1f 6c f0       	mov    %eax,0xf06c1ff0
	return;
f010cab7:	90                   	nop
}
f010cab8:	c9                   	leave  
f010cab9:	c3                   	ret    

f010caba <chktst>:

void chktst(uint32 n)
{
f010caba:	55                   	push   %ebp
f010cabb:	89 e5                	mov    %esp,%ebp
f010cabd:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010cac0:	a1 f0 1f 6c f0       	mov    0xf06c1ff0,%eax
f010cac5:	3b 45 08             	cmp    0x8(%ebp),%eax
f010cac8:	75 12                	jne    f010cadc <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010caca:	83 ec 0c             	sub    $0xc,%esp
f010cacd:	68 c8 6f 13 f0       	push   $0xf0136fc8
f010cad2:	e8 56 41 ff ff       	call   f0100c2d <cprintf>
f010cad7:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010cada:	eb 17                	jmp    f010caf3 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010cadc:	83 ec 04             	sub    $0x4,%esp
f010cadf:	68 f4 6f 13 f0       	push   $0xf0136ff4
f010cae4:	68 0a 02 00 00       	push   $0x20a
f010cae9:	68 f3 6e 13 f0       	push   $0xf0136ef3
f010caee:	e8 b3 36 ff ff       	call   f01001a6 <_panic>
}
f010caf3:	c9                   	leave  
f010caf4:	c3                   	ret    

f010caf5 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010caf5:	55                   	push   %ebp
f010caf6:	89 e5                	mov    %esp,%ebp
f010caf8:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010cafb:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010cb00:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010cb03:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010cb0a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010cb11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cb15:	0f 84 a5 00 00 00    	je     f010cbc0 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010cb1b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cb22:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb25:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010cb2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cb2e:	eb 4a                	jmp    f010cb7a <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010cb30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb33:	8b 00                	mov    (%eax),%eax
f010cb35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cb38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cb3b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cb40:	89 c2                	mov    %eax,%edx
f010cb42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb45:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cb4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb4f:	01 c8                	add    %ecx,%eax
f010cb51:	8b 00                	mov    (%eax),%eax
f010cb53:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010cb56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cb59:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cb5e:	39 c2                	cmp    %eax,%edx
f010cb60:	74 09                	je     f010cb6b <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010cb62:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010cb69:	eb 3e                	jmp    f010cba9 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010cb6b:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cb6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb71:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010cb77:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cb7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cb7e:	74 08                	je     f010cb88 <sys_check_LRU_lists+0x93>
f010cb80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb83:	8b 40 10             	mov    0x10(%eax),%eax
f010cb86:	eb 05                	jmp    f010cb8d <sys_check_LRU_lists+0x98>
f010cb88:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb8d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cb90:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010cb96:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb99:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010cb9f:	85 c0                	test   %eax,%eax
f010cba1:	75 8d                	jne    f010cb30 <sys_check_LRU_lists+0x3b>
f010cba3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cba7:	75 87                	jne    f010cb30 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010cba9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cbac:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010cbb2:	8b 45 10             	mov    0x10(%ebp),%eax
f010cbb5:	39 c2                	cmp    %eax,%edx
f010cbb7:	74 07                	je     f010cbc0 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010cbb9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010cbc0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010cbc4:	0f 84 a5 00 00 00    	je     f010cc6f <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010cbca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cbd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cbd4:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010cbda:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cbdd:	eb 4a                	jmp    f010cc29 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010cbdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cbe2:	8b 00                	mov    (%eax),%eax
f010cbe4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010cbe7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cbea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cbef:	89 c2                	mov    %eax,%edx
f010cbf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cbf4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cbfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbfe:	01 c8                	add    %ecx,%eax
f010cc00:	8b 00                	mov    (%eax),%eax
f010cc02:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010cc05:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cc08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cc0d:	39 c2                	cmp    %eax,%edx
f010cc0f:	74 09                	je     f010cc1a <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010cc11:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010cc18:	eb 3e                	jmp    f010cc58 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010cc1a:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cc1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc20:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010cc26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cc29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc2d:	74 08                	je     f010cc37 <sys_check_LRU_lists+0x142>
f010cc2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc32:	8b 40 10             	mov    0x10(%eax),%eax
f010cc35:	eb 05                	jmp    f010cc3c <sys_check_LRU_lists+0x147>
f010cc37:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc3c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cc3f:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010cc45:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc48:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010cc4e:	85 c0                	test   %eax,%eax
f010cc50:	75 8d                	jne    f010cbdf <sys_check_LRU_lists+0xea>
f010cc52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc56:	75 87                	jne    f010cbdf <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010cc58:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc5b:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f010cc61:	8b 45 14             	mov    0x14(%ebp),%eax
f010cc64:	39 c2                	cmp    %eax,%edx
f010cc66:	74 07                	je     f010cc6f <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010cc68:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010cc6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cc72:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010cc75:	c9                   	leave  
f010cc76:	c3                   	ret    

f010cc77 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010cc77:	55                   	push   %ebp
f010cc78:	89 e5                	mov    %esp,%ebp
f010cc7a:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010cc7d:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f010cc82:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010cc85:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cc8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cc8f:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010cc95:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cc98:	eb 65                	jmp    f010ccff <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010cc9a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010cca1:	eb 3a                	jmp    f010ccdd <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010cca3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cca6:	8b 00                	mov    (%eax),%eax
f010cca8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010ccab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ccae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ccb3:	89 c2                	mov    %eax,%edx
f010ccb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ccb8:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ccbf:	8b 45 08             	mov    0x8(%ebp),%eax
f010ccc2:	01 c8                	add    %ecx,%eax
f010ccc4:	8b 00                	mov    (%eax),%eax
f010ccc6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010ccc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cccc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ccd1:	39 c2                	cmp    %eax,%edx
f010ccd3:	75 05                	jne    f010ccda <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010ccd5:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010ccd8:	eb 0b                	jmp    f010cce5 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010ccda:	ff 45 f4             	incl   -0xc(%ebp)
f010ccdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cce0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cce3:	7c be                	jl     f010cca3 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010cce5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010cce9:	7e 08                	jle    f010ccf3 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010cceb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ccee:	e9 ed 00 00 00       	jmp    f010cde0 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010ccf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ccf6:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010ccfc:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ccff:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cd03:	74 08                	je     f010cd0d <sys_check_LRU_lists_free+0x96>
f010cd05:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cd08:	8b 40 10             	mov    0x10(%eax),%eax
f010cd0b:	eb 05                	jmp    f010cd12 <sys_check_LRU_lists_free+0x9b>
f010cd0d:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd12:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cd15:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010cd1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd1e:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010cd24:	85 c0                	test   %eax,%eax
f010cd26:	0f 85 6e ff ff ff    	jne    f010cc9a <sys_check_LRU_lists_free+0x23>
f010cd2c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cd30:	0f 85 64 ff ff ff    	jne    f010cc9a <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cd36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd39:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010cd3f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cd42:	eb 62                	jmp    f010cda6 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010cd44:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010cd4b:	eb 3a                	jmp    f010cd87 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010cd4d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cd50:	8b 00                	mov    (%eax),%eax
f010cd52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010cd55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd58:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cd5d:	89 c2                	mov    %eax,%edx
f010cd5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd62:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cd69:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd6c:	01 c8                	add    %ecx,%eax
f010cd6e:	8b 00                	mov    (%eax),%eax
f010cd70:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cd73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cd76:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cd7b:	39 c2                	cmp    %eax,%edx
f010cd7d:	75 05                	jne    f010cd84 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010cd7f:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010cd82:	eb 0b                	jmp    f010cd8f <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010cd84:	ff 45 f0             	incl   -0x10(%ebp)
f010cd87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd8a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cd8d:	7c be                	jl     f010cd4d <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010cd8f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010cd93:	7e 05                	jle    f010cd9a <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010cd95:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cd98:	eb 46                	jmp    f010cde0 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cd9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd9d:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010cda3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cda6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cdaa:	74 08                	je     f010cdb4 <sys_check_LRU_lists_free+0x13d>
f010cdac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cdaf:	8b 40 10             	mov    0x10(%eax),%eax
f010cdb2:	eb 05                	jmp    f010cdb9 <sys_check_LRU_lists_free+0x142>
f010cdb4:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdb9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cdbc:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010cdc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cdc5:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010cdcb:	85 c0                	test   %eax,%eax
f010cdcd:	0f 85 71 ff ff ff    	jne    f010cd44 <sys_check_LRU_lists_free+0xcd>
f010cdd3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cdd7:	0f 85 67 ff ff ff    	jne    f010cd44 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010cddd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010cde0:	c9                   	leave  
f010cde1:	c3                   	ret    

f010cde2 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010cde2:	55                   	push   %ebp
f010cde3:	89 e5                	mov    %esp,%ebp
f010cde5:	56                   	push   %esi
f010cde6:	53                   	push   %ebx
f010cde7:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010cdea:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010cdee:	0f 87 0e 04 00 00    	ja     f010d202 <syscall+0x420>
f010cdf4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cdf7:	c1 e0 02             	shl    $0x2,%eax
f010cdfa:	05 10 70 13 f0       	add    $0xf0137010,%eax
f010cdff:	8b 00                	mov    (%eax),%eax
f010ce01:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010ce03:	8b 45 14             	mov    0x14(%ebp),%eax
f010ce06:	0f b6 d0             	movzbl %al,%edx
f010ce09:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce0c:	83 ec 04             	sub    $0x4,%esp
f010ce0f:	52                   	push   %edx
f010ce10:	ff 75 10             	pushl  0x10(%ebp)
f010ce13:	50                   	push   %eax
f010ce14:	e8 eb f4 ff ff       	call   f010c304 <sys_cputs>
f010ce19:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce1c:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce21:	e9 e1 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010ce26:	e8 4e f5 ff ff       	call   f010c379 <sys_cgetc>
f010ce2b:	e9 d7 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010ce30:	83 ec 08             	sub    $0x8,%esp
f010ce33:	ff 75 10             	pushl  0x10(%ebp)
f010ce36:	ff 75 0c             	pushl  0xc(%ebp)
f010ce39:	e8 88 f6 ff ff       	call   f010c4c6 <sys_calculate_required_frames>
f010ce3e:	83 c4 10             	add    $0x10,%esp
f010ce41:	e9 c1 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010ce46:	e8 9d f6 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f010ce4b:	e9 b7 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010ce50:	e8 b2 f6 ff ff       	call   f010c507 <sys_calculate_modified_frames>
f010ce55:	e9 ad 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010ce5a:	e8 c2 f6 ff ff       	call   f010c521 <sys_calculate_notmod_frames>
f010ce5f:	e9 a3 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010ce64:	e8 2a f7 ff ff       	call   f010c593 <sys_pf_calculate_allocated_pages>
f010ce69:	e9 99 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010ce6e:	83 ec 0c             	sub    $0xc,%esp
f010ce71:	ff 75 0c             	pushl  0xc(%ebp)
f010ce74:	e8 c2 f6 ff ff       	call   f010c53b <sys_calculate_pages_tobe_removed_ready_exit>
f010ce79:	83 c4 10             	add    $0x10,%esp
f010ce7c:	e9 86 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010ce81:	e8 cb f6 ff ff       	call   f010c551 <sys_scarce_memory>
		return 0;
f010ce86:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce8b:	e9 77 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010ce90:	83 ec 08             	sub    $0x8,%esp
f010ce93:	ff 75 10             	pushl  0x10(%ebp)
f010ce96:	ff 75 0c             	pushl  0xc(%ebp)
f010ce99:	e8 0e f7 ff ff       	call   f010c5ac <sys_free_user_mem>
f010ce9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cea1:	b8 00 00 00 00       	mov    $0x0,%eax
f010cea6:	e9 5c 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010ceab:	8b 55 10             	mov    0x10(%ebp),%edx
f010ceae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ceb1:	83 ec 08             	sub    $0x8,%esp
f010ceb4:	52                   	push   %edx
f010ceb5:	50                   	push   %eax
f010ceb6:	e8 d1 f4 ff ff       	call   f010c38c <__sys_allocate_page>
f010cebb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cebe:	b8 00 00 00 00       	mov    $0x0,%eax
f010cec3:	e9 3f 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cec8:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cecb:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cece:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010ced1:	8b 55 10             	mov    0x10(%ebp),%edx
f010ced4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ced7:	83 ec 0c             	sub    $0xc,%esp
f010ceda:	56                   	push   %esi
f010cedb:	53                   	push   %ebx
f010cedc:	51                   	push   %ecx
f010cedd:	52                   	push   %edx
f010cede:	50                   	push   %eax
f010cedf:	e8 a8 f5 ff ff       	call   f010c48c <__sys_map_frame>
f010cee4:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cee7:	b8 00 00 00 00       	mov    $0x0,%eax
f010ceec:	e9 16 03 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cef1:	8b 55 10             	mov    0x10(%ebp),%edx
f010cef4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cef7:	83 ec 08             	sub    $0x8,%esp
f010cefa:	52                   	push   %edx
f010cefb:	50                   	push   %eax
f010cefc:	e8 a8 f5 ff ff       	call   f010c4a9 <__sys_unmap_frame>
f010cf01:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf04:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf09:	e9 f9 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010cf0e:	83 ec 04             	sub    $0x4,%esp
f010cf11:	ff 75 14             	pushl  0x14(%ebp)
f010cf14:	ff 75 10             	pushl  0x10(%ebp)
f010cf17:	ff 75 0c             	pushl  0xc(%ebp)
f010cf1a:	e8 ef f6 ff ff       	call   f010c60e <sys_allocate_chunk>
f010cf1f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf22:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf27:	e9 db 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010cf2c:	e8 38 f7 ff ff       	call   f010c669 <sys_disable_interrupt>
		return 0;
f010cf31:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf36:	e9 cc 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cf3b:	e8 43 f7 ff ff       	call   f010c683 <sys_enable_interrupt>
		return 0;
f010cf40:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf45:	e9 bd 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cf4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf4d:	0f be c0             	movsbl %al,%eax
f010cf50:	83 ec 0c             	sub    $0xc,%esp
f010cf53:	50                   	push   %eax
f010cf54:	e8 fc f3 ff ff       	call   f010c355 <sys_cputc>
f010cf59:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf5c:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf61:	e9 a1 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010cf66:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf69:	0f be c0             	movsbl %al,%eax
f010cf6c:	83 ec 0c             	sub    $0xc,%esp
f010cf6f:	50                   	push   %eax
f010cf70:	e8 ea f5 ff ff       	call   f010c55f <sys_clearFFL>
f010cf75:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf78:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf7d:	e9 85 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010cf82:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf85:	83 ec 08             	sub    $0x8,%esp
f010cf88:	ff 75 10             	pushl  0x10(%ebp)
f010cf8b:	50                   	push   %eax
f010cf8c:	e8 0c f7 ff ff       	call   f010c69d <sys_createSemaphore>
f010cf91:	83 c4 10             	add    $0x10,%esp
f010cf94:	e9 6e 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010cf99:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf9f:	83 ec 08             	sub    $0x8,%esp
f010cfa2:	52                   	push   %edx
f010cfa3:	50                   	push   %eax
f010cfa4:	e8 16 f7 ff ff       	call   f010c6bf <sys_waitSemaphore>
f010cfa9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfac:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfb1:	e9 51 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010cfb6:	8b 55 10             	mov    0x10(%ebp),%edx
f010cfb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfbc:	83 ec 08             	sub    $0x8,%esp
f010cfbf:	52                   	push   %edx
f010cfc0:	50                   	push   %eax
f010cfc1:	e8 13 f7 ff ff       	call   f010c6d9 <sys_signalSemaphore>
f010cfc6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfc9:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfce:	e9 34 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010cfd3:	8b 55 10             	mov    0x10(%ebp),%edx
f010cfd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfd9:	83 ec 08             	sub    $0x8,%esp
f010cfdc:	52                   	push   %edx
f010cfdd:	50                   	push   %eax
f010cfde:	e8 10 f7 ff ff       	call   f010c6f3 <sys_getSemaphoreValue>
f010cfe3:	83 c4 10             	add    $0x10,%esp
f010cfe6:	e9 1c 02 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010cfeb:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010cfee:	8b 45 14             	mov    0x14(%ebp),%eax
f010cff1:	0f b6 d0             	movzbl %al,%edx
f010cff4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cff7:	51                   	push   %ecx
f010cff8:	52                   	push   %edx
f010cff9:	ff 75 10             	pushl  0x10(%ebp)
f010cffc:	50                   	push   %eax
f010cffd:	e8 4e f7 ff ff       	call   f010c750 <sys_createSharedObject>
f010d002:	83 c4 10             	add    $0x10,%esp
f010d005:	e9 fd 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d00a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d00d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d010:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d013:	83 ec 04             	sub    $0x4,%esp
f010d016:	51                   	push   %ecx
f010d017:	52                   	push   %edx
f010d018:	50                   	push   %eax
f010d019:	e8 7b f7 ff ff       	call   f010c799 <sys_getSharedObject>
f010d01e:	83 c4 10             	add    $0x10,%esp
f010d021:	e9 e1 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d026:	8b 55 10             	mov    0x10(%ebp),%edx
f010d029:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d02c:	83 ec 08             	sub    $0x8,%esp
f010d02f:	52                   	push   %edx
f010d030:	50                   	push   %eax
f010d031:	e8 7f f7 ff ff       	call   f010c7b5 <sys_freeSharedObject>
f010d036:	83 c4 10             	add    $0x10,%esp
f010d039:	e9 c9 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d03e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d041:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d044:	83 ec 08             	sub    $0x8,%esp
f010d047:	52                   	push   %edx
f010d048:	50                   	push   %eax
f010d049:	e8 32 f7 ff ff       	call   f010c780 <sys_getSizeOfSharedObject>
f010d04e:	83 c4 10             	add    $0x10,%esp
f010d051:	e9 b1 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d056:	e8 73 f7 ff ff       	call   f010c7ce <sys_getMaxShares>
f010d05b:	e9 a7 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d060:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d063:	ff 75 18             	pushl  0x18(%ebp)
f010d066:	ff 75 14             	pushl  0x14(%ebp)
f010d069:	ff 75 10             	pushl  0x10(%ebp)
f010d06c:	50                   	push   %eax
f010d06d:	e8 86 f8 ff ff       	call   f010c8f8 <sys_create_env>
f010d072:	83 c4 10             	add    $0x10,%esp
f010d075:	e9 8d 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d07a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d07d:	83 ec 0c             	sub    $0xc,%esp
f010d080:	50                   	push   %eax
f010d081:	e8 b2 f8 ff ff       	call   f010c938 <sys_run_env>
f010d086:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d089:	b8 00 00 00 00       	mov    $0x0,%eax
f010d08e:	e9 74 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d093:	e8 4d f7 ff ff       	call   f010c7e5 <sys_getenvindex>
f010d098:	e9 6a 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d09d:	e8 36 f7 ff ff       	call   f010c7d8 <sys_getenvid>
f010d0a2:	e9 60 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d0a7:	e8 99 f7 ff ff       	call   f010c845 <sys_getparentenvid>
f010d0ac:	e9 56 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d0b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0b4:	83 ec 0c             	sub    $0xc,%esp
f010d0b7:	50                   	push   %eax
f010d0b8:	e8 95 f7 ff ff       	call   f010c852 <sys_destroy_env>
f010d0bd:	83 c4 10             	add    $0x10,%esp
f010d0c0:	e9 42 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d0c5:	e8 20 f8 ff ff       	call   f010c8ea <sys_exit_env>
		return 0;
f010d0ca:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0cf:	e9 33 01 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d0d4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d0d7:	83 ec 0c             	sub    $0xc,%esp
f010d0da:	50                   	push   %eax
f010d0db:	e8 70 f8 ff ff       	call   f010c950 <sys_get_virtual_time>
f010d0e0:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d0e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d0e9:	8b 45 10             	mov    0x10(%ebp),%eax
f010d0ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d0ef:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0f5:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d0f7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d0fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d0fd:	89 10                	mov    %edx,(%eax)
		return 0;
f010d0ff:	b8 00 00 00 00       	mov    $0x0,%eax
f010d104:	e9 fe 00 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d109:	83 ec 04             	sub    $0x4,%esp
f010d10c:	ff 75 14             	pushl  0x14(%ebp)
f010d10f:	ff 75 10             	pushl  0x10(%ebp)
f010d112:	ff 75 0c             	pushl  0xc(%ebp)
f010d115:	e8 17 f5 ff ff       	call   f010c631 <sys_move_user_mem>
f010d11a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d11d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d122:	e9 e0 00 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d127:	e8 53 f8 ff ff       	call   f010c97f <sys_rcr2>
f010d12c:	e9 d6 00 00 00       	jmp    f010d207 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d131:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d134:	0f b6 c0             	movzbl %al,%eax
f010d137:	83 ec 0c             	sub    $0xc,%esp
f010d13a:	50                   	push   %eax
f010d13b:	e8 51 f8 ff ff       	call   f010c991 <sys_bypassPageFault>
f010d140:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d143:	b8 00 00 00 00       	mov    $0x0,%eax
f010d148:	e9 ba 00 00 00       	jmp    f010d207 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d14d:	e8 56 f8 ff ff       	call   f010c9a8 <rsttst>
		return 0;
f010d152:	b8 00 00 00 00       	mov    $0x0,%eax
f010d157:	e9 ab 00 00 00       	jmp    f010d207 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d15c:	e8 57 f8 ff ff       	call   f010c9b8 <inctst>
		return 0;
f010d161:	b8 00 00 00 00       	mov    $0x0,%eax
f010d166:	e9 9c 00 00 00       	jmp    f010d207 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d16b:	83 ec 0c             	sub    $0xc,%esp
f010d16e:	ff 75 0c             	pushl  0xc(%ebp)
f010d171:	e8 44 f9 ff ff       	call   f010caba <chktst>
f010d176:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d179:	b8 00 00 00 00       	mov    $0x0,%eax
f010d17e:	e9 84 00 00 00       	jmp    f010d207 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d183:	e8 41 f8 ff ff       	call   f010c9c9 <gettst>
f010d188:	eb 7d                	jmp    f010d207 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d18a:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d18d:	8b 45 18             	mov    0x18(%ebp),%eax
f010d190:	0f be c0             	movsbl %al,%eax
f010d193:	83 ec 0c             	sub    $0xc,%esp
f010d196:	52                   	push   %edx
f010d197:	50                   	push   %eax
f010d198:	ff 75 14             	pushl  0x14(%ebp)
f010d19b:	ff 75 10             	pushl  0x10(%ebp)
f010d19e:	ff 75 0c             	pushl  0xc(%ebp)
f010d1a1:	e8 2d f8 ff ff       	call   f010c9d3 <tst>
f010d1a6:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d1a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1ae:	eb 57                	jmp    f010d207 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d1b0:	e8 9c f4 ff ff       	call   f010c651 <sys_get_heap_strategy>
f010d1b5:	eb 50                	jmp    f010d207 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d1b7:	83 ec 0c             	sub    $0xc,%esp
f010d1ba:	ff 75 0c             	pushl  0xc(%ebp)
f010d1bd:	e8 99 f4 ff ff       	call   f010c65b <sys_set_uheap_strategy>
f010d1c2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1c5:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1ca:	eb 3b                	jmp    f010d207 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d1cc:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d1cf:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d1d2:	8b 55 10             	mov    0x10(%ebp),%edx
f010d1d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1d8:	53                   	push   %ebx
f010d1d9:	51                   	push   %ecx
f010d1da:	52                   	push   %edx
f010d1db:	50                   	push   %eax
f010d1dc:	e8 14 f9 ff ff       	call   f010caf5 <sys_check_LRU_lists>
f010d1e1:	83 c4 10             	add    $0x10,%esp
f010d1e4:	eb 21                	jmp    f010d207 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d1e6:	8b 55 10             	mov    0x10(%ebp),%edx
f010d1e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1ec:	83 ec 08             	sub    $0x8,%esp
f010d1ef:	52                   	push   %edx
f010d1f0:	50                   	push   %eax
f010d1f1:	e8 81 fa ff ff       	call   f010cc77 <sys_check_LRU_lists_free>
f010d1f6:	83 c4 10             	add    $0x10,%esp
f010d1f9:	eb 0c                	jmp    f010d207 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d1fb:	b8 03 00 00 00       	mov    $0x3,%eax
f010d200:	eb 05                	jmp    f010d207 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d202:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d207:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d20a:	5b                   	pop    %ebx
f010d20b:	5e                   	pop    %esi
f010d20c:	5d                   	pop    %ebp
f010d20d:	c3                   	ret    

f010d20e <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d20e:	55                   	push   %ebp
f010d20f:	89 e5                	mov    %esp,%ebp
f010d211:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d214:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d217:	8b 00                	mov    (%eax),%eax
f010d219:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d21c:	8b 45 10             	mov    0x10(%ebp),%eax
f010d21f:	8b 00                	mov    (%eax),%eax
f010d221:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d224:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d22b:	e9 ca 00 00 00       	jmp    f010d2fa <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d230:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d233:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d236:	01 d0                	add    %edx,%eax
f010d238:	89 c2                	mov    %eax,%edx
f010d23a:	c1 ea 1f             	shr    $0x1f,%edx
f010d23d:	01 d0                	add    %edx,%eax
f010d23f:	d1 f8                	sar    %eax
f010d241:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d244:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d247:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d24a:	eb 03                	jmp    f010d24f <stab_binsearch+0x41>
			m--;
f010d24c:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d24f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d252:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d255:	7c 1e                	jl     f010d275 <stab_binsearch+0x67>
f010d257:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d25a:	89 d0                	mov    %edx,%eax
f010d25c:	01 c0                	add    %eax,%eax
f010d25e:	01 d0                	add    %edx,%eax
f010d260:	c1 e0 02             	shl    $0x2,%eax
f010d263:	89 c2                	mov    %eax,%edx
f010d265:	8b 45 08             	mov    0x8(%ebp),%eax
f010d268:	01 d0                	add    %edx,%eax
f010d26a:	8a 40 04             	mov    0x4(%eax),%al
f010d26d:	0f b6 c0             	movzbl %al,%eax
f010d270:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d273:	75 d7                	jne    f010d24c <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d275:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d278:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d27b:	7d 09                	jge    f010d286 <stab_binsearch+0x78>
			l = true_m + 1;
f010d27d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d280:	40                   	inc    %eax
f010d281:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d284:	eb 74                	jmp    f010d2fa <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d286:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d28d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d290:	89 d0                	mov    %edx,%eax
f010d292:	01 c0                	add    %eax,%eax
f010d294:	01 d0                	add    %edx,%eax
f010d296:	c1 e0 02             	shl    $0x2,%eax
f010d299:	89 c2                	mov    %eax,%edx
f010d29b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d29e:	01 d0                	add    %edx,%eax
f010d2a0:	8b 40 08             	mov    0x8(%eax),%eax
f010d2a3:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d2a6:	73 11                	jae    f010d2b9 <stab_binsearch+0xab>
			*region_left = m;
f010d2a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d2ae:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d2b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2b3:	40                   	inc    %eax
f010d2b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d2b7:	eb 41                	jmp    f010d2fa <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d2b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d2bc:	89 d0                	mov    %edx,%eax
f010d2be:	01 c0                	add    %eax,%eax
f010d2c0:	01 d0                	add    %edx,%eax
f010d2c2:	c1 e0 02             	shl    $0x2,%eax
f010d2c5:	89 c2                	mov    %eax,%edx
f010d2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2ca:	01 d0                	add    %edx,%eax
f010d2cc:	8b 40 08             	mov    0x8(%eax),%eax
f010d2cf:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d2d2:	76 14                	jbe    f010d2e8 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d2d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2d7:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d2da:	8b 45 10             	mov    0x10(%ebp),%eax
f010d2dd:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d2df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2e2:	48                   	dec    %eax
f010d2e3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d2e6:	eb 12                	jmp    f010d2fa <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d2e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d2ee:	89 10                	mov    %edx,(%eax)
			l = m;
f010d2f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d2f6:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d2fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d2fd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d300:	0f 8e 2a ff ff ff    	jle    f010d230 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d306:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d30a:	75 0f                	jne    f010d31b <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d30c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d30f:	8b 00                	mov    (%eax),%eax
f010d311:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d314:	8b 45 10             	mov    0x10(%ebp),%eax
f010d317:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d319:	eb 3d                	jmp    f010d358 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d31b:	8b 45 10             	mov    0x10(%ebp),%eax
f010d31e:	8b 00                	mov    (%eax),%eax
f010d320:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d323:	eb 03                	jmp    f010d328 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d325:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d328:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d32b:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d32d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d330:	7d 1e                	jge    f010d350 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d332:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d335:	89 d0                	mov    %edx,%eax
f010d337:	01 c0                	add    %eax,%eax
f010d339:	01 d0                	add    %edx,%eax
f010d33b:	c1 e0 02             	shl    $0x2,%eax
f010d33e:	89 c2                	mov    %eax,%edx
f010d340:	8b 45 08             	mov    0x8(%ebp),%eax
f010d343:	01 d0                	add    %edx,%eax
f010d345:	8a 40 04             	mov    0x4(%eax),%al
f010d348:	0f b6 c0             	movzbl %al,%eax
f010d34b:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d34e:	75 d5                	jne    f010d325 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d350:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d353:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d356:	89 10                	mov    %edx,(%eax)
	}
}
f010d358:	90                   	nop
f010d359:	c9                   	leave  
f010d35a:	c3                   	ret    

f010d35b <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d35b:	55                   	push   %ebp
f010d35c:	89 e5                	mov    %esp,%ebp
f010d35e:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d361:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d364:	c7 00 d4 70 13 f0    	movl   $0xf01370d4,(%eax)
	info->eip_line = 0;
f010d36a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d36d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d374:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d377:	c7 40 08 d4 70 13 f0 	movl   $0xf01370d4,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d37e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d381:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d388:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d38b:	8b 55 08             	mov    0x8(%ebp),%edx
f010d38e:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d391:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d394:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d39b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d39e:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d3a3:	76 1e                	jbe    f010d3c3 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d3a5:	c7 45 f4 70 cb 13 f0 	movl   $0xf013cb70,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d3ac:	c7 45 f0 d4 b4 17 f0 	movl   $0xf017b4d4,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d3b3:	c7 45 ec d5 b4 17 f0 	movl   $0xf017b4d5,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d3ba:	c7 45 e8 56 81 18 f0 	movl   $0xf0188156,-0x18(%ebp)
f010d3c1:	eb 2a                	jmp    f010d3ed <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d3c3:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d3ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d3cd:	8b 00                	mov    (%eax),%eax
f010d3cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d3d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d3d5:	8b 40 04             	mov    0x4(%eax),%eax
f010d3d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d3db:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d3de:	8b 40 08             	mov    0x8(%eax),%eax
f010d3e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d3e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d3e7:	8b 40 0c             	mov    0xc(%eax),%eax
f010d3ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d3ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d3f0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d3f3:	76 0a                	jbe    f010d3ff <debuginfo_eip+0xa4>
f010d3f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d3f8:	48                   	dec    %eax
f010d3f9:	8a 00                	mov    (%eax),%al
f010d3fb:	84 c0                	test   %al,%al
f010d3fd:	74 0a                	je     f010d409 <debuginfo_eip+0xae>
		return -1;
f010d3ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d404:	e9 01 02 00 00       	jmp    f010d60a <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d409:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d410:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d416:	29 c2                	sub    %eax,%edx
f010d418:	89 d0                	mov    %edx,%eax
f010d41a:	c1 f8 02             	sar    $0x2,%eax
f010d41d:	89 c2                	mov    %eax,%edx
f010d41f:	89 d0                	mov    %edx,%eax
f010d421:	c1 e0 02             	shl    $0x2,%eax
f010d424:	01 d0                	add    %edx,%eax
f010d426:	c1 e0 02             	shl    $0x2,%eax
f010d429:	01 d0                	add    %edx,%eax
f010d42b:	c1 e0 02             	shl    $0x2,%eax
f010d42e:	01 d0                	add    %edx,%eax
f010d430:	89 c1                	mov    %eax,%ecx
f010d432:	c1 e1 08             	shl    $0x8,%ecx
f010d435:	01 c8                	add    %ecx,%eax
f010d437:	89 c1                	mov    %eax,%ecx
f010d439:	c1 e1 10             	shl    $0x10,%ecx
f010d43c:	01 c8                	add    %ecx,%eax
f010d43e:	01 c0                	add    %eax,%eax
f010d440:	01 d0                	add    %edx,%eax
f010d442:	48                   	dec    %eax
f010d443:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d446:	ff 75 08             	pushl  0x8(%ebp)
f010d449:	6a 64                	push   $0x64
f010d44b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d44e:	50                   	push   %eax
f010d44f:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d452:	50                   	push   %eax
f010d453:	ff 75 f4             	pushl  -0xc(%ebp)
f010d456:	e8 b3 fd ff ff       	call   f010d20e <stab_binsearch>
f010d45b:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d45e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d461:	85 c0                	test   %eax,%eax
f010d463:	75 0a                	jne    f010d46f <debuginfo_eip+0x114>
		return -1;
f010d465:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d46a:	e9 9b 01 00 00       	jmp    f010d60a <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d46f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d472:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d475:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d478:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d47b:	ff 75 08             	pushl  0x8(%ebp)
f010d47e:	6a 24                	push   $0x24
f010d480:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d483:	50                   	push   %eax
f010d484:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d487:	50                   	push   %eax
f010d488:	ff 75 f4             	pushl  -0xc(%ebp)
f010d48b:	e8 7e fd ff ff       	call   f010d20e <stab_binsearch>
f010d490:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d493:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d496:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d499:	39 c2                	cmp    %eax,%edx
f010d49b:	0f 8f 86 00 00 00    	jg     f010d527 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d4a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d4a4:	89 c2                	mov    %eax,%edx
f010d4a6:	89 d0                	mov    %edx,%eax
f010d4a8:	01 c0                	add    %eax,%eax
f010d4aa:	01 d0                	add    %edx,%eax
f010d4ac:	c1 e0 02             	shl    $0x2,%eax
f010d4af:	89 c2                	mov    %eax,%edx
f010d4b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4b4:	01 d0                	add    %edx,%eax
f010d4b6:	8b 00                	mov    (%eax),%eax
f010d4b8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d4bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d4be:	29 d1                	sub    %edx,%ecx
f010d4c0:	89 ca                	mov    %ecx,%edx
f010d4c2:	39 d0                	cmp    %edx,%eax
f010d4c4:	73 22                	jae    f010d4e8 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d4c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d4c9:	89 c2                	mov    %eax,%edx
f010d4cb:	89 d0                	mov    %edx,%eax
f010d4cd:	01 c0                	add    %eax,%eax
f010d4cf:	01 d0                	add    %edx,%eax
f010d4d1:	c1 e0 02             	shl    $0x2,%eax
f010d4d4:	89 c2                	mov    %eax,%edx
f010d4d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4d9:	01 d0                	add    %edx,%eax
f010d4db:	8b 10                	mov    (%eax),%edx
f010d4dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d4e0:	01 c2                	add    %eax,%edx
f010d4e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4e5:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d4e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d4eb:	89 c2                	mov    %eax,%edx
f010d4ed:	89 d0                	mov    %edx,%eax
f010d4ef:	01 c0                	add    %eax,%eax
f010d4f1:	01 d0                	add    %edx,%eax
f010d4f3:	c1 e0 02             	shl    $0x2,%eax
f010d4f6:	89 c2                	mov    %eax,%edx
f010d4f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4fb:	01 d0                	add    %edx,%eax
f010d4fd:	8b 50 08             	mov    0x8(%eax),%edx
f010d500:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d503:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d506:	8b 55 08             	mov    0x8(%ebp),%edx
f010d509:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d50c:	8b 40 10             	mov    0x10(%eax),%eax
f010d50f:	29 c2                	sub    %eax,%edx
f010d511:	89 d0                	mov    %edx,%eax
f010d513:	c1 f8 02             	sar    $0x2,%eax
f010d516:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d519:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d51c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d51f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d522:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d525:	eb 15                	jmp    f010d53c <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d527:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d52a:	8b 55 08             	mov    0x8(%ebp),%edx
f010d52d:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d530:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d533:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d536:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d539:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d53c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d53f:	8b 40 08             	mov    0x8(%eax),%eax
f010d542:	83 ec 08             	sub    $0x8,%esp
f010d545:	6a 3a                	push   $0x3a
f010d547:	50                   	push   %eax
f010d548:	e8 ca 34 02 00       	call   f0130a17 <strfind>
f010d54d:	83 c4 10             	add    $0x10,%esp
f010d550:	89 c2                	mov    %eax,%edx
f010d552:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d555:	8b 40 08             	mov    0x8(%eax),%eax
f010d558:	29 c2                	sub    %eax,%edx
f010d55a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d55d:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d560:	eb 03                	jmp    f010d565 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d562:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d565:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d568:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d56b:	7c 4e                	jl     f010d5bb <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d56d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d570:	89 d0                	mov    %edx,%eax
f010d572:	01 c0                	add    %eax,%eax
f010d574:	01 d0                	add    %edx,%eax
f010d576:	c1 e0 02             	shl    $0x2,%eax
f010d579:	89 c2                	mov    %eax,%edx
f010d57b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d57e:	01 d0                	add    %edx,%eax
f010d580:	8a 40 04             	mov    0x4(%eax),%al
f010d583:	3c 84                	cmp    $0x84,%al
f010d585:	74 34                	je     f010d5bb <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d587:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d58a:	89 d0                	mov    %edx,%eax
f010d58c:	01 c0                	add    %eax,%eax
f010d58e:	01 d0                	add    %edx,%eax
f010d590:	c1 e0 02             	shl    $0x2,%eax
f010d593:	89 c2                	mov    %eax,%edx
f010d595:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d598:	01 d0                	add    %edx,%eax
f010d59a:	8a 40 04             	mov    0x4(%eax),%al
f010d59d:	3c 64                	cmp    $0x64,%al
f010d59f:	75 c1                	jne    f010d562 <debuginfo_eip+0x207>
f010d5a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d5a4:	89 d0                	mov    %edx,%eax
f010d5a6:	01 c0                	add    %eax,%eax
f010d5a8:	01 d0                	add    %edx,%eax
f010d5aa:	c1 e0 02             	shl    $0x2,%eax
f010d5ad:	89 c2                	mov    %eax,%edx
f010d5af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5b2:	01 d0                	add    %edx,%eax
f010d5b4:	8b 40 08             	mov    0x8(%eax),%eax
f010d5b7:	85 c0                	test   %eax,%eax
f010d5b9:	74 a7                	je     f010d562 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d5bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d5be:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d5c1:	7c 42                	jl     f010d605 <debuginfo_eip+0x2aa>
f010d5c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d5c6:	89 d0                	mov    %edx,%eax
f010d5c8:	01 c0                	add    %eax,%eax
f010d5ca:	01 d0                	add    %edx,%eax
f010d5cc:	c1 e0 02             	shl    $0x2,%eax
f010d5cf:	89 c2                	mov    %eax,%edx
f010d5d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5d4:	01 d0                	add    %edx,%eax
f010d5d6:	8b 00                	mov    (%eax),%eax
f010d5d8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d5db:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d5de:	29 d1                	sub    %edx,%ecx
f010d5e0:	89 ca                	mov    %ecx,%edx
f010d5e2:	39 d0                	cmp    %edx,%eax
f010d5e4:	73 1f                	jae    f010d605 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d5e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d5e9:	89 d0                	mov    %edx,%eax
f010d5eb:	01 c0                	add    %eax,%eax
f010d5ed:	01 d0                	add    %edx,%eax
f010d5ef:	c1 e0 02             	shl    $0x2,%eax
f010d5f2:	89 c2                	mov    %eax,%edx
f010d5f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5f7:	01 d0                	add    %edx,%eax
f010d5f9:	8b 10                	mov    (%eax),%edx
f010d5fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d5fe:	01 c2                	add    %eax,%edx
f010d600:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d603:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d605:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d60a:	c9                   	leave  
f010d60b:	c3                   	ret    

f010d60c <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d60c:	55                   	push   %ebp
f010d60d:	89 e5                	mov    %esp,%ebp
f010d60f:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d612:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d616:	74 1c                	je     f010d634 <setPageReplacmentAlgorithmLRU+0x28>
f010d618:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d61c:	74 16                	je     f010d634 <setPageReplacmentAlgorithmLRU+0x28>
f010d61e:	68 e0 70 13 f0       	push   $0xf01370e0
f010d623:	68 2a 71 13 f0       	push   $0xf013712a
f010d628:	6a 18                	push   $0x18
f010d62a:	68 3f 71 13 f0       	push   $0xf013713f
f010d62f:	e8 72 2b ff ff       	call   f01001a6 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d634:	8b 45 08             	mov    0x8(%ebp),%eax
f010d637:	a3 c4 1e 6c f0       	mov    %eax,0xf06c1ec4
}
f010d63c:	90                   	nop
f010d63d:	c9                   	leave  
f010d63e:	c3                   	ret    

f010d63f <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d63f:	55                   	push   %ebp
f010d640:	89 e5                	mov    %esp,%ebp
f010d642:	c7 05 c4 1e 6c f0 03 	movl   $0x3,0xf06c1ec4
f010d649:	00 00 00 
f010d64c:	90                   	nop
f010d64d:	5d                   	pop    %ebp
f010d64e:	c3                   	ret    

f010d64f <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d64f:	55                   	push   %ebp
f010d650:	89 e5                	mov    %esp,%ebp
f010d652:	c7 05 c4 1e 6c f0 04 	movl   $0x4,0xf06c1ec4
f010d659:	00 00 00 
f010d65c:	90                   	nop
f010d65d:	5d                   	pop    %ebp
f010d65e:	c3                   	ret    

f010d65f <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d65f:	55                   	push   %ebp
f010d660:	89 e5                	mov    %esp,%ebp
f010d662:	c7 05 c4 1e 6c f0 05 	movl   $0x5,0xf06c1ec4
f010d669:	00 00 00 
f010d66c:	90                   	nop
f010d66d:	5d                   	pop    %ebp
f010d66e:	c3                   	ret    

f010d66f <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d66f:	55                   	push   %ebp
f010d670:	89 e5                	mov    %esp,%ebp
f010d672:	c7 05 c4 1e 6c f0 07 	movl   $0x7,0xf06c1ec4
f010d679:	00 00 00 
f010d67c:	90                   	nop
f010d67d:	5d                   	pop    %ebp
f010d67e:	c3                   	ret    

f010d67f <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d67f:	55                   	push   %ebp
f010d680:	89 e5                	mov    %esp,%ebp
f010d682:	c7 05 c4 1e 6c f0 06 	movl   $0x6,0xf06c1ec4
f010d689:	00 00 00 
f010d68c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d68f:	a3 ec 9a 65 f0       	mov    %eax,0xf0659aec
f010d694:	90                   	nop
f010d695:	5d                   	pop    %ebp
f010d696:	c3                   	ret    

f010d697 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d697:	55                   	push   %ebp
f010d698:	89 e5                	mov    %esp,%ebp
f010d69a:	8b 15 c4 1e 6c f0    	mov    0xf06c1ec4,%edx
f010d6a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6a3:	39 c2                	cmp    %eax,%edx
f010d6a5:	0f 94 c0             	sete   %al
f010d6a8:	0f b6 c0             	movzbl %al,%eax
f010d6ab:	5d                   	pop    %ebp
f010d6ac:	c3                   	ret    

f010d6ad <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d6ad:	55                   	push   %ebp
f010d6ae:	89 e5                	mov    %esp,%ebp
f010d6b0:	a1 c4 1e 6c f0       	mov    0xf06c1ec4,%eax
f010d6b5:	83 f8 03             	cmp    $0x3,%eax
f010d6b8:	75 07                	jne    f010d6c1 <isPageReplacmentAlgorithmCLOCK+0x14>
f010d6ba:	b8 01 00 00 00       	mov    $0x1,%eax
f010d6bf:	eb 05                	jmp    f010d6c6 <isPageReplacmentAlgorithmCLOCK+0x19>
f010d6c1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6c6:	5d                   	pop    %ebp
f010d6c7:	c3                   	ret    

f010d6c8 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d6c8:	55                   	push   %ebp
f010d6c9:	89 e5                	mov    %esp,%ebp
f010d6cb:	a1 c4 1e 6c f0       	mov    0xf06c1ec4,%eax
f010d6d0:	83 f8 04             	cmp    $0x4,%eax
f010d6d3:	75 07                	jne    f010d6dc <isPageReplacmentAlgorithmFIFO+0x14>
f010d6d5:	b8 01 00 00 00       	mov    $0x1,%eax
f010d6da:	eb 05                	jmp    f010d6e1 <isPageReplacmentAlgorithmFIFO+0x19>
f010d6dc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6e1:	5d                   	pop    %ebp
f010d6e2:	c3                   	ret    

f010d6e3 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d6e3:	55                   	push   %ebp
f010d6e4:	89 e5                	mov    %esp,%ebp
f010d6e6:	a1 c4 1e 6c f0       	mov    0xf06c1ec4,%eax
f010d6eb:	83 f8 05             	cmp    $0x5,%eax
f010d6ee:	75 07                	jne    f010d6f7 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d6f0:	b8 01 00 00 00       	mov    $0x1,%eax
f010d6f5:	eb 05                	jmp    f010d6fc <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d6f7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6fc:	5d                   	pop    %ebp
f010d6fd:	c3                   	ret    

f010d6fe <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d6fe:	55                   	push   %ebp
f010d6ff:	89 e5                	mov    %esp,%ebp
f010d701:	a1 c4 1e 6c f0       	mov    0xf06c1ec4,%eax
f010d706:	83 f8 07             	cmp    $0x7,%eax
f010d709:	75 07                	jne    f010d712 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d70b:	b8 01 00 00 00       	mov    $0x1,%eax
f010d710:	eb 05                	jmp    f010d717 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d712:	b8 00 00 00 00       	mov    $0x0,%eax
f010d717:	5d                   	pop    %ebp
f010d718:	c3                   	ret    

f010d719 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d719:	55                   	push   %ebp
f010d71a:	89 e5                	mov    %esp,%ebp
f010d71c:	a1 c4 1e 6c f0       	mov    0xf06c1ec4,%eax
f010d721:	83 f8 06             	cmp    $0x6,%eax
f010d724:	75 07                	jne    f010d72d <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d726:	b8 01 00 00 00       	mov    $0x1,%eax
f010d72b:	eb 05                	jmp    f010d732 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d72d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d732:	5d                   	pop    %ebp
f010d733:	c3                   	ret    

f010d734 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d734:	55                   	push   %ebp
f010d735:	89 e5                	mov    %esp,%ebp
f010d737:	8b 45 08             	mov    0x8(%ebp),%eax
f010d73a:	a3 8c 1e 6c f0       	mov    %eax,0xf06c1e8c
f010d73f:	90                   	nop
f010d740:	5d                   	pop    %ebp
f010d741:	c3                   	ret    

f010d742 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d742:	55                   	push   %ebp
f010d743:	89 e5                	mov    %esp,%ebp
f010d745:	a1 8c 1e 6c f0       	mov    0xf06c1e8c,%eax
f010d74a:	5d                   	pop    %ebp
f010d74b:	c3                   	ret    

f010d74c <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d74c:	55                   	push   %ebp
f010d74d:	89 e5                	mov    %esp,%ebp
f010d74f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d752:	a3 cc 1e 6c f0       	mov    %eax,0xf06c1ecc
f010d757:	90                   	nop
f010d758:	5d                   	pop    %ebp
f010d759:	c3                   	ret    

f010d75a <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d75a:	55                   	push   %ebp
f010d75b:	89 e5                	mov    %esp,%ebp
f010d75d:	a1 cc 1e 6c f0       	mov    0xf06c1ecc,%eax
f010d762:	5d                   	pop    %ebp
f010d763:	c3                   	ret    

f010d764 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d764:	55                   	push   %ebp
f010d765:	89 e5                	mov    %esp,%ebp
f010d767:	8b 45 08             	mov    0x8(%ebp),%eax
f010d76a:	a3 ec 1e 6c f0       	mov    %eax,0xf06c1eec
f010d76f:	90                   	nop
f010d770:	5d                   	pop    %ebp
f010d771:	c3                   	ret    

f010d772 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d772:	55                   	push   %ebp
f010d773:	89 e5                	mov    %esp,%ebp
f010d775:	a1 ec 1e 6c f0       	mov    0xf06c1eec,%eax
f010d77a:	5d                   	pop    %ebp
f010d77b:	c3                   	ret    

f010d77c <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d77c:	55                   	push   %ebp
f010d77d:	89 e5                	mov    %esp,%ebp
f010d77f:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d782:	8b 45 08             	mov    0x8(%ebp),%eax
f010d785:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d788:	83 ec 04             	sub    $0x4,%esp
f010d78b:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d78e:	52                   	push   %edx
f010d78f:	ff 75 0c             	pushl  0xc(%ebp)
f010d792:	50                   	push   %eax
f010d793:	e8 f7 92 ff ff       	call   f0106a8f <__static_cpt>
f010d798:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d79b:	90                   	nop
f010d79c:	c9                   	leave  
f010d79d:	c3                   	ret    

f010d79e <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d79e:	55                   	push   %ebp
f010d79f:	89 e5                	mov    %esp,%ebp
f010d7a1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010d7a4:	83 ec 04             	sub    $0x4,%esp
f010d7a7:	68 5c 71 13 f0       	push   $0xf013715c
f010d7ac:	6a 50                	push   $0x50
f010d7ae:	68 3f 71 13 f0       	push   $0xf013713f
f010d7b3:	e8 ee 29 ff ff       	call   f01001a6 <_panic>

f010d7b8 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d7b8:	55                   	push   %ebp
f010d7b9:	89 e5                	mov    %esp,%ebp
f010d7bb:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010d7be:	83 ec 04             	sub    $0x4,%esp
f010d7c1:	68 90 71 13 f0       	push   $0xf0137190
f010d7c6:	6a 57                	push   $0x57
f010d7c8:	68 3f 71 13 f0       	push   $0xf013713f
f010d7cd:	e8 d4 29 ff ff       	call   f01001a6 <_panic>

f010d7d2 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d7d2:	55                   	push   %ebp
f010d7d3:	89 e5                	mov    %esp,%ebp
f010d7d5:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d7d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d7df:	e9 aa 00 00 00       	jmp    f010d88e <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d7e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d7e7:	89 d0                	mov    %edx,%eax
f010d7e9:	c1 e0 02             	shl    $0x2,%eax
f010d7ec:	01 d0                	add    %edx,%eax
f010d7ee:	01 c0                	add    %eax,%eax
f010d7f0:	01 d0                	add    %edx,%eax
f010d7f2:	01 c0                	add    %eax,%eax
f010d7f4:	01 d0                	add    %edx,%eax
f010d7f6:	c1 e0 02             	shl    $0x2,%eax
f010d7f9:	05 60 fa 6b f0       	add    $0xf06bfa60,%eax
f010d7fe:	83 ec 04             	sub    $0x4,%esp
f010d801:	6a 5c                	push   $0x5c
f010d803:	6a 00                	push   $0x0
f010d805:	50                   	push   %eax
f010d806:	e8 38 32 02 00       	call   f0130a43 <memset>
f010d80b:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d80e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d811:	89 d0                	mov    %edx,%eax
f010d813:	c1 e0 02             	shl    $0x2,%eax
f010d816:	01 d0                	add    %edx,%eax
f010d818:	01 c0                	add    %eax,%eax
f010d81a:	01 d0                	add    %edx,%eax
f010d81c:	01 c0                	add    %eax,%eax
f010d81e:	01 d0                	add    %edx,%eax
f010d820:	c1 e0 02             	shl    $0x2,%eax
f010d823:	05 b8 fa 6b f0       	add    $0xf06bfab8,%eax
f010d828:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d82b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d82e:	89 d0                	mov    %edx,%eax
f010d830:	c1 e0 02             	shl    $0x2,%eax
f010d833:	01 d0                	add    %edx,%eax
f010d835:	01 c0                	add    %eax,%eax
f010d837:	01 d0                	add    %edx,%eax
f010d839:	01 c0                	add    %eax,%eax
f010d83b:	01 d0                	add    %edx,%eax
f010d83d:	c1 e0 02             	shl    $0x2,%eax
f010d840:	05 a4 fa 6b f0       	add    $0xf06bfaa4,%eax
f010d845:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d84b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d84e:	89 d0                	mov    %edx,%eax
f010d850:	c1 e0 02             	shl    $0x2,%eax
f010d853:	01 d0                	add    %edx,%eax
f010d855:	01 c0                	add    %eax,%eax
f010d857:	01 d0                	add    %edx,%eax
f010d859:	01 c0                	add    %eax,%eax
f010d85b:	01 d0                	add    %edx,%eax
f010d85d:	c1 e0 02             	shl    $0x2,%eax
f010d860:	05 a8 fa 6b f0       	add    $0xf06bfaa8,%eax
f010d865:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d86b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d86e:	89 d0                	mov    %edx,%eax
f010d870:	c1 e0 02             	shl    $0x2,%eax
f010d873:	01 d0                	add    %edx,%eax
f010d875:	01 c0                	add    %eax,%eax
f010d877:	01 d0                	add    %edx,%eax
f010d879:	01 c0                	add    %eax,%eax
f010d87b:	01 d0                	add    %edx,%eax
f010d87d:	c1 e0 02             	shl    $0x2,%eax
f010d880:	05 b0 fa 6b f0       	add    $0xf06bfab0,%eax
f010d885:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d88b:	ff 45 f4             	incl   -0xc(%ebp)
f010d88e:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d892:	0f 8e 4c ff ff ff    	jle    f010d7e4 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d898:	90                   	nop
f010d899:	c9                   	leave  
f010d89a:	c3                   	ret    

f010d89b <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d89b:	55                   	push   %ebp
f010d89c:	89 e5                	mov    %esp,%ebp
f010d89e:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010d8a1:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d8a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d8af:	eb 2b                	jmp    f010d8dc <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d8b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d8b4:	89 d0                	mov    %edx,%eax
f010d8b6:	c1 e0 02             	shl    $0x2,%eax
f010d8b9:	01 d0                	add    %edx,%eax
f010d8bb:	01 c0                	add    %eax,%eax
f010d8bd:	01 d0                	add    %edx,%eax
f010d8bf:	01 c0                	add    %eax,%eax
f010d8c1:	01 d0                	add    %edx,%eax
f010d8c3:	c1 e0 02             	shl    $0x2,%eax
f010d8c6:	05 b8 fa 6b f0       	add    $0xf06bfab8,%eax
f010d8cb:	8a 00                	mov    (%eax),%al
f010d8cd:	84 c0                	test   %al,%al
f010d8cf:	74 08                	je     f010d8d9 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d8d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010d8d7:	eb 09                	jmp    f010d8e2 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d8d9:	ff 45 f0             	incl   -0x10(%ebp)
f010d8dc:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010d8e0:	7e cf                	jle    f010d8b1 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d8e2:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010d8e6:	75 14                	jne    f010d8fc <allocate_semaphore_object+0x61>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010d8e8:	83 ec 04             	sub    $0x4,%esp
f010d8eb:	68 d4 71 13 f0       	push   $0xf01371d4
f010d8f0:	6a 53                	push   $0x53
f010d8f2:	68 24 72 13 f0       	push   $0xf0137224
f010d8f7:	e8 aa 28 ff ff       	call   f01001a6 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d8fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d8ff:	89 d0                	mov    %edx,%eax
f010d901:	c1 e0 02             	shl    $0x2,%eax
f010d904:	01 d0                	add    %edx,%eax
f010d906:	01 c0                	add    %eax,%eax
f010d908:	01 d0                	add    %edx,%eax
f010d90a:	01 c0                	add    %eax,%eax
f010d90c:	01 d0                	add    %edx,%eax
f010d90e:	c1 e0 02             	shl    $0x2,%eax
f010d911:	8d 90 60 fa 6b f0    	lea    -0xf9405a0(%eax),%edx
f010d917:	8b 45 08             	mov    0x8(%ebp),%eax
f010d91a:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d91c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d91f:	89 d0                	mov    %edx,%eax
f010d921:	c1 e0 02             	shl    $0x2,%eax
f010d924:	01 d0                	add    %edx,%eax
f010d926:	01 c0                	add    %eax,%eax
f010d928:	01 d0                	add    %edx,%eax
f010d92a:	01 c0                	add    %eax,%eax
f010d92c:	01 d0                	add    %edx,%eax
f010d92e:	c1 e0 02             	shl    $0x2,%eax
f010d931:	05 b8 fa 6b f0       	add    $0xf06bfab8,%eax
f010d936:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d939:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d93c:	c9                   	leave  
f010d93d:	c3                   	ret    

f010d93e <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d93e:	55                   	push   %ebp
f010d93f:	89 e5                	mov    %esp,%ebp
f010d941:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010d94b:	eb 7a                	jmp    f010d9c7 <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010d94d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d950:	89 d0                	mov    %edx,%eax
f010d952:	c1 e0 02             	shl    $0x2,%eax
f010d955:	01 d0                	add    %edx,%eax
f010d957:	01 c0                	add    %eax,%eax
f010d959:	01 d0                	add    %edx,%eax
f010d95b:	01 c0                	add    %eax,%eax
f010d95d:	01 d0                	add    %edx,%eax
f010d95f:	c1 e0 02             	shl    $0x2,%eax
f010d962:	05 b8 fa 6b f0       	add    $0xf06bfab8,%eax
f010d967:	8a 00                	mov    (%eax),%al
f010d969:	84 c0                	test   %al,%al
f010d96b:	75 56                	jne    f010d9c3 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010d96d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d970:	89 d0                	mov    %edx,%eax
f010d972:	c1 e0 02             	shl    $0x2,%eax
f010d975:	01 d0                	add    %edx,%eax
f010d977:	01 c0                	add    %eax,%eax
f010d979:	01 d0                	add    %edx,%eax
f010d97b:	01 c0                	add    %eax,%eax
f010d97d:	01 d0                	add    %edx,%eax
f010d97f:	c1 e0 02             	shl    $0x2,%eax
f010d982:	05 60 fa 6b f0       	add    $0xf06bfa60,%eax
f010d987:	8b 00                	mov    (%eax),%eax
f010d989:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d98c:	75 36                	jne    f010d9c4 <get_semaphore_object_ID+0x86>
f010d98e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d991:	89 d0                	mov    %edx,%eax
f010d993:	c1 e0 02             	shl    $0x2,%eax
f010d996:	01 d0                	add    %edx,%eax
f010d998:	01 c0                	add    %eax,%eax
f010d99a:	01 d0                	add    %edx,%eax
f010d99c:	01 c0                	add    %eax,%eax
f010d99e:	01 d0                	add    %edx,%eax
f010d9a0:	c1 e0 02             	shl    $0x2,%eax
f010d9a3:	05 60 fa 6b f0       	add    $0xf06bfa60,%eax
f010d9a8:	83 c0 04             	add    $0x4,%eax
f010d9ab:	83 ec 08             	sub    $0x8,%esp
f010d9ae:	50                   	push   %eax
f010d9af:	ff 75 0c             	pushl  0xc(%ebp)
f010d9b2:	e8 aa 2f 02 00       	call   f0130961 <strcmp>
f010d9b7:	83 c4 10             	add    $0x10,%esp
f010d9ba:	85 c0                	test   %eax,%eax
f010d9bc:	75 06                	jne    f010d9c4 <get_semaphore_object_ID+0x86>
		{
			return i;
f010d9be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d9c1:	eb 0f                	jmp    f010d9d2 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010d9c3:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010d9c4:	ff 45 f4             	incl   -0xc(%ebp)
f010d9c7:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d9cb:	7e 80                	jle    f010d94d <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010d9cd:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010d9d2:	c9                   	leave  
f010d9d3:	c3                   	ret    

f010d9d4 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010d9d4:	55                   	push   %ebp
f010d9d5:	89 e5                	mov    %esp,%ebp
f010d9d7:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010d9da:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010d9de:	76 0a                	jbe    f010d9ea <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010d9e0:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010d9e5:	e9 ac 00 00 00       	jmp    f010da96 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010d9ea:	8b 55 08             	mov    0x8(%ebp),%edx
f010d9ed:	89 d0                	mov    %edx,%eax
f010d9ef:	c1 e0 02             	shl    $0x2,%eax
f010d9f2:	01 d0                	add    %edx,%eax
f010d9f4:	01 c0                	add    %eax,%eax
f010d9f6:	01 d0                	add    %edx,%eax
f010d9f8:	01 c0                	add    %eax,%eax
f010d9fa:	01 d0                	add    %edx,%eax
f010d9fc:	c1 e0 02             	shl    $0x2,%eax
f010d9ff:	05 60 fa 6b f0       	add    $0xf06bfa60,%eax
f010da04:	83 ec 04             	sub    $0x4,%esp
f010da07:	6a 5c                	push   $0x5c
f010da09:	6a 00                	push   $0x0
f010da0b:	50                   	push   %eax
f010da0c:	e8 32 30 02 00       	call   f0130a43 <memset>
f010da11:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010da14:	8b 55 08             	mov    0x8(%ebp),%edx
f010da17:	89 d0                	mov    %edx,%eax
f010da19:	c1 e0 02             	shl    $0x2,%eax
f010da1c:	01 d0                	add    %edx,%eax
f010da1e:	01 c0                	add    %eax,%eax
f010da20:	01 d0                	add    %edx,%eax
f010da22:	01 c0                	add    %eax,%eax
f010da24:	01 d0                	add    %edx,%eax
f010da26:	c1 e0 02             	shl    $0x2,%eax
f010da29:	05 b8 fa 6b f0       	add    $0xf06bfab8,%eax
f010da2e:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010da31:	8b 55 08             	mov    0x8(%ebp),%edx
f010da34:	89 d0                	mov    %edx,%eax
f010da36:	c1 e0 02             	shl    $0x2,%eax
f010da39:	01 d0                	add    %edx,%eax
f010da3b:	01 c0                	add    %eax,%eax
f010da3d:	01 d0                	add    %edx,%eax
f010da3f:	01 c0                	add    %eax,%eax
f010da41:	01 d0                	add    %edx,%eax
f010da43:	c1 e0 02             	shl    $0x2,%eax
f010da46:	05 a4 fa 6b f0       	add    $0xf06bfaa4,%eax
f010da4b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010da51:	8b 55 08             	mov    0x8(%ebp),%edx
f010da54:	89 d0                	mov    %edx,%eax
f010da56:	c1 e0 02             	shl    $0x2,%eax
f010da59:	01 d0                	add    %edx,%eax
f010da5b:	01 c0                	add    %eax,%eax
f010da5d:	01 d0                	add    %edx,%eax
f010da5f:	01 c0                	add    %eax,%eax
f010da61:	01 d0                	add    %edx,%eax
f010da63:	c1 e0 02             	shl    $0x2,%eax
f010da66:	05 a8 fa 6b f0       	add    $0xf06bfaa8,%eax
f010da6b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010da71:	8b 55 08             	mov    0x8(%ebp),%edx
f010da74:	89 d0                	mov    %edx,%eax
f010da76:	c1 e0 02             	shl    $0x2,%eax
f010da79:	01 d0                	add    %edx,%eax
f010da7b:	01 c0                	add    %eax,%eax
f010da7d:	01 d0                	add    %edx,%eax
f010da7f:	01 c0                	add    %eax,%eax
f010da81:	01 d0                	add    %edx,%eax
f010da83:	c1 e0 02             	shl    $0x2,%eax
f010da86:	05 b0 fa 6b f0       	add    $0xf06bfab0,%eax
f010da8b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010da91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010da96:	c9                   	leave  
f010da97:	c3                   	ret    

f010da98 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010da98:	55                   	push   %ebp
f010da99:	89 e5                	mov    %esp,%ebp
f010da9b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010da9e:	83 ec 04             	sub    $0x4,%esp
f010daa1:	68 44 72 13 f0       	push   $0xf0137244
f010daa6:	68 94 00 00 00       	push   $0x94
f010daab:	68 24 72 13 f0       	push   $0xf0137224
f010dab0:	e8 f1 26 ff ff       	call   f01001a6 <_panic>

f010dab5 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010dab5:	55                   	push   %ebp
f010dab6:	89 e5                	mov    %esp,%ebp
f010dab8:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010dabb:	83 ec 04             	sub    $0x4,%esp
f010dabe:	68 74 72 13 f0       	push   $0xf0137274
f010dac3:	68 a6 00 00 00       	push   $0xa6
f010dac8:	68 24 72 13 f0       	push   $0xf0137224
f010dacd:	e8 d4 26 ff ff       	call   f01001a6 <_panic>

f010dad2 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010dad2:	55                   	push   %ebp
f010dad3:	89 e5                	mov    %esp,%ebp
f010dad5:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010dad8:	83 ec 04             	sub    $0x4,%esp
f010dadb:	68 a0 72 13 f0       	push   $0xf01372a0
f010dae0:	68 ba 00 00 00       	push   $0xba
f010dae5:	68 24 72 13 f0       	push   $0xf0137224
f010daea:	e8 b7 26 ff ff       	call   f01001a6 <_panic>

f010daef <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010daef:	55                   	push   %ebp
f010daf0:	89 e5                	mov    %esp,%ebp
f010daf2:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010daf5:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dafc:	83 ec 0c             	sub    $0xc,%esp
f010daff:	ff 75 ec             	pushl  -0x14(%ebp)
f010db02:	e8 b8 38 02 00       	call   f01313bf <initialize_MemBlocksList>
f010db07:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010db0a:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010db0f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010db12:	74 17                	je     f010db2b <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010db14:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010db19:	50                   	push   %eax
f010db1a:	68 e0 72 13 f0       	push   $0xf01372e0
f010db1f:	6a 1f                	push   $0x1f
f010db21:	68 34 73 13 f0       	push   $0xf0137334
f010db26:	e8 7b 26 ff ff       	call   f01001a6 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010db2b:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010db30:	85 c0                	test   %eax,%eax
f010db32:	74 17                	je     f010db4b <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010db34:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010db39:	50                   	push   %eax
f010db3a:	68 58 73 13 f0       	push   $0xf0137358
f010db3f:	6a 26                	push   $0x26
f010db41:	68 34 73 13 f0       	push   $0xf0137334
f010db46:	e8 5b 26 ff ff       	call   f01001a6 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010db4b:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010db50:	85 c0                	test   %eax,%eax
f010db52:	74 17                	je     f010db6b <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010db54:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010db59:	50                   	push   %eax
f010db5a:	68 a8 73 13 f0       	push   $0xf01373a8
f010db5f:	6a 2c                	push   $0x2c
f010db61:	68 34 73 13 f0       	push   $0xf0137334
f010db66:	e8 3b 26 ff ff       	call   f01001a6 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010db6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010db72:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010db79:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f010db7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010db81:	eb 29                	jmp    f010dbac <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010db83:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010db86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db89:	8b 50 0c             	mov    0xc(%eax),%edx
f010db8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db8f:	8b 40 08             	mov    0x8(%eax),%eax
f010db92:	83 ec 04             	sub    $0x4,%esp
f010db95:	52                   	push   %edx
f010db96:	50                   	push   %eax
f010db97:	68 f8 73 13 f0       	push   $0xf01373f8
f010db9c:	e8 8c 30 ff ff       	call   f0100c2d <cprintf>
f010dba1:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010dba4:	a1 dc 1e 6c f0       	mov    0xf06c1edc,%eax
f010dba9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010dbac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dbb0:	74 07                	je     f010dbb9 <test_initialize_MemBlocksList+0xca>
f010dbb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dbb5:	8b 00                	mov    (%eax),%eax
f010dbb7:	eb 05                	jmp    f010dbbe <test_initialize_MemBlocksList+0xcf>
f010dbb9:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbbe:	a3 dc 1e 6c f0       	mov    %eax,0xf06c1edc
f010dbc3:	a1 dc 1e 6c f0       	mov    0xf06c1edc,%eax
f010dbc8:	85 c0                	test   %eax,%eax
f010dbca:	75 b7                	jne    f010db83 <test_initialize_MemBlocksList+0x94>
f010dbcc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dbd0:	75 b1                	jne    f010db83 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010dbd2:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010dbd7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dbda:	74 14                	je     f010dbf0 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010dbdc:	83 ec 04             	sub    $0x4,%esp
f010dbdf:	68 18 74 13 f0       	push   $0xf0137418
f010dbe4:	6a 38                	push   $0x38
f010dbe6:	68 34 73 13 f0       	push   $0xf0137334
f010dbeb:	e8 b6 25 ff ff       	call   f01001a6 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010dbf0:	83 ec 0c             	sub    $0xc,%esp
f010dbf3:	68 70 74 13 f0       	push   $0xf0137470
f010dbf8:	e8 30 30 ff ff       	call   f0100c2d <cprintf>
f010dbfd:	83 c4 10             	add    $0x10,%esp
}
f010dc00:	90                   	nop
f010dc01:	c9                   	leave  
f010dc02:	c3                   	ret    

f010dc03 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010dc03:	55                   	push   %ebp
f010dc04:	89 e5                	mov    %esp,%ebp
f010dc06:	57                   	push   %edi
f010dc07:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010dc0d:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dc14:	83 ec 0c             	sub    $0xc,%esp
f010dc17:	ff 75 f4             	pushl  -0xc(%ebp)
f010dc1a:	e8 a0 37 02 00       	call   f01313bf <initialize_MemBlocksList>
f010dc1f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010dc22:	c7 05 d0 9a 65 f0 00 	movl   $0x0,0xf0659ad0
f010dc29:	00 00 00 
f010dc2c:	c7 05 d4 9a 65 f0 00 	movl   $0x0,0xf0659ad4
f010dc33:	00 00 00 
f010dc36:	c7 05 dc 9a 65 f0 00 	movl   $0x0,0xf0659adc
f010dc3d:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010dc40:	c7 05 a0 1e 6c f0 00 	movl   $0x0,0xf06c1ea0
f010dc47:	00 00 00 
f010dc4a:	c7 05 a4 1e 6c f0 00 	movl   $0x0,0xf06c1ea4
f010dc51:	00 00 00 
f010dc54:	c7 05 ac 1e 6c f0 00 	movl   $0x0,0xf06c1eac
f010dc5b:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010dc5e:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010dc61:	b9 05 00 00 00       	mov    $0x5,%ecx
f010dc66:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc6b:	89 d7                	mov    %edx,%edi
f010dc6d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010dc6f:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010dc72:	b9 05 00 00 00       	mov    $0x5,%ecx
f010dc77:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc7c:	89 d7                	mov    %edx,%edi
f010dc7e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010dc80:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010dc87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010dc8e:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010dc95:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010dc9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc9f:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010dca2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010dca5:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010dca8:	83 ec 0c             	sub    $0xc,%esp
f010dcab:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010dcae:	50                   	push   %eax
f010dcaf:	e8 40 38 02 00       	call   f01314f4 <insert_sorted_allocList>
f010dcb4:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010dcb7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010dcbe:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010dcc3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dcc6:	74 14                	je     f010dcdc <test_insert_sorted_allocList+0xd9>
f010dcc8:	83 ec 04             	sub    $0x4,%esp
f010dccb:	68 bc 74 13 f0       	push   $0xf01374bc
f010dcd0:	6a 56                	push   $0x56
f010dcd2:	68 34 73 13 f0       	push   $0xf0137334
f010dcd7:	e8 ca 24 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010dcdc:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010dce1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dce4:	74 14                	je     f010dcfa <test_insert_sorted_allocList+0xf7>
f010dce6:	83 ec 04             	sub    $0x4,%esp
f010dce9:	68 08 75 13 f0       	push   $0xf0137508
f010dcee:	6a 59                	push   $0x59
f010dcf0:	68 34 73 13 f0       	push   $0xf0137334
f010dcf5:	e8 ac 24 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010dcfa:	83 ec 0c             	sub    $0xc,%esp
f010dcfd:	ff 75 f0             	pushl  -0x10(%ebp)
f010dd00:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010dd03:	50                   	push   %eax
f010dd04:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dd07:	50                   	push   %eax
f010dd08:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dd0b:	50                   	push   %eax
f010dd0c:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010dd11:	e8 7d 26 00 00       	call   f0110393 <check_list_data>
f010dd16:	83 c4 20             	add    $0x20,%esp
f010dd19:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010dd1c:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010dd20:	74 14                	je     f010dd36 <test_insert_sorted_allocList+0x133>
f010dd22:	83 ec 04             	sub    $0x4,%esp
f010dd25:	68 58 75 13 f0       	push   $0xf0137558
f010dd2a:	6a 5d                	push   $0x5d
f010dd2c:	68 34 73 13 f0       	push   $0xf0137334
f010dd31:	e8 70 24 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010dd36:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010dd39:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dd3c:	74 14                	je     f010dd52 <test_insert_sorted_allocList+0x14f>
f010dd3e:	83 ec 04             	sub    $0x4,%esp
f010dd41:	68 a8 75 13 f0       	push   $0xf01375a8
f010dd46:	6a 5e                	push   $0x5e
f010dd48:	68 34 73 13 f0       	push   $0xf0137334
f010dd4d:	e8 54 24 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010dd52:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010dd59:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010dd60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dd63:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010dd66:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dd69:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010dd6c:	83 ec 0c             	sub    $0xc,%esp
f010dd6f:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010dd72:	50                   	push   %eax
f010dd73:	e8 7c 37 02 00       	call   f01314f4 <insert_sorted_allocList>
f010dd78:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010dd7b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010dd82:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010dd87:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dd8a:	74 14                	je     f010dda0 <test_insert_sorted_allocList+0x19d>
f010dd8c:	83 ec 04             	sub    $0x4,%esp
f010dd8f:	68 bc 74 13 f0       	push   $0xf01374bc
f010dd94:	6a 6d                	push   $0x6d
f010dd96:	68 34 73 13 f0       	push   $0xf0137334
f010dd9b:	e8 06 24 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010dda0:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010dda5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dda8:	74 14                	je     f010ddbe <test_insert_sorted_allocList+0x1bb>
f010ddaa:	83 ec 04             	sub    $0x4,%esp
f010ddad:	68 08 75 13 f0       	push   $0xf0137508
f010ddb2:	6a 70                	push   $0x70
f010ddb4:	68 34 73 13 f0       	push   $0xf0137334
f010ddb9:	e8 e8 23 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ddbe:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ddc5:	83 ec 0c             	sub    $0xc,%esp
f010ddc8:	ff 75 f0             	pushl  -0x10(%ebp)
f010ddcb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ddce:	50                   	push   %eax
f010ddcf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ddd2:	50                   	push   %eax
f010ddd3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ddd6:	50                   	push   %eax
f010ddd7:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010dddc:	e8 b2 25 00 00       	call   f0110393 <check_list_data>
f010dde1:	83 c4 20             	add    $0x20,%esp
f010dde4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010dde7:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ddeb:	74 14                	je     f010de01 <test_insert_sorted_allocList+0x1fe>
f010dded:	83 ec 04             	sub    $0x4,%esp
f010ddf0:	68 58 75 13 f0       	push   $0xf0137558
f010ddf5:	6a 75                	push   $0x75
f010ddf7:	68 34 73 13 f0       	push   $0xf0137334
f010ddfc:	e8 a5 23 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010de01:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010de04:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010de07:	74 14                	je     f010de1d <test_insert_sorted_allocList+0x21a>
f010de09:	83 ec 04             	sub    $0x4,%esp
f010de0c:	68 a8 75 13 f0       	push   $0xf01375a8
f010de11:	6a 76                	push   $0x76
f010de13:	68 34 73 13 f0       	push   $0xf0137334
f010de18:	e8 89 23 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010de1d:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010de24:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010de2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010de2e:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010de31:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010de34:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010de37:	83 ec 0c             	sub    $0xc,%esp
f010de3a:	8d 45 90             	lea    -0x70(%ebp),%eax
f010de3d:	50                   	push   %eax
f010de3e:	e8 b1 36 02 00       	call   f01314f4 <insert_sorted_allocList>
f010de43:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010de46:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010de4d:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010de52:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010de55:	74 17                	je     f010de6e <test_insert_sorted_allocList+0x26b>
f010de57:	83 ec 04             	sub    $0x4,%esp
f010de5a:	68 bc 74 13 f0       	push   $0xf01374bc
f010de5f:	68 85 00 00 00       	push   $0x85
f010de64:	68 34 73 13 f0       	push   $0xf0137334
f010de69:	e8 38 23 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010de6e:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010de73:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010de76:	74 17                	je     f010de8f <test_insert_sorted_allocList+0x28c>
f010de78:	83 ec 04             	sub    $0x4,%esp
f010de7b:	68 f4 75 13 f0       	push   $0xf01375f4
f010de80:	68 88 00 00 00       	push   $0x88
f010de85:	68 34 73 13 f0       	push   $0xf0137334
f010de8a:	e8 17 23 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010de8f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010de96:	83 ec 0c             	sub    $0xc,%esp
f010de99:	ff 75 f0             	pushl  -0x10(%ebp)
f010de9c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010de9f:	50                   	push   %eax
f010dea0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dea3:	50                   	push   %eax
f010dea4:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dea7:	50                   	push   %eax
f010dea8:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010dead:	e8 e1 24 00 00       	call   f0110393 <check_list_data>
f010deb2:	83 c4 20             	add    $0x20,%esp
f010deb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010deb8:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010debc:	74 17                	je     f010ded5 <test_insert_sorted_allocList+0x2d2>
f010debe:	83 ec 04             	sub    $0x4,%esp
f010dec1:	68 58 75 13 f0       	push   $0xf0137558
f010dec6:	68 8d 00 00 00       	push   $0x8d
f010decb:	68 34 73 13 f0       	push   $0xf0137334
f010ded0:	e8 d1 22 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ded5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ded8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dedb:	74 17                	je     f010def4 <test_insert_sorted_allocList+0x2f1>
f010dedd:	83 ec 04             	sub    $0x4,%esp
f010dee0:	68 a8 75 13 f0       	push   $0xf01375a8
f010dee5:	68 8e 00 00 00       	push   $0x8e
f010deea:	68 34 73 13 f0       	push   $0xf0137334
f010deef:	e8 b2 22 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010def4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010defb:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010df02:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010df05:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010df08:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010df0b:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010df0e:	83 ec 0c             	sub    $0xc,%esp
f010df11:	8d 45 80             	lea    -0x80(%ebp),%eax
f010df14:	50                   	push   %eax
f010df15:	e8 da 35 02 00       	call   f01314f4 <insert_sorted_allocList>
f010df1a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010df1d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010df24:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010df29:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010df2c:	74 17                	je     f010df45 <test_insert_sorted_allocList+0x342>
f010df2e:	83 ec 04             	sub    $0x4,%esp
f010df31:	68 bc 74 13 f0       	push   $0xf01374bc
f010df36:	68 9c 00 00 00       	push   $0x9c
f010df3b:	68 34 73 13 f0       	push   $0xf0137334
f010df40:	e8 61 22 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010df45:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010df4a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010df4d:	74 17                	je     f010df66 <test_insert_sorted_allocList+0x363>
f010df4f:	83 ec 04             	sub    $0x4,%esp
f010df52:	68 08 75 13 f0       	push   $0xf0137508
f010df57:	68 9f 00 00 00       	push   $0x9f
f010df5c:	68 34 73 13 f0       	push   $0xf0137334
f010df61:	e8 40 22 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010df66:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010df6d:	83 ec 0c             	sub    $0xc,%esp
f010df70:	ff 75 f0             	pushl  -0x10(%ebp)
f010df73:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010df76:	50                   	push   %eax
f010df77:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010df7a:	50                   	push   %eax
f010df7b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010df7e:	50                   	push   %eax
f010df7f:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010df84:	e8 0a 24 00 00       	call   f0110393 <check_list_data>
f010df89:	83 c4 20             	add    $0x20,%esp
f010df8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010df8f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010df93:	74 17                	je     f010dfac <test_insert_sorted_allocList+0x3a9>
f010df95:	83 ec 04             	sub    $0x4,%esp
f010df98:	68 58 75 13 f0       	push   $0xf0137558
f010df9d:	68 a4 00 00 00       	push   $0xa4
f010dfa2:	68 34 73 13 f0       	push   $0xf0137334
f010dfa7:	e8 fa 21 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010dfac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010dfaf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dfb2:	74 17                	je     f010dfcb <test_insert_sorted_allocList+0x3c8>
f010dfb4:	83 ec 04             	sub    $0x4,%esp
f010dfb7:	68 a8 75 13 f0       	push   $0xf01375a8
f010dfbc:	68 a5 00 00 00       	push   $0xa5
f010dfc1:	68 34 73 13 f0       	push   $0xf0137334
f010dfc6:	e8 db 21 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010dfcb:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010dfd2:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010dfd9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dfdc:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010dfe2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dfe5:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010dfeb:	83 ec 0c             	sub    $0xc,%esp
f010dfee:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010dff4:	50                   	push   %eax
f010dff5:	e8 fa 34 02 00       	call   f01314f4 <insert_sorted_allocList>
f010dffa:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010dffd:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e004:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010e009:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e00c:	74 17                	je     f010e025 <test_insert_sorted_allocList+0x422>
f010e00e:	83 ec 04             	sub    $0x4,%esp
f010e011:	68 bc 74 13 f0       	push   $0xf01374bc
f010e016:	68 b3 00 00 00       	push   $0xb3
f010e01b:	68 34 73 13 f0       	push   $0xf0137334
f010e020:	e8 81 21 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e025:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010e02a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e02d:	74 17                	je     f010e046 <test_insert_sorted_allocList+0x443>
f010e02f:	83 ec 04             	sub    $0x4,%esp
f010e032:	68 08 75 13 f0       	push   $0xf0137508
f010e037:	68 b6 00 00 00       	push   $0xb6
f010e03c:	68 34 73 13 f0       	push   $0xf0137334
f010e041:	e8 60 21 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e046:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e04d:	83 ec 0c             	sub    $0xc,%esp
f010e050:	ff 75 f0             	pushl  -0x10(%ebp)
f010e053:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e056:	50                   	push   %eax
f010e057:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e05a:	50                   	push   %eax
f010e05b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e05e:	50                   	push   %eax
f010e05f:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010e064:	e8 2a 23 00 00       	call   f0110393 <check_list_data>
f010e069:	83 c4 20             	add    $0x20,%esp
f010e06c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e06f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e073:	74 17                	je     f010e08c <test_insert_sorted_allocList+0x489>
f010e075:	83 ec 04             	sub    $0x4,%esp
f010e078:	68 58 75 13 f0       	push   $0xf0137558
f010e07d:	68 bb 00 00 00       	push   $0xbb
f010e082:	68 34 73 13 f0       	push   $0xf0137334
f010e087:	e8 1a 21 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e08c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e08f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e092:	74 17                	je     f010e0ab <test_insert_sorted_allocList+0x4a8>
f010e094:	83 ec 04             	sub    $0x4,%esp
f010e097:	68 a8 75 13 f0       	push   $0xf01375a8
f010e09c:	68 bc 00 00 00       	push   $0xbc
f010e0a1:	68 34 73 13 f0       	push   $0xf0137334
f010e0a6:	e8 fb 20 ff ff       	call   f01001a6 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010e0ab:	83 ec 0c             	sub    $0xc,%esp
f010e0ae:	68 44 76 13 f0       	push   $0xf0137644
f010e0b3:	e8 75 2b ff ff       	call   f0100c2d <cprintf>
f010e0b8:	83 c4 10             	add    $0x10,%esp
}
f010e0bb:	90                   	nop
f010e0bc:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010e0bf:	c9                   	leave  
f010e0c0:	c3                   	ret    

f010e0c1 <test_find_block>:

void test_find_block()
{
f010e0c1:	55                   	push   %ebp
f010e0c2:	89 e5                	mov    %esp,%ebp
f010e0c4:	57                   	push   %edi
f010e0c5:	56                   	push   %esi
f010e0c6:	53                   	push   %ebx
f010e0c7:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010e0cd:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e0d4:	83 ec 0c             	sub    $0xc,%esp
f010e0d7:	ff 75 e0             	pushl  -0x20(%ebp)
f010e0da:	e8 e0 32 02 00       	call   f01313bf <initialize_MemBlocksList>
f010e0df:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010e0e2:	c7 05 a0 1e 6c f0 00 	movl   $0x0,0xf06c1ea0
f010e0e9:	00 00 00 
f010e0ec:	c7 05 a4 1e 6c f0 00 	movl   $0x0,0xf06c1ea4
f010e0f3:	00 00 00 
f010e0f6:	c7 05 ac 1e 6c f0 00 	movl   $0x0,0xf06c1eac
f010e0fd:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010e100:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e103:	bb bc 77 13 f0       	mov    $0xf01377bc,%ebx
f010e108:	ba 06 00 00 00       	mov    $0x6,%edx
f010e10d:	89 c7                	mov    %eax,%edi
f010e10f:	89 de                	mov    %ebx,%esi
f010e111:	89 d1                	mov    %edx,%ecx
f010e113:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010e115:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010e118:	bb d4 77 13 f0       	mov    $0xf01377d4,%ebx
f010e11d:	ba 06 00 00 00       	mov    $0x6,%edx
f010e122:	89 c7                	mov    %eax,%edi
f010e124:	89 de                	mov    %ebx,%esi
f010e126:	89 d1                	mov    %edx,%ecx
f010e128:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010e12a:	c7 05 d0 9a 65 f0 00 	movl   $0x0,0xf0659ad0
f010e131:	00 00 00 
f010e134:	c7 05 d4 9a 65 f0 00 	movl   $0x0,0xf0659ad4
f010e13b:	00 00 00 
f010e13e:	c7 05 dc 9a 65 f0 00 	movl   $0x0,0xf0659adc
f010e145:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e148:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e14f:	e9 5f 01 00 00       	jmp    f010e2b3 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010e154:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e157:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010e15b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e15e:	c1 e2 04             	shl    $0x4,%edx
f010e161:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e164:	01 da                	add    %ebx,%edx
f010e166:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010e16c:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010e16e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e171:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010e175:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e178:	c1 e2 04             	shl    $0x4,%edx
f010e17b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e17e:	01 f2                	add    %esi,%edx
f010e180:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010e186:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e188:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e18c:	0f 85 92 00 00 00    	jne    f010e224 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010e192:	a1 d0 9a 65 f0       	mov    0xf0659ad0,%eax
f010e197:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e19a:	c1 e2 04             	shl    $0x4,%edx
f010e19d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e1a0:	01 fa                	add    %edi,%edx
f010e1a2:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010e1a8:	89 02                	mov    %eax,(%edx)
f010e1aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e1ad:	c1 e0 04             	shl    $0x4,%eax
f010e1b0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e1b3:	01 d8                	add    %ebx,%eax
f010e1b5:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e1ba:	8b 00                	mov    (%eax),%eax
f010e1bc:	85 c0                	test   %eax,%eax
f010e1be:	74 18                	je     f010e1d8 <test_find_block+0x117>
f010e1c0:	a1 d0 9a 65 f0       	mov    0xf0659ad0,%eax
f010e1c5:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e1cb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e1ce:	c1 e1 04             	shl    $0x4,%ecx
f010e1d1:	01 ca                	add    %ecx,%edx
f010e1d3:	89 50 04             	mov    %edx,0x4(%eax)
f010e1d6:	eb 13                	jmp    f010e1eb <test_find_block+0x12a>
f010e1d8:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e1de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1e1:	c1 e2 04             	shl    $0x4,%edx
f010e1e4:	01 d0                	add    %edx,%eax
f010e1e6:	a3 d4 9a 65 f0       	mov    %eax,0xf0659ad4
f010e1eb:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e1f1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1f4:	c1 e2 04             	shl    $0x4,%edx
f010e1f7:	01 d0                	add    %edx,%eax
f010e1f9:	a3 d0 9a 65 f0       	mov    %eax,0xf0659ad0
f010e1fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e201:	c1 e0 04             	shl    $0x4,%eax
f010e204:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e207:	01 f0                	add    %esi,%eax
f010e209:	2d 98 00 00 00       	sub    $0x98,%eax
f010e20e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e214:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010e219:	40                   	inc    %eax
f010e21a:	a3 dc 9a 65 f0       	mov    %eax,0xf0659adc
f010e21f:	e9 8c 00 00 00       	jmp    f010e2b0 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010e224:	a1 d4 9a 65 f0       	mov    0xf0659ad4,%eax
f010e229:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e22c:	c1 e2 04             	shl    $0x4,%edx
f010e22f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e232:	01 fa                	add    %edi,%edx
f010e234:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010e23a:	89 02                	mov    %eax,(%edx)
f010e23c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e23f:	c1 e0 04             	shl    $0x4,%eax
f010e242:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e245:	01 d8                	add    %ebx,%eax
f010e247:	2d 98 00 00 00       	sub    $0x98,%eax
f010e24c:	8b 00                	mov    (%eax),%eax
f010e24e:	85 c0                	test   %eax,%eax
f010e250:	74 17                	je     f010e269 <test_find_block+0x1a8>
f010e252:	a1 d4 9a 65 f0       	mov    0xf0659ad4,%eax
f010e257:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e25d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e260:	c1 e1 04             	shl    $0x4,%ecx
f010e263:	01 ca                	add    %ecx,%edx
f010e265:	89 10                	mov    %edx,(%eax)
f010e267:	eb 13                	jmp    f010e27c <test_find_block+0x1bb>
f010e269:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e26f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e272:	c1 e2 04             	shl    $0x4,%edx
f010e275:	01 d0                	add    %edx,%eax
f010e277:	a3 d0 9a 65 f0       	mov    %eax,0xf0659ad0
f010e27c:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e282:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e285:	c1 e2 04             	shl    $0x4,%edx
f010e288:	01 d0                	add    %edx,%eax
f010e28a:	a3 d4 9a 65 f0       	mov    %eax,0xf0659ad4
f010e28f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e292:	c1 e0 04             	shl    $0x4,%eax
f010e295:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e298:	01 f0                	add    %esi,%eax
f010e29a:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e29f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e2a5:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010e2aa:	40                   	inc    %eax
f010e2ab:	a3 dc 9a 65 f0       	mov    %eax,0xf0659adc
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e2b0:	ff 45 e4             	incl   -0x1c(%ebp)
f010e2b3:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010e2b7:	0f 8e 97 fe ff ff    	jle    f010e154 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010e2bd:	83 ec 08             	sub    $0x8,%esp
f010e2c0:	68 00 10 00 00       	push   $0x1000
f010e2c5:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010e2ca:	e8 cd 31 02 00       	call   f013149c <find_block>
f010e2cf:	83 c4 10             	add    $0x10,%esp
f010e2d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010e2d5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e2d9:	74 17                	je     f010e2f2 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010e2db:	83 ec 04             	sub    $0x4,%esp
f010e2de:	68 84 76 13 f0       	push   $0xf0137684
f010e2e3:	68 de 00 00 00       	push   $0xde
f010e2e8:	68 34 73 13 f0       	push   $0xf0137334
f010e2ed:	e8 b4 1e ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010e2f2:	83 ec 08             	sub    $0x8,%esp
f010e2f5:	6a 00                	push   $0x0
f010e2f7:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010e2fc:	e8 9b 31 02 00       	call   f013149c <find_block>
f010e301:	83 c4 10             	add    $0x10,%esp
f010e304:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010e307:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e30b:	74 17                	je     f010e324 <test_find_block+0x263>
f010e30d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e310:	8b 40 0c             	mov    0xc(%eax),%eax
f010e313:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e318:	75 0a                	jne    f010e324 <test_find_block+0x263>
f010e31a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e31d:	8b 40 08             	mov    0x8(%eax),%eax
f010e320:	85 c0                	test   %eax,%eax
f010e322:	74 17                	je     f010e33b <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e324:	83 ec 04             	sub    $0x4,%esp
f010e327:	68 e8 76 13 f0       	push   $0xf01376e8
f010e32c:	68 e3 00 00 00       	push   $0xe3
f010e331:	68 34 73 13 f0       	push   $0xf0137334
f010e336:	e8 6b 1e ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010e33b:	83 ec 08             	sub    $0x8,%esp
f010e33e:	68 00 70 00 00       	push   $0x7000
f010e343:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010e348:	e8 4f 31 02 00       	call   f013149c <find_block>
f010e34d:	83 c4 10             	add    $0x10,%esp
f010e350:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010e353:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e357:	74 1a                	je     f010e373 <test_find_block+0x2b2>
f010e359:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e35c:	8b 40 0c             	mov    0xc(%eax),%eax
f010e35f:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e364:	75 0d                	jne    f010e373 <test_find_block+0x2b2>
f010e366:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e369:	8b 40 08             	mov    0x8(%eax),%eax
f010e36c:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e371:	74 17                	je     f010e38a <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e373:	83 ec 04             	sub    $0x4,%esp
f010e376:	68 e8 76 13 f0       	push   $0xf01376e8
f010e37b:	68 e8 00 00 00       	push   $0xe8
f010e380:	68 34 73 13 f0       	push   $0xf0137334
f010e385:	e8 1c 1e ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010e38a:	83 ec 08             	sub    $0x8,%esp
f010e38d:	68 00 a4 01 00       	push   $0x1a400
f010e392:	68 d0 9a 65 f0       	push   $0xf0659ad0
f010e397:	e8 00 31 02 00       	call   f013149c <find_block>
f010e39c:	83 c4 10             	add    $0x10,%esp
f010e39f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010e3a2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e3a6:	74 1a                	je     f010e3c2 <test_find_block+0x301>
f010e3a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e3ab:	8b 40 0c             	mov    0xc(%eax),%eax
f010e3ae:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010e3b3:	75 0d                	jne    f010e3c2 <test_find_block+0x301>
f010e3b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e3b8:	8b 40 08             	mov    0x8(%eax),%eax
f010e3bb:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e3c0:	74 17                	je     f010e3d9 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e3c2:	83 ec 04             	sub    $0x4,%esp
f010e3c5:	68 e8 76 13 f0       	push   $0xf01376e8
f010e3ca:	68 ed 00 00 00       	push   $0xed
f010e3cf:	68 34 73 13 f0       	push   $0xf0137334
f010e3d4:	e8 cd 1d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010e3d9:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010e3de:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e3e1:	75 09                	jne    f010e3ec <test_find_block+0x32b>
f010e3e3:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010e3e8:	85 c0                	test   %eax,%eax
f010e3ea:	74 17                	je     f010e403 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010e3ec:	83 ec 04             	sub    $0x4,%esp
f010e3ef:	68 1c 77 13 f0       	push   $0xf013771c
f010e3f4:	68 f2 00 00 00       	push   $0xf2
f010e3f9:	68 34 73 13 f0       	push   $0xf0137334
f010e3fe:	e8 a3 1d ff ff       	call   f01001a6 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010e403:	83 ec 0c             	sub    $0xc,%esp
f010e406:	68 80 77 13 f0       	push   $0xf0137780
f010e40b:	e8 1d 28 ff ff       	call   f0100c2d <cprintf>
f010e410:	83 c4 10             	add    $0x10,%esp
}
f010e413:	90                   	nop
f010e414:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e417:	5b                   	pop    %ebx
f010e418:	5e                   	pop    %esi
f010e419:	5f                   	pop    %edi
f010e41a:	5d                   	pop    %ebp
f010e41b:	c3                   	ret    

f010e41c <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e41c:	55                   	push   %ebp
f010e41d:	89 e5                	mov    %esp,%ebp
f010e41f:	57                   	push   %edi
f010e420:	56                   	push   %esi
f010e421:	53                   	push   %ebx
f010e422:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010e428:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e42f:	83 ec 0c             	sub    $0xc,%esp
f010e432:	ff 75 e0             	pushl  -0x20(%ebp)
f010e435:	e8 85 2f 02 00       	call   f01313bf <initialize_MemBlocksList>
f010e43a:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e43d:	c7 05 d0 9a 65 f0 00 	movl   $0x0,0xf0659ad0
f010e444:	00 00 00 
f010e447:	c7 05 d4 9a 65 f0 00 	movl   $0x0,0xf0659ad4
f010e44e:	00 00 00 
f010e451:	c7 05 dc 9a 65 f0 00 	movl   $0x0,0xf0659adc
f010e458:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e45b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e45e:	bb 60 7a 13 f0       	mov    $0xf0137a60,%ebx
f010e463:	ba 08 00 00 00       	mov    $0x8,%edx
f010e468:	89 c7                	mov    %eax,%edi
f010e46a:	89 de                	mov    %ebx,%esi
f010e46c:	89 d1                	mov    %edx,%ecx
f010e46e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010e470:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e473:	bb 80 7a 13 f0       	mov    $0xf0137a80,%ebx
f010e478:	ba 08 00 00 00       	mov    $0x8,%edx
f010e47d:	89 c7                	mov    %eax,%edi
f010e47f:	89 de                	mov    %ebx,%esi
f010e481:	89 d1                	mov    %edx,%ecx
f010e483:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e485:	c7 05 a0 1e 6c f0 00 	movl   $0x0,0xf06c1ea0
f010e48c:	00 00 00 
f010e48f:	c7 05 a4 1e 6c f0 00 	movl   $0x0,0xf06c1ea4
f010e496:	00 00 00 
f010e499:	c7 05 ac 1e 6c f0 00 	movl   $0x0,0xf06c1eac
f010e4a0:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e4a3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e4aa:	e9 5f 01 00 00       	jmp    f010e60e <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e4af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4b2:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e4b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e4b9:	c1 e2 04             	shl    $0x4,%edx
f010e4bc:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e4bf:	01 da                	add    %ebx,%edx
f010e4c1:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010e4c7:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e4c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4cc:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e4d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e4d3:	c1 e2 04             	shl    $0x4,%edx
f010e4d6:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e4d9:	01 f2                	add    %esi,%edx
f010e4db:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010e4e1:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e4e3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e4e7:	0f 85 92 00 00 00    	jne    f010e57f <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e4ed:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f010e4f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e4f5:	c1 e2 04             	shl    $0x4,%edx
f010e4f8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e4fb:	01 fa                	add    %edi,%edx
f010e4fd:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010e503:	89 02                	mov    %eax,(%edx)
f010e505:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e508:	c1 e0 04             	shl    $0x4,%eax
f010e50b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e50e:	01 d8                	add    %ebx,%eax
f010e510:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e515:	8b 00                	mov    (%eax),%eax
f010e517:	85 c0                	test   %eax,%eax
f010e519:	74 18                	je     f010e533 <test_alloc_block_FF+0x117>
f010e51b:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f010e520:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e526:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e529:	c1 e1 04             	shl    $0x4,%ecx
f010e52c:	01 ca                	add    %ecx,%edx
f010e52e:	89 50 04             	mov    %edx,0x4(%eax)
f010e531:	eb 13                	jmp    f010e546 <test_alloc_block_FF+0x12a>
f010e533:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e539:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e53c:	c1 e2 04             	shl    $0x4,%edx
f010e53f:	01 d0                	add    %edx,%eax
f010e541:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f010e546:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e54c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e54f:	c1 e2 04             	shl    $0x4,%edx
f010e552:	01 d0                	add    %edx,%eax
f010e554:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f010e559:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e55c:	c1 e0 04             	shl    $0x4,%eax
f010e55f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e562:	01 f0                	add    %esi,%eax
f010e564:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e569:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e56f:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010e574:	40                   	inc    %eax
f010e575:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
f010e57a:	e9 8c 00 00 00       	jmp    f010e60b <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e57f:	a1 a4 1e 6c f0       	mov    0xf06c1ea4,%eax
f010e584:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e587:	c1 e2 04             	shl    $0x4,%edx
f010e58a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e58d:	01 fa                	add    %edi,%edx
f010e58f:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010e595:	89 02                	mov    %eax,(%edx)
f010e597:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e59a:	c1 e0 04             	shl    $0x4,%eax
f010e59d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e5a0:	01 d8                	add    %ebx,%eax
f010e5a2:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e5a7:	8b 00                	mov    (%eax),%eax
f010e5a9:	85 c0                	test   %eax,%eax
f010e5ab:	74 17                	je     f010e5c4 <test_alloc_block_FF+0x1a8>
f010e5ad:	a1 a4 1e 6c f0       	mov    0xf06c1ea4,%eax
f010e5b2:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e5b8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e5bb:	c1 e1 04             	shl    $0x4,%ecx
f010e5be:	01 ca                	add    %ecx,%edx
f010e5c0:	89 10                	mov    %edx,(%eax)
f010e5c2:	eb 13                	jmp    f010e5d7 <test_alloc_block_FF+0x1bb>
f010e5c4:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e5ca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5cd:	c1 e2 04             	shl    $0x4,%edx
f010e5d0:	01 d0                	add    %edx,%eax
f010e5d2:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f010e5d7:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e5dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5e0:	c1 e2 04             	shl    $0x4,%edx
f010e5e3:	01 d0                	add    %edx,%eax
f010e5e5:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f010e5ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e5ed:	c1 e0 04             	shl    $0x4,%eax
f010e5f0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e5f3:	01 f0                	add    %esi,%eax
f010e5f5:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e5fa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e600:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010e605:	40                   	inc    %eax
f010e606:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e60b:	ff 45 e4             	incl   -0x1c(%ebp)
f010e60e:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010e612:	0f 8e 97 fe ff ff    	jle    f010e4af <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010e618:	83 ec 0c             	sub    $0xc,%esp
f010e61b:	68 00 00 30 00       	push   $0x300000
f010e620:	e8 5c 31 02 00       	call   f0131781 <alloc_block_FF>
f010e625:	83 c4 10             	add    $0x10,%esp
f010e628:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010e62b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e62f:	74 17                	je     f010e648 <test_alloc_block_FF+0x22c>
f010e631:	83 ec 04             	sub    $0x4,%esp
f010e634:	68 ec 77 13 f0       	push   $0xf01377ec
f010e639:	68 15 01 00 00       	push   $0x115
f010e63e:	68 34 73 13 f0       	push   $0xf0137334
f010e643:	e8 5e 1b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e648:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010e64d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e650:	75 13                	jne    f010e665 <test_alloc_block_FF+0x249>
f010e652:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010e657:	83 f8 08             	cmp    $0x8,%eax
f010e65a:	75 09                	jne    f010e665 <test_alloc_block_FF+0x249>
f010e65c:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010e661:	85 c0                	test   %eax,%eax
f010e663:	74 17                	je     f010e67c <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e665:	83 ec 04             	sub    $0x4,%esp
f010e668:	68 60 78 13 f0       	push   $0xf0137860
f010e66d:	68 19 01 00 00       	push   $0x119
f010e672:	68 34 73 13 f0       	push   $0xf0137334
f010e677:	e8 2a 1b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010e67c:	83 ec 0c             	sub    $0xc,%esp
f010e67f:	68 00 24 00 00       	push   $0x2400
f010e684:	e8 f8 30 02 00       	call   f0131781 <alloc_block_FF>
f010e689:	83 c4 10             	add    $0x10,%esp
f010e68c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010e68f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e693:	74 1a                	je     f010e6af <test_alloc_block_FF+0x293>
f010e695:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e698:	8b 40 0c             	mov    0xc(%eax),%eax
f010e69b:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e6a0:	75 0d                	jne    f010e6af <test_alloc_block_FF+0x293>
f010e6a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e6a5:	8b 40 08             	mov    0x8(%eax),%eax
f010e6a8:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e6ad:	74 17                	je     f010e6c6 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e6af:	83 ec 04             	sub    $0x4,%esp
f010e6b2:	68 d8 78 13 f0       	push   $0xf01378d8
f010e6b7:	68 21 01 00 00       	push   $0x121
f010e6bc:	68 34 73 13 f0       	push   $0xf0137334
f010e6c1:	e8 e0 1a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e6c6:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010e6cb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e6ce:	75 13                	jne    f010e6e3 <test_alloc_block_FF+0x2c7>
f010e6d0:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010e6d5:	83 f8 07             	cmp    $0x7,%eax
f010e6d8:	75 09                	jne    f010e6e3 <test_alloc_block_FF+0x2c7>
f010e6da:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010e6df:	85 c0                	test   %eax,%eax
f010e6e1:	74 17                	je     f010e6fa <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e6e3:	83 ec 04             	sub    $0x4,%esp
f010e6e6:	68 1c 79 13 f0       	push   $0xf013791c
f010e6eb:	68 25 01 00 00       	push   $0x125
f010e6f0:	68 34 73 13 f0       	push   $0xf0137334
f010e6f5:	e8 ac 1a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e6fa:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e701:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010e704:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010e70b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010e712:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e719:	83 ec 0c             	sub    $0xc,%esp
f010e71c:	ff 75 d8             	pushl  -0x28(%ebp)
f010e71f:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e725:	50                   	push   %eax
f010e726:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e729:	50                   	push   %eax
f010e72a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e72d:	50                   	push   %eax
f010e72e:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010e733:	e8 5b 1c 00 00       	call   f0110393 <check_list_data>
f010e738:	83 c4 20             	add    $0x20,%esp
f010e73b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e73e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e742:	74 17                	je     f010e75b <test_alloc_block_FF+0x33f>
f010e744:	83 ec 04             	sub    $0x4,%esp
f010e747:	68 80 79 13 f0       	push   $0xf0137980
f010e74c:	68 2d 01 00 00       	push   $0x12d
f010e751:	68 34 73 13 f0       	push   $0xf0137334
f010e756:	e8 4b 1a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e75b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e761:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e764:	74 17                	je     f010e77d <test_alloc_block_FF+0x361>
f010e766:	83 ec 04             	sub    $0x4,%esp
f010e769:	68 cc 79 13 f0       	push   $0xf01379cc
f010e76e:	68 2e 01 00 00       	push   $0x12e
f010e773:	68 34 73 13 f0       	push   $0xf0137334
f010e778:	e8 29 1a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010e77d:	83 ec 0c             	sub    $0xc,%esp
f010e780:	68 00 00 10 00       	push   $0x100000
f010e785:	e8 f7 2f 02 00       	call   f0131781 <alloc_block_FF>
f010e78a:	83 c4 10             	add    $0x10,%esp
f010e78d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e790:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e794:	74 1a                	je     f010e7b0 <test_alloc_block_FF+0x394>
f010e796:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e799:	8b 40 0c             	mov    0xc(%eax),%eax
f010e79c:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e7a1:	75 0d                	jne    f010e7b0 <test_alloc_block_FF+0x394>
f010e7a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7a6:	8b 40 08             	mov    0x8(%eax),%eax
f010e7a9:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e7ae:	74 17                	je     f010e7c7 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e7b0:	83 ec 04             	sub    $0x4,%esp
f010e7b3:	68 d8 78 13 f0       	push   $0xf01378d8
f010e7b8:	68 36 01 00 00       	push   $0x136
f010e7bd:	68 34 73 13 f0       	push   $0xf0137334
f010e7c2:	e8 df 19 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e7c7:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010e7cc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e7cf:	4a                   	dec    %edx
f010e7d0:	39 d0                	cmp    %edx,%eax
f010e7d2:	75 13                	jne    f010e7e7 <test_alloc_block_FF+0x3cb>
f010e7d4:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010e7d9:	83 f8 07             	cmp    $0x7,%eax
f010e7dc:	75 09                	jne    f010e7e7 <test_alloc_block_FF+0x3cb>
f010e7de:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010e7e3:	85 c0                	test   %eax,%eax
f010e7e5:	74 17                	je     f010e7fe <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e7e7:	83 ec 04             	sub    $0x4,%esp
f010e7ea:	68 1c 79 13 f0       	push   $0xf013791c
f010e7ef:	68 3a 01 00 00       	push   $0x13a
f010e7f4:	68 34 73 13 f0       	push   $0xf0137334
f010e7f9:	e8 a8 19 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e7fe:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e805:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010e808:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e80f:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e816:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e81d:	83 ec 0c             	sub    $0xc,%esp
f010e820:	ff 75 d8             	pushl  -0x28(%ebp)
f010e823:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e829:	50                   	push   %eax
f010e82a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e82d:	50                   	push   %eax
f010e82e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e831:	50                   	push   %eax
f010e832:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010e837:	e8 57 1b 00 00       	call   f0110393 <check_list_data>
f010e83c:	83 c4 20             	add    $0x20,%esp
f010e83f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e842:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e846:	74 17                	je     f010e85f <test_alloc_block_FF+0x443>
f010e848:	83 ec 04             	sub    $0x4,%esp
f010e84b:	68 80 79 13 f0       	push   $0xf0137980
f010e850:	68 42 01 00 00       	push   $0x142
f010e855:	68 34 73 13 f0       	push   $0xf0137334
f010e85a:	e8 47 19 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e85f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e865:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e868:	74 17                	je     f010e881 <test_alloc_block_FF+0x465>
f010e86a:	83 ec 04             	sub    $0x4,%esp
f010e86d:	68 cc 79 13 f0       	push   $0xf01379cc
f010e872:	68 43 01 00 00       	push   $0x143
f010e877:	68 34 73 13 f0       	push   $0xf0137334
f010e87c:	e8 25 19 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010e881:	83 ec 0c             	sub    $0xc,%esp
f010e884:	68 18 7a 13 f0       	push   $0xf0137a18
f010e889:	e8 9f 23 ff ff       	call   f0100c2d <cprintf>
f010e88e:	83 c4 10             	add    $0x10,%esp
}
f010e891:	90                   	nop
f010e892:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e895:	5b                   	pop    %ebx
f010e896:	5e                   	pop    %esi
f010e897:	5f                   	pop    %edi
f010e898:	5d                   	pop    %ebp
f010e899:	c3                   	ret    

f010e89a <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010e89a:	55                   	push   %ebp
f010e89b:	89 e5                	mov    %esp,%ebp
f010e89d:	57                   	push   %edi
f010e89e:	56                   	push   %esi
f010e89f:	53                   	push   %ebx
f010e8a0:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010e8a6:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e8ad:	83 ec 0c             	sub    $0xc,%esp
f010e8b0:	ff 75 e0             	pushl  -0x20(%ebp)
f010e8b3:	e8 07 2b 02 00       	call   f01313bf <initialize_MemBlocksList>
f010e8b8:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e8bb:	c7 05 d0 9a 65 f0 00 	movl   $0x0,0xf0659ad0
f010e8c2:	00 00 00 
f010e8c5:	c7 05 d4 9a 65 f0 00 	movl   $0x0,0xf0659ad4
f010e8cc:	00 00 00 
f010e8cf:	c7 05 dc 9a 65 f0 00 	movl   $0x0,0xf0659adc
f010e8d6:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010e8d9:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e8dc:	bb 94 7c 13 f0       	mov    $0xf0137c94,%ebx
f010e8e1:	ba 07 00 00 00       	mov    $0x7,%edx
f010e8e6:	89 c7                	mov    %eax,%edi
f010e8e8:	89 de                	mov    %ebx,%esi
f010e8ea:	89 d1                	mov    %edx,%ecx
f010e8ec:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010e8ee:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e8f1:	bb b0 7c 13 f0       	mov    $0xf0137cb0,%ebx
f010e8f6:	ba 07 00 00 00       	mov    $0x7,%edx
f010e8fb:	89 c7                	mov    %eax,%edi
f010e8fd:	89 de                	mov    %ebx,%esi
f010e8ff:	89 d1                	mov    %edx,%ecx
f010e901:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e903:	c7 05 a0 1e 6c f0 00 	movl   $0x0,0xf06c1ea0
f010e90a:	00 00 00 
f010e90d:	c7 05 a4 1e 6c f0 00 	movl   $0x0,0xf06c1ea4
f010e914:	00 00 00 
f010e917:	c7 05 ac 1e 6c f0 00 	movl   $0x0,0xf06c1eac
f010e91e:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e928:	e9 5f 01 00 00       	jmp    f010ea8c <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e92d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e930:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010e934:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e937:	c1 e2 04             	shl    $0x4,%edx
f010e93a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e93d:	01 da                	add    %ebx,%edx
f010e93f:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010e945:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e947:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e94a:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010e94e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e951:	c1 e2 04             	shl    $0x4,%edx
f010e954:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e957:	01 f2                	add    %esi,%edx
f010e959:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010e95f:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e961:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e965:	0f 85 92 00 00 00    	jne    f010e9fd <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e96b:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f010e970:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e973:	c1 e2 04             	shl    $0x4,%edx
f010e976:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e979:	01 fa                	add    %edi,%edx
f010e97b:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010e981:	89 02                	mov    %eax,(%edx)
f010e983:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e986:	c1 e0 04             	shl    $0x4,%eax
f010e989:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e98c:	01 d8                	add    %ebx,%eax
f010e98e:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e993:	8b 00                	mov    (%eax),%eax
f010e995:	85 c0                	test   %eax,%eax
f010e997:	74 18                	je     f010e9b1 <test_alloc_block_BF+0x117>
f010e999:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f010e99e:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e9a4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e9a7:	c1 e1 04             	shl    $0x4,%ecx
f010e9aa:	01 ca                	add    %ecx,%edx
f010e9ac:	89 50 04             	mov    %edx,0x4(%eax)
f010e9af:	eb 13                	jmp    f010e9c4 <test_alloc_block_BF+0x12a>
f010e9b1:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e9b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9ba:	c1 e2 04             	shl    $0x4,%edx
f010e9bd:	01 d0                	add    %edx,%eax
f010e9bf:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f010e9c4:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e9ca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9cd:	c1 e2 04             	shl    $0x4,%edx
f010e9d0:	01 d0                	add    %edx,%eax
f010e9d2:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f010e9d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9da:	c1 e0 04             	shl    $0x4,%eax
f010e9dd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e9e0:	01 f0                	add    %esi,%eax
f010e9e2:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e9e7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e9ed:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010e9f2:	40                   	inc    %eax
f010e9f3:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
f010e9f8:	e9 8c 00 00 00       	jmp    f010ea89 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e9fd:	a1 a4 1e 6c f0       	mov    0xf06c1ea4,%eax
f010ea02:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea05:	c1 e2 04             	shl    $0x4,%edx
f010ea08:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ea0b:	01 fa                	add    %edi,%edx
f010ea0d:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010ea13:	89 02                	mov    %eax,(%edx)
f010ea15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea18:	c1 e0 04             	shl    $0x4,%eax
f010ea1b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ea1e:	01 d8                	add    %ebx,%eax
f010ea20:	2d b8 00 00 00       	sub    $0xb8,%eax
f010ea25:	8b 00                	mov    (%eax),%eax
f010ea27:	85 c0                	test   %eax,%eax
f010ea29:	74 17                	je     f010ea42 <test_alloc_block_BF+0x1a8>
f010ea2b:	a1 a4 1e 6c f0       	mov    0xf06c1ea4,%eax
f010ea30:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010ea36:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ea39:	c1 e1 04             	shl    $0x4,%ecx
f010ea3c:	01 ca                	add    %ecx,%edx
f010ea3e:	89 10                	mov    %edx,(%eax)
f010ea40:	eb 13                	jmp    f010ea55 <test_alloc_block_BF+0x1bb>
f010ea42:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ea48:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea4b:	c1 e2 04             	shl    $0x4,%edx
f010ea4e:	01 d0                	add    %edx,%eax
f010ea50:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f010ea55:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ea5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea5e:	c1 e2 04             	shl    $0x4,%edx
f010ea61:	01 d0                	add    %edx,%eax
f010ea63:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f010ea68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea6b:	c1 e0 04             	shl    $0x4,%eax
f010ea6e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ea71:	01 f0                	add    %esi,%eax
f010ea73:	2d bc 00 00 00       	sub    $0xbc,%eax
f010ea78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ea7e:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010ea83:	40                   	inc    %eax
f010ea84:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010ea89:	ff 45 e4             	incl   -0x1c(%ebp)
f010ea8c:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010ea90:	0f 8e 97 fe ff ff    	jle    f010e92d <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010ea96:	83 ec 0c             	sub    $0xc,%esp
f010ea99:	68 00 00 40 00       	push   $0x400000
f010ea9e:	e8 ab 2e 02 00       	call   f013194e <alloc_block_BF>
f010eaa3:	83 c4 10             	add    $0x10,%esp
f010eaa6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010eaa9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eaad:	74 17                	je     f010eac6 <test_alloc_block_BF+0x22c>
f010eaaf:	83 ec 04             	sub    $0x4,%esp
f010eab2:	68 a0 7a 13 f0       	push   $0xf0137aa0
f010eab7:	68 66 01 00 00       	push   $0x166
f010eabc:	68 34 73 13 f0       	push   $0xf0137334
f010eac1:	e8 e0 16 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eac6:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010eacb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eace:	75 13                	jne    f010eae3 <test_alloc_block_BF+0x249>
f010ead0:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010ead5:	83 f8 07             	cmp    $0x7,%eax
f010ead8:	75 09                	jne    f010eae3 <test_alloc_block_BF+0x249>
f010eada:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010eadf:	85 c0                	test   %eax,%eax
f010eae1:	74 17                	je     f010eafa <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010eae3:	83 ec 04             	sub    $0x4,%esp
f010eae6:	68 60 78 13 f0       	push   $0xf0137860
f010eaeb:	68 6a 01 00 00       	push   $0x16a
f010eaf0:	68 34 73 13 f0       	push   $0xf0137334
f010eaf5:	e8 ac 16 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010eafa:	83 ec 0c             	sub    $0xc,%esp
f010eafd:	68 00 00 10 00       	push   $0x100000
f010eb02:	e8 47 2e 02 00       	call   f013194e <alloc_block_BF>
f010eb07:	83 c4 10             	add    $0x10,%esp
f010eb0a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010eb0d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eb11:	74 1a                	je     f010eb2d <test_alloc_block_BF+0x293>
f010eb13:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb16:	8b 40 0c             	mov    0xc(%eax),%eax
f010eb19:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010eb1e:	75 0d                	jne    f010eb2d <test_alloc_block_BF+0x293>
f010eb20:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb23:	8b 40 08             	mov    0x8(%eax),%eax
f010eb26:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010eb2b:	74 17                	je     f010eb44 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010eb2d:	83 ec 04             	sub    $0x4,%esp
f010eb30:	68 14 7b 13 f0       	push   $0xf0137b14
f010eb35:	68 72 01 00 00       	push   $0x172
f010eb3a:	68 34 73 13 f0       	push   $0xf0137334
f010eb3f:	e8 62 16 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eb44:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010eb49:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eb4c:	75 13                	jne    f010eb61 <test_alloc_block_BF+0x2c7>
f010eb4e:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010eb53:	83 f8 06             	cmp    $0x6,%eax
f010eb56:	75 09                	jne    f010eb61 <test_alloc_block_BF+0x2c7>
f010eb58:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010eb5d:	85 c0                	test   %eax,%eax
f010eb5f:	74 17                	je     f010eb78 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eb61:	83 ec 04             	sub    $0x4,%esp
f010eb64:	68 58 7b 13 f0       	push   $0xf0137b58
f010eb69:	68 76 01 00 00       	push   $0x176
f010eb6e:	68 34 73 13 f0       	push   $0xf0137334
f010eb73:	e8 2e 16 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010eb78:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010eb7f:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010eb82:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010eb89:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010eb90:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eb97:	83 ec 0c             	sub    $0xc,%esp
f010eb9a:	ff 75 d8             	pushl  -0x28(%ebp)
f010eb9d:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010eba3:	50                   	push   %eax
f010eba4:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010eba7:	50                   	push   %eax
f010eba8:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ebab:	50                   	push   %eax
f010ebac:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010ebb1:	e8 dd 17 00 00       	call   f0110393 <check_list_data>
f010ebb6:	83 c4 20             	add    $0x20,%esp
f010ebb9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ebbc:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ebc0:	74 17                	je     f010ebd9 <test_alloc_block_BF+0x33f>
f010ebc2:	83 ec 04             	sub    $0x4,%esp
f010ebc5:	68 bc 7b 13 f0       	push   $0xf0137bbc
f010ebca:	68 7e 01 00 00       	push   $0x17e
f010ebcf:	68 34 73 13 f0       	push   $0xf0137334
f010ebd4:	e8 cd 15 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ebd9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ebdf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ebe2:	74 17                	je     f010ebfb <test_alloc_block_BF+0x361>
f010ebe4:	83 ec 04             	sub    $0x4,%esp
f010ebe7:	68 08 7c 13 f0       	push   $0xf0137c08
f010ebec:	68 7f 01 00 00       	push   $0x17f
f010ebf1:	68 34 73 13 f0       	push   $0xf0137334
f010ebf6:	e8 ab 15 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010ebfb:	83 ec 0c             	sub    $0xc,%esp
f010ebfe:	68 00 00 10 00       	push   $0x100000
f010ec03:	e8 46 2d 02 00       	call   f013194e <alloc_block_BF>
f010ec08:	83 c4 10             	add    $0x10,%esp
f010ec0b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010ec0e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ec12:	74 1a                	je     f010ec2e <test_alloc_block_BF+0x394>
f010ec14:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec17:	8b 40 0c             	mov    0xc(%eax),%eax
f010ec1a:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010ec1f:	75 0d                	jne    f010ec2e <test_alloc_block_BF+0x394>
f010ec21:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec24:	8b 40 08             	mov    0x8(%eax),%eax
f010ec27:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ec2c:	74 17                	je     f010ec45 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ec2e:	83 ec 04             	sub    $0x4,%esp
f010ec31:	68 14 7b 13 f0       	push   $0xf0137b14
f010ec36:	68 87 01 00 00       	push   $0x187
f010ec3b:	68 34 73 13 f0       	push   $0xf0137334
f010ec40:	e8 61 15 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ec45:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010ec4a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ec4d:	4a                   	dec    %edx
f010ec4e:	39 d0                	cmp    %edx,%eax
f010ec50:	75 13                	jne    f010ec65 <test_alloc_block_BF+0x3cb>
f010ec52:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010ec57:	83 f8 06             	cmp    $0x6,%eax
f010ec5a:	75 09                	jne    f010ec65 <test_alloc_block_BF+0x3cb>
f010ec5c:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010ec61:	85 c0                	test   %eax,%eax
f010ec63:	74 17                	je     f010ec7c <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ec65:	83 ec 04             	sub    $0x4,%esp
f010ec68:	68 58 7b 13 f0       	push   $0xf0137b58
f010ec6d:	68 8b 01 00 00       	push   $0x18b
f010ec72:	68 34 73 13 f0       	push   $0xf0137334
f010ec77:	e8 2a 15 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ec7c:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ec83:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010ec86:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ec8d:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ec94:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ec9b:	83 ec 0c             	sub    $0xc,%esp
f010ec9e:	ff 75 d8             	pushl  -0x28(%ebp)
f010eca1:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010eca7:	50                   	push   %eax
f010eca8:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ecab:	50                   	push   %eax
f010ecac:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ecaf:	50                   	push   %eax
f010ecb0:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010ecb5:	e8 d9 16 00 00       	call   f0110393 <check_list_data>
f010ecba:	83 c4 20             	add    $0x20,%esp
f010ecbd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ecc0:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ecc4:	74 17                	je     f010ecdd <test_alloc_block_BF+0x443>
f010ecc6:	83 ec 04             	sub    $0x4,%esp
f010ecc9:	68 bc 7b 13 f0       	push   $0xf0137bbc
f010ecce:	68 93 01 00 00       	push   $0x193
f010ecd3:	68 34 73 13 f0       	push   $0xf0137334
f010ecd8:	e8 c9 14 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ecdd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ece3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ece6:	74 17                	je     f010ecff <test_alloc_block_BF+0x465>
f010ece8:	83 ec 04             	sub    $0x4,%esp
f010eceb:	68 08 7c 13 f0       	push   $0xf0137c08
f010ecf0:	68 94 01 00 00       	push   $0x194
f010ecf5:	68 34 73 13 f0       	push   $0xf0137334
f010ecfa:	e8 a7 14 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010ecff:	83 ec 0c             	sub    $0xc,%esp
f010ed02:	68 00 0c 00 00       	push   $0xc00
f010ed07:	e8 42 2c 02 00       	call   f013194e <alloc_block_BF>
f010ed0c:	83 c4 10             	add    $0x10,%esp
f010ed0f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010ed12:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed16:	74 1a                	je     f010ed32 <test_alloc_block_BF+0x498>
f010ed18:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed1b:	8b 40 0c             	mov    0xc(%eax),%eax
f010ed1e:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ed23:	75 0d                	jne    f010ed32 <test_alloc_block_BF+0x498>
f010ed25:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed28:	8b 40 08             	mov    0x8(%eax),%eax
f010ed2b:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010ed30:	74 17                	je     f010ed49 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ed32:	83 ec 04             	sub    $0x4,%esp
f010ed35:	68 14 7b 13 f0       	push   $0xf0137b14
f010ed3a:	68 9c 01 00 00       	push   $0x19c
f010ed3f:	68 34 73 13 f0       	push   $0xf0137334
f010ed44:	e8 5d 14 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ed49:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010ed4e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ed51:	83 ea 02             	sub    $0x2,%edx
f010ed54:	39 d0                	cmp    %edx,%eax
f010ed56:	75 13                	jne    f010ed6b <test_alloc_block_BF+0x4d1>
f010ed58:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010ed5d:	83 f8 06             	cmp    $0x6,%eax
f010ed60:	75 09                	jne    f010ed6b <test_alloc_block_BF+0x4d1>
f010ed62:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010ed67:	85 c0                	test   %eax,%eax
f010ed69:	74 17                	je     f010ed82 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ed6b:	83 ec 04             	sub    $0x4,%esp
f010ed6e:	68 58 7b 13 f0       	push   $0xf0137b58
f010ed73:	68 a0 01 00 00       	push   $0x1a0
f010ed78:	68 34 73 13 f0       	push   $0xf0137334
f010ed7d:	e8 24 14 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ed82:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ed89:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010ed8c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010ed93:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010ed9a:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eda1:	83 ec 0c             	sub    $0xc,%esp
f010eda4:	ff 75 d8             	pushl  -0x28(%ebp)
f010eda7:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010edad:	50                   	push   %eax
f010edae:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010edb1:	50                   	push   %eax
f010edb2:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010edb5:	50                   	push   %eax
f010edb6:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010edbb:	e8 d3 15 00 00       	call   f0110393 <check_list_data>
f010edc0:	83 c4 20             	add    $0x20,%esp
f010edc3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010edc6:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010edca:	74 17                	je     f010ede3 <test_alloc_block_BF+0x549>
f010edcc:	83 ec 04             	sub    $0x4,%esp
f010edcf:	68 bc 7b 13 f0       	push   $0xf0137bbc
f010edd4:	68 a8 01 00 00       	push   $0x1a8
f010edd9:	68 34 73 13 f0       	push   $0xf0137334
f010edde:	e8 c3 13 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ede3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ede9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010edec:	74 17                	je     f010ee05 <test_alloc_block_BF+0x56b>
f010edee:	83 ec 04             	sub    $0x4,%esp
f010edf1:	68 08 7c 13 f0       	push   $0xf0137c08
f010edf6:	68 a9 01 00 00       	push   $0x1a9
f010edfb:	68 34 73 13 f0       	push   $0xf0137334
f010ee00:	e8 a1 13 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010ee05:	83 ec 0c             	sub    $0xc,%esp
f010ee08:	68 00 08 00 00       	push   $0x800
f010ee0d:	e8 3c 2b 02 00       	call   f013194e <alloc_block_BF>
f010ee12:	83 c4 10             	add    $0x10,%esp
f010ee15:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010ee18:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee1c:	74 17                	je     f010ee35 <test_alloc_block_BF+0x59b>
f010ee1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee21:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee24:	3d 00 08 00 00       	cmp    $0x800,%eax
f010ee29:	75 0a                	jne    f010ee35 <test_alloc_block_BF+0x59b>
f010ee2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee2e:	8b 40 08             	mov    0x8(%eax),%eax
f010ee31:	85 c0                	test   %eax,%eax
f010ee33:	74 17                	je     f010ee4c <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ee35:	83 ec 04             	sub    $0x4,%esp
f010ee38:	68 14 7b 13 f0       	push   $0xf0137b14
f010ee3d:	68 b1 01 00 00       	push   $0x1b1
f010ee42:	68 34 73 13 f0       	push   $0xf0137334
f010ee47:	e8 5a 13 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ee4c:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010ee51:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ee54:	83 ea 02             	sub    $0x2,%edx
f010ee57:	39 d0                	cmp    %edx,%eax
f010ee59:	75 13                	jne    f010ee6e <test_alloc_block_BF+0x5d4>
f010ee5b:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010ee60:	83 f8 05             	cmp    $0x5,%eax
f010ee63:	75 09                	jne    f010ee6e <test_alloc_block_BF+0x5d4>
f010ee65:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010ee6a:	85 c0                	test   %eax,%eax
f010ee6c:	74 17                	je     f010ee85 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ee6e:	83 ec 04             	sub    $0x4,%esp
f010ee71:	68 58 7b 13 f0       	push   $0xf0137b58
f010ee76:	68 b5 01 00 00       	push   $0x1b5
f010ee7b:	68 34 73 13 f0       	push   $0xf0137334
f010ee80:	e8 21 13 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ee85:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ee8c:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010ee8f:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010ee96:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010ee9d:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eea4:	83 ec 0c             	sub    $0xc,%esp
f010eea7:	ff 75 d8             	pushl  -0x28(%ebp)
f010eeaa:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010eeb0:	50                   	push   %eax
f010eeb1:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010eeb4:	50                   	push   %eax
f010eeb5:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010eeb8:	50                   	push   %eax
f010eeb9:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010eebe:	e8 d0 14 00 00       	call   f0110393 <check_list_data>
f010eec3:	83 c4 20             	add    $0x20,%esp
f010eec6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010eec9:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010eecd:	74 17                	je     f010eee6 <test_alloc_block_BF+0x64c>
f010eecf:	83 ec 04             	sub    $0x4,%esp
f010eed2:	68 bc 7b 13 f0       	push   $0xf0137bbc
f010eed7:	68 bd 01 00 00       	push   $0x1bd
f010eedc:	68 34 73 13 f0       	push   $0xf0137334
f010eee1:	e8 c0 12 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010eee6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010eeec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eeef:	74 17                	je     f010ef08 <test_alloc_block_BF+0x66e>
f010eef1:	83 ec 04             	sub    $0x4,%esp
f010eef4:	68 08 7c 13 f0       	push   $0xf0137c08
f010eef9:	68 be 01 00 00       	push   $0x1be
f010eefe:	68 34 73 13 f0       	push   $0xf0137334
f010ef03:	e8 9e 12 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010ef08:	83 ec 0c             	sub    $0xc,%esp
f010ef0b:	68 54 7c 13 f0       	push   $0xf0137c54
f010ef10:	e8 18 1d ff ff       	call   f0100c2d <cprintf>
f010ef15:	83 c4 10             	add    $0x10,%esp
}
f010ef18:	90                   	nop
f010ef19:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ef1c:	5b                   	pop    %ebx
f010ef1d:	5e                   	pop    %esi
f010ef1e:	5f                   	pop    %edi
f010ef1f:	5d                   	pop    %ebp
f010ef20:	c3                   	ret    

f010ef21 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010ef21:	55                   	push   %ebp
f010ef22:	89 e5                	mov    %esp,%ebp
f010ef24:	57                   	push   %edi
f010ef25:	56                   	push   %esi
f010ef26:	53                   	push   %ebx
f010ef27:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010ef2d:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ef34:	83 ec 0c             	sub    $0xc,%esp
f010ef37:	ff 75 e0             	pushl  -0x20(%ebp)
f010ef3a:	e8 80 24 02 00       	call   f01313bf <initialize_MemBlocksList>
f010ef3f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ef42:	c7 05 d0 9a 65 f0 00 	movl   $0x0,0xf0659ad0
f010ef49:	00 00 00 
f010ef4c:	c7 05 d4 9a 65 f0 00 	movl   $0x0,0xf0659ad4
f010ef53:	00 00 00 
f010ef56:	c7 05 dc 9a 65 f0 00 	movl   $0x0,0xf0659adc
f010ef5d:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010ef60:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ef63:	bb 60 7a 13 f0       	mov    $0xf0137a60,%ebx
f010ef68:	ba 08 00 00 00       	mov    $0x8,%edx
f010ef6d:	89 c7                	mov    %eax,%edi
f010ef6f:	89 de                	mov    %ebx,%esi
f010ef71:	89 d1                	mov    %edx,%ecx
f010ef73:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010ef75:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ef78:	bb c0 7e 13 f0       	mov    $0xf0137ec0,%ebx
f010ef7d:	ba 08 00 00 00       	mov    $0x8,%edx
f010ef82:	89 c7                	mov    %eax,%edi
f010ef84:	89 de                	mov    %ebx,%esi
f010ef86:	89 d1                	mov    %edx,%ecx
f010ef88:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010ef8a:	c7 05 a0 1e 6c f0 00 	movl   $0x0,0xf06c1ea0
f010ef91:	00 00 00 
f010ef94:	c7 05 a4 1e 6c f0 00 	movl   $0x0,0xf06c1ea4
f010ef9b:	00 00 00 
f010ef9e:	c7 05 ac 1e 6c f0 00 	movl   $0x0,0xf06c1eac
f010efa5:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010efa8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010efaf:	e9 5f 01 00 00       	jmp    f010f113 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010efb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efb7:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010efbb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efbe:	c1 e2 04             	shl    $0x4,%edx
f010efc1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010efc4:	01 da                	add    %ebx,%edx
f010efc6:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010efcc:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010efce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efd1:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010efd5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efd8:	c1 e2 04             	shl    $0x4,%edx
f010efdb:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010efde:	01 f2                	add    %esi,%edx
f010efe0:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010efe6:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010efe8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010efec:	0f 85 92 00 00 00    	jne    f010f084 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010eff2:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f010eff7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010effa:	c1 e2 04             	shl    $0x4,%edx
f010effd:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f000:	01 fa                	add    %edi,%edx
f010f002:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f008:	89 02                	mov    %eax,(%edx)
f010f00a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f00d:	c1 e0 04             	shl    $0x4,%eax
f010f010:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f013:	01 d8                	add    %ebx,%eax
f010f015:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f01a:	8b 00                	mov    (%eax),%eax
f010f01c:	85 c0                	test   %eax,%eax
f010f01e:	74 18                	je     f010f038 <test_alloc_block_NF+0x117>
f010f020:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f010f025:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f02b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f02e:	c1 e1 04             	shl    $0x4,%ecx
f010f031:	01 ca                	add    %ecx,%edx
f010f033:	89 50 04             	mov    %edx,0x4(%eax)
f010f036:	eb 13                	jmp    f010f04b <test_alloc_block_NF+0x12a>
f010f038:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f03e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f041:	c1 e2 04             	shl    $0x4,%edx
f010f044:	01 d0                	add    %edx,%eax
f010f046:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f010f04b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f051:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f054:	c1 e2 04             	shl    $0x4,%edx
f010f057:	01 d0                	add    %edx,%eax
f010f059:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f010f05e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f061:	c1 e0 04             	shl    $0x4,%eax
f010f064:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f067:	01 f0                	add    %esi,%eax
f010f069:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f06e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f074:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f079:	40                   	inc    %eax
f010f07a:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
f010f07f:	e9 8c 00 00 00       	jmp    f010f110 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f084:	a1 a4 1e 6c f0       	mov    0xf06c1ea4,%eax
f010f089:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f08c:	c1 e2 04             	shl    $0x4,%edx
f010f08f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f092:	01 fa                	add    %edi,%edx
f010f094:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f09a:	89 02                	mov    %eax,(%edx)
f010f09c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f09f:	c1 e0 04             	shl    $0x4,%eax
f010f0a2:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f0a5:	01 d8                	add    %ebx,%eax
f010f0a7:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f0ac:	8b 00                	mov    (%eax),%eax
f010f0ae:	85 c0                	test   %eax,%eax
f010f0b0:	74 17                	je     f010f0c9 <test_alloc_block_NF+0x1a8>
f010f0b2:	a1 a4 1e 6c f0       	mov    0xf06c1ea4,%eax
f010f0b7:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f0bd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f0c0:	c1 e1 04             	shl    $0x4,%ecx
f010f0c3:	01 ca                	add    %ecx,%edx
f010f0c5:	89 10                	mov    %edx,(%eax)
f010f0c7:	eb 13                	jmp    f010f0dc <test_alloc_block_NF+0x1bb>
f010f0c9:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f0cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0d2:	c1 e2 04             	shl    $0x4,%edx
f010f0d5:	01 d0                	add    %edx,%eax
f010f0d7:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f010f0dc:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f0e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0e5:	c1 e2 04             	shl    $0x4,%edx
f010f0e8:	01 d0                	add    %edx,%eax
f010f0ea:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f010f0ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0f2:	c1 e0 04             	shl    $0x4,%eax
f010f0f5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f0f8:	01 f0                	add    %esi,%eax
f010f0fa:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f0ff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f105:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f10a:	40                   	inc    %eax
f010f10b:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f110:	ff 45 e4             	incl   -0x1c(%ebp)
f010f113:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f117:	0f 8e 97 fe ff ff    	jle    f010efb4 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010f11d:	83 ec 0c             	sub    $0xc,%esp
f010f120:	68 00 00 a0 00       	push   $0xa00000
f010f125:	e8 35 2a 02 00       	call   f0131b5f <alloc_block_NF>
f010f12a:	83 c4 10             	add    $0x10,%esp
f010f12d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010f130:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f134:	74 17                	je     f010f14d <test_alloc_block_NF+0x22c>
f010f136:	83 ec 04             	sub    $0x4,%esp
f010f139:	68 cc 7c 13 f0       	push   $0xf0137ccc
f010f13e:	68 e1 01 00 00       	push   $0x1e1
f010f143:	68 34 73 13 f0       	push   $0xf0137334
f010f148:	e8 59 10 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f14d:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f152:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f155:	75 13                	jne    f010f16a <test_alloc_block_NF+0x249>
f010f157:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f15c:	83 f8 08             	cmp    $0x8,%eax
f010f15f:	75 09                	jne    f010f16a <test_alloc_block_NF+0x249>
f010f161:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f166:	85 c0                	test   %eax,%eax
f010f168:	74 17                	je     f010f181 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f16a:	83 ec 04             	sub    $0x4,%esp
f010f16d:	68 60 78 13 f0       	push   $0xf0137860
f010f172:	68 e5 01 00 00       	push   $0x1e5
f010f177:	68 34 73 13 f0       	push   $0xf0137334
f010f17c:	e8 25 10 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010f181:	83 ec 0c             	sub    $0xc,%esp
f010f184:	68 00 28 00 00       	push   $0x2800
f010f189:	e8 d1 29 02 00       	call   f0131b5f <alloc_block_NF>
f010f18e:	83 c4 10             	add    $0x10,%esp
f010f191:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010f194:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f198:	74 1a                	je     f010f1b4 <test_alloc_block_NF+0x293>
f010f19a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f19d:	8b 40 0c             	mov    0xc(%eax),%eax
f010f1a0:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010f1a5:	75 0d                	jne    f010f1b4 <test_alloc_block_NF+0x293>
f010f1a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1aa:	8b 40 08             	mov    0x8(%eax),%eax
f010f1ad:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f1b2:	74 17                	je     f010f1cb <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f1b4:	83 ec 04             	sub    $0x4,%esp
f010f1b7:	68 40 7d 13 f0       	push   $0xf0137d40
f010f1bc:	68 ed 01 00 00       	push   $0x1ed
f010f1c1:	68 34 73 13 f0       	push   $0xf0137334
f010f1c6:	e8 db 0f ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f1cb:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f1d0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f1d3:	75 13                	jne    f010f1e8 <test_alloc_block_NF+0x2c7>
f010f1d5:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f1da:	83 f8 07             	cmp    $0x7,%eax
f010f1dd:	75 09                	jne    f010f1e8 <test_alloc_block_NF+0x2c7>
f010f1df:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f1e4:	85 c0                	test   %eax,%eax
f010f1e6:	74 17                	je     f010f1ff <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f1e8:	83 ec 04             	sub    $0x4,%esp
f010f1eb:	68 84 7d 13 f0       	push   $0xf0137d84
f010f1f0:	68 f1 01 00 00       	push   $0x1f1
f010f1f5:	68 34 73 13 f0       	push   $0xf0137334
f010f1fa:	e8 a7 0f ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f1ff:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f206:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010f209:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f210:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f217:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f21e:	83 ec 0c             	sub    $0xc,%esp
f010f221:	ff 75 d8             	pushl  -0x28(%ebp)
f010f224:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f22a:	50                   	push   %eax
f010f22b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f22e:	50                   	push   %eax
f010f22f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f232:	50                   	push   %eax
f010f233:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010f238:	e8 56 11 00 00       	call   f0110393 <check_list_data>
f010f23d:	83 c4 20             	add    $0x20,%esp
f010f240:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f243:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f247:	74 17                	je     f010f260 <test_alloc_block_NF+0x33f>
f010f249:	83 ec 04             	sub    $0x4,%esp
f010f24c:	68 e8 7d 13 f0       	push   $0xf0137de8
f010f251:	68 f9 01 00 00       	push   $0x1f9
f010f256:	68 34 73 13 f0       	push   $0xf0137334
f010f25b:	e8 46 0f ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f260:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f266:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f269:	74 17                	je     f010f282 <test_alloc_block_NF+0x361>
f010f26b:	83 ec 04             	sub    $0x4,%esp
f010f26e:	68 34 7e 13 f0       	push   $0xf0137e34
f010f273:	68 fa 01 00 00       	push   $0x1fa
f010f278:	68 34 73 13 f0       	push   $0xf0137334
f010f27d:	e8 24 0f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010f282:	83 ec 0c             	sub    $0xc,%esp
f010f285:	68 00 00 20 00       	push   $0x200000
f010f28a:	e8 d0 28 02 00       	call   f0131b5f <alloc_block_NF>
f010f28f:	83 c4 10             	add    $0x10,%esp
f010f292:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010f295:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f299:	74 1a                	je     f010f2b5 <test_alloc_block_NF+0x394>
f010f29b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f29e:	8b 40 0c             	mov    0xc(%eax),%eax
f010f2a1:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f2a6:	75 0d                	jne    f010f2b5 <test_alloc_block_NF+0x394>
f010f2a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2ab:	8b 40 08             	mov    0x8(%eax),%eax
f010f2ae:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f2b3:	74 17                	je     f010f2cc <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f2b5:	83 ec 04             	sub    $0x4,%esp
f010f2b8:	68 40 7d 13 f0       	push   $0xf0137d40
f010f2bd:	68 03 02 00 00       	push   $0x203
f010f2c2:	68 34 73 13 f0       	push   $0xf0137334
f010f2c7:	e8 da 0e ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f2cc:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f2d1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f2d4:	75 13                	jne    f010f2e9 <test_alloc_block_NF+0x3c8>
f010f2d6:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f2db:	83 f8 06             	cmp    $0x6,%eax
f010f2de:	75 09                	jne    f010f2e9 <test_alloc_block_NF+0x3c8>
f010f2e0:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f2e5:	85 c0                	test   %eax,%eax
f010f2e7:	74 17                	je     f010f300 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f2e9:	83 ec 04             	sub    $0x4,%esp
f010f2ec:	68 84 7d 13 f0       	push   $0xf0137d84
f010f2f1:	68 07 02 00 00       	push   $0x207
f010f2f6:	68 34 73 13 f0       	push   $0xf0137334
f010f2fb:	e8 a6 0e ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f300:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f307:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f30a:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010f311:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010f318:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f31f:	83 ec 0c             	sub    $0xc,%esp
f010f322:	ff 75 d8             	pushl  -0x28(%ebp)
f010f325:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f32b:	50                   	push   %eax
f010f32c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f32f:	50                   	push   %eax
f010f330:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f333:	50                   	push   %eax
f010f334:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010f339:	e8 55 10 00 00       	call   f0110393 <check_list_data>
f010f33e:	83 c4 20             	add    $0x20,%esp
f010f341:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f344:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f348:	74 17                	je     f010f361 <test_alloc_block_NF+0x440>
f010f34a:	83 ec 04             	sub    $0x4,%esp
f010f34d:	68 e8 7d 13 f0       	push   $0xf0137de8
f010f352:	68 0f 02 00 00       	push   $0x20f
f010f357:	68 34 73 13 f0       	push   $0xf0137334
f010f35c:	e8 45 0e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f361:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f367:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f36a:	74 17                	je     f010f383 <test_alloc_block_NF+0x462>
f010f36c:	83 ec 04             	sub    $0x4,%esp
f010f36f:	68 34 7e 13 f0       	push   $0xf0137e34
f010f374:	68 10 02 00 00       	push   $0x210
f010f379:	68 34 73 13 f0       	push   $0xf0137334
f010f37e:	e8 23 0e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010f383:	83 ec 0c             	sub    $0xc,%esp
f010f386:	68 00 00 08 00       	push   $0x80000
f010f38b:	e8 cf 27 02 00       	call   f0131b5f <alloc_block_NF>
f010f390:	83 c4 10             	add    $0x10,%esp
f010f393:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010f396:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f39a:	74 1a                	je     f010f3b6 <test_alloc_block_NF+0x495>
f010f39c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f39f:	8b 40 0c             	mov    0xc(%eax),%eax
f010f3a2:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010f3a7:	75 0d                	jne    f010f3b6 <test_alloc_block_NF+0x495>
f010f3a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f3ac:	8b 40 08             	mov    0x8(%eax),%eax
f010f3af:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f3b4:	74 17                	je     f010f3cd <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f3b6:	83 ec 04             	sub    $0x4,%esp
f010f3b9:	68 40 7d 13 f0       	push   $0xf0137d40
f010f3be:	68 19 02 00 00       	push   $0x219
f010f3c3:	68 34 73 13 f0       	push   $0xf0137334
f010f3c8:	e8 d9 0d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f3cd:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f3d2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f3d5:	4a                   	dec    %edx
f010f3d6:	39 d0                	cmp    %edx,%eax
f010f3d8:	75 13                	jne    f010f3ed <test_alloc_block_NF+0x4cc>
f010f3da:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f3df:	83 f8 06             	cmp    $0x6,%eax
f010f3e2:	75 09                	jne    f010f3ed <test_alloc_block_NF+0x4cc>
f010f3e4:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f3e9:	85 c0                	test   %eax,%eax
f010f3eb:	74 17                	je     f010f404 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f3ed:	83 ec 04             	sub    $0x4,%esp
f010f3f0:	68 84 7d 13 f0       	push   $0xf0137d84
f010f3f5:	68 1d 02 00 00       	push   $0x21d
f010f3fa:	68 34 73 13 f0       	push   $0xf0137334
f010f3ff:	e8 a2 0d ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f404:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f40b:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f40e:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010f415:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010f41c:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f423:	83 ec 0c             	sub    $0xc,%esp
f010f426:	ff 75 d8             	pushl  -0x28(%ebp)
f010f429:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f42f:	50                   	push   %eax
f010f430:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f433:	50                   	push   %eax
f010f434:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f437:	50                   	push   %eax
f010f438:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010f43d:	e8 51 0f 00 00       	call   f0110393 <check_list_data>
f010f442:	83 c4 20             	add    $0x20,%esp
f010f445:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f448:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f44c:	74 17                	je     f010f465 <test_alloc_block_NF+0x544>
f010f44e:	83 ec 04             	sub    $0x4,%esp
f010f451:	68 e8 7d 13 f0       	push   $0xf0137de8
f010f456:	68 25 02 00 00       	push   $0x225
f010f45b:	68 34 73 13 f0       	push   $0xf0137334
f010f460:	e8 41 0d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f465:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f46b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f46e:	74 17                	je     f010f487 <test_alloc_block_NF+0x566>
f010f470:	83 ec 04             	sub    $0x4,%esp
f010f473:	68 34 7e 13 f0       	push   $0xf0137e34
f010f478:	68 26 02 00 00       	push   $0x226
f010f47d:	68 34 73 13 f0       	push   $0xf0137334
f010f482:	e8 1f 0d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010f487:	83 ec 0c             	sub    $0xc,%esp
f010f48a:	68 00 fc 07 00       	push   $0x7fc00
f010f48f:	e8 cb 26 02 00       	call   f0131b5f <alloc_block_NF>
f010f494:	83 c4 10             	add    $0x10,%esp
f010f497:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010f49a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f49e:	74 1a                	je     f010f4ba <test_alloc_block_NF+0x599>
f010f4a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4a3:	8b 40 0c             	mov    0xc(%eax),%eax
f010f4a6:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010f4ab:	75 0d                	jne    f010f4ba <test_alloc_block_NF+0x599>
f010f4ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4b0:	8b 40 08             	mov    0x8(%eax),%eax
f010f4b3:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010f4b8:	74 17                	je     f010f4d1 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f4ba:	83 ec 04             	sub    $0x4,%esp
f010f4bd:	68 40 7d 13 f0       	push   $0xf0137d40
f010f4c2:	68 2f 02 00 00       	push   $0x22f
f010f4c7:	68 34 73 13 f0       	push   $0xf0137334
f010f4cc:	e8 d5 0c ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f4d1:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f4d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f4d9:	83 ea 02             	sub    $0x2,%edx
f010f4dc:	39 d0                	cmp    %edx,%eax
f010f4de:	75 13                	jne    f010f4f3 <test_alloc_block_NF+0x5d2>
f010f4e0:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f4e5:	83 f8 06             	cmp    $0x6,%eax
f010f4e8:	75 09                	jne    f010f4f3 <test_alloc_block_NF+0x5d2>
f010f4ea:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f4ef:	85 c0                	test   %eax,%eax
f010f4f1:	74 17                	je     f010f50a <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f4f3:	83 ec 04             	sub    $0x4,%esp
f010f4f6:	68 84 7d 13 f0       	push   $0xf0137d84
f010f4fb:	68 33 02 00 00       	push   $0x233
f010f500:	68 34 73 13 f0       	push   $0xf0137334
f010f505:	e8 9c 0c ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f50a:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f511:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f514:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010f51b:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010f522:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f529:	83 ec 0c             	sub    $0xc,%esp
f010f52c:	ff 75 d8             	pushl  -0x28(%ebp)
f010f52f:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f535:	50                   	push   %eax
f010f536:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f539:	50                   	push   %eax
f010f53a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f53d:	50                   	push   %eax
f010f53e:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010f543:	e8 4b 0e 00 00       	call   f0110393 <check_list_data>
f010f548:	83 c4 20             	add    $0x20,%esp
f010f54b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f54e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f552:	74 17                	je     f010f56b <test_alloc_block_NF+0x64a>
f010f554:	83 ec 04             	sub    $0x4,%esp
f010f557:	68 e8 7d 13 f0       	push   $0xf0137de8
f010f55c:	68 3b 02 00 00       	push   $0x23b
f010f561:	68 34 73 13 f0       	push   $0xf0137334
f010f566:	e8 3b 0c ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f56b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f571:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f574:	74 17                	je     f010f58d <test_alloc_block_NF+0x66c>
f010f576:	83 ec 04             	sub    $0x4,%esp
f010f579:	68 34 7e 13 f0       	push   $0xf0137e34
f010f57e:	68 3c 02 00 00       	push   $0x23c
f010f583:	68 34 73 13 f0       	push   $0xf0137334
f010f588:	e8 19 0c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010f58d:	83 ec 0c             	sub    $0xc,%esp
f010f590:	68 00 0c 00 00       	push   $0xc00
f010f595:	e8 c5 25 02 00       	call   f0131b5f <alloc_block_NF>
f010f59a:	83 c4 10             	add    $0x10,%esp
f010f59d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010f5a0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5a4:	74 17                	je     f010f5bd <test_alloc_block_NF+0x69c>
f010f5a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5a9:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5ac:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f5b1:	75 0a                	jne    f010f5bd <test_alloc_block_NF+0x69c>
f010f5b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5b6:	8b 40 08             	mov    0x8(%eax),%eax
f010f5b9:	85 c0                	test   %eax,%eax
f010f5bb:	74 17                	je     f010f5d4 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f5bd:	83 ec 04             	sub    $0x4,%esp
f010f5c0:	68 40 7d 13 f0       	push   $0xf0137d40
f010f5c5:	68 45 02 00 00       	push   $0x245
f010f5ca:	68 34 73 13 f0       	push   $0xf0137334
f010f5cf:	e8 d2 0b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f5d4:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f5d9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f5dc:	83 ea 02             	sub    $0x2,%edx
f010f5df:	39 d0                	cmp    %edx,%eax
f010f5e1:	75 13                	jne    f010f5f6 <test_alloc_block_NF+0x6d5>
f010f5e3:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f5e8:	83 f8 05             	cmp    $0x5,%eax
f010f5eb:	75 09                	jne    f010f5f6 <test_alloc_block_NF+0x6d5>
f010f5ed:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f5f2:	85 c0                	test   %eax,%eax
f010f5f4:	74 17                	je     f010f60d <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f5f6:	83 ec 04             	sub    $0x4,%esp
f010f5f9:	68 84 7d 13 f0       	push   $0xf0137d84
f010f5fe:	68 49 02 00 00       	push   $0x249
f010f603:	68 34 73 13 f0       	push   $0xf0137334
f010f608:	e8 99 0b ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f60d:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f614:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010f617:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010f61e:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010f625:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f62c:	83 ec 0c             	sub    $0xc,%esp
f010f62f:	ff 75 d8             	pushl  -0x28(%ebp)
f010f632:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f638:	50                   	push   %eax
f010f639:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f63c:	50                   	push   %eax
f010f63d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f640:	50                   	push   %eax
f010f641:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010f646:	e8 48 0d 00 00       	call   f0110393 <check_list_data>
f010f64b:	83 c4 20             	add    $0x20,%esp
f010f64e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f651:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f655:	74 17                	je     f010f66e <test_alloc_block_NF+0x74d>
f010f657:	83 ec 04             	sub    $0x4,%esp
f010f65a:	68 e8 7d 13 f0       	push   $0xf0137de8
f010f65f:	68 51 02 00 00       	push   $0x251
f010f664:	68 34 73 13 f0       	push   $0xf0137334
f010f669:	e8 38 0b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f66e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f674:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f677:	74 17                	je     f010f690 <test_alloc_block_NF+0x76f>
f010f679:	83 ec 04             	sub    $0x4,%esp
f010f67c:	68 34 7e 13 f0       	push   $0xf0137e34
f010f681:	68 52 02 00 00       	push   $0x252
f010f686:	68 34 73 13 f0       	push   $0xf0137334
f010f68b:	e8 16 0b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010f690:	83 ec 0c             	sub    $0xc,%esp
f010f693:	68 00 04 00 00       	push   $0x400
f010f698:	e8 c2 24 02 00       	call   f0131b5f <alloc_block_NF>
f010f69d:	83 c4 10             	add    $0x10,%esp
f010f6a0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010f6a3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f6a7:	74 1a                	je     f010f6c3 <test_alloc_block_NF+0x7a2>
f010f6a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6ac:	8b 40 0c             	mov    0xc(%eax),%eax
f010f6af:	3d 00 04 00 00       	cmp    $0x400,%eax
f010f6b4:	75 0d                	jne    f010f6c3 <test_alloc_block_NF+0x7a2>
f010f6b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6b9:	8b 40 08             	mov    0x8(%eax),%eax
f010f6bc:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010f6c1:	74 17                	je     f010f6da <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f6c3:	83 ec 04             	sub    $0x4,%esp
f010f6c6:	68 40 7d 13 f0       	push   $0xf0137d40
f010f6cb:	68 5b 02 00 00       	push   $0x25b
f010f6d0:	68 34 73 13 f0       	push   $0xf0137334
f010f6d5:	e8 cc 0a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f6da:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f6df:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f6e2:	83 ea 03             	sub    $0x3,%edx
f010f6e5:	39 d0                	cmp    %edx,%eax
f010f6e7:	75 13                	jne    f010f6fc <test_alloc_block_NF+0x7db>
f010f6e9:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f6ee:	83 f8 05             	cmp    $0x5,%eax
f010f6f1:	75 09                	jne    f010f6fc <test_alloc_block_NF+0x7db>
f010f6f3:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f6f8:	85 c0                	test   %eax,%eax
f010f6fa:	74 17                	je     f010f713 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f6fc:	83 ec 04             	sub    $0x4,%esp
f010f6ff:	68 84 7d 13 f0       	push   $0xf0137d84
f010f704:	68 5f 02 00 00       	push   $0x25f
f010f709:	68 34 73 13 f0       	push   $0xf0137334
f010f70e:	e8 93 0a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f713:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f71a:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010f71d:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010f724:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010f72b:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f732:	83 ec 0c             	sub    $0xc,%esp
f010f735:	ff 75 d8             	pushl  -0x28(%ebp)
f010f738:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f73e:	50                   	push   %eax
f010f73f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f742:	50                   	push   %eax
f010f743:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f746:	50                   	push   %eax
f010f747:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010f74c:	e8 42 0c 00 00       	call   f0110393 <check_list_data>
f010f751:	83 c4 20             	add    $0x20,%esp
f010f754:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f757:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f75b:	74 17                	je     f010f774 <test_alloc_block_NF+0x853>
f010f75d:	83 ec 04             	sub    $0x4,%esp
f010f760:	68 e8 7d 13 f0       	push   $0xf0137de8
f010f765:	68 67 02 00 00       	push   $0x267
f010f76a:	68 34 73 13 f0       	push   $0xf0137334
f010f76f:	e8 32 0a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f774:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f77a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f77d:	74 17                	je     f010f796 <test_alloc_block_NF+0x875>
f010f77f:	83 ec 04             	sub    $0x4,%esp
f010f782:	68 34 7e 13 f0       	push   $0xf0137e34
f010f787:	68 68 02 00 00       	push   $0x268
f010f78c:	68 34 73 13 f0       	push   $0xf0137334
f010f791:	e8 10 0a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010f796:	83 ec 0c             	sub    $0xc,%esp
f010f799:	68 80 7e 13 f0       	push   $0xf0137e80
f010f79e:	e8 8a 14 ff ff       	call   f0100c2d <cprintf>
f010f7a3:	83 c4 10             	add    $0x10,%esp

}
f010f7a6:	90                   	nop
f010f7a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f7aa:	5b                   	pop    %ebx
f010f7ab:	5e                   	pop    %esi
f010f7ac:	5f                   	pop    %edi
f010f7ad:	5d                   	pop    %ebp
f010f7ae:	c3                   	ret    

f010f7af <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010f7af:	55                   	push   %ebp
f010f7b0:	89 e5                	mov    %esp,%ebp
f010f7b2:	57                   	push   %edi
f010f7b3:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010f7b9:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f7c0:	83 ec 0c             	sub    $0xc,%esp
f010f7c3:	ff 75 f4             	pushl  -0xc(%ebp)
f010f7c6:	e8 f4 1b 02 00       	call   f01313bf <initialize_MemBlocksList>
f010f7cb:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f7ce:	c7 05 d0 9a 65 f0 00 	movl   $0x0,0xf0659ad0
f010f7d5:	00 00 00 
f010f7d8:	c7 05 d4 9a 65 f0 00 	movl   $0x0,0xf0659ad4
f010f7df:	00 00 00 
f010f7e2:	c7 05 dc 9a 65 f0 00 	movl   $0x0,0xf0659adc
f010f7e9:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010f7ec:	c7 05 a0 1e 6c f0 00 	movl   $0x0,0xf06c1ea0
f010f7f3:	00 00 00 
f010f7f6:	c7 05 a4 1e 6c f0 00 	movl   $0x0,0xf06c1ea4
f010f7fd:	00 00 00 
f010f800:	c7 05 ac 1e 6c f0 00 	movl   $0x0,0xf06c1eac
f010f807:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010f80a:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010f80d:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f812:	b8 00 00 00 00       	mov    $0x0,%eax
f010f817:	89 d7                	mov    %edx,%edi
f010f819:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010f81b:	8d 55 98             	lea    -0x68(%ebp),%edx
f010f81e:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f823:	b8 00 00 00 00       	mov    $0x0,%eax
f010f828:	89 d7                	mov    %edx,%edi
f010f82a:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010f82c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010f833:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010f83a:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010f841:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f844:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010f84b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f84c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f84f:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f856:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f857:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f85a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f85e:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010f861:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f864:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f868:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010f86b:	83 ec 0c             	sub    $0xc,%esp
f010f86e:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010f871:	50                   	push   %eax
f010f872:	e8 b5 28 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f010f877:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010f87a:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f87f:	85 c0                	test   %eax,%eax
f010f881:	75 14                	jne    f010f897 <test_insert_sorted_with_merge_freeList+0xe8>
f010f883:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f888:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f88b:	75 0a                	jne    f010f897 <test_insert_sorted_with_merge_freeList+0xe8>
f010f88d:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f892:	83 f8 01             	cmp    $0x1,%eax
f010f895:	74 17                	je     f010f8ae <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f897:	83 ec 04             	sub    $0x4,%esp
f010f89a:	68 e0 7e 13 f0       	push   $0xf0137ee0
f010f89f:	68 88 02 00 00       	push   $0x288
f010f8a4:	68 34 73 13 f0       	push   $0xf0137334
f010f8a9:	e8 f8 08 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the free list content
	size = 0;
f010f8ae:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010f8b5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f8bc:	83 ec 0c             	sub    $0xc,%esp
f010f8bf:	ff 75 f0             	pushl  -0x10(%ebp)
f010f8c2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f8c5:	50                   	push   %eax
f010f8c6:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f8c9:	50                   	push   %eax
f010f8ca:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f8cd:	50                   	push   %eax
f010f8ce:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010f8d3:	e8 bb 0a 00 00       	call   f0110393 <check_list_data>
f010f8d8:	83 c4 20             	add    $0x20,%esp
f010f8db:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f8de:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f8e2:	74 17                	je     f010f8fb <test_insert_sorted_with_merge_freeList+0x14c>
f010f8e4:	83 ec 04             	sub    $0x4,%esp
f010f8e7:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010f8ec:	68 8e 02 00 00       	push   $0x28e
f010f8f1:	68 34 73 13 f0       	push   $0xf0137334
f010f8f6:	e8 ab 08 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f8fb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f8fe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f901:	74 17                	je     f010f91a <test_insert_sorted_with_merge_freeList+0x16b>
f010f903:	83 ec 04             	sub    $0x4,%esp
f010f906:	68 a0 7f 13 f0       	push   $0xf0137fa0
f010f90b:	68 8f 02 00 00       	push   $0x28f
f010f910:	68 34 73 13 f0       	push   $0xf0137334
f010f915:	e8 8c 08 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010f91a:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010f921:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f924:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010f92b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010f92c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f92f:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010f936:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f937:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f93a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f93e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010f944:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f947:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f94b:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010f94e:	83 ec 0c             	sub    $0xc,%esp
f010f951:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010f957:	50                   	push   %eax
f010f958:	e8 cf 27 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f010f95d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010f960:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010f965:	85 c0                	test   %eax,%eax
f010f967:	75 14                	jne    f010f97d <test_insert_sorted_with_merge_freeList+0x1ce>
f010f969:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010f96e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f971:	75 0a                	jne    f010f97d <test_insert_sorted_with_merge_freeList+0x1ce>
f010f973:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010f978:	83 f8 02             	cmp    $0x2,%eax
f010f97b:	74 17                	je     f010f994 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f97d:	83 ec 04             	sub    $0x4,%esp
f010f980:	68 e0 7e 13 f0       	push   $0xf0137ee0
f010f985:	68 9e 02 00 00       	push   $0x29e
f010f98a:	68 34 73 13 f0       	push   $0xf0137334
f010f98f:	e8 12 08 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f994:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010f99b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f9a2:	83 ec 0c             	sub    $0xc,%esp
f010f9a5:	ff 75 f0             	pushl  -0x10(%ebp)
f010f9a8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9ab:	50                   	push   %eax
f010f9ac:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f9af:	50                   	push   %eax
f010f9b0:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f9b3:	50                   	push   %eax
f010f9b4:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010f9b9:	e8 d5 09 00 00       	call   f0110393 <check_list_data>
f010f9be:	83 c4 20             	add    $0x20,%esp
f010f9c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f9c4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f9c8:	74 17                	je     f010f9e1 <test_insert_sorted_with_merge_freeList+0x232>
f010f9ca:	83 ec 04             	sub    $0x4,%esp
f010f9cd:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010f9d2:	68 a4 02 00 00       	push   $0x2a4
f010f9d7:	68 34 73 13 f0       	push   $0xf0137334
f010f9dc:	e8 c5 07 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f9e1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f9e4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f9e7:	74 17                	je     f010fa00 <test_insert_sorted_with_merge_freeList+0x251>
f010f9e9:	83 ec 04             	sub    $0x4,%esp
f010f9ec:	68 a0 7f 13 f0       	push   $0xf0137fa0
f010f9f1:	68 a5 02 00 00       	push   $0x2a5
f010f9f6:	68 34 73 13 f0       	push   $0xf0137334
f010f9fb:	e8 a6 07 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010fa00:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010fa07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fa0a:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010fa11:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010fa12:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fa15:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010fa1c:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fa1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fa20:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fa24:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010fa2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fa2d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fa31:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010fa37:	83 ec 0c             	sub    $0xc,%esp
f010fa3a:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010fa40:	50                   	push   %eax
f010fa41:	e8 e6 26 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f010fa46:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010fa49:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010fa4e:	85 c0                	test   %eax,%eax
f010fa50:	75 14                	jne    f010fa66 <test_insert_sorted_with_merge_freeList+0x2b7>
f010fa52:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010fa57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fa5a:	75 0a                	jne    f010fa66 <test_insert_sorted_with_merge_freeList+0x2b7>
f010fa5c:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010fa61:	83 f8 03             	cmp    $0x3,%eax
f010fa64:	74 17                	je     f010fa7d <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa66:	83 ec 04             	sub    $0x4,%esp
f010fa69:	68 e0 7e 13 f0       	push   $0xf0137ee0
f010fa6e:	68 b4 02 00 00       	push   $0x2b4
f010fa73:	68 34 73 13 f0       	push   $0xf0137334
f010fa78:	e8 29 07 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fa7d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010fa84:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fa8b:	83 ec 0c             	sub    $0xc,%esp
f010fa8e:	ff 75 f0             	pushl  -0x10(%ebp)
f010fa91:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa94:	50                   	push   %eax
f010fa95:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fa98:	50                   	push   %eax
f010fa99:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fa9c:	50                   	push   %eax
f010fa9d:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010faa2:	e8 ec 08 00 00       	call   f0110393 <check_list_data>
f010faa7:	83 c4 20             	add    $0x20,%esp
f010faaa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010faad:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fab1:	74 17                	je     f010faca <test_insert_sorted_with_merge_freeList+0x31b>
f010fab3:	83 ec 04             	sub    $0x4,%esp
f010fab6:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010fabb:	68 ba 02 00 00       	push   $0x2ba
f010fac0:	68 34 73 13 f0       	push   $0xf0137334
f010fac5:	e8 dc 06 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010faca:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010facd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fad0:	74 17                	je     f010fae9 <test_insert_sorted_with_merge_freeList+0x33a>
f010fad2:	83 ec 04             	sub    $0x4,%esp
f010fad5:	68 a0 7f 13 f0       	push   $0xf0137fa0
f010fada:	68 bb 02 00 00       	push   $0x2bb
f010fadf:	68 34 73 13 f0       	push   $0xf0137334
f010fae4:	e8 bd 06 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010fae9:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010faf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010faf3:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010fafa:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010fafb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fafe:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010fb05:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fb06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb09:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fb0d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010fb13:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb16:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fb1a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010fb20:	83 ec 0c             	sub    $0xc,%esp
f010fb23:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010fb29:	50                   	push   %eax
f010fb2a:	e8 fd 25 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f010fb2f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fb32:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010fb37:	85 c0                	test   %eax,%eax
f010fb39:	75 14                	jne    f010fb4f <test_insert_sorted_with_merge_freeList+0x3a0>
f010fb3b:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010fb40:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fb43:	75 0a                	jne    f010fb4f <test_insert_sorted_with_merge_freeList+0x3a0>
f010fb45:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010fb4a:	83 f8 04             	cmp    $0x4,%eax
f010fb4d:	74 17                	je     f010fb66 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb4f:	83 ec 04             	sub    $0x4,%esp
f010fb52:	68 e0 7e 13 f0       	push   $0xf0137ee0
f010fb57:	68 ca 02 00 00       	push   $0x2ca
f010fb5c:	68 34 73 13 f0       	push   $0xf0137334
f010fb61:	e8 40 06 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fb66:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fb6d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fb74:	83 ec 0c             	sub    $0xc,%esp
f010fb77:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb7a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fb7d:	50                   	push   %eax
f010fb7e:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fb81:	50                   	push   %eax
f010fb82:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fb85:	50                   	push   %eax
f010fb86:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010fb8b:	e8 03 08 00 00       	call   f0110393 <check_list_data>
f010fb90:	83 c4 20             	add    $0x20,%esp
f010fb93:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fb96:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fb9a:	74 17                	je     f010fbb3 <test_insert_sorted_with_merge_freeList+0x404>
f010fb9c:	83 ec 04             	sub    $0x4,%esp
f010fb9f:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010fba4:	68 d0 02 00 00       	push   $0x2d0
f010fba9:	68 34 73 13 f0       	push   $0xf0137334
f010fbae:	e8 f3 05 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fbb3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fbb6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fbb9:	74 17                	je     f010fbd2 <test_insert_sorted_with_merge_freeList+0x423>
f010fbbb:	83 ec 04             	sub    $0x4,%esp
f010fbbe:	68 a0 7f 13 f0       	push   $0xf0137fa0
f010fbc3:	68 d1 02 00 00       	push   $0x2d1
f010fbc8:	68 34 73 13 f0       	push   $0xf0137334
f010fbcd:	e8 d4 05 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f010fbd2:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f010fbd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fbdc:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f010fbe3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f010fbe4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fbe7:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f010fbee:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fbef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fbf2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fbf6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f010fbfc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fbff:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fc03:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f010fc09:	83 ec 0c             	sub    $0xc,%esp
f010fc0c:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f010fc12:	50                   	push   %eax
f010fc13:	e8 14 25 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f010fc18:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fc1b:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010fc20:	85 c0                	test   %eax,%eax
f010fc22:	75 17                	jne    f010fc3b <test_insert_sorted_with_merge_freeList+0x48c>
f010fc24:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010fc29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fc2c:	42                   	inc    %edx
f010fc2d:	39 d0                	cmp    %edx,%eax
f010fc2f:	75 0a                	jne    f010fc3b <test_insert_sorted_with_merge_freeList+0x48c>
f010fc31:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010fc36:	83 f8 04             	cmp    $0x4,%eax
f010fc39:	74 17                	je     f010fc52 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc3b:	83 ec 04             	sub    $0x4,%esp
f010fc3e:	68 e0 7e 13 f0       	push   $0xf0137ee0
f010fc43:	68 e3 02 00 00       	push   $0x2e3
f010fc48:	68 34 73 13 f0       	push   $0xf0137334
f010fc4d:	e8 54 05 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fc52:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fc59:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010fc60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc63:	8d 50 ff             	lea    -0x1(%eax),%edx
f010fc66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc69:	48                   	dec    %eax
f010fc6a:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fc6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc71:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fc75:	01 c8                	add    %ecx,%eax
f010fc77:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fc7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc7e:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fc85:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fc86:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc89:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fc90:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fc91:	83 ec 0c             	sub    $0xc,%esp
f010fc94:	ff 75 f0             	pushl  -0x10(%ebp)
f010fc97:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fc9a:	50                   	push   %eax
f010fc9b:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fc9e:	50                   	push   %eax
f010fc9f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fca2:	50                   	push   %eax
f010fca3:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010fca8:	e8 e6 06 00 00       	call   f0110393 <check_list_data>
f010fcad:	83 c4 20             	add    $0x20,%esp
f010fcb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fcb3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fcb7:	74 17                	je     f010fcd0 <test_insert_sorted_with_merge_freeList+0x521>
f010fcb9:	83 ec 04             	sub    $0x4,%esp
f010fcbc:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010fcc1:	68 ec 02 00 00       	push   $0x2ec
f010fcc6:	68 34 73 13 f0       	push   $0xf0137334
f010fccb:	e8 d6 04 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fcd0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fcd3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fcd6:	74 17                	je     f010fcef <test_insert_sorted_with_merge_freeList+0x540>
f010fcd8:	83 ec 04             	sub    $0x4,%esp
f010fcdb:	68 a0 7f 13 f0       	push   $0xf0137fa0
f010fce0:	68 ed 02 00 00       	push   $0x2ed
f010fce5:	68 34 73 13 f0       	push   $0xf0137334
f010fcea:	e8 b7 04 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fcef:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fcf6:	83 ec 0c             	sub    $0xc,%esp
f010fcf9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fcfc:	50                   	push   %eax
f010fcfd:	e8 5d 07 00 00       	call   f011045f <check_avaliable_list_data>
f010fd02:	83 c4 10             	add    $0x10,%esp
f010fd05:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fd08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fd0b:	8d 50 01             	lea    0x1(%eax),%edx
f010fd0e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd11:	39 c2                	cmp    %eax,%edx
f010fd13:	74 17                	je     f010fd2c <test_insert_sorted_with_merge_freeList+0x57d>
f010fd15:	83 ec 04             	sub    $0x4,%esp
f010fd18:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fd1d:	68 f2 02 00 00       	push   $0x2f2
f010fd22:	68 34 73 13 f0       	push   $0xf0137334
f010fd27:	e8 7a 04 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fd2c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd30:	74 17                	je     f010fd49 <test_insert_sorted_with_merge_freeList+0x59a>
f010fd32:	83 ec 04             	sub    $0x4,%esp
f010fd35:	68 4c 80 13 f0       	push   $0xf013804c
f010fd3a:	68 f3 02 00 00       	push   $0x2f3
f010fd3f:	68 34 73 13 f0       	push   $0xf0137334
f010fd44:	e8 5d 04 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f010fd49:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f010fd50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd53:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f010fd5a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010fd5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd5e:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010fd65:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fd66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd69:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fd6d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f010fd73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd76:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fd7a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f010fd80:	83 ec 0c             	sub    $0xc,%esp
f010fd83:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010fd89:	50                   	push   %eax
f010fd8a:	e8 9d 23 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f010fd8f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fd92:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010fd97:	85 c0                	test   %eax,%eax
f010fd99:	75 19                	jne    f010fdb4 <test_insert_sorted_with_merge_freeList+0x605>
f010fd9b:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010fda0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fda3:	83 c2 02             	add    $0x2,%edx
f010fda6:	39 d0                	cmp    %edx,%eax
f010fda8:	75 0a                	jne    f010fdb4 <test_insert_sorted_with_merge_freeList+0x605>
f010fdaa:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010fdaf:	83 f8 04             	cmp    $0x4,%eax
f010fdb2:	74 17                	je     f010fdcb <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fdb4:	83 ec 04             	sub    $0x4,%esp
f010fdb7:	68 e0 7e 13 f0       	push   $0xf0137ee0
f010fdbc:	68 05 03 00 00       	push   $0x305
f010fdc1:	68 34 73 13 f0       	push   $0xf0137334
f010fdc6:	e8 db 03 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fdcb:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fdd2:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010fdd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fddc:	8d 50 ff             	lea    -0x1(%eax),%edx
f010fddf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fde2:	48                   	dec    %eax
f010fde3:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fde7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdea:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fdee:	01 c8                	add    %ecx,%eax
f010fdf0:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fdf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdf7:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fdfe:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fdff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe02:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fe09:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fe0a:	83 ec 0c             	sub    $0xc,%esp
f010fe0d:	ff 75 f0             	pushl  -0x10(%ebp)
f010fe10:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe13:	50                   	push   %eax
f010fe14:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fe17:	50                   	push   %eax
f010fe18:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fe1b:	50                   	push   %eax
f010fe1c:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010fe21:	e8 6d 05 00 00       	call   f0110393 <check_list_data>
f010fe26:	83 c4 20             	add    $0x20,%esp
f010fe29:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fe2c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fe30:	74 17                	je     f010fe49 <test_insert_sorted_with_merge_freeList+0x69a>
f010fe32:	83 ec 04             	sub    $0x4,%esp
f010fe35:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010fe3a:	68 0e 03 00 00       	push   $0x30e
f010fe3f:	68 34 73 13 f0       	push   $0xf0137334
f010fe44:	e8 5d 03 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fe49:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fe4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fe4f:	74 17                	je     f010fe68 <test_insert_sorted_with_merge_freeList+0x6b9>
f010fe51:	83 ec 04             	sub    $0x4,%esp
f010fe54:	68 a0 7f 13 f0       	push   $0xf0137fa0
f010fe59:	68 0f 03 00 00       	push   $0x30f
f010fe5e:	68 34 73 13 f0       	push   $0xf0137334
f010fe63:	e8 3e 03 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fe68:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fe6f:	83 ec 0c             	sub    $0xc,%esp
f010fe72:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe75:	50                   	push   %eax
f010fe76:	e8 e4 05 00 00       	call   f011045f <check_avaliable_list_data>
f010fe7b:	83 c4 10             	add    $0x10,%esp
f010fe7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fe81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fe84:	8d 50 02             	lea    0x2(%eax),%edx
f010fe87:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fe8a:	39 c2                	cmp    %eax,%edx
f010fe8c:	74 17                	je     f010fea5 <test_insert_sorted_with_merge_freeList+0x6f6>
f010fe8e:	83 ec 04             	sub    $0x4,%esp
f010fe91:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010fe96:	68 14 03 00 00       	push   $0x314
f010fe9b:	68 34 73 13 f0       	push   $0xf0137334
f010fea0:	e8 01 03 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fea5:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fea9:	74 17                	je     f010fec2 <test_insert_sorted_with_merge_freeList+0x713>
f010feab:	83 ec 04             	sub    $0x4,%esp
f010feae:	68 4c 80 13 f0       	push   $0xf013804c
f010feb3:	68 15 03 00 00       	push   $0x315
f010feb8:	68 34 73 13 f0       	push   $0xf0137334
f010febd:	e8 e4 02 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f010fec2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fec9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fecc:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fed3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010fed4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fed7:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010fede:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fedf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fee2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fee6:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f010feec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010feef:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fef3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f010fef9:	83 ec 0c             	sub    $0xc,%esp
f010fefc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f010ff02:	50                   	push   %eax
f010ff03:	e8 24 22 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f010ff08:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010ff0b:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f010ff10:	85 c0                	test   %eax,%eax
f010ff12:	75 19                	jne    f010ff2d <test_insert_sorted_with_merge_freeList+0x77e>
f010ff14:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f010ff19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ff1c:	83 c2 03             	add    $0x3,%edx
f010ff1f:	39 d0                	cmp    %edx,%eax
f010ff21:	75 0a                	jne    f010ff2d <test_insert_sorted_with_merge_freeList+0x77e>
f010ff23:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f010ff28:	83 f8 04             	cmp    $0x4,%eax
f010ff2b:	74 17                	je     f010ff44 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff2d:	83 ec 04             	sub    $0x4,%esp
f010ff30:	68 e0 7e 13 f0       	push   $0xf0137ee0
f010ff35:	68 28 03 00 00       	push   $0x328
f010ff3a:	68 34 73 13 f0       	push   $0xf0137334
f010ff3f:	e8 62 02 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ff44:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010ff4b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010ff52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff55:	8d 50 01             	lea    0x1(%eax),%edx
f010ff58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff5b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ff5f:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010ff63:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff66:	8d 50 01             	lea    0x1(%eax),%edx
f010ff69:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff6c:	40                   	inc    %eax
f010ff6d:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010ff71:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff74:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ff78:	01 c8                	add    %ecx,%eax
f010ff7a:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010ff7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff81:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010ff88:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010ff89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff8c:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010ff93:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ff94:	83 ec 0c             	sub    $0xc,%esp
f010ff97:	ff 75 f0             	pushl  -0x10(%ebp)
f010ff9a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ff9d:	50                   	push   %eax
f010ff9e:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ffa1:	50                   	push   %eax
f010ffa2:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ffa5:	50                   	push   %eax
f010ffa6:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f010ffab:	e8 e3 03 00 00       	call   f0110393 <check_list_data>
f010ffb0:	83 c4 20             	add    $0x20,%esp
f010ffb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ffb6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ffba:	74 17                	je     f010ffd3 <test_insert_sorted_with_merge_freeList+0x824>
f010ffbc:	83 ec 04             	sub    $0x4,%esp
f010ffbf:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010ffc4:	68 32 03 00 00       	push   $0x332
f010ffc9:	68 34 73 13 f0       	push   $0xf0137334
f010ffce:	e8 d3 01 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010ffd3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ffd6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ffd9:	74 17                	je     f010fff2 <test_insert_sorted_with_merge_freeList+0x843>
f010ffdb:	83 ec 04             	sub    $0x4,%esp
f010ffde:	68 a0 7f 13 f0       	push   $0xf0137fa0
f010ffe3:	68 33 03 00 00       	push   $0x333
f010ffe8:	68 34 73 13 f0       	push   $0xf0137334
f010ffed:	e8 b4 01 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fff2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fff9:	83 ec 0c             	sub    $0xc,%esp
f010fffc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ffff:	50                   	push   %eax
f0110000:	e8 5a 04 00 00       	call   f011045f <check_avaliable_list_data>
f0110005:	83 c4 10             	add    $0x10,%esp
f0110008:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011000b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011000e:	8d 50 03             	lea    0x3(%eax),%edx
f0110011:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110014:	39 c2                	cmp    %eax,%edx
f0110016:	74 17                	je     f011002f <test_insert_sorted_with_merge_freeList+0x880>
f0110018:	83 ec 04             	sub    $0x4,%esp
f011001b:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110020:	68 38 03 00 00       	push   $0x338
f0110025:	68 34 73 13 f0       	push   $0xf0137334
f011002a:	e8 77 01 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011002f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110033:	74 17                	je     f011004c <test_insert_sorted_with_merge_freeList+0x89d>
f0110035:	83 ec 04             	sub    $0x4,%esp
f0110038:	68 4c 80 13 f0       	push   $0xf013804c
f011003d:	68 39 03 00 00       	push   $0x339
f0110042:	68 34 73 13 f0       	push   $0xf0137334
f0110047:	e8 5a 01 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f011004c:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110053:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110056:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f011005d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f011005e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110061:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110068:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110069:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011006c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110070:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110076:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110079:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011007d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110083:	83 ec 0c             	sub    $0xc,%esp
f0110086:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011008c:	50                   	push   %eax
f011008d:	e8 9a 20 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f0110092:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110095:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f011009a:	85 c0                	test   %eax,%eax
f011009c:	75 19                	jne    f01100b7 <test_insert_sorted_with_merge_freeList+0x908>
f011009e:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f01100a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01100a6:	83 c2 04             	add    $0x4,%edx
f01100a9:	39 d0                	cmp    %edx,%eax
f01100ab:	75 0a                	jne    f01100b7 <test_insert_sorted_with_merge_freeList+0x908>
f01100ad:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f01100b2:	83 f8 04             	cmp    $0x4,%eax
f01100b5:	74 17                	je     f01100ce <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01100b7:	83 ec 04             	sub    $0x4,%esp
f01100ba:	68 e0 7e 13 f0       	push   $0xf0137ee0
f01100bf:	68 4c 03 00 00       	push   $0x34c
f01100c4:	68 34 73 13 f0       	push   $0xf0137334
f01100c9:	e8 d8 00 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01100ce:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01100d5:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f01100dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100df:	8d 50 01             	lea    0x1(%eax),%edx
f01100e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100e5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01100e9:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f01100ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100f0:	8d 50 01             	lea    0x1(%eax),%edx
f01100f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100f6:	40                   	inc    %eax
f01100f7:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01100fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100fe:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110102:	01 c8                	add    %ecx,%eax
f0110104:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110108:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011010b:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110112:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110113:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110116:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011011d:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011011e:	83 ec 0c             	sub    $0xc,%esp
f0110121:	ff 75 f0             	pushl  -0x10(%ebp)
f0110124:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110127:	50                   	push   %eax
f0110128:	8d 45 98             	lea    -0x68(%ebp),%eax
f011012b:	50                   	push   %eax
f011012c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011012f:	50                   	push   %eax
f0110130:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f0110135:	e8 59 02 00 00       	call   f0110393 <check_list_data>
f011013a:	83 c4 20             	add    $0x20,%esp
f011013d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110140:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110144:	74 17                	je     f011015d <test_insert_sorted_with_merge_freeList+0x9ae>
f0110146:	83 ec 04             	sub    $0x4,%esp
f0110149:	68 4c 7f 13 f0       	push   $0xf0137f4c
f011014e:	68 56 03 00 00       	push   $0x356
f0110153:	68 34 73 13 f0       	push   $0xf0137334
f0110158:	e8 49 00 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011015d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110160:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110163:	74 17                	je     f011017c <test_insert_sorted_with_merge_freeList+0x9cd>
f0110165:	83 ec 04             	sub    $0x4,%esp
f0110168:	68 a0 7f 13 f0       	push   $0xf0137fa0
f011016d:	68 57 03 00 00       	push   $0x357
f0110172:	68 34 73 13 f0       	push   $0xf0137334
f0110177:	e8 2a 00 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011017c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110183:	83 ec 0c             	sub    $0xc,%esp
f0110186:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110189:	50                   	push   %eax
f011018a:	e8 d0 02 00 00       	call   f011045f <check_avaliable_list_data>
f011018f:	83 c4 10             	add    $0x10,%esp
f0110192:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110195:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110198:	8d 50 04             	lea    0x4(%eax),%edx
f011019b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011019e:	39 c2                	cmp    %eax,%edx
f01101a0:	74 17                	je     f01101b9 <test_insert_sorted_with_merge_freeList+0xa0a>
f01101a2:	83 ec 04             	sub    $0x4,%esp
f01101a5:	68 f4 7f 13 f0       	push   $0xf0137ff4
f01101aa:	68 5c 03 00 00       	push   $0x35c
f01101af:	68 34 73 13 f0       	push   $0xf0137334
f01101b4:	e8 ed ff fe ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01101b9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01101bd:	74 17                	je     f01101d6 <test_insert_sorted_with_merge_freeList+0xa27>
f01101bf:	83 ec 04             	sub    $0x4,%esp
f01101c2:	68 4c 80 13 f0       	push   $0xf013804c
f01101c7:	68 5d 03 00 00       	push   $0x35d
f01101cc:	68 34 73 13 f0       	push   $0xf0137334
f01101d1:	e8 d0 ff fe ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f01101d6:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f01101dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101e0:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f01101e7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f01101e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101eb:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f01101f2:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01101f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101f6:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01101fa:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0110200:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110203:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110207:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f011020d:	83 ec 0c             	sub    $0xc,%esp
f0110210:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110216:	50                   	push   %eax
f0110217:	e8 10 1f 02 00       	call   f013212c <insert_sorted_with_merge_freeList>
f011021c:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f011021f:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f0110224:	85 c0                	test   %eax,%eax
f0110226:	75 19                	jne    f0110241 <test_insert_sorted_with_merge_freeList+0xa92>
f0110228:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f011022d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110230:	83 c2 06             	add    $0x6,%edx
f0110233:	39 d0                	cmp    %edx,%eax
f0110235:	75 0a                	jne    f0110241 <test_insert_sorted_with_merge_freeList+0xa92>
f0110237:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f011023c:	83 f8 03             	cmp    $0x3,%eax
f011023f:	74 17                	je     f0110258 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110241:	83 ec 04             	sub    $0x4,%esp
f0110244:	68 e0 7e 13 f0       	push   $0xf0137ee0
f0110249:	68 70 03 00 00       	push   $0x370
f011024e:	68 34 73 13 f0       	push   $0xf0137334
f0110253:	e8 4e ff fe ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110258:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f011025f:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0110266:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110269:	48                   	dec    %eax
f011026a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110271:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0110272:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110275:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110278:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011027b:	48                   	dec    %eax
f011027c:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110280:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110283:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110287:	01 c1                	add    %eax,%ecx
f0110289:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011028c:	40                   	inc    %eax
f011028d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110291:	01 c8                	add    %ecx,%eax
f0110293:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110297:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011029a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01102a1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01102a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102a5:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01102ac:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f01102ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102b0:	40                   	inc    %eax
f01102b1:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01102b8:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f01102b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102bc:	40                   	inc    %eax
f01102bd:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01102c4:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01102c5:	83 ec 0c             	sub    $0xc,%esp
f01102c8:	ff 75 f0             	pushl  -0x10(%ebp)
f01102cb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01102ce:	50                   	push   %eax
f01102cf:	8d 45 98             	lea    -0x68(%ebp),%eax
f01102d2:	50                   	push   %eax
f01102d3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01102d6:	50                   	push   %eax
f01102d7:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f01102dc:	e8 b2 00 00 00       	call   f0110393 <check_list_data>
f01102e1:	83 c4 20             	add    $0x20,%esp
f01102e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01102e7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01102eb:	74 17                	je     f0110304 <test_insert_sorted_with_merge_freeList+0xb55>
f01102ed:	83 ec 04             	sub    $0x4,%esp
f01102f0:	68 4c 7f 13 f0       	push   $0xf0137f4c
f01102f5:	68 7c 03 00 00       	push   $0x37c
f01102fa:	68 34 73 13 f0       	push   $0xf0137334
f01102ff:	e8 a2 fe fe ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110304:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110307:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011030a:	74 17                	je     f0110323 <test_insert_sorted_with_merge_freeList+0xb74>
f011030c:	83 ec 04             	sub    $0x4,%esp
f011030f:	68 a0 7f 13 f0       	push   $0xf0137fa0
f0110314:	68 7d 03 00 00       	push   $0x37d
f0110319:	68 34 73 13 f0       	push   $0xf0137334
f011031e:	e8 83 fe fe ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110323:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011032a:	83 ec 0c             	sub    $0xc,%esp
f011032d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110330:	50                   	push   %eax
f0110331:	e8 29 01 00 00       	call   f011045f <check_avaliable_list_data>
f0110336:	83 c4 10             	add    $0x10,%esp
f0110339:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011033c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011033f:	8d 50 06             	lea    0x6(%eax),%edx
f0110342:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110345:	39 c2                	cmp    %eax,%edx
f0110347:	74 17                	je     f0110360 <test_insert_sorted_with_merge_freeList+0xbb1>
f0110349:	83 ec 04             	sub    $0x4,%esp
f011034c:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0110351:	68 82 03 00 00       	push   $0x382
f0110356:	68 34 73 13 f0       	push   $0xf0137334
f011035b:	e8 46 fe fe ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110360:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110364:	74 17                	je     f011037d <test_insert_sorted_with_merge_freeList+0xbce>
f0110366:	83 ec 04             	sub    $0x4,%esp
f0110369:	68 4c 80 13 f0       	push   $0xf013804c
f011036e:	68 83 03 00 00       	push   $0x383
f0110373:	68 34 73 13 f0       	push   $0xf0137334
f0110378:	e8 29 fe fe ff       	call   f01001a6 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f011037d:	83 ec 0c             	sub    $0xc,%esp
f0110380:	68 a8 80 13 f0       	push   $0xf01380a8
f0110385:	e8 a3 08 ff ff       	call   f0100c2d <cprintf>
f011038a:	83 c4 10             	add    $0x10,%esp

}
f011038d:	90                   	nop
f011038e:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0110391:	c9                   	leave  
f0110392:	c3                   	ret    

f0110393 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0110393:	55                   	push   %ebp
f0110394:	89 e5                	mov    %esp,%ebp
f0110396:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110399:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01103a0:	8b 45 14             	mov    0x14(%ebp),%eax
f01103a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f01103a9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f01103b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01103b3:	8b 00                	mov    (%eax),%eax
f01103b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01103b8:	eb 6e                	jmp    f0110428 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f01103ba:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f01103bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01103c0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01103c7:	8b 45 10             	mov    0x10(%ebp),%eax
f01103ca:	01 d0                	add    %edx,%eax
f01103cc:	8b 00                	mov    (%eax),%eax
f01103ce:	85 c0                	test   %eax,%eax
f01103d0:	74 e8                	je     f01103ba <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f01103d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01103d5:	8b 50 08             	mov    0x8(%eax),%edx
f01103d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01103db:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01103e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01103e5:	01 c8                	add    %ecx,%eax
f01103e7:	8b 00                	mov    (%eax),%eax
f01103e9:	39 c2                	cmp    %eax,%edx
f01103eb:	75 1b                	jne    f0110408 <check_list_data+0x75>
f01103ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01103f0:	8b 50 0c             	mov    0xc(%eax),%edx
f01103f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01103f6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01103fd:	8b 45 10             	mov    0x10(%ebp),%eax
f0110400:	01 c8                	add    %ecx,%eax
f0110402:	8b 00                	mov    (%eax),%eax
f0110404:	39 c2                	cmp    %eax,%edx
f0110406:	74 07                	je     f011040f <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0110408:	b8 00 00 00 00       	mov    $0x0,%eax
f011040d:	eb 4e                	jmp    f011045d <check_list_data+0xca>
		}
		(*size)++;
f011040f:	8b 45 14             	mov    0x14(%ebp),%eax
f0110412:	8b 00                	mov    (%eax),%eax
f0110414:	8d 50 01             	lea    0x1(%eax),%edx
f0110417:	8b 45 14             	mov    0x14(%ebp),%eax
f011041a:	89 10                	mov    %edx,(%eax)
		i++;
f011041c:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f011041f:	8b 45 08             	mov    0x8(%ebp),%eax
f0110422:	8b 40 08             	mov    0x8(%eax),%eax
f0110425:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110428:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011042c:	74 07                	je     f0110435 <check_list_data+0xa2>
f011042e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110431:	8b 00                	mov    (%eax),%eax
f0110433:	eb 05                	jmp    f011043a <check_list_data+0xa7>
f0110435:	b8 00 00 00 00       	mov    $0x0,%eax
f011043a:	8b 55 08             	mov    0x8(%ebp),%edx
f011043d:	89 42 08             	mov    %eax,0x8(%edx)
f0110440:	8b 45 08             	mov    0x8(%ebp),%eax
f0110443:	8b 40 08             	mov    0x8(%eax),%eax
f0110446:	85 c0                	test   %eax,%eax
f0110448:	0f 85 6f ff ff ff    	jne    f01103bd <check_list_data+0x2a>
f011044e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110452:	0f 85 65 ff ff ff    	jne    f01103bd <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110458:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011045d:	c9                   	leave  
f011045e:	c3                   	ret    

f011045f <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f011045f:	55                   	push   %ebp
f0110460:	89 e5                	mov    %esp,%ebp
f0110462:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110465:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011046c:	8b 45 08             	mov    0x8(%ebp),%eax
f011046f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110475:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f011047a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011047d:	eb 30                	jmp    f01104af <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f011047f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110482:	8b 40 08             	mov    0x8(%eax),%eax
f0110485:	85 c0                	test   %eax,%eax
f0110487:	75 0a                	jne    f0110493 <check_avaliable_list_data+0x34>
f0110489:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011048c:	8b 40 0c             	mov    0xc(%eax),%eax
f011048f:	85 c0                	test   %eax,%eax
f0110491:	74 07                	je     f011049a <check_avaliable_list_data+0x3b>
		{
			return 0;
f0110493:	b8 00 00 00 00       	mov    $0x0,%eax
f0110498:	eb 40                	jmp    f01104da <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f011049a:	8b 45 08             	mov    0x8(%ebp),%eax
f011049d:	8b 00                	mov    (%eax),%eax
f011049f:	8d 50 01             	lea    0x1(%eax),%edx
f01104a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01104a5:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01104a7:	a1 dc 1e 6c f0       	mov    0xf06c1edc,%eax
f01104ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01104af:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01104b3:	74 07                	je     f01104bc <check_avaliable_list_data+0x5d>
f01104b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01104b8:	8b 00                	mov    (%eax),%eax
f01104ba:	eb 05                	jmp    f01104c1 <check_avaliable_list_data+0x62>
f01104bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01104c1:	a3 dc 1e 6c f0       	mov    %eax,0xf06c1edc
f01104c6:	a1 dc 1e 6c f0       	mov    0xf06c1edc,%eax
f01104cb:	85 c0                	test   %eax,%eax
f01104cd:	75 b0                	jne    f011047f <check_avaliable_list_data+0x20>
f01104cf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01104d3:	75 aa                	jne    f011047f <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f01104d5:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01104da:	c9                   	leave  
f01104db:	c3                   	ret    

f01104dc <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f01104dc:	55                   	push   %ebp
f01104dd:	89 e5                	mov    %esp,%ebp
f01104df:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f01104e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f01104e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01104ec:	8b 00                	mov    (%eax),%eax
f01104ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01104f1:	eb 27                	jmp    f011051a <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f01104f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01104f6:	8b 50 0c             	mov    0xc(%eax),%edx
f01104f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01104fc:	8b 40 08             	mov    0x8(%eax),%eax
f01104ff:	83 ec 04             	sub    $0x4,%esp
f0110502:	52                   	push   %edx
f0110503:	50                   	push   %eax
f0110504:	68 f8 73 13 f0       	push   $0xf01373f8
f0110509:	e8 1f 07 ff ff       	call   f0100c2d <cprintf>
f011050e:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0110511:	8b 45 08             	mov    0x8(%ebp),%eax
f0110514:	8b 40 08             	mov    0x8(%eax),%eax
f0110517:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011051a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011051e:	74 07                	je     f0110527 <show_list_content+0x4b>
f0110520:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110523:	8b 00                	mov    (%eax),%eax
f0110525:	eb 05                	jmp    f011052c <show_list_content+0x50>
f0110527:	b8 00 00 00 00       	mov    $0x0,%eax
f011052c:	8b 55 08             	mov    0x8(%ebp),%edx
f011052f:	89 42 08             	mov    %eax,0x8(%edx)
f0110532:	8b 45 08             	mov    0x8(%ebp),%eax
f0110535:	8b 40 08             	mov    0x8(%eax),%eax
f0110538:	85 c0                	test   %eax,%eax
f011053a:	75 b7                	jne    f01104f3 <show_list_content+0x17>
f011053c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110540:	75 b1                	jne    f01104f3 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0110542:	90                   	nop
f0110543:	c9                   	leave  
f0110544:	c3                   	ret    

f0110545 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0110545:	55                   	push   %ebp
f0110546:	89 e5                	mov    %esp,%ebp
f0110548:	57                   	push   %edi
f0110549:	56                   	push   %esi
f011054a:	53                   	push   %ebx
f011054b:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110551:	83 ec 0c             	sub    $0xc,%esp
f0110554:	68 fc 80 13 f0       	push   $0xf01380fc
f0110559:	e8 cf 06 ff ff       	call   f0100c2d <cprintf>
f011055e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110561:	83 ec 0c             	sub    $0xc,%esp
f0110564:	68 20 81 13 f0       	push   $0xf0138120
f0110569:	e8 bf 06 ff ff       	call   f0100c2d <cprintf>
f011056e:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110571:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110578:	83 ec 0c             	sub    $0xc,%esp
f011057b:	68 3c 81 13 f0       	push   $0xf013813c
f0110580:	e8 a8 06 ff ff       	call   f0100c2d <cprintf>
f0110585:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110588:	8d 45 80             	lea    -0x80(%ebp),%eax
f011058b:	bb f6 81 13 f0       	mov    $0xf01381f6,%ebx
f0110590:	ba 03 00 00 00       	mov    $0x3,%edx
f0110595:	89 c7                	mov    %eax,%edi
f0110597:	89 de                	mov    %ebx,%esi
f0110599:	89 d1                	mov    %edx,%ecx
f011059b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011059d:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01105a0:	b9 16 00 00 00       	mov    $0x16,%ecx
f01105a5:	b8 00 00 00 00       	mov    $0x0,%eax
f01105aa:	89 d7                	mov    %edx,%edi
f01105ac:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f01105ae:	83 ec 0c             	sub    $0xc,%esp
f01105b1:	8d 45 80             	lea    -0x80(%ebp),%eax
f01105b4:	50                   	push   %eax
f01105b5:	e8 d5 06 ff ff       	call   f0100c8f <execute_command>
f01105ba:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01105bd:	83 ec 0c             	sub    $0xc,%esp
f01105c0:	68 6a 81 13 f0       	push   $0xf013816a
f01105c5:	e8 63 06 ff ff       	call   f0100c2d <cprintf>
f01105ca:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f01105cd:	83 ec 0c             	sub    $0xc,%esp
f01105d0:	68 80 81 13 f0       	push   $0xf0138180
f01105d5:	e8 53 06 ff ff       	call   f0100c2d <cprintf>
f01105da:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f01105dd:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f01105e4:	65 00 00 
f01105e7:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f01105ed:	b9 18 00 00 00       	mov    $0x18,%ecx
f01105f2:	b8 00 00 00 00       	mov    $0x0,%eax
f01105f7:	89 d7                	mov    %edx,%edi
f01105f9:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f01105fb:	83 ec 0c             	sub    $0xc,%esp
f01105fe:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0110604:	50                   	push   %eax
f0110605:	e8 85 06 ff ff       	call   f0100c8f <execute_command>
f011060a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011060d:	83 ec 0c             	sub    $0xc,%esp
f0110610:	68 6a 81 13 f0       	push   $0xf013816a
f0110615:	e8 13 06 ff ff       	call   f0100c2d <cprintf>
f011061a:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f011061d:	83 ec 0c             	sub    $0xc,%esp
f0110620:	68 a8 81 13 f0       	push   $0xf01381a8
f0110625:	e8 03 06 ff ff       	call   f0100c2d <cprintf>
f011062a:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f011062d:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0110634:	75 00 00 
f0110637:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f011063d:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110642:	b8 00 00 00 00       	mov    $0x0,%eax
f0110647:	89 d7                	mov    %edx,%edi
f0110649:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f011064b:	83 ec 0c             	sub    $0xc,%esp
f011064e:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0110654:	50                   	push   %eax
f0110655:	e8 35 06 ff ff       	call   f0100c8f <execute_command>
f011065a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011065d:	83 ec 0c             	sub    $0xc,%esp
f0110660:	68 6a 81 13 f0       	push   $0xf013816a
f0110665:	e8 c3 05 ff ff       	call   f0100c2d <cprintf>
f011066a:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f011066d:	83 ec 0c             	sub    $0xc,%esp
f0110670:	68 d0 81 13 f0       	push   $0xf01381d0
f0110675:	e8 b3 05 ff ff       	call   f0100c2d <cprintf>
f011067a:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f011067d:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0110684:	6d 6d 00 
f0110687:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f011068d:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110692:	b8 00 00 00 00       	mov    $0x0,%eax
f0110697:	89 d7                	mov    %edx,%edi
f0110699:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f011069b:	83 ec 0c             	sub    $0xc,%esp
f011069e:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f01106a4:	50                   	push   %eax
f01106a5:	e8 e5 05 ff ff       	call   f0100c8f <execute_command>
f01106aa:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01106ad:	83 ec 0c             	sub    $0xc,%esp
f01106b0:	68 6a 81 13 f0       	push   $0xf013816a
f01106b5:	e8 73 05 ff ff       	call   f0100c2d <cprintf>
f01106ba:	83 c4 10             	add    $0x10,%esp
	return 0;
f01106bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01106c2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01106c5:	5b                   	pop    %ebx
f01106c6:	5e                   	pop    %esi
f01106c7:	5f                   	pop    %edi
f01106c8:	5d                   	pop    %ebp
f01106c9:	c3                   	ret    

f01106ca <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f01106ca:	55                   	push   %ebp
f01106cb:	89 e5                	mov    %esp,%ebp
f01106cd:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f01106d0:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01106d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01106de:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01106e5:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01106ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01106ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01106f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01106f3:	50                   	push   %eax
f01106f4:	e8 fb 6f ff ff       	call   f01076f4 <pt_set_page_permissions>
f01106f9:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01106fc:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110701:	ff 75 ec             	pushl  -0x14(%ebp)
f0110704:	ff 75 f0             	pushl  -0x10(%ebp)
f0110707:	ff 75 f4             	pushl  -0xc(%ebp)
f011070a:	50                   	push   %eax
f011070b:	e8 ca 50 00 00       	call   f01157da <CP>
f0110710:	83 c4 10             	add    $0x10,%esp
f0110713:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110716:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011071a:	74 14                	je     f0110730 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f011071c:	83 ec 04             	sub    $0x4,%esp
f011071f:	68 5c 82 13 f0       	push   $0xf013825c
f0110724:	6a 5a                	push   $0x5a
f0110726:	68 7e 82 13 f0       	push   $0xf013827e
f011072b:	e8 76 fa fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110730:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0110737:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f011073e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110745:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f011074a:	ff 75 ec             	pushl  -0x14(%ebp)
f011074d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110750:	ff 75 f4             	pushl  -0xc(%ebp)
f0110753:	50                   	push   %eax
f0110754:	e8 9b 6f ff ff       	call   f01076f4 <pt_set_page_permissions>
f0110759:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011075c:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110761:	ff 75 ec             	pushl  -0x14(%ebp)
f0110764:	ff 75 f0             	pushl  -0x10(%ebp)
f0110767:	ff 75 f4             	pushl  -0xc(%ebp)
f011076a:	50                   	push   %eax
f011076b:	e8 6a 50 00 00       	call   f01157da <CP>
f0110770:	83 c4 10             	add    $0x10,%esp
f0110773:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110776:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011077a:	74 14                	je     f0110790 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f011077c:	83 ec 04             	sub    $0x4,%esp
f011077f:	68 9c 82 13 f0       	push   $0xf013829c
f0110784:	6a 66                	push   $0x66
f0110786:	68 7e 82 13 f0       	push   $0xf013827e
f011078b:	e8 16 fa fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110790:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110797:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f011079e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01107a5:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01107aa:	ff 75 ec             	pushl  -0x14(%ebp)
f01107ad:	ff 75 f0             	pushl  -0x10(%ebp)
f01107b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01107b3:	50                   	push   %eax
f01107b4:	e8 3b 6f ff ff       	call   f01076f4 <pt_set_page_permissions>
f01107b9:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01107bc:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01107c1:	ff 75 ec             	pushl  -0x14(%ebp)
f01107c4:	ff 75 f0             	pushl  -0x10(%ebp)
f01107c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01107ca:	50                   	push   %eax
f01107cb:	e8 0a 50 00 00       	call   f01157da <CP>
f01107d0:	83 c4 10             	add    $0x10,%esp
f01107d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01107d6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01107da:	74 14                	je     f01107f0 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f01107dc:	83 ec 04             	sub    $0x4,%esp
f01107df:	68 c0 82 13 f0       	push   $0xf01382c0
f01107e4:	6a 71                	push   $0x71
f01107e6:	68 7e 82 13 f0       	push   $0xf013827e
f01107eb:	e8 b6 f9 fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01107f0:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01107f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01107fe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110805:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f011080a:	ff 75 ec             	pushl  -0x14(%ebp)
f011080d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110810:	ff 75 f4             	pushl  -0xc(%ebp)
f0110813:	50                   	push   %eax
f0110814:	e8 db 6e ff ff       	call   f01076f4 <pt_set_page_permissions>
f0110819:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011081c:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110821:	ff 75 ec             	pushl  -0x14(%ebp)
f0110824:	ff 75 f0             	pushl  -0x10(%ebp)
f0110827:	ff 75 f4             	pushl  -0xc(%ebp)
f011082a:	50                   	push   %eax
f011082b:	e8 aa 4f 00 00       	call   f01157da <CP>
f0110830:	83 c4 10             	add    $0x10,%esp
f0110833:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110836:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011083a:	74 14                	je     f0110850 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f011083c:	83 ec 04             	sub    $0x4,%esp
f011083f:	68 e4 82 13 f0       	push   $0xf01382e4
f0110844:	6a 7d                	push   $0x7d
f0110846:	68 7e 82 13 f0       	push   $0xf013827e
f011084b:	e8 56 f9 fe ff       	call   f01001a6 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110850:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110857:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f011085e:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110865:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f011086a:	ff 75 ec             	pushl  -0x14(%ebp)
f011086d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110870:	ff 75 f4             	pushl  -0xc(%ebp)
f0110873:	50                   	push   %eax
f0110874:	e8 7b 6e ff ff       	call   f01076f4 <pt_set_page_permissions>
f0110879:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011087c:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110881:	ff 75 ec             	pushl  -0x14(%ebp)
f0110884:	ff 75 f0             	pushl  -0x10(%ebp)
f0110887:	ff 75 f4             	pushl  -0xc(%ebp)
f011088a:	50                   	push   %eax
f011088b:	e8 4a 4f 00 00       	call   f01157da <CP>
f0110890:	83 c4 10             	add    $0x10,%esp
f0110893:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110896:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011089a:	74 17                	je     f01108b3 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f011089c:	83 ec 04             	sub    $0x4,%esp
f011089f:	68 08 83 13 f0       	push   $0xf0138308
f01108a4:	68 89 00 00 00       	push   $0x89
f01108a9:	68 7e 82 13 f0       	push   $0xf013827e
f01108ae:	e8 f3 f8 fe ff       	call   f01001a6 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f01108b3:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f01108ba:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f01108c1:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01108c8:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01108cd:	ff 75 ec             	pushl  -0x14(%ebp)
f01108d0:	ff 75 f0             	pushl  -0x10(%ebp)
f01108d3:	ff 75 f4             	pushl  -0xc(%ebp)
f01108d6:	50                   	push   %eax
f01108d7:	e8 18 6e ff ff       	call   f01076f4 <pt_set_page_permissions>
f01108dc:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01108df:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01108e4:	ff 75 ec             	pushl  -0x14(%ebp)
f01108e7:	ff 75 f0             	pushl  -0x10(%ebp)
f01108ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01108ed:	50                   	push   %eax
f01108ee:	e8 e7 4e 00 00       	call   f01157da <CP>
f01108f3:	83 c4 10             	add    $0x10,%esp
f01108f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01108f9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01108fd:	74 17                	je     f0110916 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01108ff:	83 ec 04             	sub    $0x4,%esp
f0110902:	68 2c 83 13 f0       	push   $0xf013832c
f0110907:	68 95 00 00 00       	push   $0x95
f011090c:	68 7e 82 13 f0       	push   $0xf013827e
f0110911:	e8 90 f8 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0110916:	83 ec 0c             	sub    $0xc,%esp
f0110919:	68 58 83 13 f0       	push   $0xf0138358
f011091e:	e8 0a 03 ff ff       	call   f0100c2d <cprintf>
f0110923:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110926:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011092b:	c9                   	leave  
f011092c:	c3                   	ret    

f011092d <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f011092d:	55                   	push   %ebp
f011092e:	89 e5                	mov    %esp,%ebp
f0110930:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0110933:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011093a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110941:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110948:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f011094d:	ff 75 ec             	pushl  -0x14(%ebp)
f0110950:	ff 75 f0             	pushl  -0x10(%ebp)
f0110953:	ff 75 f4             	pushl  -0xc(%ebp)
f0110956:	50                   	push   %eax
f0110957:	e8 98 6d ff ff       	call   f01076f4 <pt_set_page_permissions>
f011095c:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f011095f:	83 ec 04             	sub    $0x4,%esp
f0110962:	68 a8 83 13 f0       	push   $0xf01383a8
f0110967:	68 a2 00 00 00       	push   $0xa2
f011096c:	68 7e 82 13 f0       	push   $0xf013827e
f0110971:	e8 30 f8 fe ff       	call   f01001a6 <_panic>

f0110976 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0110976:	55                   	push   %ebp
f0110977:	89 e5                	mov    %esp,%ebp
f0110979:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f011097c:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0110983:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110988:	83 ec 08             	sub    $0x8,%esp
f011098b:	ff 75 f4             	pushl  -0xc(%ebp)
f011098e:	50                   	push   %eax
f011098f:	e8 14 6e ff ff       	call   f01077a8 <pt_get_page_permissions>
f0110994:	83 c4 10             	add    $0x10,%esp
f0110997:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f011099a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f011099e:	74 17                	je     f01109b7 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f01109a0:	83 ec 04             	sub    $0x4,%esp
f01109a3:	68 44 84 13 f0       	push   $0xf0138444
f01109a8:	68 b0 00 00 00       	push   $0xb0
f01109ad:	68 7e 82 13 f0       	push   $0xf013827e
f01109b2:	e8 ef f7 fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f01109b7:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01109be:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01109c3:	83 ec 08             	sub    $0x8,%esp
f01109c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01109c9:	50                   	push   %eax
f01109ca:	e8 d9 6d ff ff       	call   f01077a8 <pt_get_page_permissions>
f01109cf:	83 c4 10             	add    $0x10,%esp
f01109d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01109d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01109d9:	74 17                	je     f01109f2 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01109db:	83 ec 04             	sub    $0x4,%esp
f01109de:	68 68 84 13 f0       	push   $0xf0138468
f01109e3:	68 b8 00 00 00       	push   $0xb8
f01109e8:	68 7e 82 13 f0       	push   $0xf013827e
f01109ed:	e8 b4 f7 fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01109f2:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01109f9:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01109fe:	83 ec 08             	sub    $0x8,%esp
f0110a01:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a04:	50                   	push   %eax
f0110a05:	e8 9e 6d ff ff       	call   f01077a8 <pt_get_page_permissions>
f0110a0a:	83 c4 10             	add    $0x10,%esp
f0110a0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110a10:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110a14:	74 17                	je     f0110a2d <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0110a16:	83 ec 04             	sub    $0x4,%esp
f0110a19:	68 8c 84 13 f0       	push   $0xf013848c
f0110a1e:	68 c0 00 00 00       	push   $0xc0
f0110a23:	68 7e 82 13 f0       	push   $0xf013827e
f0110a28:	e8 79 f7 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF1000000;
f0110a2d:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110a34:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110a39:	83 ec 08             	sub    $0x8,%esp
f0110a3c:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a3f:	50                   	push   %eax
f0110a40:	e8 63 6d ff ff       	call   f01077a8 <pt_get_page_permissions>
f0110a45:	83 c4 10             	add    $0x10,%esp
f0110a48:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110a4b:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110a4f:	74 17                	je     f0110a68 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0110a51:	83 ec 04             	sub    $0x4,%esp
f0110a54:	68 b0 84 13 f0       	push   $0xf01384b0
f0110a59:	68 c7 00 00 00       	push   $0xc7
f0110a5e:	68 7e 82 13 f0       	push   $0xf013827e
f0110a63:	e8 3e f7 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f0110a68:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110a6f:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110a74:	83 ec 08             	sub    $0x8,%esp
f0110a77:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a7a:	50                   	push   %eax
f0110a7b:	e8 28 6d ff ff       	call   f01077a8 <pt_get_page_permissions>
f0110a80:	83 c4 10             	add    $0x10,%esp
f0110a83:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0110a86:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0110a8a:	74 17                	je     f0110aa3 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0110a8c:	83 ec 04             	sub    $0x4,%esp
f0110a8f:	68 d4 84 13 f0       	push   $0xf01384d4
f0110a94:	68 ce 00 00 00       	push   $0xce
f0110a99:	68 7e 82 13 f0       	push   $0xf013827e
f0110a9e:	e8 03 f7 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0110aa3:	83 ec 0c             	sub    $0xc,%esp
f0110aa6:	68 f8 84 13 f0       	push   $0xf01384f8
f0110aab:	e8 7d 01 ff ff       	call   f0100c2d <cprintf>
f0110ab0:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110ab3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110ab8:	c9                   	leave  
f0110ab9:	c3                   	ret    

f0110aba <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0110aba:	55                   	push   %ebp
f0110abb:	89 e5                	mov    %esp,%ebp
f0110abd:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0110ac0:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110ac7:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110acc:	83 ec 08             	sub    $0x8,%esp
f0110acf:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ad2:	50                   	push   %eax
f0110ad3:	e8 2b 6d ff ff       	call   f0107803 <pt_clear_page_table_entry>
f0110ad8:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0110adb:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110ae0:	83 ec 08             	sub    $0x8,%esp
f0110ae3:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ae6:	50                   	push   %eax
f0110ae7:	e8 4a 4c 00 00       	call   f0115736 <CE>
f0110aec:	83 c4 10             	add    $0x10,%esp
f0110aef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110af2:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110af6:	74 17                	je     f0110b0f <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0110af8:	83 ec 04             	sub    $0x4,%esp
f0110afb:	68 40 85 13 f0       	push   $0xf0138540
f0110b00:	68 de 00 00 00       	push   $0xde
f0110b05:	68 7e 82 13 f0       	push   $0xf013827e
f0110b0a:	e8 97 f6 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f0110b0f:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110b16:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110b1b:	83 ec 08             	sub    $0x8,%esp
f0110b1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110b21:	50                   	push   %eax
f0110b22:	e8 dc 6c ff ff       	call   f0107803 <pt_clear_page_table_entry>
f0110b27:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110b2a:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110b2f:	83 ec 08             	sub    $0x8,%esp
f0110b32:	ff 75 f4             	pushl  -0xc(%ebp)
f0110b35:	50                   	push   %eax
f0110b36:	e8 fb 4b 00 00       	call   f0115736 <CE>
f0110b3b:	83 c4 10             	add    $0x10,%esp
f0110b3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110b41:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110b45:	74 17                	je     f0110b5e <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0110b47:	83 ec 04             	sub    $0x4,%esp
f0110b4a:	68 6c 85 13 f0       	push   $0xf013856c
f0110b4f:	68 e6 00 00 00       	push   $0xe6
f0110b54:	68 7e 82 13 f0       	push   $0xf013827e
f0110b59:	e8 48 f6 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110b5e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110b65:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110b6a:	83 ec 08             	sub    $0x8,%esp
f0110b6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0110b70:	50                   	push   %eax
f0110b71:	e8 8d 6c ff ff       	call   f0107803 <pt_clear_page_table_entry>
f0110b76:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110b79:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110b7e:	83 ec 08             	sub    $0x8,%esp
f0110b81:	ff 75 f4             	pushl  -0xc(%ebp)
f0110b84:	50                   	push   %eax
f0110b85:	e8 ac 4b 00 00       	call   f0115736 <CE>
f0110b8a:	83 c4 10             	add    $0x10,%esp
f0110b8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110b90:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110b94:	74 17                	je     f0110bad <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0110b96:	83 ec 04             	sub    $0x4,%esp
f0110b99:	68 98 85 13 f0       	push   $0xf0138598
f0110b9e:	68 ee 00 00 00       	push   $0xee
f0110ba3:	68 7e 82 13 f0       	push   $0xf013827e
f0110ba8:	e8 f9 f5 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0000000;
f0110bad:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110bb4:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110bb9:	83 ec 08             	sub    $0x8,%esp
f0110bbc:	ff 75 f4             	pushl  -0xc(%ebp)
f0110bbf:	50                   	push   %eax
f0110bc0:	e8 3e 6c ff ff       	call   f0107803 <pt_clear_page_table_entry>
f0110bc5:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110bc8:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110bcd:	83 ec 08             	sub    $0x8,%esp
f0110bd0:	ff 75 f4             	pushl  -0xc(%ebp)
f0110bd3:	50                   	push   %eax
f0110bd4:	e8 5d 4b 00 00       	call   f0115736 <CE>
f0110bd9:	83 c4 10             	add    $0x10,%esp
f0110bdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110bdf:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110be3:	74 17                	je     f0110bfc <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0110be5:	83 ec 04             	sub    $0x4,%esp
f0110be8:	68 c4 85 13 f0       	push   $0xf01385c4
f0110bed:	68 f6 00 00 00       	push   $0xf6
f0110bf2:	68 7e 82 13 f0       	push   $0xf013827e
f0110bf7:	e8 aa f5 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0110bfc:	83 ec 0c             	sub    $0xc,%esp
f0110bff:	68 f0 85 13 f0       	push   $0xf01385f0
f0110c04:	e8 24 00 ff ff       	call   f0100c2d <cprintf>
f0110c09:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110c0c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110c11:	c9                   	leave  
f0110c12:	c3                   	ret    

f0110c13 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0110c13:	55                   	push   %ebp
f0110c14:	89 e5                	mov    %esp,%ebp
f0110c16:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0110c19:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110c20:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110c25:	83 ec 08             	sub    $0x8,%esp
f0110c28:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c2b:	50                   	push   %eax
f0110c2c:	e8 d2 6b ff ff       	call   f0107803 <pt_clear_page_table_entry>
f0110c31:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0110c34:	83 ec 04             	sub    $0x4,%esp
f0110c37:	68 3c 86 13 f0       	push   $0xf013863c
f0110c3c:	68 01 01 00 00       	push   $0x101
f0110c41:	68 7e 82 13 f0       	push   $0xf013827e
f0110c46:	e8 5b f5 fe ff       	call   f01001a6 <_panic>

f0110c4b <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0110c4b:	55                   	push   %ebp
f0110c4c:	89 e5                	mov    %esp,%ebp
f0110c4e:	57                   	push   %edi
f0110c4f:	56                   	push   %esi
f0110c50:	53                   	push   %ebx
f0110c51:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0110c57:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0110c5e:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0110c65:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110c6a:	83 ec 0c             	sub    $0xc,%esp
f0110c6d:	50                   	push   %eax
f0110c6e:	e8 c4 4c 00 00       	call   f0115937 <ClearUserSpace>
f0110c73:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0110c76:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0110c7d:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110c82:	83 ec 08             	sub    $0x8,%esp
f0110c85:	ff 75 dc             	pushl  -0x24(%ebp)
f0110c88:	50                   	push   %eax
f0110c89:	e8 e1 6b ff ff       	call   f010786f <virtual_to_physical>
f0110c8e:	83 c4 10             	add    $0x10,%esp
f0110c91:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0110c94:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0110c98:	74 17                	je     f0110cb1 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0110c9a:	83 ec 04             	sub    $0x4,%esp
f0110c9d:	68 d4 86 13 f0       	push   $0xf01386d4
f0110ca2:	68 16 01 00 00       	push   $0x116
f0110ca7:	68 7e 82 13 f0       	push   $0xf013827e
f0110cac:	e8 f5 f4 fe ff       	call   f01001a6 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0110cb1:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110cb8:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110cbd:	83 ec 08             	sub    $0x8,%esp
f0110cc0:	ff 75 dc             	pushl  -0x24(%ebp)
f0110cc3:	50                   	push   %eax
f0110cc4:	e8 a6 6b ff ff       	call   f010786f <virtual_to_physical>
f0110cc9:	83 c4 10             	add    $0x10,%esp
f0110ccc:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110ccf:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110cd4:	83 ec 08             	sub    $0x8,%esp
f0110cd7:	ff 75 dc             	pushl  -0x24(%ebp)
f0110cda:	50                   	push   %eax
f0110cdb:	e8 bd 49 00 00       	call   f011569d <CA>
f0110ce0:	83 c4 10             	add    $0x10,%esp
f0110ce3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110ce6:	74 17                	je     f0110cff <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0110ce8:	83 ec 04             	sub    $0x4,%esp
f0110ceb:	68 0c 87 13 f0       	push   $0xf013870c
f0110cf0:	68 1f 01 00 00       	push   $0x11f
f0110cf5:	68 7e 82 13 f0       	push   $0xf013827e
f0110cfa:	e8 a7 f4 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0110cff:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110d05:	bb d8 88 13 f0       	mov    $0xf01388d8,%ebx
f0110d0a:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110d0f:	89 c7                	mov    %eax,%edi
f0110d11:	89 de                	mov    %ebx,%esi
f0110d13:	89 d1                	mov    %edx,%ecx
f0110d15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110d17:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0110d1a:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110d1f:	b0 00                	mov    $0x0,%al
f0110d21:	89 d7                	mov    %edx,%edi
f0110d23:	f3 aa                	rep stos %al,%es:(%edi)
f0110d25:	83 ec 0c             	sub    $0xc,%esp
f0110d28:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110d2e:	50                   	push   %eax
f0110d2f:	e8 5b ff fe ff       	call   f0100c8f <execute_command>
f0110d34:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0110d37:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110d3e:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110d43:	83 ec 08             	sub    $0x8,%esp
f0110d46:	ff 75 dc             	pushl  -0x24(%ebp)
f0110d49:	50                   	push   %eax
f0110d4a:	e8 20 6b ff ff       	call   f010786f <virtual_to_physical>
f0110d4f:	83 c4 10             	add    $0x10,%esp
f0110d52:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110d55:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110d5a:	83 ec 08             	sub    $0x8,%esp
f0110d5d:	ff 75 dc             	pushl  -0x24(%ebp)
f0110d60:	50                   	push   %eax
f0110d61:	e8 37 49 00 00       	call   f011569d <CA>
f0110d66:	83 c4 10             	add    $0x10,%esp
f0110d69:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110d6c:	74 17                	je     f0110d85 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0110d6e:	83 ec 04             	sub    $0x4,%esp
f0110d71:	68 44 87 13 f0       	push   $0xf0138744
f0110d76:	68 28 01 00 00       	push   $0x128
f0110d7b:	68 7e 82 13 f0       	push   $0xf013827e
f0110d80:	e8 21 f4 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0110d85:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110d8b:	bb 3c 89 13 f0       	mov    $0xf013893c,%ebx
f0110d90:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110d95:	89 c7                	mov    %eax,%edi
f0110d97:	89 de                	mov    %ebx,%esi
f0110d99:	89 d1                	mov    %edx,%ecx
f0110d9b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110d9d:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0110da3:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110da8:	b0 00                	mov    $0x0,%al
f0110daa:	89 d7                	mov    %edx,%edi
f0110dac:	f3 aa                	rep stos %al,%es:(%edi)
f0110dae:	83 ec 0c             	sub    $0xc,%esp
f0110db1:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110db7:	50                   	push   %eax
f0110db8:	e8 d2 fe fe ff       	call   f0100c8f <execute_command>
f0110dbd:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0110dc0:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110dc7:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110dcc:	83 ec 08             	sub    $0x8,%esp
f0110dcf:	ff 75 dc             	pushl  -0x24(%ebp)
f0110dd2:	50                   	push   %eax
f0110dd3:	e8 97 6a ff ff       	call   f010786f <virtual_to_physical>
f0110dd8:	83 c4 10             	add    $0x10,%esp
f0110ddb:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110dde:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110de3:	83 ec 08             	sub    $0x8,%esp
f0110de6:	ff 75 dc             	pushl  -0x24(%ebp)
f0110de9:	50                   	push   %eax
f0110dea:	e8 ae 48 00 00       	call   f011569d <CA>
f0110def:	83 c4 10             	add    $0x10,%esp
f0110df2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110df5:	74 17                	je     f0110e0e <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0110df7:	83 ec 04             	sub    $0x4,%esp
f0110dfa:	68 7c 87 13 f0       	push   $0xf013877c
f0110dff:	68 31 01 00 00       	push   $0x131
f0110e04:	68 7e 82 13 f0       	push   $0xf013827e
f0110e09:	e8 98 f3 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0110e0e:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0110e14:	bb a0 89 13 f0       	mov    $0xf01389a0,%ebx
f0110e19:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110e1e:	89 c7                	mov    %eax,%edi
f0110e20:	89 de                	mov    %ebx,%esi
f0110e22:	89 d1                	mov    %edx,%ecx
f0110e24:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110e26:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0110e2c:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110e31:	b0 00                	mov    $0x0,%al
f0110e33:	89 d7                	mov    %edx,%edi
f0110e35:	f3 aa                	rep stos %al,%es:(%edi)
f0110e37:	83 ec 0c             	sub    $0xc,%esp
f0110e3a:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0110e40:	50                   	push   %eax
f0110e41:	e8 49 fe fe ff       	call   f0100c8f <execute_command>
f0110e46:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0110e49:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110e50:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110e55:	83 ec 08             	sub    $0x8,%esp
f0110e58:	ff 75 dc             	pushl  -0x24(%ebp)
f0110e5b:	50                   	push   %eax
f0110e5c:	e8 0e 6a ff ff       	call   f010786f <virtual_to_physical>
f0110e61:	83 c4 10             	add    $0x10,%esp
f0110e64:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110e67:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110e6c:	83 ec 08             	sub    $0x8,%esp
f0110e6f:	ff 75 dc             	pushl  -0x24(%ebp)
f0110e72:	50                   	push   %eax
f0110e73:	e8 25 48 00 00       	call   f011569d <CA>
f0110e78:	83 c4 10             	add    $0x10,%esp
f0110e7b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110e7e:	74 17                	je     f0110e97 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0110e80:	83 ec 04             	sub    $0x4,%esp
f0110e83:	68 b4 87 13 f0       	push   $0xf01387b4
f0110e88:	68 3a 01 00 00       	push   $0x13a
f0110e8d:	68 7e 82 13 f0       	push   $0xf013827e
f0110e92:	e8 0f f3 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001000;
f0110e97:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110e9e:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110ea3:	83 ec 08             	sub    $0x8,%esp
f0110ea6:	ff 75 dc             	pushl  -0x24(%ebp)
f0110ea9:	50                   	push   %eax
f0110eaa:	e8 c0 69 ff ff       	call   f010786f <virtual_to_physical>
f0110eaf:	83 c4 10             	add    $0x10,%esp
f0110eb2:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110eb5:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110eba:	83 ec 08             	sub    $0x8,%esp
f0110ebd:	ff 75 dc             	pushl  -0x24(%ebp)
f0110ec0:	50                   	push   %eax
f0110ec1:	e8 d7 47 00 00       	call   f011569d <CA>
f0110ec6:	83 c4 10             	add    $0x10,%esp
f0110ec9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110ecc:	74 17                	je     f0110ee5 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0110ece:	83 ec 04             	sub    $0x4,%esp
f0110ed1:	68 ec 87 13 f0       	push   $0xf01387ec
f0110ed6:	68 42 01 00 00       	push   $0x142
f0110edb:	68 7e 82 13 f0       	push   $0xf013827e
f0110ee0:	e8 c1 f2 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001005;
f0110ee5:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110eec:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110ef1:	83 ec 08             	sub    $0x8,%esp
f0110ef4:	ff 75 dc             	pushl  -0x24(%ebp)
f0110ef7:	50                   	push   %eax
f0110ef8:	e8 72 69 ff ff       	call   f010786f <virtual_to_physical>
f0110efd:	83 c4 10             	add    $0x10,%esp
f0110f00:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110f03:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110f08:	83 ec 08             	sub    $0x8,%esp
f0110f0b:	ff 75 dc             	pushl  -0x24(%ebp)
f0110f0e:	50                   	push   %eax
f0110f0f:	e8 89 47 00 00       	call   f011569d <CA>
f0110f14:	83 c4 10             	add    $0x10,%esp
f0110f17:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110f1a:	74 17                	je     f0110f33 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0110f1c:	83 ec 04             	sub    $0x4,%esp
f0110f1f:	68 24 88 13 f0       	push   $0xf0138824
f0110f24:	68 4a 01 00 00       	push   $0x14a
f0110f29:	68 7e 82 13 f0       	push   $0xf013827e
f0110f2e:	e8 73 f2 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0110f33:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110f39:	bb 04 8a 13 f0       	mov    $0xf0138a04,%ebx
f0110f3e:	ba 0e 00 00 00       	mov    $0xe,%edx
f0110f43:	89 c7                	mov    %eax,%edi
f0110f45:	89 de                	mov    %ebx,%esi
f0110f47:	89 d1                	mov    %edx,%ecx
f0110f49:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110f4b:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0110f51:	b9 56 00 00 00       	mov    $0x56,%ecx
f0110f56:	b0 00                	mov    $0x0,%al
f0110f58:	89 d7                	mov    %edx,%edi
f0110f5a:	f3 aa                	rep stos %al,%es:(%edi)
f0110f5c:	83 ec 0c             	sub    $0xc,%esp
f0110f5f:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110f65:	50                   	push   %eax
f0110f66:	e8 24 fd fe ff       	call   f0100c8f <execute_command>
f0110f6b:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0110f6e:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110f75:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110f7a:	83 ec 08             	sub    $0x8,%esp
f0110f7d:	ff 75 dc             	pushl  -0x24(%ebp)
f0110f80:	50                   	push   %eax
f0110f81:	e8 e9 68 ff ff       	call   f010786f <virtual_to_physical>
f0110f86:	83 c4 10             	add    $0x10,%esp
f0110f89:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110f8c:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0110f91:	83 ec 08             	sub    $0x8,%esp
f0110f94:	ff 75 dc             	pushl  -0x24(%ebp)
f0110f97:	50                   	push   %eax
f0110f98:	e8 00 47 00 00       	call   f011569d <CA>
f0110f9d:	83 c4 10             	add    $0x10,%esp
f0110fa0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110fa3:	74 17                	je     f0110fbc <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0110fa5:	83 ec 04             	sub    $0x4,%esp
f0110fa8:	68 5c 88 13 f0       	push   $0xf013885c
f0110fad:	68 53 01 00 00       	push   $0x153
f0110fb2:	68 7e 82 13 f0       	push   $0xf013827e
f0110fb7:	e8 ea f1 fe ff       	call   f01001a6 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0110fbc:	83 ec 0c             	sub    $0xc,%esp
f0110fbf:	68 94 88 13 f0       	push   $0xf0138894
f0110fc4:	e8 64 fc fe ff       	call   f0100c2d <cprintf>
f0110fc9:	83 c4 10             	add    $0x10,%esp

	return 0;
f0110fcc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110fd1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110fd4:	5b                   	pop    %ebx
f0110fd5:	5e                   	pop    %esi
f0110fd6:	5f                   	pop    %edi
f0110fd7:	5d                   	pop    %ebp
f0110fd8:	c3                   	ret    

f0110fd9 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0110fd9:	55                   	push   %ebp
f0110fda:	89 e5                	mov    %esp,%ebp
f0110fdc:	57                   	push   %edi
f0110fdd:	56                   	push   %esi
f0110fde:	53                   	push   %ebx
f0110fdf:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0110fe5:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0110feb:	bb 18 8d 13 f0       	mov    $0xf0138d18,%ebx
f0110ff0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110ff5:	89 c7                	mov    %eax,%edi
f0110ff7:	89 de                	mov    %ebx,%esi
f0110ff9:	89 d1                	mov    %edx,%ecx
f0110ffb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110ffd:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111003:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111008:	b0 00                	mov    $0x0,%al
f011100a:	89 d7                	mov    %edx,%edi
f011100c:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011100e:	6a 00                	push   $0x0
f0111010:	6a 0a                	push   $0xa
f0111012:	6a 14                	push   $0x14
f0111014:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011101a:	50                   	push   %eax
f011101b:	e8 7c 77 ff ff       	call   f010879c <env_create>
f0111020:	83 c4 10             	add    $0x10,%esp
f0111023:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111026:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111029:	8b 40 5c             	mov    0x5c(%eax),%eax
f011102c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011102f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111032:	8b 40 60             	mov    0x60(%eax),%eax
f0111035:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111038:	8b 45 90             	mov    -0x70(%ebp),%eax
f011103b:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011103e:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111045:	75 70 20 
f0111048:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f011104f:	00 00 00 
f0111052:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111058:	b9 03 00 00 00       	mov    $0x3,%ecx
f011105d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111062:	89 d7                	mov    %edx,%edi
f0111064:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111066:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111069:	8b 40 4c             	mov    0x4c(%eax),%eax
f011106c:	83 ec 08             	sub    $0x8,%esp
f011106f:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111075:	52                   	push   %edx
f0111076:	50                   	push   %eax
f0111077:	e8 7f fc 01 00       	call   f0130cfb <ltostr>
f011107c:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011107f:	83 ec 04             	sub    $0x4,%esp
f0111082:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111088:	50                   	push   %eax
f0111089:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f011108f:	50                   	push   %eax
f0111090:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111096:	50                   	push   %eax
f0111097:	e8 57 fd 01 00       	call   f0130df3 <strcconcat>
f011109c:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f011109f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f01110a6:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01110ad:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f01110b4:	83 ec 0c             	sub    $0xc,%esp
f01110b7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01110ba:	e8 78 48 00 00       	call   f0115937 <ClearUserSpace>
f01110bf:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f01110c2:	83 ec 04             	sub    $0x4,%esp
f01110c5:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01110cb:	50                   	push   %eax
f01110cc:	68 68 8a 13 f0       	push   $0xf0138a68
f01110d1:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01110d7:	50                   	push   %eax
f01110d8:	e8 16 fd 01 00       	call   f0130df3 <strcconcat>
f01110dd:	83 c4 10             	add    $0x10,%esp
f01110e0:	83 ec 0c             	sub    $0xc,%esp
f01110e3:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01110e9:	50                   	push   %eax
f01110ea:	e8 a0 fb fe ff       	call   f0100c8f <execute_command>
f01110ef:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01110f2:	83 ec 04             	sub    $0x4,%esp
f01110f5:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01110fb:	50                   	push   %eax
f01110fc:	68 73 8a 13 f0       	push   $0xf0138a73
f0111101:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111107:	50                   	push   %eax
f0111108:	e8 e6 fc 01 00       	call   f0130df3 <strcconcat>
f011110d:	83 c4 10             	add    $0x10,%esp
f0111110:	83 ec 0c             	sub    $0xc,%esp
f0111113:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111119:	50                   	push   %eax
f011111a:	e8 70 fb fe ff       	call   f0100c8f <execute_command>
f011111f:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111122:	83 ec 04             	sub    $0x4,%esp
f0111125:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011112b:	50                   	push   %eax
f011112c:	68 7e 8a 13 f0       	push   $0xf0138a7e
f0111131:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111137:	50                   	push   %eax
f0111138:	e8 b6 fc 01 00       	call   f0130df3 <strcconcat>
f011113d:	83 c4 10             	add    $0x10,%esp
f0111140:	83 ec 0c             	sub    $0xc,%esp
f0111143:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111149:	50                   	push   %eax
f011114a:	e8 40 fb fe ff       	call   f0100c8f <execute_command>
f011114f:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111152:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111159:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011115c:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f011115f:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0111166:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111169:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011116c:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111173:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111176:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111179:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011117c:	83 ec 08             	sub    $0x8,%esp
f011117f:	50                   	push   %eax
f0111180:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111183:	e8 16 47 00 00       	call   f011589e <GP>
f0111188:	83 c4 10             	add    $0x10,%esp
f011118b:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f011118e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0111195:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011119c:	e8 47 b3 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01111a1:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01111a4:	83 ec 0c             	sub    $0xc,%esp
f01111a7:	68 8c 8a 13 f0       	push   $0xf0138a8c
f01111ac:	e8 7c fa fe ff       	call   f0100c2d <cprintf>
f01111b1:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01111b4:	6a 03                	push   $0x3
f01111b6:	68 00 00 90 02       	push   $0x2900000
f01111bb:	68 00 00 80 02       	push   $0x2800000
f01111c0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111c3:	e8 e2 70 ff ff       	call   f01082aa <cut_paste_pages>
f01111c8:	83 c4 10             	add    $0x10,%esp
f01111cb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01111ce:	e8 15 b3 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01111d3:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f01111d6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01111dd:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01111e1:	75 08                	jne    f01111eb <test_cut_paste_pages+0x212>
f01111e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01111e6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01111e9:	74 2b                	je     f0111216 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01111eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01111ee:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01111f1:	83 ec 0c             	sub    $0xc,%esp
f01111f4:	50                   	push   %eax
f01111f5:	ff 75 b4             	pushl  -0x4c(%ebp)
f01111f8:	68 bc 8a 13 f0       	push   $0xf0138abc
f01111fd:	68 91 01 00 00       	push   $0x191
f0111202:	68 7e 82 13 f0       	push   $0xf013827e
f0111207:	e8 26 f1 fe ff       	call   f0100332 <_warn>
f011120c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011120f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0111216:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011121a:	74 04                	je     f0111220 <test_cut_paste_pages+0x247>
f011121c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111220:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111227:	83 ec 08             	sub    $0x8,%esp
f011122a:	6a 00                	push   $0x0
f011122c:	6a 01                	push   $0x1
f011122e:	6a 00                	push   $0x0
f0111230:	68 ff 0f 00 00       	push   $0xfff
f0111235:	ff 75 bc             	pushl  -0x44(%ebp)
f0111238:	6a 01                	push   $0x1
f011123a:	68 00 30 00 00       	push   $0x3000
f011123f:	68 00 00 90 02       	push   $0x2900000
f0111244:	68 00 00 80 02       	push   $0x2800000
f0111249:	ff 75 d4             	pushl  -0x2c(%ebp)
f011124c:	e8 1a 47 00 00       	call   f011596b <CCP>
f0111251:	83 c4 30             	add    $0x30,%esp
f0111254:	83 f8 01             	cmp    $0x1,%eax
f0111257:	74 21                	je     f011127a <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111259:	83 ec 04             	sub    $0x4,%esp
f011125c:	68 10 8b 13 f0       	push   $0xf0138b10
f0111261:	68 99 01 00 00       	push   $0x199
f0111266:	68 7e 82 13 f0       	push   $0xf013827e
f011126b:	e8 c2 f0 fe ff       	call   f0100332 <_warn>
f0111270:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111273:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011127a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011127e:	74 04                	je     f0111284 <test_cut_paste_pages+0x2ab>
f0111280:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0111284:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011128b:	83 ec 04             	sub    $0x4,%esp
f011128e:	6a 00                	push   $0x0
f0111290:	68 00 00 90 02       	push   $0x2900000
f0111295:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111298:	e8 5f 41 00 00       	call   f01153fc <CB>
f011129d:	83 c4 10             	add    $0x10,%esp
f01112a0:	85 c0                	test   %eax,%eax
f01112a2:	0f 84 f6 00 00 00    	je     f011139e <test_cut_paste_pages+0x3c5>
f01112a8:	83 ec 04             	sub    $0x4,%esp
f01112ab:	6a 00                	push   $0x0
f01112ad:	68 00 10 90 02       	push   $0x2901000
f01112b2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01112b5:	e8 42 41 00 00       	call   f01153fc <CB>
f01112ba:	83 c4 10             	add    $0x10,%esp
f01112bd:	85 c0                	test   %eax,%eax
f01112bf:	0f 84 d9 00 00 00    	je     f011139e <test_cut_paste_pages+0x3c5>
f01112c5:	83 ec 04             	sub    $0x4,%esp
f01112c8:	6a 00                	push   $0x0
f01112ca:	68 00 20 90 02       	push   $0x2902000
f01112cf:	ff 75 d4             	pushl  -0x2c(%ebp)
f01112d2:	e8 25 41 00 00       	call   f01153fc <CB>
f01112d7:	83 c4 10             	add    $0x10,%esp
f01112da:	85 c0                	test   %eax,%eax
f01112dc:	0f 84 bc 00 00 00    	je     f011139e <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f01112e2:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01112e9:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01112f0:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01112f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01112fa:	8a 00                	mov    (%eax),%al
f01112fc:	3c 61                	cmp    $0x61,%al
f01112fe:	75 12                	jne    f0111312 <test_cut_paste_pages+0x339>
f0111300:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111303:	8a 00                	mov    (%eax),%al
f0111305:	3c 62                	cmp    $0x62,%al
f0111307:	75 09                	jne    f0111312 <test_cut_paste_pages+0x339>
f0111309:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011130c:	8a 00                	mov    (%eax),%al
f011130e:	3c 63                	cmp    $0x63,%al
f0111310:	74 21                	je     f0111333 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111312:	83 ec 04             	sub    $0x4,%esp
f0111315:	68 5c 8b 13 f0       	push   $0xf0138b5c
f011131a:	68 a6 01 00 00       	push   $0x1a6
f011131f:	68 7e 82 13 f0       	push   $0xf013827e
f0111324:	e8 09 f0 fe ff       	call   f0100332 <_warn>
f0111329:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011132c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111333:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111337:	74 04                	je     f011133d <test_cut_paste_pages+0x364>
f0111339:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011133d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0111344:	83 ec 04             	sub    $0x4,%esp
f0111347:	6a 01                	push   $0x1
f0111349:	68 00 10 90 02       	push   $0x2901000
f011134e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111351:	e8 a6 40 00 00       	call   f01153fc <CB>
f0111356:	83 c4 10             	add    $0x10,%esp
f0111359:	85 c0                	test   %eax,%eax
f011135b:	74 41                	je     f011139e <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f011135d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111360:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0111363:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111366:	8a 00                	mov    (%eax),%al
f0111368:	3c 79                	cmp    $0x79,%al
f011136a:	74 21                	je     f011138d <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011136c:	83 ec 04             	sub    $0x4,%esp
f011136f:	68 5c 8b 13 f0       	push   $0xf0138b5c
f0111374:	68 b1 01 00 00       	push   $0x1b1
f0111379:	68 7e 82 13 f0       	push   $0xf013827e
f011137e:	e8 af ef fe ff       	call   f0100332 <_warn>
f0111383:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0111386:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011138d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111391:	74 04                	je     f0111397 <test_cut_paste_pages+0x3be>
f0111393:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0111397:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f011139e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01113a1:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01113a4:	6a 02                	push   $0x2
f01113a6:	68 00 f0 bf 02       	push   $0x2bff000
f01113ab:	68 00 10 90 02       	push   $0x2901000
f01113b0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01113b3:	e8 f2 6e ff ff       	call   f01082aa <cut_paste_pages>
f01113b8:	83 c4 10             	add    $0x10,%esp
f01113bb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01113be:	e8 25 b1 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01113c3:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f01113c6:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01113ca:	75 0b                	jne    f01113d7 <test_cut_paste_pages+0x3fe>
f01113cc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01113cf:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01113d2:	83 f8 01             	cmp    $0x1,%eax
f01113d5:	74 2b                	je     f0111402 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01113d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01113da:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01113dd:	83 ec 0c             	sub    $0xc,%esp
f01113e0:	50                   	push   %eax
f01113e1:	ff 75 b4             	pushl  -0x4c(%ebp)
f01113e4:	68 bc 8a 13 f0       	push   $0xf0138abc
f01113e9:	68 c2 01 00 00       	push   $0x1c2
f01113ee:	68 7e 82 13 f0       	push   $0xf013827e
f01113f3:	e8 3a ef fe ff       	call   f0100332 <_warn>
f01113f8:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01113fb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111402:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111406:	74 04                	je     f011140c <test_cut_paste_pages+0x433>
f0111408:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011140c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111413:	83 ec 08             	sub    $0x8,%esp
f0111416:	6a 00                	push   $0x0
f0111418:	6a 01                	push   $0x1
f011141a:	6a 00                	push   $0x0
f011141c:	68 ff 0f 00 00       	push   $0xfff
f0111421:	ff 75 bc             	pushl  -0x44(%ebp)
f0111424:	6a 01                	push   $0x1
f0111426:	68 00 20 00 00       	push   $0x2000
f011142b:	68 00 f0 bf 02       	push   $0x2bff000
f0111430:	68 00 10 90 02       	push   $0x2901000
f0111435:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111438:	e8 2e 45 00 00       	call   f011596b <CCP>
f011143d:	83 c4 30             	add    $0x30,%esp
f0111440:	83 f8 01             	cmp    $0x1,%eax
f0111443:	74 21                	je     f0111466 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111445:	83 ec 04             	sub    $0x4,%esp
f0111448:	68 10 8b 13 f0       	push   $0xf0138b10
f011144d:	68 ca 01 00 00       	push   $0x1ca
f0111452:	68 7e 82 13 f0       	push   $0xf013827e
f0111457:	e8 d6 ee fe ff       	call   f0100332 <_warn>
f011145c:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011145f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111466:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011146a:	74 04                	je     f0111470 <test_cut_paste_pages+0x497>
f011146c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111470:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0111477:	83 ec 04             	sub    $0x4,%esp
f011147a:	6a 00                	push   $0x0
f011147c:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111481:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111484:	e8 73 3f 00 00       	call   f01153fc <CB>
f0111489:	83 c4 10             	add    $0x10,%esp
f011148c:	85 c0                	test   %eax,%eax
f011148e:	74 6b                	je     f01114fb <test_cut_paste_pages+0x522>
f0111490:	83 ec 04             	sub    $0x4,%esp
f0111493:	6a 00                	push   $0x0
f0111495:	68 ff 0f c0 02       	push   $0x2c00fff
f011149a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011149d:	e8 5a 3f 00 00       	call   f01153fc <CB>
f01114a2:	83 c4 10             	add    $0x10,%esp
f01114a5:	85 c0                	test   %eax,%eax
f01114a7:	74 52                	je     f01114fb <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f01114a9:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f01114b0:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f01114b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01114ba:	8a 00                	mov    (%eax),%al
f01114bc:	3c 79                	cmp    $0x79,%al
f01114be:	75 09                	jne    f01114c9 <test_cut_paste_pages+0x4f0>
f01114c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114c3:	8a 00                	mov    (%eax),%al
f01114c5:	3c 63                	cmp    $0x63,%al
f01114c7:	74 21                	je     f01114ea <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01114c9:	83 ec 04             	sub    $0x4,%esp
f01114cc:	68 5c 8b 13 f0       	push   $0xf0138b5c
f01114d1:	68 d6 01 00 00       	push   $0x1d6
f01114d6:	68 7e 82 13 f0       	push   $0xf013827e
f01114db:	e8 52 ee fe ff       	call   f0100332 <_warn>
f01114e0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01114e3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01114ea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01114ee:	74 04                	je     f01114f4 <test_cut_paste_pages+0x51b>
f01114f0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01114f4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01114fb:	83 ec 0c             	sub    $0xc,%esp
f01114fe:	68 95 8b 13 f0       	push   $0xf0138b95
f0111503:	e8 25 f7 fe ff       	call   f0100c2d <cprintf>
f0111508:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011150b:	83 ec 0c             	sub    $0xc,%esp
f011150e:	68 a4 8b 13 f0       	push   $0xf0138ba4
f0111513:	e8 15 f7 fe ff       	call   f0100c2d <cprintf>
f0111518:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f011151b:	83 ec 04             	sub    $0x4,%esp
f011151e:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111524:	50                   	push   %eax
f0111525:	68 cd 8b 13 f0       	push   $0xf0138bcd
f011152a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111530:	50                   	push   %eax
f0111531:	e8 bd f8 01 00       	call   f0130df3 <strcconcat>
f0111536:	83 c4 10             	add    $0x10,%esp
f0111539:	83 ec 0c             	sub    $0xc,%esp
f011153c:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111542:	50                   	push   %eax
f0111543:	e8 47 f7 fe ff       	call   f0100c8f <execute_command>
f0111548:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011154b:	83 ec 04             	sub    $0x4,%esp
f011154e:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111554:	50                   	push   %eax
f0111555:	68 d8 8b 13 f0       	push   $0xf0138bd8
f011155a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111560:	50                   	push   %eax
f0111561:	e8 8d f8 01 00       	call   f0130df3 <strcconcat>
f0111566:	83 c4 10             	add    $0x10,%esp
f0111569:	83 ec 0c             	sub    $0xc,%esp
f011156c:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111572:	50                   	push   %eax
f0111573:	e8 17 f7 fe ff       	call   f0100c8f <execute_command>
f0111578:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f011157b:	83 ec 04             	sub    $0x4,%esp
f011157e:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111584:	50                   	push   %eax
f0111585:	68 e3 8b 13 f0       	push   $0xf0138be3
f011158a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111590:	50                   	push   %eax
f0111591:	e8 5d f8 01 00       	call   f0130df3 <strcconcat>
f0111596:	83 c4 10             	add    $0x10,%esp
f0111599:	83 ec 0c             	sub    $0xc,%esp
f011159c:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01115a2:	50                   	push   %eax
f01115a3:	e8 e7 f6 fe ff       	call   f0100c8f <execute_command>
f01115a8:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f01115ab:	83 ec 04             	sub    $0x4,%esp
f01115ae:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01115b4:	50                   	push   %eax
f01115b5:	68 ee 8b 13 f0       	push   $0xf0138bee
f01115ba:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01115c0:	50                   	push   %eax
f01115c1:	e8 2d f8 01 00       	call   f0130df3 <strcconcat>
f01115c6:	83 c4 10             	add    $0x10,%esp
f01115c9:	83 ec 0c             	sub    $0xc,%esp
f01115cc:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01115d2:	50                   	push   %eax
f01115d3:	e8 b7 f6 fe ff       	call   f0100c8f <execute_command>
f01115d8:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01115db:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01115e2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01115e5:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01115e8:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01115ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01115f2:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01115f5:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01115fc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01115ff:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0111602:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0111609:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011160c:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f011160f:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0111616:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111619:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f011161c:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0111623:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111626:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0111629:	83 ec 08             	sub    $0x8,%esp
f011162c:	68 00 00 c0 01       	push   $0x1c00000
f0111631:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111634:	e8 65 42 00 00       	call   f011589e <GP>
f0111639:	83 c4 10             	add    $0x10,%esp
f011163c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f011163f:	83 ec 08             	sub    $0x8,%esp
f0111642:	68 00 00 40 01       	push   $0x1400000
f0111647:	ff 75 d4             	pushl  -0x2c(%ebp)
f011164a:	e8 4f 42 00 00       	call   f011589e <GP>
f011164f:	83 c4 10             	add    $0x10,%esp
f0111652:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0111655:	e8 8e ae ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011165a:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f011165d:	6a 01                	push   $0x1
f011165f:	68 00 00 40 01       	push   $0x1400000
f0111664:	68 00 00 c0 01       	push   $0x1c00000
f0111669:	ff 75 d4             	pushl  -0x2c(%ebp)
f011166c:	e8 39 6c ff ff       	call   f01082aa <cut_paste_pages>
f0111671:	83 c4 10             	add    $0x10,%esp
f0111674:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111677:	e8 6c ae ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011167c:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011167f:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111683:	75 08                	jne    f011168d <test_cut_paste_pages+0x6b4>
f0111685:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111688:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011168b:	74 2b                	je     f01116b8 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011168d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111690:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111693:	83 ec 0c             	sub    $0xc,%esp
f0111696:	50                   	push   %eax
f0111697:	ff 75 b4             	pushl  -0x4c(%ebp)
f011169a:	68 fc 8b 13 f0       	push   $0xf0138bfc
f011169f:	68 f9 01 00 00       	push   $0x1f9
f01116a4:	68 7e 82 13 f0       	push   $0xf013827e
f01116a9:	e8 84 ec fe ff       	call   f0100332 <_warn>
f01116ae:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01116b1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01116b8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01116bc:	74 04                	je     f01116c2 <test_cut_paste_pages+0x6e9>
f01116be:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01116c2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f01116c9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01116d0:	83 ec 08             	sub    $0x8,%esp
f01116d3:	6a 00                	push   $0x0
f01116d5:	68 ff 0f 00 00       	push   $0xfff
f01116da:	ff 75 a4             	pushl  -0x5c(%ebp)
f01116dd:	68 ff 0f 00 00       	push   $0xfff
f01116e2:	ff 75 a0             	pushl  -0x60(%ebp)
f01116e5:	6a 01                	push   $0x1
f01116e7:	68 00 10 00 00       	push   $0x1000
f01116ec:	68 00 00 40 01       	push   $0x1400000
f01116f1:	68 00 00 c0 01       	push   $0x1c00000
f01116f6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01116f9:	e8 6d 42 00 00       	call   f011596b <CCP>
f01116fe:	83 c4 30             	add    $0x30,%esp
f0111701:	83 f8 01             	cmp    $0x1,%eax
f0111704:	74 28                	je     f011172e <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111706:	83 ec 04             	sub    $0x4,%esp
f0111709:	68 10 8b 13 f0       	push   $0xf0138b10
f011170e:	68 02 02 00 00       	push   $0x202
f0111713:	68 7e 82 13 f0       	push   $0xf013827e
f0111718:	e8 15 ec fe ff       	call   f0100332 <_warn>
f011171d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111720:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111727:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f011172e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111732:	74 04                	je     f0111738 <test_cut_paste_pages+0x75f>
f0111734:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111738:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f011173f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111743:	0f 84 92 00 00 00    	je     f01117db <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0111749:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111750:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111757:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f011175e:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111765:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011176c:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111773:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111776:	8a 00                	mov    (%eax),%al
f0111778:	3c 61                	cmp    $0x61,%al
f011177a:	75 2d                	jne    f01117a9 <test_cut_paste_pages+0x7d0>
f011177c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011177f:	8a 00                	mov    (%eax),%al
f0111781:	3c 78                	cmp    $0x78,%al
f0111783:	75 24                	jne    f01117a9 <test_cut_paste_pages+0x7d0>
f0111785:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111788:	8a 00                	mov    (%eax),%al
f011178a:	3c 62                	cmp    $0x62,%al
f011178c:	75 1b                	jne    f01117a9 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011178e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111791:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111793:	3c 79                	cmp    $0x79,%al
f0111795:	75 12                	jne    f01117a9 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111797:	8b 45 98             	mov    -0x68(%ebp),%eax
f011179a:	8a 00                	mov    (%eax),%al
f011179c:	3c 63                	cmp    $0x63,%al
f011179e:	75 09                	jne    f01117a9 <test_cut_paste_pages+0x7d0>
f01117a0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01117a3:	8a 00                	mov    (%eax),%al
f01117a5:	3c 7a                	cmp    $0x7a,%al
f01117a7:	74 21                	je     f01117ca <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01117a9:	83 ec 04             	sub    $0x4,%esp
f01117ac:	68 5c 8b 13 f0       	push   $0xf0138b5c
f01117b1:	68 14 02 00 00       	push   $0x214
f01117b6:	68 7e 82 13 f0       	push   $0xf013827e
f01117bb:	e8 72 eb fe ff       	call   f0100332 <_warn>
f01117c0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01117c3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01117ca:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01117ce:	74 04                	je     f01117d4 <test_cut_paste_pages+0x7fb>
f01117d0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01117d4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01117db:	e8 08 ad ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01117e0:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01117e3:	6a 03                	push   $0x3
f01117e5:	68 00 f0 bf 01       	push   $0x1bff000
f01117ea:	68 00 00 40 01       	push   $0x1400000
f01117ef:	ff 75 d4             	pushl  -0x2c(%ebp)
f01117f2:	e8 b3 6a ff ff       	call   f01082aa <cut_paste_pages>
f01117f7:	83 c4 10             	add    $0x10,%esp
f01117fa:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01117fd:	e8 e6 ac ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0111802:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111805:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111809:	75 08                	jne    f0111813 <test_cut_paste_pages+0x83a>
f011180b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011180e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111811:	74 2b                	je     f011183e <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111813:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111816:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111819:	83 ec 0c             	sub    $0xc,%esp
f011181c:	50                   	push   %eax
f011181d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111820:	68 fc 8b 13 f0       	push   $0xf0138bfc
f0111825:	68 23 02 00 00       	push   $0x223
f011182a:	68 7e 82 13 f0       	push   $0xf013827e
f011182f:	e8 fe ea fe ff       	call   f0100332 <_warn>
f0111834:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111837:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011183e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111842:	74 04                	je     f0111848 <test_cut_paste_pages+0x86f>
f0111844:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111848:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f011184f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111856:	83 ec 04             	sub    $0x4,%esp
f0111859:	6a 00                	push   $0x0
f011185b:	68 00 00 40 01       	push   $0x1400000
f0111860:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111863:	e8 94 3b 00 00       	call   f01153fc <CB>
f0111868:	83 c4 10             	add    $0x10,%esp
f011186b:	83 f8 01             	cmp    $0x1,%eax
f011186e:	0f 85 80 00 00 00    	jne    f01118f4 <test_cut_paste_pages+0x91b>
f0111874:	83 ec 04             	sub    $0x4,%esp
f0111877:	6a 00                	push   $0x0
f0111879:	68 00 10 40 01       	push   $0x1401000
f011187e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111881:	e8 76 3b 00 00       	call   f01153fc <CB>
f0111886:	83 c4 10             	add    $0x10,%esp
f0111889:	83 f8 01             	cmp    $0x1,%eax
f011188c:	75 66                	jne    f01118f4 <test_cut_paste_pages+0x91b>
f011188e:	83 ec 04             	sub    $0x4,%esp
f0111891:	6a 00                	push   $0x0
f0111893:	68 00 20 40 01       	push   $0x1402000
f0111898:	ff 75 d4             	pushl  -0x2c(%ebp)
f011189b:	e8 5c 3b 00 00       	call   f01153fc <CB>
f01118a0:	83 c4 10             	add    $0x10,%esp
f01118a3:	83 f8 01             	cmp    $0x1,%eax
f01118a6:	75 4c                	jne    f01118f4 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01118a8:	83 ec 04             	sub    $0x4,%esp
f01118ab:	6a 00                	push   $0x0
f01118ad:	68 00 f0 bf 01       	push   $0x1bff000
f01118b2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01118b5:	e8 42 3b 00 00       	call   f01153fc <CB>
f01118ba:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01118bd:	85 c0                	test   %eax,%eax
f01118bf:	75 33                	jne    f01118f4 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01118c1:	83 ec 04             	sub    $0x4,%esp
f01118c4:	6a 00                	push   $0x0
f01118c6:	68 00 00 c0 01       	push   $0x1c00000
f01118cb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01118ce:	e8 29 3b 00 00       	call   f01153fc <CB>
f01118d3:	83 c4 10             	add    $0x10,%esp
f01118d6:	83 f8 01             	cmp    $0x1,%eax
f01118d9:	75 19                	jne    f01118f4 <test_cut_paste_pages+0x91b>
f01118db:	83 ec 04             	sub    $0x4,%esp
f01118de:	6a 00                	push   $0x0
f01118e0:	68 00 10 c0 01       	push   $0x1c01000
f01118e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01118e8:	e8 0f 3b 00 00       	call   f01153fc <CB>
f01118ed:	83 c4 10             	add    $0x10,%esp
f01118f0:	85 c0                	test   %eax,%eax
f01118f2:	74 28                	je     f011191c <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01118f4:	83 ec 04             	sub    $0x4,%esp
f01118f7:	68 5c 8c 13 f0       	push   $0xf0138c5c
f01118fc:	68 2c 02 00 00       	push   $0x22c
f0111901:	68 7e 82 13 f0       	push   $0xf013827e
f0111906:	e8 27 ea fe ff       	call   f0100332 <_warn>
f011190b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011190e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111915:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f011191c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111920:	74 04                	je     f0111926 <test_cut_paste_pages+0x94d>
f0111922:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111926:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f011192d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111931:	0f 84 99 00 00 00    	je     f01119d0 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0111937:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f011193e:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111945:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f011194c:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111953:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011195a:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111961:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111964:	8a 00                	mov    (%eax),%al
f0111966:	3c 61                	cmp    $0x61,%al
f0111968:	75 2d                	jne    f0111997 <test_cut_paste_pages+0x9be>
f011196a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011196d:	8a 00                	mov    (%eax),%al
f011196f:	3c 78                	cmp    $0x78,%al
f0111971:	75 24                	jne    f0111997 <test_cut_paste_pages+0x9be>
f0111973:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111976:	8a 00                	mov    (%eax),%al
f0111978:	3c 62                	cmp    $0x62,%al
f011197a:	75 1b                	jne    f0111997 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011197c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011197f:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111981:	3c 79                	cmp    $0x79,%al
f0111983:	75 12                	jne    f0111997 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111985:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111988:	8a 00                	mov    (%eax),%al
f011198a:	3c 63                	cmp    $0x63,%al
f011198c:	75 09                	jne    f0111997 <test_cut_paste_pages+0x9be>
f011198e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111991:	8a 00                	mov    (%eax),%al
f0111993:	3c 7a                	cmp    $0x7a,%al
f0111995:	74 28                	je     f01119bf <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0111997:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f011199e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01119a5:	83 ec 04             	sub    $0x4,%esp
f01119a8:	68 5c 8b 13 f0       	push   $0xf0138b5c
f01119ad:	68 40 02 00 00       	push   $0x240
f01119b2:	68 7e 82 13 f0       	push   $0xf013827e
f01119b7:	e8 76 e9 fe ff       	call   f0100332 <_warn>
f01119bc:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f01119bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01119c3:	74 04                	je     f01119c9 <test_cut_paste_pages+0x9f0>
f01119c5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01119c9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f01119d0:	83 ec 0c             	sub    $0xc,%esp
f01119d3:	68 95 8c 13 f0       	push   $0xf0138c95
f01119d8:	e8 50 f2 fe ff       	call   f0100c2d <cprintf>
f01119dd:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01119e0:	83 ec 08             	sub    $0x8,%esp
f01119e3:	ff 75 e4             	pushl  -0x1c(%ebp)
f01119e6:	68 a4 8c 13 f0       	push   $0xf0138ca4
f01119eb:	e8 3d f2 fe ff       	call   f0100c2d <cprintf>
f01119f0:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01119f3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01119f7:	75 10                	jne    f0111a09 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01119f9:	83 ec 0c             	sub    $0xc,%esp
f01119fc:	68 d8 8c 13 f0       	push   $0xf0138cd8
f0111a01:	e8 27 f2 fe ff       	call   f0100c2d <cprintf>
f0111a06:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0111a09:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f0111a0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0111a11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111a14:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0111a17:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111a1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111a1f:	5b                   	pop    %ebx
f0111a20:	5e                   	pop    %esi
f0111a21:	5f                   	pop    %edi
f0111a22:	5d                   	pop    %ebp
f0111a23:	c3                   	ret    

f0111a24 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0111a24:	55                   	push   %ebp
f0111a25:	89 e5                	mov    %esp,%ebp
f0111a27:	57                   	push   %edi
f0111a28:	56                   	push   %esi
f0111a29:	53                   	push   %ebx
f0111a2a:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111a30:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111a36:	bb 18 8d 13 f0       	mov    $0xf0138d18,%ebx
f0111a3b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111a40:	89 c7                	mov    %eax,%edi
f0111a42:	89 de                	mov    %ebx,%esi
f0111a44:	89 d1                	mov    %edx,%ecx
f0111a46:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111a48:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111a4e:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111a53:	b0 00                	mov    $0x0,%al
f0111a55:	89 d7                	mov    %edx,%edi
f0111a57:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111a59:	6a 00                	push   $0x0
f0111a5b:	6a 0a                	push   $0xa
f0111a5d:	6a 14                	push   $0x14
f0111a5f:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111a65:	50                   	push   %eax
f0111a66:	e8 31 6d ff ff       	call   f010879c <env_create>
f0111a6b:	83 c4 10             	add    $0x10,%esp
f0111a6e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111a71:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111a74:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111a77:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111a7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111a7d:	8b 40 60             	mov    0x60(%eax),%eax
f0111a80:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0111a86:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111a8c:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111a8f:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0111a96:	75 70 20 
f0111a99:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0111aa0:	00 00 00 
f0111aa3:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111aa9:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111aae:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ab3:	89 d7                	mov    %edx,%edi
f0111ab5:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111ab7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111aba:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111abd:	83 ec 08             	sub    $0x8,%esp
f0111ac0:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0111ac6:	52                   	push   %edx
f0111ac7:	50                   	push   %eax
f0111ac8:	e8 2e f2 01 00       	call   f0130cfb <ltostr>
f0111acd:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111ad0:	83 ec 04             	sub    $0x4,%esp
f0111ad3:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111ad9:	50                   	push   %eax
f0111ada:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0111ae0:	50                   	push   %eax
f0111ae1:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0111ae7:	50                   	push   %eax
f0111ae8:	e8 06 f3 01 00       	call   f0130df3 <strcconcat>
f0111aed:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0111af0:	83 ec 0c             	sub    $0xc,%esp
f0111af3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111af6:	e8 3c 3e 00 00       	call   f0115937 <ClearUserSpace>
f0111afb:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0111afe:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0111b05:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0111b0c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0111b13:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0111b1a:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0111b21:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0111b28:	83 ec 0c             	sub    $0xc,%esp
f0111b2b:	68 4c 8d 13 f0       	push   $0xf0138d4c
f0111b30:	e8 f8 f0 fe ff       	call   f0100c2d <cprintf>
f0111b35:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0111b38:	83 ec 04             	sub    $0x4,%esp
f0111b3b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111b41:	50                   	push   %eax
f0111b42:	68 82 8d 13 f0       	push   $0xf0138d82
f0111b47:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111b4d:	50                   	push   %eax
f0111b4e:	e8 a0 f2 01 00       	call   f0130df3 <strcconcat>
f0111b53:	83 c4 10             	add    $0x10,%esp
f0111b56:	83 ec 0c             	sub    $0xc,%esp
f0111b59:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111b5f:	50                   	push   %eax
f0111b60:	e8 2a f1 fe ff       	call   f0100c8f <execute_command>
f0111b65:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0111b68:	83 ec 04             	sub    $0x4,%esp
f0111b6b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111b71:	50                   	push   %eax
f0111b72:	68 87 8d 13 f0       	push   $0xf0138d87
f0111b77:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111b7d:	50                   	push   %eax
f0111b7e:	e8 70 f2 01 00       	call   f0130df3 <strcconcat>
f0111b83:	83 c4 10             	add    $0x10,%esp
f0111b86:	83 ec 0c             	sub    $0xc,%esp
f0111b89:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111b8f:	50                   	push   %eax
f0111b90:	e8 fa f0 fe ff       	call   f0100c8f <execute_command>
f0111b95:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0111b98:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111b9e:	bb 8d 90 13 f0       	mov    $0xf013908d,%ebx
f0111ba3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111ba8:	89 c7                	mov    %eax,%edi
f0111baa:	89 de                	mov    %ebx,%esi
f0111bac:	89 d1                	mov    %edx,%ecx
f0111bae:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111bb0:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0111bb6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111bbb:	b0 00                	mov    $0x0,%al
f0111bbd:	89 d7                	mov    %edx,%edi
f0111bbf:	f3 aa                	rep stos %al,%es:(%edi)
f0111bc1:	83 ec 0c             	sub    $0xc,%esp
f0111bc4:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111bca:	50                   	push   %eax
f0111bcb:	e8 bf f0 fe ff       	call   f0100c8f <execute_command>
f0111bd0:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0111bd3:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111bd9:	bb f1 90 13 f0       	mov    $0xf01390f1,%ebx
f0111bde:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111be3:	89 c7                	mov    %eax,%edi
f0111be5:	89 de                	mov    %ebx,%esi
f0111be7:	89 d1                	mov    %edx,%ecx
f0111be9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111beb:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0111bf1:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111bf6:	b0 00                	mov    $0x0,%al
f0111bf8:	89 d7                	mov    %edx,%edi
f0111bfa:	f3 aa                	rep stos %al,%es:(%edi)
f0111bfc:	83 ec 0c             	sub    $0xc,%esp
f0111bff:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111c05:	50                   	push   %eax
f0111c06:	e8 84 f0 fe ff       	call   f0100c8f <execute_command>
f0111c0b:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0111c0e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111c14:	bb 55 91 13 f0       	mov    $0xf0139155,%ebx
f0111c19:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c1e:	89 c7                	mov    %eax,%edi
f0111c20:	89 de                	mov    %ebx,%esi
f0111c22:	89 d1                	mov    %edx,%ecx
f0111c24:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c26:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0111c2c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c31:	b0 00                	mov    $0x0,%al
f0111c33:	89 d7                	mov    %edx,%edi
f0111c35:	f3 aa                	rep stos %al,%es:(%edi)
f0111c37:	83 ec 0c             	sub    $0xc,%esp
f0111c3a:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111c40:	50                   	push   %eax
f0111c41:	e8 49 f0 fe ff       	call   f0100c8f <execute_command>
f0111c46:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0111c49:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111c4f:	bb b9 91 13 f0       	mov    $0xf01391b9,%ebx
f0111c54:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c59:	89 c7                	mov    %eax,%edi
f0111c5b:	89 de                	mov    %ebx,%esi
f0111c5d:	89 d1                	mov    %edx,%ecx
f0111c5f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c61:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0111c67:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c6c:	b0 00                	mov    $0x0,%al
f0111c6e:	89 d7                	mov    %edx,%edi
f0111c70:	f3 aa                	rep stos %al,%es:(%edi)
f0111c72:	83 ec 0c             	sub    $0xc,%esp
f0111c75:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111c7b:	50                   	push   %eax
f0111c7c:	e8 0e f0 fe ff       	call   f0100c8f <execute_command>
f0111c81:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0111c84:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111c8a:	bb 1d 92 13 f0       	mov    $0xf013921d,%ebx
f0111c8f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c94:	89 c7                	mov    %eax,%edi
f0111c96:	89 de                	mov    %ebx,%esi
f0111c98:	89 d1                	mov    %edx,%ecx
f0111c9a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c9c:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0111ca2:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111ca7:	b0 00                	mov    $0x0,%al
f0111ca9:	89 d7                	mov    %edx,%edi
f0111cab:	f3 aa                	rep stos %al,%es:(%edi)
f0111cad:	83 ec 0c             	sub    $0xc,%esp
f0111cb0:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111cb6:	50                   	push   %eax
f0111cb7:	e8 d3 ef fe ff       	call   f0100c8f <execute_command>
f0111cbc:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0111cbf:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111cc5:	bb 81 92 13 f0       	mov    $0xf0139281,%ebx
f0111cca:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111ccf:	89 c7                	mov    %eax,%edi
f0111cd1:	89 de                	mov    %ebx,%esi
f0111cd3:	89 d1                	mov    %edx,%ecx
f0111cd5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111cd7:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0111cdd:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111ce2:	b0 00                	mov    $0x0,%al
f0111ce4:	89 d7                	mov    %edx,%edi
f0111ce6:	f3 aa                	rep stos %al,%es:(%edi)
f0111ce8:	83 ec 0c             	sub    $0xc,%esp
f0111ceb:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111cf1:	50                   	push   %eax
f0111cf2:	e8 98 ef fe ff       	call   f0100c8f <execute_command>
f0111cf7:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0111cfa:	83 ec 04             	sub    $0x4,%esp
f0111cfd:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111d03:	50                   	push   %eax
f0111d04:	68 8f 8d 13 f0       	push   $0xf0138d8f
f0111d09:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111d0f:	50                   	push   %eax
f0111d10:	e8 de f0 01 00       	call   f0130df3 <strcconcat>
f0111d15:	83 c4 10             	add    $0x10,%esp
f0111d18:	83 ec 0c             	sub    $0xc,%esp
f0111d1b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111d21:	50                   	push   %eax
f0111d22:	e8 68 ef fe ff       	call   f0100c8f <execute_command>
f0111d27:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0111d2a:	83 ec 04             	sub    $0x4,%esp
f0111d2d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111d33:	50                   	push   %eax
f0111d34:	68 99 8d 13 f0       	push   $0xf0138d99
f0111d39:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111d3f:	50                   	push   %eax
f0111d40:	e8 ae f0 01 00       	call   f0130df3 <strcconcat>
f0111d45:	83 c4 10             	add    $0x10,%esp
f0111d48:	83 ec 0c             	sub    $0xc,%esp
f0111d4b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111d51:	50                   	push   %eax
f0111d52:	e8 38 ef fe ff       	call   f0100c8f <execute_command>
f0111d57:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0111d5a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111d60:	bb e5 92 13 f0       	mov    $0xf01392e5,%ebx
f0111d65:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111d6a:	89 c7                	mov    %eax,%edi
f0111d6c:	89 de                	mov    %ebx,%esi
f0111d6e:	89 d1                	mov    %edx,%ecx
f0111d70:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111d72:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111d78:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111d7d:	b0 00                	mov    $0x0,%al
f0111d7f:	89 d7                	mov    %edx,%edi
f0111d81:	f3 aa                	rep stos %al,%es:(%edi)
f0111d83:	83 ec 0c             	sub    $0xc,%esp
f0111d86:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111d8c:	50                   	push   %eax
f0111d8d:	e8 fd ee fe ff       	call   f0100c8f <execute_command>
f0111d92:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0111d95:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111d9b:	bb 49 93 13 f0       	mov    $0xf0139349,%ebx
f0111da0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111da5:	89 c7                	mov    %eax,%edi
f0111da7:	89 de                	mov    %ebx,%esi
f0111da9:	89 d1                	mov    %edx,%ecx
f0111dab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111dad:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111db3:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111db8:	b0 00                	mov    $0x0,%al
f0111dba:	89 d7                	mov    %edx,%edi
f0111dbc:	f3 aa                	rep stos %al,%es:(%edi)
f0111dbe:	83 ec 0c             	sub    $0xc,%esp
f0111dc1:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111dc7:	50                   	push   %eax
f0111dc8:	e8 c2 ee fe ff       	call   f0100c8f <execute_command>
f0111dcd:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0111dd0:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111dd6:	bb ad 93 13 f0       	mov    $0xf01393ad,%ebx
f0111ddb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111de0:	89 c7                	mov    %eax,%edi
f0111de2:	89 de                	mov    %ebx,%esi
f0111de4:	89 d1                	mov    %edx,%ecx
f0111de6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111de8:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0111dee:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111df3:	b0 00                	mov    $0x0,%al
f0111df5:	89 d7                	mov    %edx,%edi
f0111df7:	f3 aa                	rep stos %al,%es:(%edi)
f0111df9:	83 ec 0c             	sub    $0xc,%esp
f0111dfc:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111e02:	50                   	push   %eax
f0111e03:	e8 87 ee fe ff       	call   f0100c8f <execute_command>
f0111e08:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0111e0b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0111e12:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0111e19:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0111e20:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0111e27:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0111e2e:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0111e35:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0111e3c:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0111e43:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0111e4a:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0111e51:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0111e58:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0111e5f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111e62:	8a 00                	mov    (%eax),%al
f0111e64:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0111e6a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111e6d:	8a 00                	mov    (%eax),%al
f0111e6f:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0111e75:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111e78:	8a 00                	mov    (%eax),%al
f0111e7a:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111e80:	e8 63 a6 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0111e85:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0111e88:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111e8b:	89 d0                	mov    %edx,%eax
f0111e8d:	01 c0                	add    %eax,%eax
f0111e8f:	01 d0                	add    %edx,%eax
f0111e91:	01 c0                	add    %eax,%eax
f0111e93:	50                   	push   %eax
f0111e94:	68 00 00 10 00       	push   $0x100000
f0111e99:	6a 00                	push   $0x0
f0111e9b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e9e:	e8 85 65 ff ff       	call   f0108428 <copy_paste_chunk>
f0111ea3:	83 c4 10             	add    $0x10,%esp
f0111ea6:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111ea9:	e8 3a a6 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0111eae:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111eb1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111eb8:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0111ebc:	75 08                	jne    f0111ec6 <test_copy_paste_chunk+0x4a2>
f0111ebe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111ec1:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111ec4:	74 2b                	je     f0111ef1 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111ec6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111ec9:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111ecc:	83 ec 0c             	sub    $0xc,%esp
f0111ecf:	50                   	push   %eax
f0111ed0:	ff 75 88             	pushl  -0x78(%ebp)
f0111ed3:	68 a8 8d 13 f0       	push   $0xf0138da8
f0111ed8:	68 93 02 00 00       	push   $0x293
f0111edd:	68 7e 82 13 f0       	push   $0xf013827e
f0111ee2:	e8 4b e4 fe ff       	call   f0100332 <_warn>
f0111ee7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111eea:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111ef1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ef5:	74 04                	je     f0111efb <test_copy_paste_chunk+0x4d7>
f0111ef7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111efb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0111f02:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111f05:	8a 00                	mov    (%eax),%al
f0111f07:	3c 61                	cmp    $0x61,%al
f0111f09:	75 75                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f0b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111f0e:	8a 00                	mov    (%eax),%al
f0111f10:	3c 78                	cmp    $0x78,%al
f0111f12:	75 6c                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f14:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111f17:	8a 00                	mov    (%eax),%al
f0111f19:	3c 62                	cmp    $0x62,%al
f0111f1b:	75 63                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f1d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111f20:	8a 00                	mov    (%eax),%al
f0111f22:	3c 79                	cmp    $0x79,%al
f0111f24:	75 5a                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f26:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f29:	8a 00                	mov    (%eax),%al
f0111f2b:	3c 63                	cmp    $0x63,%al
f0111f2d:	75 51                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f2f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111f32:	8a 00                	mov    (%eax),%al
f0111f34:	3c 7a                	cmp    $0x7a,%al
f0111f36:	75 48                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0111f38:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111f3b:	8a 00                	mov    (%eax),%al
f0111f3d:	3c 64                	cmp    $0x64,%al
f0111f3f:	75 3f                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f41:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111f44:	8a 10                	mov    (%eax),%dl
f0111f46:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0111f4c:	38 c2                	cmp    %al,%dl
f0111f4e:	75 30                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f50:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111f53:	8a 00                	mov    (%eax),%al
f0111f55:	3c 65                	cmp    $0x65,%al
f0111f57:	75 27                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f59:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111f5c:	8a 10                	mov    (%eax),%dl
f0111f5e:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0111f64:	38 c2                	cmp    %al,%dl
f0111f66:	75 18                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f68:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111f6b:	8a 00                	mov    (%eax),%al
f0111f6d:	3c 66                	cmp    $0x66,%al
f0111f6f:	75 0f                	jne    f0111f80 <test_copy_paste_chunk+0x55c>
f0111f71:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111f74:	8a 10                	mov    (%eax),%dl
f0111f76:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111f7c:	38 c2                	cmp    %al,%dl
f0111f7e:	74 21                	je     f0111fa1 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111f80:	83 ec 04             	sub    $0x4,%esp
f0111f83:	68 0c 8e 13 f0       	push   $0xf0138e0c
f0111f88:	68 9c 02 00 00       	push   $0x29c
f0111f8d:	68 7e 82 13 f0       	push   $0xf013827e
f0111f92:	e8 9b e3 fe ff       	call   f0100332 <_warn>
f0111f97:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111f9a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111fa1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111fa5:	74 04                	je     f0111fab <test_copy_paste_chunk+0x587>
f0111fa7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111fab:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0111fb2:	83 ec 0c             	sub    $0xc,%esp
f0111fb5:	68 46 8e 13 f0       	push   $0xf0138e46
f0111fba:	e8 6e ec fe ff       	call   f0100c2d <cprintf>
f0111fbf:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0111fc2:	83 ec 0c             	sub    $0xc,%esp
f0111fc5:	68 58 8e 13 f0       	push   $0xf0138e58
f0111fca:	e8 5e ec fe ff       	call   f0100c2d <cprintf>
f0111fcf:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0111fd2:	83 ec 04             	sub    $0x4,%esp
f0111fd5:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111fdb:	50                   	push   %eax
f0111fdc:	68 8e 8e 13 f0       	push   $0xf0138e8e
f0111fe1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111fe7:	50                   	push   %eax
f0111fe8:	e8 06 ee 01 00       	call   f0130df3 <strcconcat>
f0111fed:	83 c4 10             	add    $0x10,%esp
f0111ff0:	83 ec 0c             	sub    $0xc,%esp
f0111ff3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111ff9:	50                   	push   %eax
f0111ffa:	e8 90 ec fe ff       	call   f0100c8f <execute_command>
f0111fff:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112002:	83 ec 04             	sub    $0x4,%esp
f0112005:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011200b:	50                   	push   %eax
f011200c:	68 98 8e 13 f0       	push   $0xf0138e98
f0112011:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112017:	50                   	push   %eax
f0112018:	e8 d6 ed 01 00       	call   f0130df3 <strcconcat>
f011201d:	83 c4 10             	add    $0x10,%esp
f0112020:	83 ec 0c             	sub    $0xc,%esp
f0112023:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112029:	50                   	push   %eax
f011202a:	e8 60 ec fe ff       	call   f0100c8f <execute_command>
f011202f:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112032:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112038:	bb 11 94 13 f0       	mov    $0xf0139411,%ebx
f011203d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112042:	89 c7                	mov    %eax,%edi
f0112044:	89 de                	mov    %ebx,%esi
f0112046:	89 d1                	mov    %edx,%ecx
f0112048:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011204a:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112050:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112055:	b0 00                	mov    $0x0,%al
f0112057:	89 d7                	mov    %edx,%edi
f0112059:	f3 aa                	rep stos %al,%es:(%edi)
f011205b:	83 ec 0c             	sub    $0xc,%esp
f011205e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112064:	50                   	push   %eax
f0112065:	e8 25 ec fe ff       	call   f0100c8f <execute_command>
f011206a:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f011206d:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112073:	bb 75 94 13 f0       	mov    $0xf0139475,%ebx
f0112078:	ba 0f 00 00 00       	mov    $0xf,%edx
f011207d:	89 c7                	mov    %eax,%edi
f011207f:	89 de                	mov    %ebx,%esi
f0112081:	89 d1                	mov    %edx,%ecx
f0112083:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112085:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011208b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112090:	b0 00                	mov    $0x0,%al
f0112092:	89 d7                	mov    %edx,%edi
f0112094:	f3 aa                	rep stos %al,%es:(%edi)
f0112096:	83 ec 0c             	sub    $0xc,%esp
f0112099:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011209f:	50                   	push   %eax
f01120a0:	e8 ea eb fe ff       	call   f0100c8f <execute_command>
f01120a5:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f01120a8:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01120ae:	bb d9 94 13 f0       	mov    $0xf01394d9,%ebx
f01120b3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01120b8:	89 c7                	mov    %eax,%edi
f01120ba:	89 de                	mov    %ebx,%esi
f01120bc:	89 d1                	mov    %edx,%ecx
f01120be:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120c0:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01120c6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01120cb:	b0 00                	mov    $0x0,%al
f01120cd:	89 d7                	mov    %edx,%edi
f01120cf:	f3 aa                	rep stos %al,%es:(%edi)
f01120d1:	83 ec 0c             	sub    $0xc,%esp
f01120d4:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01120da:	50                   	push   %eax
f01120db:	e8 af eb fe ff       	call   f0100c8f <execute_command>
f01120e0:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f01120e3:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01120e9:	bb 3d 95 13 f0       	mov    $0xf013953d,%ebx
f01120ee:	ba 0f 00 00 00       	mov    $0xf,%edx
f01120f3:	89 c7                	mov    %eax,%edi
f01120f5:	89 de                	mov    %ebx,%esi
f01120f7:	89 d1                	mov    %edx,%ecx
f01120f9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120fb:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112101:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112106:	b0 00                	mov    $0x0,%al
f0112108:	89 d7                	mov    %edx,%edi
f011210a:	f3 aa                	rep stos %al,%es:(%edi)
f011210c:	83 ec 0c             	sub    $0xc,%esp
f011210f:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112115:	50                   	push   %eax
f0112116:	e8 74 eb fe ff       	call   f0100c8f <execute_command>
f011211b:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f011211e:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112124:	bb a1 95 13 f0       	mov    $0xf01395a1,%ebx
f0112129:	ba 0f 00 00 00       	mov    $0xf,%edx
f011212e:	89 c7                	mov    %eax,%edi
f0112130:	89 de                	mov    %ebx,%esi
f0112132:	89 d1                	mov    %edx,%ecx
f0112134:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112136:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f011213c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112141:	b0 00                	mov    $0x0,%al
f0112143:	89 d7                	mov    %edx,%edi
f0112145:	f3 aa                	rep stos %al,%es:(%edi)
f0112147:	83 ec 0c             	sub    $0xc,%esp
f011214a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112150:	50                   	push   %eax
f0112151:	e8 39 eb fe ff       	call   f0100c8f <execute_command>
f0112156:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112159:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011215f:	bb 05 96 13 f0       	mov    $0xf0139605,%ebx
f0112164:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112169:	89 c7                	mov    %eax,%edi
f011216b:	89 de                	mov    %ebx,%esi
f011216d:	89 d1                	mov    %edx,%ecx
f011216f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112171:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112177:	b9 55 00 00 00       	mov    $0x55,%ecx
f011217c:	b0 00                	mov    $0x0,%al
f011217e:	89 d7                	mov    %edx,%edi
f0112180:	f3 aa                	rep stos %al,%es:(%edi)
f0112182:	83 ec 0c             	sub    $0xc,%esp
f0112185:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011218b:	50                   	push   %eax
f011218c:	e8 fe ea fe ff       	call   f0100c8f <execute_command>
f0112191:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0112194:	83 ec 04             	sub    $0x4,%esp
f0112197:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011219d:	50                   	push   %eax
f011219e:	68 a2 8e 13 f0       	push   $0xf0138ea2
f01121a3:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01121a9:	50                   	push   %eax
f01121aa:	e8 44 ec 01 00       	call   f0130df3 <strcconcat>
f01121af:	83 c4 10             	add    $0x10,%esp
f01121b2:	83 ec 0c             	sub    $0xc,%esp
f01121b5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121bb:	50                   	push   %eax
f01121bc:	e8 ce ea fe ff       	call   f0100c8f <execute_command>
f01121c1:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01121c4:	83 ec 04             	sub    $0x4,%esp
f01121c7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121cd:	50                   	push   %eax
f01121ce:	68 ac 8e 13 f0       	push   $0xf0138eac
f01121d3:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01121d9:	50                   	push   %eax
f01121da:	e8 14 ec 01 00       	call   f0130df3 <strcconcat>
f01121df:	83 c4 10             	add    $0x10,%esp
f01121e2:	83 ec 0c             	sub    $0xc,%esp
f01121e5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121eb:	50                   	push   %eax
f01121ec:	e8 9e ea fe ff       	call   f0100c8f <execute_command>
f01121f1:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01121f4:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01121fa:	bb 69 96 13 f0       	mov    $0xf0139669,%ebx
f01121ff:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112204:	89 c7                	mov    %eax,%edi
f0112206:	89 de                	mov    %ebx,%esi
f0112208:	89 d1                	mov    %edx,%ecx
f011220a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011220c:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112212:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112217:	b0 00                	mov    $0x0,%al
f0112219:	89 d7                	mov    %edx,%edi
f011221b:	f3 aa                	rep stos %al,%es:(%edi)
f011221d:	83 ec 0c             	sub    $0xc,%esp
f0112220:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112226:	50                   	push   %eax
f0112227:	e8 63 ea fe ff       	call   f0100c8f <execute_command>
f011222c:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f011222f:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112235:	bb cd 96 13 f0       	mov    $0xf01396cd,%ebx
f011223a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011223f:	89 c7                	mov    %eax,%edi
f0112241:	89 de                	mov    %ebx,%esi
f0112243:	89 d1                	mov    %edx,%ecx
f0112245:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112247:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011224d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112252:	b0 00                	mov    $0x0,%al
f0112254:	89 d7                	mov    %edx,%edi
f0112256:	f3 aa                	rep stos %al,%es:(%edi)
f0112258:	83 ec 0c             	sub    $0xc,%esp
f011225b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112261:	50                   	push   %eax
f0112262:	e8 28 ea fe ff       	call   f0100c8f <execute_command>
f0112267:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f011226a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112270:	bb 31 97 13 f0       	mov    $0xf0139731,%ebx
f0112275:	ba 0f 00 00 00       	mov    $0xf,%edx
f011227a:	89 c7                	mov    %eax,%edi
f011227c:	89 de                	mov    %ebx,%esi
f011227e:	89 d1                	mov    %edx,%ecx
f0112280:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112282:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112288:	b9 55 00 00 00       	mov    $0x55,%ecx
f011228d:	b0 00                	mov    $0x0,%al
f011228f:	89 d7                	mov    %edx,%edi
f0112291:	f3 aa                	rep stos %al,%es:(%edi)
f0112293:	83 ec 0c             	sub    $0xc,%esp
f0112296:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011229c:	50                   	push   %eax
f011229d:	e8 ed e9 fe ff       	call   f0100c8f <execute_command>
f01122a2:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01122a5:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01122ac:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01122b3:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01122ba:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01122c1:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01122c8:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01122cf:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f01122d6:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01122dd:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01122e4:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01122eb:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01122f2:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01122f9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01122fc:	8a 00                	mov    (%eax),%al
f01122fe:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112304:	e8 df a1 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112309:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f011230c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011230f:	89 d0                	mov    %edx,%eax
f0112311:	01 c0                	add    %eax,%eax
f0112313:	01 d0                	add    %edx,%eax
f0112315:	01 c0                	add    %eax,%eax
f0112317:	50                   	push   %eax
f0112318:	68 00 00 40 00       	push   $0x400000
f011231d:	68 00 00 20 00       	push   $0x200000
f0112322:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112325:	e8 fe 60 ff ff       	call   f0108428 <copy_paste_chunk>
f011232a:	83 c4 10             	add    $0x10,%esp
f011232d:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112330:	e8 b3 a1 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112335:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112338:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011233f:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112343:	75 08                	jne    f011234d <test_copy_paste_chunk+0x929>
f0112345:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112348:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011234b:	74 2b                	je     f0112378 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011234d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112350:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112353:	83 ec 0c             	sub    $0xc,%esp
f0112356:	50                   	push   %eax
f0112357:	ff 75 80             	pushl  -0x80(%ebp)
f011235a:	68 b8 8e 13 f0       	push   $0xf0138eb8
f011235f:	68 cc 02 00 00       	push   $0x2cc
f0112364:	68 7e 82 13 f0       	push   $0xf013827e
f0112369:	e8 c4 df fe ff       	call   f0100332 <_warn>
f011236e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112371:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112378:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011237c:	74 04                	je     f0112382 <test_copy_paste_chunk+0x95e>
f011237e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112382:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0112389:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0112390:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112393:	83 ec 08             	sub    $0x8,%esp
f0112396:	6a 01                	push   $0x1
f0112398:	6a 07                	push   $0x7
f011239a:	6a 07                	push   $0x7
f011239c:	6a 07                	push   $0x7
f011239e:	6a 07                	push   $0x7
f01123a0:	6a 01                	push   $0x1
f01123a2:	68 00 20 00 00       	push   $0x2000
f01123a7:	68 00 00 40 00       	push   $0x400000
f01123ac:	68 00 00 20 00       	push   $0x200000
f01123b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123b4:	e8 b2 35 00 00       	call   f011596b <CCP>
f01123b9:	83 c4 30             	add    $0x30,%esp
f01123bc:	83 f8 01             	cmp    $0x1,%eax
f01123bf:	74 2b                	je     f01123ec <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01123c1:	83 ec 04             	sub    $0x4,%esp
f01123c4:	68 0c 8f 13 f0       	push   $0xf0138f0c
f01123c9:	68 d5 02 00 00       	push   $0x2d5
f01123ce:	68 7e 82 13 f0       	push   $0xf013827e
f01123d3:	e8 5a df fe ff       	call   f0100332 <_warn>
f01123d8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01123db:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01123e2:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01123e9:	00 00 00 
		}
		if (correct) eval += 5 ;
f01123ec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123f0:	74 04                	je     f01123f6 <test_copy_paste_chunk+0x9d2>
f01123f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01123f6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01123fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112400:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0112403:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112406:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0112409:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011240c:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f011240f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112412:	8a 00                	mov    (%eax),%al
f0112414:	3c 61                	cmp    $0x61,%al
f0112416:	75 69                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f0112418:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011241b:	8a 00                	mov    (%eax),%al
f011241d:	3c 61                	cmp    $0x61,%al
f011241f:	75 60                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f0112421:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112424:	8a 00                	mov    (%eax),%al
f0112426:	3c 79                	cmp    $0x79,%al
f0112428:	75 57                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f011242a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011242d:	8a 00                	mov    (%eax),%al
f011242f:	3c 62                	cmp    $0x62,%al
f0112431:	75 4e                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f0112433:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112436:	8a 00                	mov    (%eax),%al
f0112438:	3c 63                	cmp    $0x63,%al
f011243a:	75 45                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f011243c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011243f:	8a 00                	mov    (%eax),%al
f0112441:	3c 7a                	cmp    $0x7a,%al
f0112443:	75 3c                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0112445:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112448:	8a 00                	mov    (%eax),%al
f011244a:	3c 77                	cmp    $0x77,%al
f011244c:	75 33                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f011244e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112451:	8a 00                	mov    (%eax),%al
f0112453:	3c 64                	cmp    $0x64,%al
f0112455:	75 2a                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f0112457:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011245a:	8a 00                	mov    (%eax),%al
f011245c:	3c 65                	cmp    $0x65,%al
f011245e:	75 21                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f0112460:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112463:	8a 00                	mov    (%eax),%al
f0112465:	3c 65                	cmp    $0x65,%al
f0112467:	75 18                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f0112469:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011246c:	8a 00                	mov    (%eax),%al
f011246e:	3c 66                	cmp    $0x66,%al
f0112470:	75 0f                	jne    f0112481 <test_copy_paste_chunk+0xa5d>
f0112472:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112475:	8a 10                	mov    (%eax),%dl
f0112477:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011247d:	38 c2                	cmp    %al,%dl
f011247f:	74 21                	je     f01124a2 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112481:	83 ec 04             	sub    $0x4,%esp
f0112484:	68 0c 8e 13 f0       	push   $0xf0138e0c
f0112489:	68 e3 02 00 00       	push   $0x2e3
f011248e:	68 7e 82 13 f0       	push   $0xf013827e
f0112493:	e8 9a de fe ff       	call   f0100332 <_warn>
f0112498:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011249b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01124a2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01124a6:	74 04                	je     f01124ac <test_copy_paste_chunk+0xa88>
f01124a8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01124ac:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f01124b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01124b6:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01124b9:	e8 2a a0 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01124be:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f01124c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01124c4:	89 c2                	mov    %eax,%edx
f01124c6:	01 d2                	add    %edx,%edx
f01124c8:	01 d0                	add    %edx,%eax
f01124ca:	50                   	push   %eax
f01124cb:	68 00 08 20 00       	push   $0x200800
f01124d0:	68 00 08 40 00       	push   $0x400800
f01124d5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124d8:	e8 4b 5f ff ff       	call   f0108428 <copy_paste_chunk>
f01124dd:	83 c4 10             	add    $0x10,%esp
f01124e0:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01124e3:	e8 00 a0 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01124e8:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01124eb:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01124ef:	75 08                	jne    f01124f9 <test_copy_paste_chunk+0xad5>
f01124f1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01124f4:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01124f7:	74 2b                	je     f0112524 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01124f9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01124fc:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01124ff:	83 ec 0c             	sub    $0xc,%esp
f0112502:	50                   	push   %eax
f0112503:	ff 75 80             	pushl  -0x80(%ebp)
f0112506:	68 b8 8e 13 f0       	push   $0xf0138eb8
f011250b:	68 f3 02 00 00       	push   $0x2f3
f0112510:	68 7e 82 13 f0       	push   $0xf013827e
f0112515:	e8 18 de fe ff       	call   f0100332 <_warn>
f011251a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011251d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112524:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112528:	74 04                	je     f011252e <test_copy_paste_chunk+0xb0a>
f011252a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011252e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112535:	83 ec 08             	sub    $0x8,%esp
f0112538:	6a 01                	push   $0x1
f011253a:	6a 07                	push   $0x7
f011253c:	6a 07                	push   $0x7
f011253e:	6a 07                	push   $0x7
f0112540:	6a 07                	push   $0x7
f0112542:	6a 01                	push   $0x1
f0112544:	68 00 20 00 00       	push   $0x2000
f0112549:	68 00 00 20 00       	push   $0x200000
f011254e:	68 00 00 40 00       	push   $0x400000
f0112553:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112556:	e8 10 34 00 00       	call   f011596b <CCP>
f011255b:	83 c4 30             	add    $0x30,%esp
f011255e:	83 f8 01             	cmp    $0x1,%eax
f0112561:	74 21                	je     f0112584 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112563:	83 ec 04             	sub    $0x4,%esp
f0112566:	68 58 8f 13 f0       	push   $0xf0138f58
f011256b:	68 fb 02 00 00       	push   $0x2fb
f0112570:	68 7e 82 13 f0       	push   $0xf013827e
f0112575:	e8 b8 dd fe ff       	call   f0100332 <_warn>
f011257a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011257d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112584:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112588:	74 04                	je     f011258e <test_copy_paste_chunk+0xb6a>
f011258a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011258e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112595:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112598:	8a 00                	mov    (%eax),%al
f011259a:	3c 61                	cmp    $0x61,%al
f011259c:	75 69                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f011259e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01125a1:	8a 00                	mov    (%eax),%al
f01125a3:	3c 61                	cmp    $0x61,%al
f01125a5:	75 60                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f01125a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01125aa:	8a 00                	mov    (%eax),%al
f01125ac:	3c 79                	cmp    $0x79,%al
f01125ae:	75 57                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f01125b0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01125b3:	8a 00                	mov    (%eax),%al
f01125b5:	3c 62                	cmp    $0x62,%al
f01125b7:	75 4e                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f01125b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125bc:	8a 00                	mov    (%eax),%al
f01125be:	3c 7a                	cmp    $0x7a,%al
f01125c0:	75 45                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f01125c2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01125c5:	8a 00                	mov    (%eax),%al
f01125c7:	3c 7a                	cmp    $0x7a,%al
f01125c9:	75 3c                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01125cb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01125ce:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01125d0:	3c 64                	cmp    $0x64,%al
f01125d2:	75 33                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01125d4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01125d7:	8a 00                	mov    (%eax),%al
f01125d9:	3c 64                	cmp    $0x64,%al
f01125db:	75 2a                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f01125dd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01125e0:	8a 00                	mov    (%eax),%al
f01125e2:	3c 65                	cmp    $0x65,%al
f01125e4:	75 21                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f01125e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01125e9:	8a 00                	mov    (%eax),%al
f01125eb:	3c 78                	cmp    $0x78,%al
f01125ed:	75 18                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f01125ef:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01125f2:	8a 00                	mov    (%eax),%al
f01125f4:	3c 66                	cmp    $0x66,%al
f01125f6:	75 0f                	jne    f0112607 <test_copy_paste_chunk+0xbe3>
f01125f8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01125fb:	8a 10                	mov    (%eax),%dl
f01125fd:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112603:	38 c2                	cmp    %al,%dl
f0112605:	74 21                	je     f0112628 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112607:	83 ec 04             	sub    $0x4,%esp
f011260a:	68 0c 8e 13 f0       	push   $0xf0138e0c
f011260f:	68 04 03 00 00       	push   $0x304
f0112614:	68 7e 82 13 f0       	push   $0xf013827e
f0112619:	e8 14 dd fe ff       	call   f0100332 <_warn>
f011261e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112621:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112628:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011262c:	74 04                	je     f0112632 <test_copy_paste_chunk+0xc0e>
f011262e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112632:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0112639:	83 ec 0c             	sub    $0xc,%esp
f011263c:	68 a3 8f 13 f0       	push   $0xf0138fa3
f0112641:	e8 e7 e5 fe ff       	call   f0100c2d <cprintf>
f0112646:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0112649:	83 ec 0c             	sub    $0xc,%esp
f011264c:	68 b4 8f 13 f0       	push   $0xf0138fb4
f0112651:	e8 d7 e5 fe ff       	call   f0100c2d <cprintf>
f0112656:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0112659:	83 ec 04             	sub    $0x4,%esp
f011265c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112662:	50                   	push   %eax
f0112663:	68 e8 8f 13 f0       	push   $0xf0138fe8
f0112668:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011266e:	50                   	push   %eax
f011266f:	e8 7f e7 01 00       	call   f0130df3 <strcconcat>
f0112674:	83 c4 10             	add    $0x10,%esp
f0112677:	83 ec 0c             	sub    $0xc,%esp
f011267a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112680:	50                   	push   %eax
f0112681:	e8 09 e6 fe ff       	call   f0100c8f <execute_command>
f0112686:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0112689:	83 ec 04             	sub    $0x4,%esp
f011268c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112692:	50                   	push   %eax
f0112693:	68 f2 8f 13 f0       	push   $0xf0138ff2
f0112698:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011269e:	50                   	push   %eax
f011269f:	e8 4f e7 01 00       	call   f0130df3 <strcconcat>
f01126a4:	83 c4 10             	add    $0x10,%esp
f01126a7:	83 ec 0c             	sub    $0xc,%esp
f01126aa:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01126b0:	50                   	push   %eax
f01126b1:	e8 d9 e5 fe ff       	call   f0100c8f <execute_command>
f01126b6:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f01126b9:	83 ec 04             	sub    $0x4,%esp
f01126bc:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01126c2:	50                   	push   %eax
f01126c3:	68 fc 8f 13 f0       	push   $0xf0138ffc
f01126c8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01126ce:	50                   	push   %eax
f01126cf:	e8 1f e7 01 00       	call   f0130df3 <strcconcat>
f01126d4:	83 c4 10             	add    $0x10,%esp
f01126d7:	83 ec 0c             	sub    $0xc,%esp
f01126da:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01126e0:	50                   	push   %eax
f01126e1:	e8 a9 e5 fe ff       	call   f0100c8f <execute_command>
f01126e6:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01126e9:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01126ef:	bb 95 97 13 f0       	mov    $0xf0139795,%ebx
f01126f4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126f9:	89 c7                	mov    %eax,%edi
f01126fb:	89 de                	mov    %ebx,%esi
f01126fd:	89 d1                	mov    %edx,%ecx
f01126ff:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112701:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112707:	b9 55 00 00 00       	mov    $0x55,%ecx
f011270c:	b0 00                	mov    $0x0,%al
f011270e:	89 d7                	mov    %edx,%edi
f0112710:	f3 aa                	rep stos %al,%es:(%edi)
f0112712:	83 ec 0c             	sub    $0xc,%esp
f0112715:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011271b:	50                   	push   %eax
f011271c:	e8 6e e5 fe ff       	call   f0100c8f <execute_command>
f0112721:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0112724:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011272a:	bb f9 97 13 f0       	mov    $0xf01397f9,%ebx
f011272f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112734:	89 c7                	mov    %eax,%edi
f0112736:	89 de                	mov    %ebx,%esi
f0112738:	89 d1                	mov    %edx,%ecx
f011273a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011273c:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112742:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112747:	b0 00                	mov    $0x0,%al
f0112749:	89 d7                	mov    %edx,%edi
f011274b:	f3 aa                	rep stos %al,%es:(%edi)
f011274d:	83 ec 0c             	sub    $0xc,%esp
f0112750:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112756:	50                   	push   %eax
f0112757:	e8 33 e5 fe ff       	call   f0100c8f <execute_command>
f011275c:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f011275f:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112765:	bb 5d 98 13 f0       	mov    $0xf013985d,%ebx
f011276a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011276f:	89 c7                	mov    %eax,%edi
f0112771:	89 de                	mov    %ebx,%esi
f0112773:	89 d1                	mov    %edx,%ecx
f0112775:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112777:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011277d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112782:	b0 00                	mov    $0x0,%al
f0112784:	89 d7                	mov    %edx,%edi
f0112786:	f3 aa                	rep stos %al,%es:(%edi)
f0112788:	83 ec 0c             	sub    $0xc,%esp
f011278b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112791:	50                   	push   %eax
f0112792:	e8 f8 e4 fe ff       	call   f0100c8f <execute_command>
f0112797:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011279a:	e8 49 9d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011279f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f01127a2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01127a5:	89 d0                	mov    %edx,%eax
f01127a7:	01 c0                	add    %eax,%eax
f01127a9:	01 d0                	add    %edx,%eax
f01127ab:	c1 e0 02             	shl    $0x2,%eax
f01127ae:	50                   	push   %eax
f01127af:	68 00 00 90 00       	push   $0x900000
f01127b4:	68 00 00 80 00       	push   $0x800000
f01127b9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127bc:	e8 67 5c ff ff       	call   f0108428 <copy_paste_chunk>
f01127c1:	83 c4 10             	add    $0x10,%esp
f01127c4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01127ca:	e8 19 9d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01127cf:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01127d2:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01127d9:	75 0b                	jne    f01127e6 <test_copy_paste_chunk+0xdc2>
f01127db:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01127de:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01127e1:	83 f8 03             	cmp    $0x3,%eax
f01127e4:	74 2e                	je     f0112814 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01127e6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01127e9:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01127ec:	83 ec 0c             	sub    $0xc,%esp
f01127ef:	50                   	push   %eax
f01127f0:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01127f6:	68 b8 8e 13 f0       	push   $0xf0138eb8
f01127fb:	68 22 03 00 00       	push   $0x322
f0112800:	68 7e 82 13 f0       	push   $0xf013827e
f0112805:	e8 28 db fe ff       	call   f0100332 <_warn>
f011280a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011280d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112814:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112818:	74 04                	je     f011281e <test_copy_paste_chunk+0xdfa>
f011281a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011281e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0112825:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011282c:	83 ec 08             	sub    $0x8,%esp
f011282f:	6a 01                	push   $0x1
f0112831:	6a 07                	push   $0x7
f0112833:	6a 07                	push   $0x7
f0112835:	6a 07                	push   $0x7
f0112837:	6a 07                	push   $0x7
f0112839:	6a 01                	push   $0x1
f011283b:	68 00 30 00 00       	push   $0x3000
f0112840:	68 00 00 90 00       	push   $0x900000
f0112845:	68 00 00 80 00       	push   $0x800000
f011284a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011284d:	e8 19 31 00 00       	call   f011596b <CCP>
f0112852:	83 c4 30             	add    $0x30,%esp
f0112855:	83 f8 01             	cmp    $0x1,%eax
f0112858:	74 28                	je     f0112882 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011285a:	83 ec 04             	sub    $0x4,%esp
f011285d:	68 58 8f 13 f0       	push   $0xf0138f58
f0112862:	68 2b 03 00 00       	push   $0x32b
f0112867:	68 7e 82 13 f0       	push   $0xf013827e
f011286c:	e8 c1 da fe ff       	call   f0100332 <_warn>
f0112871:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112874:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f011287b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0112882:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112886:	74 04                	je     f011288c <test_copy_paste_chunk+0xe68>
f0112888:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011288c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112893:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112897:	0f 84 9e 00 00 00    	je     f011293b <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f011289d:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f01128a4:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f01128ab:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f01128b2:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f01128b9:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f01128c0:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f01128c7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128ca:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01128cd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01128d0:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01128d3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128d6:	8a 00                	mov    (%eax),%al
f01128d8:	3c 61                	cmp    $0x61,%al
f01128da:	75 2d                	jne    f0112909 <test_copy_paste_chunk+0xee5>
f01128dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01128df:	8a 00                	mov    (%eax),%al
f01128e1:	3c 61                	cmp    $0x61,%al
f01128e3:	75 24                	jne    f0112909 <test_copy_paste_chunk+0xee5>
f01128e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128e8:	8a 00                	mov    (%eax),%al
f01128ea:	3c 79                	cmp    $0x79,%al
f01128ec:	75 1b                	jne    f0112909 <test_copy_paste_chunk+0xee5>
f01128ee:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01128f1:	8a 00                	mov    (%eax),%al
f01128f3:	3c 62                	cmp    $0x62,%al
f01128f5:	75 12                	jne    f0112909 <test_copy_paste_chunk+0xee5>
f01128f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01128fa:	8a 00                	mov    (%eax),%al
f01128fc:	3c 63                	cmp    $0x63,%al
f01128fe:	75 09                	jne    f0112909 <test_copy_paste_chunk+0xee5>
f0112900:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112903:	8a 00                	mov    (%eax),%al
f0112905:	3c 7a                	cmp    $0x7a,%al
f0112907:	74 21                	je     f011292a <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112909:	83 ec 04             	sub    $0x4,%esp
f011290c:	68 0c 8e 13 f0       	push   $0xf0138e0c
f0112911:	68 3d 03 00 00       	push   $0x33d
f0112916:	68 7e 82 13 f0       	push   $0xf013827e
f011291b:	e8 12 da fe ff       	call   f0100332 <_warn>
f0112920:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112923:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f011292a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011292e:	74 04                	je     f0112934 <test_copy_paste_chunk+0xf10>
f0112930:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0112934:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011293b:	e8 a8 9b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112940:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0112943:	6a 00                	push   $0x0
f0112945:	6a 02                	push   $0x2
f0112947:	68 00 10 90 00       	push   $0x901000
f011294c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011294f:	e8 59 2b 00 00       	call   f01154ad <SB>
f0112954:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0112957:	6a 00                	push   $0x0
f0112959:	6a 02                	push   $0x2
f011295b:	68 00 20 90 00       	push   $0x902000
f0112960:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112963:	e8 45 2b 00 00       	call   f01154ad <SB>
f0112968:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f011296b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011296e:	c1 e0 03             	shl    $0x3,%eax
f0112971:	50                   	push   %eax
f0112972:	68 00 f0 bf 00       	push   $0xbff000
f0112977:	68 00 10 90 00       	push   $0x901000
f011297c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011297f:	e8 a4 5a ff ff       	call   f0108428 <copy_paste_chunk>
f0112984:	83 c4 10             	add    $0x10,%esp
f0112987:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011298d:	e8 56 9b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112992:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112995:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f011299c:	75 0b                	jne    f01129a9 <test_copy_paste_chunk+0xf85>
f011299e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01129a1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01129a4:	83 f8 03             	cmp    $0x3,%eax
f01129a7:	74 2e                	je     f01129d7 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01129a9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01129ac:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01129af:	83 ec 0c             	sub    $0xc,%esp
f01129b2:	50                   	push   %eax
f01129b3:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01129b9:	68 b8 8e 13 f0       	push   $0xf0138eb8
f01129be:	68 4d 03 00 00       	push   $0x34d
f01129c3:	68 7e 82 13 f0       	push   $0xf013827e
f01129c8:	e8 65 d9 fe ff       	call   f0100332 <_warn>
f01129cd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01129d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01129d7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129db:	74 04                	je     f01129e1 <test_copy_paste_chunk+0xfbd>
f01129dd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01129e1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01129e8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01129ef:	83 ec 08             	sub    $0x8,%esp
f01129f2:	6a 01                	push   $0x1
f01129f4:	6a 07                	push   $0x7
f01129f6:	6a 03                	push   $0x3
f01129f8:	6a 07                	push   $0x7
f01129fa:	6a 03                	push   $0x3
f01129fc:	6a 01                	push   $0x1
f01129fe:	68 00 20 00 00       	push   $0x2000
f0112a03:	68 00 f0 bf 00       	push   $0xbff000
f0112a08:	68 00 10 90 00       	push   $0x901000
f0112a0d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a10:	e8 56 2f 00 00       	call   f011596b <CCP>
f0112a15:	83 c4 30             	add    $0x30,%esp
f0112a18:	83 f8 01             	cmp    $0x1,%eax
f0112a1b:	74 28                	je     f0112a45 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112a1d:	83 ec 04             	sub    $0x4,%esp
f0112a20:	68 58 8f 13 f0       	push   $0xf0138f58
f0112a25:	68 56 03 00 00       	push   $0x356
f0112a2a:	68 7e 82 13 f0       	push   $0xf013827e
f0112a2f:	e8 fe d8 fe ff       	call   f0100332 <_warn>
f0112a34:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a37:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112a3e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0112a45:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a49:	74 04                	je     f0112a4f <test_copy_paste_chunk+0x102b>
f0112a4b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112a4f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112a56:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112a5a:	74 72                	je     f0112ace <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112a5c:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0112a63:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0112a6a:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0112a71:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0112a78:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112a7b:	8a 00                	mov    (%eax),%al
f0112a7d:	3c 62                	cmp    $0x62,%al
f0112a7f:	75 1b                	jne    f0112a9c <test_copy_paste_chunk+0x1078>
f0112a81:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112a84:	8a 00                	mov    (%eax),%al
f0112a86:	3c 62                	cmp    $0x62,%al
f0112a88:	75 12                	jne    f0112a9c <test_copy_paste_chunk+0x1078>
f0112a8a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112a8d:	8a 00                	mov    (%eax),%al
f0112a8f:	3c 7a                	cmp    $0x7a,%al
f0112a91:	75 09                	jne    f0112a9c <test_copy_paste_chunk+0x1078>
f0112a93:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112a96:	8a 00                	mov    (%eax),%al
f0112a98:	3c 7a                	cmp    $0x7a,%al
f0112a9a:	74 21                	je     f0112abd <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112a9c:	83 ec 04             	sub    $0x4,%esp
f0112a9f:	68 0c 8e 13 f0       	push   $0xf0138e0c
f0112aa4:	68 62 03 00 00       	push   $0x362
f0112aa9:	68 7e 82 13 f0       	push   $0xf013827e
f0112aae:	e8 7f d8 fe ff       	call   f0100332 <_warn>
f0112ab3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112ab6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112abd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ac1:	74 04                	je     f0112ac7 <test_copy_paste_chunk+0x10a3>
f0112ac3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112ac7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112ace:	83 ec 0c             	sub    $0xc,%esp
f0112ad1:	68 06 90 13 f0       	push   $0xf0139006
f0112ad6:	e8 52 e1 fe ff       	call   f0100c2d <cprintf>
f0112adb:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0112ade:	83 ec 08             	sub    $0x8,%esp
f0112ae1:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112ae4:	68 18 90 13 f0       	push   $0xf0139018
f0112ae9:	e8 3f e1 fe ff       	call   f0100c2d <cprintf>
f0112aee:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112af1:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112af5:	75 10                	jne    f0112b07 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0112af7:	83 ec 0c             	sub    $0xc,%esp
f0112afa:	68 4c 90 13 f0       	push   $0xf013904c
f0112aff:	e8 29 e1 fe ff       	call   f0100c2d <cprintf>
f0112b04:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112b07:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f0112b0c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112b0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112b12:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112b15:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112b1a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112b1d:	5b                   	pop    %ebx
f0112b1e:	5e                   	pop    %esi
f0112b1f:	5f                   	pop    %edi
f0112b20:	5d                   	pop    %ebp
f0112b21:	c3                   	ret    

f0112b22 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0112b22:	55                   	push   %ebp
f0112b23:	89 e5                	mov    %esp,%ebp
f0112b25:	57                   	push   %edi
f0112b26:	56                   	push   %esi
f0112b27:	53                   	push   %ebx
f0112b28:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112b2e:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0112b34:	bb 18 8d 13 f0       	mov    $0xf0138d18,%ebx
f0112b39:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b3e:	89 c7                	mov    %eax,%edi
f0112b40:	89 de                	mov    %ebx,%esi
f0112b42:	89 d1                	mov    %edx,%ecx
f0112b44:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b46:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0112b4c:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112b51:	b0 00                	mov    $0x0,%al
f0112b53:	89 d7                	mov    %edx,%edi
f0112b55:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112b57:	6a 00                	push   $0x0
f0112b59:	6a 0a                	push   $0xa
f0112b5b:	6a 14                	push   $0x14
f0112b5d:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0112b63:	50                   	push   %eax
f0112b64:	e8 33 5c ff ff       	call   f010879c <env_create>
f0112b69:	83 c4 10             	add    $0x10,%esp
f0112b6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112b6f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112b72:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112b75:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0112b78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112b7b:	8b 40 60             	mov    0x60(%eax),%eax
f0112b7e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0112b81:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112b84:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0112b87:	83 ec 0c             	sub    $0xc,%esp
f0112b8a:	ff 75 cc             	pushl  -0x34(%ebp)
f0112b8d:	e8 a5 2d 00 00       	call   f0115937 <ClearUserSpace>
f0112b92:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0112b95:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112b9c:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0112ba3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0112baa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0112bae:	83 ec 0c             	sub    $0xc,%esp
f0112bb1:	68 c4 98 13 f0       	push   $0xf01398c4
f0112bb6:	e8 72 e0 fe ff       	call   f0100c2d <cprintf>
f0112bbb:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0112bbe:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0112bc5:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0112bcc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112bcf:	8a 00                	mov    (%eax),%al
f0112bd1:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0112bd7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112bda:	8a 00                	mov    (%eax),%al
f0112bdc:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112be2:	e8 01 99 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112be7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0112bea:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112bed:	89 d0                	mov    %edx,%eax
f0112bef:	01 c0                	add    %eax,%eax
f0112bf1:	01 d0                	add    %edx,%eax
f0112bf3:	01 c0                	add    %eax,%eax
f0112bf5:	83 ec 0c             	sub    $0xc,%esp
f0112bf8:	6a 02                	push   $0x2
f0112bfa:	50                   	push   %eax
f0112bfb:	68 00 40 10 f0       	push   $0xf0104000
f0112c00:	68 00 00 10 f0       	push   $0xf0100000
f0112c05:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c08:	e8 5f 59 ff ff       	call   f010856c <share_chunk>
f0112c0d:	83 c4 20             	add    $0x20,%esp
f0112c10:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112c13:	e8 d0 98 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112c18:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0112c1b:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112c1f:	75 08                	jne    f0112c29 <test_share_chunk+0x107>
f0112c21:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112c24:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0112c27:	74 28                	je     f0112c51 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0112c29:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112c2c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112c2f:	83 ec 0c             	sub    $0xc,%esp
f0112c32:	50                   	push   %eax
f0112c33:	ff 75 b0             	pushl  -0x50(%ebp)
f0112c36:	68 f0 98 13 f0       	push   $0xf01398f0
f0112c3b:	68 9e 03 00 00       	push   $0x39e
f0112c40:	68 7e 82 13 f0       	push   $0xf013827e
f0112c45:	e8 e8 d6 fe ff       	call   f0100332 <_warn>
f0112c4a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112c4d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112c51:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112c55:	74 04                	je     f0112c5b <test_share_chunk+0x139>
f0112c57:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112c5b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0112c5f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112c62:	c1 e0 03             	shl    $0x3,%eax
f0112c65:	83 ec 08             	sub    $0x8,%esp
f0112c68:	68 fd 00 00 00       	push   $0xfd
f0112c6d:	6a 07                	push   $0x7
f0112c6f:	6a 03                	push   $0x3
f0112c71:	6a 07                	push   $0x7
f0112c73:	6a 03                	push   $0x3
f0112c75:	6a 01                	push   $0x1
f0112c77:	50                   	push   %eax
f0112c78:	68 00 40 10 f0       	push   $0xf0104000
f0112c7d:	68 00 00 10 f0       	push   $0xf0100000
f0112c82:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c85:	e8 e1 2c 00 00       	call   f011596b <CCP>
f0112c8a:	83 c4 30             	add    $0x30,%esp
f0112c8d:	85 c0                	test   %eax,%eax
f0112c8f:	75 1e                	jne    f0112caf <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112c91:	83 ec 04             	sub    $0x4,%esp
f0112c94:	68 4c 99 13 f0       	push   $0xf013994c
f0112c99:	68 a6 03 00 00       	push   $0x3a6
f0112c9e:	68 7e 82 13 f0       	push   $0xf013827e
f0112ca3:	e8 8a d6 fe ff       	call   f0100332 <_warn>
f0112ca8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112cab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112caf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112cb3:	74 04                	je     f0112cb9 <test_share_chunk+0x197>
f0112cb5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0112cb9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112cbc:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0112cbf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112cc2:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0112cc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112cc8:	8a 00                	mov    (%eax),%al
f0112cca:	3c 41                	cmp    $0x41,%al
f0112ccc:	75 09                	jne    f0112cd7 <test_share_chunk+0x1b5>
f0112cce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112cd1:	8a 00                	mov    (%eax),%al
f0112cd3:	3c 42                	cmp    $0x42,%al
f0112cd5:	74 1e                	je     f0112cf5 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112cd7:	83 ec 04             	sub    $0x4,%esp
f0112cda:	68 94 99 13 f0       	push   $0xf0139994
f0112cdf:	68 b0 03 00 00       	push   $0x3b0
f0112ce4:	68 7e 82 13 f0       	push   $0xf013827e
f0112ce9:	e8 44 d6 fe ff       	call   f0100332 <_warn>
f0112cee:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112cf1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112cf5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112cf9:	74 04                	je     f0112cff <test_share_chunk+0x1dd>
f0112cfb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112cff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0112d03:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0112d09:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d0c:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0112d0e:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0112d14:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d17:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0112d19:	83 ec 0c             	sub    $0xc,%esp
f0112d1c:	68 c9 99 13 f0       	push   $0xf01399c9
f0112d21:	e8 07 df fe ff       	call   f0100c2d <cprintf>
f0112d26:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0112d29:	83 ec 0c             	sub    $0xc,%esp
f0112d2c:	68 d8 99 13 f0       	push   $0xf01399d8
f0112d31:	e8 f7 de fe ff       	call   f0100c2d <cprintf>
f0112d36:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112d39:	e8 aa 97 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112d3e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0112d41:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112d44:	c1 e0 05             	shl    $0x5,%eax
f0112d47:	83 ec 0c             	sub    $0xc,%esp
f0112d4a:	68 02 0e 00 00       	push   $0xe02
f0112d4f:	50                   	push   %eax
f0112d50:	68 00 00 00 40       	push   $0x40000000
f0112d55:	68 00 00 00 f0       	push   $0xf0000000
f0112d5a:	ff 75 cc             	pushl  -0x34(%ebp)
f0112d5d:	e8 0a 58 ff ff       	call   f010856c <share_chunk>
f0112d62:	83 c4 20             	add    $0x20,%esp
f0112d65:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112d68:	e8 7b 97 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112d6d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0112d70:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0112d74:	75 1f                	jne    f0112d95 <test_share_chunk+0x273>
f0112d76:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d79:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112d7c:	89 c1                	mov    %eax,%ecx
f0112d7e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112d81:	c1 e0 05             	shl    $0x5,%eax
f0112d84:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112d87:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112d8e:	99                   	cltd   
f0112d8f:	f7 fb                	idiv   %ebx
f0112d91:	39 c1                	cmp    %eax,%ecx
f0112d93:	74 28                	je     f0112dbd <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112d95:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d98:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112d9b:	83 ec 0c             	sub    $0xc,%esp
f0112d9e:	50                   	push   %eax
f0112d9f:	ff 75 a8             	pushl  -0x58(%ebp)
f0112da2:	68 14 9a 13 f0       	push   $0xf0139a14
f0112da7:	68 c8 03 00 00       	push   $0x3c8
f0112dac:	68 7e 82 13 f0       	push   $0xf013827e
f0112db1:	e8 7c d5 fe ff       	call   f0100332 <_warn>
f0112db6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112db9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112dbd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112dc1:	74 04                	je     f0112dc7 <test_share_chunk+0x2a5>
f0112dc3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112dc7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112dcb:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112dd2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112dd5:	c1 e0 05             	shl    $0x5,%eax
f0112dd8:	83 ec 08             	sub    $0x8,%esp
f0112ddb:	6a 02                	push   $0x2
f0112ddd:	6a 07                	push   $0x7
f0112ddf:	6a 03                	push   $0x3
f0112de1:	68 07 0e 00 00       	push   $0xe07
f0112de6:	68 03 0e 00 00       	push   $0xe03
f0112deb:	6a ff                	push   $0xffffffff
f0112ded:	50                   	push   %eax
f0112dee:	68 00 00 00 40       	push   $0x40000000
f0112df3:	68 00 00 00 f0       	push   $0xf0000000
f0112df8:	ff 75 cc             	pushl  -0x34(%ebp)
f0112dfb:	e8 6b 2b 00 00       	call   f011596b <CCP>
f0112e00:	83 c4 30             	add    $0x30,%esp
f0112e03:	85 c0                	test   %eax,%eax
f0112e05:	75 25                	jne    f0112e2c <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112e07:	83 ec 04             	sub    $0x4,%esp
f0112e0a:	68 4c 99 13 f0       	push   $0xf013994c
f0112e0f:	68 d1 03 00 00       	push   $0x3d1
f0112e14:	68 7e 82 13 f0       	push   $0xf013827e
f0112e19:	e8 14 d5 fe ff       	call   f0100332 <_warn>
f0112e1e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112e21:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112e25:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112e2c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112e2f:	89 d0                	mov    %edx,%eax
f0112e31:	01 c0                	add    %eax,%eax
f0112e33:	01 d0                	add    %edx,%eax
f0112e35:	c1 e0 02             	shl    $0x2,%eax
f0112e38:	83 ec 08             	sub    $0x8,%esp
f0112e3b:	6a 02                	push   $0x2
f0112e3d:	6a 07                	push   $0x7
f0112e3f:	6a 03                	push   $0x3
f0112e41:	68 07 0e 00 00       	push   $0xe07
f0112e46:	68 03 0e 00 00       	push   $0xe03
f0112e4b:	6a 02                	push   $0x2
f0112e4d:	50                   	push   %eax
f0112e4e:	68 00 00 00 40       	push   $0x40000000
f0112e53:	68 00 00 00 f0       	push   $0xf0000000
f0112e58:	ff 75 cc             	pushl  -0x34(%ebp)
f0112e5b:	e8 0b 2b 00 00       	call   f011596b <CCP>
f0112e60:	83 c4 30             	add    $0x30,%esp
f0112e63:	85 c0                	test   %eax,%eax
f0112e65:	75 1e                	jne    f0112e85 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112e67:	83 ec 04             	sub    $0x4,%esp
f0112e6a:	68 4c 99 13 f0       	push   $0xf013994c
f0112e6f:	68 d8 03 00 00       	push   $0x3d8
f0112e74:	68 7e 82 13 f0       	push   $0xf013827e
f0112e79:	e8 b4 d4 fe ff       	call   f0100332 <_warn>
f0112e7e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112e81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112e85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112e89:	74 04                	je     f0112e8f <test_share_chunk+0x36d>
f0112e8b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112e8f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0112e93:	b8 fc 1f 6c f0       	mov    $0xf06c1ffc,%eax
f0112e98:	05 00 00 00 10       	add    $0x10000000,%eax
f0112e9d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112ea0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112ea3:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0112ea8:	83 ec 08             	sub    $0x8,%esp
f0112eab:	6a 02                	push   $0x2
f0112ead:	6a 07                	push   $0x7
f0112eaf:	6a 03                	push   $0x3
f0112eb1:	68 07 0e 00 00       	push   $0xe07
f0112eb6:	68 03 0e 00 00       	push   $0xe03
f0112ebb:	6a 02                	push   $0x2
f0112ebd:	50                   	push   %eax
f0112ebe:	68 00 00 0a 40       	push   $0x400a0000
f0112ec3:	68 00 00 0a f0       	push   $0xf00a0000
f0112ec8:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ecb:	e8 9b 2a 00 00       	call   f011596b <CCP>
f0112ed0:	83 c4 30             	add    $0x30,%esp
f0112ed3:	85 c0                	test   %eax,%eax
f0112ed5:	75 1e                	jne    f0112ef5 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112ed7:	83 ec 04             	sub    $0x4,%esp
f0112eda:	68 4c 99 13 f0       	push   $0xf013994c
f0112edf:	68 e2 03 00 00       	push   $0x3e2
f0112ee4:	68 7e 82 13 f0       	push   $0xf013827e
f0112ee9:	e8 44 d4 fe ff       	call   f0100332 <_warn>
f0112eee:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ef1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112ef5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112ef9:	74 04                	je     f0112eff <test_share_chunk+0x3dd>
f0112efb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112eff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112f03:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112f07:	0f 84 a4 00 00 00    	je     f0112fb1 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0112f0d:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0112f14:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f17:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0112f1a:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0112f21:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f24:	8a 00                	mov    (%eax),%al
f0112f26:	3c 41                	cmp    $0x41,%al
f0112f28:	75 09                	jne    f0112f33 <test_share_chunk+0x411>
f0112f2a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112f2d:	8a 00                	mov    (%eax),%al
f0112f2f:	3c 41                	cmp    $0x41,%al
f0112f31:	74 1e                	je     f0112f51 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112f33:	83 ec 04             	sub    $0x4,%esp
f0112f36:	68 94 99 13 f0       	push   $0xf0139994
f0112f3b:	68 ef 03 00 00       	push   $0x3ef
f0112f40:	68 7e 82 13 f0       	push   $0xf013827e
f0112f45:	e8 e8 d3 fe ff       	call   f0100332 <_warn>
f0112f4a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112f4d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112f51:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112f55:	74 04                	je     f0112f5b <test_share_chunk+0x439>
f0112f57:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112f5b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0112f5f:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0112f66:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f69:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0112f6c:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0112f73:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f76:	8a 00                	mov    (%eax),%al
f0112f78:	3c 43                	cmp    $0x43,%al
f0112f7a:	75 09                	jne    f0112f85 <test_share_chunk+0x463>
f0112f7c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112f7f:	8a 00                	mov    (%eax),%al
f0112f81:	3c 43                	cmp    $0x43,%al
f0112f83:	74 1e                	je     f0112fa3 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112f85:	83 ec 04             	sub    $0x4,%esp
f0112f88:	68 94 99 13 f0       	push   $0xf0139994
f0112f8d:	68 fa 03 00 00       	push   $0x3fa
f0112f92:	68 7e 82 13 f0       	push   $0xf013827e
f0112f97:	e8 96 d3 fe ff       	call   f0100332 <_warn>
f0112f9c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112f9f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112fa3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112fa7:	74 04                	je     f0112fad <test_share_chunk+0x48b>
f0112fa9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112fad:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0112fb1:	83 ec 0c             	sub    $0xc,%esp
f0112fb4:	68 a3 8f 13 f0       	push   $0xf0138fa3
f0112fb9:	e8 6f dc fe ff       	call   f0100c2d <cprintf>
f0112fbe:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0112fc1:	83 ec 0c             	sub    $0xc,%esp
f0112fc4:	68 64 9a 13 f0       	push   $0xf0139a64
f0112fc9:	e8 5f dc fe ff       	call   f0100c2d <cprintf>
f0112fce:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112fd1:	e8 12 95 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0112fd6:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0112fd9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112fdc:	89 d0                	mov    %edx,%eax
f0112fde:	c1 e0 03             	shl    $0x3,%eax
f0112fe1:	01 d0                	add    %edx,%eax
f0112fe3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0112fea:	01 d0                	add    %edx,%eax
f0112fec:	c1 e0 03             	shl    $0x3,%eax
f0112fef:	83 ec 0c             	sub    $0xc,%esp
f0112ff2:	6a 06                	push   $0x6
f0112ff4:	50                   	push   %eax
f0112ff5:	6a 00                	push   $0x0
f0112ff7:	68 00 00 00 40       	push   $0x40000000
f0112ffc:	ff 75 cc             	pushl  -0x34(%ebp)
f0112fff:	e8 68 55 ff ff       	call   f010856c <share_chunk>
f0113004:	83 c4 20             	add    $0x20,%esp
f0113007:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011300a:	e8 d9 94 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011300f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113012:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113016:	75 0b                	jne    f0113023 <test_share_chunk+0x501>
f0113018:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011301b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011301e:	83 f8 01             	cmp    $0x1,%eax
f0113021:	74 28                	je     f011304b <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113023:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113026:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113029:	83 ec 0c             	sub    $0xc,%esp
f011302c:	50                   	push   %eax
f011302d:	ff 75 a0             	pushl  -0x60(%ebp)
f0113030:	68 14 9a 13 f0       	push   $0xf0139a14
f0113035:	68 10 04 00 00       	push   $0x410
f011303a:	68 7e 82 13 f0       	push   $0xf013827e
f011303f:	e8 ee d2 fe ff       	call   f0100332 <_warn>
f0113044:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113047:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011304b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011304f:	74 04                	je     f0113055 <test_share_chunk+0x533>
f0113051:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113055:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113059:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113060:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113063:	05 00 80 02 00       	add    $0x28000,%eax
f0113068:	c1 e0 02             	shl    $0x2,%eax
f011306b:	83 ec 08             	sub    $0x8,%esp
f011306e:	6a 02                	push   $0x2
f0113070:	6a 07                	push   $0x7
f0113072:	6a 03                	push   $0x3
f0113074:	6a 07                	push   $0x7
f0113076:	6a 07                	push   $0x7
f0113078:	6a ff                	push   $0xffffffff
f011307a:	50                   	push   %eax
f011307b:	6a 00                	push   $0x0
f011307d:	68 00 00 00 40       	push   $0x40000000
f0113082:	ff 75 cc             	pushl  -0x34(%ebp)
f0113085:	e8 e1 28 00 00       	call   f011596b <CCP>
f011308a:	83 c4 30             	add    $0x30,%esp
f011308d:	85 c0                	test   %eax,%eax
f011308f:	75 25                	jne    f01130b6 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113091:	83 ec 04             	sub    $0x4,%esp
f0113094:	68 4c 99 13 f0       	push   $0xf013994c
f0113099:	68 19 04 00 00       	push   $0x419
f011309e:	68 7e 82 13 f0       	push   $0xf013827e
f01130a3:	e8 8a d2 fe ff       	call   f0100332 <_warn>
f01130a8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01130ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01130af:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01130b6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01130b9:	89 d0                	mov    %edx,%eax
f01130bb:	01 c0                	add    %eax,%eax
f01130bd:	01 d0                	add    %edx,%eax
f01130bf:	c1 e0 02             	shl    $0x2,%eax
f01130c2:	83 ec 08             	sub    $0x8,%esp
f01130c5:	6a 02                	push   $0x2
f01130c7:	6a 07                	push   $0x7
f01130c9:	6a 03                	push   $0x3
f01130cb:	6a 07                	push   $0x7
f01130cd:	6a 07                	push   $0x7
f01130cf:	6a 03                	push   $0x3
f01130d1:	50                   	push   %eax
f01130d2:	6a 00                	push   $0x0
f01130d4:	68 00 00 00 40       	push   $0x40000000
f01130d9:	ff 75 cc             	pushl  -0x34(%ebp)
f01130dc:	e8 8a 28 00 00       	call   f011596b <CCP>
f01130e1:	83 c4 30             	add    $0x30,%esp
f01130e4:	85 c0                	test   %eax,%eax
f01130e6:	75 1e                	jne    f0113106 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01130e8:	83 ec 04             	sub    $0x4,%esp
f01130eb:	68 4c 99 13 f0       	push   $0xf013994c
f01130f0:	68 20 04 00 00       	push   $0x420
f01130f5:	68 7e 82 13 f0       	push   $0xf013827e
f01130fa:	e8 33 d2 fe ff       	call   f0100332 <_warn>
f01130ff:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113102:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113106:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011310a:	74 04                	je     f0113110 <test_share_chunk+0x5ee>
f011310c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113110:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113114:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113117:	89 d0                	mov    %edx,%eax
f0113119:	01 c0                	add    %eax,%eax
f011311b:	01 d0                	add    %edx,%eax
f011311d:	c1 e0 02             	shl    $0x2,%eax
f0113120:	f7 d8                	neg    %eax
f0113122:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113127:	83 ec 08             	sub    $0x8,%esp
f011312a:	6a 02                	push   $0x2
f011312c:	6a 07                	push   $0x7
f011312e:	6a 03                	push   $0x3
f0113130:	6a 07                	push   $0x7
f0113132:	6a 07                	push   $0x7
f0113134:	6a 02                	push   $0x2
f0113136:	50                   	push   %eax
f0113137:	68 00 30 00 00       	push   $0x3000
f011313c:	68 00 30 00 40       	push   $0x40003000
f0113141:	ff 75 cc             	pushl  -0x34(%ebp)
f0113144:	e8 22 28 00 00       	call   f011596b <CCP>
f0113149:	83 c4 30             	add    $0x30,%esp
f011314c:	85 c0                	test   %eax,%eax
f011314e:	75 1e                	jne    f011316e <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113150:	83 ec 04             	sub    $0x4,%esp
f0113153:	68 4c 99 13 f0       	push   $0xf013994c
f0113158:	68 28 04 00 00       	push   $0x428
f011315d:	68 7e 82 13 f0       	push   $0xf013827e
f0113162:	e8 cb d1 fe ff       	call   f0100332 <_warn>
f0113167:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011316a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011316e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113172:	74 04                	je     f0113178 <test_share_chunk+0x656>
f0113174:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113178:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011317c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011317f:	c1 e0 02             	shl    $0x2,%eax
f0113182:	83 ec 08             	sub    $0x8,%esp
f0113185:	6a 02                	push   $0x2
f0113187:	6a 07                	push   $0x7
f0113189:	6a 03                	push   $0x3
f011318b:	6a 07                	push   $0x7
f011318d:	6a 07                	push   $0x7
f011318f:	6a 03                	push   $0x3
f0113191:	50                   	push   %eax
f0113192:	68 00 00 0a 00       	push   $0xa0000
f0113197:	68 00 00 0a 40       	push   $0x400a0000
f011319c:	ff 75 cc             	pushl  -0x34(%ebp)
f011319f:	e8 c7 27 00 00       	call   f011596b <CCP>
f01131a4:	83 c4 30             	add    $0x30,%esp
f01131a7:	85 c0                	test   %eax,%eax
f01131a9:	75 1e                	jne    f01131c9 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01131ab:	83 ec 04             	sub    $0x4,%esp
f01131ae:	68 4c 99 13 f0       	push   $0xf013994c
f01131b3:	68 30 04 00 00       	push   $0x430
f01131b8:	68 7e 82 13 f0       	push   $0xf013827e
f01131bd:	e8 70 d1 fe ff       	call   f0100332 <_warn>
f01131c2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01131c5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01131c9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01131cd:	74 04                	je     f01131d3 <test_share_chunk+0x6b1>
f01131cf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01131d3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01131d7:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01131db:	0f 84 92 00 00 00    	je     f0113273 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f01131e1:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01131e8:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01131ef:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01131f6:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01131fd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113200:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0113203:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f011320a:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113211:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113214:	8a 00                	mov    (%eax),%al
f0113216:	3c 41                	cmp    $0x41,%al
f0113218:	75 2d                	jne    f0113247 <test_share_chunk+0x725>
f011321a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011321d:	8a 00                	mov    (%eax),%al
f011321f:	3c 41                	cmp    $0x41,%al
f0113221:	75 24                	jne    f0113247 <test_share_chunk+0x725>
f0113223:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113226:	8a 00                	mov    (%eax),%al
f0113228:	3c 41                	cmp    $0x41,%al
f011322a:	75 1b                	jne    f0113247 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011322c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011322f:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113231:	3c 44                	cmp    $0x44,%al
f0113233:	75 12                	jne    f0113247 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113235:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113238:	8a 00                	mov    (%eax),%al
f011323a:	3c 44                	cmp    $0x44,%al
f011323c:	75 09                	jne    f0113247 <test_share_chunk+0x725>
f011323e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113241:	8a 00                	mov    (%eax),%al
f0113243:	3c 44                	cmp    $0x44,%al
f0113245:	74 1e                	je     f0113265 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113247:	83 ec 04             	sub    $0x4,%esp
f011324a:	68 94 99 13 f0       	push   $0xf0139994
f011324f:	68 42 04 00 00       	push   $0x442
f0113254:	68 7e 82 13 f0       	push   $0xf013827e
f0113259:	e8 d4 d0 fe ff       	call   f0100332 <_warn>
f011325e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113261:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113265:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113269:	74 04                	je     f011326f <test_share_chunk+0x74d>
f011326b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011326f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113273:	83 ec 0c             	sub    $0xc,%esp
f0113276:	68 06 90 13 f0       	push   $0xf0139006
f011327b:	e8 ad d9 fe ff       	call   f0100c2d <cprintf>
f0113280:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0113283:	83 ec 0c             	sub    $0xc,%esp
f0113286:	68 a0 9a 13 f0       	push   $0xf0139aa0
f011328b:	e8 9d d9 fe ff       	call   f0100c2d <cprintf>
f0113290:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113293:	e8 50 92 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113298:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f011329b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011329e:	89 d0                	mov    %edx,%eax
f01132a0:	01 c0                	add    %eax,%eax
f01132a2:	01 d0                	add    %edx,%eax
f01132a4:	01 c0                	add    %eax,%eax
f01132a6:	01 d0                	add    %edx,%eax
f01132a8:	83 ec 0c             	sub    $0xc,%esp
f01132ab:	6a 04                	push   $0x4
f01132ad:	50                   	push   %eax
f01132ae:	68 00 fc 3f 00       	push   $0x3ffc00
f01132b3:	68 00 fc 09 00       	push   $0x9fc00
f01132b8:	ff 75 cc             	pushl  -0x34(%ebp)
f01132bb:	e8 ac 52 ff ff       	call   f010856c <share_chunk>
f01132c0:	83 c4 20             	add    $0x20,%esp
f01132c3:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01132c6:	e8 1d 92 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01132cb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01132ce:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f01132d2:	75 0b                	jne    f01132df <test_share_chunk+0x7bd>
f01132d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132d7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01132da:	83 f8 01             	cmp    $0x1,%eax
f01132dd:	74 28                	je     f0113307 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01132df:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132e2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01132e5:	83 ec 0c             	sub    $0xc,%esp
f01132e8:	50                   	push   %eax
f01132e9:	ff 75 8c             	pushl  -0x74(%ebp)
f01132ec:	68 14 9a 13 f0       	push   $0xf0139a14
f01132f1:	68 58 04 00 00       	push   $0x458
f01132f6:	68 7e 82 13 f0       	push   $0xf013827e
f01132fb:	e8 32 d0 fe ff       	call   f0100332 <_warn>
f0113300:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113303:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113307:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011330b:	74 04                	je     f0113311 <test_share_chunk+0x7ef>
f011330d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113311:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113315:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011331c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011331f:	89 d0                	mov    %edx,%eax
f0113321:	01 c0                	add    %eax,%eax
f0113323:	01 d0                	add    %edx,%eax
f0113325:	c1 e0 02             	shl    $0x2,%eax
f0113328:	83 ec 08             	sub    $0x8,%esp
f011332b:	6a 02                	push   $0x2
f011332d:	6a 07                	push   $0x7
f011332f:	6a 07                	push   $0x7
f0113331:	6a 07                	push   $0x7
f0113333:	6a 05                	push   $0x5
f0113335:	6a ff                	push   $0xffffffff
f0113337:	50                   	push   %eax
f0113338:	68 00 f0 3f 00       	push   $0x3ff000
f011333d:	68 00 f0 09 00       	push   $0x9f000
f0113342:	ff 75 cc             	pushl  -0x34(%ebp)
f0113345:	e8 21 26 00 00       	call   f011596b <CCP>
f011334a:	83 c4 30             	add    $0x30,%esp
f011334d:	85 c0                	test   %eax,%eax
f011334f:	75 25                	jne    f0113376 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113351:	83 ec 04             	sub    $0x4,%esp
f0113354:	68 4c 99 13 f0       	push   $0xf013994c
f0113359:	68 61 04 00 00       	push   $0x461
f011335e:	68 7e 82 13 f0       	push   $0xf013827e
f0113363:	e8 ca cf fe ff       	call   f0100332 <_warn>
f0113368:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011336b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011336f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0113376:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011337a:	74 04                	je     f0113380 <test_share_chunk+0x85e>
f011337c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113380:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113384:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113387:	c1 e0 02             	shl    $0x2,%eax
f011338a:	83 ec 08             	sub    $0x8,%esp
f011338d:	6a 02                	push   $0x2
f011338f:	6a 07                	push   $0x7
f0113391:	6a 07                	push   $0x7
f0113393:	6a 07                	push   $0x7
f0113395:	6a 05                	push   $0x5
f0113397:	6a 03                	push   $0x3
f0113399:	50                   	push   %eax
f011339a:	68 00 f0 3f 00       	push   $0x3ff000
f011339f:	68 00 f0 09 00       	push   $0x9f000
f01133a4:	ff 75 cc             	pushl  -0x34(%ebp)
f01133a7:	e8 bf 25 00 00       	call   f011596b <CCP>
f01133ac:	83 c4 30             	add    $0x30,%esp
f01133af:	85 c0                	test   %eax,%eax
f01133b1:	75 1e                	jne    f01133d1 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01133b3:	83 ec 04             	sub    $0x4,%esp
f01133b6:	68 4c 99 13 f0       	push   $0xf013994c
f01133bb:	68 6a 04 00 00       	push   $0x46a
f01133c0:	68 7e 82 13 f0       	push   $0xf013827e
f01133c5:	e8 68 cf fe ff       	call   f0100332 <_warn>
f01133ca:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01133cd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01133d1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133d5:	74 04                	je     f01133db <test_share_chunk+0x8b9>
f01133d7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133db:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01133df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133e2:	c1 e0 03             	shl    $0x3,%eax
f01133e5:	83 ec 08             	sub    $0x8,%esp
f01133e8:	6a 02                	push   $0x2
f01133ea:	6a 07                	push   $0x7
f01133ec:	6a 07                	push   $0x7
f01133ee:	6a 07                	push   $0x7
f01133f0:	6a 05                	push   $0x5
f01133f2:	6a 04                	push   $0x4
f01133f4:	50                   	push   %eax
f01133f5:	68 00 00 40 00       	push   $0x400000
f01133fa:	68 00 00 0a 00       	push   $0xa0000
f01133ff:	ff 75 cc             	pushl  -0x34(%ebp)
f0113402:	e8 64 25 00 00       	call   f011596b <CCP>
f0113407:	83 c4 30             	add    $0x30,%esp
f011340a:	85 c0                	test   %eax,%eax
f011340c:	75 1e                	jne    f011342c <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011340e:	83 ec 04             	sub    $0x4,%esp
f0113411:	68 4c 99 13 f0       	push   $0xf013994c
f0113416:	68 72 04 00 00       	push   $0x472
f011341b:	68 7e 82 13 f0       	push   $0xf013827e
f0113420:	e8 0d cf fe ff       	call   f0100332 <_warn>
f0113425:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113428:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011342c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113430:	74 04                	je     f0113436 <test_share_chunk+0x914>
f0113432:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113436:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011343a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011343e:	0f 84 b2 00 00 00    	je     f01134f6 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0113444:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011344b:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113452:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113459:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113460:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0113467:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011346e:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0113475:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011347c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011347f:	8a 00                	mov    (%eax),%al
f0113481:	3c 44                	cmp    $0x44,%al
f0113483:	75 45                	jne    f01134ca <test_share_chunk+0x9a8>
f0113485:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113488:	8a 00                	mov    (%eax),%al
f011348a:	3c 44                	cmp    $0x44,%al
f011348c:	75 3c                	jne    f01134ca <test_share_chunk+0x9a8>
f011348e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113491:	8a 00                	mov    (%eax),%al
f0113493:	3c 44                	cmp    $0x44,%al
f0113495:	75 33                	jne    f01134ca <test_share_chunk+0x9a8>
f0113497:	8b 45 98             	mov    -0x68(%ebp),%eax
f011349a:	8a 00                	mov    (%eax),%al
f011349c:	3c 44                	cmp    $0x44,%al
f011349e:	75 2a                	jne    f01134ca <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01134a0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01134a3:	8a 10                	mov    (%eax),%dl
f01134a5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01134a8:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01134aa:	38 c2                	cmp    %al,%dl
f01134ac:	75 1c                	jne    f01134ca <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01134ae:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01134b1:	8a 10                	mov    (%eax),%dl
f01134b3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01134b6:	8a 00                	mov    (%eax),%al
f01134b8:	38 c2                	cmp    %al,%dl
f01134ba:	75 0e                	jne    f01134ca <test_share_chunk+0x9a8>
f01134bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01134bf:	8a 10                	mov    (%eax),%dl
f01134c1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01134c4:	8a 00                	mov    (%eax),%al
f01134c6:	38 c2                	cmp    %al,%dl
f01134c8:	74 1e                	je     f01134e8 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01134ca:	83 ec 04             	sub    $0x4,%esp
f01134cd:	68 94 99 13 f0       	push   $0xf0139994
f01134d2:	68 87 04 00 00       	push   $0x487
f01134d7:	68 7e 82 13 f0       	push   $0xf013827e
f01134dc:	e8 51 ce fe ff       	call   f0100332 <_warn>
f01134e1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01134e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01134e8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01134ec:	74 04                	je     f01134f2 <test_share_chunk+0x9d0>
f01134ee:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01134f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01134f6:	83 ec 0c             	sub    $0xc,%esp
f01134f9:	68 d8 9a 13 f0       	push   $0xf0139ad8
f01134fe:	e8 2a d7 fe ff       	call   f0100c2d <cprintf>
f0113503:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0113506:	83 ec 08             	sub    $0x8,%esp
f0113509:	ff 75 e4             	pushl  -0x1c(%ebp)
f011350c:	68 e8 9a 13 f0       	push   $0xf0139ae8
f0113511:	e8 17 d7 fe ff       	call   f0100c2d <cprintf>
f0113516:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113519:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011351d:	75 10                	jne    f011352f <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f011351f:	83 ec 0c             	sub    $0xc,%esp
f0113522:	68 18 9b 13 f0       	push   $0xf0139b18
f0113527:	e8 01 d7 fe ff       	call   f0100c2d <cprintf>
f011352c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011352f:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f0113534:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0113537:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011353a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011353d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113542:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113545:	5b                   	pop    %ebx
f0113546:	5e                   	pop    %esi
f0113547:	5f                   	pop    %edi
f0113548:	5d                   	pop    %ebp
f0113549:	c3                   	ret    

f011354a <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f011354a:	55                   	push   %ebp
f011354b:	89 e5                	mov    %esp,%ebp
f011354d:	57                   	push   %edi
f011354e:	56                   	push   %esi
f011354f:	53                   	push   %ebx
f0113550:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113556:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011355c:	bb 18 8d 13 f0       	mov    $0xf0138d18,%ebx
f0113561:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113566:	89 c7                	mov    %eax,%edi
f0113568:	89 de                	mov    %ebx,%esi
f011356a:	89 d1                	mov    %edx,%ecx
f011356c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011356e:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113574:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113579:	b0 00                	mov    $0x0,%al
f011357b:	89 d7                	mov    %edx,%edi
f011357d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011357f:	6a 00                	push   $0x0
f0113581:	6a 0a                	push   $0xa
f0113583:	6a 14                	push   $0x14
f0113585:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011358b:	50                   	push   %eax
f011358c:	e8 0b 52 ff ff       	call   f010879c <env_create>
f0113591:	83 c4 10             	add    $0x10,%esp
f0113594:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113597:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011359a:	8b 40 5c             	mov    0x5c(%eax),%eax
f011359d:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f01135a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01135a3:	8b 40 60             	mov    0x60(%eax),%eax
f01135a6:	89 45 90             	mov    %eax,-0x70(%ebp)
f01135a9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01135ac:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01135af:	83 ec 0c             	sub    $0xc,%esp
f01135b2:	ff 75 d0             	pushl  -0x30(%ebp)
f01135b5:	e8 7d 23 00 00       	call   f0115937 <ClearUserSpace>
f01135ba:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01135bd:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01135c4:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f01135cb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01135d2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01135d6:	83 ec 0c             	sub    $0xc,%esp
f01135d9:	68 54 9b 13 f0       	push   $0xf0139b54
f01135de:	e8 4a d6 fe ff       	call   f0100c2d <cprintf>
f01135e3:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01135e6:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f01135ed:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f01135f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01135f7:	8a 00                	mov    (%eax),%al
f01135f9:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01135ff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113602:	8a 00                	mov    (%eax),%al
f0113604:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f011360a:	83 ec 08             	sub    $0x8,%esp
f011360d:	68 00 f0 bf ef       	push   $0xefbff000
f0113612:	ff 75 d0             	pushl  -0x30(%ebp)
f0113615:	e8 84 22 00 00       	call   f011589e <GP>
f011361a:	83 c4 10             	add    $0x10,%esp
f011361d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113620:	e8 c3 8e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113625:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0113628:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011362b:	c1 e0 02             	shl    $0x2,%eax
f011362e:	6a 02                	push   $0x2
f0113630:	50                   	push   %eax
f0113631:	68 00 f0 bf ef       	push   $0xefbff000
f0113636:	ff 75 d0             	pushl  -0x30(%ebp)
f0113639:	e8 48 4f ff ff       	call   f0108586 <allocate_chunk>
f011363e:	83 c4 10             	add    $0x10,%esp
f0113641:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113644:	e8 9f 8e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113649:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011364c:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113650:	75 08                	jne    f011365a <test_allocate_chunk+0x110>
f0113652:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113655:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113658:	74 2a                	je     f0113684 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011365a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011365d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113660:	83 ec 08             	sub    $0x8,%esp
f0113663:	6a 00                	push   $0x0
f0113665:	50                   	push   %eax
f0113666:	ff 75 b0             	pushl  -0x50(%ebp)
f0113669:	68 80 9b 13 f0       	push   $0xf0139b80
f011366e:	68 c3 04 00 00       	push   $0x4c3
f0113673:	68 7e 82 13 f0       	push   $0xf013827e
f0113678:	e8 b5 cc fe ff       	call   f0100332 <_warn>
f011367d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113680:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113684:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113688:	74 04                	je     f011368e <test_allocate_chunk+0x144>
f011368a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011368e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113692:	e8 51 8e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113697:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f011369a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011369d:	01 c0                	add    %eax,%eax
f011369f:	89 c1                	mov    %eax,%ecx
f01136a1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01136a4:	89 d0                	mov    %edx,%eax
f01136a6:	c1 e0 02             	shl    $0x2,%eax
f01136a9:	01 d0                	add    %edx,%eax
f01136ab:	f7 d8                	neg    %eax
f01136ad:	2d 00 00 40 10       	sub    $0x10400000,%eax
f01136b2:	6a 02                	push   $0x2
f01136b4:	51                   	push   %ecx
f01136b5:	50                   	push   %eax
f01136b6:	ff 75 d0             	pushl  -0x30(%ebp)
f01136b9:	e8 c8 4e ff ff       	call   f0108586 <allocate_chunk>
f01136be:	83 c4 10             	add    $0x10,%esp
f01136c1:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01136c4:	e8 1f 8e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01136c9:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01136cc:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01136d0:	75 08                	jne    f01136da <test_allocate_chunk+0x190>
f01136d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136d5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01136d8:	74 2a                	je     f0113704 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01136da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136dd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01136e0:	83 ec 08             	sub    $0x8,%esp
f01136e3:	6a 00                	push   $0x0
f01136e5:	50                   	push   %eax
f01136e6:	ff 75 b0             	pushl  -0x50(%ebp)
f01136e9:	68 80 9b 13 f0       	push   $0xf0139b80
f01136ee:	68 d1 04 00 00       	push   $0x4d1
f01136f3:	68 7e 82 13 f0       	push   $0xf013827e
f01136f8:	e8 35 cc fe ff       	call   f0100332 <_warn>
f01136fd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113700:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113704:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113708:	74 04                	je     f011370e <test_allocate_chunk+0x1c4>
f011370a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011370e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0113712:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113715:	c1 e0 02             	shl    $0x2,%eax
f0113718:	83 ec 08             	sub    $0x8,%esp
f011371b:	6a 03                	push   $0x3
f011371d:	6a 00                	push   $0x0
f011371f:	6a 00                	push   $0x0
f0113721:	68 ff 0f 00 00       	push   $0xfff
f0113726:	ff 75 b8             	pushl  -0x48(%ebp)
f0113729:	6a 01                	push   $0x1
f011372b:	50                   	push   %eax
f011372c:	68 00 f0 bf ef       	push   $0xefbff000
f0113731:	6a 00                	push   $0x0
f0113733:	ff 75 d0             	pushl  -0x30(%ebp)
f0113736:	e8 30 22 00 00       	call   f011596b <CCP>
f011373b:	83 c4 30             	add    $0x30,%esp
f011373e:	85 c0                	test   %eax,%eax
f0113740:	75 1e                	jne    f0113760 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113742:	83 ec 04             	sub    $0x4,%esp
f0113745:	68 e8 9b 13 f0       	push   $0xf0139be8
f011374a:	68 d9 04 00 00       	push   $0x4d9
f011374f:	68 7e 82 13 f0       	push   $0xf013827e
f0113754:	e8 d9 cb fe ff       	call   f0100332 <_warn>
f0113759:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011375c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113760:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113764:	74 04                	je     f011376a <test_allocate_chunk+0x220>
f0113766:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011376a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f011376e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113771:	8a 10                	mov    (%eax),%dl
f0113773:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0113779:	38 c2                	cmp    %al,%dl
f011377b:	75 0f                	jne    f011378c <test_allocate_chunk+0x242>
f011377d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113780:	8a 10                	mov    (%eax),%dl
f0113782:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0113788:	38 c2                	cmp    %al,%dl
f011378a:	74 1e                	je     f01137aa <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011378c:	83 ec 04             	sub    $0x4,%esp
f011378f:	68 34 9c 13 f0       	push   $0xf0139c34
f0113794:	68 e1 04 00 00       	push   $0x4e1
f0113799:	68 7e 82 13 f0       	push   $0xf013827e
f011379e:	e8 8f cb fe ff       	call   f0100332 <_warn>
f01137a3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137a6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01137aa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137ae:	74 04                	je     f01137b4 <test_allocate_chunk+0x26a>
f01137b0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137b4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01137b8:	83 ec 0c             	sub    $0xc,%esp
f01137bb:	68 c9 99 13 f0       	push   $0xf01399c9
f01137c0:	e8 68 d4 fe ff       	call   f0100c2d <cprintf>
f01137c5:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f01137c8:	83 ec 0c             	sub    $0xc,%esp
f01137cb:	68 6c 9c 13 f0       	push   $0xf0139c6c
f01137d0:	e8 58 d4 fe ff       	call   f0100c2d <cprintf>
f01137d5:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01137d8:	e8 0b 8d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01137dd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01137e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137e3:	c1 e0 05             	shl    $0x5,%eax
f01137e6:	68 02 0e 00 00       	push   $0xe02
f01137eb:	50                   	push   %eax
f01137ec:	6a 00                	push   $0x0
f01137ee:	ff 75 d0             	pushl  -0x30(%ebp)
f01137f1:	e8 90 4d ff ff       	call   f0108586 <allocate_chunk>
f01137f6:	83 c4 10             	add    $0x10,%esp
f01137f9:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01137fc:	e8 e7 8c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113801:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0113804:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113808:	75 36                	jne    f0113840 <test_allocate_chunk+0x2f6>
f011380a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011380d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113810:	89 c1                	mov    %eax,%ecx
f0113812:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113815:	c1 e0 05             	shl    $0x5,%eax
f0113818:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011381b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113822:	99                   	cltd   
f0113823:	f7 fe                	idiv   %esi
f0113825:	89 c3                	mov    %eax,%ebx
f0113827:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011382a:	c1 e0 05             	shl    $0x5,%eax
f011382d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113830:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113837:	99                   	cltd   
f0113838:	f7 fe                	idiv   %esi
f011383a:	01 d8                	add    %ebx,%eax
f011383c:	39 c1                	cmp    %eax,%ecx
f011383e:	74 54                	je     f0113894 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113840:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113843:	c1 e0 05             	shl    $0x5,%eax
f0113846:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113849:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113850:	99                   	cltd   
f0113851:	f7 ff                	idiv   %edi
f0113853:	89 c1                	mov    %eax,%ecx
f0113855:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113858:	c1 e0 05             	shl    $0x5,%eax
f011385b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011385e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113865:	99                   	cltd   
f0113866:	f7 fe                	idiv   %esi
f0113868:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011386b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011386e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113871:	83 ec 08             	sub    $0x8,%esp
f0113874:	52                   	push   %edx
f0113875:	50                   	push   %eax
f0113876:	ff 75 a8             	pushl  -0x58(%ebp)
f0113879:	68 ac 9c 13 f0       	push   $0xf0139cac
f011387e:	68 f6 04 00 00       	push   $0x4f6
f0113883:	68 7e 82 13 f0       	push   $0xf013827e
f0113888:	e8 a5 ca fe ff       	call   f0100332 <_warn>
f011388d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113890:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113894:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113898:	74 04                	je     f011389e <test_allocate_chunk+0x354>
f011389a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011389e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01138a2:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01138a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01138ac:	c1 e0 05             	shl    $0x5,%eax
f01138af:	83 ec 08             	sub    $0x8,%esp
f01138b2:	6a 03                	push   $0x3
f01138b4:	6a 00                	push   $0x0
f01138b6:	6a 00                	push   $0x0
f01138b8:	68 07 0e 00 00       	push   $0xe07
f01138bd:	68 03 0e 00 00       	push   $0xe03
f01138c2:	6a 01                	push   $0x1
f01138c4:	50                   	push   %eax
f01138c5:	6a 00                	push   $0x0
f01138c7:	6a 00                	push   $0x0
f01138c9:	ff 75 d0             	pushl  -0x30(%ebp)
f01138cc:	e8 9a 20 00 00       	call   f011596b <CCP>
f01138d1:	83 c4 30             	add    $0x30,%esp
f01138d4:	85 c0                	test   %eax,%eax
f01138d6:	75 25                	jne    f01138fd <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01138d8:	83 ec 04             	sub    $0x4,%esp
f01138db:	68 e8 9b 13 f0       	push   $0xf0139be8
f01138e0:	68 ff 04 00 00       	push   $0x4ff
f01138e5:	68 7e 82 13 f0       	push   $0xf013827e
f01138ea:	e8 43 ca fe ff       	call   f0100332 <_warn>
f01138ef:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138f2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01138f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01138fd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113901:	74 04                	je     f0113907 <test_allocate_chunk+0x3bd>
f0113903:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113907:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011390b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011390f:	74 5a                	je     f011396b <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0113911:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113914:	01 c0                	add    %eax,%eax
f0113916:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113919:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011391c:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f011391f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113922:	01 c0                	add    %eax,%eax
f0113924:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113927:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011392a:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011392d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113930:	8a 00                	mov    (%eax),%al
f0113932:	3c 4b                	cmp    $0x4b,%al
f0113934:	75 09                	jne    f011393f <test_allocate_chunk+0x3f5>
f0113936:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113939:	8a 00                	mov    (%eax),%al
f011393b:	3c 4d                	cmp    $0x4d,%al
f011393d:	74 1e                	je     f011395d <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011393f:	83 ec 04             	sub    $0x4,%esp
f0113942:	68 34 9c 13 f0       	push   $0xf0139c34
f0113947:	68 0d 05 00 00       	push   $0x50d
f011394c:	68 7e 82 13 f0       	push   $0xf013827e
f0113951:	e8 dc c9 fe ff       	call   f0100332 <_warn>
f0113956:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113959:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011395d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113961:	74 04                	je     f0113967 <test_allocate_chunk+0x41d>
f0113963:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113967:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011396b:	83 ec 0c             	sub    $0xc,%esp
f011396e:	68 a3 8f 13 f0       	push   $0xf0138fa3
f0113973:	e8 b5 d2 fe ff       	call   f0100c2d <cprintf>
f0113978:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f011397b:	83 ec 0c             	sub    $0xc,%esp
f011397e:	68 0c 9d 13 f0       	push   $0xf0139d0c
f0113983:	e8 a5 d2 fe ff       	call   f0100c2d <cprintf>
f0113988:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011398b:	e8 58 8b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113990:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0113993:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113996:	c1 e0 06             	shl    $0x6,%eax
f0113999:	89 c2                	mov    %eax,%edx
f011399b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011399e:	c1 e0 05             	shl    $0x5,%eax
f01139a1:	6a 00                	push   $0x0
f01139a3:	52                   	push   %edx
f01139a4:	50                   	push   %eax
f01139a5:	ff 75 d0             	pushl  -0x30(%ebp)
f01139a8:	e8 d9 4b ff ff       	call   f0108586 <allocate_chunk>
f01139ad:	83 c4 10             	add    $0x10,%esp
f01139b0:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01139b3:	e8 30 8b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01139b8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f01139bb:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f01139bf:	75 36                	jne    f01139f7 <test_allocate_chunk+0x4ad>
f01139c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01139c4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01139c7:	89 c1                	mov    %eax,%ecx
f01139c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01139cc:	c1 e0 06             	shl    $0x6,%eax
f01139cf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01139d2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01139d9:	99                   	cltd   
f01139da:	f7 ff                	idiv   %edi
f01139dc:	89 c3                	mov    %eax,%ebx
f01139de:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01139e1:	c1 e0 06             	shl    $0x6,%eax
f01139e4:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01139e7:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01139ee:	99                   	cltd   
f01139ef:	f7 fe                	idiv   %esi
f01139f1:	01 d8                	add    %ebx,%eax
f01139f3:	39 c1                	cmp    %eax,%ecx
f01139f5:	74 54                	je     f0113a4b <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01139f7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01139fa:	c1 e0 06             	shl    $0x6,%eax
f01139fd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a00:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113a07:	99                   	cltd   
f0113a08:	f7 fb                	idiv   %ebx
f0113a0a:	89 c1                	mov    %eax,%ecx
f0113a0c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a0f:	c1 e0 06             	shl    $0x6,%eax
f0113a12:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113a15:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113a1c:	99                   	cltd   
f0113a1d:	f7 ff                	idiv   %edi
f0113a1f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113a22:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a25:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113a28:	83 ec 08             	sub    $0x8,%esp
f0113a2b:	52                   	push   %edx
f0113a2c:	50                   	push   %eax
f0113a2d:	ff 75 a4             	pushl  -0x5c(%ebp)
f0113a30:	68 ac 9c 13 f0       	push   $0xf0139cac
f0113a35:	68 23 05 00 00       	push   $0x523
f0113a3a:	68 7e 82 13 f0       	push   $0xf013827e
f0113a3f:	e8 ee c8 fe ff       	call   f0100332 <_warn>
f0113a44:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a47:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a4b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a4f:	74 04                	je     f0113a55 <test_allocate_chunk+0x50b>
f0113a51:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a55:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113a59:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113a60:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a63:	c1 e0 06             	shl    $0x6,%eax
f0113a66:	89 c2                	mov    %eax,%edx
f0113a68:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a6b:	c1 e0 05             	shl    $0x5,%eax
f0113a6e:	83 ec 08             	sub    $0x8,%esp
f0113a71:	6a 03                	push   $0x3
f0113a73:	6a 00                	push   $0x0
f0113a75:	6a 00                	push   $0x0
f0113a77:	68 07 0e 00 00       	push   $0xe07
f0113a7c:	6a 01                	push   $0x1
f0113a7e:	6a 01                	push   $0x1
f0113a80:	52                   	push   %edx
f0113a81:	50                   	push   %eax
f0113a82:	6a 00                	push   $0x0
f0113a84:	ff 75 d0             	pushl  -0x30(%ebp)
f0113a87:	e8 df 1e 00 00       	call   f011596b <CCP>
f0113a8c:	83 c4 30             	add    $0x30,%esp
f0113a8f:	85 c0                	test   %eax,%eax
f0113a91:	75 25                	jne    f0113ab8 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113a93:	83 ec 04             	sub    $0x4,%esp
f0113a96:	68 e8 9b 13 f0       	push   $0xf0139be8
f0113a9b:	68 2c 05 00 00       	push   $0x52c
f0113aa0:	68 7e 82 13 f0       	push   $0xf013827e
f0113aa5:	e8 88 c8 fe ff       	call   f0100332 <_warn>
f0113aaa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113aad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113ab1:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0113ab8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113abc:	74 04                	je     f0113ac2 <test_allocate_chunk+0x578>
f0113abe:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113ac2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0113ac6:	83 ec 0c             	sub    $0xc,%esp
f0113ac9:	68 06 90 13 f0       	push   $0xf0139006
f0113ace:	e8 5a d1 fe ff       	call   f0100c2d <cprintf>
f0113ad3:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0113ad6:	83 ec 0c             	sub    $0xc,%esp
f0113ad9:	68 4c 9d 13 f0       	push   $0xf0139d4c
f0113ade:	e8 4a d1 fe ff       	call   f0100c2d <cprintf>
f0113ae3:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ae6:	e8 fd 89 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113aeb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0113aee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113af1:	c1 e0 06             	shl    $0x6,%eax
f0113af4:	68 06 0e 00 00       	push   $0xe06
f0113af9:	50                   	push   %eax
f0113afa:	68 00 00 00 80       	push   $0x80000000
f0113aff:	ff 75 d0             	pushl  -0x30(%ebp)
f0113b02:	e8 7f 4a ff ff       	call   f0108586 <allocate_chunk>
f0113b07:	83 c4 10             	add    $0x10,%esp
f0113b0a:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b0d:	e8 d6 89 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113b12:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0113b15:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0113b19:	75 36                	jne    f0113b51 <test_allocate_chunk+0x607>
f0113b1b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b1e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b21:	89 c1                	mov    %eax,%ecx
f0113b23:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b26:	c1 e0 06             	shl    $0x6,%eax
f0113b29:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113b2c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113b33:	99                   	cltd   
f0113b34:	f7 fb                	idiv   %ebx
f0113b36:	89 c3                	mov    %eax,%ebx
f0113b38:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b3b:	c1 e0 06             	shl    $0x6,%eax
f0113b3e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b41:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113b48:	99                   	cltd   
f0113b49:	f7 fe                	idiv   %esi
f0113b4b:	01 d8                	add    %ebx,%eax
f0113b4d:	39 c1                	cmp    %eax,%ecx
f0113b4f:	74 54                	je     f0113ba5 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0113b51:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b54:	c1 e0 06             	shl    $0x6,%eax
f0113b57:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113b5a:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113b61:	99                   	cltd   
f0113b62:	f7 ff                	idiv   %edi
f0113b64:	89 c1                	mov    %eax,%ecx
f0113b66:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b69:	c1 e0 06             	shl    $0x6,%eax
f0113b6c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b6f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113b76:	99                   	cltd   
f0113b77:	f7 fb                	idiv   %ebx
f0113b79:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113b7c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b7f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b82:	83 ec 08             	sub    $0x8,%esp
f0113b85:	52                   	push   %edx
f0113b86:	50                   	push   %eax
f0113b87:	ff 75 9c             	pushl  -0x64(%ebp)
f0113b8a:	68 ac 9c 13 f0       	push   $0xf0139cac
f0113b8f:	68 42 05 00 00       	push   $0x542
f0113b94:	68 7e 82 13 f0       	push   $0xf013827e
f0113b99:	e8 94 c7 fe ff       	call   f0100332 <_warn>
f0113b9e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ba1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ba5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ba9:	74 04                	je     f0113baf <test_allocate_chunk+0x665>
f0113bab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113baf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113bb3:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113bba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113bbd:	c1 e0 06             	shl    $0x6,%eax
f0113bc0:	83 ec 08             	sub    $0x8,%esp
f0113bc3:	6a 03                	push   $0x3
f0113bc5:	6a 00                	push   $0x0
f0113bc7:	6a 00                	push   $0x0
f0113bc9:	68 07 0e 00 00       	push   $0xe07
f0113bce:	68 07 0e 00 00       	push   $0xe07
f0113bd3:	6a 01                	push   $0x1
f0113bd5:	50                   	push   %eax
f0113bd6:	68 00 00 00 80       	push   $0x80000000
f0113bdb:	6a 00                	push   $0x0
f0113bdd:	ff 75 d0             	pushl  -0x30(%ebp)
f0113be0:	e8 86 1d 00 00       	call   f011596b <CCP>
f0113be5:	83 c4 30             	add    $0x30,%esp
f0113be8:	85 c0                	test   %eax,%eax
f0113bea:	75 25                	jne    f0113c11 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113bec:	83 ec 04             	sub    $0x4,%esp
f0113bef:	68 e8 9b 13 f0       	push   $0xf0139be8
f0113bf4:	68 4b 05 00 00       	push   $0x54b
f0113bf9:	68 7e 82 13 f0       	push   $0xf013827e
f0113bfe:	e8 2f c7 fe ff       	call   f0100332 <_warn>
f0113c03:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c06:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113c0a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0113c11:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c15:	74 04                	je     f0113c1b <test_allocate_chunk+0x6d1>
f0113c17:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113c1b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113c1f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113c23:	74 6f                	je     f0113c94 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0113c25:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113c28:	01 c0                	add    %eax,%eax
f0113c2a:	05 00 00 00 80       	add    $0x80000000,%eax
f0113c2f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113c32:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c35:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0113c38:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113c3b:	89 d0                	mov    %edx,%eax
f0113c3d:	c1 e0 02             	shl    $0x2,%eax
f0113c40:	01 d0                	add    %edx,%eax
f0113c42:	01 c0                	add    %eax,%eax
f0113c44:	01 d0                	add    %edx,%eax
f0113c46:	01 c0                	add    %eax,%eax
f0113c48:	05 00 00 00 80       	add    $0x80000000,%eax
f0113c4d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113c50:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c53:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113c56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c59:	8a 00                	mov    (%eax),%al
f0113c5b:	3c 4b                	cmp    $0x4b,%al
f0113c5d:	75 09                	jne    f0113c68 <test_allocate_chunk+0x71e>
f0113c5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c62:	8a 00                	mov    (%eax),%al
f0113c64:	3c 4d                	cmp    $0x4d,%al
f0113c66:	74 1e                	je     f0113c86 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113c68:	83 ec 04             	sub    $0x4,%esp
f0113c6b:	68 34 9c 13 f0       	push   $0xf0139c34
f0113c70:	68 59 05 00 00       	push   $0x559
f0113c75:	68 7e 82 13 f0       	push   $0xf013827e
f0113c7a:	e8 b3 c6 fe ff       	call   f0100332 <_warn>
f0113c7f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c82:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113c86:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c8a:	74 04                	je     f0113c90 <test_allocate_chunk+0x746>
f0113c8c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113c90:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0113c94:	83 ec 0c             	sub    $0xc,%esp
f0113c97:	68 d8 9a 13 f0       	push   $0xf0139ad8
f0113c9c:	e8 8c cf fe ff       	call   f0100c2d <cprintf>
f0113ca1:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0113ca4:	83 ec 0c             	sub    $0xc,%esp
f0113ca7:	68 88 9d 13 f0       	push   $0xf0139d88
f0113cac:	e8 7c cf fe ff       	call   f0100c2d <cprintf>
f0113cb1:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113cb4:	e8 2f 88 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113cb9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0113cbc:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113cbf:	89 d0                	mov    %edx,%eax
f0113cc1:	01 c0                	add    %eax,%eax
f0113cc3:	01 d0                	add    %edx,%eax
f0113cc5:	01 c0                	add    %eax,%eax
f0113cc7:	01 d0                	add    %edx,%eax
f0113cc9:	68 04 0e 00 00       	push   $0xe04
f0113cce:	50                   	push   %eax
f0113ccf:	68 00 fc 3f 40       	push   $0x403ffc00
f0113cd4:	ff 75 d0             	pushl  -0x30(%ebp)
f0113cd7:	e8 aa 48 ff ff       	call   f0108586 <allocate_chunk>
f0113cdc:	83 c4 10             	add    $0x10,%esp
f0113cdf:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ce2:	e8 01 88 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0113ce7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0113cea:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0113cee:	75 0b                	jne    f0113cfb <test_allocate_chunk+0x7b1>
f0113cf0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113cf3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113cf6:	83 f8 05             	cmp    $0x5,%eax
f0113cf9:	74 2a                	je     f0113d25 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0113cfb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113cfe:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d01:	83 ec 08             	sub    $0x8,%esp
f0113d04:	6a 05                	push   $0x5
f0113d06:	50                   	push   %eax
f0113d07:	ff 75 98             	pushl  -0x68(%ebp)
f0113d0a:	68 ac 9c 13 f0       	push   $0xf0139cac
f0113d0f:	68 70 05 00 00       	push   $0x570
f0113d14:	68 7e 82 13 f0       	push   $0xf013827e
f0113d19:	e8 14 c6 fe ff       	call   f0100332 <_warn>
f0113d1e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d21:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113d25:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d29:	74 04                	je     f0113d2f <test_allocate_chunk+0x7e5>
f0113d2b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d2f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113d33:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113d3a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113d3d:	89 d0                	mov    %edx,%eax
f0113d3f:	01 c0                	add    %eax,%eax
f0113d41:	01 d0                	add    %edx,%eax
f0113d43:	c1 e0 02             	shl    $0x2,%eax
f0113d46:	83 ec 08             	sub    $0x8,%esp
f0113d49:	6a 03                	push   $0x3
f0113d4b:	6a 00                	push   $0x0
f0113d4d:	6a 00                	push   $0x0
f0113d4f:	68 07 0e 00 00       	push   $0xe07
f0113d54:	68 05 0e 00 00       	push   $0xe05
f0113d59:	6a 01                	push   $0x1
f0113d5b:	50                   	push   %eax
f0113d5c:	68 00 f0 3f 40       	push   $0x403ff000
f0113d61:	6a 00                	push   $0x0
f0113d63:	ff 75 d0             	pushl  -0x30(%ebp)
f0113d66:	e8 00 1c 00 00       	call   f011596b <CCP>
f0113d6b:	83 c4 30             	add    $0x30,%esp
f0113d6e:	85 c0                	test   %eax,%eax
f0113d70:	75 25                	jne    f0113d97 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113d72:	83 ec 04             	sub    $0x4,%esp
f0113d75:	68 e8 9b 13 f0       	push   $0xf0139be8
f0113d7a:	68 79 05 00 00       	push   $0x579
f0113d7f:	68 7e 82 13 f0       	push   $0xf013827e
f0113d84:	e8 a9 c5 fe ff       	call   f0100332 <_warn>
f0113d89:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d8c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113d90:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0113d97:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d9b:	74 04                	je     f0113da1 <test_allocate_chunk+0x857>
f0113d9d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113da1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0113da5:	83 ec 0c             	sub    $0xc,%esp
f0113da8:	68 bf 9d 13 f0       	push   $0xf0139dbf
f0113dad:	e8 7b ce fe ff       	call   f0100c2d <cprintf>
f0113db2:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0113db5:	83 ec 08             	sub    $0x8,%esp
f0113db8:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113dbb:	68 d0 9d 13 f0       	push   $0xf0139dd0
f0113dc0:	e8 68 ce fe ff       	call   f0100c2d <cprintf>
f0113dc5:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113dc8:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113dcc:	75 10                	jne    f0113dde <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0113dce:	83 ec 0c             	sub    $0xc,%esp
f0113dd1:	68 04 9e 13 f0       	push   $0xf0139e04
f0113dd6:	e8 52 ce fe ff       	call   f0100c2d <cprintf>
f0113ddb:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113dde:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f0113de3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0113de6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113de9:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113dec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113df1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113df4:	5b                   	pop    %ebx
f0113df5:	5e                   	pop    %esi
f0113df6:	5f                   	pop    %edi
f0113df7:	5d                   	pop    %ebp
f0113df8:	c3                   	ret    

f0113df9 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0113df9:	55                   	push   %ebp
f0113dfa:	89 e5                	mov    %esp,%ebp
f0113dfc:	57                   	push   %edi
f0113dfd:	56                   	push   %esi
f0113dfe:	53                   	push   %ebx
f0113dff:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113e05:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113e08:	bb 18 8d 13 f0       	mov    $0xf0138d18,%ebx
f0113e0d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113e12:	89 c7                	mov    %eax,%edi
f0113e14:	89 de                	mov    %ebx,%esi
f0113e16:	89 d1                	mov    %edx,%ecx
f0113e18:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113e1a:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0113e1d:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113e22:	b0 00                	mov    $0x0,%al
f0113e24:	89 d7                	mov    %edx,%edi
f0113e26:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113e28:	6a 00                	push   $0x0
f0113e2a:	6a 0a                	push   $0xa
f0113e2c:	6a 14                	push   $0x14
f0113e2e:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113e31:	50                   	push   %eax
f0113e32:	e8 65 49 ff ff       	call   f010879c <env_create>
f0113e37:	83 c4 10             	add    $0x10,%esp
f0113e3a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113e3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113e40:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113e43:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0113e46:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113e49:	8b 40 60             	mov    0x60(%eax),%eax
f0113e4c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113e4f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113e52:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113e55:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0113e5c:	75 70 20 
f0113e5f:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0113e66:	00 00 00 
f0113e69:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0113e6c:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113e71:	b8 00 00 00 00       	mov    $0x0,%eax
f0113e76:	89 d7                	mov    %edx,%edi
f0113e78:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113e7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113e7d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113e80:	83 ec 08             	sub    $0x8,%esp
f0113e83:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0113e89:	52                   	push   %edx
f0113e8a:	50                   	push   %eax
f0113e8b:	e8 6b ce 01 00       	call   f0130cfb <ltostr>
f0113e90:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113e93:	83 ec 04             	sub    $0x4,%esp
f0113e96:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113e9c:	50                   	push   %eax
f0113e9d:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113ea3:	50                   	push   %eax
f0113ea4:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0113eaa:	50                   	push   %eax
f0113eab:	e8 43 cf 01 00       	call   f0130df3 <strcconcat>
f0113eb0:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113eb3:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0113eba:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0113ec1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0113ec8:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0113ecf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0113ed3:	83 ec 0c             	sub    $0xc,%esp
f0113ed6:	ff 75 d8             	pushl  -0x28(%ebp)
f0113ed9:	e8 59 1a 00 00       	call   f0115937 <ClearUserSpace>
f0113ede:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0113ee1:	83 ec 0c             	sub    $0xc,%esp
f0113ee4:	68 44 9e 13 f0       	push   $0xf0139e44
f0113ee9:	e8 3f cd fe ff       	call   f0100c2d <cprintf>
f0113eee:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113ef1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ef4:	c1 e0 03             	shl    $0x3,%eax
f0113ef7:	83 ec 04             	sub    $0x4,%esp
f0113efa:	50                   	push   %eax
f0113efb:	6a 00                	push   $0x0
f0113efd:	ff 75 d8             	pushl  -0x28(%ebp)
f0113f00:	e8 bb 47 ff ff       	call   f01086c0 <calculate_required_frames>
f0113f05:	83 c4 10             	add    $0x10,%esp
f0113f08:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113f0b:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113f0f:	74 23                	je     f0113f34 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113f11:	83 ec 0c             	sub    $0xc,%esp
f0113f14:	6a 03                	push   $0x3
f0113f16:	ff 75 c8             	pushl  -0x38(%ebp)
f0113f19:	68 78 9e 13 f0       	push   $0xf0139e78
f0113f1e:	68 b2 05 00 00       	push   $0x5b2
f0113f23:	68 7e 82 13 f0       	push   $0xf013827e
f0113f28:	e8 05 c4 fe ff       	call   f0100332 <_warn>
f0113f2d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f30:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f34:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f38:	74 04                	je     f0113f3e <test_calculate_required_frames+0x145>
f0113f3a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f3e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0113f42:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f45:	c1 e0 02             	shl    $0x2,%eax
f0113f48:	83 ec 04             	sub    $0x4,%esp
f0113f4b:	50                   	push   %eax
f0113f4c:	6a 00                	push   $0x0
f0113f4e:	ff 75 d8             	pushl  -0x28(%ebp)
f0113f51:	e8 6a 47 ff ff       	call   f01086c0 <calculate_required_frames>
f0113f56:	83 c4 10             	add    $0x10,%esp
f0113f59:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0113f5c:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0113f63:	74 26                	je     f0113f8b <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0113f65:	83 ec 0c             	sub    $0xc,%esp
f0113f68:	68 01 04 00 00       	push   $0x401
f0113f6d:	ff 75 c8             	pushl  -0x38(%ebp)
f0113f70:	68 78 9e 13 f0       	push   $0xf0139e78
f0113f75:	68 bc 05 00 00       	push   $0x5bc
f0113f7a:	68 7e 82 13 f0       	push   $0xf013827e
f0113f7f:	e8 ae c3 fe ff       	call   f0100332 <_warn>
f0113f84:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f87:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f8b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f8f:	74 04                	je     f0113f95 <test_calculate_required_frames+0x19c>
f0113f91:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f95:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0113f99:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f9c:	c1 e0 0a             	shl    $0xa,%eax
f0113f9f:	83 ec 04             	sub    $0x4,%esp
f0113fa2:	50                   	push   %eax
f0113fa3:	6a 00                	push   $0x0
f0113fa5:	ff 75 d8             	pushl  -0x28(%ebp)
f0113fa8:	e8 13 47 ff ff       	call   f01086c0 <calculate_required_frames>
f0113fad:	83 c4 10             	add    $0x10,%esp
f0113fb0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0113fb3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113fb6:	c1 e0 0a             	shl    $0xa,%eax
f0113fb9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113fbc:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113fc3:	99                   	cltd   
f0113fc4:	f7 fb                	idiv   %ebx
f0113fc6:	89 c1                	mov    %eax,%ecx
f0113fc8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113fcb:	c1 e0 0a             	shl    $0xa,%eax
f0113fce:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113fd1:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113fd8:	99                   	cltd   
f0113fd9:	f7 fe                	idiv   %esi
f0113fdb:	01 c8                	add    %ecx,%eax
f0113fdd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0113fe0:	74 4c                	je     f011402e <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0113fe2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113fe5:	c1 e0 0a             	shl    $0xa,%eax
f0113fe8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113feb:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113ff2:	99                   	cltd   
f0113ff3:	f7 fb                	idiv   %ebx
f0113ff5:	89 c1                	mov    %eax,%ecx
f0113ff7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113ffa:	c1 e0 0a             	shl    $0xa,%eax
f0113ffd:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114000:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114007:	99                   	cltd   
f0114008:	f7 fe                	idiv   %esi
f011400a:	01 c8                	add    %ecx,%eax
f011400c:	83 ec 0c             	sub    $0xc,%esp
f011400f:	50                   	push   %eax
f0114010:	ff 75 c8             	pushl  -0x38(%ebp)
f0114013:	68 78 9e 13 f0       	push   $0xf0139e78
f0114018:	68 c6 05 00 00       	push   $0x5c6
f011401d:	68 7e 82 13 f0       	push   $0xf013827e
f0114022:	e8 0b c3 fe ff       	call   f0100332 <_warn>
f0114027:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011402a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011402e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114032:	74 04                	je     f0114038 <test_calculate_required_frames+0x23f>
f0114034:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114038:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f011403c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011403f:	89 d0                	mov    %edx,%eax
f0114041:	01 c0                	add    %eax,%eax
f0114043:	01 d0                	add    %edx,%eax
f0114045:	01 c0                	add    %eax,%eax
f0114047:	83 ec 04             	sub    $0x4,%esp
f011404a:	50                   	push   %eax
f011404b:	68 00 10 00 00       	push   $0x1000
f0114050:	ff 75 d8             	pushl  -0x28(%ebp)
f0114053:	e8 68 46 ff ff       	call   f01086c0 <calculate_required_frames>
f0114058:	83 c4 10             	add    $0x10,%esp
f011405b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011405e:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114062:	74 23                	je     f0114087 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114064:	83 ec 0c             	sub    $0xc,%esp
f0114067:	6a 03                	push   $0x3
f0114069:	ff 75 c8             	pushl  -0x38(%ebp)
f011406c:	68 78 9e 13 f0       	push   $0xf0139e78
f0114071:	68 d2 05 00 00       	push   $0x5d2
f0114076:	68 7e 82 13 f0       	push   $0xf013827e
f011407b:	e8 b2 c2 fe ff       	call   f0100332 <_warn>
f0114080:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114083:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114087:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011408b:	74 04                	je     f0114091 <test_calculate_required_frames+0x298>
f011408d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114091:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114095:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114098:	89 c2                	mov    %eax,%edx
f011409a:	01 d2                	add    %edx,%edx
f011409c:	01 d0                	add    %edx,%eax
f011409e:	83 ec 04             	sub    $0x4,%esp
f01140a1:	50                   	push   %eax
f01140a2:	68 00 18 00 00       	push   $0x1800
f01140a7:	ff 75 d8             	pushl  -0x28(%ebp)
f01140aa:	e8 11 46 ff ff       	call   f01086c0 <calculate_required_frames>
f01140af:	83 c4 10             	add    $0x10,%esp
f01140b2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01140b5:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01140b9:	74 23                	je     f01140de <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01140bb:	83 ec 0c             	sub    $0xc,%esp
f01140be:	6a 03                	push   $0x3
f01140c0:	ff 75 c8             	pushl  -0x38(%ebp)
f01140c3:	68 78 9e 13 f0       	push   $0xf0139e78
f01140c8:	68 dc 05 00 00       	push   $0x5dc
f01140cd:	68 7e 82 13 f0       	push   $0xf013827e
f01140d2:	e8 5b c2 fe ff       	call   f0100332 <_warn>
f01140d7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140da:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140de:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140e2:	74 04                	je     f01140e8 <test_calculate_required_frames+0x2ef>
f01140e4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01140ec:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01140ef:	89 d0                	mov    %edx,%eax
f01140f1:	c1 e0 02             	shl    $0x2,%eax
f01140f4:	01 d0                	add    %edx,%eax
f01140f6:	01 c0                	add    %eax,%eax
f01140f8:	83 ec 04             	sub    $0x4,%esp
f01140fb:	50                   	push   %eax
f01140fc:	68 00 00 40 00       	push   $0x400000
f0114101:	ff 75 d8             	pushl  -0x28(%ebp)
f0114104:	e8 b7 45 ff ff       	call   f01086c0 <calculate_required_frames>
f0114109:	83 c4 10             	add    $0x10,%esp
f011410c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f011410f:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114116:	74 26                	je     f011413e <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114118:	83 ec 0c             	sub    $0xc,%esp
f011411b:	68 03 0a 00 00       	push   $0xa03
f0114120:	ff 75 c8             	pushl  -0x38(%ebp)
f0114123:	68 78 9e 13 f0       	push   $0xf0139e78
f0114128:	68 e6 05 00 00       	push   $0x5e6
f011412d:	68 7e 82 13 f0       	push   $0xf013827e
f0114132:	e8 fb c1 fe ff       	call   f0100332 <_warn>
f0114137:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011413a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011413e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114142:	74 04                	je     f0114148 <test_calculate_required_frames+0x34f>
f0114144:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114148:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011414c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011414f:	01 c0                	add    %eax,%eax
f0114151:	83 ec 04             	sub    $0x4,%esp
f0114154:	50                   	push   %eax
f0114155:	68 00 00 70 00       	push   $0x700000
f011415a:	ff 75 d8             	pushl  -0x28(%ebp)
f011415d:	e8 5e 45 ff ff       	call   f01086c0 <calculate_required_frames>
f0114162:	83 c4 10             	add    $0x10,%esp
f0114165:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0114168:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f011416f:	74 26                	je     f0114197 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114171:	83 ec 0c             	sub    $0xc,%esp
f0114174:	68 02 02 00 00       	push   $0x202
f0114179:	ff 75 c8             	pushl  -0x38(%ebp)
f011417c:	68 78 9e 13 f0       	push   $0xf0139e78
f0114181:	68 f2 05 00 00       	push   $0x5f2
f0114186:	68 7e 82 13 f0       	push   $0xf013827e
f011418b:	e8 a2 c1 fe ff       	call   f0100332 <_warn>
f0114190:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114193:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114197:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011419b:	74 04                	je     f01141a1 <test_calculate_required_frames+0x3a8>
f011419d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141a1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01141a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01141a8:	83 ec 04             	sub    $0x4,%esp
f01141ab:	50                   	push   %eax
f01141ac:	68 ff ff 3f 00       	push   $0x3fffff
f01141b1:	ff 75 d8             	pushl  -0x28(%ebp)
f01141b4:	e8 07 45 ff ff       	call   f01086c0 <calculate_required_frames>
f01141b9:	83 c4 10             	add    $0x10,%esp
f01141bc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f01141bf:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f01141c3:	74 23                	je     f01141e8 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f01141c5:	83 ec 0c             	sub    $0xc,%esp
f01141c8:	6a 04                	push   $0x4
f01141ca:	ff 75 c8             	pushl  -0x38(%ebp)
f01141cd:	68 78 9e 13 f0       	push   $0xf0139e78
f01141d2:	68 fc 05 00 00       	push   $0x5fc
f01141d7:	68 7e 82 13 f0       	push   $0xf013827e
f01141dc:	e8 51 c1 fe ff       	call   f0100332 <_warn>
f01141e1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141e8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141ec:	74 04                	je     f01141f2 <test_calculate_required_frames+0x3f9>
f01141ee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01141f6:	83 ec 0c             	sub    $0xc,%esp
f01141f9:	68 c9 99 13 f0       	push   $0xf01399c9
f01141fe:	e8 2a ca fe ff       	call   f0100c2d <cprintf>
f0114203:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0114206:	83 ec 0c             	sub    $0xc,%esp
f0114209:	68 d0 9e 13 f0       	push   $0xf0139ed0
f011420e:	e8 1a ca fe ff       	call   f0100c2d <cprintf>
f0114213:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114216:	83 ec 04             	sub    $0x4,%esp
f0114219:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011421f:	50                   	push   %eax
f0114220:	68 82 8d 13 f0       	push   $0xf0138d82
f0114225:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011422b:	50                   	push   %eax
f011422c:	e8 c2 cb 01 00       	call   f0130df3 <strcconcat>
f0114231:	83 c4 10             	add    $0x10,%esp
f0114234:	83 ec 0c             	sub    $0xc,%esp
f0114237:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011423d:	50                   	push   %eax
f011423e:	e8 4c ca fe ff       	call   f0100c8f <execute_command>
f0114243:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114246:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114249:	c1 e0 03             	shl    $0x3,%eax
f011424c:	83 ec 04             	sub    $0x4,%esp
f011424f:	50                   	push   %eax
f0114250:	6a 00                	push   $0x0
f0114252:	ff 75 d8             	pushl  -0x28(%ebp)
f0114255:	e8 66 44 ff ff       	call   f01086c0 <calculate_required_frames>
f011425a:	83 c4 10             	add    $0x10,%esp
f011425d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114260:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114267:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011426a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011426d:	74 24                	je     f0114293 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011426f:	83 ec 0c             	sub    $0xc,%esp
f0114272:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114275:	ff 75 c8             	pushl  -0x38(%ebp)
f0114278:	68 78 9e 13 f0       	push   $0xf0139e78
f011427d:	68 10 06 00 00       	push   $0x610
f0114282:	68 7e 82 13 f0       	push   $0xf013827e
f0114287:	e8 a6 c0 fe ff       	call   f0100332 <_warn>
f011428c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011428f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114293:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114297:	74 04                	je     f011429d <test_calculate_required_frames+0x4a4>
f0114299:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011429d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01142a1:	83 ec 04             	sub    $0x4,%esp
f01142a4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01142aa:	50                   	push   %eax
f01142ab:	68 8f 8d 13 f0       	push   $0xf0138d8f
f01142b0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01142b6:	50                   	push   %eax
f01142b7:	e8 37 cb 01 00       	call   f0130df3 <strcconcat>
f01142bc:	83 c4 10             	add    $0x10,%esp
f01142bf:	83 ec 0c             	sub    $0xc,%esp
f01142c2:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01142c8:	50                   	push   %eax
f01142c9:	e8 c1 c9 fe ff       	call   f0100c8f <execute_command>
f01142ce:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01142d1:	83 ec 04             	sub    $0x4,%esp
f01142d4:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01142da:	50                   	push   %eax
f01142db:	68 04 9f 13 f0       	push   $0xf0139f04
f01142e0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01142e6:	50                   	push   %eax
f01142e7:	e8 07 cb 01 00       	call   f0130df3 <strcconcat>
f01142ec:	83 c4 10             	add    $0x10,%esp
f01142ef:	83 ec 0c             	sub    $0xc,%esp
f01142f2:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01142f8:	50                   	push   %eax
f01142f9:	e8 91 c9 fe ff       	call   f0100c8f <execute_command>
f01142fe:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0114301:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114304:	c1 e0 03             	shl    $0x3,%eax
f0114307:	83 ec 04             	sub    $0x4,%esp
f011430a:	50                   	push   %eax
f011430b:	6a 00                	push   $0x0
f011430d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114310:	e8 ab 43 ff ff       	call   f01086c0 <calculate_required_frames>
f0114315:	83 c4 10             	add    $0x10,%esp
f0114318:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f011431b:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0114322:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114325:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114328:	74 24                	je     f011434e <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011432a:	83 ec 0c             	sub    $0xc,%esp
f011432d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114330:	ff 75 c8             	pushl  -0x38(%ebp)
f0114333:	68 78 9e 13 f0       	push   $0xf0139e78
f0114338:	68 1e 06 00 00       	push   $0x61e
f011433d:	68 7e 82 13 f0       	push   $0xf013827e
f0114342:	e8 eb bf fe ff       	call   f0100332 <_warn>
f0114347:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011434a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011434e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114352:	74 04                	je     f0114358 <test_calculate_required_frames+0x55f>
f0114354:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114358:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011435c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011435f:	c1 e0 0a             	shl    $0xa,%eax
f0114362:	83 ec 04             	sub    $0x4,%esp
f0114365:	50                   	push   %eax
f0114366:	6a 00                	push   $0x0
f0114368:	ff 75 d8             	pushl  -0x28(%ebp)
f011436b:	e8 50 43 ff ff       	call   f01086c0 <calculate_required_frames>
f0114370:	83 c4 10             	add    $0x10,%esp
f0114373:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0114376:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114379:	c1 e0 0a             	shl    $0xa,%eax
f011437c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011437f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114386:	99                   	cltd   
f0114387:	f7 fb                	idiv   %ebx
f0114389:	89 c1                	mov    %eax,%ecx
f011438b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011438e:	c1 e0 0a             	shl    $0xa,%eax
f0114391:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114394:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011439b:	99                   	cltd   
f011439c:	f7 fe                	idiv   %esi
f011439e:	01 c8                	add    %ecx,%eax
f01143a0:	83 e8 05             	sub    $0x5,%eax
f01143a3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01143a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01143a9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01143ac:	74 24                	je     f01143d2 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01143ae:	83 ec 0c             	sub    $0xc,%esp
f01143b1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01143b4:	ff 75 c8             	pushl  -0x38(%ebp)
f01143b7:	68 78 9e 13 f0       	push   $0xf0139e78
f01143bc:	68 29 06 00 00       	push   $0x629
f01143c1:	68 7e 82 13 f0       	push   $0xf013827e
f01143c6:	e8 67 bf fe ff       	call   f0100332 <_warn>
f01143cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01143d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143d6:	74 04                	je     f01143dc <test_calculate_required_frames+0x5e3>
f01143d8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01143dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01143e0:	83 ec 04             	sub    $0x4,%esp
f01143e3:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01143e9:	50                   	push   %eax
f01143ea:	68 10 9f 13 f0       	push   $0xf0139f10
f01143ef:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01143f5:	50                   	push   %eax
f01143f6:	e8 f8 c9 01 00       	call   f0130df3 <strcconcat>
f01143fb:	83 c4 10             	add    $0x10,%esp
f01143fe:	83 ec 0c             	sub    $0xc,%esp
f0114401:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114407:	50                   	push   %eax
f0114408:	e8 82 c8 fe ff       	call   f0100c8f <execute_command>
f011440d:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114410:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114413:	89 c2                	mov    %eax,%edx
f0114415:	01 d2                	add    %edx,%edx
f0114417:	01 d0                	add    %edx,%eax
f0114419:	83 ec 04             	sub    $0x4,%esp
f011441c:	50                   	push   %eax
f011441d:	68 00 18 00 00       	push   $0x1800
f0114422:	ff 75 d8             	pushl  -0x28(%ebp)
f0114425:	e8 96 42 ff ff       	call   f01086c0 <calculate_required_frames>
f011442a:	83 c4 10             	add    $0x10,%esp
f011442d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114430:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114437:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011443a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011443d:	74 24                	je     f0114463 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011443f:	83 ec 0c             	sub    $0xc,%esp
f0114442:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114445:	ff 75 c8             	pushl  -0x38(%ebp)
f0114448:	68 78 9e 13 f0       	push   $0xf0139e78
f011444d:	68 38 06 00 00       	push   $0x638
f0114452:	68 7e 82 13 f0       	push   $0xf013827e
f0114457:	e8 d6 be fe ff       	call   f0100332 <_warn>
f011445c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011445f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114463:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114467:	74 04                	je     f011446d <test_calculate_required_frames+0x674>
f0114469:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011446d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114471:	83 ec 04             	sub    $0x4,%esp
f0114474:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011447a:	50                   	push   %eax
f011447b:	68 e8 8f 13 f0       	push   $0xf0138fe8
f0114480:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114486:	50                   	push   %eax
f0114487:	e8 67 c9 01 00       	call   f0130df3 <strcconcat>
f011448c:	83 c4 10             	add    $0x10,%esp
f011448f:	83 ec 0c             	sub    $0xc,%esp
f0114492:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114498:	50                   	push   %eax
f0114499:	e8 f1 c7 fe ff       	call   f0100c8f <execute_command>
f011449e:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01144a1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01144a4:	89 d0                	mov    %edx,%eax
f01144a6:	c1 e0 02             	shl    $0x2,%eax
f01144a9:	01 d0                	add    %edx,%eax
f01144ab:	01 c0                	add    %eax,%eax
f01144ad:	83 ec 04             	sub    $0x4,%esp
f01144b0:	50                   	push   %eax
f01144b1:	68 00 00 40 00       	push   $0x400000
f01144b6:	ff 75 d8             	pushl  -0x28(%ebp)
f01144b9:	e8 02 42 ff ff       	call   f01086c0 <calculate_required_frames>
f01144be:	83 c4 10             	add    $0x10,%esp
f01144c1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f01144c4:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f01144cb:	74 26                	je     f01144f3 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01144cd:	83 ec 0c             	sub    $0xc,%esp
f01144d0:	68 03 0a 00 00       	push   $0xa03
f01144d5:	ff 75 c8             	pushl  -0x38(%ebp)
f01144d8:	68 78 9e 13 f0       	push   $0xf0139e78
f01144dd:	68 44 06 00 00       	push   $0x644
f01144e2:	68 7e 82 13 f0       	push   $0xf013827e
f01144e7:	e8 46 be fe ff       	call   f0100332 <_warn>
f01144ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144f7:	74 04                	je     f01144fd <test_calculate_required_frames+0x704>
f01144f9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114501:	83 ec 04             	sub    $0x4,%esp
f0114504:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011450a:	50                   	push   %eax
f011450b:	68 f2 8f 13 f0       	push   $0xf0138ff2
f0114510:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114516:	50                   	push   %eax
f0114517:	e8 d7 c8 01 00       	call   f0130df3 <strcconcat>
f011451c:	83 c4 10             	add    $0x10,%esp
f011451f:	83 ec 0c             	sub    $0xc,%esp
f0114522:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114528:	50                   	push   %eax
f0114529:	e8 61 c7 fe ff       	call   f0100c8f <execute_command>
f011452e:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114531:	83 ec 04             	sub    $0x4,%esp
f0114534:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011453a:	50                   	push   %eax
f011453b:	68 18 9f 13 f0       	push   $0xf0139f18
f0114540:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114546:	50                   	push   %eax
f0114547:	e8 a7 c8 01 00       	call   f0130df3 <strcconcat>
f011454c:	83 c4 10             	add    $0x10,%esp
f011454f:	83 ec 0c             	sub    $0xc,%esp
f0114552:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114558:	50                   	push   %eax
f0114559:	e8 31 c7 fe ff       	call   f0100c8f <execute_command>
f011455e:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114561:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114564:	01 c0                	add    %eax,%eax
f0114566:	83 ec 04             	sub    $0x4,%esp
f0114569:	50                   	push   %eax
f011456a:	68 00 00 70 00       	push   $0x700000
f011456f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114572:	e8 49 41 ff ff       	call   f01086c0 <calculate_required_frames>
f0114577:	83 c4 10             	add    $0x10,%esp
f011457a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011457d:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0114584:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114587:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011458a:	74 24                	je     f01145b0 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011458c:	83 ec 0c             	sub    $0xc,%esp
f011458f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114592:	ff 75 c8             	pushl  -0x38(%ebp)
f0114595:	68 78 9e 13 f0       	push   $0xf0139e78
f011459a:	68 54 06 00 00       	push   $0x654
f011459f:	68 7e 82 13 f0       	push   $0xf013827e
f01145a4:	e8 89 bd fe ff       	call   f0100332 <_warn>
f01145a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01145b0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145b4:	74 04                	je     f01145ba <test_calculate_required_frames+0x7c1>
f01145b6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01145ba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01145be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01145c1:	83 ec 04             	sub    $0x4,%esp
f01145c4:	50                   	push   %eax
f01145c5:	68 ff ff 3f 00       	push   $0x3fffff
f01145ca:	ff 75 d8             	pushl  -0x28(%ebp)
f01145cd:	e8 ee 40 ff ff       	call   f01086c0 <calculate_required_frames>
f01145d2:	83 c4 10             	add    $0x10,%esp
f01145d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f01145d8:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f01145df:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01145e2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01145e5:	74 24                	je     f011460b <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01145e7:	83 ec 0c             	sub    $0xc,%esp
f01145ea:	ff 75 c4             	pushl  -0x3c(%ebp)
f01145ed:	ff 75 c8             	pushl  -0x38(%ebp)
f01145f0:	68 78 9e 13 f0       	push   $0xf0139e78
f01145f5:	68 5f 06 00 00       	push   $0x65f
f01145fa:	68 7e 82 13 f0       	push   $0xf013827e
f01145ff:	e8 2e bd fe ff       	call   f0100332 <_warn>
f0114604:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114607:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011460b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011460f:	74 04                	je     f0114615 <test_calculate_required_frames+0x81c>
f0114611:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114615:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114619:	83 ec 0c             	sub    $0xc,%esp
f011461c:	68 a3 8f 13 f0       	push   $0xf0138fa3
f0114621:	e8 07 c6 fe ff       	call   f0100c2d <cprintf>
f0114626:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0114629:	83 ec 08             	sub    $0x8,%esp
f011462c:	ff 75 e4             	pushl  -0x1c(%ebp)
f011462f:	68 24 9f 13 f0       	push   $0xf0139f24
f0114634:	e8 f4 c5 fe ff       	call   f0100c2d <cprintf>
f0114639:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011463c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114640:	75 10                	jne    f0114652 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0114642:	83 ec 0c             	sub    $0xc,%esp
f0114645:	68 64 9f 13 f0       	push   $0xf0139f64
f011464a:	e8 de c5 fe ff       	call   f0100c2d <cprintf>
f011464f:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114652:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f0114657:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011465a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011465d:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114660:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114665:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114668:	5b                   	pop    %ebx
f0114669:	5e                   	pop    %esi
f011466a:	5f                   	pop    %edi
f011466b:	5d                   	pop    %ebp
f011466c:	c3                   	ret    

f011466d <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f011466d:	55                   	push   %ebp
f011466e:	89 e5                	mov    %esp,%ebp
f0114670:	57                   	push   %edi
f0114671:	56                   	push   %esi
f0114672:	53                   	push   %ebx
f0114673:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114679:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011467c:	bb 18 8d 13 f0       	mov    $0xf0138d18,%ebx
f0114681:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114686:	89 c7                	mov    %eax,%edi
f0114688:	89 de                	mov    %ebx,%esi
f011468a:	89 d1                	mov    %edx,%ecx
f011468c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011468e:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114691:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114696:	b0 00                	mov    $0x0,%al
f0114698:	89 d7                	mov    %edx,%edi
f011469a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011469c:	6a 00                	push   $0x0
f011469e:	6a 0a                	push   $0xa
f01146a0:	6a 14                	push   $0x14
f01146a2:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01146a5:	50                   	push   %eax
f01146a6:	e8 f1 40 ff ff       	call   f010879c <env_create>
f01146ab:	83 c4 10             	add    $0x10,%esp
f01146ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01146b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01146b4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01146b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01146ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01146bd:	8b 40 60             	mov    0x60(%eax),%eax
f01146c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01146c3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01146c6:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01146c9:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01146d0:	75 70 20 
f01146d3:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01146da:	00 00 00 
f01146dd:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01146e0:	b9 03 00 00 00       	mov    $0x3,%ecx
f01146e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01146ea:	89 d7                	mov    %edx,%edi
f01146ec:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01146ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01146f1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01146f4:	83 ec 08             	sub    $0x8,%esp
f01146f7:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01146fd:	52                   	push   %edx
f01146fe:	50                   	push   %eax
f01146ff:	e8 f7 c5 01 00       	call   f0130cfb <ltostr>
f0114704:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114707:	83 ec 04             	sub    $0x4,%esp
f011470a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114710:	50                   	push   %eax
f0114711:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114717:	50                   	push   %eax
f0114718:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011471e:	50                   	push   %eax
f011471f:	e8 cf c6 01 00       	call   f0130df3 <strcconcat>
f0114724:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114727:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011472e:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114735:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f011473c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114740:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114747:	00 00 00 
	uint32 num_tables = 0;
f011474a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114751:	00 00 00 
	ClearUserSpace(proc_directory);
f0114754:	83 ec 0c             	sub    $0xc,%esp
f0114757:	ff 75 d8             	pushl  -0x28(%ebp)
f011475a:	e8 d8 11 00 00       	call   f0115937 <ClearUserSpace>
f011475f:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114762:	83 ec 0c             	sub    $0xc,%esp
f0114765:	68 44 9e 13 f0       	push   $0xf0139e44
f011476a:	e8 be c4 fe ff       	call   f0100c2d <cprintf>
f011476f:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114772:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114775:	c1 e0 03             	shl    $0x3,%eax
f0114778:	89 c2                	mov    %eax,%edx
f011477a:	83 ec 0c             	sub    $0xc,%esp
f011477d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114783:	50                   	push   %eax
f0114784:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011478a:	50                   	push   %eax
f011478b:	52                   	push   %edx
f011478c:	6a 00                	push   $0x0
f011478e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114791:	e8 0d 3f ff ff       	call   f01086a3 <calculate_allocated_space>
f0114796:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114799:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011479f:	85 c0                	test   %eax,%eax
f01147a1:	74 27                	je     f01147ca <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01147a3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01147a9:	83 ec 0c             	sub    $0xc,%esp
f01147ac:	6a 00                	push   $0x0
f01147ae:	50                   	push   %eax
f01147af:	68 b0 9f 13 f0       	push   $0xf0139fb0
f01147b4:	68 94 06 00 00       	push   $0x694
f01147b9:	68 7e 82 13 f0       	push   $0xf013827e
f01147be:	e8 6f bb fe ff       	call   f0100332 <_warn>
f01147c3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147c6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01147ca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147d0:	85 c0                	test   %eax,%eax
f01147d2:	74 27                	je     f01147fb <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01147d4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147da:	83 ec 0c             	sub    $0xc,%esp
f01147dd:	6a 00                	push   $0x0
f01147df:	50                   	push   %eax
f01147e0:	68 10 a0 13 f0       	push   $0xf013a010
f01147e5:	68 99 06 00 00       	push   $0x699
f01147ea:	68 7e 82 13 f0       	push   $0xf013827e
f01147ef:	e8 3e bb fe ff       	call   f0100332 <_warn>
f01147f4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147f7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147fb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147ff:	74 04                	je     f0114805 <test_calculate_allocated_space+0x198>
f0114801:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114805:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0114809:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114810:	00 00 00 
		num_pages = 0;
f0114813:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011481a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f011481d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114820:	c1 e0 02             	shl    $0x2,%eax
f0114823:	89 c2                	mov    %eax,%edx
f0114825:	83 ec 0c             	sub    $0xc,%esp
f0114828:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011482e:	50                   	push   %eax
f011482f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114835:	50                   	push   %eax
f0114836:	52                   	push   %edx
f0114837:	6a 00                	push   $0x0
f0114839:	ff 75 d8             	pushl  -0x28(%ebp)
f011483c:	e8 62 3e ff ff       	call   f01086a3 <calculate_allocated_space>
f0114841:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114844:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011484a:	85 c0                	test   %eax,%eax
f011484c:	74 27                	je     f0114875 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011484e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114854:	83 ec 0c             	sub    $0xc,%esp
f0114857:	6a 00                	push   $0x0
f0114859:	50                   	push   %eax
f011485a:	68 b0 9f 13 f0       	push   $0xf0139fb0
f011485f:	68 a5 06 00 00       	push   $0x6a5
f0114864:	68 7e 82 13 f0       	push   $0xf013827e
f0114869:	e8 c4 ba fe ff       	call   f0100332 <_warn>
f011486e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114871:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114875:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011487b:	85 c0                	test   %eax,%eax
f011487d:	74 27                	je     f01148a6 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011487f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114885:	83 ec 0c             	sub    $0xc,%esp
f0114888:	6a 00                	push   $0x0
f011488a:	50                   	push   %eax
f011488b:	68 10 a0 13 f0       	push   $0xf013a010
f0114890:	68 aa 06 00 00       	push   $0x6aa
f0114895:	68 7e 82 13 f0       	push   $0xf013827e
f011489a:	e8 93 ba fe ff       	call   f0100332 <_warn>
f011489f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148a2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148a6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148aa:	74 04                	je     f01148b0 <test_calculate_allocated_space+0x243>
f01148ac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148b0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01148b4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01148bb:	00 00 00 
		num_pages = 0;
f01148be:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01148c5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01148c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01148cb:	c1 e0 0a             	shl    $0xa,%eax
f01148ce:	89 c2                	mov    %eax,%edx
f01148d0:	83 ec 0c             	sub    $0xc,%esp
f01148d3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01148d9:	50                   	push   %eax
f01148da:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01148e0:	50                   	push   %eax
f01148e1:	52                   	push   %edx
f01148e2:	6a 00                	push   $0x0
f01148e4:	ff 75 d8             	pushl  -0x28(%ebp)
f01148e7:	e8 b7 3d ff ff       	call   f01086a3 <calculate_allocated_space>
f01148ec:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01148ef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01148f5:	85 c0                	test   %eax,%eax
f01148f7:	74 27                	je     f0114920 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01148f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01148ff:	83 ec 0c             	sub    $0xc,%esp
f0114902:	6a 00                	push   $0x0
f0114904:	50                   	push   %eax
f0114905:	68 b0 9f 13 f0       	push   $0xf0139fb0
f011490a:	68 b6 06 00 00       	push   $0x6b6
f011490f:	68 7e 82 13 f0       	push   $0xf013827e
f0114914:	e8 19 ba fe ff       	call   f0100332 <_warn>
f0114919:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011491c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114920:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114926:	85 c0                	test   %eax,%eax
f0114928:	74 27                	je     f0114951 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011492a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114930:	83 ec 0c             	sub    $0xc,%esp
f0114933:	6a 00                	push   $0x0
f0114935:	50                   	push   %eax
f0114936:	68 10 a0 13 f0       	push   $0xf013a010
f011493b:	68 bb 06 00 00       	push   $0x6bb
f0114940:	68 7e 82 13 f0       	push   $0xf013827e
f0114945:	e8 e8 b9 fe ff       	call   f0100332 <_warn>
f011494a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011494d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114951:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114955:	74 04                	je     f011495b <test_calculate_allocated_space+0x2ee>
f0114957:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011495b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f011495f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114966:	00 00 00 
		num_pages = 0;
f0114969:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114970:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0114973:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114976:	89 d0                	mov    %edx,%eax
f0114978:	01 c0                	add    %eax,%eax
f011497a:	01 d0                	add    %edx,%eax
f011497c:	01 c0                	add    %eax,%eax
f011497e:	05 00 10 00 00       	add    $0x1000,%eax
f0114983:	89 c2                	mov    %eax,%edx
f0114985:	83 ec 0c             	sub    $0xc,%esp
f0114988:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011498e:	50                   	push   %eax
f011498f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114995:	50                   	push   %eax
f0114996:	52                   	push   %edx
f0114997:	68 00 10 00 00       	push   $0x1000
f011499c:	ff 75 d8             	pushl  -0x28(%ebp)
f011499f:	e8 ff 3c ff ff       	call   f01086a3 <calculate_allocated_space>
f01149a4:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01149a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01149ad:	85 c0                	test   %eax,%eax
f01149af:	74 27                	je     f01149d8 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01149b1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01149b7:	83 ec 0c             	sub    $0xc,%esp
f01149ba:	6a 00                	push   $0x0
f01149bc:	50                   	push   %eax
f01149bd:	68 b0 9f 13 f0       	push   $0xf0139fb0
f01149c2:	68 c8 06 00 00       	push   $0x6c8
f01149c7:	68 7e 82 13 f0       	push   $0xf013827e
f01149cc:	e8 61 b9 fe ff       	call   f0100332 <_warn>
f01149d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01149d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01149de:	85 c0                	test   %eax,%eax
f01149e0:	74 27                	je     f0114a09 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01149e2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01149e8:	83 ec 0c             	sub    $0xc,%esp
f01149eb:	6a 00                	push   $0x0
f01149ed:	50                   	push   %eax
f01149ee:	68 10 a0 13 f0       	push   $0xf013a010
f01149f3:	68 cd 06 00 00       	push   $0x6cd
f01149f8:	68 7e 82 13 f0       	push   $0xf013827e
f01149fd:	e8 30 b9 fe ff       	call   f0100332 <_warn>
f0114a02:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a05:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a09:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a0d:	74 04                	je     f0114a13 <test_calculate_allocated_space+0x3a6>
f0114a0f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a13:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0114a17:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114a1e:	00 00 00 
		num_pages = 0;
f0114a21:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114a28:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114a2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a2e:	89 c2                	mov    %eax,%edx
f0114a30:	01 d2                	add    %edx,%edx
f0114a32:	01 d0                	add    %edx,%eax
f0114a34:	05 00 18 00 00       	add    $0x1800,%eax
f0114a39:	89 c2                	mov    %eax,%edx
f0114a3b:	83 ec 0c             	sub    $0xc,%esp
f0114a3e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114a44:	50                   	push   %eax
f0114a45:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114a4b:	50                   	push   %eax
f0114a4c:	52                   	push   %edx
f0114a4d:	68 00 18 00 00       	push   $0x1800
f0114a52:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a55:	e8 49 3c ff ff       	call   f01086a3 <calculate_allocated_space>
f0114a5a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114a5d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a63:	85 c0                	test   %eax,%eax
f0114a65:	74 27                	je     f0114a8e <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114a67:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a6d:	83 ec 0c             	sub    $0xc,%esp
f0114a70:	6a 00                	push   $0x0
f0114a72:	50                   	push   %eax
f0114a73:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0114a78:	68 d9 06 00 00       	push   $0x6d9
f0114a7d:	68 7e 82 13 f0       	push   $0xf013827e
f0114a82:	e8 ab b8 fe ff       	call   f0100332 <_warn>
f0114a87:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a8a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114a8e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114a94:	85 c0                	test   %eax,%eax
f0114a96:	74 27                	je     f0114abf <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114a98:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114a9e:	83 ec 0c             	sub    $0xc,%esp
f0114aa1:	6a 00                	push   $0x0
f0114aa3:	50                   	push   %eax
f0114aa4:	68 10 a0 13 f0       	push   $0xf013a010
f0114aa9:	68 de 06 00 00       	push   $0x6de
f0114aae:	68 7e 82 13 f0       	push   $0xf013827e
f0114ab3:	e8 7a b8 fe ff       	call   f0100332 <_warn>
f0114ab8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114abb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114abf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ac3:	74 04                	je     f0114ac9 <test_calculate_allocated_space+0x45c>
f0114ac5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ac9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0114acd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ad4:	00 00 00 
		num_pages = 0;
f0114ad7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114ade:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0114ae1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114ae4:	89 d0                	mov    %edx,%eax
f0114ae6:	c1 e0 02             	shl    $0x2,%eax
f0114ae9:	01 d0                	add    %edx,%eax
f0114aeb:	01 c0                	add    %eax,%eax
f0114aed:	05 00 00 40 00       	add    $0x400000,%eax
f0114af2:	89 c2                	mov    %eax,%edx
f0114af4:	83 ec 0c             	sub    $0xc,%esp
f0114af7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114afd:	50                   	push   %eax
f0114afe:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114b04:	50                   	push   %eax
f0114b05:	52                   	push   %edx
f0114b06:	68 00 00 40 00       	push   $0x400000
f0114b0b:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b0e:	e8 90 3b ff ff       	call   f01086a3 <calculate_allocated_space>
f0114b13:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114b16:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b1c:	85 c0                	test   %eax,%eax
f0114b1e:	74 27                	je     f0114b47 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114b20:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b26:	83 ec 0c             	sub    $0xc,%esp
f0114b29:	6a 00                	push   $0x0
f0114b2b:	50                   	push   %eax
f0114b2c:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0114b31:	68 ea 06 00 00       	push   $0x6ea
f0114b36:	68 7e 82 13 f0       	push   $0xf013827e
f0114b3b:	e8 f2 b7 fe ff       	call   f0100332 <_warn>
f0114b40:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b43:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114b47:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b4d:	85 c0                	test   %eax,%eax
f0114b4f:	74 27                	je     f0114b78 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114b51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b57:	83 ec 0c             	sub    $0xc,%esp
f0114b5a:	6a 00                	push   $0x0
f0114b5c:	50                   	push   %eax
f0114b5d:	68 10 a0 13 f0       	push   $0xf013a010
f0114b62:	68 ef 06 00 00       	push   $0x6ef
f0114b67:	68 7e 82 13 f0       	push   $0xf013827e
f0114b6c:	e8 c1 b7 fe ff       	call   f0100332 <_warn>
f0114b71:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b74:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b78:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b7c:	74 04                	je     f0114b82 <test_calculate_allocated_space+0x515>
f0114b7e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b82:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0114b86:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114b8d:	00 00 00 
		num_pages = 0;
f0114b90:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114b97:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114b9a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b9d:	05 00 00 38 00       	add    $0x380000,%eax
f0114ba2:	01 c0                	add    %eax,%eax
f0114ba4:	89 c2                	mov    %eax,%edx
f0114ba6:	83 ec 0c             	sub    $0xc,%esp
f0114ba9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114baf:	50                   	push   %eax
f0114bb0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114bb6:	50                   	push   %eax
f0114bb7:	52                   	push   %edx
f0114bb8:	68 00 00 70 00       	push   $0x700000
f0114bbd:	ff 75 d8             	pushl  -0x28(%ebp)
f0114bc0:	e8 de 3a ff ff       	call   f01086a3 <calculate_allocated_space>
f0114bc5:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114bc8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114bce:	85 c0                	test   %eax,%eax
f0114bd0:	74 27                	je     f0114bf9 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114bd2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114bd8:	83 ec 0c             	sub    $0xc,%esp
f0114bdb:	6a 00                	push   $0x0
f0114bdd:	50                   	push   %eax
f0114bde:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0114be3:	68 fc 06 00 00       	push   $0x6fc
f0114be8:	68 7e 82 13 f0       	push   $0xf013827e
f0114bed:	e8 40 b7 fe ff       	call   f0100332 <_warn>
f0114bf2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114bf5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114bf9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114bff:	85 c0                	test   %eax,%eax
f0114c01:	74 27                	je     f0114c2a <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114c03:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c09:	83 ec 0c             	sub    $0xc,%esp
f0114c0c:	6a 00                	push   $0x0
f0114c0e:	50                   	push   %eax
f0114c0f:	68 10 a0 13 f0       	push   $0xf013a010
f0114c14:	68 01 07 00 00       	push   $0x701
f0114c19:	68 7e 82 13 f0       	push   $0xf013827e
f0114c1e:	e8 0f b7 fe ff       	call   f0100332 <_warn>
f0114c23:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c26:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114c2a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c2e:	74 04                	je     f0114c34 <test_calculate_allocated_space+0x5c7>
f0114c30:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c34:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0114c38:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114c3f:	00 00 00 
		num_pages = 0;
f0114c42:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114c49:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114c4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114c4f:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0114c54:	89 c2                	mov    %eax,%edx
f0114c56:	83 ec 0c             	sub    $0xc,%esp
f0114c59:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114c5f:	50                   	push   %eax
f0114c60:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114c66:	50                   	push   %eax
f0114c67:	52                   	push   %edx
f0114c68:	68 ff ff 3f 00       	push   $0x3fffff
f0114c6d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c70:	e8 2e 3a ff ff       	call   f01086a3 <calculate_allocated_space>
f0114c75:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114c78:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c7e:	85 c0                	test   %eax,%eax
f0114c80:	74 27                	je     f0114ca9 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114c82:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c88:	83 ec 0c             	sub    $0xc,%esp
f0114c8b:	6a 00                	push   $0x0
f0114c8d:	50                   	push   %eax
f0114c8e:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0114c93:	68 0d 07 00 00       	push   $0x70d
f0114c98:	68 7e 82 13 f0       	push   $0xf013827e
f0114c9d:	e8 90 b6 fe ff       	call   f0100332 <_warn>
f0114ca2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ca5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114ca9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114caf:	85 c0                	test   %eax,%eax
f0114cb1:	74 27                	je     f0114cda <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114cb3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114cb9:	83 ec 0c             	sub    $0xc,%esp
f0114cbc:	6a 00                	push   $0x0
f0114cbe:	50                   	push   %eax
f0114cbf:	68 10 a0 13 f0       	push   $0xf013a010
f0114cc4:	68 12 07 00 00       	push   $0x712
f0114cc9:	68 7e 82 13 f0       	push   $0xf013827e
f0114cce:	e8 5f b6 fe ff       	call   f0100332 <_warn>
f0114cd3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114cd6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114cda:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114cde:	74 04                	je     f0114ce4 <test_calculate_allocated_space+0x677>
f0114ce0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114ce4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114ce8:	83 ec 0c             	sub    $0xc,%esp
f0114ceb:	68 c9 99 13 f0       	push   $0xf01399c9
f0114cf0:	e8 38 bf fe ff       	call   f0100c2d <cprintf>
f0114cf5:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0114cf8:	83 ec 0c             	sub    $0xc,%esp
f0114cfb:	68 d0 9e 13 f0       	push   $0xf0139ed0
f0114d00:	e8 28 bf fe ff       	call   f0100c2d <cprintf>
f0114d05:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114d08:	83 ec 04             	sub    $0x4,%esp
f0114d0b:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0114d11:	50                   	push   %eax
f0114d12:	68 82 8d 13 f0       	push   $0xf0138d82
f0114d17:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114d1d:	50                   	push   %eax
f0114d1e:	e8 d0 c0 01 00       	call   f0130df3 <strcconcat>
f0114d23:	83 c4 10             	add    $0x10,%esp
f0114d26:	83 ec 0c             	sub    $0xc,%esp
f0114d29:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0114d2f:	50                   	push   %eax
f0114d30:	e8 5a bf fe ff       	call   f0100c8f <execute_command>
f0114d35:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0114d38:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114d3f:	00 00 00 
		num_pages = 0;
f0114d42:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114d49:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114d4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114d4f:	c1 e0 03             	shl    $0x3,%eax
f0114d52:	89 c2                	mov    %eax,%edx
f0114d54:	83 ec 0c             	sub    $0xc,%esp
f0114d57:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114d5d:	50                   	push   %eax
f0114d5e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114d64:	50                   	push   %eax
f0114d65:	52                   	push   %edx
f0114d66:	6a 00                	push   $0x0
f0114d68:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d6b:	e8 33 39 ff ff       	call   f01086a3 <calculate_allocated_space>
f0114d70:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114d73:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0114d7a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114d81:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d87:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114d8a:	74 28                	je     f0114db4 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114d8c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d92:	83 ec 0c             	sub    $0xc,%esp
f0114d95:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d98:	50                   	push   %eax
f0114d99:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0114d9e:	68 29 07 00 00       	push   $0x729
f0114da3:	68 7e 82 13 f0       	push   $0xf013827e
f0114da8:	e8 85 b5 fe ff       	call   f0100332 <_warn>
f0114dad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114db0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114db4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114dba:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114dbd:	74 28                	je     f0114de7 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114dbf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114dc5:	83 ec 0c             	sub    $0xc,%esp
f0114dc8:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114dcb:	50                   	push   %eax
f0114dcc:	68 10 a0 13 f0       	push   $0xf013a010
f0114dd1:	68 2e 07 00 00       	push   $0x72e
f0114dd6:	68 7e 82 13 f0       	push   $0xf013827e
f0114ddb:	e8 52 b5 fe ff       	call   f0100332 <_warn>
f0114de0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114de3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114de7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114deb:	74 04                	je     f0114df1 <test_calculate_allocated_space+0x784>
f0114ded:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114df1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114df5:	83 ec 04             	sub    $0x4,%esp
f0114df8:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114dfe:	50                   	push   %eax
f0114dff:	68 8f 8d 13 f0       	push   $0xf0138d8f
f0114e04:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114e0a:	50                   	push   %eax
f0114e0b:	e8 e3 bf 01 00       	call   f0130df3 <strcconcat>
f0114e10:	83 c4 10             	add    $0x10,%esp
f0114e13:	83 ec 0c             	sub    $0xc,%esp
f0114e16:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114e1c:	50                   	push   %eax
f0114e1d:	e8 6d be fe ff       	call   f0100c8f <execute_command>
f0114e22:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114e25:	83 ec 04             	sub    $0x4,%esp
f0114e28:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114e2e:	50                   	push   %eax
f0114e2f:	68 04 9f 13 f0       	push   $0xf0139f04
f0114e34:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114e3a:	50                   	push   %eax
f0114e3b:	e8 b3 bf 01 00       	call   f0130df3 <strcconcat>
f0114e40:	83 c4 10             	add    $0x10,%esp
f0114e43:	83 ec 0c             	sub    $0xc,%esp
f0114e46:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114e4c:	50                   	push   %eax
f0114e4d:	e8 3d be fe ff       	call   f0100c8f <execute_command>
f0114e52:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0114e55:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114e5c:	00 00 00 
		num_pages = 0;
f0114e5f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114e66:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0114e69:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e6c:	c1 e0 03             	shl    $0x3,%eax
f0114e6f:	89 c2                	mov    %eax,%edx
f0114e71:	83 ec 0c             	sub    $0xc,%esp
f0114e74:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114e7a:	50                   	push   %eax
f0114e7b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114e81:	50                   	push   %eax
f0114e82:	52                   	push   %edx
f0114e83:	6a 00                	push   $0x0
f0114e85:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e88:	e8 16 38 ff ff       	call   f01086a3 <calculate_allocated_space>
f0114e8d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114e90:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0114e97:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114e9e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114ea4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114ea7:	74 28                	je     f0114ed1 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114ea9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114eaf:	83 ec 0c             	sub    $0xc,%esp
f0114eb2:	ff 75 c8             	pushl  -0x38(%ebp)
f0114eb5:	50                   	push   %eax
f0114eb6:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0114ebb:	68 3f 07 00 00       	push   $0x73f
f0114ec0:	68 7e 82 13 f0       	push   $0xf013827e
f0114ec5:	e8 68 b4 fe ff       	call   f0100332 <_warn>
f0114eca:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ecd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114ed1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114ed7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114eda:	74 28                	je     f0114f04 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114edc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114ee2:	83 ec 0c             	sub    $0xc,%esp
f0114ee5:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ee8:	50                   	push   %eax
f0114ee9:	68 10 a0 13 f0       	push   $0xf013a010
f0114eee:	68 44 07 00 00       	push   $0x744
f0114ef3:	68 7e 82 13 f0       	push   $0xf013827e
f0114ef8:	e8 35 b4 fe ff       	call   f0100332 <_warn>
f0114efd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f00:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f04:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f08:	74 04                	je     f0114f0e <test_calculate_allocated_space+0x8a1>
f0114f0a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f0e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114f12:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114f19:	00 00 00 
		num_pages = 0;
f0114f1c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114f23:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114f26:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f29:	c1 e0 0a             	shl    $0xa,%eax
f0114f2c:	89 c2                	mov    %eax,%edx
f0114f2e:	83 ec 0c             	sub    $0xc,%esp
f0114f31:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114f37:	50                   	push   %eax
f0114f38:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114f3e:	50                   	push   %eax
f0114f3f:	52                   	push   %edx
f0114f40:	6a 00                	push   $0x0
f0114f42:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f45:	e8 59 37 ff ff       	call   f01086a3 <calculate_allocated_space>
f0114f4a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0114f4d:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0114f54:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114f5b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f61:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114f64:	74 28                	je     f0114f8e <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114f66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f6c:	83 ec 0c             	sub    $0xc,%esp
f0114f6f:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f72:	50                   	push   %eax
f0114f73:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0114f78:	68 52 07 00 00       	push   $0x752
f0114f7d:	68 7e 82 13 f0       	push   $0xf013827e
f0114f82:	e8 ab b3 fe ff       	call   f0100332 <_warn>
f0114f87:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f8a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114f8e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f94:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114f97:	74 28                	je     f0114fc1 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114f99:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f9f:	83 ec 0c             	sub    $0xc,%esp
f0114fa2:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114fa5:	50                   	push   %eax
f0114fa6:	68 10 a0 13 f0       	push   $0xf013a010
f0114fab:	68 57 07 00 00       	push   $0x757
f0114fb0:	68 7e 82 13 f0       	push   $0xf013827e
f0114fb5:	e8 78 b3 fe ff       	call   f0100332 <_warn>
f0114fba:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fbd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114fc1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fc5:	74 04                	je     f0114fcb <test_calculate_allocated_space+0x95e>
f0114fc7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114fcb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114fcf:	83 ec 04             	sub    $0x4,%esp
f0114fd2:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114fd8:	50                   	push   %eax
f0114fd9:	68 10 9f 13 f0       	push   $0xf0139f10
f0114fde:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114fe4:	50                   	push   %eax
f0114fe5:	e8 09 be 01 00       	call   f0130df3 <strcconcat>
f0114fea:	83 c4 10             	add    $0x10,%esp
f0114fed:	83 ec 0c             	sub    $0xc,%esp
f0114ff0:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114ff6:	50                   	push   %eax
f0114ff7:	e8 93 bc fe ff       	call   f0100c8f <execute_command>
f0114ffc:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0114fff:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115006:	00 00 00 
		num_pages = 0;
f0115009:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115010:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115013:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115016:	89 c2                	mov    %eax,%edx
f0115018:	01 d2                	add    %edx,%edx
f011501a:	01 d0                	add    %edx,%eax
f011501c:	05 00 18 00 00       	add    $0x1800,%eax
f0115021:	89 c2                	mov    %eax,%edx
f0115023:	83 ec 0c             	sub    $0xc,%esp
f0115026:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011502c:	50                   	push   %eax
f011502d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115033:	50                   	push   %eax
f0115034:	52                   	push   %edx
f0115035:	68 00 18 00 00       	push   $0x1800
f011503a:	ff 75 d8             	pushl  -0x28(%ebp)
f011503d:	e8 61 36 ff ff       	call   f01086a3 <calculate_allocated_space>
f0115042:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115045:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011504c:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115053:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115059:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011505c:	74 28                	je     f0115086 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011505e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115064:	83 ec 0c             	sub    $0xc,%esp
f0115067:	ff 75 c8             	pushl  -0x38(%ebp)
f011506a:	50                   	push   %eax
f011506b:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0115070:	68 68 07 00 00       	push   $0x768
f0115075:	68 7e 82 13 f0       	push   $0xf013827e
f011507a:	e8 b3 b2 fe ff       	call   f0100332 <_warn>
f011507f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115082:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115086:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011508c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011508f:	74 28                	je     f01150b9 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115091:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115097:	83 ec 0c             	sub    $0xc,%esp
f011509a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011509d:	50                   	push   %eax
f011509e:	68 10 a0 13 f0       	push   $0xf013a010
f01150a3:	68 6d 07 00 00       	push   $0x76d
f01150a8:	68 7e 82 13 f0       	push   $0xf013827e
f01150ad:	e8 80 b2 fe ff       	call   f0100332 <_warn>
f01150b2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150b5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150b9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150bd:	74 04                	je     f01150c3 <test_calculate_allocated_space+0xa56>
f01150bf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150c3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01150c7:	83 ec 04             	sub    $0x4,%esp
f01150ca:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01150d0:	50                   	push   %eax
f01150d1:	68 e8 8f 13 f0       	push   $0xf0138fe8
f01150d6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01150dc:	50                   	push   %eax
f01150dd:	e8 11 bd 01 00       	call   f0130df3 <strcconcat>
f01150e2:	83 c4 10             	add    $0x10,%esp
f01150e5:	83 ec 0c             	sub    $0xc,%esp
f01150e8:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01150ee:	50                   	push   %eax
f01150ef:	e8 9b bb fe ff       	call   f0100c8f <execute_command>
f01150f4:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01150f7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01150fe:	00 00 00 
		num_pages = 0;
f0115101:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115108:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f011510b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011510e:	89 d0                	mov    %edx,%eax
f0115110:	c1 e0 02             	shl    $0x2,%eax
f0115113:	01 d0                	add    %edx,%eax
f0115115:	01 c0                	add    %eax,%eax
f0115117:	05 00 00 40 00       	add    $0x400000,%eax
f011511c:	89 c2                	mov    %eax,%edx
f011511e:	83 ec 0c             	sub    $0xc,%esp
f0115121:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115127:	50                   	push   %eax
f0115128:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011512e:	50                   	push   %eax
f011512f:	52                   	push   %edx
f0115130:	68 00 00 40 00       	push   $0x400000
f0115135:	ff 75 d8             	pushl  -0x28(%ebp)
f0115138:	e8 66 35 ff ff       	call   f01086a3 <calculate_allocated_space>
f011513d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115140:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115147:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011514e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115154:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115157:	74 28                	je     f0115181 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115159:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011515f:	83 ec 0c             	sub    $0xc,%esp
f0115162:	ff 75 c8             	pushl  -0x38(%ebp)
f0115165:	50                   	push   %eax
f0115166:	68 b0 9f 13 f0       	push   $0xf0139fb0
f011516b:	68 7d 07 00 00       	push   $0x77d
f0115170:	68 7e 82 13 f0       	push   $0xf013827e
f0115175:	e8 b8 b1 fe ff       	call   f0100332 <_warn>
f011517a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011517d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115181:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115187:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011518a:	74 28                	je     f01151b4 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011518c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115192:	83 ec 0c             	sub    $0xc,%esp
f0115195:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115198:	50                   	push   %eax
f0115199:	68 10 a0 13 f0       	push   $0xf013a010
f011519e:	68 82 07 00 00       	push   $0x782
f01151a3:	68 7e 82 13 f0       	push   $0xf013827e
f01151a8:	e8 85 b1 fe ff       	call   f0100332 <_warn>
f01151ad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151b0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151b4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151b8:	74 04                	je     f01151be <test_calculate_allocated_space+0xb51>
f01151ba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151be:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01151c2:	83 ec 04             	sub    $0x4,%esp
f01151c5:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01151cb:	50                   	push   %eax
f01151cc:	68 f2 8f 13 f0       	push   $0xf0138ff2
f01151d1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01151d7:	50                   	push   %eax
f01151d8:	e8 16 bc 01 00       	call   f0130df3 <strcconcat>
f01151dd:	83 c4 10             	add    $0x10,%esp
f01151e0:	83 ec 0c             	sub    $0xc,%esp
f01151e3:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01151e9:	50                   	push   %eax
f01151ea:	e8 a0 ba fe ff       	call   f0100c8f <execute_command>
f01151ef:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01151f2:	83 ec 04             	sub    $0x4,%esp
f01151f5:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01151fb:	50                   	push   %eax
f01151fc:	68 18 9f 13 f0       	push   $0xf0139f18
f0115201:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115207:	50                   	push   %eax
f0115208:	e8 e6 bb 01 00       	call   f0130df3 <strcconcat>
f011520d:	83 c4 10             	add    $0x10,%esp
f0115210:	83 ec 0c             	sub    $0xc,%esp
f0115213:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115219:	50                   	push   %eax
f011521a:	e8 70 ba fe ff       	call   f0100c8f <execute_command>
f011521f:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0115222:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115229:	00 00 00 
		num_pages = 0;
f011522c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115233:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115236:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115239:	05 00 00 38 00       	add    $0x380000,%eax
f011523e:	01 c0                	add    %eax,%eax
f0115240:	89 c2                	mov    %eax,%edx
f0115242:	83 ec 0c             	sub    $0xc,%esp
f0115245:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011524b:	50                   	push   %eax
f011524c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115252:	50                   	push   %eax
f0115253:	52                   	push   %edx
f0115254:	68 00 00 70 00       	push   $0x700000
f0115259:	ff 75 d8             	pushl  -0x28(%ebp)
f011525c:	e8 42 34 ff ff       	call   f01086a3 <calculate_allocated_space>
f0115261:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115264:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f011526b:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115272:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115278:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011527b:	74 28                	je     f01152a5 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011527d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115283:	83 ec 0c             	sub    $0xc,%esp
f0115286:	ff 75 c8             	pushl  -0x38(%ebp)
f0115289:	50                   	push   %eax
f011528a:	68 b0 9f 13 f0       	push   $0xf0139fb0
f011528f:	68 94 07 00 00       	push   $0x794
f0115294:	68 7e 82 13 f0       	push   $0xf013827e
f0115299:	e8 94 b0 fe ff       	call   f0100332 <_warn>
f011529e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01152a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152ab:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01152ae:	74 28                	je     f01152d8 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01152b0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152b6:	83 ec 0c             	sub    $0xc,%esp
f01152b9:	ff 75 c4             	pushl  -0x3c(%ebp)
f01152bc:	50                   	push   %eax
f01152bd:	68 10 a0 13 f0       	push   $0xf013a010
f01152c2:	68 99 07 00 00       	push   $0x799
f01152c7:	68 7e 82 13 f0       	push   $0xf013827e
f01152cc:	e8 61 b0 fe ff       	call   f0100332 <_warn>
f01152d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01152d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152dc:	74 04                	je     f01152e2 <test_calculate_allocated_space+0xc75>
f01152de:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01152e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01152e6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01152ed:	00 00 00 
		num_pages = 0;
f01152f0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01152f7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01152fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01152fd:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115302:	89 c2                	mov    %eax,%edx
f0115304:	83 ec 0c             	sub    $0xc,%esp
f0115307:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011530d:	50                   	push   %eax
f011530e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115314:	50                   	push   %eax
f0115315:	52                   	push   %edx
f0115316:	68 ff ff 3f 00       	push   $0x3fffff
f011531b:	ff 75 d8             	pushl  -0x28(%ebp)
f011531e:	e8 80 33 ff ff       	call   f01086a3 <calculate_allocated_space>
f0115323:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115326:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f011532d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115334:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011533a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011533d:	74 28                	je     f0115367 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011533f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115345:	83 ec 0c             	sub    $0xc,%esp
f0115348:	ff 75 c8             	pushl  -0x38(%ebp)
f011534b:	50                   	push   %eax
f011534c:	68 b0 9f 13 f0       	push   $0xf0139fb0
f0115351:	68 a7 07 00 00       	push   $0x7a7
f0115356:	68 7e 82 13 f0       	push   $0xf013827e
f011535b:	e8 d2 af fe ff       	call   f0100332 <_warn>
f0115360:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115363:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115367:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011536d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115370:	74 28                	je     f011539a <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115372:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115378:	83 ec 0c             	sub    $0xc,%esp
f011537b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011537e:	50                   	push   %eax
f011537f:	68 10 a0 13 f0       	push   $0xf013a010
f0115384:	68 ac 07 00 00       	push   $0x7ac
f0115389:	68 7e 82 13 f0       	push   $0xf013827e
f011538e:	e8 9f af fe ff       	call   f0100332 <_warn>
f0115393:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115396:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011539a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011539e:	74 04                	je     f01153a4 <test_calculate_allocated_space+0xd37>
f01153a0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01153a4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01153a8:	83 ec 0c             	sub    $0xc,%esp
f01153ab:	68 a3 8f 13 f0       	push   $0xf0138fa3
f01153b0:	e8 78 b8 fe ff       	call   f0100c2d <cprintf>
f01153b5:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f01153b8:	83 ec 08             	sub    $0x8,%esp
f01153bb:	ff 75 e4             	pushl  -0x1c(%ebp)
f01153be:	68 6c a0 13 f0       	push   $0xf013a06c
f01153c3:	e8 65 b8 fe ff       	call   f0100c2d <cprintf>
f01153c8:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01153cb:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01153cf:	75 10                	jne    f01153e1 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f01153d1:	83 ec 0c             	sub    $0xc,%esp
f01153d4:	68 ac a0 13 f0       	push   $0xf013a0ac
f01153d9:	e8 4f b8 fe ff       	call   f0100c2d <cprintf>
f01153de:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01153e1:	a1 e8 1e 6c f0       	mov    0xf06c1ee8,%eax
f01153e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01153e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01153ec:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01153ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01153f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01153f7:	5b                   	pop    %ebx
f01153f8:	5e                   	pop    %esi
f01153f9:	5f                   	pop    %edi
f01153fa:	5d                   	pop    %ebp
f01153fb:	c3                   	ret    

f01153fc <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01153fc:	55                   	push   %ebp
f01153fd:	89 e5                	mov    %esp,%ebp
f01153ff:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0115402:	8b 45 10             	mov    0x10(%ebp),%eax
f0115405:	ba 01 00 00 00       	mov    $0x1,%edx
f011540a:	88 c1                	mov    %al,%cl
f011540c:	d3 e2                	shl    %cl,%edx
f011540e:	89 d0                	mov    %edx,%eax
f0115410:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115413:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115416:	c1 e8 16             	shr    $0x16,%eax
f0115419:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115420:	8b 45 08             	mov    0x8(%ebp),%eax
f0115423:	01 d0                	add    %edx,%eax
f0115425:	8b 00                	mov    (%eax),%eax
f0115427:	83 e0 01             	and    $0x1,%eax
f011542a:	85 c0                	test   %eax,%eax
f011542c:	75 07                	jne    f0115435 <CB+0x39>
f011542e:	b8 00 00 00 00       	mov    $0x0,%eax
f0115433:	eb 76                	jmp    f01154ab <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115435:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115438:	c1 e8 16             	shr    $0x16,%eax
f011543b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115442:	8b 45 08             	mov    0x8(%ebp),%eax
f0115445:	01 d0                	add    %edx,%eax
f0115447:	8b 00                	mov    (%eax),%eax
f0115449:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011544e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115451:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115454:	c1 e8 0c             	shr    $0xc,%eax
f0115457:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011545a:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f011545f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115462:	72 17                	jb     f011547b <CB+0x7f>
f0115464:	ff 75 f0             	pushl  -0x10(%ebp)
f0115467:	68 f8 a0 13 f0       	push   $0xf013a0f8
f011546c:	68 c7 07 00 00       	push   $0x7c7
f0115471:	68 7e 82 13 f0       	push   $0xf013827e
f0115476:	e8 2b ad fe ff       	call   f01001a6 <_panic>
f011547b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011547e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115483:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0115486:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115489:	c1 e8 0c             	shr    $0xc,%eax
f011548c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115491:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115498:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011549b:	01 d0                	add    %edx,%eax
f011549d:	8b 00                	mov    (%eax),%eax
f011549f:	23 45 f4             	and    -0xc(%ebp),%eax
f01154a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01154a5:	0f 94 c0             	sete   %al
f01154a8:	0f b6 c0             	movzbl %al,%eax
}
f01154ab:	c9                   	leave  
f01154ac:	c3                   	ret    

f01154ad <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01154ad:	55                   	push   %ebp
f01154ae:	89 e5                	mov    %esp,%ebp
f01154b0:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01154b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01154b6:	ba 01 00 00 00       	mov    $0x1,%edx
f01154bb:	88 c1                	mov    %al,%cl
f01154bd:	d3 e2                	shl    %cl,%edx
f01154bf:	89 d0                	mov    %edx,%eax
f01154c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01154c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01154c7:	c1 e8 16             	shr    $0x16,%eax
f01154ca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01154d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01154d4:	01 d0                	add    %edx,%eax
f01154d6:	8b 00                	mov    (%eax),%eax
f01154d8:	83 e0 01             	and    $0x1,%eax
f01154db:	85 c0                	test   %eax,%eax
f01154dd:	75 0a                	jne    f01154e9 <SB+0x3c>
f01154df:	b8 00 00 00 00       	mov    $0x0,%eax
f01154e4:	e9 cd 00 00 00       	jmp    f01155b6 <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01154e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01154ec:	c1 e8 16             	shr    $0x16,%eax
f01154ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01154f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01154f9:	01 d0                	add    %edx,%eax
f01154fb:	8b 00                	mov    (%eax),%eax
f01154fd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115502:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115505:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115508:	c1 e8 0c             	shr    $0xc,%eax
f011550b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011550e:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0115513:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115516:	72 17                	jb     f011552f <SB+0x82>
f0115518:	ff 75 f0             	pushl  -0x10(%ebp)
f011551b:	68 f8 a0 13 f0       	push   $0xf013a0f8
f0115520:	68 cf 07 00 00       	push   $0x7cf
f0115525:	68 7e 82 13 f0       	push   $0xf013827e
f011552a:	e8 77 ac fe ff       	call   f01001a6 <_panic>
f011552f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115532:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115537:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f011553a:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f011553e:	74 3c                	je     f011557c <SB+0xcf>
f0115540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115543:	c1 e8 0c             	shr    $0xc,%eax
f0115546:	25 ff 03 00 00       	and    $0x3ff,%eax
f011554b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115552:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115555:	01 d0                	add    %edx,%eax
f0115557:	8b 55 0c             	mov    0xc(%ebp),%edx
f011555a:	c1 ea 0c             	shr    $0xc,%edx
f011555d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115563:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f011556a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011556d:	01 ca                	add    %ecx,%edx
f011556f:	8b 12                	mov    (%edx),%edx
f0115571:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0115574:	f7 d1                	not    %ecx
f0115576:	21 ca                	and    %ecx,%edx
f0115578:	89 10                	mov    %edx,(%eax)
f011557a:	eb 35                	jmp    f01155b1 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f011557c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011557f:	c1 e8 0c             	shr    $0xc,%eax
f0115582:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115587:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011558e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115591:	01 c2                	add    %eax,%edx
f0115593:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115596:	c1 e8 0c             	shr    $0xc,%eax
f0115599:	25 ff 03 00 00       	and    $0x3ff,%eax
f011559e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01155a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01155a8:	01 c8                	add    %ecx,%eax
f01155aa:	8b 00                	mov    (%eax),%eax
f01155ac:	0b 45 f4             	or     -0xc(%ebp),%eax
f01155af:	89 02                	mov    %eax,(%edx)
	return 0;
f01155b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01155b6:	c9                   	leave  
f01155b7:	c3                   	ret    

f01155b8 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f01155b8:	55                   	push   %ebp
f01155b9:	89 e5                	mov    %esp,%ebp
f01155bb:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01155be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01155c1:	c1 e8 16             	shr    $0x16,%eax
f01155c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01155cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01155ce:	01 d0                	add    %edx,%eax
f01155d0:	8b 00                	mov    (%eax),%eax
f01155d2:	83 e0 01             	and    $0x1,%eax
f01155d5:	85 c0                	test   %eax,%eax
f01155d7:	75 0a                	jne    f01155e3 <CPs+0x2b>
f01155d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01155de:	e9 b8 00 00 00       	jmp    f011569b <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01155e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01155e6:	c1 e8 16             	shr    $0x16,%eax
f01155e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01155f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01155f3:	01 d0                	add    %edx,%eax
f01155f5:	8b 00                	mov    (%eax),%eax
f01155f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01155fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01155ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115602:	c1 e8 0c             	shr    $0xc,%eax
f0115605:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115608:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f011560d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115610:	72 17                	jb     f0115629 <CPs+0x71>
f0115612:	ff 75 f0             	pushl  -0x10(%ebp)
f0115615:	68 f8 a0 13 f0       	push   $0xf013a0f8
f011561a:	68 d8 07 00 00       	push   $0x7d8
f011561f:	68 7e 82 13 f0       	push   $0xf013827e
f0115624:	e8 7d ab fe ff       	call   f01001a6 <_panic>
f0115629:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011562c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115631:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0115634:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011563b:	eb 53                	jmp    f0115690 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f011563d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115640:	ba 01 00 00 00       	mov    $0x1,%edx
f0115645:	88 c1                	mov    %al,%cl
f0115647:	d3 e2                	shl    %cl,%edx
f0115649:	89 d0                	mov    %edx,%eax
f011564b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f011564e:	8b 45 14             	mov    0x14(%ebp),%eax
f0115651:	23 45 e4             	and    -0x1c(%ebp),%eax
f0115654:	85 c0                	test   %eax,%eax
f0115656:	74 34                	je     f011568c <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0115658:	8b 45 0c             	mov    0xc(%ebp),%eax
f011565b:	c1 e8 0c             	shr    $0xc,%eax
f011565e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115663:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011566a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011566d:	01 d0                	add    %edx,%eax
f011566f:	8b 00                	mov    (%eax),%eax
f0115671:	33 45 10             	xor    0x10(%ebp),%eax
f0115674:	23 45 e4             	and    -0x1c(%ebp),%eax
f0115677:	85 c0                	test   %eax,%eax
f0115679:	0f 94 c0             	sete   %al
f011567c:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f011567f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115683:	75 08                	jne    f011568d <CPs+0xd5>
f0115685:	b8 00 00 00 00       	mov    $0x0,%eax
f011568a:	eb 0f                	jmp    f011569b <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f011568c:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f011568d:	ff 45 f4             	incl   -0xc(%ebp)
f0115690:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0115694:	7e a7                	jle    f011563d <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0115696:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011569b:	c9                   	leave  
f011569c:	c3                   	ret    

f011569d <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f011569d:	55                   	push   %ebp
f011569e:	89 e5                	mov    %esp,%ebp
f01156a0:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01156a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01156a6:	c1 e8 16             	shr    $0x16,%eax
f01156a9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01156b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01156b3:	01 d0                	add    %edx,%eax
f01156b5:	8b 00                	mov    (%eax),%eax
f01156b7:	83 e0 01             	and    $0x1,%eax
f01156ba:	85 c0                	test   %eax,%eax
f01156bc:	75 07                	jne    f01156c5 <CA+0x28>
f01156be:	b8 00 00 00 00       	mov    $0x0,%eax
f01156c3:	eb 6f                	jmp    f0115734 <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01156c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01156c8:	c1 e8 16             	shr    $0x16,%eax
f01156cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01156d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01156d5:	01 d0                	add    %edx,%eax
f01156d7:	8b 00                	mov    (%eax),%eax
f01156d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01156de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01156e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01156e4:	c1 e8 0c             	shr    $0xc,%eax
f01156e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01156ea:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f01156ef:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01156f2:	72 17                	jb     f011570b <CA+0x6e>
f01156f4:	ff 75 f4             	pushl  -0xc(%ebp)
f01156f7:	68 f8 a0 13 f0       	push   $0xf013a0f8
f01156fc:	68 e7 07 00 00       	push   $0x7e7
f0115701:	68 7e 82 13 f0       	push   $0xf013827e
f0115706:	e8 9b aa fe ff       	call   f01001a6 <_panic>
f011570b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011570e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115713:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0115716:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115719:	c1 e8 0c             	shr    $0xc,%eax
f011571c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115721:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115728:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011572b:	01 d0                	add    %edx,%eax
f011572d:	8b 00                	mov    (%eax),%eax
f011572f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0115734:	c9                   	leave  
f0115735:	c3                   	ret    

f0115736 <CE>:

int CE(uint32 *_d, uint32 va)
{
f0115736:	55                   	push   %ebp
f0115737:	89 e5                	mov    %esp,%ebp
f0115739:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011573c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011573f:	c1 e8 16             	shr    $0x16,%eax
f0115742:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115749:	8b 45 08             	mov    0x8(%ebp),%eax
f011574c:	01 d0                	add    %edx,%eax
f011574e:	8b 00                	mov    (%eax),%eax
f0115750:	83 e0 01             	and    $0x1,%eax
f0115753:	85 c0                	test   %eax,%eax
f0115755:	75 07                	jne    f011575e <CE+0x28>
f0115757:	b8 00 00 00 00       	mov    $0x0,%eax
f011575c:	eb 7a                	jmp    f01157d8 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011575e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115761:	c1 e8 16             	shr    $0x16,%eax
f0115764:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011576b:	8b 45 08             	mov    0x8(%ebp),%eax
f011576e:	01 d0                	add    %edx,%eax
f0115770:	8b 00                	mov    (%eax),%eax
f0115772:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115777:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011577a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011577d:	c1 e8 0c             	shr    $0xc,%eax
f0115780:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115783:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0115788:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f011578b:	72 17                	jb     f01157a4 <CE+0x6e>
f011578d:	ff 75 f4             	pushl  -0xc(%ebp)
f0115790:	68 f8 a0 13 f0       	push   $0xf013a0f8
f0115795:	68 ee 07 00 00       	push   $0x7ee
f011579a:	68 7e 82 13 f0       	push   $0xf013827e
f011579f:	e8 02 aa fe ff       	call   f01001a6 <_panic>
f01157a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01157a7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01157ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01157af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01157b2:	c1 e8 0c             	shr    $0xc,%eax
f01157b5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01157ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01157c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01157c4:	01 d0                	add    %edx,%eax
f01157c6:	8b 00                	mov    (%eax),%eax
f01157c8:	85 c0                	test   %eax,%eax
f01157ca:	74 07                	je     f01157d3 <CE+0x9d>
f01157cc:	b8 00 00 00 00       	mov    $0x0,%eax
f01157d1:	eb 05                	jmp    f01157d8 <CE+0xa2>
	return 1;
f01157d3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01157d8:	c9                   	leave  
f01157d9:	c3                   	ret    

f01157da <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f01157da:	55                   	push   %ebp
f01157db:	89 e5                	mov    %esp,%ebp
f01157dd:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f01157e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01157e3:	c1 e8 16             	shr    $0x16,%eax
f01157e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01157ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01157f0:	01 d0                	add    %edx,%eax
f01157f2:	8b 00                	mov    (%eax),%eax
f01157f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f01157f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01157fa:	83 e0 01             	and    $0x1,%eax
f01157fd:	85 c0                	test   %eax,%eax
f01157ff:	0f 84 92 00 00 00    	je     f0115897 <CP+0xbd>
	{
		uint32 *t = NULL;
f0115805:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f011580c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011580f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115814:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115817:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011581a:	c1 e8 0c             	shr    $0xc,%eax
f011581d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0115820:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f0115825:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0115828:	72 17                	jb     f0115841 <CP+0x67>
f011582a:	ff 75 ec             	pushl  -0x14(%ebp)
f011582d:	68 f8 a0 13 f0       	push   $0xf013a0f8
f0115832:	68 fa 07 00 00       	push   $0x7fa
f0115837:	68 7e 82 13 f0       	push   $0xf013827e
f011583c:	e8 65 a9 fe ff       	call   f01001a6 <_panic>
f0115841:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115844:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115849:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f011584c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011584f:	c1 e8 0c             	shr    $0xc,%eax
f0115852:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115857:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011585e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115861:	01 d0                	add    %edx,%eax
f0115863:	8b 00                	mov    (%eax),%eax
f0115865:	23 45 10             	and    0x10(%ebp),%eax
f0115868:	3b 45 10             	cmp    0x10(%ebp),%eax
f011586b:	75 2a                	jne    f0115897 <CP+0xbd>
f011586d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115870:	c1 e8 0c             	shr    $0xc,%eax
f0115873:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115878:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011587f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115882:	01 d0                	add    %edx,%eax
f0115884:	8b 00                	mov    (%eax),%eax
f0115886:	f7 d0                	not    %eax
f0115888:	23 45 14             	and    0x14(%ebp),%eax
f011588b:	3b 45 14             	cmp    0x14(%ebp),%eax
f011588e:	75 07                	jne    f0115897 <CP+0xbd>
			return 1;
f0115890:	b8 01 00 00 00       	mov    $0x1,%eax
f0115895:	eb 05                	jmp    f011589c <CP+0xc2>
	}
	return 0;
f0115897:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011589c:	c9                   	leave  
f011589d:	c3                   	ret    

f011589e <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f011589e:	55                   	push   %ebp
f011589f:	89 e5                	mov    %esp,%ebp
f01158a1:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01158a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01158a7:	c1 e8 16             	shr    $0x16,%eax
f01158aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01158b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01158b4:	01 d0                	add    %edx,%eax
f01158b6:	8b 00                	mov    (%eax),%eax
f01158b8:	83 e0 01             	and    $0x1,%eax
f01158bb:	85 c0                	test   %eax,%eax
f01158bd:	75 07                	jne    f01158c6 <GP+0x28>
f01158bf:	b8 00 00 00 00       	mov    $0x0,%eax
f01158c4:	eb 6f                	jmp    f0115935 <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01158c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01158c9:	c1 e8 16             	shr    $0x16,%eax
f01158cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01158d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01158d6:	01 d0                	add    %edx,%eax
f01158d8:	8b 00                	mov    (%eax),%eax
f01158da:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01158df:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01158e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01158e5:	c1 e8 0c             	shr    $0xc,%eax
f01158e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01158eb:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f01158f0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01158f3:	72 17                	jb     f011590c <GP+0x6e>
f01158f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01158f8:	68 f8 a0 13 f0       	push   $0xf013a0f8
f01158fd:	68 07 08 00 00       	push   $0x807
f0115902:	68 7e 82 13 f0       	push   $0xf013827e
f0115907:	e8 9a a8 fe ff       	call   f01001a6 <_panic>
f011590c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011590f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115914:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0115917:	8b 45 0c             	mov    0xc(%ebp),%eax
f011591a:	c1 e8 0c             	shr    $0xc,%eax
f011591d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115922:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115929:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011592c:	01 d0                	add    %edx,%eax
f011592e:	8b 00                	mov    (%eax),%eax
f0115930:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0115935:	c9                   	leave  
f0115936:	c3                   	ret    

f0115937 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0115937:	55                   	push   %ebp
f0115938:	89 e5                	mov    %esp,%ebp
f011593a:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011593d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115944:	eb 18                	jmp    f011595e <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115946:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115949:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115950:	8b 45 08             	mov    0x8(%ebp),%eax
f0115953:	01 d0                	add    %edx,%eax
f0115955:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011595b:	ff 45 fc             	incl   -0x4(%ebp)
f011595e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115961:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115966:	76 de                	jbe    f0115946 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115968:	90                   	nop
f0115969:	c9                   	leave  
f011596a:	c3                   	ret    

f011596b <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f011596b:	55                   	push   %ebp
f011596c:	89 e5                	mov    %esp,%ebp
f011596e:	83 ec 38             	sub    $0x38,%esp
f0115971:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0115974:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0115977:	8b 45 0c             	mov    0xc(%ebp),%eax
f011597a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011597f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0115982:	8b 45 10             	mov    0x10(%ebp),%eax
f0115985:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011598a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011598d:	e9 ea 01 00 00       	jmp    f0115b7c <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0115992:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115996:	74 44                	je     f01159dc <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0115998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011599b:	83 ec 04             	sub    $0x4,%esp
f011599e:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01159a1:	52                   	push   %edx
f01159a2:	50                   	push   %eax
f01159a3:	ff 75 08             	pushl  0x8(%ebp)
f01159a6:	e8 56 12 ff ff       	call   f0106c01 <get_frame_info>
f01159ab:	83 c4 10             	add    $0x10,%esp
f01159ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01159b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01159b4:	85 c0                	test   %eax,%eax
f01159b6:	75 24                	jne    f01159dc <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01159b8:	83 ec 04             	sub    $0x4,%esp
f01159bb:	68 28 a1 13 f0       	push   $0xf013a128
f01159c0:	68 22 08 00 00       	push   $0x822
f01159c5:	68 7e 82 13 f0       	push   $0xf013827e
f01159ca:	e8 63 a9 fe ff       	call   f0100332 <_warn>
f01159cf:	83 c4 10             	add    $0x10,%esp
				return 0;
f01159d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01159d7:	e9 b6 01 00 00       	jmp    f0115b92 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01159dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01159df:	83 ec 04             	sub    $0x4,%esp
f01159e2:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01159e5:	52                   	push   %edx
f01159e6:	50                   	push   %eax
f01159e7:	ff 75 08             	pushl  0x8(%ebp)
f01159ea:	e8 12 12 ff ff       	call   f0106c01 <get_frame_info>
f01159ef:	83 c4 10             	add    $0x10,%esp
f01159f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f01159f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01159f8:	85 c0                	test   %eax,%eax
f01159fa:	75 24                	jne    f0115a20 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f01159fc:	83 ec 04             	sub    $0x4,%esp
f01159ff:	68 54 a1 13 f0       	push   $0xf013a154
f0115a04:	68 29 08 00 00       	push   $0x829
f0115a09:	68 7e 82 13 f0       	push   $0xf013827e
f0115a0e:	e8 1f a9 fe ff       	call   f0100332 <_warn>
f0115a13:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115a16:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a1b:	e9 72 01 00 00       	jmp    f0115b92 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115a20:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0115a24:	75 70                	jne    f0115a96 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0115a26:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115a2c:	c1 ea 0c             	shr    $0xc,%edx
f0115a2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115a35:	c1 e2 02             	shl    $0x2,%edx
f0115a38:	01 d0                	add    %edx,%eax
f0115a3a:	8b 00                	mov    (%eax),%eax
f0115a3c:	c1 e8 0c             	shr    $0xc,%eax
f0115a3f:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115a42:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115a45:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115a48:	c1 ea 0c             	shr    $0xc,%edx
f0115a4b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115a51:	c1 e2 02             	shl    $0x2,%edx
f0115a54:	01 d0                	add    %edx,%eax
f0115a56:	8b 00                	mov    (%eax),%eax
f0115a58:	c1 e8 0c             	shr    $0xc,%eax
f0115a5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115a5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115a61:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0115a64:	74 30                	je     f0115a96 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0115a66:	83 ec 04             	sub    $0x4,%esp
f0115a69:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115a6c:	ff 75 e8             	pushl  -0x18(%ebp)
f0115a6f:	ff 75 f0             	pushl  -0x10(%ebp)
f0115a72:	ff 75 f4             	pushl  -0xc(%ebp)
f0115a75:	68 80 a1 13 f0       	push   $0xf013a180
f0115a7a:	68 33 08 00 00       	push   $0x833
f0115a7f:	68 7e 82 13 f0       	push   $0xf013827e
f0115a84:	e8 a9 a8 fe ff       	call   f0100332 <_warn>
f0115a89:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115a8c:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a91:	e9 fc 00 00 00       	jmp    f0115b92 <CCP+0x227>
			}
		}
		if (ref != -1)
f0115a96:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115a9a:	74 52                	je     f0115aee <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115a9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115aa0:	74 0e                	je     f0115ab0 <CCP+0x145>
f0115aa2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115aa5:	8b 40 08             	mov    0x8(%eax),%eax
f0115aa8:	0f b7 c0             	movzwl %ax,%eax
f0115aab:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115aae:	74 3e                	je     f0115aee <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0115ab0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115ab4:	74 0b                	je     f0115ac1 <CCP+0x156>
f0115ab6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115ab9:	8b 40 08             	mov    0x8(%eax),%eax
f0115abc:	0f b7 c0             	movzwl %ax,%eax
f0115abf:	eb 05                	jmp    f0115ac6 <CCP+0x15b>
f0115ac1:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ac6:	83 ec 0c             	sub    $0xc,%esp
f0115ac9:	50                   	push   %eax
f0115aca:	ff 75 f0             	pushl  -0x10(%ebp)
f0115acd:	68 dc a1 13 f0       	push   $0xf013a1dc
f0115ad2:	68 3b 08 00 00       	push   $0x83b
f0115ad7:	68 7e 82 13 f0       	push   $0xf013827e
f0115adc:	e8 51 a8 fe ff       	call   f0100332 <_warn>
f0115ae1:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115ae4:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ae9:	e9 a4 00 00 00       	jmp    f0115b92 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0115aee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115af1:	ff 75 20             	pushl  0x20(%ebp)
f0115af4:	ff 75 1c             	pushl  0x1c(%ebp)
f0115af7:	50                   	push   %eax
f0115af8:	ff 75 08             	pushl  0x8(%ebp)
f0115afb:	e8 b8 fa ff ff       	call   f01155b8 <CPs>
f0115b00:	83 c4 10             	add    $0x10,%esp
f0115b03:	85 c0                	test   %eax,%eax
f0115b05:	7f 21                	jg     f0115b28 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0115b07:	83 ec 04             	sub    $0x4,%esp
f0115b0a:	68 4c a2 13 f0       	push   $0xf013a24c
f0115b0f:	68 41 08 00 00       	push   $0x841
f0115b14:	68 7e 82 13 f0       	push   $0xf013827e
f0115b19:	e8 14 a8 fe ff       	call   f0100332 <_warn>
f0115b1e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115b21:	b8 00 00 00 00       	mov    $0x0,%eax
f0115b26:	eb 6a                	jmp    f0115b92 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0115b28:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115b2c:	74 3a                	je     f0115b68 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115b31:	ff 75 28             	pushl  0x28(%ebp)
f0115b34:	ff 75 24             	pushl  0x24(%ebp)
f0115b37:	50                   	push   %eax
f0115b38:	ff 75 08             	pushl  0x8(%ebp)
f0115b3b:	e8 78 fa ff ff       	call   f01155b8 <CPs>
f0115b40:	83 c4 10             	add    $0x10,%esp
f0115b43:	85 c0                	test   %eax,%eax
f0115b45:	7f 21                	jg     f0115b68 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115b47:	83 ec 04             	sub    $0x4,%esp
f0115b4a:	68 94 a2 13 f0       	push   $0xf013a294
f0115b4f:	68 48 08 00 00       	push   $0x848
f0115b54:	68 7e 82 13 f0       	push   $0xf013827e
f0115b59:	e8 d4 a7 fe ff       	call   f0100332 <_warn>
f0115b5e:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115b61:	b8 00 00 00 00       	mov    $0x0,%eax
f0115b66:	eb 2a                	jmp    f0115b92 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115b68:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115b6c:	74 07                	je     f0115b75 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115b6e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115b75:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115b7c:	8b 55 10             	mov    0x10(%ebp),%edx
f0115b7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0115b82:	01 d0                	add    %edx,%eax
f0115b84:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115b87:	0f 87 05 fe ff ff    	ja     f0115992 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115b8d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115b92:	c9                   	leave  
f0115b93:	c3                   	ret    

f0115b94 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115b94:	55                   	push   %ebp
f0115b95:	89 e5                	mov    %esp,%ebp
f0115b97:	57                   	push   %edi
f0115b98:	56                   	push   %esi
f0115b99:	53                   	push   %ebx
f0115b9a:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115ba0:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f0115ba5:	84 c0                	test   %al,%al
f0115ba7:	0f 84 a8 09 00 00    	je     f0116555 <test_priority_normal_and_higher+0x9c1>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115bad:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f0115bb4:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115bba:	bb 34 a5 13 f0       	mov    $0xf013a534,%ebx
f0115bbf:	ba 04 00 00 00       	mov    $0x4,%edx
f0115bc4:	89 c7                	mov    %eax,%edi
f0115bc6:	89 de                	mov    %ebx,%esi
f0115bc8:	89 d1                	mov    %edx,%ecx
f0115bca:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115bcc:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115bd2:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115bd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0115bdc:	89 d7                	mov    %edx,%edi
f0115bde:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115be0:	83 ec 0c             	sub    $0xc,%esp
f0115be3:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115be9:	50                   	push   %eax
f0115bea:	e8 a0 b0 fe ff       	call   f0100c8f <execute_command>
f0115bef:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115bf2:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115bf8:	bb 98 a5 13 f0       	mov    $0xf013a598,%ebx
f0115bfd:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115c02:	89 c7                	mov    %eax,%edi
f0115c04:	89 de                	mov    %ebx,%esi
f0115c06:	89 d1                	mov    %edx,%ecx
f0115c08:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115c0a:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115c10:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115c15:	b0 00                	mov    $0x0,%al
f0115c17:	89 d7                	mov    %edx,%edi
f0115c19:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115c1b:	83 ec 0c             	sub    $0xc,%esp
f0115c1e:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115c24:	50                   	push   %eax
f0115c25:	e8 65 b0 fe ff       	call   f0100c8f <execute_command>
f0115c2a:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0115c2d:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115c33:	bb fc a5 13 f0       	mov    $0xf013a5fc,%ebx
f0115c38:	ba 17 00 00 00       	mov    $0x17,%edx
f0115c3d:	89 c7                	mov    %eax,%edi
f0115c3f:	89 de                	mov    %ebx,%esi
f0115c41:	89 d1                	mov    %edx,%ecx
f0115c43:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115c45:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115c4b:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115c50:	b0 00                	mov    $0x0,%al
f0115c52:	89 d7                	mov    %edx,%edi
f0115c54:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115c56:	83 ec 0c             	sub    $0xc,%esp
f0115c59:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115c5f:	50                   	push   %eax
f0115c60:	e8 2a b0 fe ff       	call   f0100c8f <execute_command>
f0115c65:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115c68:	83 ec 04             	sub    $0x4,%esp
f0115c6b:	6a 00                	push   $0x0
f0115c6d:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115c70:	50                   	push   %eax
f0115c71:	68 00 10 00 00       	push   $0x1000
f0115c76:	e8 7c 38 ff ff       	call   f01094f7 <envid2env>
f0115c7b:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115c7e:	83 ec 04             	sub    $0x4,%esp
f0115c81:	6a 00                	push   $0x0
f0115c83:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115c86:	50                   	push   %eax
f0115c87:	68 01 10 00 00       	push   $0x1001
f0115c8c:	e8 66 38 ff ff       	call   f01094f7 <envid2env>
f0115c91:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115c94:	83 ec 04             	sub    $0x4,%esp
f0115c97:	6a 00                	push   $0x0
f0115c99:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115c9c:	50                   	push   %eax
f0115c9d:	68 02 10 00 00       	push   $0x1002
f0115ca2:	e8 50 38 ff ff       	call   f01094f7 <envid2env>
f0115ca7:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115caa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115cad:	85 c0                	test   %eax,%eax
f0115caf:	74 0e                	je     f0115cbf <test_priority_normal_and_higher+0x12b>
f0115cb1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115cb4:	85 c0                	test   %eax,%eax
f0115cb6:	74 07                	je     f0115cbf <test_priority_normal_and_higher+0x12b>
f0115cb8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115cbb:	85 c0                	test   %eax,%eax
f0115cbd:	75 14                	jne    f0115cd3 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115cbf:	83 ec 04             	sub    $0x4,%esp
f0115cc2:	68 d4 a2 13 f0       	push   $0xf013a2d4
f0115cc7:	6a 26                	push   $0x26
f0115cc9:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115cce:	e8 d3 a4 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115cd3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115cd6:	8b 40 74             	mov    0x74(%eax),%eax
f0115cd9:	83 f8 14             	cmp    $0x14,%eax
f0115cdc:	75 16                	jne    f0115cf4 <test_priority_normal_and_higher+0x160>
f0115cde:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ce1:	8b 40 74             	mov    0x74(%eax),%eax
f0115ce4:	83 f8 0f             	cmp    $0xf,%eax
f0115ce7:	75 0b                	jne    f0115cf4 <test_priority_normal_and_higher+0x160>
f0115ce9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115cec:	8b 40 74             	mov    0x74(%eax),%eax
f0115cef:	83 f8 0a             	cmp    $0xa,%eax
f0115cf2:	74 14                	je     f0115d08 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115cf4:	83 ec 04             	sub    $0x4,%esp
f0115cf7:	68 08 a3 13 f0       	push   $0xf013a308
f0115cfc:	6a 29                	push   $0x29
f0115cfe:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115d03:	e8 9e a4 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f0115d08:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115d0f:	eb 43                	jmp    f0115d54 <test_priority_normal_and_higher+0x1c0>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115d11:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0115d14:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115d17:	89 d0                	mov    %edx,%eax
f0115d19:	01 c0                	add    %eax,%eax
f0115d1b:	01 d0                	add    %edx,%eax
f0115d1d:	c1 e0 03             	shl    $0x3,%eax
f0115d20:	01 c8                	add    %ecx,%eax
f0115d22:	83 c0 78             	add    $0x78,%eax
f0115d25:	8b 10                	mov    (%eax),%edx
f0115d27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115d2a:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115d31:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0115d34:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115d37:	89 d0                	mov    %edx,%eax
f0115d39:	01 c0                	add    %eax,%eax
f0115d3b:	01 d0                	add    %edx,%eax
f0115d3d:	c1 e0 03             	shl    $0x3,%eax
f0115d40:	01 c8                	add    %ecx,%eax
f0115d42:	83 e8 80             	sub    $0xffffff80,%eax
f0115d45:	8b 10                	mov    (%eax),%edx
f0115d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115d4a:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115d51:	ff 45 e4             	incl   -0x1c(%ebp)
f0115d54:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115d58:	7e b7                	jle    f0115d11 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115d5a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115d61:	eb 43                	jmp    f0115da6 <test_priority_normal_and_higher+0x212>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115d63:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115d66:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115d69:	89 d0                	mov    %edx,%eax
f0115d6b:	01 c0                	add    %eax,%eax
f0115d6d:	01 d0                	add    %edx,%eax
f0115d6f:	c1 e0 03             	shl    $0x3,%eax
f0115d72:	01 c8                	add    %ecx,%eax
f0115d74:	83 c0 78             	add    $0x78,%eax
f0115d77:	8b 10                	mov    (%eax),%edx
f0115d79:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115d7c:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115d83:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115d86:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115d89:	89 d0                	mov    %edx,%eax
f0115d8b:	01 c0                	add    %eax,%eax
f0115d8d:	01 d0                	add    %edx,%eax
f0115d8f:	c1 e0 03             	shl    $0x3,%eax
f0115d92:	01 c8                	add    %ecx,%eax
f0115d94:	83 e8 80             	sub    $0xffffff80,%eax
f0115d97:	8b 10                	mov    (%eax),%edx
f0115d99:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115d9c:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115da3:	ff 45 e0             	incl   -0x20(%ebp)
f0115da6:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115daa:	7e b7                	jle    f0115d63 <test_priority_normal_and_higher+0x1cf>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115dac:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115db3:	eb 43                	jmp    f0115df8 <test_priority_normal_and_higher+0x264>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115db5:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115db8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115dbb:	89 d0                	mov    %edx,%eax
f0115dbd:	01 c0                	add    %eax,%eax
f0115dbf:	01 d0                	add    %edx,%eax
f0115dc1:	c1 e0 03             	shl    $0x3,%eax
f0115dc4:	01 c8                	add    %ecx,%eax
f0115dc6:	83 c0 78             	add    $0x78,%eax
f0115dc9:	8b 10                	mov    (%eax),%edx
f0115dcb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115dce:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115dd5:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115dd8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115ddb:	89 d0                	mov    %edx,%eax
f0115ddd:	01 c0                	add    %eax,%eax
f0115ddf:	01 d0                	add    %edx,%eax
f0115de1:	c1 e0 03             	shl    $0x3,%eax
f0115de4:	01 c8                	add    %ecx,%eax
f0115de6:	83 e8 80             	sub    $0xffffff80,%eax
f0115de9:	8b 10                	mov    (%eax),%edx
f0115deb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115dee:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115df5:	ff 45 dc             	incl   -0x24(%ebp)
f0115df8:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0115dfc:	7e b7                	jle    f0115db5 <test_priority_normal_and_higher+0x221>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115dfe:	e8 e5 66 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0115e03:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115e06:	e8 81 de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115e0b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115e0e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e11:	83 ec 08             	sub    $0x8,%esp
f0115e14:	6a 03                	push   $0x3
f0115e16:	50                   	push   %eax
f0115e17:	e8 c2 4b ff ff       	call   f010a9de <set_program_priority>
f0115e1c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115e1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e22:	83 ec 08             	sub    $0x8,%esp
f0115e25:	6a 03                	push   $0x3
f0115e27:	50                   	push   %eax
f0115e28:	e8 b1 4b ff ff       	call   f010a9de <set_program_priority>
f0115e2d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115e30:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e33:	83 ec 08             	sub    $0x8,%esp
f0115e36:	6a 03                	push   $0x3
f0115e38:	50                   	push   %eax
f0115e39:	e8 a0 4b ff ff       	call   f010a9de <set_program_priority>
f0115e3e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115e41:	e8 46 de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115e46:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115e49:	74 14                	je     f0115e5f <test_priority_normal_and_higher+0x2cb>
f0115e4b:	83 ec 04             	sub    $0x4,%esp
f0115e4e:	68 54 a3 13 f0       	push   $0xf013a354
f0115e53:	6a 45                	push   $0x45
f0115e55:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115e5a:	e8 47 a3 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115e5f:	e8 84 66 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0115e64:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115e67:	74 14                	je     f0115e7d <test_priority_normal_and_higher+0x2e9>
f0115e69:	83 ec 04             	sub    $0x4,%esp
f0115e6c:	68 54 a3 13 f0       	push   $0xf013a354
f0115e71:	6a 46                	push   $0x46
f0115e73:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115e78:	e8 29 a3 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115e7d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e80:	8b 40 74             	mov    0x74(%eax),%eax
f0115e83:	83 f8 14             	cmp    $0x14,%eax
f0115e86:	75 16                	jne    f0115e9e <test_priority_normal_and_higher+0x30a>
f0115e88:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e8b:	8b 40 74             	mov    0x74(%eax),%eax
f0115e8e:	83 f8 0f             	cmp    $0xf,%eax
f0115e91:	75 0b                	jne    f0115e9e <test_priority_normal_and_higher+0x30a>
f0115e93:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e96:	8b 40 74             	mov    0x74(%eax),%eax
f0115e99:	83 f8 0a             	cmp    $0xa,%eax
f0115e9c:	74 14                	je     f0115eb2 <test_priority_normal_and_higher+0x31e>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0115e9e:	83 ec 04             	sub    $0x4,%esp
f0115ea1:	68 80 a3 13 f0       	push   $0xf013a380
f0115ea6:	6a 49                	push   $0x49
f0115ea8:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115ead:	e8 f4 a2 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115eb2:	e8 31 66 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0115eb7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115eba:	e8 cd dd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115ebf:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0115ec2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ec5:	83 ec 08             	sub    $0x8,%esp
f0115ec8:	6a 04                	push   $0x4
f0115eca:	50                   	push   %eax
f0115ecb:	e8 0e 4b ff ff       	call   f010a9de <set_program_priority>
f0115ed0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0115ed3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ed6:	83 ec 08             	sub    $0x8,%esp
f0115ed9:	6a 04                	push   $0x4
f0115edb:	50                   	push   %eax
f0115edc:	e8 fd 4a ff ff       	call   f010a9de <set_program_priority>
f0115ee1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115ee4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ee7:	83 ec 08             	sub    $0x8,%esp
f0115eea:	6a 04                	push   $0x4
f0115eec:	50                   	push   %eax
f0115eed:	e8 ec 4a ff ff       	call   f010a9de <set_program_priority>
f0115ef2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115ef5:	e8 92 dd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115efa:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115efd:	74 14                	je     f0115f13 <test_priority_normal_and_higher+0x37f>
f0115eff:	83 ec 04             	sub    $0x4,%esp
f0115f02:	68 54 a3 13 f0       	push   $0xf013a354
f0115f07:	6a 53                	push   $0x53
f0115f09:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115f0e:	e8 93 a2 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115f13:	e8 d0 65 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0115f18:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115f1b:	74 14                	je     f0115f31 <test_priority_normal_and_higher+0x39d>
f0115f1d:	83 ec 04             	sub    $0x4,%esp
f0115f20:	68 d4 a3 13 f0       	push   $0xf013a3d4
f0115f25:	6a 54                	push   $0x54
f0115f27:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115f2c:	e8 75 a2 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115f31:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f34:	8b 40 74             	mov    0x74(%eax),%eax
f0115f37:	83 f8 14             	cmp    $0x14,%eax
f0115f3a:	75 16                	jne    f0115f52 <test_priority_normal_and_higher+0x3be>
f0115f3c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f3f:	8b 40 74             	mov    0x74(%eax),%eax
f0115f42:	83 f8 0f             	cmp    $0xf,%eax
f0115f45:	75 0b                	jne    f0115f52 <test_priority_normal_and_higher+0x3be>
f0115f47:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f4a:	8b 40 74             	mov    0x74(%eax),%eax
f0115f4d:	83 f8 14             	cmp    $0x14,%eax
f0115f50:	74 14                	je     f0115f66 <test_priority_normal_and_higher+0x3d2>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115f52:	83 ec 04             	sub    $0x4,%esp
f0115f55:	68 04 a4 13 f0       	push   $0xf013a404
f0115f5a:	6a 57                	push   $0x57
f0115f5c:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115f61:	e8 40 a2 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115f66:	e8 7d 65 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0115f6b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115f6e:	e8 19 dd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115f73:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0115f76:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f79:	83 ec 08             	sub    $0x8,%esp
f0115f7c:	6a 04                	push   $0x4
f0115f7e:	50                   	push   %eax
f0115f7f:	e8 5a 4a ff ff       	call   f010a9de <set_program_priority>
f0115f84:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115f87:	e8 00 dd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115f8c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115f8f:	74 14                	je     f0115fa5 <test_priority_normal_and_higher+0x411>
f0115f91:	83 ec 04             	sub    $0x4,%esp
f0115f94:	68 54 a3 13 f0       	push   $0xf013a354
f0115f99:	6a 5f                	push   $0x5f
f0115f9b:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115fa0:	e8 01 a2 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115fa5:	e8 3e 65 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0115faa:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115fad:	74 14                	je     f0115fc3 <test_priority_normal_and_higher+0x42f>
f0115faf:	83 ec 04             	sub    $0x4,%esp
f0115fb2:	68 54 a3 13 f0       	push   $0xf013a354
f0115fb7:	6a 60                	push   $0x60
f0115fb9:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115fbe:	e8 e3 a1 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115fc3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115fc6:	8b 40 74             	mov    0x74(%eax),%eax
f0115fc9:	83 f8 14             	cmp    $0x14,%eax
f0115fcc:	75 16                	jne    f0115fe4 <test_priority_normal_and_higher+0x450>
f0115fce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115fd1:	8b 40 74             	mov    0x74(%eax),%eax
f0115fd4:	83 f8 0f             	cmp    $0xf,%eax
f0115fd7:	75 0b                	jne    f0115fe4 <test_priority_normal_and_higher+0x450>
f0115fd9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115fdc:	8b 40 74             	mov    0x74(%eax),%eax
f0115fdf:	83 f8 14             	cmp    $0x14,%eax
f0115fe2:	74 14                	je     f0115ff8 <test_priority_normal_and_higher+0x464>
			panic("The programs' working set size should be doubled only once\n");
f0115fe4:	83 ec 04             	sub    $0x4,%esp
f0115fe7:	68 4c a4 13 f0       	push   $0xf013a44c
f0115fec:	6a 63                	push   $0x63
f0115fee:	68 ed a2 13 f0       	push   $0xf013a2ed
f0115ff3:	e8 ae a1 fe ff       	call   f01001a6 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115ff8:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0115fff:	eb 1a                	jmp    f011601b <test_priority_normal_and_higher+0x487>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116001:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0116004:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116007:	89 d0                	mov    %edx,%eax
f0116009:	01 c0                	add    %eax,%eax
f011600b:	01 d0                	add    %edx,%eax
f011600d:	c1 e0 03             	shl    $0x3,%eax
f0116010:	01 c8                	add    %ecx,%eax
f0116012:	83 c0 7c             	add    $0x7c,%eax
f0116015:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116018:	ff 45 d8             	incl   -0x28(%ebp)
f011601b:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011601f:	7e e0                	jle    f0116001 <test_priority_normal_and_higher+0x46d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116021:	e8 c2 64 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116026:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116029:	e8 5e dc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011602e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116031:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116034:	83 ec 08             	sub    $0x8,%esp
f0116037:	6a 04                	push   $0x4
f0116039:	50                   	push   %eax
f011603a:	e8 9f 49 ff ff       	call   f010a9de <set_program_priority>
f011603f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116042:	e8 45 dc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116047:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011604a:	74 14                	je     f0116060 <test_priority_normal_and_higher+0x4cc>
f011604c:	83 ec 04             	sub    $0x4,%esp
f011604f:	68 54 a3 13 f0       	push   $0xf013a354
f0116054:	6a 70                	push   $0x70
f0116056:	68 ed a2 13 f0       	push   $0xf013a2ed
f011605b:	e8 46 a1 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116060:	e8 83 64 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116065:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116068:	74 14                	je     f011607e <test_priority_normal_and_higher+0x4ea>
f011606a:	83 ec 04             	sub    $0x4,%esp
f011606d:	68 54 a3 13 f0       	push   $0xf013a354
f0116072:	6a 71                	push   $0x71
f0116074:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116079:	e8 28 a1 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011607e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116081:	8b 40 74             	mov    0x74(%eax),%eax
f0116084:	83 f8 14             	cmp    $0x14,%eax
f0116087:	75 16                	jne    f011609f <test_priority_normal_and_higher+0x50b>
f0116089:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011608c:	8b 40 74             	mov    0x74(%eax),%eax
f011608f:	83 f8 0f             	cmp    $0xf,%eax
f0116092:	75 0b                	jne    f011609f <test_priority_normal_and_higher+0x50b>
f0116094:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116097:	8b 40 74             	mov    0x74(%eax),%eax
f011609a:	83 f8 14             	cmp    $0x14,%eax
f011609d:	74 14                	je     f01160b3 <test_priority_normal_and_higher+0x51f>
			panic("The programs' working set size should be doubled only once\n");
f011609f:	83 ec 04             	sub    $0x4,%esp
f01160a2:	68 4c a4 13 f0       	push   $0xf013a44c
f01160a7:	6a 74                	push   $0x74
f01160a9:	68 ed a2 13 f0       	push   $0xf013a2ed
f01160ae:	e8 f3 a0 fe ff       	call   f01001a6 <_panic>

		for(int i = 10; i < 15; i++)
f01160b3:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01160ba:	eb 1a                	jmp    f01160d6 <test_priority_normal_and_higher+0x542>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01160bc:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01160bf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01160c2:	89 d0                	mov    %edx,%eax
f01160c4:	01 c0                	add    %eax,%eax
f01160c6:	01 d0                	add    %edx,%eax
f01160c8:	c1 e0 03             	shl    $0x3,%eax
f01160cb:	01 c8                	add    %ecx,%eax
f01160cd:	83 c0 7c             	add    $0x7c,%eax
f01160d0:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01160d3:	ff 45 d4             	incl   -0x2c(%ebp)
f01160d6:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01160da:	7e e0                	jle    f01160bc <test_priority_normal_and_higher+0x528>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01160dc:	e8 07 64 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01160e1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160e4:	e8 a3 db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01160e9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01160ec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01160ef:	83 ec 08             	sub    $0x8,%esp
f01160f2:	6a 05                	push   $0x5
f01160f4:	50                   	push   %eax
f01160f5:	e8 e4 48 ff ff       	call   f010a9de <set_program_priority>
f01160fa:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01160fd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116100:	83 ec 08             	sub    $0x8,%esp
f0116103:	6a 05                	push   $0x5
f0116105:	50                   	push   %eax
f0116106:	e8 d3 48 ff ff       	call   f010a9de <set_program_priority>
f011610b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011610e:	e8 79 db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116113:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116116:	74 14                	je     f011612c <test_priority_normal_and_higher+0x598>
f0116118:	83 ec 04             	sub    $0x4,%esp
f011611b:	68 54 a3 13 f0       	push   $0xf013a354
f0116120:	6a 7f                	push   $0x7f
f0116122:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116127:	e8 7a a0 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011612c:	e8 b7 63 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116131:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116134:	74 17                	je     f011614d <test_priority_normal_and_higher+0x5b9>
f0116136:	83 ec 04             	sub    $0x4,%esp
f0116139:	68 54 a3 13 f0       	push   $0xf013a354
f011613e:	68 80 00 00 00       	push   $0x80
f0116143:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116148:	e8 59 a0 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011614d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116150:	8b 40 74             	mov    0x74(%eax),%eax
f0116153:	83 f8 14             	cmp    $0x14,%eax
f0116156:	75 16                	jne    f011616e <test_priority_normal_and_higher+0x5da>
f0116158:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011615b:	8b 40 74             	mov    0x74(%eax),%eax
f011615e:	83 f8 1e             	cmp    $0x1e,%eax
f0116161:	75 0b                	jne    f011616e <test_priority_normal_and_higher+0x5da>
f0116163:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116166:	8b 40 74             	mov    0x74(%eax),%eax
f0116169:	83 f8 28             	cmp    $0x28,%eax
f011616c:	74 17                	je     f0116185 <test_priority_normal_and_higher+0x5f1>
			panic("The programs' working set size should be doubled if full\n");
f011616e:	83 ec 04             	sub    $0x4,%esp
f0116171:	68 88 a4 13 f0       	push   $0xf013a488
f0116176:	68 83 00 00 00       	push   $0x83
f011617b:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116180:	e8 21 a0 fe ff       	call   f01001a6 <_panic>

		for(int i = 20; i < 40; i++)
f0116185:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f011618c:	eb 1a                	jmp    f01161a8 <test_priority_normal_and_higher+0x614>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011618e:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0116191:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116194:	89 d0                	mov    %edx,%eax
f0116196:	01 c0                	add    %eax,%eax
f0116198:	01 d0                	add    %edx,%eax
f011619a:	c1 e0 03             	shl    $0x3,%eax
f011619d:	01 c8                	add    %ecx,%eax
f011619f:	83 c0 7c             	add    $0x7c,%eax
f01161a2:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01161a5:	ff 45 d0             	incl   -0x30(%ebp)
f01161a8:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01161ac:	7e e0                	jle    f011618e <test_priority_normal_and_higher+0x5fa>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01161ae:	e8 35 63 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01161b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01161b6:	e8 d1 da fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01161bb:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01161be:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161c1:	83 ec 08             	sub    $0x8,%esp
f01161c4:	6a 05                	push   $0x5
f01161c6:	50                   	push   %eax
f01161c7:	e8 12 48 ff ff       	call   f010a9de <set_program_priority>
f01161cc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01161cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161d2:	83 ec 08             	sub    $0x8,%esp
f01161d5:	6a 04                	push   $0x4
f01161d7:	50                   	push   %eax
f01161d8:	e8 01 48 ff ff       	call   f010a9de <set_program_priority>
f01161dd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01161e0:	e8 a7 da fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01161e5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01161e8:	74 17                	je     f0116201 <test_priority_normal_and_higher+0x66d>
f01161ea:	83 ec 04             	sub    $0x4,%esp
f01161ed:	68 54 a3 13 f0       	push   $0xf013a354
f01161f2:	68 8e 00 00 00       	push   $0x8e
f01161f7:	68 ed a2 13 f0       	push   $0xf013a2ed
f01161fc:	e8 a5 9f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116201:	e8 e2 62 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116206:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116209:	74 17                	je     f0116222 <test_priority_normal_and_higher+0x68e>
f011620b:	83 ec 04             	sub    $0x4,%esp
f011620e:	68 54 a3 13 f0       	push   $0xf013a354
f0116213:	68 8f 00 00 00       	push   $0x8f
f0116218:	68 ed a2 13 f0       	push   $0xf013a2ed
f011621d:	e8 84 9f fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116222:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116225:	8b 40 74             	mov    0x74(%eax),%eax
f0116228:	83 f8 14             	cmp    $0x14,%eax
f011622b:	75 16                	jne    f0116243 <test_priority_normal_and_higher+0x6af>
f011622d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116230:	8b 40 74             	mov    0x74(%eax),%eax
f0116233:	83 f8 1e             	cmp    $0x1e,%eax
f0116236:	75 0b                	jne    f0116243 <test_priority_normal_and_higher+0x6af>
f0116238:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011623b:	8b 40 74             	mov    0x74(%eax),%eax
f011623e:	83 f8 28             	cmp    $0x28,%eax
f0116241:	74 17                	je     f011625a <test_priority_normal_and_higher+0x6c6>
			panic("The programs' working set size should be doubled if full\n");
f0116243:	83 ec 04             	sub    $0x4,%esp
f0116246:	68 88 a4 13 f0       	push   $0xf013a488
f011624b:	68 92 00 00 00       	push   $0x92
f0116250:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116255:	e8 4c 9f fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 30; i++)
f011625a:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116261:	eb 1a                	jmp    f011627d <test_priority_normal_and_higher+0x6e9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116263:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0116266:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116269:	89 d0                	mov    %edx,%eax
f011626b:	01 c0                	add    %eax,%eax
f011626d:	01 d0                	add    %edx,%eax
f011626f:	c1 e0 03             	shl    $0x3,%eax
f0116272:	01 c8                	add    %ecx,%eax
f0116274:	83 c0 7c             	add    $0x7c,%eax
f0116277:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011627a:	ff 45 cc             	incl   -0x34(%ebp)
f011627d:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116281:	7e e0                	jle    f0116263 <test_priority_normal_and_higher+0x6cf>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116283:	e8 60 62 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116288:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011628b:	e8 fc d9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116290:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116293:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116296:	83 ec 08             	sub    $0x8,%esp
f0116299:	6a 05                	push   $0x5
f011629b:	50                   	push   %eax
f011629c:	e8 3d 47 ff ff       	call   f010a9de <set_program_priority>
f01162a1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01162a4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162a7:	83 ec 08             	sub    $0x8,%esp
f01162aa:	6a 04                	push   $0x4
f01162ac:	50                   	push   %eax
f01162ad:	e8 2c 47 ff ff       	call   f010a9de <set_program_priority>
f01162b2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01162b5:	e8 d2 d9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01162ba:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01162bd:	74 17                	je     f01162d6 <test_priority_normal_and_higher+0x742>
f01162bf:	83 ec 04             	sub    $0x4,%esp
f01162c2:	68 54 a3 13 f0       	push   $0xf013a354
f01162c7:	68 9d 00 00 00       	push   $0x9d
f01162cc:	68 ed a2 13 f0       	push   $0xf013a2ed
f01162d1:	e8 d0 9e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01162d6:	e8 0d 62 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01162db:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01162de:	74 17                	je     f01162f7 <test_priority_normal_and_higher+0x763>
f01162e0:	83 ec 04             	sub    $0x4,%esp
f01162e3:	68 54 a3 13 f0       	push   $0xf013a354
f01162e8:	68 9e 00 00 00       	push   $0x9e
f01162ed:	68 ed a2 13 f0       	push   $0xf013a2ed
f01162f2:	e8 af 9e fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01162f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01162fa:	8b 40 74             	mov    0x74(%eax),%eax
f01162fd:	83 f8 14             	cmp    $0x14,%eax
f0116300:	75 16                	jne    f0116318 <test_priority_normal_and_higher+0x784>
f0116302:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116305:	8b 40 74             	mov    0x74(%eax),%eax
f0116308:	83 f8 3c             	cmp    $0x3c,%eax
f011630b:	75 0b                	jne    f0116318 <test_priority_normal_and_higher+0x784>
f011630d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116310:	8b 40 74             	mov    0x74(%eax),%eax
f0116313:	83 f8 28             	cmp    $0x28,%eax
f0116316:	74 17                	je     f011632f <test_priority_normal_and_higher+0x79b>
			panic("The programs' working set size should be doubled if full\n");
f0116318:	83 ec 04             	sub    $0x4,%esp
f011631b:	68 88 a4 13 f0       	push   $0xf013a488
f0116320:	68 a1 00 00 00       	push   $0xa1
f0116325:	68 ed a2 13 f0       	push   $0xf013a2ed
f011632a:	e8 77 9e fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 60; i++)
f011632f:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116336:	eb 1a                	jmp    f0116352 <test_priority_normal_and_higher+0x7be>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116338:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011633b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011633e:	89 d0                	mov    %edx,%eax
f0116340:	01 c0                	add    %eax,%eax
f0116342:	01 d0                	add    %edx,%eax
f0116344:	c1 e0 03             	shl    $0x3,%eax
f0116347:	01 c8                	add    %ecx,%eax
f0116349:	83 c0 7c             	add    $0x7c,%eax
f011634c:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011634f:	ff 45 c8             	incl   -0x38(%ebp)
f0116352:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116356:	7e e0                	jle    f0116338 <test_priority_normal_and_higher+0x7a4>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116358:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011635f:	eb 1a                	jmp    f011637b <test_priority_normal_and_higher+0x7e7>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116361:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0116364:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116367:	89 d0                	mov    %edx,%eax
f0116369:	01 c0                	add    %eax,%eax
f011636b:	01 d0                	add    %edx,%eax
f011636d:	c1 e0 03             	shl    $0x3,%eax
f0116370:	01 c8                	add    %ecx,%eax
f0116372:	83 c0 7c             	add    $0x7c,%eax
f0116375:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116378:	ff 45 c4             	incl   -0x3c(%ebp)
f011637b:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f011637f:	7e e0                	jle    f0116361 <test_priority_normal_and_higher+0x7cd>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116381:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116388:	eb 79                	jmp    f0116403 <test_priority_normal_and_higher+0x86f>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011638a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011638d:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116394:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0116397:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011639a:	89 d0                	mov    %edx,%eax
f011639c:	01 c0                	add    %eax,%eax
f011639e:	01 d0                	add    %edx,%eax
f01163a0:	c1 e0 03             	shl    $0x3,%eax
f01163a3:	01 d8                	add    %ebx,%eax
f01163a5:	83 c0 78             	add    $0x78,%eax
f01163a8:	8b 00                	mov    (%eax),%eax
f01163aa:	39 c1                	cmp    %eax,%ecx
f01163ac:	74 17                	je     f01163c5 <test_priority_normal_and_higher+0x831>
				panic("Working set should be moved properly to the new one");
f01163ae:	83 ec 04             	sub    $0x4,%esp
f01163b1:	68 c4 a4 13 f0       	push   $0xf013a4c4
f01163b6:	68 af 00 00 00       	push   $0xaf
f01163bb:	68 ed a2 13 f0       	push   $0xf013a2ed
f01163c0:	e8 e1 9d fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01163c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01163c8:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01163cf:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01163d2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01163d5:	89 d0                	mov    %edx,%eax
f01163d7:	01 c0                	add    %eax,%eax
f01163d9:	01 d0                	add    %edx,%eax
f01163db:	c1 e0 03             	shl    $0x3,%eax
f01163de:	01 d8                	add    %ebx,%eax
f01163e0:	83 e8 80             	sub    $0xffffff80,%eax
f01163e3:	8b 00                	mov    (%eax),%eax
f01163e5:	39 c1                	cmp    %eax,%ecx
f01163e7:	74 17                	je     f0116400 <test_priority_normal_and_higher+0x86c>
				panic("Working set should be moved properly to the new one");
f01163e9:	83 ec 04             	sub    $0x4,%esp
f01163ec:	68 c4 a4 13 f0       	push   $0xf013a4c4
f01163f1:	68 b2 00 00 00       	push   $0xb2
f01163f6:	68 ed a2 13 f0       	push   $0xf013a2ed
f01163fb:	e8 a6 9d fe ff       	call   f01001a6 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116400:	ff 45 c0             	incl   -0x40(%ebp)
f0116403:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116407:	7e 81                	jle    f011638a <test_priority_normal_and_higher+0x7f6>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116409:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116410:	eb 79                	jmp    f011648b <test_priority_normal_and_higher+0x8f7>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116412:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116415:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f011641c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011641f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116422:	89 d0                	mov    %edx,%eax
f0116424:	01 c0                	add    %eax,%eax
f0116426:	01 d0                	add    %edx,%eax
f0116428:	c1 e0 03             	shl    $0x3,%eax
f011642b:	01 d8                	add    %ebx,%eax
f011642d:	83 c0 78             	add    $0x78,%eax
f0116430:	8b 00                	mov    (%eax),%eax
f0116432:	39 c1                	cmp    %eax,%ecx
f0116434:	74 17                	je     f011644d <test_priority_normal_and_higher+0x8b9>
				panic("Working set should be moved properly to the new one");
f0116436:	83 ec 04             	sub    $0x4,%esp
f0116439:	68 c4 a4 13 f0       	push   $0xf013a4c4
f011643e:	68 b8 00 00 00       	push   $0xb8
f0116443:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116448:	e8 59 9d fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011644d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116450:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116457:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011645a:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011645d:	89 d0                	mov    %edx,%eax
f011645f:	01 c0                	add    %eax,%eax
f0116461:	01 d0                	add    %edx,%eax
f0116463:	c1 e0 03             	shl    $0x3,%eax
f0116466:	01 d8                	add    %ebx,%eax
f0116468:	83 e8 80             	sub    $0xffffff80,%eax
f011646b:	8b 00                	mov    (%eax),%eax
f011646d:	39 c1                	cmp    %eax,%ecx
f011646f:	74 17                	je     f0116488 <test_priority_normal_and_higher+0x8f4>
				panic("Working set should be moved properly to the new one");
f0116471:	83 ec 04             	sub    $0x4,%esp
f0116474:	68 c4 a4 13 f0       	push   $0xf013a4c4
f0116479:	68 bb 00 00 00       	push   $0xbb
f011647e:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116483:	e8 1e 9d fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116488:	ff 45 bc             	incl   -0x44(%ebp)
f011648b:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011648f:	7e 81                	jle    f0116412 <test_priority_normal_and_higher+0x87e>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116491:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116498:	eb 79                	jmp    f0116513 <test_priority_normal_and_higher+0x97f>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011649a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011649d:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01164a4:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01164a7:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01164aa:	89 d0                	mov    %edx,%eax
f01164ac:	01 c0                	add    %eax,%eax
f01164ae:	01 d0                	add    %edx,%eax
f01164b0:	c1 e0 03             	shl    $0x3,%eax
f01164b3:	01 d8                	add    %ebx,%eax
f01164b5:	83 c0 78             	add    $0x78,%eax
f01164b8:	8b 00                	mov    (%eax),%eax
f01164ba:	39 c1                	cmp    %eax,%ecx
f01164bc:	74 17                	je     f01164d5 <test_priority_normal_and_higher+0x941>
				panic("Working set should be moved properly to the new one");
f01164be:	83 ec 04             	sub    $0x4,%esp
f01164c1:	68 c4 a4 13 f0       	push   $0xf013a4c4
f01164c6:	68 c1 00 00 00       	push   $0xc1
f01164cb:	68 ed a2 13 f0       	push   $0xf013a2ed
f01164d0:	e8 d1 9c fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01164d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164d8:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01164df:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01164e2:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01164e5:	89 d0                	mov    %edx,%eax
f01164e7:	01 c0                	add    %eax,%eax
f01164e9:	01 d0                	add    %edx,%eax
f01164eb:	c1 e0 03             	shl    $0x3,%eax
f01164ee:	01 d8                	add    %ebx,%eax
f01164f0:	83 e8 80             	sub    $0xffffff80,%eax
f01164f3:	8b 00                	mov    (%eax),%eax
f01164f5:	39 c1                	cmp    %eax,%ecx
f01164f7:	74 17                	je     f0116510 <test_priority_normal_and_higher+0x97c>
				panic("Working set should be moved properly to the new one");
f01164f9:	83 ec 04             	sub    $0x4,%esp
f01164fc:	68 c4 a4 13 f0       	push   $0xf013a4c4
f0116501:	68 c4 00 00 00       	push   $0xc4
f0116506:	68 ed a2 13 f0       	push   $0xf013a2ed
f011650b:	e8 96 9c fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116510:	ff 45 b8             	incl   -0x48(%ebp)
f0116513:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116517:	7e 81                	jle    f011649a <test_priority_normal_and_higher+0x906>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116519:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116520:	75 6e 61 
f0116523:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f011652a:	6c 00 00 
f011652d:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0116533:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116538:	b8 00 00 00 00       	mov    $0x0,%eax
f011653d:	89 d7                	mov    %edx,%edi
f011653f:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116541:	83 ec 0c             	sub    $0xc,%esp
f0116544:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f011654a:	50                   	push   %eax
f011654b:	e8 3f a7 fe ff       	call   f0100c8f <execute_command>
f0116550:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0116553:	eb 10                	jmp    f0116565 <test_priority_normal_and_higher+0x9d1>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0116555:	83 ec 0c             	sub    $0xc,%esp
f0116558:	68 f8 a4 13 f0       	push   $0xf013a4f8
f011655d:	e8 cb a6 fe ff       	call   f0100c2d <cprintf>
f0116562:	83 c4 10             	add    $0x10,%esp
	}
}
f0116565:	90                   	nop
f0116566:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116569:	5b                   	pop    %ebx
f011656a:	5e                   	pop    %esi
f011656b:	5f                   	pop    %edi
f011656c:	5d                   	pop    %ebp
f011656d:	c3                   	ret    

f011656e <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f011656e:	55                   	push   %ebp
f011656f:	89 e5                	mov    %esp,%ebp
f0116571:	57                   	push   %edi
f0116572:	56                   	push   %esi
f0116573:	53                   	push   %ebx
f0116574:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f011657a:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f011657f:	84 c0                	test   %al,%al
f0116581:	0f 84 ac 09 00 00    	je     f0116f33 <test_priority_normal_and_lower+0x9c5>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0116587:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f011658e:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116594:	bb 34 a5 13 f0       	mov    $0xf013a534,%ebx
f0116599:	ba 04 00 00 00       	mov    $0x4,%edx
f011659e:	89 c7                	mov    %eax,%edi
f01165a0:	89 de                	mov    %ebx,%esi
f01165a2:	89 d1                	mov    %edx,%ecx
f01165a4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01165a6:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01165ac:	b9 15 00 00 00       	mov    $0x15,%ecx
f01165b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01165b6:	89 d7                	mov    %edx,%edi
f01165b8:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01165ba:	83 ec 0c             	sub    $0xc,%esp
f01165bd:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01165c3:	50                   	push   %eax
f01165c4:	e8 c6 a6 fe ff       	call   f0100c8f <execute_command>
f01165c9:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01165cc:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01165d2:	bb f0 a7 13 f0       	mov    $0xf013a7f0,%ebx
f01165d7:	ba 0d 00 00 00       	mov    $0xd,%edx
f01165dc:	89 c7                	mov    %eax,%edi
f01165de:	89 de                	mov    %ebx,%esi
f01165e0:	89 d1                	mov    %edx,%ecx
f01165e2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01165e4:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01165ea:	b9 57 00 00 00       	mov    $0x57,%ecx
f01165ef:	b0 00                	mov    $0x0,%al
f01165f1:	89 d7                	mov    %edx,%edi
f01165f3:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01165f5:	83 ec 0c             	sub    $0xc,%esp
f01165f8:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01165fe:	50                   	push   %eax
f01165ff:	e8 8b a6 fe ff       	call   f0100c8f <execute_command>
f0116604:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116607:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011660d:	bb 54 a8 13 f0       	mov    $0xf013a854,%ebx
f0116612:	ba 17 00 00 00       	mov    $0x17,%edx
f0116617:	89 c7                	mov    %eax,%edi
f0116619:	89 de                	mov    %ebx,%esi
f011661b:	89 d1                	mov    %edx,%ecx
f011661d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011661f:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0116625:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011662a:	b0 00                	mov    $0x0,%al
f011662c:	89 d7                	mov    %edx,%edi
f011662e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116630:	83 ec 0c             	sub    $0xc,%esp
f0116633:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116639:	50                   	push   %eax
f011663a:	e8 50 a6 fe ff       	call   f0100c8f <execute_command>
f011663f:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116642:	83 ec 04             	sub    $0x4,%esp
f0116645:	6a 00                	push   $0x0
f0116647:	8d 45 b8             	lea    -0x48(%ebp),%eax
f011664a:	50                   	push   %eax
f011664b:	68 00 10 00 00       	push   $0x1000
f0116650:	e8 a2 2e ff ff       	call   f01094f7 <envid2env>
f0116655:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116658:	83 ec 04             	sub    $0x4,%esp
f011665b:	6a 00                	push   $0x0
f011665d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116660:	50                   	push   %eax
f0116661:	68 01 10 00 00       	push   $0x1001
f0116666:	e8 8c 2e ff ff       	call   f01094f7 <envid2env>
f011666b:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011666e:	83 ec 04             	sub    $0x4,%esp
f0116671:	6a 00                	push   $0x0
f0116673:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0116676:	50                   	push   %eax
f0116677:	68 02 10 00 00       	push   $0x1002
f011667c:	e8 76 2e ff ff       	call   f01094f7 <envid2env>
f0116681:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116684:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116687:	85 c0                	test   %eax,%eax
f0116689:	74 0e                	je     f0116699 <test_priority_normal_and_lower+0x12b>
f011668b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011668e:	85 c0                	test   %eax,%eax
f0116690:	74 07                	je     f0116699 <test_priority_normal_and_lower+0x12b>
f0116692:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116695:	85 c0                	test   %eax,%eax
f0116697:	75 17                	jne    f01166b0 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116699:	83 ec 04             	sub    $0x4,%esp
f011669c:	68 d4 a2 13 f0       	push   $0xf013a2d4
f01166a1:	68 eb 00 00 00       	push   $0xeb
f01166a6:	68 ed a2 13 f0       	push   $0xf013a2ed
f01166ab:	e8 f6 9a fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01166b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166b3:	8b 40 74             	mov    0x74(%eax),%eax
f01166b6:	83 f8 14             	cmp    $0x14,%eax
f01166b9:	75 16                	jne    f01166d1 <test_priority_normal_and_lower+0x163>
f01166bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01166be:	8b 40 74             	mov    0x74(%eax),%eax
f01166c1:	83 f8 1e             	cmp    $0x1e,%eax
f01166c4:	75 0b                	jne    f01166d1 <test_priority_normal_and_lower+0x163>
f01166c6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01166c9:	8b 40 74             	mov    0x74(%eax),%eax
f01166cc:	83 f8 28             	cmp    $0x28,%eax
f01166cf:	74 17                	je     f01166e8 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01166d1:	83 ec 04             	sub    $0x4,%esp
f01166d4:	68 08 a3 13 f0       	push   $0xf013a308
f01166d9:	68 ee 00 00 00       	push   $0xee
f01166de:	68 ed a2 13 f0       	push   $0xf013a2ed
f01166e3:	e8 be 9a fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f01166e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01166ef:	eb 43                	jmp    f0116734 <test_priority_normal_and_lower+0x1c6>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01166f1:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01166f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01166f7:	89 d0                	mov    %edx,%eax
f01166f9:	01 c0                	add    %eax,%eax
f01166fb:	01 d0                	add    %edx,%eax
f01166fd:	c1 e0 03             	shl    $0x3,%eax
f0116700:	01 c8                	add    %ecx,%eax
f0116702:	83 c0 78             	add    $0x78,%eax
f0116705:	8b 10                	mov    (%eax),%edx
f0116707:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011670a:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116711:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0116714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116717:	89 d0                	mov    %edx,%eax
f0116719:	01 c0                	add    %eax,%eax
f011671b:	01 d0                	add    %edx,%eax
f011671d:	c1 e0 03             	shl    $0x3,%eax
f0116720:	01 c8                	add    %ecx,%eax
f0116722:	83 e8 80             	sub    $0xffffff80,%eax
f0116725:	8b 10                	mov    (%eax),%edx
f0116727:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011672a:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116731:	ff 45 e4             	incl   -0x1c(%ebp)
f0116734:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116738:	7e b7                	jle    f01166f1 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011673a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116741:	eb 43                	jmp    f0116786 <test_priority_normal_and_lower+0x218>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116743:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0116746:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116749:	89 d0                	mov    %edx,%eax
f011674b:	01 c0                	add    %eax,%eax
f011674d:	01 d0                	add    %edx,%eax
f011674f:	c1 e0 03             	shl    $0x3,%eax
f0116752:	01 c8                	add    %ecx,%eax
f0116754:	83 c0 78             	add    $0x78,%eax
f0116757:	8b 10                	mov    (%eax),%edx
f0116759:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011675c:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116763:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0116766:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116769:	89 d0                	mov    %edx,%eax
f011676b:	01 c0                	add    %eax,%eax
f011676d:	01 d0                	add    %edx,%eax
f011676f:	c1 e0 03             	shl    $0x3,%eax
f0116772:	01 c8                	add    %ecx,%eax
f0116774:	83 e8 80             	sub    $0xffffff80,%eax
f0116777:	8b 10                	mov    (%eax),%edx
f0116779:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011677c:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116783:	ff 45 e0             	incl   -0x20(%ebp)
f0116786:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f011678a:	7e b7                	jle    f0116743 <test_priority_normal_and_lower+0x1d5>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011678c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116793:	eb 43                	jmp    f01167d8 <test_priority_normal_and_lower+0x26a>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116795:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0116798:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011679b:	89 d0                	mov    %edx,%eax
f011679d:	01 c0                	add    %eax,%eax
f011679f:	01 d0                	add    %edx,%eax
f01167a1:	c1 e0 03             	shl    $0x3,%eax
f01167a4:	01 c8                	add    %ecx,%eax
f01167a6:	83 c0 78             	add    $0x78,%eax
f01167a9:	8b 10                	mov    (%eax),%edx
f01167ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01167ae:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01167b5:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01167b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01167bb:	89 d0                	mov    %edx,%eax
f01167bd:	01 c0                	add    %eax,%eax
f01167bf:	01 d0                	add    %edx,%eax
f01167c1:	c1 e0 03             	shl    $0x3,%eax
f01167c4:	01 c8                	add    %ecx,%eax
f01167c6:	83 e8 80             	sub    $0xffffff80,%eax
f01167c9:	8b 10                	mov    (%eax),%edx
f01167cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01167ce:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01167d5:	ff 45 dc             	incl   -0x24(%ebp)
f01167d8:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01167dc:	7e b7                	jle    f0116795 <test_priority_normal_and_lower+0x227>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01167de:	e8 05 5d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01167e3:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01167e6:	e8 a1 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01167eb:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01167ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01167f1:	83 ec 08             	sub    $0x8,%esp
f01167f4:	6a 03                	push   $0x3
f01167f6:	50                   	push   %eax
f01167f7:	e8 e2 41 ff ff       	call   f010a9de <set_program_priority>
f01167fc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01167ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116802:	83 ec 08             	sub    $0x8,%esp
f0116805:	6a 03                	push   $0x3
f0116807:	50                   	push   %eax
f0116808:	e8 d1 41 ff ff       	call   f010a9de <set_program_priority>
f011680d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116810:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116813:	83 ec 08             	sub    $0x8,%esp
f0116816:	6a 03                	push   $0x3
f0116818:	50                   	push   %eax
f0116819:	e8 c0 41 ff ff       	call   f010a9de <set_program_priority>
f011681e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116821:	e8 66 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116826:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116829:	74 17                	je     f0116842 <test_priority_normal_and_lower+0x2d4>
f011682b:	83 ec 04             	sub    $0x4,%esp
f011682e:	68 54 a3 13 f0       	push   $0xf013a354
f0116833:	68 0a 01 00 00       	push   $0x10a
f0116838:	68 ed a2 13 f0       	push   $0xf013a2ed
f011683d:	e8 64 99 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116842:	e8 a1 5c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116847:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011684a:	74 17                	je     f0116863 <test_priority_normal_and_lower+0x2f5>
f011684c:	83 ec 04             	sub    $0x4,%esp
f011684f:	68 54 a3 13 f0       	push   $0xf013a354
f0116854:	68 0b 01 00 00       	push   $0x10b
f0116859:	68 ed a2 13 f0       	push   $0xf013a2ed
f011685e:	e8 43 99 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116863:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116866:	8b 40 74             	mov    0x74(%eax),%eax
f0116869:	83 f8 14             	cmp    $0x14,%eax
f011686c:	75 16                	jne    f0116884 <test_priority_normal_and_lower+0x316>
f011686e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116871:	8b 40 74             	mov    0x74(%eax),%eax
f0116874:	83 f8 1e             	cmp    $0x1e,%eax
f0116877:	75 0b                	jne    f0116884 <test_priority_normal_and_lower+0x316>
f0116879:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011687c:	8b 40 74             	mov    0x74(%eax),%eax
f011687f:	83 f8 28             	cmp    $0x28,%eax
f0116882:	74 17                	je     f011689b <test_priority_normal_and_lower+0x32d>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116884:	83 ec 04             	sub    $0x4,%esp
f0116887:	68 80 a3 13 f0       	push   $0xf013a380
f011688c:	68 0e 01 00 00       	push   $0x10e
f0116891:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116896:	e8 0b 99 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f011689b:	e8 48 5c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01168a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01168a3:	e8 e4 d3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01168a8:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01168ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168ae:	83 ec 08             	sub    $0x8,%esp
f01168b1:	6a 02                	push   $0x2
f01168b3:	50                   	push   %eax
f01168b4:	e8 25 41 ff ff       	call   f010a9de <set_program_priority>
f01168b9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01168bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168bf:	83 ec 08             	sub    $0x8,%esp
f01168c2:	6a 02                	push   $0x2
f01168c4:	50                   	push   %eax
f01168c5:	e8 14 41 ff ff       	call   f010a9de <set_program_priority>
f01168ca:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01168cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01168d0:	83 ec 08             	sub    $0x8,%esp
f01168d3:	6a 02                	push   $0x2
f01168d5:	50                   	push   %eax
f01168d6:	e8 03 41 ff ff       	call   f010a9de <set_program_priority>
f01168db:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01168de:	e8 a9 d3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01168e3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01168e6:	74 17                	je     f01168ff <test_priority_normal_and_lower+0x391>
f01168e8:	83 ec 04             	sub    $0x4,%esp
f01168eb:	68 54 a3 13 f0       	push   $0xf013a354
f01168f0:	68 18 01 00 00       	push   $0x118
f01168f5:	68 ed a2 13 f0       	push   $0xf013a2ed
f01168fa:	e8 a7 98 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01168ff:	e8 e4 5b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116904:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116907:	74 21                	je     f011692a <test_priority_normal_and_lower+0x3bc>
f0116909:	e8 da 5b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011690e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116911:	29 c2                	sub    %eax,%edx
f0116913:	89 d0                	mov    %edx,%eax
f0116915:	50                   	push   %eax
f0116916:	68 d4 a3 13 f0       	push   $0xf013a3d4
f011691b:	68 19 01 00 00       	push   $0x119
f0116920:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116925:	e8 7c 98 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011692a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011692d:	8b 40 74             	mov    0x74(%eax),%eax
f0116930:	83 f8 0a             	cmp    $0xa,%eax
f0116933:	75 16                	jne    f011694b <test_priority_normal_and_lower+0x3dd>
f0116935:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116938:	8b 40 74             	mov    0x74(%eax),%eax
f011693b:	83 f8 0f             	cmp    $0xf,%eax
f011693e:	75 0b                	jne    f011694b <test_priority_normal_and_lower+0x3dd>
f0116940:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116943:	8b 40 74             	mov    0x74(%eax),%eax
f0116946:	83 f8 14             	cmp    $0x14,%eax
f0116949:	74 17                	je     f0116962 <test_priority_normal_and_lower+0x3f4>
			panic("The programs' working set size should be doubled only if it is full\n");
f011694b:	83 ec 04             	sub    $0x4,%esp
f011694e:	68 04 a4 13 f0       	push   $0xf013a404
f0116953:	68 1c 01 00 00       	push   $0x11c
f0116958:	68 ed a2 13 f0       	push   $0xf013a2ed
f011695d:	e8 44 98 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116962:	e8 81 5b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116967:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011696a:	e8 1d d3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011696f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116972:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116975:	83 ec 08             	sub    $0x8,%esp
f0116978:	6a 02                	push   $0x2
f011697a:	50                   	push   %eax
f011697b:	e8 5e 40 ff ff       	call   f010a9de <set_program_priority>
f0116980:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116983:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116986:	83 ec 08             	sub    $0x8,%esp
f0116989:	6a 02                	push   $0x2
f011698b:	50                   	push   %eax
f011698c:	e8 4d 40 ff ff       	call   f010a9de <set_program_priority>
f0116991:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116994:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116997:	83 ec 08             	sub    $0x8,%esp
f011699a:	6a 02                	push   $0x2
f011699c:	50                   	push   %eax
f011699d:	e8 3c 40 ff ff       	call   f010a9de <set_program_priority>
f01169a2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01169a5:	e8 e2 d2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01169aa:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01169ad:	74 17                	je     f01169c6 <test_priority_normal_and_lower+0x458>
f01169af:	83 ec 04             	sub    $0x4,%esp
f01169b2:	68 54 a3 13 f0       	push   $0xf013a354
f01169b7:	68 26 01 00 00       	push   $0x126
f01169bc:	68 ed a2 13 f0       	push   $0xf013a2ed
f01169c1:	e8 e0 97 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01169c6:	e8 1d 5b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01169cb:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01169ce:	74 21                	je     f01169f1 <test_priority_normal_and_lower+0x483>
f01169d0:	e8 13 5b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01169d5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01169d8:	29 c2                	sub    %eax,%edx
f01169da:	89 d0                	mov    %edx,%eax
f01169dc:	50                   	push   %eax
f01169dd:	68 d4 a3 13 f0       	push   $0xf013a3d4
f01169e2:	68 27 01 00 00       	push   $0x127
f01169e7:	68 ed a2 13 f0       	push   $0xf013a2ed
f01169ec:	e8 b5 97 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01169f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169f4:	8b 40 74             	mov    0x74(%eax),%eax
f01169f7:	83 f8 0a             	cmp    $0xa,%eax
f01169fa:	75 16                	jne    f0116a12 <test_priority_normal_and_lower+0x4a4>
f01169fc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01169ff:	8b 40 74             	mov    0x74(%eax),%eax
f0116a02:	83 f8 0f             	cmp    $0xf,%eax
f0116a05:	75 0b                	jne    f0116a12 <test_priority_normal_and_lower+0x4a4>
f0116a07:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116a0a:	8b 40 74             	mov    0x74(%eax),%eax
f0116a0d:	83 f8 0a             	cmp    $0xa,%eax
f0116a10:	74 17                	je     f0116a29 <test_priority_normal_and_lower+0x4bb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116a12:	83 ec 04             	sub    $0x4,%esp
f0116a15:	68 04 a4 13 f0       	push   $0xf013a404
f0116a1a:	68 2a 01 00 00       	push   $0x12a
f0116a1f:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116a24:	e8 7d 97 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 10; i++)
f0116a29:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116a30:	eb 79                	jmp    f0116aab <test_priority_normal_and_lower+0x53d>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116a32:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116a35:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116a3c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116a3f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116a42:	89 d0                	mov    %edx,%eax
f0116a44:	01 c0                	add    %eax,%eax
f0116a46:	01 d0                	add    %edx,%eax
f0116a48:	c1 e0 03             	shl    $0x3,%eax
f0116a4b:	01 d8                	add    %ebx,%eax
f0116a4d:	83 c0 78             	add    $0x78,%eax
f0116a50:	8b 00                	mov    (%eax),%eax
f0116a52:	39 c1                	cmp    %eax,%ecx
f0116a54:	74 17                	je     f0116a6d <test_priority_normal_and_lower+0x4ff>
				panic("Working set should be moved properly to the new one");
f0116a56:	83 ec 04             	sub    $0x4,%esp
f0116a59:	68 c4 a4 13 f0       	push   $0xf013a4c4
f0116a5e:	68 2f 01 00 00       	push   $0x12f
f0116a63:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116a68:	e8 39 97 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116a6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116a70:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116a77:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116a7a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116a7d:	89 d0                	mov    %edx,%eax
f0116a7f:	01 c0                	add    %eax,%eax
f0116a81:	01 d0                	add    %edx,%eax
f0116a83:	c1 e0 03             	shl    $0x3,%eax
f0116a86:	01 d8                	add    %ebx,%eax
f0116a88:	83 e8 80             	sub    $0xffffff80,%eax
f0116a8b:	8b 00                	mov    (%eax),%eax
f0116a8d:	39 c1                	cmp    %eax,%ecx
f0116a8f:	74 17                	je     f0116aa8 <test_priority_normal_and_lower+0x53a>
				panic("Working set should be moved properly to the new one");
f0116a91:	83 ec 04             	sub    $0x4,%esp
f0116a94:	68 c4 a4 13 f0       	push   $0xf013a4c4
f0116a99:	68 32 01 00 00       	push   $0x132
f0116a9e:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116aa3:	e8 fe 96 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116aa8:	ff 45 d8             	incl   -0x28(%ebp)
f0116aab:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116aaf:	7e 81                	jle    f0116a32 <test_priority_normal_and_lower+0x4c4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116ab1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116ab8:	eb 79                	jmp    f0116b33 <test_priority_normal_and_lower+0x5c5>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116aba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116abd:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116ac4:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116ac7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116aca:	89 d0                	mov    %edx,%eax
f0116acc:	01 c0                	add    %eax,%eax
f0116ace:	01 d0                	add    %edx,%eax
f0116ad0:	c1 e0 03             	shl    $0x3,%eax
f0116ad3:	01 d8                	add    %ebx,%eax
f0116ad5:	83 c0 78             	add    $0x78,%eax
f0116ad8:	8b 00                	mov    (%eax),%eax
f0116ada:	39 c1                	cmp    %eax,%ecx
f0116adc:	74 17                	je     f0116af5 <test_priority_normal_and_lower+0x587>
				panic("Working set should be moved properly to the new one");
f0116ade:	83 ec 04             	sub    $0x4,%esp
f0116ae1:	68 c4 a4 13 f0       	push   $0xf013a4c4
f0116ae6:	68 38 01 00 00       	push   $0x138
f0116aeb:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116af0:	e8 b1 96 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116af5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116af8:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116aff:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116b02:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116b05:	89 d0                	mov    %edx,%eax
f0116b07:	01 c0                	add    %eax,%eax
f0116b09:	01 d0                	add    %edx,%eax
f0116b0b:	c1 e0 03             	shl    $0x3,%eax
f0116b0e:	01 d8                	add    %ebx,%eax
f0116b10:	83 e8 80             	sub    $0xffffff80,%eax
f0116b13:	8b 00                	mov    (%eax),%eax
f0116b15:	39 c1                	cmp    %eax,%ecx
f0116b17:	74 17                	je     f0116b30 <test_priority_normal_and_lower+0x5c2>
				panic("Working set should be moved properly to the new one");
f0116b19:	83 ec 04             	sub    $0x4,%esp
f0116b1c:	68 c4 a4 13 f0       	push   $0xf013a4c4
f0116b21:	68 3b 01 00 00       	push   $0x13b
f0116b26:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116b2b:	e8 76 96 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116b30:	ff 45 d4             	incl   -0x2c(%ebp)
f0116b33:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116b37:	7e 81                	jle    f0116aba <test_priority_normal_and_lower+0x54c>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116b39:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116b40:	eb 79                	jmp    f0116bbb <test_priority_normal_and_lower+0x64d>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116b42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116b45:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116b4c:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116b4f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116b52:	89 d0                	mov    %edx,%eax
f0116b54:	01 c0                	add    %eax,%eax
f0116b56:	01 d0                	add    %edx,%eax
f0116b58:	c1 e0 03             	shl    $0x3,%eax
f0116b5b:	01 d8                	add    %ebx,%eax
f0116b5d:	83 c0 78             	add    $0x78,%eax
f0116b60:	8b 00                	mov    (%eax),%eax
f0116b62:	39 c1                	cmp    %eax,%ecx
f0116b64:	74 17                	je     f0116b7d <test_priority_normal_and_lower+0x60f>
				panic("Working set should be moved properly to the new one");
f0116b66:	83 ec 04             	sub    $0x4,%esp
f0116b69:	68 c4 a4 13 f0       	push   $0xf013a4c4
f0116b6e:	68 41 01 00 00       	push   $0x141
f0116b73:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116b78:	e8 29 96 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116b7d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116b80:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116b87:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116b8a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116b8d:	89 d0                	mov    %edx,%eax
f0116b8f:	01 c0                	add    %eax,%eax
f0116b91:	01 d0                	add    %edx,%eax
f0116b93:	c1 e0 03             	shl    $0x3,%eax
f0116b96:	01 d8                	add    %ebx,%eax
f0116b98:	83 e8 80             	sub    $0xffffff80,%eax
f0116b9b:	8b 00                	mov    (%eax),%eax
f0116b9d:	39 c1                	cmp    %eax,%ecx
f0116b9f:	74 17                	je     f0116bb8 <test_priority_normal_and_lower+0x64a>
				panic("Working set should be moved properly to the new one");
f0116ba1:	83 ec 04             	sub    $0x4,%esp
f0116ba4:	68 c4 a4 13 f0       	push   $0xf013a4c4
f0116ba9:	68 44 01 00 00       	push   $0x144
f0116bae:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116bb3:	e8 ee 95 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116bb8:	ff 45 d0             	incl   -0x30(%ebp)
f0116bbb:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116bbf:	7e 81                	jle    f0116b42 <test_priority_normal_and_lower+0x5d4>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116bc1:	e8 22 59 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116bc6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116bc9:	e8 be d0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116bce:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116bd1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116bd4:	83 ec 08             	sub    $0x8,%esp
f0116bd7:	6a 01                	push   $0x1
f0116bd9:	50                   	push   %eax
f0116bda:	e8 ff 3d ff ff       	call   f010a9de <set_program_priority>
f0116bdf:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116be2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116be5:	83 ec 08             	sub    $0x8,%esp
f0116be8:	6a 01                	push   $0x1
f0116bea:	50                   	push   %eax
f0116beb:	e8 ee 3d ff ff       	call   f010a9de <set_program_priority>
f0116bf0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116bf3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116bf6:	83 ec 08             	sub    $0x8,%esp
f0116bf9:	6a 01                	push   $0x1
f0116bfb:	50                   	push   %eax
f0116bfc:	e8 dd 3d ff ff       	call   f010a9de <set_program_priority>
f0116c01:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116c04:	e8 83 d0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116c09:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116c0c:	74 17                	je     f0116c25 <test_priority_normal_and_lower+0x6b7>
f0116c0e:	83 ec 04             	sub    $0x4,%esp
f0116c11:	68 54 a3 13 f0       	push   $0xf013a354
f0116c16:	68 4d 01 00 00       	push   $0x14d
f0116c1b:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116c20:	e8 81 95 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116c25:	e8 be 58 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116c2a:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116c2d:	83 f8 0d             	cmp    $0xd,%eax
f0116c30:	74 17                	je     f0116c49 <test_priority_normal_and_lower+0x6db>
f0116c32:	83 ec 04             	sub    $0x4,%esp
f0116c35:	68 60 a6 13 f0       	push   $0xf013a660
f0116c3a:	68 4e 01 00 00       	push   $0x14e
f0116c3f:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116c44:	e8 5d 95 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116c49:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c4c:	8b 40 74             	mov    0x74(%eax),%eax
f0116c4f:	83 f8 05             	cmp    $0x5,%eax
f0116c52:	75 16                	jne    f0116c6a <test_priority_normal_and_lower+0x6fc>
f0116c54:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c57:	8b 40 74             	mov    0x74(%eax),%eax
f0116c5a:	83 f8 07             	cmp    $0x7,%eax
f0116c5d:	75 0b                	jne    f0116c6a <test_priority_normal_and_lower+0x6fc>
f0116c5f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116c62:	8b 40 74             	mov    0x74(%eax),%eax
f0116c65:	83 f8 05             	cmp    $0x5,%eax
f0116c68:	74 17                	je     f0116c81 <test_priority_normal_and_lower+0x713>
			panic("The programs' working set size should be half\n");
f0116c6a:	83 ec 04             	sub    $0x4,%esp
f0116c6d:	68 a8 a6 13 f0       	push   $0xf013a6a8
f0116c72:	68 51 01 00 00       	push   $0x151
f0116c77:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116c7c:	e8 25 95 fe ff       	call   f01001a6 <_panic>


		freeFrames = sys_calculate_free_frames();
f0116c81:	e8 62 58 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116c86:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c89:	e8 fe cf fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116c8e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116c91:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c94:	83 ec 08             	sub    $0x8,%esp
f0116c97:	6a 01                	push   $0x1
f0116c99:	50                   	push   %eax
f0116c9a:	e8 3f 3d ff ff       	call   f010a9de <set_program_priority>
f0116c9f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ca2:	e8 e5 cf fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116ca7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116caa:	74 17                	je     f0116cc3 <test_priority_normal_and_lower+0x755>
f0116cac:	83 ec 04             	sub    $0x4,%esp
f0116caf:	68 54 a3 13 f0       	push   $0xf013a354
f0116cb4:	68 57 01 00 00       	push   $0x157
f0116cb9:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116cbe:	e8 e3 94 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116cc3:	e8 20 58 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116cc8:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116ccb:	83 f8 03             	cmp    $0x3,%eax
f0116cce:	74 17                	je     f0116ce7 <test_priority_normal_and_lower+0x779>
f0116cd0:	83 ec 04             	sub    $0x4,%esp
f0116cd3:	68 54 a3 13 f0       	push   $0xf013a354
f0116cd8:	68 58 01 00 00       	push   $0x158
f0116cdd:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116ce2:	e8 bf 94 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116ce7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116cea:	8b 40 74             	mov    0x74(%eax),%eax
f0116ced:	83 f8 02             	cmp    $0x2,%eax
f0116cf0:	75 16                	jne    f0116d08 <test_priority_normal_and_lower+0x79a>
f0116cf2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116cf5:	8b 40 74             	mov    0x74(%eax),%eax
f0116cf8:	83 f8 07             	cmp    $0x7,%eax
f0116cfb:	75 0b                	jne    f0116d08 <test_priority_normal_and_lower+0x79a>
f0116cfd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d00:	8b 40 74             	mov    0x74(%eax),%eax
f0116d03:	83 f8 05             	cmp    $0x5,%eax
f0116d06:	74 17                	je     f0116d1f <test_priority_normal_and_lower+0x7b1>
			panic("The programs' working set size should be doubled if full\n");
f0116d08:	83 ec 04             	sub    $0x4,%esp
f0116d0b:	68 88 a4 13 f0       	push   $0xf013a488
f0116d10:	68 5b 01 00 00       	push   $0x15b
f0116d15:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116d1a:	e8 87 94 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 2; i++)
f0116d1f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116d26:	eb 7f                	jmp    f0116da7 <test_priority_normal_and_lower+0x839>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116d28:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116d2b:	83 c0 08             	add    $0x8,%eax
f0116d2e:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116d35:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116d38:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116d3b:	89 d0                	mov    %edx,%eax
f0116d3d:	01 c0                	add    %eax,%eax
f0116d3f:	01 d0                	add    %edx,%eax
f0116d41:	c1 e0 03             	shl    $0x3,%eax
f0116d44:	01 d8                	add    %ebx,%eax
f0116d46:	83 c0 78             	add    $0x78,%eax
f0116d49:	8b 00                	mov    (%eax),%eax
f0116d4b:	39 c1                	cmp    %eax,%ecx
f0116d4d:	74 17                	je     f0116d66 <test_priority_normal_and_lower+0x7f8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116d4f:	83 ec 04             	sub    $0x4,%esp
f0116d52:	68 d8 a6 13 f0       	push   $0xf013a6d8
f0116d57:	68 60 01 00 00       	push   $0x160
f0116d5c:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116d61:	e8 40 94 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116d66:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116d69:	83 c0 08             	add    $0x8,%eax
f0116d6c:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116d73:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116d76:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116d79:	89 d0                	mov    %edx,%eax
f0116d7b:	01 c0                	add    %eax,%eax
f0116d7d:	01 d0                	add    %edx,%eax
f0116d7f:	c1 e0 03             	shl    $0x3,%eax
f0116d82:	01 d8                	add    %ebx,%eax
f0116d84:	83 e8 80             	sub    $0xffffff80,%eax
f0116d87:	8b 00                	mov    (%eax),%eax
f0116d89:	39 c1                	cmp    %eax,%ecx
f0116d8b:	74 17                	je     f0116da4 <test_priority_normal_and_lower+0x836>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116d8d:	83 ec 04             	sub    $0x4,%esp
f0116d90:	68 d8 a6 13 f0       	push   $0xf013a6d8
f0116d95:	68 63 01 00 00       	push   $0x163
f0116d9a:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116d9f:	e8 02 94 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0116da4:	ff 45 cc             	incl   -0x34(%ebp)
f0116da7:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116dab:	0f 8e 77 ff ff ff    	jle    f0116d28 <test_priority_normal_and_lower+0x7ba>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116db1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0116db8:	eb 7f                	jmp    f0116e39 <test_priority_normal_and_lower+0x8cb>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116dba:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116dbd:	83 c0 03             	add    $0x3,%eax
f0116dc0:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116dc7:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116dca:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116dcd:	89 d0                	mov    %edx,%eax
f0116dcf:	01 c0                	add    %eax,%eax
f0116dd1:	01 d0                	add    %edx,%eax
f0116dd3:	c1 e0 03             	shl    $0x3,%eax
f0116dd6:	01 d8                	add    %ebx,%eax
f0116dd8:	83 c0 78             	add    $0x78,%eax
f0116ddb:	8b 00                	mov    (%eax),%eax
f0116ddd:	39 c1                	cmp    %eax,%ecx
f0116ddf:	74 17                	je     f0116df8 <test_priority_normal_and_lower+0x88a>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0116de1:	ff 75 c8             	pushl  -0x38(%ebp)
f0116de4:	68 44 a7 13 f0       	push   $0xf013a744
f0116de9:	68 69 01 00 00       	push   $0x169
f0116dee:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116df3:	e8 ae 93 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116df8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116dfb:	83 c0 03             	add    $0x3,%eax
f0116dfe:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116e05:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116e08:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116e0b:	89 d0                	mov    %edx,%eax
f0116e0d:	01 c0                	add    %eax,%eax
f0116e0f:	01 d0                	add    %edx,%eax
f0116e11:	c1 e0 03             	shl    $0x3,%eax
f0116e14:	01 d8                	add    %ebx,%eax
f0116e16:	83 e8 80             	sub    $0xffffff80,%eax
f0116e19:	8b 00                	mov    (%eax),%eax
f0116e1b:	39 c1                	cmp    %eax,%ecx
f0116e1d:	74 17                	je     f0116e36 <test_priority_normal_and_lower+0x8c8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116e1f:	83 ec 04             	sub    $0x4,%esp
f0116e22:	68 d8 a6 13 f0       	push   $0xf013a6d8
f0116e27:	68 6c 01 00 00       	push   $0x16c
f0116e2c:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116e31:	e8 70 93 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116e36:	ff 45 c8             	incl   -0x38(%ebp)
f0116e39:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116e3d:	0f 8e 77 ff ff ff    	jle    f0116dba <test_priority_normal_and_lower+0x84c>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116e43:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0116e4a:	eb 7f                	jmp    f0116ecb <test_priority_normal_and_lower+0x95d>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116e4c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116e4f:	83 c0 05             	add    $0x5,%eax
f0116e52:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116e59:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116e5c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116e5f:	89 d0                	mov    %edx,%eax
f0116e61:	01 c0                	add    %eax,%eax
f0116e63:	01 d0                	add    %edx,%eax
f0116e65:	c1 e0 03             	shl    $0x3,%eax
f0116e68:	01 d8                	add    %ebx,%eax
f0116e6a:	83 c0 78             	add    $0x78,%eax
f0116e6d:	8b 00                	mov    (%eax),%eax
f0116e6f:	39 c1                	cmp    %eax,%ecx
f0116e71:	74 17                	je     f0116e8a <test_priority_normal_and_lower+0x91c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116e73:	83 ec 04             	sub    $0x4,%esp
f0116e76:	68 d8 a6 13 f0       	push   $0xf013a6d8
f0116e7b:	68 72 01 00 00       	push   $0x172
f0116e80:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116e85:	e8 1c 93 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116e8a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116e8d:	83 c0 05             	add    $0x5,%eax
f0116e90:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116e97:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116e9a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116e9d:	89 d0                	mov    %edx,%eax
f0116e9f:	01 c0                	add    %eax,%eax
f0116ea1:	01 d0                	add    %edx,%eax
f0116ea3:	c1 e0 03             	shl    $0x3,%eax
f0116ea6:	01 d8                	add    %ebx,%eax
f0116ea8:	83 e8 80             	sub    $0xffffff80,%eax
f0116eab:	8b 00                	mov    (%eax),%eax
f0116ead:	39 c1                	cmp    %eax,%ecx
f0116eaf:	74 17                	je     f0116ec8 <test_priority_normal_and_lower+0x95a>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116eb1:	83 ec 04             	sub    $0x4,%esp
f0116eb4:	68 d8 a6 13 f0       	push   $0xf013a6d8
f0116eb9:	68 75 01 00 00       	push   $0x175
f0116ebe:	68 ed a2 13 f0       	push   $0xf013a2ed
f0116ec3:	e8 de 92 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116ec8:	ff 45 c4             	incl   -0x3c(%ebp)
f0116ecb:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0116ecf:	0f 8e 77 ff ff ff    	jle    f0116e4c <test_priority_normal_and_lower+0x8de>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0116ed5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ed8:	83 ec 08             	sub    $0x8,%esp
f0116edb:	6a 05                	push   $0x5
f0116edd:	50                   	push   %eax
f0116ede:	e8 fb 3a ff ff       	call   f010a9de <set_program_priority>
f0116ee3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0116ee6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ee9:	83 ec 08             	sub    $0x8,%esp
f0116eec:	6a 05                	push   $0x5
f0116eee:	50                   	push   %eax
f0116eef:	e8 ea 3a ff ff       	call   f010a9de <set_program_priority>
f0116ef4:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116ef7:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0116efe:	75 6e 61 
f0116f01:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0116f08:	6c 00 00 
f0116f0b:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0116f11:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116f16:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f1b:	89 d7                	mov    %edx,%edi
f0116f1d:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116f1f:	83 ec 0c             	sub    $0xc,%esp
f0116f22:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0116f28:	50                   	push   %eax
f0116f29:	e8 61 9d fe ff       	call   f0100c8f <execute_command>
f0116f2e:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0116f31:	eb 10                	jmp    f0116f43 <test_priority_normal_and_lower+0x9d5>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116f33:	83 ec 0c             	sub    $0xc,%esp
f0116f36:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0116f3b:	e8 ed 9c fe ff       	call   f0100c2d <cprintf>
f0116f40:	83 c4 10             	add    $0x10,%esp
	}
}
f0116f43:	90                   	nop
f0116f44:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116f47:	5b                   	pop    %ebx
f0116f48:	5e                   	pop    %esi
f0116f49:	5f                   	pop    %edi
f0116f4a:	5d                   	pop    %ebp
f0116f4b:	c3                   	ret    

f0116f4c <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0116f4c:	55                   	push   %ebp
f0116f4d:	89 e5                	mov    %esp,%ebp
f0116f4f:	a1 98 1e 6c f0       	mov    0xf06c1e98,%eax
f0116f54:	83 f8 03             	cmp    $0x3,%eax
f0116f57:	75 04                	jne    f0116f5d <isKHeapPlacementStrategyNEXTFIT+0x11>
f0116f59:	b0 01                	mov    $0x1,%al
f0116f5b:	eb 02                	jmp    f0116f5f <isKHeapPlacementStrategyNEXTFIT+0x13>
f0116f5d:	b0 00                	mov    $0x0,%al
f0116f5f:	5d                   	pop    %ebp
f0116f60:	c3                   	ret    

f0116f61 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0116f61:	55                   	push   %ebp
f0116f62:	89 e5                	mov    %esp,%ebp
f0116f64:	57                   	push   %edi
f0116f65:	53                   	push   %ebx
f0116f66:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0116f6c:	83 ec 0c             	sub    $0xc,%esp
f0116f6f:	68 b8 a8 13 f0       	push   $0xf013a8b8
f0116f74:	e8 b4 9c fe ff       	call   f0100c2d <cprintf>
f0116f79:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0116f7c:	83 ec 0c             	sub    $0xc,%esp
f0116f7f:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116f84:	e8 a4 9c fe ff       	call   f0100c2d <cprintf>
f0116f89:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0116f8c:	83 ec 0c             	sub    $0xc,%esp
f0116f8f:	68 b8 a8 13 f0       	push   $0xf013a8b8
f0116f94:	e8 94 9c fe ff       	call   f0100c2d <cprintf>
f0116f99:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0116f9c:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0116fa0:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0116fa4:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0116faa:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0116fb0:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0116fb7:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0116fbe:	e8 25 55 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116fc3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0116fc6:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0116fcc:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116fd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0116fd6:	89 d7                	mov    %edx,%edi
f0116fd8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0116fda:	e8 09 55 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0116fdf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116fe2:	e8 a5 cc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116fe7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0116fea:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0116ff1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116ff4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116ff9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0116ffc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116fff:	ba 00 00 00 00       	mov    $0x0,%edx
f0117004:	f7 75 d4             	divl   -0x2c(%ebp)
f0117007:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011700a:	29 d0                	sub    %edx,%eax
f011700c:	89 c1                	mov    %eax,%ecx
f011700e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117015:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011701a:	0f b6 d0             	movzbl %al,%edx
f011701d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117020:	01 d0                	add    %edx,%eax
f0117022:	48                   	dec    %eax
f0117023:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117026:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117029:	ba 00 00 00 00       	mov    $0x0,%edx
f011702e:	f7 75 cc             	divl   -0x34(%ebp)
f0117031:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117034:	29 d0                	sub    %edx,%eax
f0117036:	01 c1                	add    %eax,%ecx
f0117038:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011703f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0117044:	0f b6 c0             	movzbl %al,%eax
f0117047:	c1 e0 04             	shl    $0x4,%eax
f011704a:	89 c2                	mov    %eax,%edx
f011704c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011704f:	01 d0                	add    %edx,%eax
f0117051:	48                   	dec    %eax
f0117052:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117055:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117058:	ba 00 00 00 00       	mov    $0x0,%edx
f011705d:	f7 75 c4             	divl   -0x3c(%ebp)
f0117060:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117063:	29 d0                	sub    %edx,%eax
f0117065:	01 c8                	add    %ecx,%eax
f0117067:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011706c:	29 c2                	sub    %eax,%edx
f011706e:	89 d0                	mov    %edx,%eax
f0117070:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117073:	83 ec 0c             	sub    $0xc,%esp
f0117076:	ff 75 bc             	pushl  -0x44(%ebp)
f0117079:	e8 46 05 ff ff       	call   f01075c4 <kmalloc>
f011707e:	83 c4 10             	add    $0x10,%esp
f0117081:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117087:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011708d:	85 c0                	test   %eax,%eax
f011708f:	74 14                	je     f01170a5 <test_kmalloc+0x144>
f0117091:	83 ec 04             	sub    $0x4,%esp
f0117094:	68 44 a9 13 f0       	push   $0xf013a944
f0117099:	6a 40                	push   $0x40
f011709b:	68 76 a9 13 f0       	push   $0xf013a976
f01170a0:	e8 01 91 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01170a5:	e8 e2 cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01170aa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01170ad:	74 14                	je     f01170c3 <test_kmalloc+0x162>
f01170af:	83 ec 04             	sub    $0x4,%esp
f01170b2:	68 90 a9 13 f0       	push   $0xf013a990
f01170b7:	6a 41                	push   $0x41
f01170b9:	68 76 a9 13 f0       	push   $0xf013a976
f01170be:	e8 e3 90 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01170c3:	e8 20 54 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01170c8:	89 c2                	mov    %eax,%edx
f01170ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01170cd:	39 c2                	cmp    %eax,%edx
f01170cf:	74 14                	je     f01170e5 <test_kmalloc+0x184>
f01170d1:	83 ec 04             	sub    $0x4,%esp
f01170d4:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01170d9:	6a 42                	push   $0x42
f01170db:	68 76 a9 13 f0       	push   $0xf013a976
f01170e0:	e8 c1 90 fe ff       	call   f01001a6 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f01170e5:	83 ec 0c             	sub    $0xc,%esp
f01170e8:	68 38 aa 13 f0       	push   $0xf013aa38
f01170ed:	e8 3b 9b fe ff       	call   f0100c2d <cprintf>
f01170f2:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01170f5:	e8 ee 53 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01170fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170fd:	e8 8a cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117102:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117105:	83 ec 0c             	sub    $0xc,%esp
f0117108:	68 00 fc 1f 00       	push   $0x1ffc00
f011710d:	e8 b2 04 ff ff       	call   f01075c4 <kmalloc>
f0117112:	83 c4 10             	add    $0x10,%esp
f0117115:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011711b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117121:	89 c1                	mov    %eax,%ecx
f0117123:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011712a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011712d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117132:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117135:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117138:	ba 00 00 00 00       	mov    $0x0,%edx
f011713d:	f7 75 b8             	divl   -0x48(%ebp)
f0117140:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117143:	29 d0                	sub    %edx,%eax
f0117145:	89 c3                	mov    %eax,%ebx
f0117147:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011714e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0117153:	0f b6 d0             	movzbl %al,%edx
f0117156:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117159:	01 d0                	add    %edx,%eax
f011715b:	48                   	dec    %eax
f011715c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011715f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117162:	ba 00 00 00 00       	mov    $0x0,%edx
f0117167:	f7 75 b0             	divl   -0x50(%ebp)
f011716a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011716d:	29 d0                	sub    %edx,%eax
f011716f:	01 c3                	add    %eax,%ebx
f0117171:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117178:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011717d:	0f b6 c0             	movzbl %al,%eax
f0117180:	c1 e0 04             	shl    $0x4,%eax
f0117183:	89 c2                	mov    %eax,%edx
f0117185:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117188:	01 d0                	add    %edx,%eax
f011718a:	48                   	dec    %eax
f011718b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011718e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117191:	ba 00 00 00 00       	mov    $0x0,%edx
f0117196:	f7 75 a8             	divl   -0x58(%ebp)
f0117199:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011719c:	29 d0                	sub    %edx,%eax
f011719e:	01 d8                	add    %ebx,%eax
f01171a0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01171a5:	39 c1                	cmp    %eax,%ecx
f01171a7:	74 14                	je     f01171bd <test_kmalloc+0x25c>
f01171a9:	83 ec 04             	sub    $0x4,%esp
f01171ac:	68 5c aa 13 f0       	push   $0xf013aa5c
f01171b1:	6a 49                	push   $0x49
f01171b3:	68 76 a9 13 f0       	push   $0xf013a976
f01171b8:	e8 e9 8f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01171bd:	e8 ca ca fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01171c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01171c5:	74 14                	je     f01171db <test_kmalloc+0x27a>
f01171c7:	83 ec 04             	sub    $0x4,%esp
f01171ca:	68 90 a9 13 f0       	push   $0xf013a990
f01171cf:	6a 4a                	push   $0x4a
f01171d1:	68 76 a9 13 f0       	push   $0xf013a976
f01171d6:	e8 cb 8f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01171db:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01171de:	e8 05 53 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01171e3:	29 c3                	sub    %eax,%ebx
f01171e5:	89 d8                	mov    %ebx,%eax
f01171e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01171ec:	74 14                	je     f0117202 <test_kmalloc+0x2a1>
f01171ee:	83 ec 04             	sub    $0x4,%esp
f01171f1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01171f6:	6a 4b                	push   $0x4b
f01171f8:	68 76 a9 13 f0       	push   $0xf013a976
f01171fd:	e8 a4 8f fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117202:	e8 e1 52 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117207:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011720a:	e8 7d ca fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011720f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117212:	83 ec 0c             	sub    $0xc,%esp
f0117215:	68 00 fc 1f 00       	push   $0x1ffc00
f011721a:	e8 a5 03 ff ff       	call   f01075c4 <kmalloc>
f011721f:	83 c4 10             	add    $0x10,%esp
f0117222:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117228:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011722e:	89 c1                	mov    %eax,%ecx
f0117230:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117237:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011723a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011723f:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117242:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117245:	ba 00 00 00 00       	mov    $0x0,%edx
f011724a:	f7 75 a0             	divl   -0x60(%ebp)
f011724d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117250:	29 d0                	sub    %edx,%eax
f0117252:	89 c3                	mov    %eax,%ebx
f0117254:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011725b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0117260:	0f b6 d0             	movzbl %al,%edx
f0117263:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117266:	01 d0                	add    %edx,%eax
f0117268:	48                   	dec    %eax
f0117269:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011726c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011726f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117274:	f7 75 98             	divl   -0x68(%ebp)
f0117277:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011727a:	29 d0                	sub    %edx,%eax
f011727c:	01 c3                	add    %eax,%ebx
f011727e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117285:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011728a:	0f b6 c0             	movzbl %al,%eax
f011728d:	c1 e0 04             	shl    $0x4,%eax
f0117290:	89 c2                	mov    %eax,%edx
f0117292:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117295:	01 d0                	add    %edx,%eax
f0117297:	48                   	dec    %eax
f0117298:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011729b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011729e:	ba 00 00 00 00       	mov    $0x0,%edx
f01172a3:	f7 75 90             	divl   -0x70(%ebp)
f01172a6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01172a9:	29 d0                	sub    %edx,%eax
f01172ab:	01 d8                	add    %ebx,%eax
f01172ad:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01172b2:	39 c1                	cmp    %eax,%ecx
f01172b4:	74 14                	je     f01172ca <test_kmalloc+0x369>
f01172b6:	83 ec 04             	sub    $0x4,%esp
f01172b9:	68 5c aa 13 f0       	push   $0xf013aa5c
f01172be:	6a 51                	push   $0x51
f01172c0:	68 76 a9 13 f0       	push   $0xf013a976
f01172c5:	e8 dc 8e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01172ca:	e8 bd c9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01172cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01172d2:	74 14                	je     f01172e8 <test_kmalloc+0x387>
f01172d4:	83 ec 04             	sub    $0x4,%esp
f01172d7:	68 90 a9 13 f0       	push   $0xf013a990
f01172dc:	6a 52                	push   $0x52
f01172de:	68 76 a9 13 f0       	push   $0xf013a976
f01172e3:	e8 be 8e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01172e8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01172eb:	e8 f8 51 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01172f0:	29 c3                	sub    %eax,%ebx
f01172f2:	89 d8                	mov    %ebx,%eax
f01172f4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01172f9:	74 14                	je     f011730f <test_kmalloc+0x3ae>
f01172fb:	83 ec 04             	sub    $0x4,%esp
f01172fe:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0117303:	6a 53                	push   $0x53
f0117305:	68 76 a9 13 f0       	push   $0xf013a976
f011730a:	e8 97 8e fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011730f:	e8 d4 51 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117314:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117317:	e8 70 c9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011731c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011731f:	83 ec 0c             	sub    $0xc,%esp
f0117322:	68 00 08 00 00       	push   $0x800
f0117327:	e8 98 02 ff ff       	call   f01075c4 <kmalloc>
f011732c:	83 c4 10             	add    $0x10,%esp
f011732f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117335:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011733b:	89 c1                	mov    %eax,%ecx
f011733d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117344:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117347:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011734c:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011734f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117352:	ba 00 00 00 00       	mov    $0x0,%edx
f0117357:	f7 75 88             	divl   -0x78(%ebp)
f011735a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011735d:	29 d0                	sub    %edx,%eax
f011735f:	89 c3                	mov    %eax,%ebx
f0117361:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117368:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011736d:	0f b6 d0             	movzbl %al,%edx
f0117370:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117373:	01 d0                	add    %edx,%eax
f0117375:	48                   	dec    %eax
f0117376:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011737c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117382:	ba 00 00 00 00       	mov    $0x0,%edx
f0117387:	f7 75 80             	divl   -0x80(%ebp)
f011738a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117390:	29 d0                	sub    %edx,%eax
f0117392:	01 c3                	add    %eax,%ebx
f0117394:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011739b:	10 00 00 
f011739e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01173a3:	0f b6 c0             	movzbl %al,%eax
f01173a6:	c1 e0 04             	shl    $0x4,%eax
f01173a9:	89 c2                	mov    %eax,%edx
f01173ab:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01173b1:	01 d0                	add    %edx,%eax
f01173b3:	48                   	dec    %eax
f01173b4:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01173ba:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01173c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01173c5:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01173cb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01173d1:	29 d0                	sub    %edx,%eax
f01173d3:	01 d8                	add    %ebx,%eax
f01173d5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01173da:	39 c1                	cmp    %eax,%ecx
f01173dc:	74 14                	je     f01173f2 <test_kmalloc+0x491>
f01173de:	83 ec 04             	sub    $0x4,%esp
f01173e1:	68 5c aa 13 f0       	push   $0xf013aa5c
f01173e6:	6a 59                	push   $0x59
f01173e8:	68 76 a9 13 f0       	push   $0xf013a976
f01173ed:	e8 b4 8d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01173f2:	e8 95 c8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01173f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01173fa:	74 14                	je     f0117410 <test_kmalloc+0x4af>
f01173fc:	83 ec 04             	sub    $0x4,%esp
f01173ff:	68 90 a9 13 f0       	push   $0xf013a990
f0117404:	6a 5a                	push   $0x5a
f0117406:	68 76 a9 13 f0       	push   $0xf013a976
f011740b:	e8 96 8d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117410:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117413:	e8 d0 50 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117418:	29 c3                	sub    %eax,%ebx
f011741a:	89 d8                	mov    %ebx,%eax
f011741c:	83 f8 01             	cmp    $0x1,%eax
f011741f:	74 14                	je     f0117435 <test_kmalloc+0x4d4>
f0117421:	83 ec 04             	sub    $0x4,%esp
f0117424:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0117429:	6a 5b                	push   $0x5b
f011742b:	68 76 a9 13 f0       	push   $0xf013a976
f0117430:	e8 71 8d fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117435:	e8 ae 50 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011743a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011743d:	e8 4a c8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117442:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117445:	83 ec 0c             	sub    $0xc,%esp
f0117448:	68 00 08 00 00       	push   $0x800
f011744d:	e8 72 01 ff ff       	call   f01075c4 <kmalloc>
f0117452:	83 c4 10             	add    $0x10,%esp
f0117455:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011745b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117461:	89 c1                	mov    %eax,%ecx
f0117463:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011746a:	10 00 00 
f011746d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117473:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117478:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011747e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117484:	ba 00 00 00 00       	mov    $0x0,%edx
f0117489:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011748f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117495:	29 d0                	sub    %edx,%eax
f0117497:	89 c3                	mov    %eax,%ebx
f0117499:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01174a0:	10 00 00 
f01174a3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01174a8:	0f b6 d0             	movzbl %al,%edx
f01174ab:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01174b1:	01 d0                	add    %edx,%eax
f01174b3:	48                   	dec    %eax
f01174b4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01174ba:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01174c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01174c5:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01174cb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01174d1:	29 d0                	sub    %edx,%eax
f01174d3:	01 c3                	add    %eax,%ebx
f01174d5:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01174dc:	10 00 00 
f01174df:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01174e4:	0f b6 c0             	movzbl %al,%eax
f01174e7:	c1 e0 04             	shl    $0x4,%eax
f01174ea:	89 c2                	mov    %eax,%edx
f01174ec:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01174f2:	01 d0                	add    %edx,%eax
f01174f4:	48                   	dec    %eax
f01174f5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01174fb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117501:	ba 00 00 00 00       	mov    $0x0,%edx
f0117506:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011750c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117512:	29 d0                	sub    %edx,%eax
f0117514:	01 d8                	add    %ebx,%eax
f0117516:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011751b:	39 c1                	cmp    %eax,%ecx
f011751d:	74 14                	je     f0117533 <test_kmalloc+0x5d2>
f011751f:	83 ec 04             	sub    $0x4,%esp
f0117522:	68 5c aa 13 f0       	push   $0xf013aa5c
f0117527:	6a 61                	push   $0x61
f0117529:	68 76 a9 13 f0       	push   $0xf013a976
f011752e:	e8 73 8c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117533:	e8 54 c7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117538:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011753b:	74 14                	je     f0117551 <test_kmalloc+0x5f0>
f011753d:	83 ec 04             	sub    $0x4,%esp
f0117540:	68 90 a9 13 f0       	push   $0xf013a990
f0117545:	6a 62                	push   $0x62
f0117547:	68 76 a9 13 f0       	push   $0xf013a976
f011754c:	e8 55 8c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117551:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117554:	e8 8f 4f ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117559:	29 c3                	sub    %eax,%ebx
f011755b:	89 d8                	mov    %ebx,%eax
f011755d:	83 f8 01             	cmp    $0x1,%eax
f0117560:	74 14                	je     f0117576 <test_kmalloc+0x615>
f0117562:	83 ec 04             	sub    $0x4,%esp
f0117565:	68 f8 a9 13 f0       	push   $0xf013a9f8
f011756a:	6a 63                	push   $0x63
f011756c:	68 76 a9 13 f0       	push   $0xf013a976
f0117571:	e8 30 8c fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117576:	e8 6d 4f ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011757b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011757e:	e8 09 c7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117583:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117586:	83 ec 0c             	sub    $0xc,%esp
f0117589:	68 00 1c 00 00       	push   $0x1c00
f011758e:	e8 31 00 ff ff       	call   f01075c4 <kmalloc>
f0117593:	83 c4 10             	add    $0x10,%esp
f0117596:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011759c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01175a2:	89 c1                	mov    %eax,%ecx
f01175a4:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01175ab:	10 00 00 
f01175ae:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01175b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01175b9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01175bf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01175c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01175ca:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01175d0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01175d6:	29 d0                	sub    %edx,%eax
f01175d8:	89 c3                	mov    %eax,%ebx
f01175da:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01175e1:	10 00 00 
f01175e4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01175e9:	0f b6 d0             	movzbl %al,%edx
f01175ec:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01175f2:	01 d0                	add    %edx,%eax
f01175f4:	48                   	dec    %eax
f01175f5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01175fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117601:	ba 00 00 00 00       	mov    $0x0,%edx
f0117606:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011760c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117612:	29 d0                	sub    %edx,%eax
f0117614:	01 c3                	add    %eax,%ebx
f0117616:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011761d:	10 00 00 
f0117620:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0117625:	0f b6 c0             	movzbl %al,%eax
f0117628:	c1 e0 04             	shl    $0x4,%eax
f011762b:	89 c2                	mov    %eax,%edx
f011762d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117633:	01 d0                	add    %edx,%eax
f0117635:	48                   	dec    %eax
f0117636:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011763c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117642:	ba 00 00 00 00       	mov    $0x0,%edx
f0117647:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011764d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117653:	29 d0                	sub    %edx,%eax
f0117655:	01 d8                	add    %ebx,%eax
f0117657:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011765c:	39 c1                	cmp    %eax,%ecx
f011765e:	74 14                	je     f0117674 <test_kmalloc+0x713>
f0117660:	83 ec 04             	sub    $0x4,%esp
f0117663:	68 5c aa 13 f0       	push   $0xf013aa5c
f0117668:	6a 69                	push   $0x69
f011766a:	68 76 a9 13 f0       	push   $0xf013a976
f011766f:	e8 32 8b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117674:	e8 13 c6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117679:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011767c:	74 14                	je     f0117692 <test_kmalloc+0x731>
f011767e:	83 ec 04             	sub    $0x4,%esp
f0117681:	68 90 a9 13 f0       	push   $0xf013a990
f0117686:	6a 6a                	push   $0x6a
f0117688:	68 76 a9 13 f0       	push   $0xf013a976
f011768d:	e8 14 8b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117692:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117695:	e8 4e 4e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011769a:	29 c3                	sub    %eax,%ebx
f011769c:	89 d8                	mov    %ebx,%eax
f011769e:	83 f8 02             	cmp    $0x2,%eax
f01176a1:	74 14                	je     f01176b7 <test_kmalloc+0x756>
f01176a3:	83 ec 04             	sub    $0x4,%esp
f01176a6:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01176ab:	6a 6b                	push   $0x6b
f01176ad:	68 76 a9 13 f0       	push   $0xf013a976
f01176b2:	e8 ef 8a fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01176b7:	e8 2c 4e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01176bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176bf:	e8 c8 c5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01176c4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01176c7:	83 ec 0c             	sub    $0xc,%esp
f01176ca:	68 00 fc 2f 00       	push   $0x2ffc00
f01176cf:	e8 f0 fe fe ff       	call   f01075c4 <kmalloc>
f01176d4:	83 c4 10             	add    $0x10,%esp
f01176d7:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01176dd:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01176e3:	89 c1                	mov    %eax,%ecx
f01176e5:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01176ec:	10 00 00 
f01176ef:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01176f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01176fa:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117700:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117706:	ba 00 00 00 00       	mov    $0x0,%edx
f011770b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117711:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117717:	29 d0                	sub    %edx,%eax
f0117719:	89 c3                	mov    %eax,%ebx
f011771b:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0117722:	10 00 00 
f0117725:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011772a:	0f b6 d0             	movzbl %al,%edx
f011772d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117733:	01 d0                	add    %edx,%eax
f0117735:	48                   	dec    %eax
f0117736:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011773c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117742:	ba 00 00 00 00       	mov    $0x0,%edx
f0117747:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011774d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117753:	29 d0                	sub    %edx,%eax
f0117755:	01 c3                	add    %eax,%ebx
f0117757:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011775e:	10 00 00 
f0117761:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0117766:	0f b6 c0             	movzbl %al,%eax
f0117769:	c1 e0 04             	shl    $0x4,%eax
f011776c:	89 c2                	mov    %eax,%edx
f011776e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117774:	01 d0                	add    %edx,%eax
f0117776:	48                   	dec    %eax
f0117777:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011777d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117783:	ba 00 00 00 00       	mov    $0x0,%edx
f0117788:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011778e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117794:	29 d0                	sub    %edx,%eax
f0117796:	01 d8                	add    %ebx,%eax
f0117798:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011779d:	39 c1                	cmp    %eax,%ecx
f011779f:	74 14                	je     f01177b5 <test_kmalloc+0x854>
f01177a1:	83 ec 04             	sub    $0x4,%esp
f01177a4:	68 5c aa 13 f0       	push   $0xf013aa5c
f01177a9:	6a 71                	push   $0x71
f01177ab:	68 76 a9 13 f0       	push   $0xf013a976
f01177b0:	e8 f1 89 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01177b5:	e8 d2 c4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01177ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01177bd:	74 14                	je     f01177d3 <test_kmalloc+0x872>
f01177bf:	83 ec 04             	sub    $0x4,%esp
f01177c2:	68 90 a9 13 f0       	push   $0xf013a990
f01177c7:	6a 72                	push   $0x72
f01177c9:	68 76 a9 13 f0       	push   $0xf013a976
f01177ce:	e8 d3 89 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01177d3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01177d6:	e8 0d 4d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01177db:	29 c3                	sub    %eax,%ebx
f01177dd:	89 d8                	mov    %ebx,%eax
f01177df:	3d 00 03 00 00       	cmp    $0x300,%eax
f01177e4:	74 14                	je     f01177fa <test_kmalloc+0x899>
f01177e6:	83 ec 04             	sub    $0x4,%esp
f01177e9:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01177ee:	6a 73                	push   $0x73
f01177f0:	68 76 a9 13 f0       	push   $0xf013a976
f01177f5:	e8 ac 89 fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01177fa:	e8 e9 4c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01177ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117802:	e8 85 c4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117807:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011780a:	83 ec 0c             	sub    $0xc,%esp
f011780d:	68 00 fc 5f 00       	push   $0x5ffc00
f0117812:	e8 ad fd fe ff       	call   f01075c4 <kmalloc>
f0117817:	83 c4 10             	add    $0x10,%esp
f011781a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117820:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117826:	89 c1                	mov    %eax,%ecx
f0117828:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011782f:	10 00 00 
f0117832:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117838:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011783d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117843:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117849:	ba 00 00 00 00       	mov    $0x0,%edx
f011784e:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117854:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011785a:	29 d0                	sub    %edx,%eax
f011785c:	89 c3                	mov    %eax,%ebx
f011785e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0117865:	10 00 00 
f0117868:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011786d:	0f b6 d0             	movzbl %al,%edx
f0117870:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117876:	01 d0                	add    %edx,%eax
f0117878:	48                   	dec    %eax
f0117879:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011787f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117885:	ba 00 00 00 00       	mov    $0x0,%edx
f011788a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117890:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117896:	29 d0                	sub    %edx,%eax
f0117898:	01 c3                	add    %eax,%ebx
f011789a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01178a1:	10 00 00 
f01178a4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01178a9:	0f b6 c0             	movzbl %al,%eax
f01178ac:	c1 e0 04             	shl    $0x4,%eax
f01178af:	89 c2                	mov    %eax,%edx
f01178b1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01178b7:	01 d0                	add    %edx,%eax
f01178b9:	48                   	dec    %eax
f01178ba:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01178c0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01178c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01178cb:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01178d1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01178d7:	29 d0                	sub    %edx,%eax
f01178d9:	01 d8                	add    %ebx,%eax
f01178db:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01178e0:	39 c1                	cmp    %eax,%ecx
f01178e2:	74 14                	je     f01178f8 <test_kmalloc+0x997>
f01178e4:	83 ec 04             	sub    $0x4,%esp
f01178e7:	68 5c aa 13 f0       	push   $0xf013aa5c
f01178ec:	6a 79                	push   $0x79
f01178ee:	68 76 a9 13 f0       	push   $0xf013a976
f01178f3:	e8 ae 88 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01178f8:	e8 8f c3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01178fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117900:	74 14                	je     f0117916 <test_kmalloc+0x9b5>
f0117902:	83 ec 04             	sub    $0x4,%esp
f0117905:	68 90 a9 13 f0       	push   $0xf013a990
f011790a:	6a 7a                	push   $0x7a
f011790c:	68 76 a9 13 f0       	push   $0xf013a976
f0117911:	e8 90 88 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117916:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117919:	e8 ca 4b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011791e:	29 c3                	sub    %eax,%ebx
f0117920:	89 d8                	mov    %ebx,%eax
f0117922:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117927:	74 14                	je     f011793d <test_kmalloc+0x9dc>
f0117929:	83 ec 04             	sub    $0x4,%esp
f011792c:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0117931:	6a 7b                	push   $0x7b
f0117933:	68 76 a9 13 f0       	push   $0xf013a976
f0117938:	e8 69 88 fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011793d:	e8 a6 4b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117942:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117945:	e8 42 c3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011794a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011794d:	83 ec 0c             	sub    $0xc,%esp
f0117950:	68 00 38 00 00       	push   $0x3800
f0117955:	e8 6a fc fe ff       	call   f01075c4 <kmalloc>
f011795a:	83 c4 10             	add    $0x10,%esp
f011795d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117963:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117969:	89 c1                	mov    %eax,%ecx
f011796b:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0117972:	10 00 00 
f0117975:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011797b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117980:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0117986:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011798c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117991:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0117997:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011799d:	29 d0                	sub    %edx,%eax
f011799f:	89 c3                	mov    %eax,%ebx
f01179a1:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01179a8:	10 00 00 
f01179ab:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01179b0:	0f b6 d0             	movzbl %al,%edx
f01179b3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01179b9:	01 d0                	add    %edx,%eax
f01179bb:	48                   	dec    %eax
f01179bc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01179c2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01179c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01179cd:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01179d3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01179d9:	29 d0                	sub    %edx,%eax
f01179db:	01 c3                	add    %eax,%ebx
f01179dd:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01179e4:	10 00 00 
f01179e7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01179ec:	0f b6 c0             	movzbl %al,%eax
f01179ef:	c1 e0 04             	shl    $0x4,%eax
f01179f2:	89 c2                	mov    %eax,%edx
f01179f4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01179fa:	01 d0                	add    %edx,%eax
f01179fc:	48                   	dec    %eax
f01179fd:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0117a03:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117a09:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a0e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0117a14:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117a1a:	29 d0                	sub    %edx,%eax
f0117a1c:	01 d8                	add    %ebx,%eax
f0117a1e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117a23:	39 c1                	cmp    %eax,%ecx
f0117a25:	74 17                	je     f0117a3e <test_kmalloc+0xadd>
f0117a27:	83 ec 04             	sub    $0x4,%esp
f0117a2a:	68 5c aa 13 f0       	push   $0xf013aa5c
f0117a2f:	68 81 00 00 00       	push   $0x81
f0117a34:	68 76 a9 13 f0       	push   $0xf013a976
f0117a39:	e8 68 87 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117a3e:	e8 49 c2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117a43:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117a46:	74 17                	je     f0117a5f <test_kmalloc+0xafe>
f0117a48:	83 ec 04             	sub    $0x4,%esp
f0117a4b:	68 90 a9 13 f0       	push   $0xf013a990
f0117a50:	68 82 00 00 00       	push   $0x82
f0117a55:	68 76 a9 13 f0       	push   $0xf013a976
f0117a5a:	e8 47 87 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117a5f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117a62:	e8 81 4a ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117a67:	29 c3                	sub    %eax,%ebx
f0117a69:	89 d8                	mov    %ebx,%eax
f0117a6b:	83 f8 04             	cmp    $0x4,%eax
f0117a6e:	74 17                	je     f0117a87 <test_kmalloc+0xb26>
f0117a70:	83 ec 04             	sub    $0x4,%esp
f0117a73:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0117a78:	68 83 00 00 00       	push   $0x83
f0117a7d:	68 76 a9 13 f0       	push   $0xf013a976
f0117a82:	e8 1f 87 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b50%");
f0117a87:	83 ec 0c             	sub    $0xc,%esp
f0117a8a:	68 c2 aa 13 f0       	push   $0xf013aac2
f0117a8f:	e8 99 91 fe ff       	call   f0100c2d <cprintf>
f0117a94:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0117a97:	e8 4c 4a ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117a9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117a9f:	e8 e8 c1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0117aa7:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117aae:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0117ab1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117ab7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0117abd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117ac3:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117ac6:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0117ac8:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117ace:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117ad4:	01 c2                	add    %eax,%edx
f0117ad6:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117ad9:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0117adb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117ae1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0117ae7:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0117aee:	fd 0f 00 
			shortArr[0] = minShort;
f0117af1:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0117af7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117afa:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0117afd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117b03:	01 c0                	add    %eax,%eax
f0117b05:	89 c2                	mov    %eax,%edx
f0117b07:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117b0d:	01 c2                	add    %eax,%edx
f0117b0f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117b13:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0117b16:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117b1c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0117b22:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0117b29:	01 00 00 
			intArr[0] = minInt;
f0117b2c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117b32:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117b35:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117b37:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117b3d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117b44:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117b4a:	01 c2                	add    %eax,%edx
f0117b4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117b4f:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117b51:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117b57:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117b5d:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0117b64:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117b67:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117b6d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117b70:	88 10                	mov    %dl,(%eax)
f0117b72:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117b7b:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117b7f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117b85:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117b88:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117b8b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117b91:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117b98:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117b9e:	01 c2                	add    %eax,%edx
f0117ba0:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117ba3:	88 02                	mov    %al,(%edx)
f0117ba5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117bab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117bb2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117bb8:	01 c2                	add    %eax,%edx
f0117bba:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117bbe:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117bc2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117bc8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117bcf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117bd5:	01 c2                	add    %eax,%edx
f0117bd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117bda:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0117bdd:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0117be4:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0117be7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117bed:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0117bf3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117bf9:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117bfc:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0117bfe:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117c04:	89 c2                	mov    %eax,%edx
f0117c06:	c1 ea 1f             	shr    $0x1f,%edx
f0117c09:	01 d0                	add    %edx,%eax
f0117c0b:	d1 f8                	sar    %eax
f0117c0d:	89 c2                	mov    %eax,%edx
f0117c0f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117c15:	01 c2                	add    %eax,%edx
f0117c17:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117c1a:	88 c1                	mov    %al,%cl
f0117c1c:	c0 e9 07             	shr    $0x7,%cl
f0117c1f:	01 c8                	add    %ecx,%eax
f0117c21:	d0 f8                	sar    %al
f0117c23:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0117c25:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117c2b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117c31:	01 c2                	add    %eax,%edx
f0117c33:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117c36:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117c38:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117c3e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0117c44:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0117c4b:	1b 00 00 
			shortArr2[0] = minShort;
f0117c4e:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117c54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117c57:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0117c5a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117c60:	01 c0                	add    %eax,%eax
f0117c62:	89 c2                	mov    %eax,%edx
f0117c64:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117c6a:	01 c2                	add    %eax,%edx
f0117c6c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117c70:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117c73:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117c79:	8a 00                	mov    (%eax),%al
f0117c7b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117c7e:	75 15                	jne    f0117c95 <test_kmalloc+0xd34>
f0117c80:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117c86:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117c8c:	01 d0                	add    %edx,%eax
f0117c8e:	8a 00                	mov    (%eax),%al
f0117c90:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117c93:	74 17                	je     f0117cac <test_kmalloc+0xd4b>
f0117c95:	83 ec 04             	sub    $0x4,%esp
f0117c98:	68 cc aa 13 f0       	push   $0xf013aacc
f0117c9d:	68 b2 00 00 00       	push   $0xb2
f0117ca2:	68 76 a9 13 f0       	push   $0xf013a976
f0117ca7:	e8 fa 84 fe ff       	call   f01001a6 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117cac:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117cb2:	66 8b 00             	mov    (%eax),%ax
f0117cb5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117cb9:	75 1b                	jne    f0117cd6 <test_kmalloc+0xd75>
f0117cbb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117cc1:	01 c0                	add    %eax,%eax
f0117cc3:	89 c2                	mov    %eax,%edx
f0117cc5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117ccb:	01 d0                	add    %edx,%eax
f0117ccd:	66 8b 00             	mov    (%eax),%ax
f0117cd0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117cd4:	74 17                	je     f0117ced <test_kmalloc+0xd8c>
f0117cd6:	83 ec 04             	sub    $0x4,%esp
f0117cd9:	68 cc aa 13 f0       	push   $0xf013aacc
f0117cde:	68 b3 00 00 00       	push   $0xb3
f0117ce3:	68 76 a9 13 f0       	push   $0xf013a976
f0117ce8:	e8 b9 84 fe ff       	call   f01001a6 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0117ced:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117cf3:	8b 00                	mov    (%eax),%eax
f0117cf5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117cf8:	75 1c                	jne    f0117d16 <test_kmalloc+0xdb5>
f0117cfa:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117d00:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117d07:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117d0d:	01 d0                	add    %edx,%eax
f0117d0f:	8b 00                	mov    (%eax),%eax
f0117d11:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117d14:	74 17                	je     f0117d2d <test_kmalloc+0xdcc>
f0117d16:	83 ec 04             	sub    $0x4,%esp
f0117d19:	68 cc aa 13 f0       	push   $0xf013aacc
f0117d1e:	68 b4 00 00 00       	push   $0xb4
f0117d23:	68 76 a9 13 f0       	push   $0xf013a976
f0117d28:	e8 79 84 fe ff       	call   f01001a6 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117d2d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d33:	8a 00                	mov    (%eax),%al
f0117d35:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117d38:	75 1c                	jne    f0117d56 <test_kmalloc+0xdf5>
f0117d3a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117d40:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117d47:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d4d:	01 d0                	add    %edx,%eax
f0117d4f:	8a 00                	mov    (%eax),%al
f0117d51:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117d54:	74 17                	je     f0117d6d <test_kmalloc+0xe0c>
f0117d56:	83 ec 04             	sub    $0x4,%esp
f0117d59:	68 cc aa 13 f0       	push   $0xf013aacc
f0117d5e:	68 b6 00 00 00       	push   $0xb6
f0117d63:	68 76 a9 13 f0       	push   $0xf013a976
f0117d68:	e8 39 84 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117d6d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d73:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117d77:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117d7b:	75 1f                	jne    f0117d9c <test_kmalloc+0xe3b>
f0117d7d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117d83:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117d8a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d90:	01 d0                	add    %edx,%eax
f0117d92:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117d96:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117d9a:	74 17                	je     f0117db3 <test_kmalloc+0xe52>
f0117d9c:	83 ec 04             	sub    $0x4,%esp
f0117d9f:	68 cc aa 13 f0       	push   $0xf013aacc
f0117da4:	68 b7 00 00 00       	push   $0xb7
f0117da9:	68 76 a9 13 f0       	push   $0xf013a976
f0117dae:	e8 f3 83 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117db3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117db9:	8b 40 04             	mov    0x4(%eax),%eax
f0117dbc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117dbf:	75 1d                	jne    f0117dde <test_kmalloc+0xe7d>
f0117dc1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117dc7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117dce:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117dd4:	01 d0                	add    %edx,%eax
f0117dd6:	8b 40 04             	mov    0x4(%eax),%eax
f0117dd9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117ddc:	74 17                	je     f0117df5 <test_kmalloc+0xe94>
f0117dde:	83 ec 04             	sub    $0x4,%esp
f0117de1:	68 cc aa 13 f0       	push   $0xf013aacc
f0117de6:	68 b8 00 00 00       	push   $0xb8
f0117deb:	68 76 a9 13 f0       	push   $0xf013a976
f0117df0:	e8 b1 83 fe ff       	call   f01001a6 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117df5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117dfb:	8a 00                	mov    (%eax),%al
f0117dfd:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117e00:	75 40                	jne    f0117e42 <test_kmalloc+0xee1>
f0117e02:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117e08:	89 c2                	mov    %eax,%edx
f0117e0a:	c1 ea 1f             	shr    $0x1f,%edx
f0117e0d:	01 d0                	add    %edx,%eax
f0117e0f:	d1 f8                	sar    %eax
f0117e11:	89 c2                	mov    %eax,%edx
f0117e13:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117e19:	01 d0                	add    %edx,%eax
f0117e1b:	8a 10                	mov    (%eax),%dl
f0117e1d:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117e20:	88 c1                	mov    %al,%cl
f0117e22:	c0 e9 07             	shr    $0x7,%cl
f0117e25:	01 c8                	add    %ecx,%eax
f0117e27:	d0 f8                	sar    %al
f0117e29:	38 c2                	cmp    %al,%dl
f0117e2b:	75 15                	jne    f0117e42 <test_kmalloc+0xee1>
f0117e2d:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117e33:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117e39:	01 d0                	add    %edx,%eax
f0117e3b:	8a 00                	mov    (%eax),%al
f0117e3d:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117e40:	74 17                	je     f0117e59 <test_kmalloc+0xef8>
f0117e42:	83 ec 04             	sub    $0x4,%esp
f0117e45:	68 cc aa 13 f0       	push   $0xf013aacc
f0117e4a:	68 ba 00 00 00       	push   $0xba
f0117e4f:	68 76 a9 13 f0       	push   $0xf013a976
f0117e54:	e8 4d 83 fe ff       	call   f01001a6 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117e59:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117e5f:	66 8b 00             	mov    (%eax),%ax
f0117e62:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117e66:	75 1b                	jne    f0117e83 <test_kmalloc+0xf22>
f0117e68:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117e6e:	01 c0                	add    %eax,%eax
f0117e70:	89 c2                	mov    %eax,%edx
f0117e72:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117e78:	01 d0                	add    %edx,%eax
f0117e7a:	66 8b 00             	mov    (%eax),%ax
f0117e7d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117e81:	74 17                	je     f0117e9a <test_kmalloc+0xf39>
f0117e83:	83 ec 04             	sub    $0x4,%esp
f0117e86:	68 cc aa 13 f0       	push   $0xf013aacc
f0117e8b:	68 bb 00 00 00       	push   $0xbb
f0117e90:	68 76 a9 13 f0       	push   $0xf013a976
f0117e95:	e8 0c 83 fe ff       	call   f01001a6 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117e9a:	e8 49 46 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117e9f:	89 c2                	mov    %eax,%edx
f0117ea1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117ea4:	39 c2                	cmp    %eax,%edx
f0117ea6:	74 17                	je     f0117ebf <test_kmalloc+0xf5e>
f0117ea8:	83 ec 04             	sub    $0x4,%esp
f0117eab:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0117eb0:	68 bd 00 00 00       	push   $0xbd
f0117eb5:	68 76 a9 13 f0       	push   $0xf013a976
f0117eba:	e8 e7 82 fe ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ebf:	e8 c8 bd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117ec4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117ec7:	74 17                	je     f0117ee0 <test_kmalloc+0xf7f>
f0117ec9:	83 ec 04             	sub    $0x4,%esp
f0117ecc:	68 90 a9 13 f0       	push   $0xf013a990
f0117ed1:	68 be 00 00 00       	push   $0xbe
f0117ed6:	68 76 a9 13 f0       	push   $0xf013a976
f0117edb:	e8 c6 82 fe ff       	call   f01001a6 <_panic>
		}

		cprintf("\b\b\b80%");
f0117ee0:	83 ec 0c             	sub    $0xc,%esp
f0117ee3:	68 01 ab 13 f0       	push   $0xf013ab01
f0117ee8:	e8 40 8d fe ff       	call   f0100c2d <cprintf>
f0117eed:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0117ef0:	e8 f3 45 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0117ef5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ef8:	e8 8f bd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117efd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0117f00:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0117f07:	10 00 00 
f0117f0a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0117f10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f15:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0117f1b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117f21:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f26:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0117f2c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117f32:	29 d0                	sub    %edx,%eax
f0117f34:	89 c1                	mov    %eax,%ecx
f0117f36:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0117f3d:	10 00 00 
f0117f40:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0117f45:	0f b6 d0             	movzbl %al,%edx
f0117f48:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0117f4e:	01 d0                	add    %edx,%eax
f0117f50:	48                   	dec    %eax
f0117f51:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0117f57:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117f5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f62:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0117f68:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117f6e:	29 d0                	sub    %edx,%eax
f0117f70:	01 c1                	add    %eax,%ecx
f0117f72:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0117f79:	10 00 00 
f0117f7c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0117f81:	0f b6 c0             	movzbl %al,%eax
f0117f84:	c1 e0 04             	shl    $0x4,%eax
f0117f87:	89 c2                	mov    %eax,%edx
f0117f89:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0117f8f:	01 d0                	add    %edx,%eax
f0117f91:	48                   	dec    %eax
f0117f92:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0117f98:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117f9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fa3:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0117fa9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117faf:	29 d0                	sub    %edx,%eax
f0117fb1:	01 c8                	add    %ecx,%eax
f0117fb3:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0117fb8:	29 c2                	sub    %eax,%edx
f0117fba:	89 d0                	mov    %edx,%eax
f0117fbc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0117fc2:	83 ec 0c             	sub    $0xc,%esp
f0117fc5:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0117fcb:	e8 f4 f5 fe ff       	call   f01075c4 <kmalloc>
f0117fd0:	83 c4 10             	add    $0x10,%esp
f0117fd3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0117fd9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0117fdf:	85 c0                	test   %eax,%eax
f0117fe1:	74 17                	je     f0117ffa <test_kmalloc+0x1099>
f0117fe3:	83 ec 04             	sub    $0x4,%esp
f0117fe6:	68 44 a9 13 f0       	push   $0xf013a944
f0117feb:	68 c8 00 00 00       	push   $0xc8
f0117ff0:	68 76 a9 13 f0       	push   $0xf013a976
f0117ff5:	e8 ac 81 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ffa:	e8 8d bc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117fff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118002:	74 17                	je     f011801b <test_kmalloc+0x10ba>
f0118004:	83 ec 04             	sub    $0x4,%esp
f0118007:	68 90 a9 13 f0       	push   $0xf013a990
f011800c:	68 c9 00 00 00       	push   $0xc9
f0118011:	68 76 a9 13 f0       	push   $0xf013a976
f0118016:	e8 8b 81 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011801b:	e8 c8 44 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118020:	89 c2                	mov    %eax,%edx
f0118022:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118025:	39 c2                	cmp    %eax,%edx
f0118027:	74 17                	je     f0118040 <test_kmalloc+0x10df>
f0118029:	83 ec 04             	sub    $0x4,%esp
f011802c:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0118031:	68 ca 00 00 00       	push   $0xca
f0118036:	68 76 a9 13 f0       	push   $0xf013a976
f011803b:	e8 66 81 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b90%");
f0118040:	83 ec 0c             	sub    $0xc,%esp
f0118043:	68 08 ab 13 f0       	push   $0xf013ab08
f0118048:	e8 e0 8b fe ff       	call   f0100c2d <cprintf>
f011804d:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118050:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118056:	05 00 40 00 00       	add    $0x4000,%eax
f011805b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118061:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118068:	10 00 00 
f011806b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118071:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118076:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011807c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118082:	ba 00 00 00 00       	mov    $0x0,%edx
f0118087:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011808d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118093:	29 d0                	sub    %edx,%eax
f0118095:	89 c1                	mov    %eax,%ecx
f0118097:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011809e:	10 00 00 
f01180a1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01180a6:	0f b6 d0             	movzbl %al,%edx
f01180a9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01180af:	01 d0                	add    %edx,%eax
f01180b1:	48                   	dec    %eax
f01180b2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01180b8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01180be:	ba 00 00 00 00       	mov    $0x0,%edx
f01180c3:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01180c9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01180cf:	29 d0                	sub    %edx,%eax
f01180d1:	01 c1                	add    %eax,%ecx
f01180d3:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01180da:	10 00 00 
f01180dd:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01180e2:	0f b6 c0             	movzbl %al,%eax
f01180e5:	c1 e0 04             	shl    $0x4,%eax
f01180e8:	89 c2                	mov    %eax,%edx
f01180ea:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01180f0:	01 d0                	add    %edx,%eax
f01180f2:	48                   	dec    %eax
f01180f3:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01180f9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01180ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0118104:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011810a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118110:	29 d0                	sub    %edx,%eax
f0118112:	01 c8                	add    %ecx,%eax
f0118114:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118119:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011811c:	eb 6a                	jmp    f0118188 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011811e:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0118123:	83 ec 04             	sub    $0x4,%esp
f0118126:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f011812c:	52                   	push   %edx
f011812d:	ff 75 f4             	pushl  -0xc(%ebp)
f0118130:	50                   	push   %eax
f0118131:	e8 33 e8 fe ff       	call   f0106969 <get_page_table>
f0118136:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118139:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011813f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118142:	c1 ea 0c             	shr    $0xc,%edx
f0118145:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011814b:	c1 e2 02             	shl    $0x2,%edx
f011814e:	01 d0                	add    %edx,%eax
f0118150:	8b 00                	mov    (%eax),%eax
f0118152:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118157:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011815d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118163:	83 e0 04             	and    $0x4,%eax
f0118166:	85 c0                	test   %eax,%eax
f0118168:	74 17                	je     f0118181 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f011816a:	83 ec 04             	sub    $0x4,%esp
f011816d:	68 10 ab 13 f0       	push   $0xf013ab10
f0118172:	68 d7 00 00 00       	push   $0xd7
f0118177:	68 76 a9 13 f0       	push   $0xf013a976
f011817c:	e8 25 80 fe ff       	call   f01001a6 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118181:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118188:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011818b:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118191:	72 8b                	jb     f011811e <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118193:	83 ec 0c             	sub    $0xc,%esp
f0118196:	68 5a ab 13 f0       	push   $0xf013ab5a
f011819b:	e8 8d 8a fe ff       	call   f0100c2d <cprintf>
f01181a0:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01181a3:	83 ec 0c             	sub    $0xc,%esp
f01181a6:	68 64 ab 13 f0       	push   $0xf013ab64
f01181ab:	e8 7d 8a fe ff       	call   f0100c2d <cprintf>
f01181b0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01181b3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01181b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01181bb:	5b                   	pop    %ebx
f01181bc:	5f                   	pop    %edi
f01181bd:	5d                   	pop    %ebp
f01181be:	c3                   	ret    

f01181bf <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01181bf:	55                   	push   %ebp
f01181c0:	89 e5                	mov    %esp,%ebp
f01181c2:	57                   	push   %edi
f01181c3:	53                   	push   %ebx
f01181c4:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f01181ca:	83 ec 0c             	sub    $0xc,%esp
f01181cd:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01181d2:	e8 56 8a fe ff       	call   f0100c2d <cprintf>
f01181d7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01181da:	83 ec 0c             	sub    $0xc,%esp
f01181dd:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01181e2:	e8 46 8a fe ff       	call   f0100c2d <cprintf>
f01181e7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01181ea:	83 ec 0c             	sub    $0xc,%esp
f01181ed:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01181f2:	e8 36 8a fe ff       	call   f0100c2d <cprintf>
f01181f7:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f01181fa:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118200:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118205:	b8 00 00 00 00       	mov    $0x0,%eax
f011820a:	89 d7                	mov    %edx,%edi
f011820c:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f011820e:	83 ec 0c             	sub    $0xc,%esp
f0118211:	68 a0 ab 13 f0       	push   $0xf013aba0
f0118216:	e8 12 8a fe ff       	call   f0100c2d <cprintf>
f011821b:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011821e:	e8 c5 42 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118223:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118226:	e8 61 ba fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011822b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f011822e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118235:	eb 1f                	jmp    f0118256 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118237:	83 ec 0c             	sub    $0xc,%esp
f011823a:	68 00 00 20 00       	push   $0x200000
f011823f:	e8 80 f3 fe ff       	call   f01075c4 <kmalloc>
f0118244:	83 c4 10             	add    $0x10,%esp
f0118247:	89 c2                	mov    %eax,%edx
f0118249:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011824c:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118253:	ff 45 f4             	incl   -0xc(%ebp)
f0118256:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011825a:	7e db                	jle    f0118237 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f011825c:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118263:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118266:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011826b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011826e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118271:	ba 00 00 00 00       	mov    $0x0,%edx
f0118276:	f7 75 e8             	divl   -0x18(%ebp)
f0118279:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011827c:	29 d0                	sub    %edx,%eax
f011827e:	89 c1                	mov    %eax,%ecx
f0118280:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118287:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011828c:	0f b6 d0             	movzbl %al,%edx
f011828f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118292:	01 d0                	add    %edx,%eax
f0118294:	48                   	dec    %eax
f0118295:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118298:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011829b:	ba 00 00 00 00       	mov    $0x0,%edx
f01182a0:	f7 75 e0             	divl   -0x20(%ebp)
f01182a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01182a6:	29 d0                	sub    %edx,%eax
f01182a8:	01 c1                	add    %eax,%ecx
f01182aa:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f01182b1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01182b6:	0f b6 c0             	movzbl %al,%eax
f01182b9:	c1 e0 04             	shl    $0x4,%eax
f01182bc:	89 c2                	mov    %eax,%edx
f01182be:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01182c1:	01 d0                	add    %edx,%eax
f01182c3:	48                   	dec    %eax
f01182c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01182c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01182ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01182cf:	f7 75 d8             	divl   -0x28(%ebp)
f01182d2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01182d5:	29 d0                	sub    %edx,%eax
f01182d7:	01 c8                	add    %ecx,%eax
f01182d9:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f01182de:	29 c2                	sub    %eax,%edx
f01182e0:	89 d0                	mov    %edx,%eax
f01182e2:	83 ec 0c             	sub    $0xc,%esp
f01182e5:	50                   	push   %eax
f01182e6:	e8 d9 f2 fe ff       	call   f01075c4 <kmalloc>
f01182eb:	83 c4 10             	add    $0x10,%esp
f01182ee:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01182f4:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01182fa:	89 c1                	mov    %eax,%ecx
f01182fc:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118303:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118306:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011830b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011830e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118311:	ba 00 00 00 00       	mov    $0x0,%edx
f0118316:	f7 75 d0             	divl   -0x30(%ebp)
f0118319:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011831c:	29 d0                	sub    %edx,%eax
f011831e:	89 c3                	mov    %eax,%ebx
f0118320:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118327:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011832c:	0f b6 d0             	movzbl %al,%edx
f011832f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118332:	01 d0                	add    %edx,%eax
f0118334:	48                   	dec    %eax
f0118335:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118338:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011833b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118340:	f7 75 c8             	divl   -0x38(%ebp)
f0118343:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118346:	29 d0                	sub    %edx,%eax
f0118348:	01 c3                	add    %eax,%ebx
f011834a:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118351:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118356:	0f b6 c0             	movzbl %al,%eax
f0118359:	c1 e0 04             	shl    $0x4,%eax
f011835c:	89 c2                	mov    %eax,%edx
f011835e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118361:	01 d0                	add    %edx,%eax
f0118363:	48                   	dec    %eax
f0118364:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118367:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011836a:	ba 00 00 00 00       	mov    $0x0,%edx
f011836f:	f7 75 c0             	divl   -0x40(%ebp)
f0118372:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118375:	29 d0                	sub    %edx,%eax
f0118377:	01 d8                	add    %ebx,%eax
f0118379:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011837e:	39 c1                	cmp    %eax,%ecx
f0118380:	0f 85 ed 04 00 00    	jne    f0118873 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118386:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011838c:	89 c1                	mov    %eax,%ecx
f011838e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118395:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118398:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011839d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01183a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01183a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01183a8:	f7 75 b8             	divl   -0x48(%ebp)
f01183ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01183ae:	29 d0                	sub    %edx,%eax
f01183b0:	89 c3                	mov    %eax,%ebx
f01183b2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01183b9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01183be:	0f b6 d0             	movzbl %al,%edx
f01183c1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01183c4:	01 d0                	add    %edx,%eax
f01183c6:	48                   	dec    %eax
f01183c7:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01183ca:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01183cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01183d2:	f7 75 b0             	divl   -0x50(%ebp)
f01183d5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01183d8:	29 d0                	sub    %edx,%eax
f01183da:	01 c3                	add    %eax,%ebx
f01183dc:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01183e3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01183e8:	0f b6 c0             	movzbl %al,%eax
f01183eb:	c1 e0 04             	shl    $0x4,%eax
f01183ee:	89 c2                	mov    %eax,%edx
f01183f0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01183f3:	01 d0                	add    %edx,%eax
f01183f5:	48                   	dec    %eax
f01183f6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01183f9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01183fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118401:	f7 75 a8             	divl   -0x58(%ebp)
f0118404:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118407:	29 d0                	sub    %edx,%eax
f0118409:	01 d8                	add    %ebx,%eax
f011840b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118410:	39 c1                	cmp    %eax,%ecx
f0118412:	0f 85 5b 04 00 00    	jne    f0118873 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118418:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f011841e:	89 c1                	mov    %eax,%ecx
f0118420:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118427:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011842a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011842f:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118432:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118435:	ba 00 00 00 00       	mov    $0x0,%edx
f011843a:	f7 75 a0             	divl   -0x60(%ebp)
f011843d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118440:	29 d0                	sub    %edx,%eax
f0118442:	89 c3                	mov    %eax,%ebx
f0118444:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011844b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118450:	0f b6 d0             	movzbl %al,%edx
f0118453:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118456:	01 d0                	add    %edx,%eax
f0118458:	48                   	dec    %eax
f0118459:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011845c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011845f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118464:	f7 75 98             	divl   -0x68(%ebp)
f0118467:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011846a:	29 d0                	sub    %edx,%eax
f011846c:	01 c3                	add    %eax,%ebx
f011846e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118475:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011847a:	0f b6 c0             	movzbl %al,%eax
f011847d:	c1 e0 04             	shl    $0x4,%eax
f0118480:	89 c2                	mov    %eax,%edx
f0118482:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118485:	01 d0                	add    %edx,%eax
f0118487:	48                   	dec    %eax
f0118488:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011848b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011848e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118493:	f7 75 90             	divl   -0x70(%ebp)
f0118496:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118499:	29 d0                	sub    %edx,%eax
f011849b:	01 d8                	add    %ebx,%eax
f011849d:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01184a2:	39 c1                	cmp    %eax,%ecx
f01184a4:	0f 85 c9 03 00 00    	jne    f0118873 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01184aa:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01184b0:	89 c1                	mov    %eax,%ecx
f01184b2:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01184b9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01184bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01184c1:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01184c4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01184c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01184cc:	f7 75 88             	divl   -0x78(%ebp)
f01184cf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01184d2:	29 d0                	sub    %edx,%eax
f01184d4:	89 c3                	mov    %eax,%ebx
f01184d6:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01184dd:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01184e2:	0f b6 d0             	movzbl %al,%edx
f01184e5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01184e8:	01 d0                	add    %edx,%eax
f01184ea:	48                   	dec    %eax
f01184eb:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01184f1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01184f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01184fc:	f7 75 80             	divl   -0x80(%ebp)
f01184ff:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118505:	29 d0                	sub    %edx,%eax
f0118507:	01 c3                	add    %eax,%ebx
f0118509:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118510:	10 00 00 
f0118513:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118518:	0f b6 c0             	movzbl %al,%eax
f011851b:	c1 e0 04             	shl    $0x4,%eax
f011851e:	89 c2                	mov    %eax,%edx
f0118520:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118526:	01 d0                	add    %edx,%eax
f0118528:	48                   	dec    %eax
f0118529:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011852f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118535:	ba 00 00 00 00       	mov    $0x0,%edx
f011853a:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118540:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118546:	29 d0                	sub    %edx,%eax
f0118548:	01 d8                	add    %ebx,%eax
f011854a:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011854f:	39 c1                	cmp    %eax,%ecx
f0118551:	0f 85 1c 03 00 00    	jne    f0118873 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118557:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011855d:	89 c1                	mov    %eax,%ecx
f011855f:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118566:	10 00 00 
f0118569:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011856f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118574:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011857a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118580:	ba 00 00 00 00       	mov    $0x0,%edx
f0118585:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011858b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118591:	29 d0                	sub    %edx,%eax
f0118593:	89 c3                	mov    %eax,%ebx
f0118595:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011859c:	10 00 00 
f011859f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01185a4:	0f b6 d0             	movzbl %al,%edx
f01185a7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01185ad:	01 d0                	add    %edx,%eax
f01185af:	48                   	dec    %eax
f01185b0:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01185b6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01185bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01185c1:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01185c7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01185cd:	29 d0                	sub    %edx,%eax
f01185cf:	01 c3                	add    %eax,%ebx
f01185d1:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01185d8:	10 00 00 
f01185db:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01185e0:	0f b6 c0             	movzbl %al,%eax
f01185e3:	c1 e0 04             	shl    $0x4,%eax
f01185e6:	89 c2                	mov    %eax,%edx
f01185e8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01185ee:	01 d0                	add    %edx,%eax
f01185f0:	48                   	dec    %eax
f01185f1:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01185f7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01185fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118602:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118608:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011860e:	29 d0                	sub    %edx,%eax
f0118610:	01 d8                	add    %ebx,%eax
f0118612:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118617:	39 c1                	cmp    %eax,%ecx
f0118619:	0f 85 54 02 00 00    	jne    f0118873 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011861f:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118625:	89 c1                	mov    %eax,%ecx
f0118627:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011862e:	10 00 00 
f0118631:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118637:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011863c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118642:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118648:	ba 00 00 00 00       	mov    $0x0,%edx
f011864d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118653:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118659:	29 d0                	sub    %edx,%eax
f011865b:	89 c3                	mov    %eax,%ebx
f011865d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118664:	10 00 00 
f0118667:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011866c:	0f b6 d0             	movzbl %al,%edx
f011866f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118675:	01 d0                	add    %edx,%eax
f0118677:	48                   	dec    %eax
f0118678:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011867e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118684:	ba 00 00 00 00       	mov    $0x0,%edx
f0118689:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011868f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118695:	29 d0                	sub    %edx,%eax
f0118697:	01 c3                	add    %eax,%ebx
f0118699:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01186a0:	10 00 00 
f01186a3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01186a8:	0f b6 c0             	movzbl %al,%eax
f01186ab:	c1 e0 04             	shl    $0x4,%eax
f01186ae:	89 c2                	mov    %eax,%edx
f01186b0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01186b6:	01 d0                	add    %edx,%eax
f01186b8:	48                   	dec    %eax
f01186b9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01186bf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01186c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01186ca:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01186d0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01186d6:	29 d0                	sub    %edx,%eax
f01186d8:	01 d8                	add    %ebx,%eax
f01186da:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01186df:	39 c1                	cmp    %eax,%ecx
f01186e1:	0f 85 8c 01 00 00    	jne    f0118873 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01186e7:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01186ed:	89 c1                	mov    %eax,%ecx
f01186ef:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01186f6:	10 00 00 
f01186f9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01186ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118704:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011870a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118710:	ba 00 00 00 00       	mov    $0x0,%edx
f0118715:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011871b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118721:	29 d0                	sub    %edx,%eax
f0118723:	89 c3                	mov    %eax,%ebx
f0118725:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011872c:	10 00 00 
f011872f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118734:	0f b6 d0             	movzbl %al,%edx
f0118737:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011873d:	01 d0                	add    %edx,%eax
f011873f:	48                   	dec    %eax
f0118740:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118746:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011874c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118751:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118757:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011875d:	29 d0                	sub    %edx,%eax
f011875f:	01 c3                	add    %eax,%ebx
f0118761:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118768:	10 00 00 
f011876b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118770:	0f b6 c0             	movzbl %al,%eax
f0118773:	c1 e0 04             	shl    $0x4,%eax
f0118776:	89 c2                	mov    %eax,%edx
f0118778:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011877e:	01 d0                	add    %edx,%eax
f0118780:	48                   	dec    %eax
f0118781:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118787:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011878d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118792:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118798:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011879e:	29 d0                	sub    %edx,%eax
f01187a0:	01 d8                	add    %ebx,%eax
f01187a2:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01187a7:	39 c1                	cmp    %eax,%ecx
f01187a9:	0f 85 c4 00 00 00    	jne    f0118873 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01187af:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01187b5:	89 c1                	mov    %eax,%ecx
f01187b7:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01187be:	10 00 00 
f01187c1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01187c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187cc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01187d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01187dd:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01187e3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187e9:	29 d0                	sub    %edx,%eax
f01187eb:	89 c3                	mov    %eax,%ebx
f01187ed:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01187f4:	10 00 00 
f01187f7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01187fc:	0f b6 d0             	movzbl %al,%edx
f01187ff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118805:	01 d0                	add    %edx,%eax
f0118807:	48                   	dec    %eax
f0118808:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011880e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118814:	ba 00 00 00 00       	mov    $0x0,%edx
f0118819:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011881f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118825:	29 d0                	sub    %edx,%eax
f0118827:	01 c3                	add    %eax,%ebx
f0118829:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118830:	10 00 00 
f0118833:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118838:	0f b6 c0             	movzbl %al,%eax
f011883b:	c1 e0 04             	shl    $0x4,%eax
f011883e:	89 c2                	mov    %eax,%edx
f0118840:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118846:	01 d0                	add    %edx,%eax
f0118848:	48                   	dec    %eax
f0118849:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011884f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118855:	ba 00 00 00 00       	mov    $0x0,%edx
f011885a:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118860:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118866:	29 d0                	sub    %edx,%eax
f0118868:	01 d8                	add    %ebx,%eax
f011886a:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011886f:	39 c1                	cmp    %eax,%ecx
f0118871:	74 17                	je     f011888a <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0118873:	83 ec 04             	sub    $0x4,%esp
f0118876:	68 f0 ab 13 f0       	push   $0xf013abf0
f011887b:	68 03 01 00 00       	push   $0x103
f0118880:	68 76 a9 13 f0       	push   $0xf013a976
f0118885:	e8 1c 79 fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011888a:	e8 fd b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011888f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118892:	74 17                	je     f01188ab <test_kmalloc_nextfit+0x6ec>
f0118894:	83 ec 04             	sub    $0x4,%esp
f0118897:	68 90 a9 13 f0       	push   $0xf013a990
f011889c:	68 05 01 00 00       	push   $0x105
f01188a1:	68 76 a9 13 f0       	push   $0xf013a976
f01188a6:	e8 fb 78 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01188ab:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01188ae:	e8 35 3c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01188b3:	29 c3                	sub    %eax,%ebx
f01188b5:	89 d9                	mov    %ebx,%ecx
f01188b7:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01188be:	10 00 00 
f01188c1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01188c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01188cc:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01188d2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01188d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01188dd:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01188e3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01188e9:	29 d0                	sub    %edx,%eax
f01188eb:	89 c3                	mov    %eax,%ebx
f01188ed:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01188f4:	10 00 00 
f01188f7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01188fc:	0f b6 d0             	movzbl %al,%edx
f01188ff:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118905:	01 d0                	add    %edx,%eax
f0118907:	48                   	dec    %eax
f0118908:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011890e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118914:	ba 00 00 00 00       	mov    $0x0,%edx
f0118919:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011891f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118925:	29 d0                	sub    %edx,%eax
f0118927:	01 c3                	add    %eax,%ebx
f0118929:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118930:	10 00 00 
f0118933:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118938:	0f b6 c0             	movzbl %al,%eax
f011893b:	c1 e0 04             	shl    $0x4,%eax
f011893e:	89 c2                	mov    %eax,%edx
f0118940:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118946:	01 d0                	add    %edx,%eax
f0118948:	48                   	dec    %eax
f0118949:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011894f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118955:	ba 00 00 00 00       	mov    $0x0,%edx
f011895a:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118960:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118966:	29 d0                	sub    %edx,%eax
f0118968:	01 d8                	add    %ebx,%eax
f011896a:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f011896f:	29 c2                	sub    %eax,%edx
f0118971:	89 d0                	mov    %edx,%eax
f0118973:	c1 e8 0c             	shr    $0xc,%eax
f0118976:	39 c1                	cmp    %eax,%ecx
f0118978:	74 17                	je     f0118991 <test_kmalloc_nextfit+0x7d2>
f011897a:	83 ec 04             	sub    $0x4,%esp
f011897d:	68 33 ac 13 f0       	push   $0xf013ac33
f0118982:	68 06 01 00 00       	push   $0x106
f0118987:	68 76 a9 13 f0       	push   $0xf013a976
f011898c:	e8 15 78 fe ff       	call   f01001a6 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0118991:	e8 f6 b2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118996:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118999:	e8 4a 3b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011899e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01189a1:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01189a7:	83 ec 0c             	sub    $0xc,%esp
f01189aa:	50                   	push   %eax
f01189ab:	e8 2e ec fe ff       	call   f01075de <kfree>
f01189b0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01189b3:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01189b9:	83 ec 0c             	sub    $0xc,%esp
f01189bc:	50                   	push   %eax
f01189bd:	e8 1c ec fe ff       	call   f01075de <kfree>
f01189c2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01189c5:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01189cb:	83 ec 0c             	sub    $0xc,%esp
f01189ce:	50                   	push   %eax
f01189cf:	e8 0a ec fe ff       	call   f01075de <kfree>
f01189d4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01189d7:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f01189dd:	83 ec 0c             	sub    $0xc,%esp
f01189e0:	50                   	push   %eax
f01189e1:	e8 f8 eb fe ff       	call   f01075de <kfree>
f01189e6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01189e9:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01189ef:	83 ec 0c             	sub    $0xc,%esp
f01189f2:	50                   	push   %eax
f01189f3:	e8 e6 eb fe ff       	call   f01075de <kfree>
f01189f8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01189fb:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0118a01:	83 ec 0c             	sub    $0xc,%esp
f0118a04:	50                   	push   %eax
f0118a05:	e8 d4 eb fe ff       	call   f01075de <kfree>
f0118a0a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0118a0d:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118a13:	83 ec 0c             	sub    $0xc,%esp
f0118a16:	50                   	push   %eax
f0118a17:	e8 c2 eb fe ff       	call   f01075de <kfree>
f0118a1c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0118a1f:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118a25:	83 ec 0c             	sub    $0xc,%esp
f0118a28:	50                   	push   %eax
f0118a29:	e8 b0 eb fe ff       	call   f01075de <kfree>
f0118a2e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118a31:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118a37:	83 ec 0c             	sub    $0xc,%esp
f0118a3a:	50                   	push   %eax
f0118a3b:	e8 9e eb fe ff       	call   f01075de <kfree>
f0118a40:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118a43:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118a49:	83 ec 0c             	sub    $0xc,%esp
f0118a4c:	50                   	push   %eax
f0118a4d:	e8 8c eb fe ff       	call   f01075de <kfree>
f0118a52:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a55:	e8 32 b2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118a5a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118a5d:	74 17                	je     f0118a76 <test_kmalloc_nextfit+0x8b7>
f0118a5f:	83 ec 04             	sub    $0x4,%esp
f0118a62:	68 90 a9 13 f0       	push   $0xf013a990
f0118a67:	68 17 01 00 00       	push   $0x117
f0118a6c:	68 76 a9 13 f0       	push   $0xf013a976
f0118a71:	e8 30 77 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118a76:	e8 6d 3a ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118a7b:	89 c2                	mov    %eax,%edx
f0118a7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a80:	89 d1                	mov    %edx,%ecx
f0118a82:	29 c1                	sub    %eax,%ecx
f0118a84:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118a8b:	10 00 00 
f0118a8e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0118a94:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a99:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118a9f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118aa5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aaa:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118ab0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118ab6:	29 d0                	sub    %edx,%eax
f0118ab8:	89 c3                	mov    %eax,%ebx
f0118aba:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118ac1:	10 00 00 
f0118ac4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118ac9:	0f b6 d0             	movzbl %al,%edx
f0118acc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118ad2:	01 d0                	add    %edx,%eax
f0118ad4:	48                   	dec    %eax
f0118ad5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0118adb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118ae1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ae6:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0118aec:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118af2:	29 d0                	sub    %edx,%eax
f0118af4:	01 c3                	add    %eax,%ebx
f0118af6:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0118afd:	10 00 00 
f0118b00:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118b05:	0f b6 c0             	movzbl %al,%eax
f0118b08:	c1 e0 04             	shl    $0x4,%eax
f0118b0b:	89 c2                	mov    %eax,%edx
f0118b0d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118b13:	01 d0                	add    %edx,%eax
f0118b15:	48                   	dec    %eax
f0118b16:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118b1c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118b22:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b27:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118b2d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118b33:	29 d0                	sub    %edx,%eax
f0118b35:	01 d8                	add    %ebx,%eax
f0118b37:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118b3c:	29 c2                	sub    %eax,%edx
f0118b3e:	89 d0                	mov    %edx,%eax
f0118b40:	c1 e8 0c             	shr    $0xc,%eax
f0118b43:	39 c1                	cmp    %eax,%ecx
f0118b45:	74 17                	je     f0118b5e <test_kmalloc_nextfit+0x99f>
f0118b47:	83 ec 04             	sub    $0x4,%esp
f0118b4a:	68 44 ac 13 f0       	push   $0xf013ac44
f0118b4f:	68 18 01 00 00       	push   $0x118
f0118b54:	68 76 a9 13 f0       	push   $0xf013a976
f0118b59:	e8 48 76 fe ff       	call   f01001a6 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118b5e:	e8 29 b1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118b63:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118b66:	e8 7d 39 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118b6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118b6e:	83 ec 0c             	sub    $0xc,%esp
f0118b71:	68 00 fc 0f 00       	push   $0xffc00
f0118b76:	e8 49 ea fe ff       	call   f01075c4 <kmalloc>
f0118b7b:	83 c4 10             	add    $0x10,%esp
f0118b7e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118b84:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118b8b:	10 00 00 
f0118b8e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b94:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118b99:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118b9f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118ba5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118baa:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0118bb0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118bb6:	29 d0                	sub    %edx,%eax
f0118bb8:	89 c1                	mov    %eax,%ecx
f0118bba:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0118bc1:	10 00 00 
f0118bc4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118bc9:	0f b6 d0             	movzbl %al,%edx
f0118bcc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118bd2:	01 d0                	add    %edx,%eax
f0118bd4:	48                   	dec    %eax
f0118bd5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0118bdb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118be1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118be6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0118bec:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118bf2:	29 d0                	sub    %edx,%eax
f0118bf4:	01 c1                	add    %eax,%ecx
f0118bf6:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0118bfd:	10 00 00 
f0118c00:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118c05:	0f b6 c0             	movzbl %al,%eax
f0118c08:	c1 e0 04             	shl    $0x4,%eax
f0118c0b:	89 c2                	mov    %eax,%edx
f0118c0d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118c13:	01 d0                	add    %edx,%eax
f0118c15:	48                   	dec    %eax
f0118c16:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0118c1c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118c22:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c27:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0118c2d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118c33:	29 d0                	sub    %edx,%eax
f0118c35:	01 c8                	add    %ecx,%eax
f0118c37:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118c3d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118c43:	39 c2                	cmp    %eax,%edx
f0118c45:	74 17                	je     f0118c5e <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118c47:	83 ec 04             	sub    $0x4,%esp
f0118c4a:	68 84 ac 13 f0       	push   $0xf013ac84
f0118c4f:	68 1f 01 00 00       	push   $0x11f
f0118c54:	68 76 a9 13 f0       	push   $0xf013a976
f0118c59:	e8 48 75 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c5e:	e8 29 b0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118c63:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118c66:	74 17                	je     f0118c7f <test_kmalloc_nextfit+0xac0>
f0118c68:	83 ec 04             	sub    $0x4,%esp
f0118c6b:	68 90 a9 13 f0       	push   $0xf013a990
f0118c70:	68 20 01 00 00       	push   $0x120
f0118c75:	68 76 a9 13 f0       	push   $0xf013a976
f0118c7a:	e8 27 75 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118c7f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118c82:	e8 61 38 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118c87:	29 c3                	sub    %eax,%ebx
f0118c89:	89 d8                	mov    %ebx,%eax
f0118c8b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118c90:	74 17                	je     f0118ca9 <test_kmalloc_nextfit+0xaea>
f0118c92:	83 ec 04             	sub    $0x4,%esp
f0118c95:	68 33 ac 13 f0       	push   $0xf013ac33
f0118c9a:	68 21 01 00 00       	push   $0x121
f0118c9f:	68 76 a9 13 f0       	push   $0xf013a976
f0118ca4:	e8 fd 74 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118ca9:	e8 de af fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118cae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118cb1:	e8 32 38 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118cb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0118cb9:	83 ec 0c             	sub    $0xc,%esp
f0118cbc:	68 00 04 00 00       	push   $0x400
f0118cc1:	e8 fe e8 fe ff       	call   f01075c4 <kmalloc>
f0118cc6:	83 c4 10             	add    $0x10,%esp
f0118cc9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0118ccf:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0118cd6:	10 00 00 
f0118cd9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118cdf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ce4:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0118cea:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118cf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cf5:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0118cfb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118d01:	29 d0                	sub    %edx,%eax
f0118d03:	89 c1                	mov    %eax,%ecx
f0118d05:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0118d0c:	10 00 00 
f0118d0f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118d14:	0f b6 d0             	movzbl %al,%edx
f0118d17:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118d1d:	01 d0                	add    %edx,%eax
f0118d1f:	48                   	dec    %eax
f0118d20:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0118d26:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118d2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d31:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0118d37:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118d3d:	29 d0                	sub    %edx,%eax
f0118d3f:	01 c1                	add    %eax,%ecx
f0118d41:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0118d48:	10 00 00 
f0118d4b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118d50:	0f b6 c0             	movzbl %al,%eax
f0118d53:	c1 e0 04             	shl    $0x4,%eax
f0118d56:	89 c2                	mov    %eax,%edx
f0118d58:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118d5e:	01 d0                	add    %edx,%eax
f0118d60:	48                   	dec    %eax
f0118d61:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0118d67:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118d6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d72:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0118d78:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118d7e:	29 d0                	sub    %edx,%eax
f0118d80:	01 c8                	add    %ecx,%eax
f0118d82:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0118d88:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d8e:	39 c2                	cmp    %eax,%edx
f0118d90:	74 17                	je     f0118da9 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0118d92:	83 ec 04             	sub    $0x4,%esp
f0118d95:	68 84 ac 13 f0       	push   $0xf013ac84
f0118d9a:	68 27 01 00 00       	push   $0x127
f0118d9f:	68 76 a9 13 f0       	push   $0xf013a976
f0118da4:	e8 fd 73 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118da9:	e8 de ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118dae:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118db1:	74 17                	je     f0118dca <test_kmalloc_nextfit+0xc0b>
f0118db3:	83 ec 04             	sub    $0x4,%esp
f0118db6:	68 90 a9 13 f0       	push   $0xf013a990
f0118dbb:	68 28 01 00 00       	push   $0x128
f0118dc0:	68 76 a9 13 f0       	push   $0xf013a976
f0118dc5:	e8 dc 73 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118dca:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118dcd:	e8 16 37 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118dd2:	29 c3                	sub    %eax,%ebx
f0118dd4:	89 d8                	mov    %ebx,%eax
f0118dd6:	83 f8 01             	cmp    $0x1,%eax
f0118dd9:	74 17                	je     f0118df2 <test_kmalloc_nextfit+0xc33>
f0118ddb:	83 ec 04             	sub    $0x4,%esp
f0118dde:	68 33 ac 13 f0       	push   $0xf013ac33
f0118de3:	68 29 01 00 00       	push   $0x129
f0118de8:	68 76 a9 13 f0       	push   $0xf013a976
f0118ded:	e8 b4 73 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118df2:	e8 95 ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118df7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118dfa:	e8 e9 36 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118dff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0118e02:	83 ec 0c             	sub    $0xc,%esp
f0118e05:	68 00 00 50 00       	push   $0x500000
f0118e0a:	e8 b5 e7 fe ff       	call   f01075c4 <kmalloc>
f0118e0f:	83 c4 10             	add    $0x10,%esp
f0118e12:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0118e18:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0118e1f:	10 00 00 
f0118e22:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118e28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e2d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0118e33:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118e39:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e3e:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0118e44:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118e4a:	29 d0                	sub    %edx,%eax
f0118e4c:	89 c1                	mov    %eax,%ecx
f0118e4e:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0118e55:	10 00 00 
f0118e58:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118e5d:	0f b6 d0             	movzbl %al,%edx
f0118e60:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118e66:	01 d0                	add    %edx,%eax
f0118e68:	48                   	dec    %eax
f0118e69:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0118e6f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118e75:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e7a:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0118e80:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118e86:	29 d0                	sub    %edx,%eax
f0118e88:	01 c1                	add    %eax,%ecx
f0118e8a:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0118e91:	10 00 00 
f0118e94:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118e99:	0f b6 c0             	movzbl %al,%eax
f0118e9c:	c1 e0 04             	shl    $0x4,%eax
f0118e9f:	89 c2                	mov    %eax,%edx
f0118ea1:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118ea7:	01 d0                	add    %edx,%eax
f0118ea9:	48                   	dec    %eax
f0118eaa:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0118eb0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118eb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ebb:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0118ec1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118ec7:	29 d0                	sub    %edx,%eax
f0118ec9:	01 c8                	add    %ecx,%eax
f0118ecb:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0118ed1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118ed7:	39 c2                	cmp    %eax,%edx
f0118ed9:	74 17                	je     f0118ef2 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0118edb:	83 ec 04             	sub    $0x4,%esp
f0118ede:	68 84 ac 13 f0       	push   $0xf013ac84
f0118ee3:	68 2f 01 00 00       	push   $0x12f
f0118ee8:	68 76 a9 13 f0       	push   $0xf013a976
f0118eed:	e8 b4 72 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ef2:	e8 95 ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118ef7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118efa:	74 17                	je     f0118f13 <test_kmalloc_nextfit+0xd54>
f0118efc:	83 ec 04             	sub    $0x4,%esp
f0118eff:	68 90 a9 13 f0       	push   $0xf013a990
f0118f04:	68 30 01 00 00       	push   $0x130
f0118f09:	68 76 a9 13 f0       	push   $0xf013a976
f0118f0e:	e8 93 72 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118f13:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f16:	e8 cd 35 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118f1b:	29 c3                	sub    %eax,%ebx
f0118f1d:	89 d8                	mov    %ebx,%eax
f0118f1f:	3d 00 05 00 00       	cmp    $0x500,%eax
f0118f24:	74 17                	je     f0118f3d <test_kmalloc_nextfit+0xd7e>
f0118f26:	83 ec 04             	sub    $0x4,%esp
f0118f29:	68 33 ac 13 f0       	push   $0xf013ac33
f0118f2e:	68 31 01 00 00       	push   $0x131
f0118f33:	68 76 a9 13 f0       	push   $0xf013a976
f0118f38:	e8 69 72 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118f3d:	e8 4a ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118f42:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118f45:	e8 9e 35 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0118f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0118f4d:	83 ec 0c             	sub    $0xc,%esp
f0118f50:	68 00 00 10 00       	push   $0x100000
f0118f55:	e8 6a e6 fe ff       	call   f01075c4 <kmalloc>
f0118f5a:	83 c4 10             	add    $0x10,%esp
f0118f5d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0118f63:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0118f6a:	10 00 00 
f0118f6d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118f73:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f78:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0118f7e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118f84:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f89:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0118f8f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118f95:	29 d0                	sub    %edx,%eax
f0118f97:	89 c1                	mov    %eax,%ecx
f0118f99:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0118fa0:	10 00 00 
f0118fa3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118fa8:	0f b6 d0             	movzbl %al,%edx
f0118fab:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0118fb1:	01 d0                	add    %edx,%eax
f0118fb3:	48                   	dec    %eax
f0118fb4:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0118fba:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118fc0:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fc5:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0118fcb:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118fd1:	29 d0                	sub    %edx,%eax
f0118fd3:	01 c1                	add    %eax,%ecx
f0118fd5:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0118fdc:	10 00 00 
f0118fdf:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0118fe4:	0f b6 c0             	movzbl %al,%eax
f0118fe7:	c1 e0 04             	shl    $0x4,%eax
f0118fea:	89 c2                	mov    %eax,%edx
f0118fec:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118ff2:	01 d0                	add    %edx,%eax
f0118ff4:	48                   	dec    %eax
f0118ff5:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0118ffb:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119001:	ba 00 00 00 00       	mov    $0x0,%edx
f0119006:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f011900c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119012:	29 d0                	sub    %edx,%eax
f0119014:	01 c8                	add    %ecx,%eax
f0119016:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011901c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119022:	39 c2                	cmp    %eax,%edx
f0119024:	74 17                	je     f011903d <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119026:	83 ec 04             	sub    $0x4,%esp
f0119029:	68 84 ac 13 f0       	push   $0xf013ac84
f011902e:	68 37 01 00 00       	push   $0x137
f0119033:	68 76 a9 13 f0       	push   $0xf013a976
f0119038:	e8 69 71 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011903d:	e8 4a ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119042:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119045:	74 17                	je     f011905e <test_kmalloc_nextfit+0xe9f>
f0119047:	83 ec 04             	sub    $0x4,%esp
f011904a:	68 90 a9 13 f0       	push   $0xf013a990
f011904f:	68 38 01 00 00       	push   $0x138
f0119054:	68 76 a9 13 f0       	push   $0xf013a976
f0119059:	e8 48 71 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011905e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119061:	e8 82 34 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119066:	29 c3                	sub    %eax,%ebx
f0119068:	89 d8                	mov    %ebx,%eax
f011906a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011906f:	74 17                	je     f0119088 <test_kmalloc_nextfit+0xec9>
f0119071:	83 ec 04             	sub    $0x4,%esp
f0119074:	68 33 ac 13 f0       	push   $0xf013ac33
f0119079:	68 39 01 00 00       	push   $0x139
f011907e:	68 76 a9 13 f0       	push   $0xf013a976
f0119083:	e8 1e 71 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119088:	e8 ff ab fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011908d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119090:	e8 53 34 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119095:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119098:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011909e:	83 ec 0c             	sub    $0xc,%esp
f01190a1:	50                   	push   %eax
f01190a2:	e8 37 e5 fe ff       	call   f01075de <kfree>
f01190a7:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01190aa:	e8 dd ab fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01190af:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01190b2:	74 17                	je     f01190cb <test_kmalloc_nextfit+0xf0c>
f01190b4:	83 ec 04             	sub    $0x4,%esp
f01190b7:	68 90 a9 13 f0       	push   $0xf013a990
f01190bc:	68 3e 01 00 00       	push   $0x13e
f01190c1:	68 76 a9 13 f0       	push   $0xf013a976
f01190c6:	e8 db 70 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01190cb:	e8 18 34 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01190d0:	89 c2                	mov    %eax,%edx
f01190d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01190d5:	29 c2                	sub    %eax,%edx
f01190d7:	89 d0                	mov    %edx,%eax
f01190d9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01190de:	74 17                	je     f01190f7 <test_kmalloc_nextfit+0xf38>
f01190e0:	83 ec 04             	sub    $0x4,%esp
f01190e3:	68 44 ac 13 f0       	push   $0xf013ac44
f01190e8:	68 3f 01 00 00       	push   $0x13f
f01190ed:	68 76 a9 13 f0       	push   $0xf013a976
f01190f2:	e8 af 70 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01190f7:	e8 90 ab fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01190fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01190ff:	e8 e4 33 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119104:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119107:	83 ec 0c             	sub    $0xc,%esp
f011910a:	68 00 04 00 00       	push   $0x400
f011910f:	e8 b0 e4 fe ff       	call   f01075c4 <kmalloc>
f0119114:	83 c4 10             	add    $0x10,%esp
f0119117:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011911d:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0119124:	10 00 00 
f0119127:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011912d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119132:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119138:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011913e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119143:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119149:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011914f:	29 d0                	sub    %edx,%eax
f0119151:	89 c1                	mov    %eax,%ecx
f0119153:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011915a:	10 00 00 
f011915d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119162:	0f b6 d0             	movzbl %al,%edx
f0119165:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011916b:	01 d0                	add    %edx,%eax
f011916d:	48                   	dec    %eax
f011916e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0119174:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011917a:	ba 00 00 00 00       	mov    $0x0,%edx
f011917f:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119185:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011918b:	29 d0                	sub    %edx,%eax
f011918d:	01 c1                	add    %eax,%ecx
f011918f:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0119196:	10 00 00 
f0119199:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011919e:	0f b6 c0             	movzbl %al,%eax
f01191a1:	c1 e0 04             	shl    $0x4,%eax
f01191a4:	89 c2                	mov    %eax,%edx
f01191a6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01191ac:	01 d0                	add    %edx,%eax
f01191ae:	48                   	dec    %eax
f01191af:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01191b5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01191bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01191c0:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f01191c6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01191cc:	29 d0                	sub    %edx,%eax
f01191ce:	01 c8                	add    %ecx,%eax
f01191d0:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f01191d6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01191dc:	39 c2                	cmp    %eax,%edx
f01191de:	74 17                	je     f01191f7 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f01191e0:	83 ec 04             	sub    $0x4,%esp
f01191e3:	68 84 ac 13 f0       	push   $0xf013ac84
f01191e8:	68 45 01 00 00       	push   $0x145
f01191ed:	68 76 a9 13 f0       	push   $0xf013a976
f01191f2:	e8 af 6f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191f7:	e8 90 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01191fc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01191ff:	74 17                	je     f0119218 <test_kmalloc_nextfit+0x1059>
f0119201:	83 ec 04             	sub    $0x4,%esp
f0119204:	68 90 a9 13 f0       	push   $0xf013a990
f0119209:	68 46 01 00 00       	push   $0x146
f011920e:	68 76 a9 13 f0       	push   $0xf013a976
f0119213:	e8 8e 6f fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119218:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011921b:	e8 c8 32 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119220:	29 c3                	sub    %eax,%ebx
f0119222:	89 d8                	mov    %ebx,%eax
f0119224:	83 f8 01             	cmp    $0x1,%eax
f0119227:	74 17                	je     f0119240 <test_kmalloc_nextfit+0x1081>
f0119229:	83 ec 04             	sub    $0x4,%esp
f011922c:	68 33 ac 13 f0       	push   $0xf013ac33
f0119231:	68 47 01 00 00       	push   $0x147
f0119236:	68 76 a9 13 f0       	push   $0xf013a976
f011923b:	e8 66 6f fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119240:	e8 47 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119245:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119248:	e8 9b 32 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011924d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119250:	83 ec 0c             	sub    $0xc,%esp
f0119253:	68 00 e0 1f 00       	push   $0x1fe000
f0119258:	e8 67 e3 fe ff       	call   f01075c4 <kmalloc>
f011925d:	83 c4 10             	add    $0x10,%esp
f0119260:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119266:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f011926d:	10 00 00 
f0119270:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119276:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011927b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119281:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119287:	ba 00 00 00 00       	mov    $0x0,%edx
f011928c:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119292:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119298:	29 d0                	sub    %edx,%eax
f011929a:	89 c1                	mov    %eax,%ecx
f011929c:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01192a3:	10 00 00 
f01192a6:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01192ab:	0f b6 d0             	movzbl %al,%edx
f01192ae:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01192b4:	01 d0                	add    %edx,%eax
f01192b6:	48                   	dec    %eax
f01192b7:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01192bd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01192c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01192c8:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01192ce:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01192d4:	29 d0                	sub    %edx,%eax
f01192d6:	01 c1                	add    %eax,%ecx
f01192d8:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01192df:	10 00 00 
f01192e2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01192e7:	0f b6 c0             	movzbl %al,%eax
f01192ea:	c1 e0 04             	shl    $0x4,%eax
f01192ed:	89 c2                	mov    %eax,%edx
f01192ef:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01192f5:	01 d0                	add    %edx,%eax
f01192f7:	48                   	dec    %eax
f01192f8:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f01192fe:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119304:	ba 00 00 00 00       	mov    $0x0,%edx
f0119309:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f011930f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119315:	29 d0                	sub    %edx,%eax
f0119317:	01 c8                	add    %ecx,%eax
f0119319:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011931f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119325:	39 c2                	cmp    %eax,%edx
f0119327:	74 17                	je     f0119340 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119329:	83 ec 04             	sub    $0x4,%esp
f011932c:	68 84 ac 13 f0       	push   $0xf013ac84
f0119331:	68 4d 01 00 00       	push   $0x14d
f0119336:	68 76 a9 13 f0       	push   $0xf013a976
f011933b:	e8 66 6e fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119340:	e8 47 a9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119345:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119348:	74 17                	je     f0119361 <test_kmalloc_nextfit+0x11a2>
f011934a:	83 ec 04             	sub    $0x4,%esp
f011934d:	68 90 a9 13 f0       	push   $0xf013a990
f0119352:	68 4e 01 00 00       	push   $0x14e
f0119357:	68 76 a9 13 f0       	push   $0xf013a976
f011935c:	e8 45 6e fe ff       	call   f01001a6 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119361:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119364:	e8 7f 31 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119369:	29 c3                	sub    %eax,%ebx
f011936b:	89 d8                	mov    %ebx,%eax
f011936d:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119372:	74 17                	je     f011938b <test_kmalloc_nextfit+0x11cc>
f0119374:	83 ec 04             	sub    $0x4,%esp
f0119377:	68 33 ac 13 f0       	push   $0xf013ac33
f011937c:	68 50 01 00 00       	push   $0x150
f0119381:	68 76 a9 13 f0       	push   $0xf013a976
f0119386:	e8 1b 6e fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011938b:	e8 fc a8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119390:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119393:	e8 50 31 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119398:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011939b:	83 ec 0c             	sub    $0xc,%esp
f011939e:	68 00 00 08 00       	push   $0x80000
f01193a3:	e8 1c e2 fe ff       	call   f01075c4 <kmalloc>
f01193a8:	83 c4 10             	add    $0x10,%esp
f01193ab:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f01193b1:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01193b8:	10 00 00 
f01193bb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01193c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193c6:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01193cc:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01193d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01193d7:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01193dd:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01193e3:	29 d0                	sub    %edx,%eax
f01193e5:	89 c1                	mov    %eax,%ecx
f01193e7:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01193ee:	10 00 00 
f01193f1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01193f6:	0f b6 d0             	movzbl %al,%edx
f01193f9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01193ff:	01 d0                	add    %edx,%eax
f0119401:	48                   	dec    %eax
f0119402:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119408:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011940e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119413:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119419:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011941f:	29 d0                	sub    %edx,%eax
f0119421:	01 c1                	add    %eax,%ecx
f0119423:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f011942a:	10 00 00 
f011942d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119432:	0f b6 c0             	movzbl %al,%eax
f0119435:	c1 e0 04             	shl    $0x4,%eax
f0119438:	89 c2                	mov    %eax,%edx
f011943a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119440:	01 d0                	add    %edx,%eax
f0119442:	48                   	dec    %eax
f0119443:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119449:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011944f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119454:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f011945a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119460:	29 d0                	sub    %edx,%eax
f0119462:	01 c8                	add    %ecx,%eax
f0119464:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011946a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119470:	39 c2                	cmp    %eax,%edx
f0119472:	74 17                	je     f011948b <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0119474:	83 ec 04             	sub    $0x4,%esp
f0119477:	68 84 ac 13 f0       	push   $0xf013ac84
f011947c:	68 56 01 00 00       	push   $0x156
f0119481:	68 76 a9 13 f0       	push   $0xf013a976
f0119486:	e8 1b 6d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011948b:	e8 fc a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119490:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119493:	74 17                	je     f01194ac <test_kmalloc_nextfit+0x12ed>
f0119495:	83 ec 04             	sub    $0x4,%esp
f0119498:	68 90 a9 13 f0       	push   $0xf013a990
f011949d:	68 57 01 00 00       	push   $0x157
f01194a2:	68 76 a9 13 f0       	push   $0xf013a976
f01194a7:	e8 fa 6c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01194ac:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01194af:	e8 34 30 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01194b4:	29 c3                	sub    %eax,%ebx
f01194b6:	89 d8                	mov    %ebx,%eax
f01194b8:	3d 80 00 00 00       	cmp    $0x80,%eax
f01194bd:	74 17                	je     f01194d6 <test_kmalloc_nextfit+0x1317>
f01194bf:	83 ec 04             	sub    $0x4,%esp
f01194c2:	68 33 ac 13 f0       	push   $0xf013ac33
f01194c7:	68 58 01 00 00       	push   $0x158
f01194cc:	68 76 a9 13 f0       	push   $0xf013a976
f01194d1:	e8 d0 6c fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f01194d6:	83 ec 0c             	sub    $0xc,%esp
f01194d9:	68 a4 ac 13 f0       	push   $0xf013aca4
f01194de:	e8 4a 77 fe ff       	call   f0100c2d <cprintf>
f01194e3:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f01194e6:	e8 a1 a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01194eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01194ee:	e8 f5 2f ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01194f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f01194f6:	83 ec 0c             	sub    $0xc,%esp
f01194f9:	68 00 00 38 00       	push   $0x380000
f01194fe:	e8 c1 e0 fe ff       	call   f01075c4 <kmalloc>
f0119503:	83 c4 10             	add    $0x10,%esp
f0119506:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011950c:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0119513:	10 00 00 
f0119516:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011951c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119521:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0119527:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011952d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119532:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119538:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011953e:	29 d0                	sub    %edx,%eax
f0119540:	89 c1                	mov    %eax,%ecx
f0119542:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119549:	10 00 00 
f011954c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119551:	0f b6 d0             	movzbl %al,%edx
f0119554:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011955a:	01 d0                	add    %edx,%eax
f011955c:	48                   	dec    %eax
f011955d:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0119563:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119569:	ba 00 00 00 00       	mov    $0x0,%edx
f011956e:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f0119574:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011957a:	29 d0                	sub    %edx,%eax
f011957c:	01 c1                	add    %eax,%ecx
f011957e:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0119585:	10 00 00 
f0119588:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011958d:	0f b6 c0             	movzbl %al,%eax
f0119590:	c1 e0 04             	shl    $0x4,%eax
f0119593:	89 c2                	mov    %eax,%edx
f0119595:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011959b:	01 d0                	add    %edx,%eax
f011959d:	48                   	dec    %eax
f011959e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f01195a4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01195aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01195af:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f01195b5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01195bb:	29 d0                	sub    %edx,%eax
f01195bd:	01 c8                	add    %ecx,%eax
f01195bf:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f01195c5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01195cb:	39 c2                	cmp    %eax,%edx
f01195cd:	74 17                	je     f01195e6 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f01195cf:	83 ec 04             	sub    $0x4,%esp
f01195d2:	68 84 ac 13 f0       	push   $0xf013ac84
f01195d7:	68 62 01 00 00       	push   $0x162
f01195dc:	68 76 a9 13 f0       	push   $0xf013a976
f01195e1:	e8 c0 6b fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01195e6:	e8 a1 a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01195eb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01195ee:	74 17                	je     f0119607 <test_kmalloc_nextfit+0x1448>
f01195f0:	83 ec 04             	sub    $0x4,%esp
f01195f3:	68 90 a9 13 f0       	push   $0xf013a990
f01195f8:	68 63 01 00 00       	push   $0x163
f01195fd:	68 76 a9 13 f0       	push   $0xf013a976
f0119602:	e8 9f 6b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119607:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011960a:	e8 d9 2e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011960f:	29 c3                	sub    %eax,%ebx
f0119611:	89 d8                	mov    %ebx,%eax
f0119613:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119618:	74 17                	je     f0119631 <test_kmalloc_nextfit+0x1472>
f011961a:	83 ec 04             	sub    $0x4,%esp
f011961d:	68 33 ac 13 f0       	push   $0xf013ac33
f0119622:	68 64 01 00 00       	push   $0x164
f0119627:	68 76 a9 13 f0       	push   $0xf013a976
f011962c:	e8 75 6b fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119631:	e8 56 a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119636:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119639:	e8 aa 2e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011963e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0119641:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0119647:	83 ec 0c             	sub    $0xc,%esp
f011964a:	50                   	push   %eax
f011964b:	e8 8e df fe ff       	call   f01075de <kfree>
f0119650:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119653:	e8 34 a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119658:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011965b:	74 17                	je     f0119674 <test_kmalloc_nextfit+0x14b5>
f011965d:	83 ec 04             	sub    $0x4,%esp
f0119660:	68 90 a9 13 f0       	push   $0xf013a990
f0119665:	68 69 01 00 00       	push   $0x169
f011966a:	68 76 a9 13 f0       	push   $0xf013a976
f011966f:	e8 32 6b fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119674:	e8 6f 2e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119679:	89 c2                	mov    %eax,%edx
f011967b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011967e:	29 c2                	sub    %eax,%edx
f0119680:	89 d0                	mov    %edx,%eax
f0119682:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119687:	74 17                	je     f01196a0 <test_kmalloc_nextfit+0x14e1>
f0119689:	83 ec 04             	sub    $0x4,%esp
f011968c:	68 44 ac 13 f0       	push   $0xf013ac44
f0119691:	68 6a 01 00 00       	push   $0x16a
f0119696:	68 76 a9 13 f0       	push   $0xf013a976
f011969b:	e8 06 6b fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01196a0:	e8 e7 a5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01196a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01196a8:	e8 3b 2e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01196ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f01196b0:	83 ec 0c             	sub    $0xc,%esp
f01196b3:	68 00 fc 3f 00       	push   $0x3ffc00
f01196b8:	e8 07 df fe ff       	call   f01075c4 <kmalloc>
f01196bd:	83 c4 10             	add    $0x10,%esp
f01196c0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f01196c6:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f01196cd:	10 00 00 
f01196d0:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01196d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196db:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f01196e1:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01196e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01196ec:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f01196f2:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01196f8:	29 d0                	sub    %edx,%eax
f01196fa:	89 c1                	mov    %eax,%ecx
f01196fc:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0119703:	10 00 00 
f0119706:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011970b:	0f b6 d0             	movzbl %al,%edx
f011970e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0119714:	01 d0                	add    %edx,%eax
f0119716:	48                   	dec    %eax
f0119717:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011971d:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119723:	ba 00 00 00 00       	mov    $0x0,%edx
f0119728:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011972e:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119734:	29 d0                	sub    %edx,%eax
f0119736:	01 c1                	add    %eax,%ecx
f0119738:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011973f:	10 00 00 
f0119742:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119747:	0f b6 c0             	movzbl %al,%eax
f011974a:	c1 e0 04             	shl    $0x4,%eax
f011974d:	89 c2                	mov    %eax,%edx
f011974f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0119755:	01 d0                	add    %edx,%eax
f0119757:	48                   	dec    %eax
f0119758:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011975e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119764:	ba 00 00 00 00       	mov    $0x0,%edx
f0119769:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011976f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119775:	29 d0                	sub    %edx,%eax
f0119777:	01 c8                	add    %ecx,%eax
f0119779:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011977f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119785:	39 c2                	cmp    %eax,%edx
f0119787:	74 17                	je     f01197a0 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119789:	83 ec 04             	sub    $0x4,%esp
f011978c:	68 84 ac 13 f0       	push   $0xf013ac84
f0119791:	68 70 01 00 00       	push   $0x170
f0119796:	68 76 a9 13 f0       	push   $0xf013a976
f011979b:	e8 06 6a fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197a0:	e8 e7 a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01197a5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197a8:	74 17                	je     f01197c1 <test_kmalloc_nextfit+0x1602>
f01197aa:	83 ec 04             	sub    $0x4,%esp
f01197ad:	68 90 a9 13 f0       	push   $0xf013a990
f01197b2:	68 71 01 00 00       	push   $0x171
f01197b7:	68 76 a9 13 f0       	push   $0xf013a976
f01197bc:	e8 e5 69 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01197c1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01197c4:	e8 1f 2d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01197c9:	29 c3                	sub    %eax,%ebx
f01197cb:	89 d8                	mov    %ebx,%eax
f01197cd:	3d 00 04 00 00       	cmp    $0x400,%eax
f01197d2:	74 17                	je     f01197eb <test_kmalloc_nextfit+0x162c>
f01197d4:	83 ec 04             	sub    $0x4,%esp
f01197d7:	68 33 ac 13 f0       	push   $0xf013ac33
f01197dc:	68 72 01 00 00       	push   $0x172
f01197e1:	68 76 a9 13 f0       	push   $0xf013a976
f01197e6:	e8 bb 69 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f01197eb:	83 ec 0c             	sub    $0xc,%esp
f01197ee:	68 e0 ac 13 f0       	push   $0xf013ace0
f01197f3:	e8 35 74 fe ff       	call   f0100c2d <cprintf>
f01197f8:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f01197fb:	e8 8c a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119800:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119803:	e8 e0 2c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119808:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011980b:	83 ec 0c             	sub    $0xc,%esp
f011980e:	68 00 00 60 00       	push   $0x600000
f0119813:	e8 ac dd fe ff       	call   f01075c4 <kmalloc>
f0119818:	83 c4 10             	add    $0x10,%esp
f011981b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119821:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119827:	85 c0                	test   %eax,%eax
f0119829:	74 17                	je     f0119842 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011982b:	83 ec 04             	sub    $0x4,%esp
f011982e:	68 84 ac 13 f0       	push   $0xf013ac84
f0119833:	68 7c 01 00 00       	push   $0x17c
f0119838:	68 76 a9 13 f0       	push   $0xf013a976
f011983d:	e8 64 69 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119842:	e8 45 a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119847:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011984a:	74 17                	je     f0119863 <test_kmalloc_nextfit+0x16a4>
f011984c:	83 ec 04             	sub    $0x4,%esp
f011984f:	68 90 a9 13 f0       	push   $0xf013a990
f0119854:	68 7d 01 00 00       	push   $0x17d
f0119859:	68 76 a9 13 f0       	push   $0xf013a976
f011985e:	e8 43 69 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0119863:	e8 80 2c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119868:	89 c2                	mov    %eax,%edx
f011986a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011986d:	39 c2                	cmp    %eax,%edx
f011986f:	74 17                	je     f0119888 <test_kmalloc_nextfit+0x16c9>
f0119871:	83 ec 04             	sub    $0x4,%esp
f0119874:	68 33 ac 13 f0       	push   $0xf013ac33
f0119879:	68 7e 01 00 00       	push   $0x17e
f011987e:	68 76 a9 13 f0       	push   $0xf013a976
f0119883:	e8 1e 69 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119888:	83 ec 0c             	sub    $0xc,%esp
f011988b:	68 18 ad 13 f0       	push   $0xf013ad18
f0119890:	e8 98 73 fe ff       	call   f0100c2d <cprintf>
f0119895:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119898:	83 ec 0c             	sub    $0xc,%esp
f011989b:	68 54 ad 13 f0       	push   $0xf013ad54
f01198a0:	e8 88 73 fe ff       	call   f0100c2d <cprintf>
f01198a5:	83 c4 10             	add    $0x10,%esp
	return 1;
f01198a8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01198ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01198b0:	5b                   	pop    %ebx
f01198b1:	5f                   	pop    %edi
f01198b2:	5d                   	pop    %ebp
f01198b3:	c3                   	ret    

f01198b4 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f01198b4:	55                   	push   %ebp
f01198b5:	89 e5                	mov    %esp,%ebp
f01198b7:	57                   	push   %edi
f01198b8:	53                   	push   %ebx
f01198b9:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f01198bf:	83 ec 0c             	sub    $0xc,%esp
f01198c2:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01198c7:	e8 61 73 fe ff       	call   f0100c2d <cprintf>
f01198cc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01198cf:	83 ec 0c             	sub    $0xc,%esp
f01198d2:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01198d7:	e8 51 73 fe ff       	call   f0100c2d <cprintf>
f01198dc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01198df:	83 ec 0c             	sub    $0xc,%esp
f01198e2:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01198e7:	e8 41 73 fe ff       	call   f0100c2d <cprintf>
f01198ec:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01198ef:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01198f5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01198fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01198ff:	89 d7                	mov    %edx,%edi
f0119901:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119903:	e8 e0 2b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119908:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011990b:	e8 7c a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119910:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119913:	83 ec 0c             	sub    $0xc,%esp
f0119916:	68 00 fc 2f 00       	push   $0x2ffc00
f011991b:	e8 a4 dc fe ff       	call   f01075c4 <kmalloc>
f0119920:	83 c4 10             	add    $0x10,%esp
f0119923:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119929:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011992f:	89 c1                	mov    %eax,%ecx
f0119931:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119938:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011993b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119940:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119943:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119946:	ba 00 00 00 00       	mov    $0x0,%edx
f011994b:	f7 75 ec             	divl   -0x14(%ebp)
f011994e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119951:	29 d0                	sub    %edx,%eax
f0119953:	89 c3                	mov    %eax,%ebx
f0119955:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011995c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119961:	0f b6 d0             	movzbl %al,%edx
f0119964:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119967:	01 d0                	add    %edx,%eax
f0119969:	48                   	dec    %eax
f011996a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011996d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119970:	ba 00 00 00 00       	mov    $0x0,%edx
f0119975:	f7 75 e4             	divl   -0x1c(%ebp)
f0119978:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011997b:	29 d0                	sub    %edx,%eax
f011997d:	01 c3                	add    %eax,%ebx
f011997f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0119986:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011998b:	0f b6 c0             	movzbl %al,%eax
f011998e:	c1 e0 04             	shl    $0x4,%eax
f0119991:	89 c2                	mov    %eax,%edx
f0119993:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119996:	01 d0                	add    %edx,%eax
f0119998:	48                   	dec    %eax
f0119999:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011999c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011999f:	ba 00 00 00 00       	mov    $0x0,%edx
f01199a4:	f7 75 dc             	divl   -0x24(%ebp)
f01199a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01199aa:	29 d0                	sub    %edx,%eax
f01199ac:	01 d8                	add    %ebx,%eax
f01199ae:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01199b3:	39 c1                	cmp    %eax,%ecx
f01199b5:	74 17                	je     f01199ce <test_kmalloc_bestfit1+0x11a>
f01199b7:	83 ec 04             	sub    $0x4,%esp
f01199ba:	68 90 ad 13 f0       	push   $0xf013ad90
f01199bf:	68 98 01 00 00       	push   $0x198
f01199c4:	68 76 a9 13 f0       	push   $0xf013a976
f01199c9:	e8 d8 67 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199ce:	e8 b9 a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01199d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01199d6:	74 17                	je     f01199ef <test_kmalloc_bestfit1+0x13b>
f01199d8:	83 ec 04             	sub    $0x4,%esp
f01199db:	68 90 a9 13 f0       	push   $0xf013a990
f01199e0:	68 99 01 00 00       	push   $0x199
f01199e5:	68 76 a9 13 f0       	push   $0xf013a976
f01199ea:	e8 b7 67 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01199ef:	e8 f4 2a ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f01199f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01199f7:	29 c2                	sub    %eax,%edx
f01199f9:	89 d0                	mov    %edx,%eax
f01199fb:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119a00:	74 17                	je     f0119a19 <test_kmalloc_bestfit1+0x165>
f0119a02:	83 ec 04             	sub    $0x4,%esp
f0119a05:	68 c0 ad 13 f0       	push   $0xf013adc0
f0119a0a:	68 9a 01 00 00       	push   $0x19a
f0119a0f:	68 76 a9 13 f0       	push   $0xf013a976
f0119a14:	e8 8d 67 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119a19:	e8 ca 2a ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119a1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a21:	e8 66 a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119a26:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0119a29:	83 ec 0c             	sub    $0xc,%esp
f0119a2c:	68 00 fc 2f 00       	push   $0x2ffc00
f0119a31:	e8 8e db fe ff       	call   f01075c4 <kmalloc>
f0119a36:	83 c4 10             	add    $0x10,%esp
f0119a39:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119a3f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119a45:	89 c1                	mov    %eax,%ecx
f0119a47:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119a4e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119a51:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a56:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119a59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119a5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a61:	f7 75 d4             	divl   -0x2c(%ebp)
f0119a64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119a67:	29 d0                	sub    %edx,%eax
f0119a69:	89 c3                	mov    %eax,%ebx
f0119a6b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0119a72:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119a77:	0f b6 d0             	movzbl %al,%edx
f0119a7a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119a7d:	01 d0                	add    %edx,%eax
f0119a7f:	48                   	dec    %eax
f0119a80:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0119a83:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119a86:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a8b:	f7 75 cc             	divl   -0x34(%ebp)
f0119a8e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119a91:	29 d0                	sub    %edx,%eax
f0119a93:	01 c3                	add    %eax,%ebx
f0119a95:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119a9c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119aa1:	0f b6 c0             	movzbl %al,%eax
f0119aa4:	c1 e0 04             	shl    $0x4,%eax
f0119aa7:	89 c2                	mov    %eax,%edx
f0119aa9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119aac:	01 d0                	add    %edx,%eax
f0119aae:	48                   	dec    %eax
f0119aaf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0119ab2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119ab5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aba:	f7 75 c4             	divl   -0x3c(%ebp)
f0119abd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119ac0:	29 d0                	sub    %edx,%eax
f0119ac2:	01 d8                	add    %ebx,%eax
f0119ac4:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0119ac9:	39 c1                	cmp    %eax,%ecx
f0119acb:	74 17                	je     f0119ae4 <test_kmalloc_bestfit1+0x230>
f0119acd:	83 ec 04             	sub    $0x4,%esp
f0119ad0:	68 90 ad 13 f0       	push   $0xf013ad90
f0119ad5:	68 a0 01 00 00       	push   $0x1a0
f0119ada:	68 76 a9 13 f0       	push   $0xf013a976
f0119adf:	e8 c2 66 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ae4:	e8 a3 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ae9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119aec:	74 17                	je     f0119b05 <test_kmalloc_bestfit1+0x251>
f0119aee:	83 ec 04             	sub    $0x4,%esp
f0119af1:	68 90 a9 13 f0       	push   $0xf013a990
f0119af6:	68 a1 01 00 00       	push   $0x1a1
f0119afb:	68 76 a9 13 f0       	push   $0xf013a976
f0119b00:	e8 a1 66 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119b05:	e8 de 29 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119b0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119b0d:	29 c2                	sub    %eax,%edx
f0119b0f:	89 d0                	mov    %edx,%eax
f0119b11:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119b16:	74 17                	je     f0119b2f <test_kmalloc_bestfit1+0x27b>
f0119b18:	83 ec 04             	sub    $0x4,%esp
f0119b1b:	68 c0 ad 13 f0       	push   $0xf013adc0
f0119b20:	68 a2 01 00 00       	push   $0x1a2
f0119b25:	68 76 a9 13 f0       	push   $0xf013a976
f0119b2a:	e8 77 66 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119b2f:	e8 b4 29 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119b34:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b37:	e8 50 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119b3f:	83 ec 0c             	sub    $0xc,%esp
f0119b42:	68 00 fc 1f 00       	push   $0x1ffc00
f0119b47:	e8 78 da fe ff       	call   f01075c4 <kmalloc>
f0119b4c:	83 c4 10             	add    $0x10,%esp
f0119b4f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119b55:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119b5b:	89 c1                	mov    %eax,%ecx
f0119b5d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0119b64:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119b67:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119b6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119b72:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b77:	f7 75 bc             	divl   -0x44(%ebp)
f0119b7a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119b7d:	29 d0                	sub    %edx,%eax
f0119b7f:	89 c3                	mov    %eax,%ebx
f0119b81:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119b88:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119b8d:	0f b6 d0             	movzbl %al,%edx
f0119b90:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119b93:	01 d0                	add    %edx,%eax
f0119b95:	48                   	dec    %eax
f0119b96:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119b99:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119b9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ba1:	f7 75 b4             	divl   -0x4c(%ebp)
f0119ba4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119ba7:	29 d0                	sub    %edx,%eax
f0119ba9:	01 c3                	add    %eax,%ebx
f0119bab:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0119bb2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119bb7:	0f b6 c0             	movzbl %al,%eax
f0119bba:	c1 e0 04             	shl    $0x4,%eax
f0119bbd:	89 c2                	mov    %eax,%edx
f0119bbf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119bc2:	01 d0                	add    %edx,%eax
f0119bc4:	48                   	dec    %eax
f0119bc5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0119bc8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119bcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bd0:	f7 75 ac             	divl   -0x54(%ebp)
f0119bd3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119bd6:	29 d0                	sub    %edx,%eax
f0119bd8:	01 d8                	add    %ebx,%eax
f0119bda:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0119bdf:	39 c1                	cmp    %eax,%ecx
f0119be1:	74 17                	je     f0119bfa <test_kmalloc_bestfit1+0x346>
f0119be3:	83 ec 04             	sub    $0x4,%esp
f0119be6:	68 90 ad 13 f0       	push   $0xf013ad90
f0119beb:	68 a8 01 00 00       	push   $0x1a8
f0119bf0:	68 76 a9 13 f0       	push   $0xf013a976
f0119bf5:	e8 ac 65 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bfa:	e8 8d a0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119bff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119c02:	74 17                	je     f0119c1b <test_kmalloc_bestfit1+0x367>
f0119c04:	83 ec 04             	sub    $0x4,%esp
f0119c07:	68 90 a9 13 f0       	push   $0xf013a990
f0119c0c:	68 a9 01 00 00       	push   $0x1a9
f0119c11:	68 76 a9 13 f0       	push   $0xf013a976
f0119c16:	e8 8b 65 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119c1b:	e8 c8 28 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119c20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119c23:	29 c2                	sub    %eax,%edx
f0119c25:	89 d0                	mov    %edx,%eax
f0119c27:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119c2c:	74 17                	je     f0119c45 <test_kmalloc_bestfit1+0x391>
f0119c2e:	83 ec 04             	sub    $0x4,%esp
f0119c31:	68 c0 ad 13 f0       	push   $0xf013adc0
f0119c36:	68 aa 01 00 00       	push   $0x1aa
f0119c3b:	68 76 a9 13 f0       	push   $0xf013a976
f0119c40:	e8 61 65 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119c45:	e8 9e 28 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119c4d:	e8 3a a0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119c52:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0119c55:	83 ec 0c             	sub    $0xc,%esp
f0119c58:	68 00 fc 1f 00       	push   $0x1ffc00
f0119c5d:	e8 62 d9 fe ff       	call   f01075c4 <kmalloc>
f0119c62:	83 c4 10             	add    $0x10,%esp
f0119c65:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119c6b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119c71:	89 c1                	mov    %eax,%ecx
f0119c73:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119c7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119c7d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c82:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0119c85:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119c88:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c8d:	f7 75 a4             	divl   -0x5c(%ebp)
f0119c90:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119c93:	29 d0                	sub    %edx,%eax
f0119c95:	89 c3                	mov    %eax,%ebx
f0119c97:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119c9e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119ca3:	0f b6 d0             	movzbl %al,%edx
f0119ca6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119ca9:	01 d0                	add    %edx,%eax
f0119cab:	48                   	dec    %eax
f0119cac:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119caf:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119cb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cb7:	f7 75 9c             	divl   -0x64(%ebp)
f0119cba:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119cbd:	29 d0                	sub    %edx,%eax
f0119cbf:	01 c3                	add    %eax,%ebx
f0119cc1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119cc8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119ccd:	0f b6 c0             	movzbl %al,%eax
f0119cd0:	c1 e0 04             	shl    $0x4,%eax
f0119cd3:	89 c2                	mov    %eax,%edx
f0119cd5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119cd8:	01 d0                	add    %edx,%eax
f0119cda:	48                   	dec    %eax
f0119cdb:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119cde:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119ce1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ce6:	f7 75 94             	divl   -0x6c(%ebp)
f0119ce9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119cec:	29 d0                	sub    %edx,%eax
f0119cee:	01 d8                	add    %ebx,%eax
f0119cf0:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119cf5:	39 c1                	cmp    %eax,%ecx
f0119cf7:	74 17                	je     f0119d10 <test_kmalloc_bestfit1+0x45c>
f0119cf9:	83 ec 04             	sub    $0x4,%esp
f0119cfc:	68 90 ad 13 f0       	push   $0xf013ad90
f0119d01:	68 b0 01 00 00       	push   $0x1b0
f0119d06:	68 76 a9 13 f0       	push   $0xf013a976
f0119d0b:	e8 96 64 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d10:	e8 77 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119d15:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119d18:	74 17                	je     f0119d31 <test_kmalloc_bestfit1+0x47d>
f0119d1a:	83 ec 04             	sub    $0x4,%esp
f0119d1d:	68 90 a9 13 f0       	push   $0xf013a990
f0119d22:	68 b1 01 00 00       	push   $0x1b1
f0119d27:	68 76 a9 13 f0       	push   $0xf013a976
f0119d2c:	e8 75 64 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119d31:	e8 b2 27 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119d36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119d39:	29 c2                	sub    %eax,%edx
f0119d3b:	89 d0                	mov    %edx,%eax
f0119d3d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119d42:	74 17                	je     f0119d5b <test_kmalloc_bestfit1+0x4a7>
f0119d44:	83 ec 04             	sub    $0x4,%esp
f0119d47:	68 c0 ad 13 f0       	push   $0xf013adc0
f0119d4c:	68 b2 01 00 00       	push   $0x1b2
f0119d51:	68 76 a9 13 f0       	push   $0xf013a976
f0119d56:	e8 4b 64 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d5b:	e8 88 27 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119d60:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d63:	e8 24 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119d68:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f0119d6b:	83 ec 0c             	sub    $0xc,%esp
f0119d6e:	68 00 fc 0f 00       	push   $0xffc00
f0119d73:	e8 4c d8 fe ff       	call   f01075c4 <kmalloc>
f0119d78:	83 c4 10             	add    $0x10,%esp
f0119d7b:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f0119d81:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119d87:	89 c1                	mov    %eax,%ecx
f0119d89:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0119d90:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119d93:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d98:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119d9b:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119d9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119da3:	f7 75 8c             	divl   -0x74(%ebp)
f0119da6:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119da9:	29 d0                	sub    %edx,%eax
f0119dab:	89 c3                	mov    %eax,%ebx
f0119dad:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0119db4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119db9:	0f b6 d0             	movzbl %al,%edx
f0119dbc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119dbf:	01 d0                	add    %edx,%eax
f0119dc1:	48                   	dec    %eax
f0119dc2:	89 45 80             	mov    %eax,-0x80(%ebp)
f0119dc5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119dc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dcd:	f7 75 84             	divl   -0x7c(%ebp)
f0119dd0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119dd3:	29 d0                	sub    %edx,%eax
f0119dd5:	01 c3                	add    %eax,%ebx
f0119dd7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0119dde:	10 00 00 
f0119de1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119de6:	0f b6 c0             	movzbl %al,%eax
f0119de9:	c1 e0 04             	shl    $0x4,%eax
f0119dec:	89 c2                	mov    %eax,%edx
f0119dee:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119df4:	01 d0                	add    %edx,%eax
f0119df6:	48                   	dec    %eax
f0119df7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0119dfd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119e03:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e08:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0119e0e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119e14:	29 d0                	sub    %edx,%eax
f0119e16:	01 d8                	add    %ebx,%eax
f0119e18:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f0119e1d:	39 c1                	cmp    %eax,%ecx
f0119e1f:	74 17                	je     f0119e38 <test_kmalloc_bestfit1+0x584>
f0119e21:	83 ec 04             	sub    $0x4,%esp
f0119e24:	68 90 ad 13 f0       	push   $0xf013ad90
f0119e29:	68 b8 01 00 00       	push   $0x1b8
f0119e2e:	68 76 a9 13 f0       	push   $0xf013a976
f0119e33:	e8 6e 63 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e38:	e8 4f 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e40:	74 17                	je     f0119e59 <test_kmalloc_bestfit1+0x5a5>
f0119e42:	83 ec 04             	sub    $0x4,%esp
f0119e45:	68 90 a9 13 f0       	push   $0xf013a990
f0119e4a:	68 b9 01 00 00       	push   $0x1b9
f0119e4f:	68 76 a9 13 f0       	push   $0xf013a976
f0119e54:	e8 4d 63 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119e59:	e8 8a 26 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119e5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e61:	29 c2                	sub    %eax,%edx
f0119e63:	89 d0                	mov    %edx,%eax
f0119e65:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119e6a:	74 17                	je     f0119e83 <test_kmalloc_bestfit1+0x5cf>
f0119e6c:	83 ec 04             	sub    $0x4,%esp
f0119e6f:	68 c0 ad 13 f0       	push   $0xf013adc0
f0119e74:	68 ba 01 00 00       	push   $0x1ba
f0119e79:	68 76 a9 13 f0       	push   $0xf013a976
f0119e7e:	e8 23 63 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119e83:	e8 60 26 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119e88:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e8b:	e8 fc 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f0119e93:	83 ec 0c             	sub    $0xc,%esp
f0119e96:	68 00 fc 0f 00       	push   $0xffc00
f0119e9b:	e8 24 d7 fe ff       	call   f01075c4 <kmalloc>
f0119ea0:	83 c4 10             	add    $0x10,%esp
f0119ea3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0119ea9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119eaf:	89 c1                	mov    %eax,%ecx
f0119eb1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0119eb8:	10 00 00 
f0119ebb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119ec1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ec6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0119ecc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119ed2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ed7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0119edd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119ee3:	29 d0                	sub    %edx,%eax
f0119ee5:	89 c3                	mov    %eax,%ebx
f0119ee7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0119eee:	10 00 00 
f0119ef1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119ef6:	0f b6 d0             	movzbl %al,%edx
f0119ef9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119eff:	01 d0                	add    %edx,%eax
f0119f01:	48                   	dec    %eax
f0119f02:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0119f08:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119f0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f13:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0119f19:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119f1f:	29 d0                	sub    %edx,%eax
f0119f21:	01 c3                	add    %eax,%ebx
f0119f23:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0119f2a:	10 00 00 
f0119f2d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0119f32:	0f b6 c0             	movzbl %al,%eax
f0119f35:	c1 e0 04             	shl    $0x4,%eax
f0119f38:	89 c2                	mov    %eax,%edx
f0119f3a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119f40:	01 d0                	add    %edx,%eax
f0119f42:	48                   	dec    %eax
f0119f43:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0119f49:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119f4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f54:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0119f5a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119f60:	29 d0                	sub    %edx,%eax
f0119f62:	01 d8                	add    %ebx,%eax
f0119f64:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0119f69:	39 c1                	cmp    %eax,%ecx
f0119f6b:	74 17                	je     f0119f84 <test_kmalloc_bestfit1+0x6d0>
f0119f6d:	83 ec 04             	sub    $0x4,%esp
f0119f70:	68 90 ad 13 f0       	push   $0xf013ad90
f0119f75:	68 c0 01 00 00       	push   $0x1c0
f0119f7a:	68 76 a9 13 f0       	push   $0xf013a976
f0119f7f:	e8 22 62 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f84:	e8 03 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119f89:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119f8c:	74 17                	je     f0119fa5 <test_kmalloc_bestfit1+0x6f1>
f0119f8e:	83 ec 04             	sub    $0x4,%esp
f0119f91:	68 90 a9 13 f0       	push   $0xf013a990
f0119f96:	68 c1 01 00 00       	push   $0x1c1
f0119f9b:	68 76 a9 13 f0       	push   $0xf013a976
f0119fa0:	e8 01 62 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119fa5:	e8 3e 25 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119faa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119fad:	29 c2                	sub    %eax,%edx
f0119faf:	89 d0                	mov    %edx,%eax
f0119fb1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119fb6:	74 17                	je     f0119fcf <test_kmalloc_bestfit1+0x71b>
f0119fb8:	83 ec 04             	sub    $0x4,%esp
f0119fbb:	68 c0 ad 13 f0       	push   $0xf013adc0
f0119fc0:	68 c2 01 00 00       	push   $0x1c2
f0119fc5:	68 76 a9 13 f0       	push   $0xf013a976
f0119fca:	e8 d7 61 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119fcf:	e8 14 25 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f0119fd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119fd7:	e8 b0 9c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f0119fdf:	83 ec 0c             	sub    $0xc,%esp
f0119fe2:	68 00 fc 0f 00       	push   $0xffc00
f0119fe7:	e8 d8 d5 fe ff       	call   f01075c4 <kmalloc>
f0119fec:	83 c4 10             	add    $0x10,%esp
f0119fef:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f0119ff5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119ffb:	89 c1                	mov    %eax,%ecx
f0119ffd:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a004:	10 00 00 
f011a007:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a00d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a012:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a018:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a01e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a023:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a029:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a02f:	29 d0                	sub    %edx,%eax
f011a031:	89 c3                	mov    %eax,%ebx
f011a033:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a03a:	10 00 00 
f011a03d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a042:	0f b6 d0             	movzbl %al,%edx
f011a045:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a04b:	01 d0                	add    %edx,%eax
f011a04d:	48                   	dec    %eax
f011a04e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a054:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a05a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a05f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a065:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a06b:	29 d0                	sub    %edx,%eax
f011a06d:	01 c3                	add    %eax,%ebx
f011a06f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a076:	10 00 00 
f011a079:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a07e:	0f b6 c0             	movzbl %al,%eax
f011a081:	c1 e0 04             	shl    $0x4,%eax
f011a084:	89 c2                	mov    %eax,%edx
f011a086:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a08c:	01 d0                	add    %edx,%eax
f011a08e:	48                   	dec    %eax
f011a08f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a095:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a09b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0a0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a0a6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a0ac:	29 d0                	sub    %edx,%eax
f011a0ae:	01 d8                	add    %ebx,%eax
f011a0b0:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a0b5:	39 c1                	cmp    %eax,%ecx
f011a0b7:	74 17                	je     f011a0d0 <test_kmalloc_bestfit1+0x81c>
f011a0b9:	83 ec 04             	sub    $0x4,%esp
f011a0bc:	68 90 ad 13 f0       	push   $0xf013ad90
f011a0c1:	68 c8 01 00 00       	push   $0x1c8
f011a0c6:	68 76 a9 13 f0       	push   $0xf013a976
f011a0cb:	e8 d6 60 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a0d0:	e8 b7 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a0d5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a0d8:	74 17                	je     f011a0f1 <test_kmalloc_bestfit1+0x83d>
f011a0da:	83 ec 04             	sub    $0x4,%esp
f011a0dd:	68 90 a9 13 f0       	push   $0xf013a990
f011a0e2:	68 c9 01 00 00       	push   $0x1c9
f011a0e7:	68 76 a9 13 f0       	push   $0xf013a976
f011a0ec:	e8 b5 60 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a0f1:	e8 f2 23 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a0f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a0f9:	29 c2                	sub    %eax,%edx
f011a0fb:	89 d0                	mov    %edx,%eax
f011a0fd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a102:	74 17                	je     f011a11b <test_kmalloc_bestfit1+0x867>
f011a104:	83 ec 04             	sub    $0x4,%esp
f011a107:	68 c0 ad 13 f0       	push   $0xf013adc0
f011a10c:	68 ca 01 00 00       	push   $0x1ca
f011a111:	68 76 a9 13 f0       	push   $0xf013a976
f011a116:	e8 8b 60 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a11b:	e8 c8 23 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a120:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a123:	e8 64 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a128:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a12b:	83 ec 0c             	sub    $0xc,%esp
f011a12e:	68 00 fc 0f 00       	push   $0xffc00
f011a133:	e8 8c d4 fe ff       	call   f01075c4 <kmalloc>
f011a138:	83 c4 10             	add    $0x10,%esp
f011a13b:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a141:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a147:	89 c1                	mov    %eax,%ecx
f011a149:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a150:	10 00 00 
f011a153:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a159:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a15e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a164:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a16a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a16f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a175:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a17b:	29 d0                	sub    %edx,%eax
f011a17d:	89 c3                	mov    %eax,%ebx
f011a17f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a186:	10 00 00 
f011a189:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a18e:	0f b6 d0             	movzbl %al,%edx
f011a191:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a197:	01 d0                	add    %edx,%eax
f011a199:	48                   	dec    %eax
f011a19a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a1a0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a1a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1ab:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a1b1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a1b7:	29 d0                	sub    %edx,%eax
f011a1b9:	01 c3                	add    %eax,%ebx
f011a1bb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a1c2:	10 00 00 
f011a1c5:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a1ca:	0f b6 c0             	movzbl %al,%eax
f011a1cd:	c1 e0 04             	shl    $0x4,%eax
f011a1d0:	89 c2                	mov    %eax,%edx
f011a1d2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a1d8:	01 d0                	add    %edx,%eax
f011a1da:	48                   	dec    %eax
f011a1db:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a1e1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a1e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1ec:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a1f2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a1f8:	29 d0                	sub    %edx,%eax
f011a1fa:	01 d8                	add    %ebx,%eax
f011a1fc:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a201:	39 c1                	cmp    %eax,%ecx
f011a203:	74 17                	je     f011a21c <test_kmalloc_bestfit1+0x968>
f011a205:	83 ec 04             	sub    $0x4,%esp
f011a208:	68 90 ad 13 f0       	push   $0xf013ad90
f011a20d:	68 d0 01 00 00       	push   $0x1d0
f011a212:	68 76 a9 13 f0       	push   $0xf013a976
f011a217:	e8 8a 5f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a21c:	e8 6b 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a221:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a224:	74 17                	je     f011a23d <test_kmalloc_bestfit1+0x989>
f011a226:	83 ec 04             	sub    $0x4,%esp
f011a229:	68 90 a9 13 f0       	push   $0xf013a990
f011a22e:	68 d1 01 00 00       	push   $0x1d1
f011a233:	68 76 a9 13 f0       	push   $0xf013a976
f011a238:	e8 69 5f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a23d:	e8 a6 22 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a242:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a245:	29 c2                	sub    %eax,%edx
f011a247:	89 d0                	mov    %edx,%eax
f011a249:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a24e:	74 17                	je     f011a267 <test_kmalloc_bestfit1+0x9b3>
f011a250:	83 ec 04             	sub    $0x4,%esp
f011a253:	68 c0 ad 13 f0       	push   $0xf013adc0
f011a258:	68 d2 01 00 00       	push   $0x1d2
f011a25d:	68 76 a9 13 f0       	push   $0xf013a976
f011a262:	e8 3f 5f fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a267:	e8 7c 22 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a26c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a26f:	e8 18 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a274:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a277:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a27d:	83 ec 0c             	sub    $0xc,%esp
f011a280:	50                   	push   %eax
f011a281:	e8 58 d3 fe ff       	call   f01075de <kfree>
f011a286:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a289:	e8 fe 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a28e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a291:	74 17                	je     f011a2aa <test_kmalloc_bestfit1+0x9f6>
f011a293:	83 ec 04             	sub    $0x4,%esp
f011a296:	68 90 a9 13 f0       	push   $0xf013a990
f011a29b:	68 db 01 00 00       	push   $0x1db
f011a2a0:	68 76 a9 13 f0       	push   $0xf013a976
f011a2a5:	e8 fc 5e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a2aa:	e8 39 22 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a2af:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a2b2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a2b7:	74 17                	je     f011a2d0 <test_kmalloc_bestfit1+0xa1c>
f011a2b9:	83 ec 04             	sub    $0x4,%esp
f011a2bc:	68 d3 ad 13 f0       	push   $0xf013add3
f011a2c1:	68 dc 01 00 00       	push   $0x1dc
f011a2c6:	68 76 a9 13 f0       	push   $0xf013a976
f011a2cb:	e8 d6 5e fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a2d0:	e8 13 22 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a2d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a2d8:	e8 af 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a2dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011a2e0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a2e6:	83 ec 0c             	sub    $0xc,%esp
f011a2e9:	50                   	push   %eax
f011a2ea:	e8 ef d2 fe ff       	call   f01075de <kfree>
f011a2ef:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2f2:	e8 95 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a2f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a2fa:	74 17                	je     f011a313 <test_kmalloc_bestfit1+0xa5f>
f011a2fc:	83 ec 04             	sub    $0x4,%esp
f011a2ff:	68 90 a9 13 f0       	push   $0xf013a990
f011a304:	68 e2 01 00 00       	push   $0x1e2
f011a309:	68 76 a9 13 f0       	push   $0xf013a976
f011a30e:	e8 93 5e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a313:	e8 d0 21 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a318:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a31b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a320:	74 17                	je     f011a339 <test_kmalloc_bestfit1+0xa85>
f011a322:	83 ec 04             	sub    $0x4,%esp
f011a325:	68 d3 ad 13 f0       	push   $0xf013add3
f011a32a:	68 e3 01 00 00       	push   $0x1e3
f011a32f:	68 76 a9 13 f0       	push   $0xf013a976
f011a334:	e8 6d 5e fe ff       	call   f01001a6 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a339:	e8 aa 21 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a33e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a341:	e8 46 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a346:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011a349:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a34f:	83 ec 0c             	sub    $0xc,%esp
f011a352:	50                   	push   %eax
f011a353:	e8 86 d2 fe ff       	call   f01075de <kfree>
f011a358:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a35b:	e8 2c 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a360:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a363:	74 17                	je     f011a37c <test_kmalloc_bestfit1+0xac8>
f011a365:	83 ec 04             	sub    $0x4,%esp
f011a368:	68 90 a9 13 f0       	push   $0xf013a990
f011a36d:	68 e9 01 00 00       	push   $0x1e9
f011a372:	68 76 a9 13 f0       	push   $0xf013a976
f011a377:	e8 2a 5e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a37c:	e8 67 21 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a381:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a384:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a389:	74 17                	je     f011a3a2 <test_kmalloc_bestfit1+0xaee>
f011a38b:	83 ec 04             	sub    $0x4,%esp
f011a38e:	68 d3 ad 13 f0       	push   $0xf013add3
f011a393:	68 ea 01 00 00       	push   $0x1ea
f011a398:	68 76 a9 13 f0       	push   $0xf013a976
f011a39d:	e8 04 5e fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a3a2:	e8 41 21 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a3a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a3aa:	e8 dd 98 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a3af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011a3b2:	83 ec 0c             	sub    $0xc,%esp
f011a3b5:	68 00 00 08 00       	push   $0x80000
f011a3ba:	e8 05 d2 fe ff       	call   f01075c4 <kmalloc>
f011a3bf:	83 c4 10             	add    $0x10,%esp
f011a3c2:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a3c8:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a3ce:	89 c1                	mov    %eax,%ecx
f011a3d0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a3d7:	10 00 00 
f011a3da:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a3e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a3e5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a3eb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a3f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3f6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a3fc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a402:	29 d0                	sub    %edx,%eax
f011a404:	89 c3                	mov    %eax,%ebx
f011a406:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011a40d:	10 00 00 
f011a410:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a415:	0f b6 d0             	movzbl %al,%edx
f011a418:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a41e:	01 d0                	add    %edx,%eax
f011a420:	48                   	dec    %eax
f011a421:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a427:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a42d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a432:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a438:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a43e:	29 d0                	sub    %edx,%eax
f011a440:	01 c3                	add    %eax,%ebx
f011a442:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a449:	10 00 00 
f011a44c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a451:	0f b6 c0             	movzbl %al,%eax
f011a454:	c1 e0 04             	shl    $0x4,%eax
f011a457:	89 c2                	mov    %eax,%edx
f011a459:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a45f:	01 d0                	add    %edx,%eax
f011a461:	48                   	dec    %eax
f011a462:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a468:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a46e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a473:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a479:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a47f:	29 d0                	sub    %edx,%eax
f011a481:	01 d8                	add    %ebx,%eax
f011a483:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a488:	39 c1                	cmp    %eax,%ecx
f011a48a:	74 17                	je     f011a4a3 <test_kmalloc_bestfit1+0xbef>
f011a48c:	83 ec 04             	sub    $0x4,%esp
f011a48f:	68 90 ad 13 f0       	push   $0xf013ad90
f011a494:	68 f3 01 00 00       	push   $0x1f3
f011a499:	68 76 a9 13 f0       	push   $0xf013a976
f011a49e:	e8 03 5d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4a3:	e8 e4 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a4a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a4ab:	74 17                	je     f011a4c4 <test_kmalloc_bestfit1+0xc10>
f011a4ad:	83 ec 04             	sub    $0x4,%esp
f011a4b0:	68 90 a9 13 f0       	push   $0xf013a990
f011a4b5:	68 f4 01 00 00       	push   $0x1f4
f011a4ba:	68 76 a9 13 f0       	push   $0xf013a976
f011a4bf:	e8 e2 5c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a4c4:	e8 1f 20 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a4c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a4cc:	29 c2                	sub    %eax,%edx
f011a4ce:	89 d0                	mov    %edx,%eax
f011a4d0:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a4d5:	74 17                	je     f011a4ee <test_kmalloc_bestfit1+0xc3a>
f011a4d7:	83 ec 04             	sub    $0x4,%esp
f011a4da:	68 c0 ad 13 f0       	push   $0xf013adc0
f011a4df:	68 f5 01 00 00       	push   $0x1f5
f011a4e4:	68 76 a9 13 f0       	push   $0xf013a976
f011a4e9:	e8 b8 5c fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a4ee:	e8 f5 1f ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a4f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4f6:	e8 91 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a4fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a4fe:	83 ec 0c             	sub    $0xc,%esp
f011a501:	68 00 fc 0f 00       	push   $0xffc00
f011a506:	e8 b9 d0 fe ff       	call   f01075c4 <kmalloc>
f011a50b:	83 c4 10             	add    $0x10,%esp
f011a50e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a514:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a51a:	89 c1                	mov    %eax,%ecx
f011a51c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a523:	10 00 00 
f011a526:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a52c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a531:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a537:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a53d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a542:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a548:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a54e:	29 d0                	sub    %edx,%eax
f011a550:	89 c3                	mov    %eax,%ebx
f011a552:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a559:	10 00 00 
f011a55c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a561:	0f b6 d0             	movzbl %al,%edx
f011a564:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a56a:	01 d0                	add    %edx,%eax
f011a56c:	48                   	dec    %eax
f011a56d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a573:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a579:	ba 00 00 00 00       	mov    $0x0,%edx
f011a57e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a584:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a58a:	29 d0                	sub    %edx,%eax
f011a58c:	01 c3                	add    %eax,%ebx
f011a58e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a595:	10 00 00 
f011a598:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a59d:	0f b6 c0             	movzbl %al,%eax
f011a5a0:	c1 e0 04             	shl    $0x4,%eax
f011a5a3:	89 c2                	mov    %eax,%edx
f011a5a5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a5ab:	01 d0                	add    %edx,%eax
f011a5ad:	48                   	dec    %eax
f011a5ae:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a5b4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a5ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5bf:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a5c5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a5cb:	29 d0                	sub    %edx,%eax
f011a5cd:	01 d8                	add    %ebx,%eax
f011a5cf:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a5d4:	39 c1                	cmp    %eax,%ecx
f011a5d6:	74 17                	je     f011a5ef <test_kmalloc_bestfit1+0xd3b>
f011a5d8:	83 ec 04             	sub    $0x4,%esp
f011a5db:	68 90 ad 13 f0       	push   $0xf013ad90
f011a5e0:	68 fb 01 00 00       	push   $0x1fb
f011a5e5:	68 76 a9 13 f0       	push   $0xf013a976
f011a5ea:	e8 b7 5b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5ef:	e8 98 96 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a5f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a5f7:	74 17                	je     f011a610 <test_kmalloc_bestfit1+0xd5c>
f011a5f9:	83 ec 04             	sub    $0x4,%esp
f011a5fc:	68 90 a9 13 f0       	push   $0xf013a990
f011a601:	68 fc 01 00 00       	push   $0x1fc
f011a606:	68 76 a9 13 f0       	push   $0xf013a976
f011a60b:	e8 96 5b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a610:	e8 d3 1e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a615:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a618:	29 c2                	sub    %eax,%edx
f011a61a:	89 d0                	mov    %edx,%eax
f011a61c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a621:	74 17                	je     f011a63a <test_kmalloc_bestfit1+0xd86>
f011a623:	83 ec 04             	sub    $0x4,%esp
f011a626:	68 c0 ad 13 f0       	push   $0xf013adc0
f011a62b:	68 fd 01 00 00       	push   $0x1fd
f011a630:	68 76 a9 13 f0       	push   $0xf013a976
f011a635:	e8 6c 5b fe ff       	call   f01001a6 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a63a:	e8 a9 1e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a63f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a642:	e8 45 96 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a647:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011a64a:	83 ec 0c             	sub    $0xc,%esp
f011a64d:	68 00 fc 03 00       	push   $0x3fc00
f011a652:	e8 6d cf fe ff       	call   f01075c4 <kmalloc>
f011a657:	83 c4 10             	add    $0x10,%esp
f011a65a:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011a660:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011a666:	89 c1                	mov    %eax,%ecx
f011a668:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a66f:	10 00 00 
f011a672:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a678:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a67d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a683:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a689:	ba 00 00 00 00       	mov    $0x0,%edx
f011a68e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a694:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a69a:	29 d0                	sub    %edx,%eax
f011a69c:	89 c3                	mov    %eax,%ebx
f011a69e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a6a5:	10 00 00 
f011a6a8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a6ad:	0f b6 d0             	movzbl %al,%edx
f011a6b0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a6b6:	01 d0                	add    %edx,%eax
f011a6b8:	48                   	dec    %eax
f011a6b9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a6bf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a6c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6ca:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a6d0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a6d6:	29 d0                	sub    %edx,%eax
f011a6d8:	01 c3                	add    %eax,%ebx
f011a6da:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a6e1:	10 00 00 
f011a6e4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a6e9:	0f b6 c0             	movzbl %al,%eax
f011a6ec:	c1 e0 04             	shl    $0x4,%eax
f011a6ef:	89 c2                	mov    %eax,%edx
f011a6f1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a6f7:	01 d0                	add    %edx,%eax
f011a6f9:	48                   	dec    %eax
f011a6fa:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a700:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a706:	ba 00 00 00 00       	mov    $0x0,%edx
f011a70b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a711:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a717:	29 d0                	sub    %edx,%eax
f011a719:	01 d8                	add    %ebx,%eax
f011a71b:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011a720:	39 c1                	cmp    %eax,%ecx
f011a722:	74 17                	je     f011a73b <test_kmalloc_bestfit1+0xe87>
f011a724:	83 ec 04             	sub    $0x4,%esp
f011a727:	68 90 ad 13 f0       	push   $0xf013ad90
f011a72c:	68 03 02 00 00       	push   $0x203
f011a731:	68 76 a9 13 f0       	push   $0xf013a976
f011a736:	e8 6b 5a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a73b:	e8 4c 95 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a740:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a743:	74 17                	je     f011a75c <test_kmalloc_bestfit1+0xea8>
f011a745:	83 ec 04             	sub    $0x4,%esp
f011a748:	68 90 a9 13 f0       	push   $0xf013a990
f011a74d:	68 04 02 00 00       	push   $0x204
f011a752:	68 76 a9 13 f0       	push   $0xf013a976
f011a757:	e8 4a 5a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011a75c:	e8 87 1d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a761:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a764:	29 c2                	sub    %eax,%edx
f011a766:	89 d0                	mov    %edx,%eax
f011a768:	83 f8 40             	cmp    $0x40,%eax
f011a76b:	74 17                	je     f011a784 <test_kmalloc_bestfit1+0xed0>
f011a76d:	83 ec 04             	sub    $0x4,%esp
f011a770:	68 c0 ad 13 f0       	push   $0xf013adc0
f011a775:	68 05 02 00 00       	push   $0x205
f011a77a:	68 76 a9 13 f0       	push   $0xf013a976
f011a77f:	e8 22 5a fe ff       	call   f01001a6 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011a784:	e8 5f 1d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a789:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a78c:	e8 fb 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a791:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011a794:	83 ec 0c             	sub    $0xc,%esp
f011a797:	68 00 fc 3f 00       	push   $0x3ffc00
f011a79c:	e8 23 ce fe ff       	call   f01075c4 <kmalloc>
f011a7a1:	83 c4 10             	add    $0x10,%esp
f011a7a4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011a7aa:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011a7b0:	89 c1                	mov    %eax,%ecx
f011a7b2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a7b9:	10 00 00 
f011a7bc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a7c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a7c7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a7cd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a7d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7d8:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a7de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a7e4:	29 d0                	sub    %edx,%eax
f011a7e6:	89 c3                	mov    %eax,%ebx
f011a7e8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a7ef:	10 00 00 
f011a7f2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a7f7:	0f b6 d0             	movzbl %al,%edx
f011a7fa:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a800:	01 d0                	add    %edx,%eax
f011a802:	48                   	dec    %eax
f011a803:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a809:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a80f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a814:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a81a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a820:	29 d0                	sub    %edx,%eax
f011a822:	01 c3                	add    %eax,%ebx
f011a824:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a82b:	10 00 00 
f011a82e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011a833:	0f b6 c0             	movzbl %al,%eax
f011a836:	c1 e0 04             	shl    $0x4,%eax
f011a839:	89 c2                	mov    %eax,%edx
f011a83b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a841:	01 d0                	add    %edx,%eax
f011a843:	48                   	dec    %eax
f011a844:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a84a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a850:	ba 00 00 00 00       	mov    $0x0,%edx
f011a855:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a85b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a861:	29 d0                	sub    %edx,%eax
f011a863:	01 d8                	add    %ebx,%eax
f011a865:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011a86a:	39 c1                	cmp    %eax,%ecx
f011a86c:	74 17                	je     f011a885 <test_kmalloc_bestfit1+0xfd1>
f011a86e:	83 ec 04             	sub    $0x4,%esp
f011a871:	68 90 ad 13 f0       	push   $0xf013ad90
f011a876:	68 0b 02 00 00       	push   $0x20b
f011a87b:	68 76 a9 13 f0       	push   $0xf013a976
f011a880:	e8 21 59 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a885:	e8 02 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a88a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a88d:	74 17                	je     f011a8a6 <test_kmalloc_bestfit1+0xff2>
f011a88f:	83 ec 04             	sub    $0x4,%esp
f011a892:	68 90 a9 13 f0       	push   $0xf013a990
f011a897:	68 0c 02 00 00       	push   $0x20c
f011a89c:	68 76 a9 13 f0       	push   $0xf013a976
f011a8a1:	e8 00 59 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011a8a6:	e8 3d 1c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a8ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a8ae:	29 c2                	sub    %eax,%edx
f011a8b0:	89 d0                	mov    %edx,%eax
f011a8b2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a8b7:	74 17                	je     f011a8d0 <test_kmalloc_bestfit1+0x101c>
f011a8b9:	83 ec 04             	sub    $0x4,%esp
f011a8bc:	68 c0 ad 13 f0       	push   $0xf013adc0
f011a8c1:	68 0d 02 00 00       	push   $0x20d
f011a8c6:	68 76 a9 13 f0       	push   $0xf013a976
f011a8cb:	e8 d6 58 fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011a8d0:	e8 13 1c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a8d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a8d8:	e8 af 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a8dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011a8e0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a8e6:	83 ec 0c             	sub    $0xc,%esp
f011a8e9:	50                   	push   %eax
f011a8ea:	e8 ef cc fe ff       	call   f01075de <kfree>
f011a8ef:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8f2:	e8 95 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a8f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8fa:	74 17                	je     f011a913 <test_kmalloc_bestfit1+0x105f>
f011a8fc:	83 ec 04             	sub    $0x4,%esp
f011a8ff:	68 90 a9 13 f0       	push   $0xf013a990
f011a904:	68 16 02 00 00       	push   $0x216
f011a909:	68 76 a9 13 f0       	push   $0xf013a976
f011a90e:	e8 93 58 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a913:	e8 d0 1b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a918:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a91b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a920:	74 17                	je     f011a939 <test_kmalloc_bestfit1+0x1085>
f011a922:	83 ec 04             	sub    $0x4,%esp
f011a925:	68 d3 ad 13 f0       	push   $0xf013add3
f011a92a:	68 17 02 00 00       	push   $0x217
f011a92f:	68 76 a9 13 f0       	push   $0xf013a976
f011a934:	e8 6d 58 fe ff       	call   f01001a6 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011a939:	e8 aa 1b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a93e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a941:	e8 46 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a946:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011a949:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a94f:	83 ec 0c             	sub    $0xc,%esp
f011a952:	50                   	push   %eax
f011a953:	e8 86 cc fe ff       	call   f01075de <kfree>
f011a958:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a95b:	e8 2c 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a960:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a963:	74 17                	je     f011a97c <test_kmalloc_bestfit1+0x10c8>
f011a965:	83 ec 04             	sub    $0x4,%esp
f011a968:	68 90 a9 13 f0       	push   $0xf013a990
f011a96d:	68 1d 02 00 00       	push   $0x21d
f011a972:	68 76 a9 13 f0       	push   $0xf013a976
f011a977:	e8 2a 58 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011a97c:	e8 67 1b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a981:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a984:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a989:	74 17                	je     f011a9a2 <test_kmalloc_bestfit1+0x10ee>
f011a98b:	83 ec 04             	sub    $0x4,%esp
f011a98e:	68 d3 ad 13 f0       	push   $0xf013add3
f011a993:	68 1e 02 00 00       	push   $0x21e
f011a998:	68 76 a9 13 f0       	push   $0xf013a976
f011a99d:	e8 04 58 fe ff       	call   f01001a6 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011a9a2:	e8 41 1b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011a9a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9aa:	e8 dd 92 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a9af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011a9b2:	83 ec 0c             	sub    $0xc,%esp
f011a9b5:	68 00 fc 1f 00       	push   $0x1ffc00
f011a9ba:	e8 05 cc fe ff       	call   f01075c4 <kmalloc>
f011a9bf:	83 c4 10             	add    $0x10,%esp
f011a9c2:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011a9c8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011a9ce:	89 c1                	mov    %eax,%ecx
f011a9d0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a9d7:	10 00 00 
f011a9da:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a9e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a9e5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a9eb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a9f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9f6:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a9fc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011aa02:	29 d0                	sub    %edx,%eax
f011aa04:	89 c3                	mov    %eax,%ebx
f011aa06:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011aa0d:	10 00 00 
f011aa10:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011aa15:	0f b6 d0             	movzbl %al,%edx
f011aa18:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011aa1e:	01 d0                	add    %edx,%eax
f011aa20:	48                   	dec    %eax
f011aa21:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011aa27:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011aa2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa32:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011aa38:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011aa3e:	29 d0                	sub    %edx,%eax
f011aa40:	01 c3                	add    %eax,%ebx
f011aa42:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011aa49:	10 00 00 
f011aa4c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011aa51:	0f b6 c0             	movzbl %al,%eax
f011aa54:	c1 e0 04             	shl    $0x4,%eax
f011aa57:	89 c2                	mov    %eax,%edx
f011aa59:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011aa5f:	01 d0                	add    %edx,%eax
f011aa61:	48                   	dec    %eax
f011aa62:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011aa68:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011aa6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa73:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011aa79:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011aa7f:	29 d0                	sub    %edx,%eax
f011aa81:	01 d8                	add    %ebx,%eax
f011aa83:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011aa88:	39 c1                	cmp    %eax,%ecx
f011aa8a:	74 17                	je     f011aaa3 <test_kmalloc_bestfit1+0x11ef>
f011aa8c:	83 ec 04             	sub    $0x4,%esp
f011aa8f:	68 90 ad 13 f0       	push   $0xf013ad90
f011aa94:	68 27 02 00 00       	push   $0x227
f011aa99:	68 76 a9 13 f0       	push   $0xf013a976
f011aa9e:	e8 03 57 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aaa3:	e8 e4 91 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aaa8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aaab:	74 17                	je     f011aac4 <test_kmalloc_bestfit1+0x1210>
f011aaad:	83 ec 04             	sub    $0x4,%esp
f011aab0:	68 90 a9 13 f0       	push   $0xf013a990
f011aab5:	68 28 02 00 00       	push   $0x228
f011aaba:	68 76 a9 13 f0       	push   $0xf013a976
f011aabf:	e8 e2 56 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011aac4:	e8 1f 1a ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011aac9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aacc:	29 c2                	sub    %eax,%edx
f011aace:	89 d0                	mov    %edx,%eax
f011aad0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aad5:	74 17                	je     f011aaee <test_kmalloc_bestfit1+0x123a>
f011aad7:	83 ec 04             	sub    $0x4,%esp
f011aada:	68 c0 ad 13 f0       	push   $0xf013adc0
f011aadf:	68 29 02 00 00       	push   $0x229
f011aae4:	68 76 a9 13 f0       	push   $0xf013a976
f011aae9:	e8 b8 56 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011aaee:	83 ec 0c             	sub    $0xc,%esp
f011aaf1:	68 e0 ad 13 f0       	push   $0xf013ade0
f011aaf6:	e8 32 61 fe ff       	call   f0100c2d <cprintf>
f011aafb:	83 c4 10             	add    $0x10,%esp

	return 1;
f011aafe:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ab03:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ab06:	5b                   	pop    %ebx
f011ab07:	5f                   	pop    %edi
f011ab08:	5d                   	pop    %ebp
f011ab09:	c3                   	ret    

f011ab0a <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011ab0a:	55                   	push   %ebp
f011ab0b:	89 e5                	mov    %esp,%ebp
f011ab0d:	57                   	push   %edi
f011ab0e:	53                   	push   %ebx
f011ab0f:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011ab15:	83 ec 0c             	sub    $0xc,%esp
f011ab18:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011ab1d:	e8 0b 61 fe ff       	call   f0100c2d <cprintf>
f011ab22:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ab25:	83 ec 0c             	sub    $0xc,%esp
f011ab28:	68 e8 a8 13 f0       	push   $0xf013a8e8
f011ab2d:	e8 fb 60 fe ff       	call   f0100c2d <cprintf>
f011ab32:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ab35:	83 ec 0c             	sub    $0xc,%esp
f011ab38:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011ab3d:	e8 eb 60 fe ff       	call   f0100c2d <cprintf>
f011ab42:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ab45:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011ab4b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ab50:	b8 00 00 00 00       	mov    $0x0,%eax
f011ab55:	89 d7                	mov    %edx,%edi
f011ab57:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011ab59:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011ab60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ab63:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab68:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ab6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ab6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab73:	f7 75 f4             	divl   -0xc(%ebp)
f011ab76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ab79:	29 d0                	sub    %edx,%eax
f011ab7b:	89 c1                	mov    %eax,%ecx
f011ab7d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ab84:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ab89:	0f b6 d0             	movzbl %al,%edx
f011ab8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ab8f:	01 d0                	add    %edx,%eax
f011ab91:	48                   	dec    %eax
f011ab92:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ab95:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ab98:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab9d:	f7 75 ec             	divl   -0x14(%ebp)
f011aba0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011aba3:	29 d0                	sub    %edx,%eax
f011aba5:	01 c1                	add    %eax,%ecx
f011aba7:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011abae:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011abb3:	0f b6 c0             	movzbl %al,%eax
f011abb6:	c1 e0 04             	shl    $0x4,%eax
f011abb9:	89 c2                	mov    %eax,%edx
f011abbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011abbe:	01 d0                	add    %edx,%eax
f011abc0:	48                   	dec    %eax
f011abc1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011abc4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011abc7:	ba 00 00 00 00       	mov    $0x0,%edx
f011abcc:	f7 75 e4             	divl   -0x1c(%ebp)
f011abcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011abd2:	29 d0                	sub    %edx,%eax
f011abd4:	01 c8                	add    %ecx,%eax
f011abd6:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011abdb:	29 c2                	sub    %eax,%edx
f011abdd:	89 d0                	mov    %edx,%eax
f011abdf:	83 ec 0c             	sub    $0xc,%esp
f011abe2:	50                   	push   %eax
f011abe3:	e8 dc c9 fe ff       	call   f01075c4 <kmalloc>
f011abe8:	83 c4 10             	add    $0x10,%esp
f011abeb:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011abf1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011abf7:	85 c0                	test   %eax,%eax
f011abf9:	74 17                	je     f011ac12 <test_kmalloc_bestfit2+0x108>
f011abfb:	83 ec 04             	sub    $0x4,%esp
f011abfe:	68 28 ae 13 f0       	push   $0xf013ae28
f011ac03:	68 3f 02 00 00       	push   $0x23f
f011ac08:	68 76 a9 13 f0       	push   $0xf013a976
f011ac0d:	e8 94 55 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac12:	e8 d1 18 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ac17:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ac1a:	e8 6d 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ac1f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ac22:	83 ec 0c             	sub    $0xc,%esp
f011ac25:	68 00 fc 1f 00       	push   $0x1ffc00
f011ac2a:	e8 95 c9 fe ff       	call   f01075c4 <kmalloc>
f011ac2f:	83 c4 10             	add    $0x10,%esp
f011ac32:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ac38:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ac3e:	89 c1                	mov    %eax,%ecx
f011ac40:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ac47:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ac4a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ac52:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ac55:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac5a:	f7 75 d4             	divl   -0x2c(%ebp)
f011ac5d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ac60:	29 d0                	sub    %edx,%eax
f011ac62:	89 c3                	mov    %eax,%ebx
f011ac64:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ac6b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ac70:	0f b6 d0             	movzbl %al,%edx
f011ac73:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ac76:	01 d0                	add    %edx,%eax
f011ac78:	48                   	dec    %eax
f011ac79:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ac7c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ac7f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac84:	f7 75 cc             	divl   -0x34(%ebp)
f011ac87:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ac8a:	29 d0                	sub    %edx,%eax
f011ac8c:	01 c3                	add    %eax,%ebx
f011ac8e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ac95:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ac9a:	0f b6 c0             	movzbl %al,%eax
f011ac9d:	c1 e0 04             	shl    $0x4,%eax
f011aca0:	89 c2                	mov    %eax,%edx
f011aca2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aca5:	01 d0                	add    %edx,%eax
f011aca7:	48                   	dec    %eax
f011aca8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011acab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011acae:	ba 00 00 00 00       	mov    $0x0,%edx
f011acb3:	f7 75 c4             	divl   -0x3c(%ebp)
f011acb6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011acb9:	29 d0                	sub    %edx,%eax
f011acbb:	01 d8                	add    %ebx,%eax
f011acbd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011acc2:	39 c1                	cmp    %eax,%ecx
f011acc4:	74 17                	je     f011acdd <test_kmalloc_bestfit2+0x1d3>
f011acc6:	83 ec 04             	sub    $0x4,%esp
f011acc9:	68 90 ad 13 f0       	push   $0xf013ad90
f011acce:	68 49 02 00 00       	push   $0x249
f011acd3:	68 76 a9 13 f0       	push   $0xf013a976
f011acd8:	e8 c9 54 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acdd:	e8 aa 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ace2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ace5:	74 17                	je     f011acfe <test_kmalloc_bestfit2+0x1f4>
f011ace7:	83 ec 04             	sub    $0x4,%esp
f011acea:	68 90 a9 13 f0       	push   $0xf013a990
f011acef:	68 4a 02 00 00       	push   $0x24a
f011acf4:	68 76 a9 13 f0       	push   $0xf013a976
f011acf9:	e8 a8 54 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011acfe:	e8 e5 17 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ad03:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ad06:	29 c2                	sub    %eax,%edx
f011ad08:	89 d0                	mov    %edx,%eax
f011ad0a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ad0f:	74 17                	je     f011ad28 <test_kmalloc_bestfit2+0x21e>
f011ad11:	83 ec 04             	sub    $0x4,%esp
f011ad14:	68 c0 ad 13 f0       	push   $0xf013adc0
f011ad19:	68 4b 02 00 00       	push   $0x24b
f011ad1e:	68 76 a9 13 f0       	push   $0xf013a976
f011ad23:	e8 7e 54 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad28:	e8 bb 17 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ad2d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ad30:	e8 57 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ad35:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011ad38:	83 ec 0c             	sub    $0xc,%esp
f011ad3b:	68 00 fc 1f 00       	push   $0x1ffc00
f011ad40:	e8 7f c8 fe ff       	call   f01075c4 <kmalloc>
f011ad45:	83 c4 10             	add    $0x10,%esp
f011ad48:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011ad4e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ad54:	89 c1                	mov    %eax,%ecx
f011ad56:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ad5d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ad60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad65:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ad68:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ad6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad70:	f7 75 bc             	divl   -0x44(%ebp)
f011ad73:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ad76:	29 d0                	sub    %edx,%eax
f011ad78:	89 c3                	mov    %eax,%ebx
f011ad7a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ad81:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ad86:	0f b6 d0             	movzbl %al,%edx
f011ad89:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ad8c:	01 d0                	add    %edx,%eax
f011ad8e:	48                   	dec    %eax
f011ad8f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ad92:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ad95:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad9a:	f7 75 b4             	divl   -0x4c(%ebp)
f011ad9d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ada0:	29 d0                	sub    %edx,%eax
f011ada2:	01 c3                	add    %eax,%ebx
f011ada4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011adab:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011adb0:	0f b6 c0             	movzbl %al,%eax
f011adb3:	c1 e0 04             	shl    $0x4,%eax
f011adb6:	89 c2                	mov    %eax,%edx
f011adb8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011adbb:	01 d0                	add    %edx,%eax
f011adbd:	48                   	dec    %eax
f011adbe:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011adc1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011adc4:	ba 00 00 00 00       	mov    $0x0,%edx
f011adc9:	f7 75 ac             	divl   -0x54(%ebp)
f011adcc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011adcf:	29 d0                	sub    %edx,%eax
f011add1:	01 d8                	add    %ebx,%eax
f011add3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011add8:	39 c1                	cmp    %eax,%ecx
f011adda:	74 17                	je     f011adf3 <test_kmalloc_bestfit2+0x2e9>
f011addc:	83 ec 04             	sub    $0x4,%esp
f011addf:	68 90 ad 13 f0       	push   $0xf013ad90
f011ade4:	68 51 02 00 00       	push   $0x251
f011ade9:	68 76 a9 13 f0       	push   $0xf013a976
f011adee:	e8 b3 53 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adf3:	e8 94 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011adf8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011adfb:	74 17                	je     f011ae14 <test_kmalloc_bestfit2+0x30a>
f011adfd:	83 ec 04             	sub    $0x4,%esp
f011ae00:	68 90 a9 13 f0       	push   $0xf013a990
f011ae05:	68 52 02 00 00       	push   $0x252
f011ae0a:	68 76 a9 13 f0       	push   $0xf013a976
f011ae0f:	e8 92 53 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011ae14:	e8 cf 16 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ae19:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ae1c:	29 c2                	sub    %eax,%edx
f011ae1e:	89 d0                	mov    %edx,%eax
f011ae20:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ae25:	74 17                	je     f011ae3e <test_kmalloc_bestfit2+0x334>
f011ae27:	83 ec 04             	sub    $0x4,%esp
f011ae2a:	68 c0 ad 13 f0       	push   $0xf013adc0
f011ae2f:	68 53 02 00 00       	push   $0x253
f011ae34:	68 76 a9 13 f0       	push   $0xf013a976
f011ae39:	e8 68 53 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ae3e:	e8 a5 16 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ae43:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ae46:	e8 41 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ae4b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011ae4e:	83 ec 0c             	sub    $0xc,%esp
f011ae51:	68 00 08 00 00       	push   $0x800
f011ae56:	e8 69 c7 fe ff       	call   f01075c4 <kmalloc>
f011ae5b:	83 c4 10             	add    $0x10,%esp
f011ae5e:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ae64:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ae6a:	89 c1                	mov    %eax,%ecx
f011ae6c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ae73:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ae76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae7b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ae7e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ae81:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae86:	f7 75 a4             	divl   -0x5c(%ebp)
f011ae89:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ae8c:	29 d0                	sub    %edx,%eax
f011ae8e:	89 c3                	mov    %eax,%ebx
f011ae90:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ae97:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ae9c:	0f b6 d0             	movzbl %al,%edx
f011ae9f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011aea2:	01 d0                	add    %edx,%eax
f011aea4:	48                   	dec    %eax
f011aea5:	89 45 98             	mov    %eax,-0x68(%ebp)
f011aea8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aeab:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeb0:	f7 75 9c             	divl   -0x64(%ebp)
f011aeb3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aeb6:	29 d0                	sub    %edx,%eax
f011aeb8:	01 c3                	add    %eax,%ebx
f011aeba:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011aec1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011aec6:	0f b6 c0             	movzbl %al,%eax
f011aec9:	c1 e0 04             	shl    $0x4,%eax
f011aecc:	89 c2                	mov    %eax,%edx
f011aece:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011aed1:	01 d0                	add    %edx,%eax
f011aed3:	48                   	dec    %eax
f011aed4:	89 45 90             	mov    %eax,-0x70(%ebp)
f011aed7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011aeda:	ba 00 00 00 00       	mov    $0x0,%edx
f011aedf:	f7 75 94             	divl   -0x6c(%ebp)
f011aee2:	8b 45 90             	mov    -0x70(%ebp),%eax
f011aee5:	29 d0                	sub    %edx,%eax
f011aee7:	01 d8                	add    %ebx,%eax
f011aee9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011aeee:	39 c1                	cmp    %eax,%ecx
f011aef0:	74 17                	je     f011af09 <test_kmalloc_bestfit2+0x3ff>
f011aef2:	83 ec 04             	sub    $0x4,%esp
f011aef5:	68 90 ad 13 f0       	push   $0xf013ad90
f011aefa:	68 59 02 00 00       	push   $0x259
f011aeff:	68 76 a9 13 f0       	push   $0xf013a976
f011af04:	e8 9d 52 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af09:	e8 7e 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af0e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af11:	74 17                	je     f011af2a <test_kmalloc_bestfit2+0x420>
f011af13:	83 ec 04             	sub    $0x4,%esp
f011af16:	68 90 a9 13 f0       	push   $0xf013a990
f011af1b:	68 5a 02 00 00       	push   $0x25a
f011af20:	68 76 a9 13 f0       	push   $0xf013a976
f011af25:	e8 7c 52 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011af2a:	e8 b9 15 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011af2f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011af32:	29 c2                	sub    %eax,%edx
f011af34:	89 d0                	mov    %edx,%eax
f011af36:	83 f8 01             	cmp    $0x1,%eax
f011af39:	74 17                	je     f011af52 <test_kmalloc_bestfit2+0x448>
f011af3b:	83 ec 04             	sub    $0x4,%esp
f011af3e:	68 c0 ad 13 f0       	push   $0xf013adc0
f011af43:	68 5b 02 00 00       	push   $0x25b
f011af48:	68 76 a9 13 f0       	push   $0xf013a976
f011af4d:	e8 54 52 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011af52:	e8 91 15 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011af57:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011af5a:	e8 2d 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011af62:	83 ec 0c             	sub    $0xc,%esp
f011af65:	68 00 08 00 00       	push   $0x800
f011af6a:	e8 55 c6 fe ff       	call   f01075c4 <kmalloc>
f011af6f:	83 c4 10             	add    $0x10,%esp
f011af72:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011af78:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011af7e:	89 c1                	mov    %eax,%ecx
f011af80:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011af87:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011af8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af8f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011af92:	8b 45 88             	mov    -0x78(%ebp),%eax
f011af95:	ba 00 00 00 00       	mov    $0x0,%edx
f011af9a:	f7 75 8c             	divl   -0x74(%ebp)
f011af9d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011afa0:	29 d0                	sub    %edx,%eax
f011afa2:	89 c3                	mov    %eax,%ebx
f011afa4:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011afab:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011afb0:	0f b6 d0             	movzbl %al,%edx
f011afb3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011afb6:	01 d0                	add    %edx,%eax
f011afb8:	48                   	dec    %eax
f011afb9:	89 45 80             	mov    %eax,-0x80(%ebp)
f011afbc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011afbf:	ba 00 00 00 00       	mov    $0x0,%edx
f011afc4:	f7 75 84             	divl   -0x7c(%ebp)
f011afc7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011afca:	29 d0                	sub    %edx,%eax
f011afcc:	01 c3                	add    %eax,%ebx
f011afce:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011afd5:	10 00 00 
f011afd8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011afdd:	0f b6 c0             	movzbl %al,%eax
f011afe0:	c1 e0 04             	shl    $0x4,%eax
f011afe3:	89 c2                	mov    %eax,%edx
f011afe5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011afeb:	01 d0                	add    %edx,%eax
f011afed:	48                   	dec    %eax
f011afee:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011aff4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011affa:	ba 00 00 00 00       	mov    $0x0,%edx
f011afff:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b005:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b00b:	29 d0                	sub    %edx,%eax
f011b00d:	01 d8                	add    %ebx,%eax
f011b00f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b014:	39 c1                	cmp    %eax,%ecx
f011b016:	74 17                	je     f011b02f <test_kmalloc_bestfit2+0x525>
f011b018:	83 ec 04             	sub    $0x4,%esp
f011b01b:	68 90 ad 13 f0       	push   $0xf013ad90
f011b020:	68 61 02 00 00       	push   $0x261
f011b025:	68 76 a9 13 f0       	push   $0xf013a976
f011b02a:	e8 77 51 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b02f:	e8 58 8c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b034:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b037:	74 17                	je     f011b050 <test_kmalloc_bestfit2+0x546>
f011b039:	83 ec 04             	sub    $0x4,%esp
f011b03c:	68 90 a9 13 f0       	push   $0xf013a990
f011b041:	68 62 02 00 00       	push   $0x262
f011b046:	68 76 a9 13 f0       	push   $0xf013a976
f011b04b:	e8 56 51 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b050:	e8 93 14 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b055:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b058:	29 c2                	sub    %eax,%edx
f011b05a:	89 d0                	mov    %edx,%eax
f011b05c:	83 f8 01             	cmp    $0x1,%eax
f011b05f:	74 17                	je     f011b078 <test_kmalloc_bestfit2+0x56e>
f011b061:	83 ec 04             	sub    $0x4,%esp
f011b064:	68 c0 ad 13 f0       	push   $0xf013adc0
f011b069:	68 63 02 00 00       	push   $0x263
f011b06e:	68 76 a9 13 f0       	push   $0xf013a976
f011b073:	e8 2e 51 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b078:	e8 6b 14 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b07d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b080:	e8 07 8c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b085:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b088:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b08e:	83 ec 0c             	sub    $0xc,%esp
f011b091:	50                   	push   %eax
f011b092:	e8 47 c5 fe ff       	call   f01075de <kfree>
f011b097:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b09a:	e8 ed 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b09f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b0a2:	74 17                	je     f011b0bb <test_kmalloc_bestfit2+0x5b1>
f011b0a4:	83 ec 04             	sub    $0x4,%esp
f011b0a7:	68 90 a9 13 f0       	push   $0xf013a990
f011b0ac:	68 69 02 00 00       	push   $0x269
f011b0b1:	68 76 a9 13 f0       	push   $0xf013a976
f011b0b6:	e8 eb 50 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b0bb:	e8 28 14 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b0c0:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b0c3:	83 f8 01             	cmp    $0x1,%eax
f011b0c6:	74 17                	je     f011b0df <test_kmalloc_bestfit2+0x5d5>
f011b0c8:	83 ec 04             	sub    $0x4,%esp
f011b0cb:	68 c0 ad 13 f0       	push   $0xf013adc0
f011b0d0:	68 6a 02 00 00       	push   $0x26a
f011b0d5:	68 76 a9 13 f0       	push   $0xf013a976
f011b0da:	e8 c7 50 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b0df:	e8 04 14 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b0e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b0e7:	e8 a0 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b0ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b0ef:	83 ec 0c             	sub    $0xc,%esp
f011b0f2:	68 00 1c 00 00       	push   $0x1c00
f011b0f7:	e8 c8 c4 fe ff       	call   f01075c4 <kmalloc>
f011b0fc:	83 c4 10             	add    $0x10,%esp
f011b0ff:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b105:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b10b:	89 c1                	mov    %eax,%ecx
f011b10d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b114:	10 00 00 
f011b117:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b11d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b122:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b128:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b12e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b133:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b139:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b13f:	29 d0                	sub    %edx,%eax
f011b141:	89 c3                	mov    %eax,%ebx
f011b143:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b14a:	10 00 00 
f011b14d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b152:	0f b6 d0             	movzbl %al,%edx
f011b155:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b15b:	01 d0                	add    %edx,%eax
f011b15d:	48                   	dec    %eax
f011b15e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b164:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b16a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b16f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b175:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b17b:	29 d0                	sub    %edx,%eax
f011b17d:	01 c3                	add    %eax,%ebx
f011b17f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b186:	10 00 00 
f011b189:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b18e:	0f b6 c0             	movzbl %al,%eax
f011b191:	c1 e0 04             	shl    $0x4,%eax
f011b194:	89 c2                	mov    %eax,%edx
f011b196:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b19c:	01 d0                	add    %edx,%eax
f011b19e:	48                   	dec    %eax
f011b19f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b1a5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b1ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1b0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b1b6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b1bc:	29 d0                	sub    %edx,%eax
f011b1be:	01 d8                	add    %ebx,%eax
f011b1c0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b1c5:	39 c1                	cmp    %eax,%ecx
f011b1c7:	74 17                	je     f011b1e0 <test_kmalloc_bestfit2+0x6d6>
f011b1c9:	83 ec 04             	sub    $0x4,%esp
f011b1cc:	68 90 ad 13 f0       	push   $0xf013ad90
f011b1d1:	68 70 02 00 00       	push   $0x270
f011b1d6:	68 76 a9 13 f0       	push   $0xf013a976
f011b1db:	e8 c6 4f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1e0:	e8 a7 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b1e5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b1e8:	74 17                	je     f011b201 <test_kmalloc_bestfit2+0x6f7>
f011b1ea:	83 ec 04             	sub    $0x4,%esp
f011b1ed:	68 90 a9 13 f0       	push   $0xf013a990
f011b1f2:	68 71 02 00 00       	push   $0x271
f011b1f7:	68 76 a9 13 f0       	push   $0xf013a976
f011b1fc:	e8 a5 4f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b201:	e8 e2 12 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b206:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b209:	29 c2                	sub    %eax,%edx
f011b20b:	89 d0                	mov    %edx,%eax
f011b20d:	83 f8 02             	cmp    $0x2,%eax
f011b210:	74 17                	je     f011b229 <test_kmalloc_bestfit2+0x71f>
f011b212:	83 ec 04             	sub    $0x4,%esp
f011b215:	68 c0 ad 13 f0       	push   $0xf013adc0
f011b21a:	68 72 02 00 00       	push   $0x272
f011b21f:	68 76 a9 13 f0       	push   $0xf013a976
f011b224:	e8 7d 4f fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b229:	e8 ba 12 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b22e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b231:	e8 56 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b236:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b239:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b23f:	83 ec 0c             	sub    $0xc,%esp
f011b242:	50                   	push   %eax
f011b243:	e8 96 c3 fe ff       	call   f01075de <kfree>
f011b248:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b24b:	e8 3c 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b250:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b253:	74 17                	je     f011b26c <test_kmalloc_bestfit2+0x762>
f011b255:	83 ec 04             	sub    $0x4,%esp
f011b258:	68 90 a9 13 f0       	push   $0xf013a990
f011b25d:	68 78 02 00 00       	push   $0x278
f011b262:	68 76 a9 13 f0       	push   $0xf013a976
f011b267:	e8 3a 4f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b26c:	e8 77 12 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b271:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b274:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b279:	74 17                	je     f011b292 <test_kmalloc_bestfit2+0x788>
f011b27b:	83 ec 04             	sub    $0x4,%esp
f011b27e:	68 44 ac 13 f0       	push   $0xf013ac44
f011b283:	68 79 02 00 00       	push   $0x279
f011b288:	68 76 a9 13 f0       	push   $0xf013a976
f011b28d:	e8 14 4f fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b292:	e8 51 12 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b297:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b29a:	e8 ed 89 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b29f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b2a2:	83 ec 0c             	sub    $0xc,%esp
f011b2a5:	68 00 fc 2f 00       	push   $0x2ffc00
f011b2aa:	e8 15 c3 fe ff       	call   f01075c4 <kmalloc>
f011b2af:	83 c4 10             	add    $0x10,%esp
f011b2b2:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b2b8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b2be:	89 c1                	mov    %eax,%ecx
f011b2c0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b2c7:	10 00 00 
f011b2ca:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b2d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2d5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b2db:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b2e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2e6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b2ec:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b2f2:	29 d0                	sub    %edx,%eax
f011b2f4:	89 c3                	mov    %eax,%ebx
f011b2f6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b2fd:	10 00 00 
f011b300:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b305:	0f b6 d0             	movzbl %al,%edx
f011b308:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b30e:	01 d0                	add    %edx,%eax
f011b310:	48                   	dec    %eax
f011b311:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b317:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b31d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b322:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b328:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b32e:	29 d0                	sub    %edx,%eax
f011b330:	01 c3                	add    %eax,%ebx
f011b332:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b339:	10 00 00 
f011b33c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b341:	0f b6 c0             	movzbl %al,%eax
f011b344:	c1 e0 04             	shl    $0x4,%eax
f011b347:	89 c2                	mov    %eax,%edx
f011b349:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b34f:	01 d0                	add    %edx,%eax
f011b351:	48                   	dec    %eax
f011b352:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b358:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b35e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b363:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b369:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b36f:	29 d0                	sub    %edx,%eax
f011b371:	01 d8                	add    %ebx,%eax
f011b373:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b378:	39 c1                	cmp    %eax,%ecx
f011b37a:	74 17                	je     f011b393 <test_kmalloc_bestfit2+0x889>
f011b37c:	83 ec 04             	sub    $0x4,%esp
f011b37f:	68 90 ad 13 f0       	push   $0xf013ad90
f011b384:	68 7f 02 00 00       	push   $0x27f
f011b389:	68 76 a9 13 f0       	push   $0xf013a976
f011b38e:	e8 13 4e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b393:	e8 f4 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b398:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b39b:	74 17                	je     f011b3b4 <test_kmalloc_bestfit2+0x8aa>
f011b39d:	83 ec 04             	sub    $0x4,%esp
f011b3a0:	68 90 a9 13 f0       	push   $0xf013a990
f011b3a5:	68 80 02 00 00       	push   $0x280
f011b3aa:	68 76 a9 13 f0       	push   $0xf013a976
f011b3af:	e8 f2 4d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011b3b4:	e8 2f 11 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b3b9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b3bc:	29 c2                	sub    %eax,%edx
f011b3be:	89 d0                	mov    %edx,%eax
f011b3c0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b3c5:	74 17                	je     f011b3de <test_kmalloc_bestfit2+0x8d4>
f011b3c7:	83 ec 04             	sub    $0x4,%esp
f011b3ca:	68 c0 ad 13 f0       	push   $0xf013adc0
f011b3cf:	68 81 02 00 00       	push   $0x281
f011b3d4:	68 76 a9 13 f0       	push   $0xf013a976
f011b3d9:	e8 c8 4d fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b3de:	e8 05 11 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b3e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3e6:	e8 a1 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b3eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011b3ee:	83 ec 0c             	sub    $0xc,%esp
f011b3f1:	68 00 18 20 00       	push   $0x201800
f011b3f6:	e8 c9 c1 fe ff       	call   f01075c4 <kmalloc>
f011b3fb:	83 c4 10             	add    $0x10,%esp
f011b3fe:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b404:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b40a:	89 c1                	mov    %eax,%ecx
f011b40c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b413:	10 00 00 
f011b416:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b41c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b421:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b427:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b42d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b432:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b438:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b43e:	29 d0                	sub    %edx,%eax
f011b440:	89 c3                	mov    %eax,%ebx
f011b442:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b449:	10 00 00 
f011b44c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b451:	0f b6 d0             	movzbl %al,%edx
f011b454:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b45a:	01 d0                	add    %edx,%eax
f011b45c:	48                   	dec    %eax
f011b45d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b463:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b469:	ba 00 00 00 00       	mov    $0x0,%edx
f011b46e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b474:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b47a:	29 d0                	sub    %edx,%eax
f011b47c:	01 c3                	add    %eax,%ebx
f011b47e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b485:	10 00 00 
f011b488:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b48d:	0f b6 c0             	movzbl %al,%eax
f011b490:	c1 e0 04             	shl    $0x4,%eax
f011b493:	89 c2                	mov    %eax,%edx
f011b495:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b49b:	01 d0                	add    %edx,%eax
f011b49d:	48                   	dec    %eax
f011b49e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b4a4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b4aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4af:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b4b5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b4bb:	29 d0                	sub    %edx,%eax
f011b4bd:	01 d8                	add    %ebx,%eax
f011b4bf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b4c4:	39 c1                	cmp    %eax,%ecx
f011b4c6:	74 17                	je     f011b4df <test_kmalloc_bestfit2+0x9d5>
f011b4c8:	83 ec 04             	sub    $0x4,%esp
f011b4cb:	68 90 ad 13 f0       	push   $0xf013ad90
f011b4d0:	68 87 02 00 00       	push   $0x287
f011b4d5:	68 76 a9 13 f0       	push   $0xf013a976
f011b4da:	e8 c7 4c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4df:	e8 a8 87 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b4e4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b4e7:	74 17                	je     f011b500 <test_kmalloc_bestfit2+0x9f6>
f011b4e9:	83 ec 04             	sub    $0x4,%esp
f011b4ec:	68 90 a9 13 f0       	push   $0xf013a990
f011b4f1:	68 88 02 00 00       	push   $0x288
f011b4f6:	68 76 a9 13 f0       	push   $0xf013a976
f011b4fb:	e8 a6 4c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b500:	e8 e3 0f ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b505:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b508:	29 c2                	sub    %eax,%edx
f011b50a:	89 d0                	mov    %edx,%eax
f011b50c:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b511:	74 17                	je     f011b52a <test_kmalloc_bestfit2+0xa20>
f011b513:	83 ec 04             	sub    $0x4,%esp
f011b516:	68 c0 ad 13 f0       	push   $0xf013adc0
f011b51b:	68 89 02 00 00       	push   $0x289
f011b520:	68 76 a9 13 f0       	push   $0xf013a976
f011b525:	e8 7c 4c fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b52a:	e8 b9 0f ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b52f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b532:	e8 55 87 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b537:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b53a:	83 ec 0c             	sub    $0xc,%esp
f011b53d:	68 00 fc 4f 00       	push   $0x4ffc00
f011b542:	e8 7d c0 fe ff       	call   f01075c4 <kmalloc>
f011b547:	83 c4 10             	add    $0x10,%esp
f011b54a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b550:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b556:	89 c1                	mov    %eax,%ecx
f011b558:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b55f:	10 00 00 
f011b562:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b568:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b56d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b573:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b579:	ba 00 00 00 00       	mov    $0x0,%edx
f011b57e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b584:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b58a:	29 d0                	sub    %edx,%eax
f011b58c:	89 c3                	mov    %eax,%ebx
f011b58e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b595:	10 00 00 
f011b598:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b59d:	0f b6 d0             	movzbl %al,%edx
f011b5a0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b5a6:	01 d0                	add    %edx,%eax
f011b5a8:	48                   	dec    %eax
f011b5a9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b5af:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b5b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5ba:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b5c0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b5c6:	29 d0                	sub    %edx,%eax
f011b5c8:	01 c3                	add    %eax,%ebx
f011b5ca:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b5d1:	10 00 00 
f011b5d4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b5d9:	0f b6 c0             	movzbl %al,%eax
f011b5dc:	c1 e0 04             	shl    $0x4,%eax
f011b5df:	89 c2                	mov    %eax,%edx
f011b5e1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b5e7:	01 d0                	add    %edx,%eax
f011b5e9:	48                   	dec    %eax
f011b5ea:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b5f0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b5f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5fb:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b601:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b607:	29 d0                	sub    %edx,%eax
f011b609:	01 d8                	add    %ebx,%eax
f011b60b:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011b610:	39 c1                	cmp    %eax,%ecx
f011b612:	74 17                	je     f011b62b <test_kmalloc_bestfit2+0xb21>
f011b614:	83 ec 04             	sub    $0x4,%esp
f011b617:	68 90 ad 13 f0       	push   $0xf013ad90
f011b61c:	68 8f 02 00 00       	push   $0x28f
f011b621:	68 76 a9 13 f0       	push   $0xf013a976
f011b626:	e8 7b 4b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b62b:	e8 5c 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b630:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b633:	74 17                	je     f011b64c <test_kmalloc_bestfit2+0xb42>
f011b635:	83 ec 04             	sub    $0x4,%esp
f011b638:	68 90 a9 13 f0       	push   $0xf013a990
f011b63d:	68 90 02 00 00       	push   $0x290
f011b642:	68 76 a9 13 f0       	push   $0xf013a976
f011b647:	e8 5a 4b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b64c:	e8 97 0e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b651:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b654:	29 c2                	sub    %eax,%edx
f011b656:	89 d0                	mov    %edx,%eax
f011b658:	3d 00 05 00 00       	cmp    $0x500,%eax
f011b65d:	74 17                	je     f011b676 <test_kmalloc_bestfit2+0xb6c>
f011b65f:	83 ec 04             	sub    $0x4,%esp
f011b662:	68 c0 ad 13 f0       	push   $0xf013adc0
f011b667:	68 91 02 00 00       	push   $0x291
f011b66c:	68 76 a9 13 f0       	push   $0xf013a976
f011b671:	e8 30 4b fe ff       	call   f01001a6 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b676:	e8 6d 0e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b67b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b67e:	e8 09 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b683:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b686:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b68c:	83 ec 0c             	sub    $0xc,%esp
f011b68f:	50                   	push   %eax
f011b690:	e8 49 bf fe ff       	call   f01075de <kfree>
f011b695:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b698:	e8 ef 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b69d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b6a0:	74 17                	je     f011b6b9 <test_kmalloc_bestfit2+0xbaf>
f011b6a2:	83 ec 04             	sub    $0x4,%esp
f011b6a5:	68 90 a9 13 f0       	push   $0xf013a990
f011b6aa:	68 97 02 00 00       	push   $0x297
f011b6af:	68 76 a9 13 f0       	push   $0xf013a976
f011b6b4:	e8 ed 4a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011b6b9:	e8 2a 0e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b6be:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b6c1:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b6c6:	74 17                	je     f011b6df <test_kmalloc_bestfit2+0xbd5>
f011b6c8:	83 ec 04             	sub    $0x4,%esp
f011b6cb:	68 44 ac 13 f0       	push   $0xf013ac44
f011b6d0:	68 98 02 00 00       	push   $0x298
f011b6d5:	68 76 a9 13 f0       	push   $0xf013a976
f011b6da:	e8 c7 4a fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b6df:	e8 04 0e ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b6e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b6e7:	e8 a0 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b6ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011b6ef:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b6f5:	83 ec 0c             	sub    $0xc,%esp
f011b6f8:	50                   	push   %eax
f011b6f9:	e8 e0 be fe ff       	call   f01075de <kfree>
f011b6fe:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b701:	e8 86 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b706:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b709:	74 17                	je     f011b722 <test_kmalloc_bestfit2+0xc18>
f011b70b:	83 ec 04             	sub    $0x4,%esp
f011b70e:	68 90 a9 13 f0       	push   $0xf013a990
f011b713:	68 9e 02 00 00       	push   $0x29e
f011b718:	68 76 a9 13 f0       	push   $0xf013a976
f011b71d:	e8 84 4a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b722:	e8 c1 0d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b727:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b72a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b72f:	74 17                	je     f011b748 <test_kmalloc_bestfit2+0xc3e>
f011b731:	83 ec 04             	sub    $0x4,%esp
f011b734:	68 70 ae 13 f0       	push   $0xf013ae70
f011b739:	68 9f 02 00 00       	push   $0x29f
f011b73e:	68 76 a9 13 f0       	push   $0xf013a976
f011b743:	e8 5e 4a fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b748:	e8 9b 0d ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b74d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b750:	e8 37 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b755:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011b758:	83 ec 0c             	sub    $0xc,%esp
f011b75b:	68 00 fc 1f 00       	push   $0x1ffc00
f011b760:	e8 5f be fe ff       	call   f01075c4 <kmalloc>
f011b765:	83 c4 10             	add    $0x10,%esp
f011b768:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b76e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011b774:	89 c1                	mov    %eax,%ecx
f011b776:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b77d:	10 00 00 
f011b780:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b786:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b78b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b791:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b797:	ba 00 00 00 00       	mov    $0x0,%edx
f011b79c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b7a2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b7a8:	29 d0                	sub    %edx,%eax
f011b7aa:	89 c3                	mov    %eax,%ebx
f011b7ac:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b7b3:	10 00 00 
f011b7b6:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b7bb:	0f b6 d0             	movzbl %al,%edx
f011b7be:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b7c4:	01 d0                	add    %edx,%eax
f011b7c6:	48                   	dec    %eax
f011b7c7:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b7cd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b7d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7d8:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b7de:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b7e4:	29 d0                	sub    %edx,%eax
f011b7e6:	01 c3                	add    %eax,%ebx
f011b7e8:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b7ef:	10 00 00 
f011b7f2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b7f7:	0f b6 c0             	movzbl %al,%eax
f011b7fa:	c1 e0 04             	shl    $0x4,%eax
f011b7fd:	89 c2                	mov    %eax,%edx
f011b7ff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b805:	01 d0                	add    %edx,%eax
f011b807:	48                   	dec    %eax
f011b808:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b80e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b814:	ba 00 00 00 00       	mov    $0x0,%edx
f011b819:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b81f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b825:	29 d0                	sub    %edx,%eax
f011b827:	01 d8                	add    %ebx,%eax
f011b829:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b82e:	39 c1                	cmp    %eax,%ecx
f011b830:	74 17                	je     f011b849 <test_kmalloc_bestfit2+0xd3f>
f011b832:	83 ec 04             	sub    $0x4,%esp
f011b835:	68 90 ad 13 f0       	push   $0xf013ad90
f011b83a:	68 a5 02 00 00       	push   $0x2a5
f011b83f:	68 76 a9 13 f0       	push   $0xf013a976
f011b844:	e8 5d 49 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b849:	e8 3e 84 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b84e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b851:	74 17                	je     f011b86a <test_kmalloc_bestfit2+0xd60>
f011b853:	83 ec 04             	sub    $0x4,%esp
f011b856:	68 90 a9 13 f0       	push   $0xf013a990
f011b85b:	68 a6 02 00 00       	push   $0x2a6
f011b860:	68 76 a9 13 f0       	push   $0xf013a976
f011b865:	e8 3c 49 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011b86a:	e8 79 0c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b86f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b872:	29 c2                	sub    %eax,%edx
f011b874:	89 d0                	mov    %edx,%eax
f011b876:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b87b:	74 17                	je     f011b894 <test_kmalloc_bestfit2+0xd8a>
f011b87d:	83 ec 04             	sub    $0x4,%esp
f011b880:	68 ae ae 13 f0       	push   $0xf013aeae
f011b885:	68 a7 02 00 00       	push   $0x2a7
f011b88a:	68 76 a9 13 f0       	push   $0xf013a976
f011b88f:	e8 12 49 fe ff       	call   f01001a6 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b894:	e8 4f 0c ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b899:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b89c:	e8 eb 83 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b8a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011b8a4:	83 ec 0c             	sub    $0xc,%esp
f011b8a7:	68 00 18 00 00       	push   $0x1800
f011b8ac:	e8 13 bd fe ff       	call   f01075c4 <kmalloc>
f011b8b1:	83 c4 10             	add    $0x10,%esp
f011b8b4:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b8ba:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b8c0:	89 c1                	mov    %eax,%ecx
f011b8c2:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b8c9:	10 00 00 
f011b8cc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b8d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b8d7:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b8dd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b8e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8e8:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b8ee:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b8f4:	29 d0                	sub    %edx,%eax
f011b8f6:	89 c3                	mov    %eax,%ebx
f011b8f8:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b8ff:	10 00 00 
f011b902:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b907:	0f b6 d0             	movzbl %al,%edx
f011b90a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b910:	01 d0                	add    %edx,%eax
f011b912:	48                   	dec    %eax
f011b913:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b919:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b91f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b924:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b92a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b930:	29 d0                	sub    %edx,%eax
f011b932:	01 c3                	add    %eax,%ebx
f011b934:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b93b:	10 00 00 
f011b93e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011b943:	0f b6 c0             	movzbl %al,%eax
f011b946:	c1 e0 04             	shl    $0x4,%eax
f011b949:	89 c2                	mov    %eax,%edx
f011b94b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b951:	01 d0                	add    %edx,%eax
f011b953:	48                   	dec    %eax
f011b954:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b95a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b960:	ba 00 00 00 00       	mov    $0x0,%edx
f011b965:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b96b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b971:	29 d0                	sub    %edx,%eax
f011b973:	01 d8                	add    %ebx,%eax
f011b975:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011b97a:	39 c1                	cmp    %eax,%ecx
f011b97c:	74 17                	je     f011b995 <test_kmalloc_bestfit2+0xe8b>
f011b97e:	83 ec 04             	sub    $0x4,%esp
f011b981:	68 90 ad 13 f0       	push   $0xf013ad90
f011b986:	68 ad 02 00 00       	push   $0x2ad
f011b98b:	68 76 a9 13 f0       	push   $0xf013a976
f011b990:	e8 11 48 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b995:	e8 f2 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b99a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b99d:	74 17                	je     f011b9b6 <test_kmalloc_bestfit2+0xeac>
f011b99f:	83 ec 04             	sub    $0x4,%esp
f011b9a2:	68 90 a9 13 f0       	push   $0xf013a990
f011b9a7:	68 ae 02 00 00       	push   $0x2ae
f011b9ac:	68 76 a9 13 f0       	push   $0xf013a976
f011b9b1:	e8 f0 47 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011b9b6:	e8 2d 0b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b9bb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b9be:	29 c2                	sub    %eax,%edx
f011b9c0:	89 d0                	mov    %edx,%eax
f011b9c2:	83 f8 02             	cmp    $0x2,%eax
f011b9c5:	74 17                	je     f011b9de <test_kmalloc_bestfit2+0xed4>
f011b9c7:	83 ec 04             	sub    $0x4,%esp
f011b9ca:	68 ae ae 13 f0       	push   $0xf013aeae
f011b9cf:	68 af 02 00 00       	push   $0x2af
f011b9d4:	68 76 a9 13 f0       	push   $0xf013a976
f011b9d9:	e8 c8 47 fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b9de:	e8 05 0b ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011b9e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b9e6:	e8 a1 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b9eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011b9ee:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b9f4:	83 ec 0c             	sub    $0xc,%esp
f011b9f7:	50                   	push   %eax
f011b9f8:	e8 e1 bb fe ff       	call   f01075de <kfree>
f011b9fd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba00:	e8 87 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ba05:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba08:	74 17                	je     f011ba21 <test_kmalloc_bestfit2+0xf17>
f011ba0a:	83 ec 04             	sub    $0x4,%esp
f011ba0d:	68 90 a9 13 f0       	push   $0xf013a990
f011ba12:	68 b5 02 00 00       	push   $0x2b5
f011ba17:	68 76 a9 13 f0       	push   $0xf013a976
f011ba1c:	e8 85 47 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011ba21:	e8 c2 0a ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ba26:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ba29:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ba2e:	74 17                	je     f011ba47 <test_kmalloc_bestfit2+0xf3d>
f011ba30:	83 ec 04             	sub    $0x4,%esp
f011ba33:	68 70 ae 13 f0       	push   $0xf013ae70
f011ba38:	68 b6 02 00 00       	push   $0x2b6
f011ba3d:	68 76 a9 13 f0       	push   $0xf013a976
f011ba42:	e8 5f 47 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba47:	e8 9c 0a ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ba4c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba4f:	e8 38 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ba54:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011ba57:	83 ec 0c             	sub    $0xc,%esp
f011ba5a:	68 00 fc 2f 00       	push   $0x2ffc00
f011ba5f:	e8 60 bb fe ff       	call   f01075c4 <kmalloc>
f011ba64:	83 c4 10             	add    $0x10,%esp
f011ba67:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ba6d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ba73:	89 c1                	mov    %eax,%ecx
f011ba75:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ba7c:	10 00 00 
f011ba7f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ba85:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ba8a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ba90:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ba96:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba9b:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011baa1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011baa7:	29 d0                	sub    %edx,%eax
f011baa9:	89 c3                	mov    %eax,%ebx
f011baab:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011bab2:	10 00 00 
f011bab5:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011baba:	0f b6 d0             	movzbl %al,%edx
f011babd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bac3:	01 d0                	add    %edx,%eax
f011bac5:	48                   	dec    %eax
f011bac6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011bacc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bad2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bad7:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011badd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bae3:	29 d0                	sub    %edx,%eax
f011bae5:	01 c3                	add    %eax,%ebx
f011bae7:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011baee:	10 00 00 
f011baf1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011baf6:	0f b6 c0             	movzbl %al,%eax
f011baf9:	c1 e0 04             	shl    $0x4,%eax
f011bafc:	89 c2                	mov    %eax,%edx
f011bafe:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bb04:	01 d0                	add    %edx,%eax
f011bb06:	48                   	dec    %eax
f011bb07:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011bb0d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bb13:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb18:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011bb1e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bb24:	29 d0                	sub    %edx,%eax
f011bb26:	01 d8                	add    %ebx,%eax
f011bb28:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bb2d:	39 c1                	cmp    %eax,%ecx
f011bb2f:	74 17                	je     f011bb48 <test_kmalloc_bestfit2+0x103e>
f011bb31:	83 ec 04             	sub    $0x4,%esp
f011bb34:	68 90 ad 13 f0       	push   $0xf013ad90
f011bb39:	68 bc 02 00 00       	push   $0x2bc
f011bb3e:	68 76 a9 13 f0       	push   $0xf013a976
f011bb43:	e8 5e 46 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb48:	e8 3f 81 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bb4d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb50:	74 17                	je     f011bb69 <test_kmalloc_bestfit2+0x105f>
f011bb52:	83 ec 04             	sub    $0x4,%esp
f011bb55:	68 90 a9 13 f0       	push   $0xf013a990
f011bb5a:	68 bd 02 00 00       	push   $0x2bd
f011bb5f:	68 76 a9 13 f0       	push   $0xf013a976
f011bb64:	e8 3d 46 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bb69:	e8 7a 09 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011bb6e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb71:	29 c2                	sub    %eax,%edx
f011bb73:	89 d0                	mov    %edx,%eax
f011bb75:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bb7a:	74 17                	je     f011bb93 <test_kmalloc_bestfit2+0x1089>
f011bb7c:	83 ec 04             	sub    $0x4,%esp
f011bb7f:	68 70 ae 13 f0       	push   $0xf013ae70
f011bb84:	68 be 02 00 00       	push   $0x2be
f011bb89:	68 76 a9 13 f0       	push   $0xf013a976
f011bb8e:	e8 13 46 fe ff       	call   f01001a6 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011bb93:	e8 50 09 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011bb98:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb9b:	e8 ec 80 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bba0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011bba3:	83 ec 0c             	sub    $0xc,%esp
f011bba6:	68 00 fc 3f 00       	push   $0x3ffc00
f011bbab:	e8 14 ba fe ff       	call   f01075c4 <kmalloc>
f011bbb0:	83 c4 10             	add    $0x10,%esp
f011bbb3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bbb9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011bbbf:	89 c1                	mov    %eax,%ecx
f011bbc1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011bbc8:	10 00 00 
f011bbcb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011bbd1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbd6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011bbdc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bbe2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbe7:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011bbed:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bbf3:	29 d0                	sub    %edx,%eax
f011bbf5:	89 c3                	mov    %eax,%ebx
f011bbf7:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011bbfe:	10 00 00 
f011bc01:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011bc06:	0f b6 d0             	movzbl %al,%edx
f011bc09:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bc0f:	01 d0                	add    %edx,%eax
f011bc11:	48                   	dec    %eax
f011bc12:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011bc18:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bc1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc23:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011bc29:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bc2f:	29 d0                	sub    %edx,%eax
f011bc31:	01 c3                	add    %eax,%ebx
f011bc33:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011bc3a:	10 00 00 
f011bc3d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011bc42:	0f b6 c0             	movzbl %al,%eax
f011bc45:	c1 e0 04             	shl    $0x4,%eax
f011bc48:	89 c2                	mov    %eax,%edx
f011bc4a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011bc50:	01 d0                	add    %edx,%eax
f011bc52:	48                   	dec    %eax
f011bc53:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011bc59:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bc5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc64:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011bc6a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bc70:	29 d0                	sub    %edx,%eax
f011bc72:	01 d8                	add    %ebx,%eax
f011bc74:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bc79:	39 c1                	cmp    %eax,%ecx
f011bc7b:	74 17                	je     f011bc94 <test_kmalloc_bestfit2+0x118a>
f011bc7d:	83 ec 04             	sub    $0x4,%esp
f011bc80:	68 90 ad 13 f0       	push   $0xf013ad90
f011bc85:	68 c4 02 00 00       	push   $0x2c4
f011bc8a:	68 76 a9 13 f0       	push   $0xf013a976
f011bc8f:	e8 12 45 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc94:	e8 f3 7f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bc99:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc9c:	74 17                	je     f011bcb5 <test_kmalloc_bestfit2+0x11ab>
f011bc9e:	83 ec 04             	sub    $0x4,%esp
f011bca1:	68 90 a9 13 f0       	push   $0xf013a990
f011bca6:	68 c5 02 00 00       	push   $0x2c5
f011bcab:	68 76 a9 13 f0       	push   $0xf013a976
f011bcb0:	e8 f1 44 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bcb5:	e8 2e 08 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011bcba:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bcbd:	29 c2                	sub    %eax,%edx
f011bcbf:	89 d0                	mov    %edx,%eax
f011bcc1:	3d 00 04 00 00       	cmp    $0x400,%eax
f011bcc6:	74 17                	je     f011bcdf <test_kmalloc_bestfit2+0x11d5>
f011bcc8:	83 ec 04             	sub    $0x4,%esp
f011bccb:	68 70 ae 13 f0       	push   $0xf013ae70
f011bcd0:	68 c6 02 00 00       	push   $0x2c6
f011bcd5:	68 76 a9 13 f0       	push   $0xf013a976
f011bcda:	e8 c7 44 fe ff       	call   f01001a6 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011bcdf:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011bce6:	10 00 00 
f011bce9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011bcef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bcf4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011bcfa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011bd00:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd05:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011bd0b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011bd11:	29 d0                	sub    %edx,%eax
f011bd13:	89 c1                	mov    %eax,%ecx
f011bd15:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011bd1c:	10 00 00 
f011bd1f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011bd24:	0f b6 d0             	movzbl %al,%edx
f011bd27:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011bd2d:	01 d0                	add    %edx,%eax
f011bd2f:	48                   	dec    %eax
f011bd30:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011bd36:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bd3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd41:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011bd47:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bd4d:	29 d0                	sub    %edx,%eax
f011bd4f:	01 c1                	add    %eax,%ecx
f011bd51:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011bd58:	10 00 00 
f011bd5b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011bd60:	0f b6 c0             	movzbl %al,%eax
f011bd63:	c1 e0 04             	shl    $0x4,%eax
f011bd66:	89 c2                	mov    %eax,%edx
f011bd68:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011bd6e:	01 d0                	add    %edx,%eax
f011bd70:	48                   	dec    %eax
f011bd71:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011bd77:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bd7d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd82:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011bd88:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bd8e:	29 d0                	sub    %edx,%eax
f011bd90:	01 c8                	add    %ecx,%eax
f011bd92:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011bd97:	29 c2                	sub    %eax,%edx
f011bd99:	89 d0                	mov    %edx,%eax
f011bd9b:	83 ec 0c             	sub    $0xc,%esp
f011bd9e:	50                   	push   %eax
f011bd9f:	e8 20 b8 fe ff       	call   f01075c4 <kmalloc>
f011bda4:	83 c4 10             	add    $0x10,%esp
f011bda7:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011bdad:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011bdb3:	85 c0                	test   %eax,%eax
f011bdb5:	74 17                	je     f011bdce <test_kmalloc_bestfit2+0x12c4>
f011bdb7:	83 ec 04             	sub    $0x4,%esp
f011bdba:	68 c0 ae 13 f0       	push   $0xf013aec0
f011bdbf:	68 ce 02 00 00       	push   $0x2ce
f011bdc4:	68 76 a9 13 f0       	push   $0xf013a976
f011bdc9:	e8 d8 43 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011bdce:	83 ec 0c             	sub    $0xc,%esp
f011bdd1:	68 24 af 13 f0       	push   $0xf013af24
f011bdd6:	e8 52 4e fe ff       	call   f0100c2d <cprintf>
f011bddb:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011bdde:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011bde3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bde6:	5b                   	pop    %ebx
f011bde7:	5f                   	pop    %edi
f011bde8:	5d                   	pop    %ebp
f011bde9:	c3                   	ret    

f011bdea <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011bdea:	55                   	push   %ebp
f011bdeb:	89 e5                	mov    %esp,%ebp
f011bded:	57                   	push   %edi
f011bdee:	53                   	push   %ebx
f011bdef:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011bdf5:	83 ec 0c             	sub    $0xc,%esp
f011bdf8:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011bdfd:	e8 2b 4e fe ff       	call   f0100c2d <cprintf>
f011be02:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011be05:	83 ec 0c             	sub    $0xc,%esp
f011be08:	68 e8 a8 13 f0       	push   $0xf013a8e8
f011be0d:	e8 1b 4e fe ff       	call   f0100c2d <cprintf>
f011be12:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011be15:	83 ec 0c             	sub    $0xc,%esp
f011be18:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011be1d:	e8 0b 4e fe ff       	call   f0100c2d <cprintf>
f011be22:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011be25:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011be2b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011be30:	b8 00 00 00 00       	mov    $0x0,%eax
f011be35:	89 d7                	mov    %edx,%edi
f011be37:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011be39:	e8 aa 06 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011be3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be41:	e8 46 7e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011be46:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011be49:	83 ec 0c             	sub    $0xc,%esp
f011be4c:	68 00 fc 0f 00       	push   $0xffc00
f011be51:	e8 6e b7 fe ff       	call   f01075c4 <kmalloc>
f011be56:	83 c4 10             	add    $0x10,%esp
f011be59:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011be5f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011be65:	89 c1                	mov    %eax,%ecx
f011be67:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011be6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011be71:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be76:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011be79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011be7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011be81:	f7 75 ec             	divl   -0x14(%ebp)
f011be84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011be87:	29 d0                	sub    %edx,%eax
f011be89:	89 c3                	mov    %eax,%ebx
f011be8b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011be92:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011be97:	0f b6 d0             	movzbl %al,%edx
f011be9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011be9d:	01 d0                	add    %edx,%eax
f011be9f:	48                   	dec    %eax
f011bea0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011bea3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bea6:	ba 00 00 00 00       	mov    $0x0,%edx
f011beab:	f7 75 e4             	divl   -0x1c(%ebp)
f011beae:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011beb1:	29 d0                	sub    %edx,%eax
f011beb3:	01 c3                	add    %eax,%ebx
f011beb5:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011bebc:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011bec1:	0f b6 c0             	movzbl %al,%eax
f011bec4:	c1 e0 04             	shl    $0x4,%eax
f011bec7:	89 c2                	mov    %eax,%edx
f011bec9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011becc:	01 d0                	add    %edx,%eax
f011bece:	48                   	dec    %eax
f011becf:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011bed2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011bed5:	ba 00 00 00 00       	mov    $0x0,%edx
f011beda:	f7 75 dc             	divl   -0x24(%ebp)
f011bedd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011bee0:	29 d0                	sub    %edx,%eax
f011bee2:	01 d8                	add    %ebx,%eax
f011bee4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bee9:	39 c1                	cmp    %eax,%ecx
f011beeb:	74 17                	je     f011bf04 <test_kmalloc_firstfit1+0x11a>
f011beed:	83 ec 04             	sub    $0x4,%esp
f011bef0:	68 90 ad 13 f0       	push   $0xf013ad90
f011bef5:	68 e6 02 00 00       	push   $0x2e6
f011befa:	68 76 a9 13 f0       	push   $0xf013a976
f011beff:	e8 a2 42 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf04:	e8 83 7d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bf09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bf0c:	74 17                	je     f011bf25 <test_kmalloc_firstfit1+0x13b>
f011bf0e:	83 ec 04             	sub    $0x4,%esp
f011bf11:	68 90 a9 13 f0       	push   $0xf013a990
f011bf16:	68 e7 02 00 00       	push   $0x2e7
f011bf1b:	68 76 a9 13 f0       	push   $0xf013a976
f011bf20:	e8 81 42 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011bf25:	e8 be 05 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011bf2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bf2d:	29 c2                	sub    %eax,%edx
f011bf2f:	89 d0                	mov    %edx,%eax
f011bf31:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bf36:	74 17                	je     f011bf4f <test_kmalloc_firstfit1+0x165>
f011bf38:	83 ec 04             	sub    $0x4,%esp
f011bf3b:	68 c0 ad 13 f0       	push   $0xf013adc0
f011bf40:	68 e8 02 00 00       	push   $0x2e8
f011bf45:	68 76 a9 13 f0       	push   $0xf013a976
f011bf4a:	e8 57 42 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bf4f:	e8 94 05 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011bf54:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bf57:	e8 30 7d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bf5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011bf5f:	83 ec 0c             	sub    $0xc,%esp
f011bf62:	68 00 fc 0f 00       	push   $0xffc00
f011bf67:	e8 58 b6 fe ff       	call   f01075c4 <kmalloc>
f011bf6c:	83 c4 10             	add    $0x10,%esp
f011bf6f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011bf75:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bf7b:	89 c1                	mov    %eax,%ecx
f011bf7d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011bf84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bf87:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf8c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011bf8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bf92:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf97:	f7 75 d4             	divl   -0x2c(%ebp)
f011bf9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bf9d:	29 d0                	sub    %edx,%eax
f011bf9f:	89 c3                	mov    %eax,%ebx
f011bfa1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bfa8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011bfad:	0f b6 d0             	movzbl %al,%edx
f011bfb0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bfb3:	01 d0                	add    %edx,%eax
f011bfb5:	48                   	dec    %eax
f011bfb6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bfb9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bfbc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfc1:	f7 75 cc             	divl   -0x34(%ebp)
f011bfc4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bfc7:	29 d0                	sub    %edx,%eax
f011bfc9:	01 c3                	add    %eax,%ebx
f011bfcb:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bfd2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011bfd7:	0f b6 c0             	movzbl %al,%eax
f011bfda:	c1 e0 04             	shl    $0x4,%eax
f011bfdd:	89 c2                	mov    %eax,%edx
f011bfdf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bfe2:	01 d0                	add    %edx,%eax
f011bfe4:	48                   	dec    %eax
f011bfe5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bfe8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bfeb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bff0:	f7 75 c4             	divl   -0x3c(%ebp)
f011bff3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bff6:	29 d0                	sub    %edx,%eax
f011bff8:	01 d8                	add    %ebx,%eax
f011bffa:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011bfff:	39 c1                	cmp    %eax,%ecx
f011c001:	74 17                	je     f011c01a <test_kmalloc_firstfit1+0x230>
f011c003:	83 ec 04             	sub    $0x4,%esp
f011c006:	68 90 ad 13 f0       	push   $0xf013ad90
f011c00b:	68 ee 02 00 00       	push   $0x2ee
f011c010:	68 76 a9 13 f0       	push   $0xf013a976
f011c015:	e8 8c 41 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c01a:	e8 6d 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c01f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c022:	74 17                	je     f011c03b <test_kmalloc_firstfit1+0x251>
f011c024:	83 ec 04             	sub    $0x4,%esp
f011c027:	68 90 a9 13 f0       	push   $0xf013a990
f011c02c:	68 ef 02 00 00       	push   $0x2ef
f011c031:	68 76 a9 13 f0       	push   $0xf013a976
f011c036:	e8 6b 41 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c03b:	e8 a8 04 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c040:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c043:	29 c2                	sub    %eax,%edx
f011c045:	89 d0                	mov    %edx,%eax
f011c047:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c04c:	74 17                	je     f011c065 <test_kmalloc_firstfit1+0x27b>
f011c04e:	83 ec 04             	sub    $0x4,%esp
f011c051:	68 c0 ad 13 f0       	push   $0xf013adc0
f011c056:	68 f0 02 00 00       	push   $0x2f0
f011c05b:	68 76 a9 13 f0       	push   $0xf013a976
f011c060:	e8 41 41 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c065:	e8 7e 04 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c06a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c06d:	e8 1a 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c072:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c075:	83 ec 0c             	sub    $0xc,%esp
f011c078:	68 00 fc 0f 00       	push   $0xffc00
f011c07d:	e8 42 b5 fe ff       	call   f01075c4 <kmalloc>
f011c082:	83 c4 10             	add    $0x10,%esp
f011c085:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c08b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c091:	89 c1                	mov    %eax,%ecx
f011c093:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c09a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c09d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c0a2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c0a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c0a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0ad:	f7 75 bc             	divl   -0x44(%ebp)
f011c0b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c0b3:	29 d0                	sub    %edx,%eax
f011c0b5:	89 c3                	mov    %eax,%ebx
f011c0b7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c0be:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c0c3:	0f b6 d0             	movzbl %al,%edx
f011c0c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c0c9:	01 d0                	add    %edx,%eax
f011c0cb:	48                   	dec    %eax
f011c0cc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c0cf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c0d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0d7:	f7 75 b4             	divl   -0x4c(%ebp)
f011c0da:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c0dd:	29 d0                	sub    %edx,%eax
f011c0df:	01 c3                	add    %eax,%ebx
f011c0e1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c0e8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c0ed:	0f b6 c0             	movzbl %al,%eax
f011c0f0:	c1 e0 04             	shl    $0x4,%eax
f011c0f3:	89 c2                	mov    %eax,%edx
f011c0f5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c0f8:	01 d0                	add    %edx,%eax
f011c0fa:	48                   	dec    %eax
f011c0fb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c0fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c101:	ba 00 00 00 00       	mov    $0x0,%edx
f011c106:	f7 75 ac             	divl   -0x54(%ebp)
f011c109:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c10c:	29 d0                	sub    %edx,%eax
f011c10e:	01 d8                	add    %ebx,%eax
f011c110:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c115:	39 c1                	cmp    %eax,%ecx
f011c117:	74 17                	je     f011c130 <test_kmalloc_firstfit1+0x346>
f011c119:	83 ec 04             	sub    $0x4,%esp
f011c11c:	68 90 ad 13 f0       	push   $0xf013ad90
f011c121:	68 f6 02 00 00       	push   $0x2f6
f011c126:	68 76 a9 13 f0       	push   $0xf013a976
f011c12b:	e8 76 40 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c130:	e8 57 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c135:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c138:	74 17                	je     f011c151 <test_kmalloc_firstfit1+0x367>
f011c13a:	83 ec 04             	sub    $0x4,%esp
f011c13d:	68 90 a9 13 f0       	push   $0xf013a990
f011c142:	68 f7 02 00 00       	push   $0x2f7
f011c147:	68 76 a9 13 f0       	push   $0xf013a976
f011c14c:	e8 55 40 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c151:	e8 92 03 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c156:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c159:	29 c2                	sub    %eax,%edx
f011c15b:	89 d0                	mov    %edx,%eax
f011c15d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c162:	74 17                	je     f011c17b <test_kmalloc_firstfit1+0x391>
f011c164:	83 ec 04             	sub    $0x4,%esp
f011c167:	68 c0 ad 13 f0       	push   $0xf013adc0
f011c16c:	68 f8 02 00 00       	push   $0x2f8
f011c171:	68 76 a9 13 f0       	push   $0xf013a976
f011c176:	e8 2b 40 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c17b:	e8 68 03 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c180:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c183:	e8 04 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c188:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c18b:	83 ec 0c             	sub    $0xc,%esp
f011c18e:	68 00 fc 0f 00       	push   $0xffc00
f011c193:	e8 2c b4 fe ff       	call   f01075c4 <kmalloc>
f011c198:	83 c4 10             	add    $0x10,%esp
f011c19b:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c1a1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c1a7:	89 c1                	mov    %eax,%ecx
f011c1a9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c1b0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c1b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c1b8:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c1bb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c1be:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1c3:	f7 75 a4             	divl   -0x5c(%ebp)
f011c1c6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c1c9:	29 d0                	sub    %edx,%eax
f011c1cb:	89 c3                	mov    %eax,%ebx
f011c1cd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c1d4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c1d9:	0f b6 d0             	movzbl %al,%edx
f011c1dc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c1df:	01 d0                	add    %edx,%eax
f011c1e1:	48                   	dec    %eax
f011c1e2:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c1e5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c1e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1ed:	f7 75 9c             	divl   -0x64(%ebp)
f011c1f0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c1f3:	29 d0                	sub    %edx,%eax
f011c1f5:	01 c3                	add    %eax,%ebx
f011c1f7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c1fe:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c203:	0f b6 c0             	movzbl %al,%eax
f011c206:	c1 e0 04             	shl    $0x4,%eax
f011c209:	89 c2                	mov    %eax,%edx
f011c20b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c20e:	01 d0                	add    %edx,%eax
f011c210:	48                   	dec    %eax
f011c211:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c214:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c217:	ba 00 00 00 00       	mov    $0x0,%edx
f011c21c:	f7 75 94             	divl   -0x6c(%ebp)
f011c21f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c222:	29 d0                	sub    %edx,%eax
f011c224:	01 d8                	add    %ebx,%eax
f011c226:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c22b:	39 c1                	cmp    %eax,%ecx
f011c22d:	74 17                	je     f011c246 <test_kmalloc_firstfit1+0x45c>
f011c22f:	83 ec 04             	sub    $0x4,%esp
f011c232:	68 90 ad 13 f0       	push   $0xf013ad90
f011c237:	68 fe 02 00 00       	push   $0x2fe
f011c23c:	68 76 a9 13 f0       	push   $0xf013a976
f011c241:	e8 60 3f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c246:	e8 41 7a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c24b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c24e:	74 17                	je     f011c267 <test_kmalloc_firstfit1+0x47d>
f011c250:	83 ec 04             	sub    $0x4,%esp
f011c253:	68 90 a9 13 f0       	push   $0xf013a990
f011c258:	68 ff 02 00 00       	push   $0x2ff
f011c25d:	68 76 a9 13 f0       	push   $0xf013a976
f011c262:	e8 3f 3f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c267:	e8 7c 02 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c26c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c26f:	29 c2                	sub    %eax,%edx
f011c271:	89 d0                	mov    %edx,%eax
f011c273:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c278:	74 17                	je     f011c291 <test_kmalloc_firstfit1+0x4a7>
f011c27a:	83 ec 04             	sub    $0x4,%esp
f011c27d:	68 c0 ad 13 f0       	push   $0xf013adc0
f011c282:	68 00 03 00 00       	push   $0x300
f011c287:	68 76 a9 13 f0       	push   $0xf013a976
f011c28c:	e8 15 3f fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c291:	e8 52 02 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c296:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c299:	e8 ee 79 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c29e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c2a1:	83 ec 0c             	sub    $0xc,%esp
f011c2a4:	68 00 fc 1f 00       	push   $0x1ffc00
f011c2a9:	e8 16 b3 fe ff       	call   f01075c4 <kmalloc>
f011c2ae:	83 c4 10             	add    $0x10,%esp
f011c2b1:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c2b7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c2bd:	89 c1                	mov    %eax,%ecx
f011c2bf:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c2c6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c2c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2ce:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c2d1:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c2d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2d9:	f7 75 8c             	divl   -0x74(%ebp)
f011c2dc:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c2df:	29 d0                	sub    %edx,%eax
f011c2e1:	89 c3                	mov    %eax,%ebx
f011c2e3:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c2ea:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c2ef:	0f b6 d0             	movzbl %al,%edx
f011c2f2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c2f5:	01 d0                	add    %edx,%eax
f011c2f7:	48                   	dec    %eax
f011c2f8:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c2fb:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c2fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011c303:	f7 75 84             	divl   -0x7c(%ebp)
f011c306:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c309:	29 d0                	sub    %edx,%eax
f011c30b:	01 c3                	add    %eax,%ebx
f011c30d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c314:	10 00 00 
f011c317:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c31c:	0f b6 c0             	movzbl %al,%eax
f011c31f:	c1 e0 04             	shl    $0x4,%eax
f011c322:	89 c2                	mov    %eax,%edx
f011c324:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c32a:	01 d0                	add    %edx,%eax
f011c32c:	48                   	dec    %eax
f011c32d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c333:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c339:	ba 00 00 00 00       	mov    $0x0,%edx
f011c33e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c344:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c34a:	29 d0                	sub    %edx,%eax
f011c34c:	01 d8                	add    %ebx,%eax
f011c34e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c353:	39 c1                	cmp    %eax,%ecx
f011c355:	74 17                	je     f011c36e <test_kmalloc_firstfit1+0x584>
f011c357:	83 ec 04             	sub    $0x4,%esp
f011c35a:	68 90 ad 13 f0       	push   $0xf013ad90
f011c35f:	68 06 03 00 00       	push   $0x306
f011c364:	68 76 a9 13 f0       	push   $0xf013a976
f011c369:	e8 38 3e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c36e:	e8 19 79 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c373:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c376:	74 17                	je     f011c38f <test_kmalloc_firstfit1+0x5a5>
f011c378:	83 ec 04             	sub    $0x4,%esp
f011c37b:	68 90 a9 13 f0       	push   $0xf013a990
f011c380:	68 07 03 00 00       	push   $0x307
f011c385:	68 76 a9 13 f0       	push   $0xf013a976
f011c38a:	e8 17 3e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c38f:	e8 54 01 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c394:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c397:	29 c2                	sub    %eax,%edx
f011c399:	89 d0                	mov    %edx,%eax
f011c39b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c3a0:	74 17                	je     f011c3b9 <test_kmalloc_firstfit1+0x5cf>
f011c3a2:	83 ec 04             	sub    $0x4,%esp
f011c3a5:	68 c0 ad 13 f0       	push   $0xf013adc0
f011c3aa:	68 08 03 00 00       	push   $0x308
f011c3af:	68 76 a9 13 f0       	push   $0xf013a976
f011c3b4:	e8 ed 3d fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c3b9:	e8 2a 01 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c3be:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c3c1:	e8 c6 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c3c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c3c9:	83 ec 0c             	sub    $0xc,%esp
f011c3cc:	68 00 fc 1f 00       	push   $0x1ffc00
f011c3d1:	e8 ee b1 fe ff       	call   f01075c4 <kmalloc>
f011c3d6:	83 c4 10             	add    $0x10,%esp
f011c3d9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c3df:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c3e5:	89 c1                	mov    %eax,%ecx
f011c3e7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c3ee:	10 00 00 
f011c3f1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c3f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3fc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c402:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c408:	ba 00 00 00 00       	mov    $0x0,%edx
f011c40d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c413:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c419:	29 d0                	sub    %edx,%eax
f011c41b:	89 c3                	mov    %eax,%ebx
f011c41d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c424:	10 00 00 
f011c427:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c42c:	0f b6 d0             	movzbl %al,%edx
f011c42f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c435:	01 d0                	add    %edx,%eax
f011c437:	48                   	dec    %eax
f011c438:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c43e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c444:	ba 00 00 00 00       	mov    $0x0,%edx
f011c449:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c44f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c455:	29 d0                	sub    %edx,%eax
f011c457:	01 c3                	add    %eax,%ebx
f011c459:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c460:	10 00 00 
f011c463:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c468:	0f b6 c0             	movzbl %al,%eax
f011c46b:	c1 e0 04             	shl    $0x4,%eax
f011c46e:	89 c2                	mov    %eax,%edx
f011c470:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c476:	01 d0                	add    %edx,%eax
f011c478:	48                   	dec    %eax
f011c479:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c47f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c485:	ba 00 00 00 00       	mov    $0x0,%edx
f011c48a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c490:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c496:	29 d0                	sub    %edx,%eax
f011c498:	01 d8                	add    %ebx,%eax
f011c49a:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c49f:	39 c1                	cmp    %eax,%ecx
f011c4a1:	74 17                	je     f011c4ba <test_kmalloc_firstfit1+0x6d0>
f011c4a3:	83 ec 04             	sub    $0x4,%esp
f011c4a6:	68 90 ad 13 f0       	push   $0xf013ad90
f011c4ab:	68 0e 03 00 00       	push   $0x30e
f011c4b0:	68 76 a9 13 f0       	push   $0xf013a976
f011c4b5:	e8 ec 3c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4ba:	e8 cd 77 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c4bf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c4c2:	74 17                	je     f011c4db <test_kmalloc_firstfit1+0x6f1>
f011c4c4:	83 ec 04             	sub    $0x4,%esp
f011c4c7:	68 90 a9 13 f0       	push   $0xf013a990
f011c4cc:	68 0f 03 00 00       	push   $0x30f
f011c4d1:	68 76 a9 13 f0       	push   $0xf013a976
f011c4d6:	e8 cb 3c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c4db:	e8 08 00 ff ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c4e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c4e3:	29 c2                	sub    %eax,%edx
f011c4e5:	89 d0                	mov    %edx,%eax
f011c4e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c4ec:	74 17                	je     f011c505 <test_kmalloc_firstfit1+0x71b>
f011c4ee:	83 ec 04             	sub    $0x4,%esp
f011c4f1:	68 c0 ad 13 f0       	push   $0xf013adc0
f011c4f6:	68 10 03 00 00       	push   $0x310
f011c4fb:	68 76 a9 13 f0       	push   $0xf013a976
f011c500:	e8 a1 3c fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c505:	e8 de ff fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c50a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c50d:	e8 7a 77 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c512:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c515:	83 ec 0c             	sub    $0xc,%esp
f011c518:	68 00 fc 2f 00       	push   $0x2ffc00
f011c51d:	e8 a2 b0 fe ff       	call   f01075c4 <kmalloc>
f011c522:	83 c4 10             	add    $0x10,%esp
f011c525:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c52b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c531:	89 c1                	mov    %eax,%ecx
f011c533:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c53a:	10 00 00 
f011c53d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c543:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c548:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c54e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c554:	ba 00 00 00 00       	mov    $0x0,%edx
f011c559:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c55f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c565:	29 d0                	sub    %edx,%eax
f011c567:	89 c3                	mov    %eax,%ebx
f011c569:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c570:	10 00 00 
f011c573:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c578:	0f b6 d0             	movzbl %al,%edx
f011c57b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c581:	01 d0                	add    %edx,%eax
f011c583:	48                   	dec    %eax
f011c584:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c58a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c590:	ba 00 00 00 00       	mov    $0x0,%edx
f011c595:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c59b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c5a1:	29 d0                	sub    %edx,%eax
f011c5a3:	01 c3                	add    %eax,%ebx
f011c5a5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c5ac:	10 00 00 
f011c5af:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c5b4:	0f b6 c0             	movzbl %al,%eax
f011c5b7:	c1 e0 04             	shl    $0x4,%eax
f011c5ba:	89 c2                	mov    %eax,%edx
f011c5bc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c5c2:	01 d0                	add    %edx,%eax
f011c5c4:	48                   	dec    %eax
f011c5c5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c5cb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c5d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5d6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c5dc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c5e2:	29 d0                	sub    %edx,%eax
f011c5e4:	01 d8                	add    %ebx,%eax
f011c5e6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c5eb:	39 c1                	cmp    %eax,%ecx
f011c5ed:	74 17                	je     f011c606 <test_kmalloc_firstfit1+0x81c>
f011c5ef:	83 ec 04             	sub    $0x4,%esp
f011c5f2:	68 90 ad 13 f0       	push   $0xf013ad90
f011c5f7:	68 16 03 00 00       	push   $0x316
f011c5fc:	68 76 a9 13 f0       	push   $0xf013a976
f011c601:	e8 a0 3b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c606:	e8 81 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c60b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c60e:	74 17                	je     f011c627 <test_kmalloc_firstfit1+0x83d>
f011c610:	83 ec 04             	sub    $0x4,%esp
f011c613:	68 90 a9 13 f0       	push   $0xf013a990
f011c618:	68 17 03 00 00       	push   $0x317
f011c61d:	68 76 a9 13 f0       	push   $0xf013a976
f011c622:	e8 7f 3b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c627:	e8 bc fe fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c62c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c62f:	29 c2                	sub    %eax,%edx
f011c631:	89 d0                	mov    %edx,%eax
f011c633:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c638:	74 17                	je     f011c651 <test_kmalloc_firstfit1+0x867>
f011c63a:	83 ec 04             	sub    $0x4,%esp
f011c63d:	68 c0 ad 13 f0       	push   $0xf013adc0
f011c642:	68 18 03 00 00       	push   $0x318
f011c647:	68 76 a9 13 f0       	push   $0xf013a976
f011c64c:	e8 55 3b fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c651:	e8 92 fe fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c656:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c659:	e8 2e 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c65e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c661:	83 ec 0c             	sub    $0xc,%esp
f011c664:	68 00 fc 2f 00       	push   $0x2ffc00
f011c669:	e8 56 af fe ff       	call   f01075c4 <kmalloc>
f011c66e:	83 c4 10             	add    $0x10,%esp
f011c671:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c677:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c67d:	89 c1                	mov    %eax,%ecx
f011c67f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c686:	10 00 00 
f011c689:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c68f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c694:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c69a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c6a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6a5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c6ab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c6b1:	29 d0                	sub    %edx,%eax
f011c6b3:	89 c3                	mov    %eax,%ebx
f011c6b5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c6bc:	10 00 00 
f011c6bf:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c6c4:	0f b6 d0             	movzbl %al,%edx
f011c6c7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c6cd:	01 d0                	add    %edx,%eax
f011c6cf:	48                   	dec    %eax
f011c6d0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c6d6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c6dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6e1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c6e7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c6ed:	29 d0                	sub    %edx,%eax
f011c6ef:	01 c3                	add    %eax,%ebx
f011c6f1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c6f8:	10 00 00 
f011c6fb:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c700:	0f b6 c0             	movzbl %al,%eax
f011c703:	c1 e0 04             	shl    $0x4,%eax
f011c706:	89 c2                	mov    %eax,%edx
f011c708:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c70e:	01 d0                	add    %edx,%eax
f011c710:	48                   	dec    %eax
f011c711:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c717:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c71d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c722:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c728:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c72e:	29 d0                	sub    %edx,%eax
f011c730:	01 d8                	add    %ebx,%eax
f011c732:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011c737:	39 c1                	cmp    %eax,%ecx
f011c739:	74 17                	je     f011c752 <test_kmalloc_firstfit1+0x968>
f011c73b:	83 ec 04             	sub    $0x4,%esp
f011c73e:	68 90 ad 13 f0       	push   $0xf013ad90
f011c743:	68 1e 03 00 00       	push   $0x31e
f011c748:	68 76 a9 13 f0       	push   $0xf013a976
f011c74d:	e8 54 3a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c752:	e8 35 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c757:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c75a:	74 17                	je     f011c773 <test_kmalloc_firstfit1+0x989>
f011c75c:	83 ec 04             	sub    $0x4,%esp
f011c75f:	68 90 a9 13 f0       	push   $0xf013a990
f011c764:	68 1f 03 00 00       	push   $0x31f
f011c769:	68 76 a9 13 f0       	push   $0xf013a976
f011c76e:	e8 33 3a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c773:	e8 70 fd fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c778:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c77b:	29 c2                	sub    %eax,%edx
f011c77d:	89 d0                	mov    %edx,%eax
f011c77f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c784:	74 17                	je     f011c79d <test_kmalloc_firstfit1+0x9b3>
f011c786:	83 ec 04             	sub    $0x4,%esp
f011c789:	68 c0 ad 13 f0       	push   $0xf013adc0
f011c78e:	68 20 03 00 00       	push   $0x320
f011c793:	68 76 a9 13 f0       	push   $0xf013a976
f011c798:	e8 09 3a fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c79d:	e8 46 fd fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c7a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7a5:	e8 e2 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c7aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011c7ad:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c7b3:	83 ec 0c             	sub    $0xc,%esp
f011c7b6:	50                   	push   %eax
f011c7b7:	e8 22 ae fe ff       	call   f01075de <kfree>
f011c7bc:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7bf:	e8 c8 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c7c4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7c7:	74 17                	je     f011c7e0 <test_kmalloc_firstfit1+0x9f6>
f011c7c9:	83 ec 04             	sub    $0x4,%esp
f011c7cc:	68 90 a9 13 f0       	push   $0xf013a990
f011c7d1:	68 29 03 00 00       	push   $0x329
f011c7d6:	68 76 a9 13 f0       	push   $0xf013a976
f011c7db:	e8 c6 39 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c7e0:	e8 03 fd fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c7e5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c7e8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c7ed:	74 17                	je     f011c806 <test_kmalloc_firstfit1+0xa1c>
f011c7ef:	83 ec 04             	sub    $0x4,%esp
f011c7f2:	68 d3 ad 13 f0       	push   $0xf013add3
f011c7f7:	68 2a 03 00 00       	push   $0x32a
f011c7fc:	68 76 a9 13 f0       	push   $0xf013a976
f011c801:	e8 a0 39 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c806:	e8 dd fc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c80b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c80e:	e8 79 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c813:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011c816:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c81c:	83 ec 0c             	sub    $0xc,%esp
f011c81f:	50                   	push   %eax
f011c820:	e8 b9 ad fe ff       	call   f01075de <kfree>
f011c825:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c828:	e8 5f 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c82d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c830:	74 17                	je     f011c849 <test_kmalloc_firstfit1+0xa5f>
f011c832:	83 ec 04             	sub    $0x4,%esp
f011c835:	68 90 a9 13 f0       	push   $0xf013a990
f011c83a:	68 30 03 00 00       	push   $0x330
f011c83f:	68 76 a9 13 f0       	push   $0xf013a976
f011c844:	e8 5d 39 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011c849:	e8 9a fc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c84e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c851:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c856:	74 17                	je     f011c86f <test_kmalloc_firstfit1+0xa85>
f011c858:	83 ec 04             	sub    $0x4,%esp
f011c85b:	68 d3 ad 13 f0       	push   $0xf013add3
f011c860:	68 31 03 00 00       	push   $0x331
f011c865:	68 76 a9 13 f0       	push   $0xf013a976
f011c86a:	e8 37 39 fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c86f:	e8 74 fc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c874:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c877:	e8 10 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c87c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011c87f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c885:	83 ec 0c             	sub    $0xc,%esp
f011c888:	50                   	push   %eax
f011c889:	e8 50 ad fe ff       	call   f01075de <kfree>
f011c88e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c891:	e8 f6 73 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c896:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c899:	74 17                	je     f011c8b2 <test_kmalloc_firstfit1+0xac8>
f011c89b:	83 ec 04             	sub    $0x4,%esp
f011c89e:	68 90 a9 13 f0       	push   $0xf013a990
f011c8a3:	68 37 03 00 00       	push   $0x337
f011c8a8:	68 76 a9 13 f0       	push   $0xf013a976
f011c8ad:	e8 f4 38 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011c8b2:	e8 31 fc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c8b7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c8ba:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c8bf:	74 17                	je     f011c8d8 <test_kmalloc_firstfit1+0xaee>
f011c8c1:	83 ec 04             	sub    $0x4,%esp
f011c8c4:	68 d3 ad 13 f0       	push   $0xf013add3
f011c8c9:	68 38 03 00 00       	push   $0x338
f011c8ce:	68 76 a9 13 f0       	push   $0xf013a976
f011c8d3:	e8 ce 38 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c8d8:	e8 0b fc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c8dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c8e0:	e8 a7 73 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c8e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011c8e8:	83 ec 0c             	sub    $0xc,%esp
f011c8eb:	68 00 fc 07 00       	push   $0x7fc00
f011c8f0:	e8 cf ac fe ff       	call   f01075c4 <kmalloc>
f011c8f5:	83 c4 10             	add    $0x10,%esp
f011c8f8:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c8fe:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c904:	89 c1                	mov    %eax,%ecx
f011c906:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c90d:	10 00 00 
f011c910:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c916:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c91b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c921:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c927:	ba 00 00 00 00       	mov    $0x0,%edx
f011c92c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c932:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c938:	29 d0                	sub    %edx,%eax
f011c93a:	89 c3                	mov    %eax,%ebx
f011c93c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c943:	10 00 00 
f011c946:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c94b:	0f b6 d0             	movzbl %al,%edx
f011c94e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c954:	01 d0                	add    %edx,%eax
f011c956:	48                   	dec    %eax
f011c957:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c95d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c963:	ba 00 00 00 00       	mov    $0x0,%edx
f011c968:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c96e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c974:	29 d0                	sub    %edx,%eax
f011c976:	01 c3                	add    %eax,%ebx
f011c978:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c97f:	10 00 00 
f011c982:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011c987:	0f b6 c0             	movzbl %al,%eax
f011c98a:	c1 e0 04             	shl    $0x4,%eax
f011c98d:	89 c2                	mov    %eax,%edx
f011c98f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c995:	01 d0                	add    %edx,%eax
f011c997:	48                   	dec    %eax
f011c998:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c99e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c9a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9a9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c9af:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c9b5:	29 d0                	sub    %edx,%eax
f011c9b7:	01 d8                	add    %ebx,%eax
f011c9b9:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c9be:	39 c1                	cmp    %eax,%ecx
f011c9c0:	74 17                	je     f011c9d9 <test_kmalloc_firstfit1+0xbef>
f011c9c2:	83 ec 04             	sub    $0x4,%esp
f011c9c5:	68 90 ad 13 f0       	push   $0xf013ad90
f011c9ca:	68 41 03 00 00       	push   $0x341
f011c9cf:	68 76 a9 13 f0       	push   $0xf013a976
f011c9d4:	e8 cd 37 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9d9:	e8 ae 72 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c9de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9e1:	74 17                	je     f011c9fa <test_kmalloc_firstfit1+0xc10>
f011c9e3:	83 ec 04             	sub    $0x4,%esp
f011c9e6:	68 90 a9 13 f0       	push   $0xf013a990
f011c9eb:	68 42 03 00 00       	push   $0x342
f011c9f0:	68 76 a9 13 f0       	push   $0xf013a976
f011c9f5:	e8 ac 37 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011c9fa:	e8 e9 fa fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011c9ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca02:	29 c2                	sub    %eax,%edx
f011ca04:	89 d0                	mov    %edx,%eax
f011ca06:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ca0b:	74 17                	je     f011ca24 <test_kmalloc_firstfit1+0xc3a>
f011ca0d:	83 ec 04             	sub    $0x4,%esp
f011ca10:	68 c0 ad 13 f0       	push   $0xf013adc0
f011ca15:	68 43 03 00 00       	push   $0x343
f011ca1a:	68 76 a9 13 f0       	push   $0xf013a976
f011ca1f:	e8 82 37 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011ca24:	e8 bf fa fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ca29:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca2c:	e8 5b 72 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ca31:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011ca34:	83 ec 0c             	sub    $0xc,%esp
f011ca37:	68 00 fc 0f 00       	push   $0xffc00
f011ca3c:	e8 83 ab fe ff       	call   f01075c4 <kmalloc>
f011ca41:	83 c4 10             	add    $0x10,%esp
f011ca44:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ca4a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ca50:	89 c1                	mov    %eax,%ecx
f011ca52:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ca59:	10 00 00 
f011ca5c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ca62:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca67:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ca6d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ca73:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca78:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011ca7e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ca84:	29 d0                	sub    %edx,%eax
f011ca86:	89 c3                	mov    %eax,%ebx
f011ca88:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011ca8f:	10 00 00 
f011ca92:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ca97:	0f b6 d0             	movzbl %al,%edx
f011ca9a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011caa0:	01 d0                	add    %edx,%eax
f011caa2:	48                   	dec    %eax
f011caa3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011caa9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011caaf:	ba 00 00 00 00       	mov    $0x0,%edx
f011cab4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011caba:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cac0:	29 d0                	sub    %edx,%eax
f011cac2:	01 c3                	add    %eax,%ebx
f011cac4:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011cacb:	10 00 00 
f011cace:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011cad3:	0f b6 c0             	movzbl %al,%eax
f011cad6:	c1 e0 04             	shl    $0x4,%eax
f011cad9:	89 c2                	mov    %eax,%edx
f011cadb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cae1:	01 d0                	add    %edx,%eax
f011cae3:	48                   	dec    %eax
f011cae4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011caea:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011caf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011caf5:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011cafb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cb01:	29 d0                	sub    %edx,%eax
f011cb03:	01 d8                	add    %ebx,%eax
f011cb05:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cb0a:	39 c1                	cmp    %eax,%ecx
f011cb0c:	74 17                	je     f011cb25 <test_kmalloc_firstfit1+0xd3b>
f011cb0e:	83 ec 04             	sub    $0x4,%esp
f011cb11:	68 90 ad 13 f0       	push   $0xf013ad90
f011cb16:	68 49 03 00 00       	push   $0x349
f011cb1b:	68 76 a9 13 f0       	push   $0xf013a976
f011cb20:	e8 81 36 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb25:	e8 62 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cb2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb2d:	74 17                	je     f011cb46 <test_kmalloc_firstfit1+0xd5c>
f011cb2f:	83 ec 04             	sub    $0x4,%esp
f011cb32:	68 90 a9 13 f0       	push   $0xf013a990
f011cb37:	68 4a 03 00 00       	push   $0x34a
f011cb3c:	68 76 a9 13 f0       	push   $0xf013a976
f011cb41:	e8 60 36 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cb46:	e8 9d f9 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011cb4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb4e:	29 c2                	sub    %eax,%edx
f011cb50:	89 d0                	mov    %edx,%eax
f011cb52:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb57:	74 17                	je     f011cb70 <test_kmalloc_firstfit1+0xd86>
f011cb59:	83 ec 04             	sub    $0x4,%esp
f011cb5c:	68 c0 ad 13 f0       	push   $0xf013adc0
f011cb61:	68 4b 03 00 00       	push   $0x34b
f011cb66:	68 76 a9 13 f0       	push   $0xf013a976
f011cb6b:	e8 36 36 fe ff       	call   f01001a6 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cb70:	e8 73 f9 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011cb75:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb78:	e8 0f 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cb7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011cb80:	83 ec 0c             	sub    $0xc,%esp
f011cb83:	68 00 fc 03 00       	push   $0x3fc00
f011cb88:	e8 37 aa fe ff       	call   f01075c4 <kmalloc>
f011cb8d:	83 c4 10             	add    $0x10,%esp
f011cb90:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011cb96:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011cb9c:	89 c1                	mov    %eax,%ecx
f011cb9e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011cba5:	10 00 00 
f011cba8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011cbae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbb3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011cbb9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cbbf:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbc4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011cbca:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cbd0:	29 d0                	sub    %edx,%eax
f011cbd2:	89 c3                	mov    %eax,%ebx
f011cbd4:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011cbdb:	10 00 00 
f011cbde:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011cbe3:	0f b6 d0             	movzbl %al,%edx
f011cbe6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011cbec:	01 d0                	add    %edx,%eax
f011cbee:	48                   	dec    %eax
f011cbef:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011cbf5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cbfb:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc00:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011cc06:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cc0c:	29 d0                	sub    %edx,%eax
f011cc0e:	01 c3                	add    %eax,%ebx
f011cc10:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011cc17:	10 00 00 
f011cc1a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011cc1f:	0f b6 c0             	movzbl %al,%eax
f011cc22:	c1 e0 04             	shl    $0x4,%eax
f011cc25:	89 c2                	mov    %eax,%edx
f011cc27:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cc2d:	01 d0                	add    %edx,%eax
f011cc2f:	48                   	dec    %eax
f011cc30:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011cc36:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cc3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc41:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011cc47:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cc4d:	29 d0                	sub    %edx,%eax
f011cc4f:	01 d8                	add    %ebx,%eax
f011cc51:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011cc56:	39 c1                	cmp    %eax,%ecx
f011cc58:	74 17                	je     f011cc71 <test_kmalloc_firstfit1+0xe87>
f011cc5a:	83 ec 04             	sub    $0x4,%esp
f011cc5d:	68 90 ad 13 f0       	push   $0xf013ad90
f011cc62:	68 52 03 00 00       	push   $0x352
f011cc67:	68 76 a9 13 f0       	push   $0xf013a976
f011cc6c:	e8 35 35 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc71:	e8 16 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cc76:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc79:	74 17                	je     f011cc92 <test_kmalloc_firstfit1+0xea8>
f011cc7b:	83 ec 04             	sub    $0x4,%esp
f011cc7e:	68 90 a9 13 f0       	push   $0xf013a990
f011cc83:	68 53 03 00 00       	push   $0x353
f011cc88:	68 76 a9 13 f0       	push   $0xf013a976
f011cc8d:	e8 14 35 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011cc92:	e8 51 f8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011cc97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc9a:	29 c2                	sub    %eax,%edx
f011cc9c:	89 d0                	mov    %edx,%eax
f011cc9e:	83 f8 40             	cmp    $0x40,%eax
f011cca1:	74 17                	je     f011ccba <test_kmalloc_firstfit1+0xed0>
f011cca3:	83 ec 04             	sub    $0x4,%esp
f011cca6:	68 c0 ad 13 f0       	push   $0xf013adc0
f011ccab:	68 54 03 00 00       	push   $0x354
f011ccb0:	68 76 a9 13 f0       	push   $0xf013a976
f011ccb5:	e8 ec 34 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ccba:	e8 29 f8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ccbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccc2:	e8 c5 6f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ccc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011ccca:	83 ec 0c             	sub    $0xc,%esp
f011cccd:	68 00 00 20 00       	push   $0x200000
f011ccd2:	e8 ed a8 fe ff       	call   f01075c4 <kmalloc>
f011ccd7:	83 c4 10             	add    $0x10,%esp
f011ccda:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cce0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cce6:	89 c1                	mov    %eax,%ecx
f011cce8:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ccef:	10 00 00 
f011ccf2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ccf8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ccfd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011cd03:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cd09:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd0e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011cd14:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cd1a:	29 d0                	sub    %edx,%eax
f011cd1c:	89 c3                	mov    %eax,%ebx
f011cd1e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011cd25:	10 00 00 
f011cd28:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011cd2d:	0f b6 d0             	movzbl %al,%edx
f011cd30:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cd36:	01 d0                	add    %edx,%eax
f011cd38:	48                   	dec    %eax
f011cd39:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011cd3f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cd45:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd4a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011cd50:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cd56:	29 d0                	sub    %edx,%eax
f011cd58:	01 c3                	add    %eax,%ebx
f011cd5a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011cd61:	10 00 00 
f011cd64:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011cd69:	0f b6 c0             	movzbl %al,%eax
f011cd6c:	c1 e0 04             	shl    $0x4,%eax
f011cd6f:	89 c2                	mov    %eax,%edx
f011cd71:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cd77:	01 d0                	add    %edx,%eax
f011cd79:	48                   	dec    %eax
f011cd7a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011cd80:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cd86:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd8b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011cd91:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cd97:	29 d0                	sub    %edx,%eax
f011cd99:	01 d8                	add    %ebx,%eax
f011cd9b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cda0:	39 c1                	cmp    %eax,%ecx
f011cda2:	74 17                	je     f011cdbb <test_kmalloc_firstfit1+0xfd1>
f011cda4:	83 ec 04             	sub    $0x4,%esp
f011cda7:	68 90 ad 13 f0       	push   $0xf013ad90
f011cdac:	68 5a 03 00 00       	push   $0x35a
f011cdb1:	68 76 a9 13 f0       	push   $0xf013a976
f011cdb6:	e8 eb 33 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cdbb:	e8 28 f7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011cdc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cdc3:	29 c2                	sub    %eax,%edx
f011cdc5:	89 d0                	mov    %edx,%eax
f011cdc7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cdcc:	74 17                	je     f011cde5 <test_kmalloc_firstfit1+0xffb>
f011cdce:	83 ec 04             	sub    $0x4,%esp
f011cdd1:	68 c0 ad 13 f0       	push   $0xf013adc0
f011cdd6:	68 5b 03 00 00       	push   $0x35b
f011cddb:	68 76 a9 13 f0       	push   $0xf013a976
f011cde0:	e8 c1 33 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cde5:	e8 a2 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cdea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cded:	74 17                	je     f011ce06 <test_kmalloc_firstfit1+0x101c>
f011cdef:	83 ec 04             	sub    $0x4,%esp
f011cdf2:	68 90 a9 13 f0       	push   $0xf013a990
f011cdf7:	68 5c 03 00 00       	push   $0x35c
f011cdfc:	68 76 a9 13 f0       	push   $0xf013a976
f011ce01:	e8 a0 33 fe ff       	call   f01001a6 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011ce06:	e8 dd f6 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ce0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce0e:	e8 79 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ce13:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011ce16:	83 ec 0c             	sub    $0xc,%esp
f011ce19:	68 00 fc 3f 00       	push   $0x3ffc00
f011ce1e:	e8 a1 a7 fe ff       	call   f01075c4 <kmalloc>
f011ce23:	83 c4 10             	add    $0x10,%esp
f011ce26:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011ce2c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ce32:	89 c1                	mov    %eax,%ecx
f011ce34:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ce3b:	10 00 00 
f011ce3e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ce44:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce49:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ce4f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ce55:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce5a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ce60:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ce66:	29 d0                	sub    %edx,%eax
f011ce68:	89 c3                	mov    %eax,%ebx
f011ce6a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ce71:	10 00 00 
f011ce74:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ce79:	0f b6 d0             	movzbl %al,%edx
f011ce7c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ce82:	01 d0                	add    %edx,%eax
f011ce84:	48                   	dec    %eax
f011ce85:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ce8b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ce91:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce96:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ce9c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cea2:	29 d0                	sub    %edx,%eax
f011cea4:	01 c3                	add    %eax,%ebx
f011cea6:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011cead:	10 00 00 
f011ceb0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ceb5:	0f b6 c0             	movzbl %al,%eax
f011ceb8:	c1 e0 04             	shl    $0x4,%eax
f011cebb:	89 c2                	mov    %eax,%edx
f011cebd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011cec3:	01 d0                	add    %edx,%eax
f011cec5:	48                   	dec    %eax
f011cec6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011cecc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ced2:	ba 00 00 00 00       	mov    $0x0,%edx
f011ced7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011cedd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cee3:	29 d0                	sub    %edx,%eax
f011cee5:	01 d8                	add    %ebx,%eax
f011cee7:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011ceec:	39 c1                	cmp    %eax,%ecx
f011ceee:	74 17                	je     f011cf07 <test_kmalloc_firstfit1+0x111d>
f011cef0:	83 ec 04             	sub    $0x4,%esp
f011cef3:	68 90 ad 13 f0       	push   $0xf013ad90
f011cef8:	68 63 03 00 00       	push   $0x363
f011cefd:	68 76 a9 13 f0       	push   $0xf013a976
f011cf02:	e8 9f 32 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf07:	e8 80 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf0f:	74 17                	je     f011cf28 <test_kmalloc_firstfit1+0x113e>
f011cf11:	83 ec 04             	sub    $0x4,%esp
f011cf14:	68 90 a9 13 f0       	push   $0xf013a990
f011cf19:	68 64 03 00 00       	push   $0x364
f011cf1e:	68 76 a9 13 f0       	push   $0xf013a976
f011cf23:	e8 7e 32 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011cf28:	e8 bb f5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011cf2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf30:	29 c2                	sub    %eax,%edx
f011cf32:	89 d0                	mov    %edx,%eax
f011cf34:	3d 00 04 00 00       	cmp    $0x400,%eax
f011cf39:	74 17                	je     f011cf52 <test_kmalloc_firstfit1+0x1168>
f011cf3b:	83 ec 04             	sub    $0x4,%esp
f011cf3e:	68 c0 ad 13 f0       	push   $0xf013adc0
f011cf43:	68 65 03 00 00       	push   $0x365
f011cf48:	68 76 a9 13 f0       	push   $0xf013a976
f011cf4d:	e8 54 32 fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011cf52:	e8 91 f5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011cf57:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf5a:	e8 2d 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011cf62:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cf68:	83 ec 0c             	sub    $0xc,%esp
f011cf6b:	50                   	push   %eax
f011cf6c:	e8 6d a6 fe ff       	call   f01075de <kfree>
f011cf71:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf74:	e8 13 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf79:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf7c:	74 17                	je     f011cf95 <test_kmalloc_firstfit1+0x11ab>
f011cf7e:	83 ec 04             	sub    $0x4,%esp
f011cf81:	68 90 a9 13 f0       	push   $0xf013a990
f011cf86:	68 6e 03 00 00       	push   $0x36e
f011cf8b:	68 76 a9 13 f0       	push   $0xf013a976
f011cf90:	e8 11 32 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cf95:	e8 4e f5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011cf9a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf9d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cfa2:	74 17                	je     f011cfbb <test_kmalloc_firstfit1+0x11d1>
f011cfa4:	83 ec 04             	sub    $0x4,%esp
f011cfa7:	68 d3 ad 13 f0       	push   $0xf013add3
f011cfac:	68 6f 03 00 00       	push   $0x36f
f011cfb1:	68 76 a9 13 f0       	push   $0xf013a976
f011cfb6:	e8 eb 31 fe ff       	call   f01001a6 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011cfbb:	e8 28 f5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011cfc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfc3:	e8 c4 6c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cfc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011cfcb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011cfd1:	83 ec 0c             	sub    $0xc,%esp
f011cfd4:	50                   	push   %eax
f011cfd5:	e8 04 a6 fe ff       	call   f01075de <kfree>
f011cfda:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfdd:	e8 aa 6c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cfe2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfe5:	74 17                	je     f011cffe <test_kmalloc_firstfit1+0x1214>
f011cfe7:	83 ec 04             	sub    $0x4,%esp
f011cfea:	68 90 a9 13 f0       	push   $0xf013a990
f011cfef:	68 75 03 00 00       	push   $0x375
f011cff4:	68 76 a9 13 f0       	push   $0xf013a976
f011cff9:	e8 a8 31 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cffe:	e8 e5 f4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d003:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d006:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d00b:	74 17                	je     f011d024 <test_kmalloc_firstfit1+0x123a>
f011d00d:	83 ec 04             	sub    $0x4,%esp
f011d010:	68 d3 ad 13 f0       	push   $0xf013add3
f011d015:	68 76 03 00 00       	push   $0x376
f011d01a:	68 76 a9 13 f0       	push   $0xf013a976
f011d01f:	e8 82 31 fe ff       	call   f01001a6 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d024:	e8 bf f4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d029:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d02c:	e8 5b 6c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d031:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d034:	83 ec 0c             	sub    $0xc,%esp
f011d037:	68 00 00 10 00       	push   $0x100000
f011d03c:	e8 83 a5 fe ff       	call   f01075c4 <kmalloc>
f011d041:	83 c4 10             	add    $0x10,%esp
f011d044:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d04a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d050:	89 c1                	mov    %eax,%ecx
f011d052:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d059:	10 00 00 
f011d05c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d062:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d067:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d06d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d073:	ba 00 00 00 00       	mov    $0x0,%edx
f011d078:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d07e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d084:	29 d0                	sub    %edx,%eax
f011d086:	89 c3                	mov    %eax,%ebx
f011d088:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d08f:	10 00 00 
f011d092:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d097:	0f b6 d0             	movzbl %al,%edx
f011d09a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d0a0:	01 d0                	add    %edx,%eax
f011d0a2:	48                   	dec    %eax
f011d0a3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d0a9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d0af:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0b4:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d0ba:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d0c0:	29 d0                	sub    %edx,%eax
f011d0c2:	01 c3                	add    %eax,%ebx
f011d0c4:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d0cb:	10 00 00 
f011d0ce:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d0d3:	0f b6 c0             	movzbl %al,%eax
f011d0d6:	c1 e0 04             	shl    $0x4,%eax
f011d0d9:	89 c2                	mov    %eax,%edx
f011d0db:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d0e1:	01 d0                	add    %edx,%eax
f011d0e3:	48                   	dec    %eax
f011d0e4:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d0ea:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d0f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0f5:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d0fb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d101:	29 d0                	sub    %edx,%eax
f011d103:	01 d8                	add    %ebx,%eax
f011d105:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d10a:	39 c1                	cmp    %eax,%ecx
f011d10c:	74 17                	je     f011d125 <test_kmalloc_firstfit1+0x133b>
f011d10e:	83 ec 04             	sub    $0x4,%esp
f011d111:	68 90 ad 13 f0       	push   $0xf013ad90
f011d116:	68 80 03 00 00       	push   $0x380
f011d11b:	68 76 a9 13 f0       	push   $0xf013a976
f011d120:	e8 81 30 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d125:	e8 62 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d12a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d12d:	74 17                	je     f011d146 <test_kmalloc_firstfit1+0x135c>
f011d12f:	83 ec 04             	sub    $0x4,%esp
f011d132:	68 90 a9 13 f0       	push   $0xf013a990
f011d137:	68 81 03 00 00       	push   $0x381
f011d13c:	68 76 a9 13 f0       	push   $0xf013a976
f011d141:	e8 60 30 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d146:	e8 9d f3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d14b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d14e:	29 c2                	sub    %eax,%edx
f011d150:	89 d0                	mov    %edx,%eax
f011d152:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d157:	74 17                	je     f011d170 <test_kmalloc_firstfit1+0x1386>
f011d159:	83 ec 04             	sub    $0x4,%esp
f011d15c:	68 c0 ad 13 f0       	push   $0xf013adc0
f011d161:	68 82 03 00 00       	push   $0x382
f011d166:	68 76 a9 13 f0       	push   $0xf013a976
f011d16b:	e8 36 30 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d170:	83 ec 0c             	sub    $0xc,%esp
f011d173:	68 6c af 13 f0       	push   $0xf013af6c
f011d178:	e8 b0 3a fe ff       	call   f0100c2d <cprintf>
f011d17d:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d180:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d185:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d188:	5b                   	pop    %ebx
f011d189:	5f                   	pop    %edi
f011d18a:	5d                   	pop    %ebp
f011d18b:	c3                   	ret    

f011d18c <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d18c:	55                   	push   %ebp
f011d18d:	89 e5                	mov    %esp,%ebp
f011d18f:	57                   	push   %edi
f011d190:	53                   	push   %ebx
f011d191:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d197:	83 ec 0c             	sub    $0xc,%esp
f011d19a:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011d19f:	e8 89 3a fe ff       	call   f0100c2d <cprintf>
f011d1a4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d1a7:	83 ec 0c             	sub    $0xc,%esp
f011d1aa:	68 e8 a8 13 f0       	push   $0xf013a8e8
f011d1af:	e8 79 3a fe ff       	call   f0100c2d <cprintf>
f011d1b4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d1b7:	83 ec 0c             	sub    $0xc,%esp
f011d1ba:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011d1bf:	e8 69 3a fe ff       	call   f0100c2d <cprintf>
f011d1c4:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d1c7:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d1cd:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d1d2:	b8 00 00 00 00       	mov    $0x0,%eax
f011d1d7:	89 d7                	mov    %edx,%edi
f011d1d9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d1db:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d1e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d1e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d1ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d1f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1f5:	f7 75 f4             	divl   -0xc(%ebp)
f011d1f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d1fb:	29 d0                	sub    %edx,%eax
f011d1fd:	89 c1                	mov    %eax,%ecx
f011d1ff:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d206:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d20b:	0f b6 d0             	movzbl %al,%edx
f011d20e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d211:	01 d0                	add    %edx,%eax
f011d213:	48                   	dec    %eax
f011d214:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d217:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d21a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d21f:	f7 75 ec             	divl   -0x14(%ebp)
f011d222:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d225:	29 d0                	sub    %edx,%eax
f011d227:	01 c1                	add    %eax,%ecx
f011d229:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d230:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d235:	0f b6 c0             	movzbl %al,%eax
f011d238:	c1 e0 04             	shl    $0x4,%eax
f011d23b:	89 c2                	mov    %eax,%edx
f011d23d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d240:	01 d0                	add    %edx,%eax
f011d242:	48                   	dec    %eax
f011d243:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d246:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d249:	ba 00 00 00 00       	mov    $0x0,%edx
f011d24e:	f7 75 e4             	divl   -0x1c(%ebp)
f011d251:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d254:	29 d0                	sub    %edx,%eax
f011d256:	01 c8                	add    %ecx,%eax
f011d258:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d25d:	29 c2                	sub    %eax,%edx
f011d25f:	89 d0                	mov    %edx,%eax
f011d261:	83 ec 0c             	sub    $0xc,%esp
f011d264:	50                   	push   %eax
f011d265:	e8 5a a3 fe ff       	call   f01075c4 <kmalloc>
f011d26a:	83 c4 10             	add    $0x10,%esp
f011d26d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d273:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d279:	85 c0                	test   %eax,%eax
f011d27b:	74 17                	je     f011d294 <test_kmalloc_firstfit2+0x108>
f011d27d:	83 ec 04             	sub    $0x4,%esp
f011d280:	68 b8 af 13 f0       	push   $0xf013afb8
f011d285:	68 97 03 00 00       	push   $0x397
f011d28a:	68 76 a9 13 f0       	push   $0xf013a976
f011d28f:	e8 12 2f fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d294:	e8 4f f2 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d299:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d29c:	e8 eb 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d2a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d2a4:	83 ec 0c             	sub    $0xc,%esp
f011d2a7:	68 00 fc 1f 00       	push   $0x1ffc00
f011d2ac:	e8 13 a3 fe ff       	call   f01075c4 <kmalloc>
f011d2b1:	83 c4 10             	add    $0x10,%esp
f011d2b4:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d2ba:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d2c0:	89 c1                	mov    %eax,%ecx
f011d2c2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d2c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d2cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d2d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d2d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d2d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2dc:	f7 75 d4             	divl   -0x2c(%ebp)
f011d2df:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d2e2:	29 d0                	sub    %edx,%eax
f011d2e4:	89 c3                	mov    %eax,%ebx
f011d2e6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d2ed:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d2f2:	0f b6 d0             	movzbl %al,%edx
f011d2f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d2f8:	01 d0                	add    %edx,%eax
f011d2fa:	48                   	dec    %eax
f011d2fb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d2fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d301:	ba 00 00 00 00       	mov    $0x0,%edx
f011d306:	f7 75 cc             	divl   -0x34(%ebp)
f011d309:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d30c:	29 d0                	sub    %edx,%eax
f011d30e:	01 c3                	add    %eax,%ebx
f011d310:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d317:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d31c:	0f b6 c0             	movzbl %al,%eax
f011d31f:	c1 e0 04             	shl    $0x4,%eax
f011d322:	89 c2                	mov    %eax,%edx
f011d324:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d327:	01 d0                	add    %edx,%eax
f011d329:	48                   	dec    %eax
f011d32a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d32d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d330:	ba 00 00 00 00       	mov    $0x0,%edx
f011d335:	f7 75 c4             	divl   -0x3c(%ebp)
f011d338:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d33b:	29 d0                	sub    %edx,%eax
f011d33d:	01 d8                	add    %ebx,%eax
f011d33f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d344:	39 c1                	cmp    %eax,%ecx
f011d346:	74 17                	je     f011d35f <test_kmalloc_firstfit2+0x1d3>
f011d348:	83 ec 04             	sub    $0x4,%esp
f011d34b:	68 90 ad 13 f0       	push   $0xf013ad90
f011d350:	68 a1 03 00 00       	push   $0x3a1
f011d355:	68 76 a9 13 f0       	push   $0xf013a976
f011d35a:	e8 47 2e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d35f:	e8 28 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d364:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d367:	74 17                	je     f011d380 <test_kmalloc_firstfit2+0x1f4>
f011d369:	83 ec 04             	sub    $0x4,%esp
f011d36c:	68 90 a9 13 f0       	push   $0xf013a990
f011d371:	68 a2 03 00 00       	push   $0x3a2
f011d376:	68 76 a9 13 f0       	push   $0xf013a976
f011d37b:	e8 26 2e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d380:	e8 63 f1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d385:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d388:	29 c2                	sub    %eax,%edx
f011d38a:	89 d0                	mov    %edx,%eax
f011d38c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d391:	74 17                	je     f011d3aa <test_kmalloc_firstfit2+0x21e>
f011d393:	83 ec 04             	sub    $0x4,%esp
f011d396:	68 c0 ad 13 f0       	push   $0xf013adc0
f011d39b:	68 a3 03 00 00       	push   $0x3a3
f011d3a0:	68 76 a9 13 f0       	push   $0xf013a976
f011d3a5:	e8 fc 2d fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d3aa:	e8 39 f1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d3af:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3b2:	e8 d5 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d3b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d3ba:	83 ec 0c             	sub    $0xc,%esp
f011d3bd:	68 00 fc 1f 00       	push   $0x1ffc00
f011d3c2:	e8 fd a1 fe ff       	call   f01075c4 <kmalloc>
f011d3c7:	83 c4 10             	add    $0x10,%esp
f011d3ca:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d3d0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d3d6:	89 c1                	mov    %eax,%ecx
f011d3d8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d3df:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d3e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d3e7:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d3ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d3ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3f2:	f7 75 bc             	divl   -0x44(%ebp)
f011d3f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d3f8:	29 d0                	sub    %edx,%eax
f011d3fa:	89 c3                	mov    %eax,%ebx
f011d3fc:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d403:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d408:	0f b6 d0             	movzbl %al,%edx
f011d40b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d40e:	01 d0                	add    %edx,%eax
f011d410:	48                   	dec    %eax
f011d411:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d414:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d417:	ba 00 00 00 00       	mov    $0x0,%edx
f011d41c:	f7 75 b4             	divl   -0x4c(%ebp)
f011d41f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d422:	29 d0                	sub    %edx,%eax
f011d424:	01 c3                	add    %eax,%ebx
f011d426:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d42d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d432:	0f b6 c0             	movzbl %al,%eax
f011d435:	c1 e0 04             	shl    $0x4,%eax
f011d438:	89 c2                	mov    %eax,%edx
f011d43a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d43d:	01 d0                	add    %edx,%eax
f011d43f:	48                   	dec    %eax
f011d440:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d443:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d446:	ba 00 00 00 00       	mov    $0x0,%edx
f011d44b:	f7 75 ac             	divl   -0x54(%ebp)
f011d44e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d451:	29 d0                	sub    %edx,%eax
f011d453:	01 d8                	add    %ebx,%eax
f011d455:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d45a:	39 c1                	cmp    %eax,%ecx
f011d45c:	74 17                	je     f011d475 <test_kmalloc_firstfit2+0x2e9>
f011d45e:	83 ec 04             	sub    $0x4,%esp
f011d461:	68 90 ad 13 f0       	push   $0xf013ad90
f011d466:	68 a9 03 00 00       	push   $0x3a9
f011d46b:	68 76 a9 13 f0       	push   $0xf013a976
f011d470:	e8 31 2d fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d475:	e8 12 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d47a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d47d:	74 17                	je     f011d496 <test_kmalloc_firstfit2+0x30a>
f011d47f:	83 ec 04             	sub    $0x4,%esp
f011d482:	68 90 a9 13 f0       	push   $0xf013a990
f011d487:	68 aa 03 00 00       	push   $0x3aa
f011d48c:	68 76 a9 13 f0       	push   $0xf013a976
f011d491:	e8 10 2d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d496:	e8 4d f0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d49b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d49e:	29 c2                	sub    %eax,%edx
f011d4a0:	89 d0                	mov    %edx,%eax
f011d4a2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d4a7:	74 17                	je     f011d4c0 <test_kmalloc_firstfit2+0x334>
f011d4a9:	83 ec 04             	sub    $0x4,%esp
f011d4ac:	68 c0 ad 13 f0       	push   $0xf013adc0
f011d4b1:	68 ab 03 00 00       	push   $0x3ab
f011d4b6:	68 76 a9 13 f0       	push   $0xf013a976
f011d4bb:	e8 e6 2c fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d4c0:	e8 23 f0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d4c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4c8:	e8 bf 67 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d4cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d4d0:	83 ec 0c             	sub    $0xc,%esp
f011d4d3:	68 00 08 00 00       	push   $0x800
f011d4d8:	e8 e7 a0 fe ff       	call   f01075c4 <kmalloc>
f011d4dd:	83 c4 10             	add    $0x10,%esp
f011d4e0:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d4e6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d4ec:	89 c1                	mov    %eax,%ecx
f011d4ee:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d4f5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d4f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4fd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d500:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d503:	ba 00 00 00 00       	mov    $0x0,%edx
f011d508:	f7 75 a4             	divl   -0x5c(%ebp)
f011d50b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d50e:	29 d0                	sub    %edx,%eax
f011d510:	89 c3                	mov    %eax,%ebx
f011d512:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d519:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d51e:	0f b6 d0             	movzbl %al,%edx
f011d521:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d524:	01 d0                	add    %edx,%eax
f011d526:	48                   	dec    %eax
f011d527:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d52a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d52d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d532:	f7 75 9c             	divl   -0x64(%ebp)
f011d535:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d538:	29 d0                	sub    %edx,%eax
f011d53a:	01 c3                	add    %eax,%ebx
f011d53c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d543:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d548:	0f b6 c0             	movzbl %al,%eax
f011d54b:	c1 e0 04             	shl    $0x4,%eax
f011d54e:	89 c2                	mov    %eax,%edx
f011d550:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d553:	01 d0                	add    %edx,%eax
f011d555:	48                   	dec    %eax
f011d556:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d559:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d55c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d561:	f7 75 94             	divl   -0x6c(%ebp)
f011d564:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d567:	29 d0                	sub    %edx,%eax
f011d569:	01 d8                	add    %ebx,%eax
f011d56b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d570:	39 c1                	cmp    %eax,%ecx
f011d572:	73 17                	jae    f011d58b <test_kmalloc_firstfit2+0x3ff>
f011d574:	83 ec 04             	sub    $0x4,%esp
f011d577:	68 90 ad 13 f0       	push   $0xf013ad90
f011d57c:	68 b1 03 00 00       	push   $0x3b1
f011d581:	68 76 a9 13 f0       	push   $0xf013a976
f011d586:	e8 1b 2c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d58b:	e8 fc 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d590:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d593:	74 17                	je     f011d5ac <test_kmalloc_firstfit2+0x420>
f011d595:	83 ec 04             	sub    $0x4,%esp
f011d598:	68 90 a9 13 f0       	push   $0xf013a990
f011d59d:	68 b2 03 00 00       	push   $0x3b2
f011d5a2:	68 76 a9 13 f0       	push   $0xf013a976
f011d5a7:	e8 fa 2b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d5ac:	e8 37 ef fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d5b1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d5b4:	29 c2                	sub    %eax,%edx
f011d5b6:	89 d0                	mov    %edx,%eax
f011d5b8:	83 f8 01             	cmp    $0x1,%eax
f011d5bb:	74 17                	je     f011d5d4 <test_kmalloc_firstfit2+0x448>
f011d5bd:	83 ec 04             	sub    $0x4,%esp
f011d5c0:	68 c0 ad 13 f0       	push   $0xf013adc0
f011d5c5:	68 b3 03 00 00       	push   $0x3b3
f011d5ca:	68 76 a9 13 f0       	push   $0xf013a976
f011d5cf:	e8 d2 2b fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d5d4:	e8 0f ef fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d5d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5dc:	e8 ab 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d5e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d5e4:	83 ec 0c             	sub    $0xc,%esp
f011d5e7:	68 00 08 00 00       	push   $0x800
f011d5ec:	e8 d3 9f fe ff       	call   f01075c4 <kmalloc>
f011d5f1:	83 c4 10             	add    $0x10,%esp
f011d5f4:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d5fa:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d600:	89 c1                	mov    %eax,%ecx
f011d602:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d609:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d60c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d611:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d614:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d617:	ba 00 00 00 00       	mov    $0x0,%edx
f011d61c:	f7 75 8c             	divl   -0x74(%ebp)
f011d61f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d622:	29 d0                	sub    %edx,%eax
f011d624:	89 c3                	mov    %eax,%ebx
f011d626:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d62d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d632:	0f b6 d0             	movzbl %al,%edx
f011d635:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d638:	01 d0                	add    %edx,%eax
f011d63a:	48                   	dec    %eax
f011d63b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d63e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d641:	ba 00 00 00 00       	mov    $0x0,%edx
f011d646:	f7 75 84             	divl   -0x7c(%ebp)
f011d649:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d64c:	29 d0                	sub    %edx,%eax
f011d64e:	01 c3                	add    %eax,%ebx
f011d650:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d657:	10 00 00 
f011d65a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d65f:	0f b6 c0             	movzbl %al,%eax
f011d662:	c1 e0 04             	shl    $0x4,%eax
f011d665:	89 c2                	mov    %eax,%edx
f011d667:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d66d:	01 d0                	add    %edx,%eax
f011d66f:	48                   	dec    %eax
f011d670:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d676:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d67c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d681:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d687:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d68d:	29 d0                	sub    %edx,%eax
f011d68f:	01 d8                	add    %ebx,%eax
f011d691:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d696:	39 c1                	cmp    %eax,%ecx
f011d698:	74 17                	je     f011d6b1 <test_kmalloc_firstfit2+0x525>
f011d69a:	83 ec 04             	sub    $0x4,%esp
f011d69d:	68 90 ad 13 f0       	push   $0xf013ad90
f011d6a2:	68 b9 03 00 00       	push   $0x3b9
f011d6a7:	68 76 a9 13 f0       	push   $0xf013a976
f011d6ac:	e8 f5 2a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6b1:	e8 d6 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d6b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d6b9:	74 17                	je     f011d6d2 <test_kmalloc_firstfit2+0x546>
f011d6bb:	83 ec 04             	sub    $0x4,%esp
f011d6be:	68 90 a9 13 f0       	push   $0xf013a990
f011d6c3:	68 ba 03 00 00       	push   $0x3ba
f011d6c8:	68 76 a9 13 f0       	push   $0xf013a976
f011d6cd:	e8 d4 2a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d6d2:	e8 11 ee fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d6d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d6da:	29 c2                	sub    %eax,%edx
f011d6dc:	89 d0                	mov    %edx,%eax
f011d6de:	83 f8 01             	cmp    $0x1,%eax
f011d6e1:	74 17                	je     f011d6fa <test_kmalloc_firstfit2+0x56e>
f011d6e3:	83 ec 04             	sub    $0x4,%esp
f011d6e6:	68 c0 ad 13 f0       	push   $0xf013adc0
f011d6eb:	68 bb 03 00 00       	push   $0x3bb
f011d6f0:	68 76 a9 13 f0       	push   $0xf013a976
f011d6f5:	e8 ac 2a fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d6fa:	e8 e9 ed fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d6ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d702:	e8 85 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d707:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011d70a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d710:	83 ec 0c             	sub    $0xc,%esp
f011d713:	50                   	push   %eax
f011d714:	e8 c5 9e fe ff       	call   f01075de <kfree>
f011d719:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d71c:	e8 6b 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d721:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d724:	74 17                	je     f011d73d <test_kmalloc_firstfit2+0x5b1>
f011d726:	83 ec 04             	sub    $0x4,%esp
f011d729:	68 90 a9 13 f0       	push   $0xf013a990
f011d72e:	68 c1 03 00 00       	push   $0x3c1
f011d733:	68 76 a9 13 f0       	push   $0xf013a976
f011d738:	e8 69 2a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d73d:	e8 a6 ed fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d742:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d745:	83 f8 01             	cmp    $0x1,%eax
f011d748:	74 17                	je     f011d761 <test_kmalloc_firstfit2+0x5d5>
f011d74a:	83 ec 04             	sub    $0x4,%esp
f011d74d:	68 d3 ad 13 f0       	push   $0xf013add3
f011d752:	68 c2 03 00 00       	push   $0x3c2
f011d757:	68 76 a9 13 f0       	push   $0xf013a976
f011d75c:	e8 45 2a fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d761:	e8 82 ed fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d766:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d769:	e8 1e 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d76e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d771:	83 ec 0c             	sub    $0xc,%esp
f011d774:	68 00 1c 00 00       	push   $0x1c00
f011d779:	e8 46 9e fe ff       	call   f01075c4 <kmalloc>
f011d77e:	83 c4 10             	add    $0x10,%esp
f011d781:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d787:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d78d:	89 c1                	mov    %eax,%ecx
f011d78f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d796:	10 00 00 
f011d799:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d79f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d7a4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d7aa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d7b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7b5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d7bb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d7c1:	29 d0                	sub    %edx,%eax
f011d7c3:	89 c3                	mov    %eax,%ebx
f011d7c5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d7cc:	10 00 00 
f011d7cf:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d7d4:	0f b6 d0             	movzbl %al,%edx
f011d7d7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d7dd:	01 d0                	add    %edx,%eax
f011d7df:	48                   	dec    %eax
f011d7e0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d7e6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d7ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7f1:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d7f7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d7fd:	29 d0                	sub    %edx,%eax
f011d7ff:	01 c3                	add    %eax,%ebx
f011d801:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d808:	10 00 00 
f011d80b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d810:	0f b6 c0             	movzbl %al,%eax
f011d813:	c1 e0 04             	shl    $0x4,%eax
f011d816:	89 c2                	mov    %eax,%edx
f011d818:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d81e:	01 d0                	add    %edx,%eax
f011d820:	48                   	dec    %eax
f011d821:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d827:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d82d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d832:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d838:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d83e:	29 d0                	sub    %edx,%eax
f011d840:	01 d8                	add    %ebx,%eax
f011d842:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d847:	39 c1                	cmp    %eax,%ecx
f011d849:	74 17                	je     f011d862 <test_kmalloc_firstfit2+0x6d6>
f011d84b:	83 ec 04             	sub    $0x4,%esp
f011d84e:	68 90 ad 13 f0       	push   $0xf013ad90
f011d853:	68 c8 03 00 00       	push   $0x3c8
f011d858:	68 76 a9 13 f0       	push   $0xf013a976
f011d85d:	e8 44 29 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d862:	e8 25 64 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d867:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d86a:	74 17                	je     f011d883 <test_kmalloc_firstfit2+0x6f7>
f011d86c:	83 ec 04             	sub    $0x4,%esp
f011d86f:	68 90 a9 13 f0       	push   $0xf013a990
f011d874:	68 c9 03 00 00       	push   $0x3c9
f011d879:	68 76 a9 13 f0       	push   $0xf013a976
f011d87e:	e8 23 29 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d883:	e8 60 ec fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d888:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d88b:	29 c2                	sub    %eax,%edx
f011d88d:	89 d0                	mov    %edx,%eax
f011d88f:	83 f8 02             	cmp    $0x2,%eax
f011d892:	74 17                	je     f011d8ab <test_kmalloc_firstfit2+0x71f>
f011d894:	83 ec 04             	sub    $0x4,%esp
f011d897:	68 c0 ad 13 f0       	push   $0xf013adc0
f011d89c:	68 ca 03 00 00       	push   $0x3ca
f011d8a1:	68 76 a9 13 f0       	push   $0xf013a976
f011d8a6:	e8 fb 28 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d8ab:	e8 38 ec fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d8b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8b3:	e8 d4 63 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d8b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011d8bb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d8c1:	83 ec 0c             	sub    $0xc,%esp
f011d8c4:	50                   	push   %eax
f011d8c5:	e8 14 9d fe ff       	call   f01075de <kfree>
f011d8ca:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8cd:	e8 ba 63 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d8d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d8d5:	74 17                	je     f011d8ee <test_kmalloc_firstfit2+0x762>
f011d8d7:	83 ec 04             	sub    $0x4,%esp
f011d8da:	68 90 a9 13 f0       	push   $0xf013a990
f011d8df:	68 d0 03 00 00       	push   $0x3d0
f011d8e4:	68 76 a9 13 f0       	push   $0xf013a976
f011d8e9:	e8 b8 28 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d8ee:	e8 f5 eb fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d8f3:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d8f6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d8fb:	74 17                	je     f011d914 <test_kmalloc_firstfit2+0x788>
f011d8fd:	83 ec 04             	sub    $0x4,%esp
f011d900:	68 d3 ad 13 f0       	push   $0xf013add3
f011d905:	68 d1 03 00 00       	push   $0x3d1
f011d90a:	68 76 a9 13 f0       	push   $0xf013a976
f011d90f:	e8 92 28 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d914:	e8 cf eb fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011d919:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d91c:	e8 6b 63 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d921:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011d924:	83 ec 0c             	sub    $0xc,%esp
f011d927:	68 00 fc 2f 00       	push   $0x2ffc00
f011d92c:	e8 93 9c fe ff       	call   f01075c4 <kmalloc>
f011d931:	83 c4 10             	add    $0x10,%esp
f011d934:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d93a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d940:	89 c1                	mov    %eax,%ecx
f011d942:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d949:	10 00 00 
f011d94c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d952:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d957:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d95d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d963:	ba 00 00 00 00       	mov    $0x0,%edx
f011d968:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d96e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d974:	29 d0                	sub    %edx,%eax
f011d976:	89 c3                	mov    %eax,%ebx
f011d978:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d97f:	10 00 00 
f011d982:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d987:	0f b6 d0             	movzbl %al,%edx
f011d98a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d990:	01 d0                	add    %edx,%eax
f011d992:	48                   	dec    %eax
f011d993:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d999:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d99f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9a4:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d9aa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d9b0:	29 d0                	sub    %edx,%eax
f011d9b2:	01 c3                	add    %eax,%ebx
f011d9b4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d9bb:	10 00 00 
f011d9be:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011d9c3:	0f b6 c0             	movzbl %al,%eax
f011d9c6:	c1 e0 04             	shl    $0x4,%eax
f011d9c9:	89 c2                	mov    %eax,%edx
f011d9cb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d9d1:	01 d0                	add    %edx,%eax
f011d9d3:	48                   	dec    %eax
f011d9d4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d9da:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d9e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9e5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d9eb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d9f1:	29 d0                	sub    %edx,%eax
f011d9f3:	01 d8                	add    %ebx,%eax
f011d9f5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011d9fa:	39 c1                	cmp    %eax,%ecx
f011d9fc:	74 17                	je     f011da15 <test_kmalloc_firstfit2+0x889>
f011d9fe:	83 ec 04             	sub    $0x4,%esp
f011da01:	68 90 ad 13 f0       	push   $0xf013ad90
f011da06:	68 d7 03 00 00       	push   $0x3d7
f011da0b:	68 76 a9 13 f0       	push   $0xf013a976
f011da10:	e8 91 27 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da15:	e8 72 62 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011da1a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da1d:	74 17                	je     f011da36 <test_kmalloc_firstfit2+0x8aa>
f011da1f:	83 ec 04             	sub    $0x4,%esp
f011da22:	68 90 a9 13 f0       	push   $0xf013a990
f011da27:	68 d8 03 00 00       	push   $0x3d8
f011da2c:	68 76 a9 13 f0       	push   $0xf013a976
f011da31:	e8 70 27 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011da36:	e8 ad ea fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011da3b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011da3e:	29 c2                	sub    %eax,%edx
f011da40:	89 d0                	mov    %edx,%eax
f011da42:	3d 00 03 00 00       	cmp    $0x300,%eax
f011da47:	74 17                	je     f011da60 <test_kmalloc_firstfit2+0x8d4>
f011da49:	83 ec 04             	sub    $0x4,%esp
f011da4c:	68 c0 ad 13 f0       	push   $0xf013adc0
f011da51:	68 d9 03 00 00       	push   $0x3d9
f011da56:	68 76 a9 13 f0       	push   $0xf013a976
f011da5b:	e8 46 27 fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011da60:	e8 83 ea fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011da65:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da68:	e8 1f 62 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011da6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011da70:	83 ec 0c             	sub    $0xc,%esp
f011da73:	68 00 18 20 00       	push   $0x201800
f011da78:	e8 47 9b fe ff       	call   f01075c4 <kmalloc>
f011da7d:	83 c4 10             	add    $0x10,%esp
f011da80:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011da86:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011da8c:	89 c1                	mov    %eax,%ecx
f011da8e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011da95:	10 00 00 
f011da98:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011da9e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011daa3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011daa9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011daaf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dab4:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011daba:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dac0:	29 d0                	sub    %edx,%eax
f011dac2:	89 c3                	mov    %eax,%ebx
f011dac4:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011dacb:	10 00 00 
f011dace:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011dad3:	0f b6 d0             	movzbl %al,%edx
f011dad6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011dadc:	01 d0                	add    %edx,%eax
f011dade:	48                   	dec    %eax
f011dadf:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011dae5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011daeb:	ba 00 00 00 00       	mov    $0x0,%edx
f011daf0:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011daf6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dafc:	29 d0                	sub    %edx,%eax
f011dafe:	01 c3                	add    %eax,%ebx
f011db00:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011db07:	10 00 00 
f011db0a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011db0f:	0f b6 c0             	movzbl %al,%eax
f011db12:	c1 e0 04             	shl    $0x4,%eax
f011db15:	89 c2                	mov    %eax,%edx
f011db17:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011db1d:	01 d0                	add    %edx,%eax
f011db1f:	48                   	dec    %eax
f011db20:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011db26:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011db2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011db31:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011db37:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011db3d:	29 d0                	sub    %edx,%eax
f011db3f:	01 d8                	add    %ebx,%eax
f011db41:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011db46:	39 c1                	cmp    %eax,%ecx
f011db48:	74 17                	je     f011db61 <test_kmalloc_firstfit2+0x9d5>
f011db4a:	83 ec 04             	sub    $0x4,%esp
f011db4d:	68 90 ad 13 f0       	push   $0xf013ad90
f011db52:	68 df 03 00 00       	push   $0x3df
f011db57:	68 76 a9 13 f0       	push   $0xf013a976
f011db5c:	e8 45 26 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db61:	e8 26 61 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011db66:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011db69:	74 17                	je     f011db82 <test_kmalloc_firstfit2+0x9f6>
f011db6b:	83 ec 04             	sub    $0x4,%esp
f011db6e:	68 90 a9 13 f0       	push   $0xf013a990
f011db73:	68 e0 03 00 00       	push   $0x3e0
f011db78:	68 76 a9 13 f0       	push   $0xf013a976
f011db7d:	e8 24 26 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011db82:	e8 61 e9 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011db87:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011db8a:	29 c2                	sub    %eax,%edx
f011db8c:	89 d0                	mov    %edx,%eax
f011db8e:	3d 02 02 00 00       	cmp    $0x202,%eax
f011db93:	74 17                	je     f011dbac <test_kmalloc_firstfit2+0xa20>
f011db95:	83 ec 04             	sub    $0x4,%esp
f011db98:	68 c0 ad 13 f0       	push   $0xf013adc0
f011db9d:	68 e1 03 00 00       	push   $0x3e1
f011dba2:	68 76 a9 13 f0       	push   $0xf013a976
f011dba7:	e8 fa 25 fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dbac:	e8 37 e9 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011dbb1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbb4:	e8 d3 60 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dbb9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011dbbc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dbc2:	83 ec 0c             	sub    $0xc,%esp
f011dbc5:	50                   	push   %eax
f011dbc6:	e8 13 9a fe ff       	call   f01075de <kfree>
f011dbcb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbce:	e8 b9 60 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dbd3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dbd6:	74 17                	je     f011dbef <test_kmalloc_firstfit2+0xa63>
f011dbd8:	83 ec 04             	sub    $0x4,%esp
f011dbdb:	68 90 a9 13 f0       	push   $0xf013a990
f011dbe0:	68 e7 03 00 00       	push   $0x3e7
f011dbe5:	68 76 a9 13 f0       	push   $0xf013a976
f011dbea:	e8 b7 25 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011dbef:	e8 f4 e8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011dbf4:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dbf7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dbfc:	74 17                	je     f011dc15 <test_kmalloc_firstfit2+0xa89>
f011dbfe:	83 ec 04             	sub    $0x4,%esp
f011dc01:	68 d3 ad 13 f0       	push   $0xf013add3
f011dc06:	68 e8 03 00 00       	push   $0x3e8
f011dc0b:	68 76 a9 13 f0       	push   $0xf013a976
f011dc10:	e8 91 25 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011dc15:	e8 ce e8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011dc1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc1d:	e8 6a 60 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dc22:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011dc25:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011dc2b:	83 ec 0c             	sub    $0xc,%esp
f011dc2e:	50                   	push   %eax
f011dc2f:	e8 aa 99 fe ff       	call   f01075de <kfree>
f011dc34:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dc37:	e8 ac e8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011dc3c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dc3f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dc44:	74 17                	je     f011dc5d <test_kmalloc_firstfit2+0xad1>
f011dc46:	83 ec 04             	sub    $0x4,%esp
f011dc49:	68 d3 ad 13 f0       	push   $0xf013add3
f011dc4e:	68 ee 03 00 00       	push   $0x3ee
f011dc53:	68 76 a9 13 f0       	push   $0xf013a976
f011dc58:	e8 49 25 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc5d:	e8 2a 60 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dc62:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dc65:	74 17                	je     f011dc7e <test_kmalloc_firstfit2+0xaf2>
f011dc67:	83 ec 04             	sub    $0x4,%esp
f011dc6a:	68 90 a9 13 f0       	push   $0xf013a990
f011dc6f:	68 ef 03 00 00       	push   $0x3ef
f011dc74:	68 76 a9 13 f0       	push   $0xf013a976
f011dc79:	e8 28 25 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011dc7e:	e8 65 e8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011dc83:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc86:	e8 01 60 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dc8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011dc8e:	83 ec 0c             	sub    $0xc,%esp
f011dc91:	68 00 fc 4f 00       	push   $0x4ffc00
f011dc96:	e8 29 99 fe ff       	call   f01075c4 <kmalloc>
f011dc9b:	83 c4 10             	add    $0x10,%esp
f011dc9e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011dca4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011dcaa:	89 c1                	mov    %eax,%ecx
f011dcac:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011dcb3:	10 00 00 
f011dcb6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011dcbc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcc1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011dcc7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dccd:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcd2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011dcd8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dcde:	29 d0                	sub    %edx,%eax
f011dce0:	89 c3                	mov    %eax,%ebx
f011dce2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011dce9:	10 00 00 
f011dcec:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011dcf1:	0f b6 d0             	movzbl %al,%edx
f011dcf4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011dcfa:	01 d0                	add    %edx,%eax
f011dcfc:	48                   	dec    %eax
f011dcfd:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011dd03:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011dd09:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd0e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011dd14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011dd1a:	29 d0                	sub    %edx,%eax
f011dd1c:	01 c3                	add    %eax,%ebx
f011dd1e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011dd25:	10 00 00 
f011dd28:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011dd2d:	0f b6 c0             	movzbl %al,%eax
f011dd30:	c1 e0 04             	shl    $0x4,%eax
f011dd33:	89 c2                	mov    %eax,%edx
f011dd35:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011dd3b:	01 d0                	add    %edx,%eax
f011dd3d:	48                   	dec    %eax
f011dd3e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011dd44:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dd4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd4f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011dd55:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dd5b:	29 d0                	sub    %edx,%eax
f011dd5d:	01 d8                	add    %ebx,%eax
f011dd5f:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011dd64:	39 c1                	cmp    %eax,%ecx
f011dd66:	74 17                	je     f011dd7f <test_kmalloc_firstfit2+0xbf3>
f011dd68:	83 ec 04             	sub    $0x4,%esp
f011dd6b:	68 90 ad 13 f0       	push   $0xf013ad90
f011dd70:	68 f5 03 00 00       	push   $0x3f5
f011dd75:	68 76 a9 13 f0       	push   $0xf013a976
f011dd7a:	e8 27 24 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd7f:	e8 08 5f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dd84:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd87:	74 17                	je     f011dda0 <test_kmalloc_firstfit2+0xc14>
f011dd89:	83 ec 04             	sub    $0x4,%esp
f011dd8c:	68 90 a9 13 f0       	push   $0xf013a990
f011dd91:	68 f6 03 00 00       	push   $0x3f6
f011dd96:	68 76 a9 13 f0       	push   $0xf013a976
f011dd9b:	e8 06 24 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dda0:	e8 43 e7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011dda5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dda8:	29 c2                	sub    %eax,%edx
f011ddaa:	89 d0                	mov    %edx,%eax
f011ddac:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ddb1:	74 17                	je     f011ddca <test_kmalloc_firstfit2+0xc3e>
f011ddb3:	83 ec 04             	sub    $0x4,%esp
f011ddb6:	68 c0 ad 13 f0       	push   $0xf013adc0
f011ddbb:	68 f7 03 00 00       	push   $0x3f7
f011ddc0:	68 76 a9 13 f0       	push   $0xf013a976
f011ddc5:	e8 dc 23 fe ff       	call   f01001a6 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ddca:	e8 19 e7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ddcf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddd2:	e8 b5 5e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ddd7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011ddda:	83 ec 0c             	sub    $0xc,%esp
f011dddd:	68 00 fc 2f 00       	push   $0x2ffc00
f011dde2:	e8 dd 97 fe ff       	call   f01075c4 <kmalloc>
f011dde7:	83 c4 10             	add    $0x10,%esp
f011ddea:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ddf0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ddf6:	89 c1                	mov    %eax,%ecx
f011ddf8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ddff:	10 00 00 
f011de02:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011de08:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de0d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011de13:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011de19:	ba 00 00 00 00       	mov    $0x0,%edx
f011de1e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011de24:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011de2a:	29 d0                	sub    %edx,%eax
f011de2c:	89 c3                	mov    %eax,%ebx
f011de2e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011de35:	10 00 00 
f011de38:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011de3d:	0f b6 d0             	movzbl %al,%edx
f011de40:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011de46:	01 d0                	add    %edx,%eax
f011de48:	48                   	dec    %eax
f011de49:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011de4f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011de55:	ba 00 00 00 00       	mov    $0x0,%edx
f011de5a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011de60:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011de66:	29 d0                	sub    %edx,%eax
f011de68:	01 c3                	add    %eax,%ebx
f011de6a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011de71:	10 00 00 
f011de74:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011de79:	0f b6 c0             	movzbl %al,%eax
f011de7c:	c1 e0 04             	shl    $0x4,%eax
f011de7f:	89 c2                	mov    %eax,%edx
f011de81:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011de87:	01 d0                	add    %edx,%eax
f011de89:	48                   	dec    %eax
f011de8a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011de90:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011de96:	ba 00 00 00 00       	mov    $0x0,%edx
f011de9b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011dea1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dea7:	29 d0                	sub    %edx,%eax
f011dea9:	01 d8                	add    %ebx,%eax
f011deab:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011deb0:	39 c1                	cmp    %eax,%ecx
f011deb2:	74 17                	je     f011decb <test_kmalloc_firstfit2+0xd3f>
f011deb4:	83 ec 04             	sub    $0x4,%esp
f011deb7:	68 90 ad 13 f0       	push   $0xf013ad90
f011debc:	68 05 04 00 00       	push   $0x405
f011dec1:	68 76 a9 13 f0       	push   $0xf013a976
f011dec6:	e8 db 22 fe ff       	call   f01001a6 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011decb:	e8 bc 5d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ded0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ded3:	74 17                	je     f011deec <test_kmalloc_firstfit2+0xd60>
f011ded5:	83 ec 04             	sub    $0x4,%esp
f011ded8:	68 90 a9 13 f0       	push   $0xf013a990
f011dedd:	68 06 04 00 00       	push   $0x406
f011dee2:	68 76 a9 13 f0       	push   $0xf013a976
f011dee7:	e8 ba 22 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011deec:	e8 f7 e5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011def1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011def4:	29 c2                	sub    %eax,%edx
f011def6:	89 d0                	mov    %edx,%eax
f011def8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011defd:	74 17                	je     f011df16 <test_kmalloc_firstfit2+0xd8a>
f011deff:	83 ec 04             	sub    $0x4,%esp
f011df02:	68 c0 ad 13 f0       	push   $0xf013adc0
f011df07:	68 07 04 00 00       	push   $0x407
f011df0c:	68 76 a9 13 f0       	push   $0xf013a976
f011df11:	e8 90 22 fe ff       	call   f01001a6 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011df16:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011df1d:	10 00 00 
f011df20:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011df26:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df2b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011df31:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011df37:	ba 00 00 00 00       	mov    $0x0,%edx
f011df3c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011df42:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011df48:	29 d0                	sub    %edx,%eax
f011df4a:	89 c1                	mov    %eax,%ecx
f011df4c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011df53:	10 00 00 
f011df56:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011df5b:	0f b6 d0             	movzbl %al,%edx
f011df5e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011df64:	01 d0                	add    %edx,%eax
f011df66:	48                   	dec    %eax
f011df67:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011df6d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011df73:	ba 00 00 00 00       	mov    $0x0,%edx
f011df78:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011df7e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011df84:	29 d0                	sub    %edx,%eax
f011df86:	01 c1                	add    %eax,%ecx
f011df88:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011df8f:	10 00 00 
f011df92:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011df97:	0f b6 c0             	movzbl %al,%eax
f011df9a:	c1 e0 04             	shl    $0x4,%eax
f011df9d:	89 c2                	mov    %eax,%edx
f011df9f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011dfa5:	01 d0                	add    %edx,%eax
f011dfa7:	48                   	dec    %eax
f011dfa8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011dfae:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dfb4:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfb9:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011dfbf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dfc5:	29 d0                	sub    %edx,%eax
f011dfc7:	01 c8                	add    %ecx,%eax
f011dfc9:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011dfce:	29 c2                	sub    %eax,%edx
f011dfd0:	89 d0                	mov    %edx,%eax
f011dfd2:	83 ec 0c             	sub    $0xc,%esp
f011dfd5:	50                   	push   %eax
f011dfd6:	e8 e9 95 fe ff       	call   f01075c4 <kmalloc>
f011dfdb:	83 c4 10             	add    $0x10,%esp
f011dfde:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011dfe4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011dfea:	85 c0                	test   %eax,%eax
f011dfec:	74 17                	je     f011e005 <test_kmalloc_firstfit2+0xe79>
f011dfee:	83 ec 04             	sub    $0x4,%esp
f011dff1:	68 c0 ae 13 f0       	push   $0xf013aec0
f011dff6:	68 0d 04 00 00       	push   $0x40d
f011dffb:	68 76 a9 13 f0       	push   $0xf013a976
f011e000:	e8 a1 21 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e005:	83 ec 0c             	sub    $0xc,%esp
f011e008:	68 00 b0 13 f0       	push   $0xf013b000
f011e00d:	e8 1b 2c fe ff       	call   f0100c2d <cprintf>
f011e012:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e015:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e01a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e01d:	5b                   	pop    %ebx
f011e01e:	5f                   	pop    %edi
f011e01f:	5d                   	pop    %ebp
f011e020:	c3                   	ret    

f011e021 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e021:	55                   	push   %ebp
f011e022:	89 e5                	mov    %esp,%ebp
f011e024:	57                   	push   %edi
f011e025:	53                   	push   %ebx
f011e026:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e02c:	83 ec 0c             	sub    $0xc,%esp
f011e02f:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011e034:	e8 f4 2b fe ff       	call   f0100c2d <cprintf>
f011e039:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e03c:	83 ec 0c             	sub    $0xc,%esp
f011e03f:	68 e8 a8 13 f0       	push   $0xf013a8e8
f011e044:	e8 e4 2b fe ff       	call   f0100c2d <cprintf>
f011e049:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e04c:	83 ec 0c             	sub    $0xc,%esp
f011e04f:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011e054:	e8 d4 2b fe ff       	call   f0100c2d <cprintf>
f011e059:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e05c:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e062:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e067:	b8 00 00 00 00       	mov    $0x0,%eax
f011e06c:	89 d7                	mov    %edx,%edi
f011e06e:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e070:	e8 73 e4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011e075:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e078:	e8 0f 5c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e07d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e080:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e087:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e08e:	eb 1f                	jmp    f011e0af <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e090:	83 ec 0c             	sub    $0xc,%esp
f011e093:	68 00 00 20 00       	push   $0x200000
f011e098:	e8 27 95 fe ff       	call   f01075c4 <kmalloc>
f011e09d:	83 c4 10             	add    $0x10,%esp
f011e0a0:	89 c2                	mov    %eax,%edx
f011e0a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e0a5:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e0ac:	ff 45 f4             	incl   -0xc(%ebp)
f011e0af:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e0b3:	7e db                	jle    f011e090 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e0b5:	83 ec 0c             	sub    $0xc,%esp
f011e0b8:	68 00 b0 1f 00       	push   $0x1fb000
f011e0bd:	e8 02 95 fe ff       	call   f01075c4 <kmalloc>
f011e0c2:	83 c4 10             	add    $0x10,%esp
f011e0c5:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e0cb:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e0d1:	89 c1                	mov    %eax,%ecx
f011e0d3:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e0da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e0dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e0e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e0e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e0e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0ed:	f7 75 e4             	divl   -0x1c(%ebp)
f011e0f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e0f3:	29 d0                	sub    %edx,%eax
f011e0f5:	89 c3                	mov    %eax,%ebx
f011e0f7:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e0fe:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e103:	0f b6 d0             	movzbl %al,%edx
f011e106:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e109:	01 d0                	add    %edx,%eax
f011e10b:	48                   	dec    %eax
f011e10c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e10f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e112:	ba 00 00 00 00       	mov    $0x0,%edx
f011e117:	f7 75 dc             	divl   -0x24(%ebp)
f011e11a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e11d:	29 d0                	sub    %edx,%eax
f011e11f:	01 c3                	add    %eax,%ebx
f011e121:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e128:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e12d:	0f b6 c0             	movzbl %al,%eax
f011e130:	c1 e0 04             	shl    $0x4,%eax
f011e133:	89 c2                	mov    %eax,%edx
f011e135:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e138:	01 d0                	add    %edx,%eax
f011e13a:	48                   	dec    %eax
f011e13b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e13e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e141:	ba 00 00 00 00       	mov    $0x0,%edx
f011e146:	f7 75 d4             	divl   -0x2c(%ebp)
f011e149:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e14c:	29 d0                	sub    %edx,%eax
f011e14e:	01 d8                	add    %ebx,%eax
f011e150:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e155:	39 c1                	cmp    %eax,%ecx
f011e157:	0f 85 c0 04 00 00    	jne    f011e61d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e15d:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e163:	89 c1                	mov    %eax,%ecx
f011e165:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e16c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e16f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e174:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e177:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e17a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e17f:	f7 75 cc             	divl   -0x34(%ebp)
f011e182:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e185:	29 d0                	sub    %edx,%eax
f011e187:	89 c3                	mov    %eax,%ebx
f011e189:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e190:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e195:	0f b6 d0             	movzbl %al,%edx
f011e198:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e19b:	01 d0                	add    %edx,%eax
f011e19d:	48                   	dec    %eax
f011e19e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e1a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e1a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1a9:	f7 75 c4             	divl   -0x3c(%ebp)
f011e1ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e1af:	29 d0                	sub    %edx,%eax
f011e1b1:	01 c3                	add    %eax,%ebx
f011e1b3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e1ba:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e1bf:	0f b6 c0             	movzbl %al,%eax
f011e1c2:	c1 e0 04             	shl    $0x4,%eax
f011e1c5:	89 c2                	mov    %eax,%edx
f011e1c7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e1ca:	01 d0                	add    %edx,%eax
f011e1cc:	48                   	dec    %eax
f011e1cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e1d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e1d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1d8:	f7 75 bc             	divl   -0x44(%ebp)
f011e1db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e1de:	29 d0                	sub    %edx,%eax
f011e1e0:	01 d8                	add    %ebx,%eax
f011e1e2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e1e7:	39 c1                	cmp    %eax,%ecx
f011e1e9:	0f 85 2e 04 00 00    	jne    f011e61d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e1ef:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e1f5:	89 c1                	mov    %eax,%ecx
f011e1f7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e1fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e201:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e206:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e209:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e20c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e211:	f7 75 b4             	divl   -0x4c(%ebp)
f011e214:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e217:	29 d0                	sub    %edx,%eax
f011e219:	89 c3                	mov    %eax,%ebx
f011e21b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e222:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e227:	0f b6 d0             	movzbl %al,%edx
f011e22a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e22d:	01 d0                	add    %edx,%eax
f011e22f:	48                   	dec    %eax
f011e230:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e233:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e236:	ba 00 00 00 00       	mov    $0x0,%edx
f011e23b:	f7 75 ac             	divl   -0x54(%ebp)
f011e23e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e241:	29 d0                	sub    %edx,%eax
f011e243:	01 c3                	add    %eax,%ebx
f011e245:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e24c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e251:	0f b6 c0             	movzbl %al,%eax
f011e254:	c1 e0 04             	shl    $0x4,%eax
f011e257:	89 c2                	mov    %eax,%edx
f011e259:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e25c:	01 d0                	add    %edx,%eax
f011e25e:	48                   	dec    %eax
f011e25f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e262:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e265:	ba 00 00 00 00       	mov    $0x0,%edx
f011e26a:	f7 75 a4             	divl   -0x5c(%ebp)
f011e26d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e270:	29 d0                	sub    %edx,%eax
f011e272:	01 d8                	add    %ebx,%eax
f011e274:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e279:	39 c1                	cmp    %eax,%ecx
f011e27b:	0f 85 9c 03 00 00    	jne    f011e61d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e281:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e287:	89 c1                	mov    %eax,%ecx
f011e289:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e290:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e293:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e298:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e29b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e29e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2a3:	f7 75 9c             	divl   -0x64(%ebp)
f011e2a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e2a9:	29 d0                	sub    %edx,%eax
f011e2ab:	89 c3                	mov    %eax,%ebx
f011e2ad:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e2b4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e2b9:	0f b6 d0             	movzbl %al,%edx
f011e2bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e2bf:	01 d0                	add    %edx,%eax
f011e2c1:	48                   	dec    %eax
f011e2c2:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e2c5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e2c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2cd:	f7 75 94             	divl   -0x6c(%ebp)
f011e2d0:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e2d3:	29 d0                	sub    %edx,%eax
f011e2d5:	01 c3                	add    %eax,%ebx
f011e2d7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e2de:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e2e3:	0f b6 c0             	movzbl %al,%eax
f011e2e6:	c1 e0 04             	shl    $0x4,%eax
f011e2e9:	89 c2                	mov    %eax,%edx
f011e2eb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e2ee:	01 d0                	add    %edx,%eax
f011e2f0:	48                   	dec    %eax
f011e2f1:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e2f4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e2f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2fc:	f7 75 8c             	divl   -0x74(%ebp)
f011e2ff:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e302:	29 d0                	sub    %edx,%eax
f011e304:	01 d8                	add    %ebx,%eax
f011e306:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e30b:	39 c1                	cmp    %eax,%ecx
f011e30d:	0f 85 0a 03 00 00    	jne    f011e61d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e313:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011e319:	89 c1                	mov    %eax,%ecx
f011e31b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e322:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e325:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e32a:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e32d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e330:	ba 00 00 00 00       	mov    $0x0,%edx
f011e335:	f7 75 84             	divl   -0x7c(%ebp)
f011e338:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e33b:	29 d0                	sub    %edx,%eax
f011e33d:	89 c3                	mov    %eax,%ebx
f011e33f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e346:	10 00 00 
f011e349:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e34e:	0f b6 d0             	movzbl %al,%edx
f011e351:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e357:	01 d0                	add    %edx,%eax
f011e359:	48                   	dec    %eax
f011e35a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e360:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e366:	ba 00 00 00 00       	mov    $0x0,%edx
f011e36b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e371:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e377:	29 d0                	sub    %edx,%eax
f011e379:	01 c3                	add    %eax,%ebx
f011e37b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e382:	10 00 00 
f011e385:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e38a:	0f b6 c0             	movzbl %al,%eax
f011e38d:	c1 e0 04             	shl    $0x4,%eax
f011e390:	89 c2                	mov    %eax,%edx
f011e392:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e398:	01 d0                	add    %edx,%eax
f011e39a:	48                   	dec    %eax
f011e39b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e3a1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e3a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3ac:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e3b2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e3b8:	29 d0                	sub    %edx,%eax
f011e3ba:	01 d8                	add    %ebx,%eax
f011e3bc:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e3c1:	39 c1                	cmp    %eax,%ecx
f011e3c3:	0f 85 54 02 00 00    	jne    f011e61d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e3c9:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011e3cf:	89 c1                	mov    %eax,%ecx
f011e3d1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e3d8:	10 00 00 
f011e3db:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e3e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e3e6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e3ec:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e3f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3f7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e3fd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e403:	29 d0                	sub    %edx,%eax
f011e405:	89 c3                	mov    %eax,%ebx
f011e407:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e40e:	10 00 00 
f011e411:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e416:	0f b6 d0             	movzbl %al,%edx
f011e419:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e41f:	01 d0                	add    %edx,%eax
f011e421:	48                   	dec    %eax
f011e422:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e428:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e42e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e433:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e439:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e43f:	29 d0                	sub    %edx,%eax
f011e441:	01 c3                	add    %eax,%ebx
f011e443:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e44a:	10 00 00 
f011e44d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e452:	0f b6 c0             	movzbl %al,%eax
f011e455:	c1 e0 04             	shl    $0x4,%eax
f011e458:	89 c2                	mov    %eax,%edx
f011e45a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e460:	01 d0                	add    %edx,%eax
f011e462:	48                   	dec    %eax
f011e463:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e469:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e46f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e474:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e47a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e480:	29 d0                	sub    %edx,%eax
f011e482:	01 d8                	add    %ebx,%eax
f011e484:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e489:	39 c1                	cmp    %eax,%ecx
f011e48b:	0f 85 8c 01 00 00    	jne    f011e61d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e491:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e497:	89 c1                	mov    %eax,%ecx
f011e499:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e4a0:	10 00 00 
f011e4a3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e4a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4ae:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e4b4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e4ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4bf:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e4c5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e4cb:	29 d0                	sub    %edx,%eax
f011e4cd:	89 c3                	mov    %eax,%ebx
f011e4cf:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e4d6:	10 00 00 
f011e4d9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e4de:	0f b6 d0             	movzbl %al,%edx
f011e4e1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e4e7:	01 d0                	add    %edx,%eax
f011e4e9:	48                   	dec    %eax
f011e4ea:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e4f0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e4f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4fb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e501:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e507:	29 d0                	sub    %edx,%eax
f011e509:	01 c3                	add    %eax,%ebx
f011e50b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e512:	10 00 00 
f011e515:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e51a:	0f b6 c0             	movzbl %al,%eax
f011e51d:	c1 e0 04             	shl    $0x4,%eax
f011e520:	89 c2                	mov    %eax,%edx
f011e522:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e528:	01 d0                	add    %edx,%eax
f011e52a:	48                   	dec    %eax
f011e52b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e531:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e537:	ba 00 00 00 00       	mov    $0x0,%edx
f011e53c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e542:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e548:	29 d0                	sub    %edx,%eax
f011e54a:	01 d8                	add    %ebx,%eax
f011e54c:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e551:	39 c1                	cmp    %eax,%ecx
f011e553:	0f 85 c4 00 00 00    	jne    f011e61d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e559:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e55f:	89 c1                	mov    %eax,%ecx
f011e561:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e568:	10 00 00 
f011e56b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e571:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e576:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e57c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e582:	ba 00 00 00 00       	mov    $0x0,%edx
f011e587:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e58d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e593:	29 d0                	sub    %edx,%eax
f011e595:	89 c3                	mov    %eax,%ebx
f011e597:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e59e:	10 00 00 
f011e5a1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e5a6:	0f b6 d0             	movzbl %al,%edx
f011e5a9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e5af:	01 d0                	add    %edx,%eax
f011e5b1:	48                   	dec    %eax
f011e5b2:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e5b8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e5be:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5c3:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e5c9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e5cf:	29 d0                	sub    %edx,%eax
f011e5d1:	01 c3                	add    %eax,%ebx
f011e5d3:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e5da:	10 00 00 
f011e5dd:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e5e2:	0f b6 c0             	movzbl %al,%eax
f011e5e5:	c1 e0 04             	shl    $0x4,%eax
f011e5e8:	89 c2                	mov    %eax,%edx
f011e5ea:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e5f0:	01 d0                	add    %edx,%eax
f011e5f2:	48                   	dec    %eax
f011e5f3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e5f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e5ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011e604:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e60a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e610:	29 d0                	sub    %edx,%eax
f011e612:	01 d8                	add    %ebx,%eax
f011e614:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e619:	39 c1                	cmp    %eax,%ecx
f011e61b:	74 17                	je     f011e634 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e61d:	83 ec 04             	sub    $0x4,%esp
f011e620:	68 4c b0 13 f0       	push   $0xf013b04c
f011e625:	68 31 04 00 00       	push   $0x431
f011e62a:	68 76 a9 13 f0       	push   $0xf013a976
f011e62f:	e8 72 1b fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e634:	e8 53 56 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e639:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e63c:	74 17                	je     f011e655 <test_kmalloc_worstfit+0x634>
f011e63e:	83 ec 04             	sub    $0x4,%esp
f011e641:	68 90 a9 13 f0       	push   $0xf013a990
f011e646:	68 33 04 00 00       	push   $0x433
f011e64b:	68 76 a9 13 f0       	push   $0xf013a976
f011e650:	e8 51 1b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e655:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e658:	e8 8b de fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011e65d:	29 c3                	sub    %eax,%ebx
f011e65f:	89 d8                	mov    %ebx,%eax
f011e661:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e666:	74 17                	je     f011e67f <test_kmalloc_worstfit+0x65e>
f011e668:	83 ec 04             	sub    $0x4,%esp
f011e66b:	68 33 ac 13 f0       	push   $0xf013ac33
f011e670:	68 34 04 00 00       	push   $0x434
f011e675:	68 76 a9 13 f0       	push   $0xf013a976
f011e67a:	e8 27 1b fe ff       	call   f01001a6 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e67f:	e8 64 de fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011e684:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e687:	e8 00 56 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e68c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e68f:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e695:	83 ec 0c             	sub    $0xc,%esp
f011e698:	50                   	push   %eax
f011e699:	e8 40 8f fe ff       	call   f01075de <kfree>
f011e69e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e6a1:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e6a7:	83 ec 0c             	sub    $0xc,%esp
f011e6aa:	50                   	push   %eax
f011e6ab:	e8 2e 8f fe ff       	call   f01075de <kfree>
f011e6b0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e6b3:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011e6b9:	83 ec 0c             	sub    $0xc,%esp
f011e6bc:	50                   	push   %eax
f011e6bd:	e8 1c 8f fe ff       	call   f01075de <kfree>
f011e6c2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e6c5:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e6cb:	83 ec 0c             	sub    $0xc,%esp
f011e6ce:	50                   	push   %eax
f011e6cf:	e8 0a 8f fe ff       	call   f01075de <kfree>
f011e6d4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e6d7:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011e6dd:	83 ec 0c             	sub    $0xc,%esp
f011e6e0:	50                   	push   %eax
f011e6e1:	e8 f8 8e fe ff       	call   f01075de <kfree>
f011e6e6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e6e9:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011e6ef:	83 ec 0c             	sub    $0xc,%esp
f011e6f2:	50                   	push   %eax
f011e6f3:	e8 e6 8e fe ff       	call   f01075de <kfree>
f011e6f8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e6fb:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011e701:	83 ec 0c             	sub    $0xc,%esp
f011e704:	50                   	push   %eax
f011e705:	e8 d4 8e fe ff       	call   f01075de <kfree>
f011e70a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e70d:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011e713:	83 ec 0c             	sub    $0xc,%esp
f011e716:	50                   	push   %eax
f011e717:	e8 c2 8e fe ff       	call   f01075de <kfree>
f011e71c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e71f:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011e725:	83 ec 0c             	sub    $0xc,%esp
f011e728:	50                   	push   %eax
f011e729:	e8 b0 8e fe ff       	call   f01075de <kfree>
f011e72e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e731:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011e737:	83 ec 0c             	sub    $0xc,%esp
f011e73a:	50                   	push   %eax
f011e73b:	e8 9e 8e fe ff       	call   f01075de <kfree>
f011e740:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e743:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011e749:	83 ec 0c             	sub    $0xc,%esp
f011e74c:	50                   	push   %eax
f011e74d:	e8 8c 8e fe ff       	call   f01075de <kfree>
f011e752:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e755:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e75b:	83 ec 0c             	sub    $0xc,%esp
f011e75e:	50                   	push   %eax
f011e75f:	e8 7a 8e fe ff       	call   f01075de <kfree>
f011e764:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e767:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011e76d:	83 ec 0c             	sub    $0xc,%esp
f011e770:	50                   	push   %eax
f011e771:	e8 68 8e fe ff       	call   f01075de <kfree>
f011e776:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e779:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011e77f:	83 ec 0c             	sub    $0xc,%esp
f011e782:	50                   	push   %eax
f011e783:	e8 56 8e fe ff       	call   f01075de <kfree>
f011e788:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e78b:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011e791:	83 ec 0c             	sub    $0xc,%esp
f011e794:	50                   	push   %eax
f011e795:	e8 44 8e fe ff       	call   f01075de <kfree>
f011e79a:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e79d:	e8 ea 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e7a2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e7a5:	74 17                	je     f011e7be <test_kmalloc_worstfit+0x79d>
f011e7a7:	83 ec 04             	sub    $0x4,%esp
f011e7aa:	68 90 a9 13 f0       	push   $0xf013a990
f011e7af:	68 4a 04 00 00       	push   $0x44a
f011e7b4:	68 76 a9 13 f0       	push   $0xf013a976
f011e7b9:	e8 e8 19 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e7be:	e8 25 dd fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011e7c3:	89 c2                	mov    %eax,%edx
f011e7c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e7c8:	29 c2                	sub    %eax,%edx
f011e7ca:	89 d0                	mov    %edx,%eax
f011e7cc:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e7d1:	74 17                	je     f011e7ea <test_kmalloc_worstfit+0x7c9>
f011e7d3:	83 ec 04             	sub    $0x4,%esp
f011e7d6:	68 44 ac 13 f0       	push   $0xf013ac44
f011e7db:	68 4b 04 00 00       	push   $0x44b
f011e7e0:	68 76 a9 13 f0       	push   $0xf013a976
f011e7e5:	e8 bc 19 fe ff       	call   f01001a6 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e7ea:	e8 f9 dc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011e7ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e7f2:	e8 95 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e7f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e7fa:	83 ec 0c             	sub    $0xc,%esp
f011e7fd:	68 00 00 10 00       	push   $0x100000
f011e802:	e8 bd 8d fe ff       	call   f01075c4 <kmalloc>
f011e807:	83 c4 10             	add    $0x10,%esp
f011e80a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e810:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011e817:	10 00 00 
f011e81a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e820:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e825:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011e82b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e831:	ba 00 00 00 00       	mov    $0x0,%edx
f011e836:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011e83c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e842:	29 d0                	sub    %edx,%eax
f011e844:	89 c1                	mov    %eax,%ecx
f011e846:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011e84d:	10 00 00 
f011e850:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e855:	0f b6 d0             	movzbl %al,%edx
f011e858:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e85e:	01 d0                	add    %edx,%eax
f011e860:	48                   	dec    %eax
f011e861:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011e867:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e86d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e872:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011e878:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e87e:	29 d0                	sub    %edx,%eax
f011e880:	01 c1                	add    %eax,%ecx
f011e882:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011e889:	10 00 00 
f011e88c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e891:	0f b6 c0             	movzbl %al,%eax
f011e894:	c1 e0 04             	shl    $0x4,%eax
f011e897:	89 c2                	mov    %eax,%edx
f011e899:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e89f:	01 d0                	add    %edx,%eax
f011e8a1:	48                   	dec    %eax
f011e8a2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011e8a8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e8ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8b3:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011e8b9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e8bf:	29 d0                	sub    %edx,%eax
f011e8c1:	01 c8                	add    %ecx,%eax
f011e8c3:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e8c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e8cf:	39 c2                	cmp    %eax,%edx
f011e8d1:	74 17                	je     f011e8ea <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011e8d3:	83 ec 04             	sub    $0x4,%esp
f011e8d6:	68 90 b0 13 f0       	push   $0xf013b090
f011e8db:	68 52 04 00 00       	push   $0x452
f011e8e0:	68 76 a9 13 f0       	push   $0xf013a976
f011e8e5:	e8 bc 18 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8ea:	e8 9d 53 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e8ef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e8f2:	74 17                	je     f011e90b <test_kmalloc_worstfit+0x8ea>
f011e8f4:	83 ec 04             	sub    $0x4,%esp
f011e8f7:	68 90 a9 13 f0       	push   $0xf013a990
f011e8fc:	68 53 04 00 00       	push   $0x453
f011e901:	68 76 a9 13 f0       	push   $0xf013a976
f011e906:	e8 9b 18 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e90b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e90e:	e8 d5 db fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011e913:	29 c3                	sub    %eax,%ebx
f011e915:	89 d8                	mov    %ebx,%eax
f011e917:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e91c:	74 17                	je     f011e935 <test_kmalloc_worstfit+0x914>
f011e91e:	83 ec 04             	sub    $0x4,%esp
f011e921:	68 ae ae 13 f0       	push   $0xf013aeae
f011e926:	68 54 04 00 00       	push   $0x454
f011e92b:	68 76 a9 13 f0       	push   $0xf013a976
f011e930:	e8 71 18 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e935:	ff 45 e8             	incl   -0x18(%ebp)
f011e938:	83 ec 08             	sub    $0x8,%esp
f011e93b:	ff 75 e8             	pushl  -0x18(%ebp)
f011e93e:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011e943:	e8 e5 22 fe ff       	call   f0100c2d <cprintf>
f011e948:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e94b:	e8 98 db fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011e950:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e953:	e8 34 53 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e958:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011e95b:	83 ec 0c             	sub    $0xc,%esp
f011e95e:	68 00 00 40 00       	push   $0x400000
f011e963:	e8 5c 8c fe ff       	call   f01075c4 <kmalloc>
f011e968:	83 c4 10             	add    $0x10,%esp
f011e96b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011e971:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011e978:	10 00 00 
f011e97b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e981:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e986:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011e98c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e992:	ba 00 00 00 00       	mov    $0x0,%edx
f011e997:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011e99d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e9a3:	29 d0                	sub    %edx,%eax
f011e9a5:	89 c1                	mov    %eax,%ecx
f011e9a7:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011e9ae:	10 00 00 
f011e9b1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e9b6:	0f b6 d0             	movzbl %al,%edx
f011e9b9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e9bf:	01 d0                	add    %edx,%eax
f011e9c1:	48                   	dec    %eax
f011e9c2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011e9c8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e9ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9d3:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011e9d9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e9df:	29 d0                	sub    %edx,%eax
f011e9e1:	01 c1                	add    %eax,%ecx
f011e9e3:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011e9ea:	10 00 00 
f011e9ed:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011e9f2:	0f b6 c0             	movzbl %al,%eax
f011e9f5:	c1 e0 04             	shl    $0x4,%eax
f011e9f8:	89 c2                	mov    %eax,%edx
f011e9fa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ea00:	01 d0                	add    %edx,%eax
f011ea02:	48                   	dec    %eax
f011ea03:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011ea09:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ea0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea14:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011ea1a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ea20:	29 d0                	sub    %edx,%eax
f011ea22:	01 c8                	add    %ecx,%eax
f011ea24:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011ea2a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea30:	39 c2                	cmp    %eax,%edx
f011ea32:	74 17                	je     f011ea4b <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011ea34:	83 ec 04             	sub    $0x4,%esp
f011ea37:	68 90 b0 13 f0       	push   $0xf013b090
f011ea3c:	68 5b 04 00 00       	push   $0x45b
f011ea41:	68 76 a9 13 f0       	push   $0xf013a976
f011ea46:	e8 5b 17 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea4b:	e8 3c 52 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ea50:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea53:	74 17                	je     f011ea6c <test_kmalloc_worstfit+0xa4b>
f011ea55:	83 ec 04             	sub    $0x4,%esp
f011ea58:	68 90 a9 13 f0       	push   $0xf013a990
f011ea5d:	68 5c 04 00 00       	push   $0x45c
f011ea62:	68 76 a9 13 f0       	push   $0xf013a976
f011ea67:	e8 3a 17 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea6c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea6f:	e8 74 da fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ea74:	29 c3                	sub    %eax,%ebx
f011ea76:	89 d8                	mov    %ebx,%eax
f011ea78:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ea7d:	74 17                	je     f011ea96 <test_kmalloc_worstfit+0xa75>
f011ea7f:	83 ec 04             	sub    $0x4,%esp
f011ea82:	68 ae ae 13 f0       	push   $0xf013aeae
f011ea87:	68 5d 04 00 00       	push   $0x45d
f011ea8c:	68 76 a9 13 f0       	push   $0xf013a976
f011ea91:	e8 10 17 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ea96:	ff 45 e8             	incl   -0x18(%ebp)
f011ea99:	83 ec 08             	sub    $0x8,%esp
f011ea9c:	ff 75 e8             	pushl  -0x18(%ebp)
f011ea9f:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011eaa4:	e8 84 21 fe ff       	call   f0100c2d <cprintf>
f011eaa9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eaac:	e8 37 da fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011eab1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eab4:	e8 d3 51 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eab9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011eabc:	83 ec 0c             	sub    $0xc,%esp
f011eabf:	68 00 00 60 00       	push   $0x600000
f011eac4:	e8 fb 8a fe ff       	call   f01075c4 <kmalloc>
f011eac9:	83 c4 10             	add    $0x10,%esp
f011eacc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ead2:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011ead9:	10 00 00 
f011eadc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eae2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eae7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011eaed:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011eaf3:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaf8:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011eafe:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011eb04:	29 d0                	sub    %edx,%eax
f011eb06:	89 c1                	mov    %eax,%ecx
f011eb08:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011eb0f:	10 00 00 
f011eb12:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011eb17:	0f b6 d0             	movzbl %al,%edx
f011eb1a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eb20:	01 d0                	add    %edx,%eax
f011eb22:	48                   	dec    %eax
f011eb23:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011eb29:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011eb2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb34:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011eb3a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011eb40:	29 d0                	sub    %edx,%eax
f011eb42:	01 c1                	add    %eax,%ecx
f011eb44:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011eb4b:	10 00 00 
f011eb4e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011eb53:	0f b6 c0             	movzbl %al,%eax
f011eb56:	c1 e0 04             	shl    $0x4,%eax
f011eb59:	89 c2                	mov    %eax,%edx
f011eb5b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011eb61:	01 d0                	add    %edx,%eax
f011eb63:	48                   	dec    %eax
f011eb64:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011eb6a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011eb70:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb75:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011eb7b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011eb81:	29 d0                	sub    %edx,%eax
f011eb83:	01 c8                	add    %ecx,%eax
f011eb85:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011eb8b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011eb91:	39 c2                	cmp    %eax,%edx
f011eb93:	74 17                	je     f011ebac <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011eb95:	83 ec 04             	sub    $0x4,%esp
f011eb98:	68 90 b0 13 f0       	push   $0xf013b090
f011eb9d:	68 64 04 00 00       	push   $0x464
f011eba2:	68 76 a9 13 f0       	push   $0xf013a976
f011eba7:	e8 fa 15 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebac:	e8 db 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ebb1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ebb4:	74 17                	je     f011ebcd <test_kmalloc_worstfit+0xbac>
f011ebb6:	83 ec 04             	sub    $0x4,%esp
f011ebb9:	68 90 a9 13 f0       	push   $0xf013a990
f011ebbe:	68 65 04 00 00       	push   $0x465
f011ebc3:	68 76 a9 13 f0       	push   $0xf013a976
f011ebc8:	e8 d9 15 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ebcd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ebd0:	e8 13 d9 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ebd5:	29 c3                	sub    %eax,%ebx
f011ebd7:	89 d8                	mov    %ebx,%eax
f011ebd9:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ebde:	74 17                	je     f011ebf7 <test_kmalloc_worstfit+0xbd6>
f011ebe0:	83 ec 04             	sub    $0x4,%esp
f011ebe3:	68 ae ae 13 f0       	push   $0xf013aeae
f011ebe8:	68 66 04 00 00       	push   $0x466
f011ebed:	68 76 a9 13 f0       	push   $0xf013a976
f011ebf2:	e8 af 15 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ebf7:	ff 45 e8             	incl   -0x18(%ebp)
f011ebfa:	83 ec 08             	sub    $0x8,%esp
f011ebfd:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec00:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011ec05:	e8 23 20 fe ff       	call   f0100c2d <cprintf>
f011ec0a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec0d:	e8 d6 d8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ec12:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec15:	e8 72 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ec1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ec1d:	83 ec 0c             	sub    $0xc,%esp
f011ec20:	68 00 00 50 00       	push   $0x500000
f011ec25:	e8 9a 89 fe ff       	call   f01075c4 <kmalloc>
f011ec2a:	83 c4 10             	add    $0x10,%esp
f011ec2d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011ec33:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011ec3a:	10 00 00 
f011ec3d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ec43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec48:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011ec4e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ec54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec59:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011ec5f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ec65:	29 d0                	sub    %edx,%eax
f011ec67:	89 c1                	mov    %eax,%ecx
f011ec69:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011ec70:	10 00 00 
f011ec73:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ec78:	0f b6 d0             	movzbl %al,%edx
f011ec7b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ec81:	01 d0                	add    %edx,%eax
f011ec83:	48                   	dec    %eax
f011ec84:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011ec8a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ec90:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec95:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011ec9b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011eca1:	29 d0                	sub    %edx,%eax
f011eca3:	01 c1                	add    %eax,%ecx
f011eca5:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011ecac:	10 00 00 
f011ecaf:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ecb4:	0f b6 c0             	movzbl %al,%eax
f011ecb7:	c1 e0 04             	shl    $0x4,%eax
f011ecba:	89 c2                	mov    %eax,%edx
f011ecbc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ecc2:	01 d0                	add    %edx,%eax
f011ecc4:	48                   	dec    %eax
f011ecc5:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011eccb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ecd1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecd6:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011ecdc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ece2:	29 d0                	sub    %edx,%eax
f011ece4:	01 c8                	add    %ecx,%eax
f011ece6:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ecec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ecf2:	39 c2                	cmp    %eax,%edx
f011ecf4:	74 17                	je     f011ed0d <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011ecf6:	83 ec 04             	sub    $0x4,%esp
f011ecf9:	68 90 b0 13 f0       	push   $0xf013b090
f011ecfe:	68 6d 04 00 00       	push   $0x46d
f011ed03:	68 76 a9 13 f0       	push   $0xf013a976
f011ed08:	e8 99 14 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed0d:	e8 7a 4f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ed12:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed15:	74 17                	je     f011ed2e <test_kmalloc_worstfit+0xd0d>
f011ed17:	83 ec 04             	sub    $0x4,%esp
f011ed1a:	68 90 a9 13 f0       	push   $0xf013a990
f011ed1f:	68 6e 04 00 00       	push   $0x46e
f011ed24:	68 76 a9 13 f0       	push   $0xf013a976
f011ed29:	e8 78 14 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed2e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed31:	e8 b2 d7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ed36:	29 c3                	sub    %eax,%ebx
f011ed38:	89 d8                	mov    %ebx,%eax
f011ed3a:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ed3f:	74 17                	je     f011ed58 <test_kmalloc_worstfit+0xd37>
f011ed41:	83 ec 04             	sub    $0x4,%esp
f011ed44:	68 ae ae 13 f0       	push   $0xf013aeae
f011ed49:	68 6f 04 00 00       	push   $0x46f
f011ed4e:	68 76 a9 13 f0       	push   $0xf013a976
f011ed53:	e8 4e 14 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed58:	ff 45 e8             	incl   -0x18(%ebp)
f011ed5b:	83 ec 08             	sub    $0x8,%esp
f011ed5e:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed61:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011ed66:	e8 c2 1e fe ff       	call   f0100c2d <cprintf>
f011ed6b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed6e:	e8 75 d7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ed73:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed76:	e8 11 4f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ed7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011ed7e:	83 ec 0c             	sub    $0xc,%esp
f011ed81:	68 00 00 40 00       	push   $0x400000
f011ed86:	e8 39 88 fe ff       	call   f01075c4 <kmalloc>
f011ed8b:	83 c4 10             	add    $0x10,%esp
f011ed8e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ed94:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011ed9b:	10 00 00 
f011ed9e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011eda4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eda9:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011edaf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011edb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011edba:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011edc0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011edc6:	29 d0                	sub    %edx,%eax
f011edc8:	89 c1                	mov    %eax,%ecx
f011edca:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011edd1:	10 00 00 
f011edd4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011edd9:	0f b6 d0             	movzbl %al,%edx
f011eddc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ede2:	01 d0                	add    %edx,%eax
f011ede4:	48                   	dec    %eax
f011ede5:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011edeb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011edf1:	ba 00 00 00 00       	mov    $0x0,%edx
f011edf6:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011edfc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ee02:	29 d0                	sub    %edx,%eax
f011ee04:	01 c1                	add    %eax,%ecx
f011ee06:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011ee0d:	10 00 00 
f011ee10:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ee15:	0f b6 c0             	movzbl %al,%eax
f011ee18:	c1 e0 04             	shl    $0x4,%eax
f011ee1b:	89 c2                	mov    %eax,%edx
f011ee1d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ee23:	01 d0                	add    %edx,%eax
f011ee25:	48                   	dec    %eax
f011ee26:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011ee2c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ee32:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee37:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011ee3d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ee43:	29 d0                	sub    %edx,%eax
f011ee45:	01 c8                	add    %ecx,%eax
f011ee47:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011ee4d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee53:	39 c2                	cmp    %eax,%edx
f011ee55:	74 17                	je     f011ee6e <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011ee57:	83 ec 04             	sub    $0x4,%esp
f011ee5a:	68 90 b0 13 f0       	push   $0xf013b090
f011ee5f:	68 76 04 00 00       	push   $0x476
f011ee64:	68 76 a9 13 f0       	push   $0xf013a976
f011ee69:	e8 38 13 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee6e:	e8 19 4e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ee73:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee76:	74 17                	je     f011ee8f <test_kmalloc_worstfit+0xe6e>
f011ee78:	83 ec 04             	sub    $0x4,%esp
f011ee7b:	68 90 a9 13 f0       	push   $0xf013a990
f011ee80:	68 77 04 00 00       	push   $0x477
f011ee85:	68 76 a9 13 f0       	push   $0xf013a976
f011ee8a:	e8 17 13 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ee8f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ee92:	e8 51 d6 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ee97:	29 c3                	sub    %eax,%ebx
f011ee99:	89 d8                	mov    %ebx,%eax
f011ee9b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011eea0:	74 17                	je     f011eeb9 <test_kmalloc_worstfit+0xe98>
f011eea2:	83 ec 04             	sub    $0x4,%esp
f011eea5:	68 ae ae 13 f0       	push   $0xf013aeae
f011eeaa:	68 78 04 00 00       	push   $0x478
f011eeaf:	68 76 a9 13 f0       	push   $0xf013a976
f011eeb4:	e8 ed 12 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eeb9:	ff 45 e8             	incl   -0x18(%ebp)
f011eebc:	83 ec 08             	sub    $0x8,%esp
f011eebf:	ff 75 e8             	pushl  -0x18(%ebp)
f011eec2:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011eec7:	e8 61 1d fe ff       	call   f0100c2d <cprintf>
f011eecc:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eecf:	e8 14 d6 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011eed4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eed7:	e8 b0 4d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eedc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011eedf:	83 ec 0c             	sub    $0xc,%esp
f011eee2:	68 00 00 20 00       	push   $0x200000
f011eee7:	e8 d8 86 fe ff       	call   f01075c4 <kmalloc>
f011eeec:	83 c4 10             	add    $0x10,%esp
f011eeef:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011eef5:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011eefc:	10 00 00 
f011eeff:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011ef05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef0a:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011ef10:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ef16:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef1b:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011ef21:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ef27:	29 d0                	sub    %edx,%eax
f011ef29:	89 c1                	mov    %eax,%ecx
f011ef2b:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011ef32:	10 00 00 
f011ef35:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ef3a:	0f b6 d0             	movzbl %al,%edx
f011ef3d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ef43:	01 d0                	add    %edx,%eax
f011ef45:	48                   	dec    %eax
f011ef46:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011ef4c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ef52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef57:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011ef5d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ef63:	29 d0                	sub    %edx,%eax
f011ef65:	01 c1                	add    %eax,%ecx
f011ef67:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011ef6e:	10 00 00 
f011ef71:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ef76:	0f b6 c0             	movzbl %al,%eax
f011ef79:	c1 e0 04             	shl    $0x4,%eax
f011ef7c:	89 c2                	mov    %eax,%edx
f011ef7e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ef84:	01 d0                	add    %edx,%eax
f011ef86:	48                   	dec    %eax
f011ef87:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011ef8d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ef93:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef98:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011ef9e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011efa4:	29 d0                	sub    %edx,%eax
f011efa6:	01 c8                	add    %ecx,%eax
f011efa8:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011efae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011efb4:	39 c2                	cmp    %eax,%edx
f011efb6:	74 17                	je     f011efcf <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011efb8:	83 ec 04             	sub    $0x4,%esp
f011efbb:	68 90 b0 13 f0       	push   $0xf013b090
f011efc0:	68 7f 04 00 00       	push   $0x47f
f011efc5:	68 76 a9 13 f0       	push   $0xf013a976
f011efca:	e8 d7 11 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efcf:	e8 b8 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011efd4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011efd7:	74 17                	je     f011eff0 <test_kmalloc_worstfit+0xfcf>
f011efd9:	83 ec 04             	sub    $0x4,%esp
f011efdc:	68 90 a9 13 f0       	push   $0xf013a990
f011efe1:	68 80 04 00 00       	push   $0x480
f011efe6:	68 76 a9 13 f0       	push   $0xf013a976
f011efeb:	e8 b6 11 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eff0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eff3:	e8 f0 d4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011eff8:	29 c3                	sub    %eax,%ebx
f011effa:	89 d8                	mov    %ebx,%eax
f011effc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f001:	74 17                	je     f011f01a <test_kmalloc_worstfit+0xff9>
f011f003:	83 ec 04             	sub    $0x4,%esp
f011f006:	68 ae ae 13 f0       	push   $0xf013aeae
f011f00b:	68 81 04 00 00       	push   $0x481
f011f010:	68 76 a9 13 f0       	push   $0xf013a976
f011f015:	e8 8c 11 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f01a:	ff 45 e8             	incl   -0x18(%ebp)
f011f01d:	83 ec 08             	sub    $0x8,%esp
f011f020:	ff 75 e8             	pushl  -0x18(%ebp)
f011f023:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011f028:	e8 00 1c fe ff       	call   f0100c2d <cprintf>
f011f02d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f030:	e8 b3 d4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f035:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f038:	e8 4f 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f03d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f040:	83 ec 0c             	sub    $0xc,%esp
f011f043:	68 00 00 18 00       	push   $0x180000
f011f048:	e8 77 85 fe ff       	call   f01075c4 <kmalloc>
f011f04d:	83 c4 10             	add    $0x10,%esp
f011f050:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f056:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f05d:	10 00 00 
f011f060:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f066:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f06b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f071:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f077:	ba 00 00 00 00       	mov    $0x0,%edx
f011f07c:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f082:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f088:	29 d0                	sub    %edx,%eax
f011f08a:	89 c1                	mov    %eax,%ecx
f011f08c:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f093:	10 00 00 
f011f096:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f09b:	0f b6 d0             	movzbl %al,%edx
f011f09e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f0a4:	01 d0                	add    %edx,%eax
f011f0a6:	48                   	dec    %eax
f011f0a7:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f0ad:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f0b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0b8:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f0be:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f0c4:	29 d0                	sub    %edx,%eax
f011f0c6:	01 c1                	add    %eax,%ecx
f011f0c8:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f0cf:	10 00 00 
f011f0d2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f0d7:	0f b6 c0             	movzbl %al,%eax
f011f0da:	c1 e0 04             	shl    $0x4,%eax
f011f0dd:	89 c2                	mov    %eax,%edx
f011f0df:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f0e5:	01 d0                	add    %edx,%eax
f011f0e7:	48                   	dec    %eax
f011f0e8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f0ee:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f0f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0f9:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f0ff:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f105:	29 d0                	sub    %edx,%eax
f011f107:	01 c8                	add    %ecx,%eax
f011f109:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f10f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f115:	39 c2                	cmp    %eax,%edx
f011f117:	74 17                	je     f011f130 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f119:	83 ec 04             	sub    $0x4,%esp
f011f11c:	68 90 b0 13 f0       	push   $0xf013b090
f011f121:	68 88 04 00 00       	push   $0x488
f011f126:	68 76 a9 13 f0       	push   $0xf013a976
f011f12b:	e8 76 10 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f130:	e8 57 4b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f135:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f138:	74 17                	je     f011f151 <test_kmalloc_worstfit+0x1130>
f011f13a:	83 ec 04             	sub    $0x4,%esp
f011f13d:	68 90 a9 13 f0       	push   $0xf013a990
f011f142:	68 89 04 00 00       	push   $0x489
f011f147:	68 76 a9 13 f0       	push   $0xf013a976
f011f14c:	e8 55 10 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f151:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f154:	e8 8f d3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f159:	29 c3                	sub    %eax,%ebx
f011f15b:	89 d8                	mov    %ebx,%eax
f011f15d:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f162:	74 17                	je     f011f17b <test_kmalloc_worstfit+0x115a>
f011f164:	83 ec 04             	sub    $0x4,%esp
f011f167:	68 ae ae 13 f0       	push   $0xf013aeae
f011f16c:	68 8a 04 00 00       	push   $0x48a
f011f171:	68 76 a9 13 f0       	push   $0xf013a976
f011f176:	e8 2b 10 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f17b:	ff 45 e8             	incl   -0x18(%ebp)
f011f17e:	83 ec 08             	sub    $0x8,%esp
f011f181:	ff 75 e8             	pushl  -0x18(%ebp)
f011f184:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011f189:	e8 9f 1a fe ff       	call   f0100c2d <cprintf>
f011f18e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f191:	e8 52 d3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f196:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f199:	e8 ee 4a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f19e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f1a1:	83 ec 0c             	sub    $0xc,%esp
f011f1a4:	68 00 00 08 00       	push   $0x80000
f011f1a9:	e8 16 84 fe ff       	call   f01075c4 <kmalloc>
f011f1ae:	83 c4 10             	add    $0x10,%esp
f011f1b1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f1b7:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f1be:	10 00 00 
f011f1c1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f1c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1cc:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f1d2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f1d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1dd:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f1e3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f1e9:	29 d0                	sub    %edx,%eax
f011f1eb:	89 c1                	mov    %eax,%ecx
f011f1ed:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f1f4:	10 00 00 
f011f1f7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f1fc:	0f b6 d0             	movzbl %al,%edx
f011f1ff:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f205:	01 d0                	add    %edx,%eax
f011f207:	48                   	dec    %eax
f011f208:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f20e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f214:	ba 00 00 00 00       	mov    $0x0,%edx
f011f219:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f21f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f225:	29 d0                	sub    %edx,%eax
f011f227:	01 c1                	add    %eax,%ecx
f011f229:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f230:	10 00 00 
f011f233:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f238:	0f b6 c0             	movzbl %al,%eax
f011f23b:	c1 e0 04             	shl    $0x4,%eax
f011f23e:	89 c2                	mov    %eax,%edx
f011f240:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f246:	01 d0                	add    %edx,%eax
f011f248:	48                   	dec    %eax
f011f249:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f24f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f255:	ba 00 00 00 00       	mov    $0x0,%edx
f011f25a:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f260:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f266:	29 d0                	sub    %edx,%eax
f011f268:	01 c8                	add    %ecx,%eax
f011f26a:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f270:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f276:	39 c2                	cmp    %eax,%edx
f011f278:	74 17                	je     f011f291 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f27a:	83 ec 04             	sub    $0x4,%esp
f011f27d:	68 90 b0 13 f0       	push   $0xf013b090
f011f282:	68 91 04 00 00       	push   $0x491
f011f287:	68 76 a9 13 f0       	push   $0xf013a976
f011f28c:	e8 15 0f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f291:	e8 f6 49 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f296:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f299:	74 17                	je     f011f2b2 <test_kmalloc_worstfit+0x1291>
f011f29b:	83 ec 04             	sub    $0x4,%esp
f011f29e:	68 90 a9 13 f0       	push   $0xf013a990
f011f2a3:	68 92 04 00 00       	push   $0x492
f011f2a8:	68 76 a9 13 f0       	push   $0xf013a976
f011f2ad:	e8 f4 0e fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f2b2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f2b5:	e8 2e d2 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f2ba:	29 c3                	sub    %eax,%ebx
f011f2bc:	89 d8                	mov    %ebx,%eax
f011f2be:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f2c3:	74 17                	je     f011f2dc <test_kmalloc_worstfit+0x12bb>
f011f2c5:	83 ec 04             	sub    $0x4,%esp
f011f2c8:	68 ae ae 13 f0       	push   $0xf013aeae
f011f2cd:	68 93 04 00 00       	push   $0x493
f011f2d2:	68 76 a9 13 f0       	push   $0xf013a976
f011f2d7:	e8 ca 0e fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f2dc:	ff 45 e8             	incl   -0x18(%ebp)
f011f2df:	83 ec 08             	sub    $0x8,%esp
f011f2e2:	ff 75 e8             	pushl  -0x18(%ebp)
f011f2e5:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011f2ea:	e8 3e 19 fe ff       	call   f0100c2d <cprintf>
f011f2ef:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f2f2:	e8 f1 d1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f2f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f2fa:	e8 8d 49 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f2ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f302:	83 ec 0c             	sub    $0xc,%esp
f011f305:	68 00 04 00 00       	push   $0x400
f011f30a:	e8 b5 82 fe ff       	call   f01075c4 <kmalloc>
f011f30f:	83 c4 10             	add    $0x10,%esp
f011f312:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f318:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011f31f:	10 00 00 
f011f322:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011f328:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f32d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011f333:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f339:	ba 00 00 00 00       	mov    $0x0,%edx
f011f33e:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011f344:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f34a:	29 d0                	sub    %edx,%eax
f011f34c:	89 c1                	mov    %eax,%ecx
f011f34e:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011f355:	10 00 00 
f011f358:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f35d:	0f b6 d0             	movzbl %al,%edx
f011f360:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011f366:	01 d0                	add    %edx,%eax
f011f368:	48                   	dec    %eax
f011f369:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011f36f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f375:	ba 00 00 00 00       	mov    $0x0,%edx
f011f37a:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011f380:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f386:	29 d0                	sub    %edx,%eax
f011f388:	01 c1                	add    %eax,%ecx
f011f38a:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011f391:	10 00 00 
f011f394:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f399:	0f b6 c0             	movzbl %al,%eax
f011f39c:	c1 e0 04             	shl    $0x4,%eax
f011f39f:	89 c2                	mov    %eax,%edx
f011f3a1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011f3a7:	01 d0                	add    %edx,%eax
f011f3a9:	48                   	dec    %eax
f011f3aa:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011f3b0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f3b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3bb:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011f3c1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f3c7:	29 d0                	sub    %edx,%eax
f011f3c9:	01 c8                	add    %ecx,%eax
f011f3cb:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f3d1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f3d7:	39 c2                	cmp    %eax,%edx
f011f3d9:	74 17                	je     f011f3f2 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011f3db:	83 ec 04             	sub    $0x4,%esp
f011f3de:	68 90 b0 13 f0       	push   $0xf013b090
f011f3e3:	68 9a 04 00 00       	push   $0x49a
f011f3e8:	68 76 a9 13 f0       	push   $0xf013a976
f011f3ed:	e8 b4 0d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3f2:	e8 95 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f3f7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f3fa:	74 17                	je     f011f413 <test_kmalloc_worstfit+0x13f2>
f011f3fc:	83 ec 04             	sub    $0x4,%esp
f011f3ff:	68 90 a9 13 f0       	push   $0xf013a990
f011f404:	68 9b 04 00 00       	push   $0x49b
f011f409:	68 76 a9 13 f0       	push   $0xf013a976
f011f40e:	e8 93 0d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f413:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f416:	e8 cd d0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f41b:	29 c3                	sub    %eax,%ebx
f011f41d:	89 d8                	mov    %ebx,%eax
f011f41f:	83 f8 01             	cmp    $0x1,%eax
f011f422:	74 17                	je     f011f43b <test_kmalloc_worstfit+0x141a>
f011f424:	83 ec 04             	sub    $0x4,%esp
f011f427:	68 ae ae 13 f0       	push   $0xf013aeae
f011f42c:	68 9c 04 00 00       	push   $0x49c
f011f431:	68 76 a9 13 f0       	push   $0xf013a976
f011f436:	e8 6b 0d fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f43b:	ff 45 e8             	incl   -0x18(%ebp)
f011f43e:	83 ec 08             	sub    $0x8,%esp
f011f441:	ff 75 e8             	pushl  -0x18(%ebp)
f011f444:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011f449:	e8 df 17 fe ff       	call   f0100c2d <cprintf>
f011f44e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f451:	e8 92 d0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f456:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f459:	e8 2e 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f45e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f461:	83 ec 0c             	sub    $0xc,%esp
f011f464:	68 00 f0 1f 00       	push   $0x1ff000
f011f469:	e8 56 81 fe ff       	call   f01075c4 <kmalloc>
f011f46e:	83 c4 10             	add    $0x10,%esp
f011f471:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f477:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f47e:	10 00 00 
f011f481:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f487:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f48c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f492:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f498:	ba 00 00 00 00       	mov    $0x0,%edx
f011f49d:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f4a3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f4a9:	29 d0                	sub    %edx,%eax
f011f4ab:	89 c1                	mov    %eax,%ecx
f011f4ad:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f4b4:	10 00 00 
f011f4b7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f4bc:	0f b6 d0             	movzbl %al,%edx
f011f4bf:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f4c5:	01 d0                	add    %edx,%eax
f011f4c7:	48                   	dec    %eax
f011f4c8:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f4ce:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f4d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4d9:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f4df:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f4e5:	29 d0                	sub    %edx,%eax
f011f4e7:	01 c1                	add    %eax,%ecx
f011f4e9:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f4f0:	10 00 00 
f011f4f3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f4f8:	0f b6 c0             	movzbl %al,%eax
f011f4fb:	c1 e0 04             	shl    $0x4,%eax
f011f4fe:	89 c2                	mov    %eax,%edx
f011f500:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f506:	01 d0                	add    %edx,%eax
f011f508:	48                   	dec    %eax
f011f509:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f50f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f515:	ba 00 00 00 00       	mov    $0x0,%edx
f011f51a:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f520:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f526:	29 d0                	sub    %edx,%eax
f011f528:	01 c8                	add    %ecx,%eax
f011f52a:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f530:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f536:	39 c2                	cmp    %eax,%edx
f011f538:	74 17                	je     f011f551 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f53a:	83 ec 04             	sub    $0x4,%esp
f011f53d:	68 90 b0 13 f0       	push   $0xf013b090
f011f542:	68 a3 04 00 00       	push   $0x4a3
f011f547:	68 76 a9 13 f0       	push   $0xf013a976
f011f54c:	e8 55 0c fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f551:	e8 36 47 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f556:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f559:	74 17                	je     f011f572 <test_kmalloc_worstfit+0x1551>
f011f55b:	83 ec 04             	sub    $0x4,%esp
f011f55e:	68 90 a9 13 f0       	push   $0xf013a990
f011f563:	68 a4 04 00 00       	push   $0x4a4
f011f568:	68 76 a9 13 f0       	push   $0xf013a976
f011f56d:	e8 34 0c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f572:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f575:	e8 6e cf fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f57a:	29 c3                	sub    %eax,%ebx
f011f57c:	89 d8                	mov    %ebx,%eax
f011f57e:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f583:	74 17                	je     f011f59c <test_kmalloc_worstfit+0x157b>
f011f585:	83 ec 04             	sub    $0x4,%esp
f011f588:	68 ae ae 13 f0       	push   $0xf013aeae
f011f58d:	68 a5 04 00 00       	push   $0x4a5
f011f592:	68 76 a9 13 f0       	push   $0xf013a976
f011f597:	e8 0a 0c fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f59c:	ff 45 e8             	incl   -0x18(%ebp)
f011f59f:	83 ec 08             	sub    $0x8,%esp
f011f5a2:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5a5:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011f5aa:	e8 7e 16 fe ff       	call   f0100c2d <cprintf>
f011f5af:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f5b2:	e8 31 cf fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f5b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f5ba:	e8 cd 46 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f5bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f5c2:	83 ec 0c             	sub    $0xc,%esp
f011f5c5:	68 00 00 40 00       	push   $0x400000
f011f5ca:	e8 f5 7f fe ff       	call   f01075c4 <kmalloc>
f011f5cf:	83 c4 10             	add    $0x10,%esp
f011f5d2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011f5d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f5de:	85 c0                	test   %eax,%eax
f011f5e0:	74 17                	je     f011f5f9 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011f5e2:	83 ec 04             	sub    $0x4,%esp
f011f5e5:	68 90 b0 13 f0       	push   $0xf013b090
f011f5ea:	68 ad 04 00 00       	push   $0x4ad
f011f5ef:	68 76 a9 13 f0       	push   $0xf013a976
f011f5f4:	e8 ad 0b fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5f9:	e8 8e 46 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f5fe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f601:	74 17                	je     f011f61a <test_kmalloc_worstfit+0x15f9>
f011f603:	83 ec 04             	sub    $0x4,%esp
f011f606:	68 90 a9 13 f0       	push   $0xf013a990
f011f60b:	68 ae 04 00 00       	push   $0x4ae
f011f610:	68 76 a9 13 f0       	push   $0xf013a976
f011f615:	e8 8c 0b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f61a:	e8 c9 ce fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f61f:	89 c2                	mov    %eax,%edx
f011f621:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f624:	39 c2                	cmp    %eax,%edx
f011f626:	74 17                	je     f011f63f <test_kmalloc_worstfit+0x161e>
f011f628:	83 ec 04             	sub    $0x4,%esp
f011f62b:	68 ae ae 13 f0       	push   $0xf013aeae
f011f630:	68 af 04 00 00       	push   $0x4af
f011f635:	68 76 a9 13 f0       	push   $0xf013a976
f011f63a:	e8 67 0b fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f63f:	ff 45 e8             	incl   -0x18(%ebp)
f011f642:	83 ec 08             	sub    $0x8,%esp
f011f645:	ff 75 e8             	pushl  -0x18(%ebp)
f011f648:	68 b0 b0 13 f0       	push   $0xf013b0b0
f011f64d:	e8 db 15 fe ff       	call   f0100c2d <cprintf>
f011f652:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f655:	83 ec 0c             	sub    $0xc,%esp
f011f658:	68 c4 b0 13 f0       	push   $0xf013b0c4
f011f65d:	e8 cb 15 fe ff       	call   f0100c2d <cprintf>
f011f662:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f665:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f66a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f66d:	5b                   	pop    %ebx
f011f66e:	5f                   	pop    %edi
f011f66f:	5d                   	pop    %ebp
f011f670:	c3                   	ret    

f011f671 <test_kfree>:

int test_kfree()
{
f011f671:	55                   	push   %ebp
f011f672:	89 e5                	mov    %esp,%ebp
f011f674:	57                   	push   %edi
f011f675:	53                   	push   %ebx
f011f676:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011f67c:	83 ec 0c             	sub    $0xc,%esp
f011f67f:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011f684:	e8 a4 15 fe ff       	call   f0100c2d <cprintf>
f011f689:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f68c:	83 ec 0c             	sub    $0xc,%esp
f011f68f:	68 e8 a8 13 f0       	push   $0xf013a8e8
f011f694:	e8 94 15 fe ff       	call   f0100c2d <cprintf>
f011f699:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f69c:	83 ec 0c             	sub    $0xc,%esp
f011f69f:	68 b8 a8 13 f0       	push   $0xf013a8b8
f011f6a4:	e8 84 15 fe ff       	call   f0100c2d <cprintf>
f011f6a9:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f6ac:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f6b0:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f6b4:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f6ba:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f6c0:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f6c7:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f6ce:	e8 15 ce fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f6d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f6d6:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011f6dc:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f6e1:	b8 00 00 00 00       	mov    $0x0,%eax
f011f6e6:	89 d7                	mov    %edx,%edi
f011f6e8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f6ea:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011f6f0:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f6f5:	b8 00 00 00 00       	mov    $0x0,%eax
f011f6fa:	89 d7                	mov    %edx,%edi
f011f6fc:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f6fe:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011f704:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f709:	b8 00 00 00 00       	mov    $0x0,%eax
f011f70e:	89 d7                	mov    %edx,%edi
f011f710:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f712:	e8 d1 cd fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f717:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f71a:	e8 6d 45 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f71f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f722:	83 ec 0c             	sub    $0xc,%esp
f011f725:	68 00 fc 1f 00       	push   $0x1ffc00
f011f72a:	e8 95 7e fe ff       	call   f01075c4 <kmalloc>
f011f72f:	83 c4 10             	add    $0x10,%esp
f011f732:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f738:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011f73e:	89 c1                	mov    %eax,%ecx
f011f740:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f747:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f74a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f74f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f752:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f755:	ba 00 00 00 00       	mov    $0x0,%edx
f011f75a:	f7 75 c8             	divl   -0x38(%ebp)
f011f75d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f760:	29 d0                	sub    %edx,%eax
f011f762:	89 c3                	mov    %eax,%ebx
f011f764:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f76b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f770:	0f b6 d0             	movzbl %al,%edx
f011f773:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f776:	01 d0                	add    %edx,%eax
f011f778:	48                   	dec    %eax
f011f779:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f77c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f77f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f784:	f7 75 c0             	divl   -0x40(%ebp)
f011f787:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f78a:	29 d0                	sub    %edx,%eax
f011f78c:	01 c3                	add    %eax,%ebx
f011f78e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f795:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f79a:	0f b6 c0             	movzbl %al,%eax
f011f79d:	c1 e0 04             	shl    $0x4,%eax
f011f7a0:	89 c2                	mov    %eax,%edx
f011f7a2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f7a5:	01 d0                	add    %edx,%eax
f011f7a7:	48                   	dec    %eax
f011f7a8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f7ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f7ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7b3:	f7 75 b8             	divl   -0x48(%ebp)
f011f7b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f7b9:	29 d0                	sub    %edx,%eax
f011f7bb:	01 d8                	add    %ebx,%eax
f011f7bd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f7c2:	39 c1                	cmp    %eax,%ecx
f011f7c4:	74 17                	je     f011f7dd <test_kfree+0x16c>
f011f7c6:	83 ec 04             	sub    $0x4,%esp
f011f7c9:	68 5c aa 13 f0       	push   $0xf013aa5c
f011f7ce:	68 d7 04 00 00       	push   $0x4d7
f011f7d3:	68 76 a9 13 f0       	push   $0xf013a976
f011f7d8:	e8 c9 09 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7dd:	e8 aa 44 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f7e2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f7e5:	74 17                	je     f011f7fe <test_kfree+0x18d>
f011f7e7:	83 ec 04             	sub    $0x4,%esp
f011f7ea:	68 90 a9 13 f0       	push   $0xf013a990
f011f7ef:	68 d8 04 00 00       	push   $0x4d8
f011f7f4:	68 76 a9 13 f0       	push   $0xf013a976
f011f7f9:	e8 a8 09 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f7fe:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f801:	e8 e2 cc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f806:	29 c3                	sub    %eax,%ebx
f011f808:	89 d8                	mov    %ebx,%eax
f011f80a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f80f:	74 17                	je     f011f828 <test_kfree+0x1b7>
f011f811:	83 ec 04             	sub    $0x4,%esp
f011f814:	68 f8 a9 13 f0       	push   $0xf013a9f8
f011f819:	68 d9 04 00 00       	push   $0x4d9
f011f81e:	68 76 a9 13 f0       	push   $0xf013a976
f011f823:	e8 7e 09 fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f828:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011f82f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f832:	e8 b1 cc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f837:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f83a:	e8 4d 44 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f83f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f842:	83 ec 0c             	sub    $0xc,%esp
f011f845:	68 00 fc 1f 00       	push   $0x1ffc00
f011f84a:	e8 75 7d fe ff       	call   f01075c4 <kmalloc>
f011f84f:	83 c4 10             	add    $0x10,%esp
f011f852:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f858:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011f85e:	89 c1                	mov    %eax,%ecx
f011f860:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f867:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f86a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f86f:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f872:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f875:	ba 00 00 00 00       	mov    $0x0,%edx
f011f87a:	f7 75 b0             	divl   -0x50(%ebp)
f011f87d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f880:	29 d0                	sub    %edx,%eax
f011f882:	89 c3                	mov    %eax,%ebx
f011f884:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f88b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f890:	0f b6 d0             	movzbl %al,%edx
f011f893:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f896:	01 d0                	add    %edx,%eax
f011f898:	48                   	dec    %eax
f011f899:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f89c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f89f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8a4:	f7 75 a8             	divl   -0x58(%ebp)
f011f8a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f8aa:	29 d0                	sub    %edx,%eax
f011f8ac:	01 c3                	add    %eax,%ebx
f011f8ae:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f8b5:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f8ba:	0f b6 c0             	movzbl %al,%eax
f011f8bd:	c1 e0 04             	shl    $0x4,%eax
f011f8c0:	89 c2                	mov    %eax,%edx
f011f8c2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f8c5:	01 d0                	add    %edx,%eax
f011f8c7:	48                   	dec    %eax
f011f8c8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f8cb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f8ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8d3:	f7 75 a0             	divl   -0x60(%ebp)
f011f8d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f8d9:	29 d0                	sub    %edx,%eax
f011f8db:	01 d8                	add    %ebx,%eax
f011f8dd:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f8e2:	39 c1                	cmp    %eax,%ecx
f011f8e4:	74 17                	je     f011f8fd <test_kfree+0x28c>
f011f8e6:	83 ec 04             	sub    $0x4,%esp
f011f8e9:	68 5c aa 13 f0       	push   $0xf013aa5c
f011f8ee:	68 e0 04 00 00       	push   $0x4e0
f011f8f3:	68 76 a9 13 f0       	push   $0xf013a976
f011f8f8:	e8 a9 08 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8fd:	e8 8a 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f902:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f905:	74 17                	je     f011f91e <test_kfree+0x2ad>
f011f907:	83 ec 04             	sub    $0x4,%esp
f011f90a:	68 90 a9 13 f0       	push   $0xf013a990
f011f90f:	68 e1 04 00 00       	push   $0x4e1
f011f914:	68 76 a9 13 f0       	push   $0xf013a976
f011f919:	e8 88 08 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f91e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f921:	e8 c2 cb fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f926:	29 c3                	sub    %eax,%ebx
f011f928:	89 d8                	mov    %ebx,%eax
f011f92a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f92f:	74 17                	je     f011f948 <test_kfree+0x2d7>
f011f931:	83 ec 04             	sub    $0x4,%esp
f011f934:	68 f8 a9 13 f0       	push   $0xf013a9f8
f011f939:	68 e2 04 00 00       	push   $0x4e2
f011f93e:	68 76 a9 13 f0       	push   $0xf013a976
f011f943:	e8 5e 08 fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f948:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011f94f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f952:	e8 91 cb fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011f957:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f95a:	e8 2d 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f95f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f962:	83 ec 0c             	sub    $0xc,%esp
f011f965:	68 00 08 00 00       	push   $0x800
f011f96a:	e8 55 7c fe ff       	call   f01075c4 <kmalloc>
f011f96f:	83 c4 10             	add    $0x10,%esp
f011f972:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f978:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f97e:	89 c1                	mov    %eax,%ecx
f011f980:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011f987:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f98a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f98f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011f992:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f995:	ba 00 00 00 00       	mov    $0x0,%edx
f011f99a:	f7 75 98             	divl   -0x68(%ebp)
f011f99d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f9a0:	29 d0                	sub    %edx,%eax
f011f9a2:	89 c3                	mov    %eax,%ebx
f011f9a4:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011f9ab:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f9b0:	0f b6 d0             	movzbl %al,%edx
f011f9b3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f9b6:	01 d0                	add    %edx,%eax
f011f9b8:	48                   	dec    %eax
f011f9b9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011f9bc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f9bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9c4:	f7 75 90             	divl   -0x70(%ebp)
f011f9c7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f9ca:	29 d0                	sub    %edx,%eax
f011f9cc:	01 c3                	add    %eax,%ebx
f011f9ce:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011f9d5:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011f9da:	0f b6 c0             	movzbl %al,%eax
f011f9dd:	c1 e0 04             	shl    $0x4,%eax
f011f9e0:	89 c2                	mov    %eax,%edx
f011f9e2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f9e5:	01 d0                	add    %edx,%eax
f011f9e7:	48                   	dec    %eax
f011f9e8:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011f9eb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f9ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9f3:	f7 75 88             	divl   -0x78(%ebp)
f011f9f6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f9f9:	29 d0                	sub    %edx,%eax
f011f9fb:	01 d8                	add    %ebx,%eax
f011f9fd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011fa02:	39 c1                	cmp    %eax,%ecx
f011fa04:	74 17                	je     f011fa1d <test_kfree+0x3ac>
f011fa06:	83 ec 04             	sub    $0x4,%esp
f011fa09:	68 5c aa 13 f0       	push   $0xf013aa5c
f011fa0e:	68 e9 04 00 00       	push   $0x4e9
f011fa13:	68 76 a9 13 f0       	push   $0xf013a976
f011fa18:	e8 89 07 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa1d:	e8 6a 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fa22:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa25:	74 17                	je     f011fa3e <test_kfree+0x3cd>
f011fa27:	83 ec 04             	sub    $0x4,%esp
f011fa2a:	68 90 a9 13 f0       	push   $0xf013a990
f011fa2f:	68 ea 04 00 00       	push   $0x4ea
f011fa34:	68 76 a9 13 f0       	push   $0xf013a976
f011fa39:	e8 68 07 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa3e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa41:	e8 a2 ca fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011fa46:	29 c3                	sub    %eax,%ebx
f011fa48:	89 d8                	mov    %ebx,%eax
f011fa4a:	83 f8 01             	cmp    $0x1,%eax
f011fa4d:	74 17                	je     f011fa66 <test_kfree+0x3f5>
f011fa4f:	83 ec 04             	sub    $0x4,%esp
f011fa52:	68 f8 a9 13 f0       	push   $0xf013a9f8
f011fa57:	68 eb 04 00 00       	push   $0x4eb
f011fa5c:	68 76 a9 13 f0       	push   $0xf013a976
f011fa61:	e8 40 07 fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011fa66:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011fa6d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011fa70:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fa76:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011fa79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fa80:	eb 0e                	jmp    f011fa90 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011fa82:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fa85:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fa88:	01 d0                	add    %edx,%eax
f011fa8a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011fa8d:	ff 45 f4             	incl   -0xc(%ebp)
f011fa90:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011fa96:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fa99:	7f e7                	jg     f011fa82 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fa9b:	e8 48 ca fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011faa0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011faa3:	e8 e4 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011faa8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011faab:	83 ec 0c             	sub    $0xc,%esp
f011faae:	68 00 08 00 00       	push   $0x800
f011fab3:	e8 0c 7b fe ff       	call   f01075c4 <kmalloc>
f011fab8:	83 c4 10             	add    $0x10,%esp
f011fabb:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fac1:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fac7:	89 c1                	mov    %eax,%ecx
f011fac9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fad0:	10 00 00 
f011fad3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fad9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fade:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fae4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011faea:	ba 00 00 00 00       	mov    $0x0,%edx
f011faef:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011faf5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fafb:	29 d0                	sub    %edx,%eax
f011fafd:	89 c3                	mov    %eax,%ebx
f011faff:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fb06:	10 00 00 
f011fb09:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011fb0e:	0f b6 d0             	movzbl %al,%edx
f011fb11:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fb17:	01 d0                	add    %edx,%eax
f011fb19:	48                   	dec    %eax
f011fb1a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fb20:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fb26:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb2b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fb31:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fb37:	29 d0                	sub    %edx,%eax
f011fb39:	01 c3                	add    %eax,%ebx
f011fb3b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fb42:	10 00 00 
f011fb45:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011fb4a:	0f b6 c0             	movzbl %al,%eax
f011fb4d:	c1 e0 04             	shl    $0x4,%eax
f011fb50:	89 c2                	mov    %eax,%edx
f011fb52:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fb58:	01 d0                	add    %edx,%eax
f011fb5a:	48                   	dec    %eax
f011fb5b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fb61:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fb67:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb6c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fb72:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fb78:	29 d0                	sub    %edx,%eax
f011fb7a:	01 d8                	add    %ebx,%eax
f011fb7c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fb81:	39 c1                	cmp    %eax,%ecx
f011fb83:	74 17                	je     f011fb9c <test_kfree+0x52b>
f011fb85:	83 ec 04             	sub    $0x4,%esp
f011fb88:	68 5c aa 13 f0       	push   $0xf013aa5c
f011fb8d:	68 f7 04 00 00       	push   $0x4f7
f011fb92:	68 76 a9 13 f0       	push   $0xf013a976
f011fb97:	e8 0a 06 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb9c:	e8 eb 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fba1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fba4:	74 17                	je     f011fbbd <test_kfree+0x54c>
f011fba6:	83 ec 04             	sub    $0x4,%esp
f011fba9:	68 90 a9 13 f0       	push   $0xf013a990
f011fbae:	68 f8 04 00 00       	push   $0x4f8
f011fbb3:	68 76 a9 13 f0       	push   $0xf013a976
f011fbb8:	e8 e9 05 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fbbd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fbc0:	e8 23 c9 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011fbc5:	29 c3                	sub    %eax,%ebx
f011fbc7:	89 d8                	mov    %ebx,%eax
f011fbc9:	83 f8 01             	cmp    $0x1,%eax
f011fbcc:	74 17                	je     f011fbe5 <test_kfree+0x574>
f011fbce:	83 ec 04             	sub    $0x4,%esp
f011fbd1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f011fbd6:	68 f9 04 00 00       	push   $0x4f9
f011fbdb:	68 76 a9 13 f0       	push   $0xf013a976
f011fbe0:	e8 c1 05 fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fbe5:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011fbec:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fbef:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fbf5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fbf8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fbff:	eb 0e                	jmp    f011fc0f <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011fc01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fc04:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fc07:	01 d0                	add    %edx,%eax
f011fc09:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fc0c:	ff 45 f4             	incl   -0xc(%ebp)
f011fc0f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fc15:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc18:	7f e7                	jg     f011fc01 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fc1a:	e8 c9 c8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011fc1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc22:	e8 65 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fc27:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fc2a:	83 ec 0c             	sub    $0xc,%esp
f011fc2d:	68 00 1c 00 00       	push   $0x1c00
f011fc32:	e8 8d 79 fe ff       	call   f01075c4 <kmalloc>
f011fc37:	83 c4 10             	add    $0x10,%esp
f011fc3a:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc40:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fc46:	89 c1                	mov    %eax,%ecx
f011fc48:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fc4f:	10 00 00 
f011fc52:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fc58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc5d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fc63:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fc69:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc6e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fc74:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fc7a:	29 d0                	sub    %edx,%eax
f011fc7c:	89 c3                	mov    %eax,%ebx
f011fc7e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fc85:	10 00 00 
f011fc88:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011fc8d:	0f b6 d0             	movzbl %al,%edx
f011fc90:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fc96:	01 d0                	add    %edx,%eax
f011fc98:	48                   	dec    %eax
f011fc99:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fc9f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fca5:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcaa:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fcb0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fcb6:	29 d0                	sub    %edx,%eax
f011fcb8:	01 c3                	add    %eax,%ebx
f011fcba:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fcc1:	10 00 00 
f011fcc4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011fcc9:	0f b6 c0             	movzbl %al,%eax
f011fccc:	c1 e0 04             	shl    $0x4,%eax
f011fccf:	89 c2                	mov    %eax,%edx
f011fcd1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fcd7:	01 d0                	add    %edx,%eax
f011fcd9:	48                   	dec    %eax
f011fcda:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fce0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fce6:	ba 00 00 00 00       	mov    $0x0,%edx
f011fceb:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fcf1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fcf7:	29 d0                	sub    %edx,%eax
f011fcf9:	01 d8                	add    %ebx,%eax
f011fcfb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fd00:	39 c1                	cmp    %eax,%ecx
f011fd02:	74 17                	je     f011fd1b <test_kfree+0x6aa>
f011fd04:	83 ec 04             	sub    $0x4,%esp
f011fd07:	68 5c aa 13 f0       	push   $0xf013aa5c
f011fd0c:	68 05 05 00 00       	push   $0x505
f011fd11:	68 76 a9 13 f0       	push   $0xf013a976
f011fd16:	e8 8b 04 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd1b:	e8 6c 3f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fd20:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd23:	74 17                	je     f011fd3c <test_kfree+0x6cb>
f011fd25:	83 ec 04             	sub    $0x4,%esp
f011fd28:	68 90 a9 13 f0       	push   $0xf013a990
f011fd2d:	68 06 05 00 00       	push   $0x506
f011fd32:	68 76 a9 13 f0       	push   $0xf013a976
f011fd37:	e8 6a 04 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd3c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd3f:	e8 a4 c7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011fd44:	29 c3                	sub    %eax,%ebx
f011fd46:	89 d8                	mov    %ebx,%eax
f011fd48:	83 f8 02             	cmp    $0x2,%eax
f011fd4b:	74 17                	je     f011fd64 <test_kfree+0x6f3>
f011fd4d:	83 ec 04             	sub    $0x4,%esp
f011fd50:	68 f8 a9 13 f0       	push   $0xf013a9f8
f011fd55:	68 07 05 00 00       	push   $0x507
f011fd5a:	68 76 a9 13 f0       	push   $0xf013a976
f011fd5f:	e8 42 04 fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fd64:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011fd6b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fd6e:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fd74:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fd77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd7e:	eb 0e                	jmp    f011fd8e <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011fd80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd83:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd86:	01 d0                	add    %edx,%eax
f011fd88:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fd8b:	ff 45 f4             	incl   -0xc(%ebp)
f011fd8e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011fd94:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd97:	7f e7                	jg     f011fd80 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011fd99:	e8 4a c7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011fd9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fda1:	e8 e6 3e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fda6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011fda9:	83 ec 0c             	sub    $0xc,%esp
f011fdac:	68 00 fc 2f 00       	push   $0x2ffc00
f011fdb1:	e8 0e 78 fe ff       	call   f01075c4 <kmalloc>
f011fdb6:	83 c4 10             	add    $0x10,%esp
f011fdb9:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fdbf:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011fdc5:	89 c1                	mov    %eax,%ecx
f011fdc7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011fdce:	10 00 00 
f011fdd1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fdd7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fddc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011fde2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fde8:	ba 00 00 00 00       	mov    $0x0,%edx
f011fded:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011fdf3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fdf9:	29 d0                	sub    %edx,%eax
f011fdfb:	89 c3                	mov    %eax,%ebx
f011fdfd:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011fe04:	10 00 00 
f011fe07:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011fe0c:	0f b6 d0             	movzbl %al,%edx
f011fe0f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fe15:	01 d0                	add    %edx,%eax
f011fe17:	48                   	dec    %eax
f011fe18:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011fe1e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011fe24:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe29:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011fe2f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011fe35:	29 d0                	sub    %edx,%eax
f011fe37:	01 c3                	add    %eax,%ebx
f011fe39:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011fe40:	10 00 00 
f011fe43:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011fe48:	0f b6 c0             	movzbl %al,%eax
f011fe4b:	c1 e0 04             	shl    $0x4,%eax
f011fe4e:	89 c2                	mov    %eax,%edx
f011fe50:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011fe56:	01 d0                	add    %edx,%eax
f011fe58:	48                   	dec    %eax
f011fe59:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011fe5f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fe65:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe6a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011fe70:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fe76:	29 d0                	sub    %edx,%eax
f011fe78:	01 d8                	add    %ebx,%eax
f011fe7a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fe7f:	39 c1                	cmp    %eax,%ecx
f011fe81:	74 17                	je     f011fe9a <test_kfree+0x829>
f011fe83:	83 ec 04             	sub    $0x4,%esp
f011fe86:	68 5c aa 13 f0       	push   $0xf013aa5c
f011fe8b:	68 13 05 00 00       	push   $0x513
f011fe90:	68 76 a9 13 f0       	push   $0xf013a976
f011fe95:	e8 0c 03 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe9a:	e8 ed 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fe9f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fea2:	74 17                	je     f011febb <test_kfree+0x84a>
f011fea4:	83 ec 04             	sub    $0x4,%esp
f011fea7:	68 90 a9 13 f0       	push   $0xf013a990
f011feac:	68 14 05 00 00       	push   $0x514
f011feb1:	68 76 a9 13 f0       	push   $0xf013a976
f011feb6:	e8 eb 02 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011febb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011febe:	e8 25 c6 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011fec3:	29 c3                	sub    %eax,%ebx
f011fec5:	89 d8                	mov    %ebx,%eax
f011fec7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fecc:	74 17                	je     f011fee5 <test_kfree+0x874>
f011fece:	83 ec 04             	sub    $0x4,%esp
f011fed1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f011fed6:	68 15 05 00 00       	push   $0x515
f011fedb:	68 76 a9 13 f0       	push   $0xf013a976
f011fee0:	e8 c1 02 fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011fee5:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f011feec:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011feef:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011fef5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fef8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011feff:	eb 0e                	jmp    f011ff0f <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f011ff01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff04:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ff07:	01 d0                	add    %edx,%eax
f011ff09:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011ff0c:	ff 45 f4             	incl   -0xc(%ebp)
f011ff0f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011ff15:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff18:	7f e7                	jg     f011ff01 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff1a:	e8 c9 c5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f011ff1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff22:	e8 65 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ff27:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011ff2a:	83 ec 0c             	sub    $0xc,%esp
f011ff2d:	68 00 fc 5f 00       	push   $0x5ffc00
f011ff32:	e8 8d 76 fe ff       	call   f01075c4 <kmalloc>
f011ff37:	83 c4 10             	add    $0x10,%esp
f011ff3a:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff40:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011ff46:	89 c1                	mov    %eax,%ecx
f011ff48:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ff4f:	10 00 00 
f011ff52:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ff58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff5d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ff63:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ff69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff6e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ff74:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ff7a:	29 d0                	sub    %edx,%eax
f011ff7c:	89 c3                	mov    %eax,%ebx
f011ff7e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ff85:	10 00 00 
f011ff88:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ff8d:	0f b6 d0             	movzbl %al,%edx
f011ff90:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ff96:	01 d0                	add    %edx,%eax
f011ff98:	48                   	dec    %eax
f011ff99:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ff9f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ffa5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffaa:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ffb0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ffb6:	29 d0                	sub    %edx,%eax
f011ffb8:	01 c3                	add    %eax,%ebx
f011ffba:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ffc1:	10 00 00 
f011ffc4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f011ffc9:	0f b6 c0             	movzbl %al,%eax
f011ffcc:	c1 e0 04             	shl    $0x4,%eax
f011ffcf:	89 c2                	mov    %eax,%edx
f011ffd1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ffd7:	01 d0                	add    %edx,%eax
f011ffd9:	48                   	dec    %eax
f011ffda:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011ffe0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ffe6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffeb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011fff1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fff7:	29 d0                	sub    %edx,%eax
f011fff9:	01 d8                	add    %ebx,%eax
f011fffb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120000:	39 c1                	cmp    %eax,%ecx
f0120002:	74 17                	je     f012001b <test_kfree+0x9aa>
f0120004:	83 ec 04             	sub    $0x4,%esp
f0120007:	68 5c aa 13 f0       	push   $0xf013aa5c
f012000c:	68 21 05 00 00       	push   $0x521
f0120011:	68 76 a9 13 f0       	push   $0xf013a976
f0120016:	e8 8b 01 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012001b:	e8 6c 3c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120020:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120023:	74 17                	je     f012003c <test_kfree+0x9cb>
f0120025:	83 ec 04             	sub    $0x4,%esp
f0120028:	68 90 a9 13 f0       	push   $0xf013a990
f012002d:	68 22 05 00 00       	push   $0x522
f0120032:	68 76 a9 13 f0       	push   $0xf013a976
f0120037:	e8 6a 01 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012003c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012003f:	e8 a4 c4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120044:	29 c3                	sub    %eax,%ebx
f0120046:	89 d8                	mov    %ebx,%eax
f0120048:	3d 00 06 00 00       	cmp    $0x600,%eax
f012004d:	74 17                	je     f0120066 <test_kfree+0x9f5>
f012004f:	83 ec 04             	sub    $0x4,%esp
f0120052:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0120057:	68 23 05 00 00       	push   $0x523
f012005c:	68 76 a9 13 f0       	push   $0xf013a976
f0120061:	e8 40 01 fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120066:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f012006d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120070:	e8 73 c4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120075:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120078:	e8 0f 3c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012007d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120080:	83 ec 0c             	sub    $0xc,%esp
f0120083:	68 00 38 00 00       	push   $0x3800
f0120088:	e8 37 75 fe ff       	call   f01075c4 <kmalloc>
f012008d:	83 c4 10             	add    $0x10,%esp
f0120090:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120096:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012009c:	89 c1                	mov    %eax,%ecx
f012009e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01200a5:	10 00 00 
f01200a8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01200ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01200b3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01200b9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01200bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01200c4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01200ca:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01200d0:	29 d0                	sub    %edx,%eax
f01200d2:	89 c3                	mov    %eax,%ebx
f01200d4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01200db:	10 00 00 
f01200de:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01200e3:	0f b6 d0             	movzbl %al,%edx
f01200e6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01200ec:	01 d0                	add    %edx,%eax
f01200ee:	48                   	dec    %eax
f01200ef:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01200f5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01200fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120100:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120106:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012010c:	29 d0                	sub    %edx,%eax
f012010e:	01 c3                	add    %eax,%ebx
f0120110:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120117:	10 00 00 
f012011a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012011f:	0f b6 c0             	movzbl %al,%eax
f0120122:	c1 e0 04             	shl    $0x4,%eax
f0120125:	89 c2                	mov    %eax,%edx
f0120127:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012012d:	01 d0                	add    %edx,%eax
f012012f:	48                   	dec    %eax
f0120130:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120136:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012013c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120141:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0120147:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012014d:	29 d0                	sub    %edx,%eax
f012014f:	01 d8                	add    %ebx,%eax
f0120151:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120156:	39 c1                	cmp    %eax,%ecx
f0120158:	74 17                	je     f0120171 <test_kfree+0xb00>
f012015a:	83 ec 04             	sub    $0x4,%esp
f012015d:	68 5c aa 13 f0       	push   $0xf013aa5c
f0120162:	68 2a 05 00 00       	push   $0x52a
f0120167:	68 76 a9 13 f0       	push   $0xf013a976
f012016c:	e8 35 00 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120171:	e8 16 3b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120176:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120179:	74 17                	je     f0120192 <test_kfree+0xb21>
f012017b:	83 ec 04             	sub    $0x4,%esp
f012017e:	68 90 a9 13 f0       	push   $0xf013a990
f0120183:	68 2b 05 00 00       	push   $0x52b
f0120188:	68 76 a9 13 f0       	push   $0xf013a976
f012018d:	e8 14 00 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120192:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120195:	e8 4e c3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012019a:	29 c3                	sub    %eax,%ebx
f012019c:	89 d8                	mov    %ebx,%eax
f012019e:	83 f8 04             	cmp    $0x4,%eax
f01201a1:	74 17                	je     f01201ba <test_kfree+0xb49>
f01201a3:	83 ec 04             	sub    $0x4,%esp
f01201a6:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01201ab:	68 2c 05 00 00       	push   $0x52c
f01201b0:	68 76 a9 13 f0       	push   $0xf013a976
f01201b5:	e8 ec ff fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01201ba:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f01201c1:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01201c4:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01201ca:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01201cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01201d4:	eb 0e                	jmp    f01201e4 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f01201d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01201d9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01201dc:	01 d0                	add    %edx,%eax
f01201de:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01201e1:	ff 45 f4             	incl   -0xc(%ebp)
f01201e4:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01201ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01201ed:	7f e7                	jg     f01201d6 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01201ef:	e8 f4 c2 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01201f4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01201fa:	e8 8d 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01201ff:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120205:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012020b:	83 ec 0c             	sub    $0xc,%esp
f012020e:	50                   	push   %eax
f012020f:	e8 ca 73 fe ff       	call   f01075de <kfree>
f0120214:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120217:	e8 70 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012021c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120222:	74 17                	je     f012023b <test_kfree+0xbca>
f0120224:	83 ec 04             	sub    $0x4,%esp
f0120227:	68 90 a9 13 f0       	push   $0xf013a990
f012022c:	68 3b 05 00 00       	push   $0x53b
f0120231:	68 76 a9 13 f0       	push   $0xf013a976
f0120236:	e8 6b ff fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012023b:	e8 a8 c2 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120240:	89 c2                	mov    %eax,%edx
f0120242:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120248:	29 c2                	sub    %eax,%edx
f012024a:	89 d0                	mov    %edx,%eax
f012024c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120251:	74 17                	je     f012026a <test_kfree+0xbf9>
f0120253:	83 ec 04             	sub    $0x4,%esp
f0120256:	68 00 b1 13 f0       	push   $0xf013b100
f012025b:	68 3c 05 00 00       	push   $0x53c
f0120260:	68 76 a9 13 f0       	push   $0xf013a976
f0120265:	e8 3c ff fd ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012026a:	e8 79 c2 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012026f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120275:	e8 12 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012027a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120280:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120286:	83 ec 0c             	sub    $0xc,%esp
f0120289:	50                   	push   %eax
f012028a:	e8 4f 73 fe ff       	call   f01075de <kfree>
f012028f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120292:	e8 f5 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120297:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012029d:	74 17                	je     f01202b6 <test_kfree+0xc45>
f012029f:	83 ec 04             	sub    $0x4,%esp
f01202a2:	68 90 a9 13 f0       	push   $0xf013a990
f01202a7:	68 42 05 00 00       	push   $0x542
f01202ac:	68 76 a9 13 f0       	push   $0xf013a976
f01202b1:	e8 f0 fe fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01202b6:	e8 2d c2 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01202bb:	89 c2                	mov    %eax,%edx
f01202bd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01202c3:	29 c2                	sub    %eax,%edx
f01202c5:	89 d0                	mov    %edx,%eax
f01202c7:	83 f8 01             	cmp    $0x1,%eax
f01202ca:	74 17                	je     f01202e3 <test_kfree+0xc72>
f01202cc:	83 ec 04             	sub    $0x4,%esp
f01202cf:	68 00 b1 13 f0       	push   $0xf013b100
f01202d4:	68 43 05 00 00       	push   $0x543
f01202d9:	68 76 a9 13 f0       	push   $0xf013a976
f01202de:	e8 c3 fe fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01202e3:	e8 00 c2 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01202e8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01202ee:	e8 99 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01202f3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01202f9:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01202ff:	83 ec 0c             	sub    $0xc,%esp
f0120302:	50                   	push   %eax
f0120303:	e8 d6 72 fe ff       	call   f01075de <kfree>
f0120308:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012030b:	e8 7c 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120310:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120316:	74 17                	je     f012032f <test_kfree+0xcbe>
f0120318:	83 ec 04             	sub    $0x4,%esp
f012031b:	68 90 a9 13 f0       	push   $0xf013a990
f0120320:	68 49 05 00 00       	push   $0x549
f0120325:	68 76 a9 13 f0       	push   $0xf013a976
f012032a:	e8 77 fe fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012032f:	e8 b4 c1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120334:	89 c2                	mov    %eax,%edx
f0120336:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012033c:	29 c2                	sub    %eax,%edx
f012033e:	89 d0                	mov    %edx,%eax
f0120340:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120345:	74 17                	je     f012035e <test_kfree+0xced>
f0120347:	83 ec 04             	sub    $0x4,%esp
f012034a:	68 00 b1 13 f0       	push   $0xf013b100
f012034f:	68 4a 05 00 00       	push   $0x54a
f0120354:	68 76 a9 13 f0       	push   $0xf013a976
f0120359:	e8 48 fe fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012035e:	e8 85 c1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120363:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120369:	e8 1e 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012036e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120374:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f012037a:	83 ec 0c             	sub    $0xc,%esp
f012037d:	50                   	push   %eax
f012037e:	e8 5b 72 fe ff       	call   f01075de <kfree>
f0120383:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120386:	e8 01 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012038b:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120391:	74 17                	je     f01203aa <test_kfree+0xd39>
f0120393:	83 ec 04             	sub    $0x4,%esp
f0120396:	68 90 a9 13 f0       	push   $0xf013a990
f012039b:	68 50 05 00 00       	push   $0x550
f01203a0:	68 76 a9 13 f0       	push   $0xf013a976
f01203a5:	e8 fc fd fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01203aa:	e8 39 c1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01203af:	89 c2                	mov    %eax,%edx
f01203b1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01203b7:	29 c2                	sub    %eax,%edx
f01203b9:	89 d0                	mov    %edx,%eax
f01203bb:	3d 00 06 00 00       	cmp    $0x600,%eax
f01203c0:	74 17                	je     f01203d9 <test_kfree+0xd68>
f01203c2:	83 ec 04             	sub    $0x4,%esp
f01203c5:	68 00 b1 13 f0       	push   $0xf013b100
f01203ca:	68 51 05 00 00       	push   $0x551
f01203cf:	68 76 a9 13 f0       	push   $0xf013a976
f01203d4:	e8 cd fd fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01203d9:	83 ec 0c             	sub    $0xc,%esp
f01203dc:	68 38 b1 13 f0       	push   $0xf013b138
f01203e1:	e8 47 08 fe ff       	call   f0100c2d <cprintf>
f01203e6:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01203e9:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01203ef:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01203f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01203f9:	eb 1e                	jmp    f0120419 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f01203fb:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120401:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120404:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120407:	01 c8                	add    %ecx,%eax
f0120409:	8a 00                	mov    (%eax),%al
f012040b:	0f be c0             	movsbl %al,%eax
f012040e:	01 d0                	add    %edx,%eax
f0120410:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120416:	ff 45 f4             	incl   -0xc(%ebp)
f0120419:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012041f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120422:	7f d7                	jg     f01203fb <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120424:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012042a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120430:	89 c1                	mov    %eax,%ecx
f0120432:	01 c9                	add    %ecx,%ecx
f0120434:	01 c8                	add    %ecx,%eax
f0120436:	39 c2                	cmp    %eax,%edx
f0120438:	74 17                	je     f0120451 <test_kfree+0xde0>
f012043a:	83 ec 04             	sub    $0x4,%esp
f012043d:	68 5c b1 13 f0       	push   $0xf013b15c
f0120442:	68 5e 05 00 00       	push   $0x55e
f0120447:	68 76 a9 13 f0       	push   $0xf013a976
f012044c:	e8 55 fd fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120451:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120457:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012045a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120461:	eb 1e                	jmp    f0120481 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120463:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120469:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012046c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012046f:	01 c8                	add    %ecx,%eax
f0120471:	8a 00                	mov    (%eax),%al
f0120473:	0f be c0             	movsbl %al,%eax
f0120476:	01 d0                	add    %edx,%eax
f0120478:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012047e:	ff 45 f4             	incl   -0xc(%ebp)
f0120481:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120487:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012048a:	7f d7                	jg     f0120463 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012048c:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120492:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120498:	c1 e2 02             	shl    $0x2,%edx
f012049b:	39 d0                	cmp    %edx,%eax
f012049d:	74 17                	je     f01204b6 <test_kfree+0xe45>
f012049f:	83 ec 04             	sub    $0x4,%esp
f01204a2:	68 5c b1 13 f0       	push   $0xf013b15c
f01204a7:	68 66 05 00 00       	push   $0x566
f01204ac:	68 76 a9 13 f0       	push   $0xf013a976
f01204b1:	e8 f0 fc fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01204b6:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01204bc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01204bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01204c6:	eb 1e                	jmp    f01204e6 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f01204c8:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f01204ce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01204d1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01204d4:	01 c8                	add    %ecx,%eax
f01204d6:	8a 00                	mov    (%eax),%al
f01204d8:	0f be c0             	movsbl %al,%eax
f01204db:	01 d0                	add    %edx,%eax
f01204dd:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01204e3:	ff 45 f4             	incl   -0xc(%ebp)
f01204e6:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01204ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01204ef:	7f d7                	jg     f01204c8 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01204f1:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f01204f7:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f01204fd:	89 d0                	mov    %edx,%eax
f01204ff:	c1 e0 02             	shl    $0x2,%eax
f0120502:	01 d0                	add    %edx,%eax
f0120504:	39 c1                	cmp    %eax,%ecx
f0120506:	74 17                	je     f012051f <test_kfree+0xeae>
f0120508:	83 ec 04             	sub    $0x4,%esp
f012050b:	68 5c b1 13 f0       	push   $0xf013b15c
f0120510:	68 6e 05 00 00       	push   $0x56e
f0120515:	68 76 a9 13 f0       	push   $0xf013a976
f012051a:	e8 87 fc fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012051f:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120525:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120528:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012052f:	eb 1e                	jmp    f012054f <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0120531:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0120537:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012053a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012053d:	01 c8                	add    %ecx,%eax
f012053f:	8a 00                	mov    (%eax),%al
f0120541:	0f be c0             	movsbl %al,%eax
f0120544:	01 d0                	add    %edx,%eax
f0120546:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012054c:	ff 45 f4             	incl   -0xc(%ebp)
f012054f:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120555:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120558:	7f d7                	jg     f0120531 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012055a:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0120560:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f0120566:	89 d0                	mov    %edx,%eax
f0120568:	01 c0                	add    %eax,%eax
f012056a:	01 d0                	add    %edx,%eax
f012056c:	01 c0                	add    %eax,%eax
f012056e:	01 d0                	add    %edx,%eax
f0120570:	39 c1                	cmp    %eax,%ecx
f0120572:	74 17                	je     f012058b <test_kfree+0xf1a>
f0120574:	83 ec 04             	sub    $0x4,%esp
f0120577:	68 5c b1 13 f0       	push   $0xf013b15c
f012057c:	68 76 05 00 00       	push   $0x576
f0120581:	68 76 a9 13 f0       	push   $0xf013a976
f0120586:	e8 1b fc fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f012058b:	83 ec 0c             	sub    $0xc,%esp
f012058e:	68 8f b1 13 f0       	push   $0xf013b18f
f0120593:	e8 95 06 fe ff       	call   f0100c2d <cprintf>
f0120598:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012059b:	e8 48 bf fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01205a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01205a3:	e8 e4 36 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01205a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01205ab:	83 ec 0c             	sub    $0xc,%esp
f01205ae:	68 00 50 00 00       	push   $0x5000
f01205b3:	e8 0c 70 fe ff       	call   f01075c4 <kmalloc>
f01205b8:	83 c4 10             	add    $0x10,%esp
f01205bb:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01205c1:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01205c7:	89 c1                	mov    %eax,%ecx
f01205c9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01205d0:	10 00 00 
f01205d3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01205d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01205de:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01205e4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01205ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01205ef:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01205f5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01205fb:	29 d0                	sub    %edx,%eax
f01205fd:	89 c3                	mov    %eax,%ebx
f01205ff:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0120606:	10 00 00 
f0120609:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012060e:	0f b6 d0             	movzbl %al,%edx
f0120611:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120617:	01 d0                	add    %edx,%eax
f0120619:	48                   	dec    %eax
f012061a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0120620:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120626:	ba 00 00 00 00       	mov    $0x0,%edx
f012062b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0120631:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120637:	29 d0                	sub    %edx,%eax
f0120639:	01 c3                	add    %eax,%ebx
f012063b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0120642:	10 00 00 
f0120645:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012064a:	0f b6 c0             	movzbl %al,%eax
f012064d:	c1 e0 04             	shl    $0x4,%eax
f0120650:	89 c2                	mov    %eax,%edx
f0120652:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120658:	01 d0                	add    %edx,%eax
f012065a:	48                   	dec    %eax
f012065b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0120661:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120667:	ba 00 00 00 00       	mov    $0x0,%edx
f012066c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0120672:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120678:	29 d0                	sub    %edx,%eax
f012067a:	01 d8                	add    %ebx,%eax
f012067c:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120681:	39 c1                	cmp    %eax,%ecx
f0120683:	74 17                	je     f012069c <test_kfree+0x102b>
f0120685:	83 ec 04             	sub    $0x4,%esp
f0120688:	68 5c aa 13 f0       	push   $0xf013aa5c
f012068d:	68 80 05 00 00       	push   $0x580
f0120692:	68 76 a9 13 f0       	push   $0xf013a976
f0120697:	e8 0a fb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012069c:	e8 eb 35 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01206a1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01206a4:	74 17                	je     f01206bd <test_kfree+0x104c>
f01206a6:	83 ec 04             	sub    $0x4,%esp
f01206a9:	68 90 a9 13 f0       	push   $0xf013a990
f01206ae:	68 81 05 00 00       	push   $0x581
f01206b3:	68 76 a9 13 f0       	push   $0xf013a976
f01206b8:	e8 e9 fa fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01206bd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01206c0:	e8 23 be fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01206c5:	29 c3                	sub    %eax,%ebx
f01206c7:	89 d8                	mov    %ebx,%eax
f01206c9:	83 f8 05             	cmp    $0x5,%eax
f01206cc:	74 17                	je     f01206e5 <test_kfree+0x1074>
f01206ce:	83 ec 04             	sub    $0x4,%esp
f01206d1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01206d6:	68 82 05 00 00       	push   $0x582
f01206db:	68 76 a9 13 f0       	push   $0xf013a976
f01206e0:	e8 c1 fa fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01206e5:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f01206ec:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01206ef:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01206f5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01206f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01206ff:	eb 0e                	jmp    f012070f <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0120701:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120704:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120707:	01 d0                	add    %edx,%eax
f0120709:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012070c:	ff 45 f4             	incl   -0xc(%ebp)
f012070f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0120715:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120718:	7f e7                	jg     f0120701 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012071a:	e8 c9 bd fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012071f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120722:	e8 65 35 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120727:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012072a:	83 ec 0c             	sub    $0xc,%esp
f012072d:	68 00 00 10 00       	push   $0x100000
f0120732:	e8 8d 6e fe ff       	call   f01075c4 <kmalloc>
f0120737:	83 c4 10             	add    $0x10,%esp
f012073a:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120740:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120746:	89 c1                	mov    %eax,%ecx
f0120748:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012074f:	10 00 00 
f0120752:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120758:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012075d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0120763:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120769:	ba 00 00 00 00       	mov    $0x0,%edx
f012076e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0120774:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012077a:	29 d0                	sub    %edx,%eax
f012077c:	89 c3                	mov    %eax,%ebx
f012077e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0120785:	10 00 00 
f0120788:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012078d:	0f b6 d0             	movzbl %al,%edx
f0120790:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120796:	01 d0                	add    %edx,%eax
f0120798:	48                   	dec    %eax
f0120799:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012079f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01207a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01207aa:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01207b0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01207b6:	29 d0                	sub    %edx,%eax
f01207b8:	01 c3                	add    %eax,%ebx
f01207ba:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01207c1:	10 00 00 
f01207c4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01207c9:	0f b6 c0             	movzbl %al,%eax
f01207cc:	c1 e0 04             	shl    $0x4,%eax
f01207cf:	89 c2                	mov    %eax,%edx
f01207d1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01207d7:	01 d0                	add    %edx,%eax
f01207d9:	48                   	dec    %eax
f01207da:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01207e0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01207e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01207eb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01207f1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01207f7:	29 d0                	sub    %edx,%eax
f01207f9:	01 d8                	add    %ebx,%eax
f01207fb:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120800:	39 c1                	cmp    %eax,%ecx
f0120802:	74 17                	je     f012081b <test_kfree+0x11aa>
f0120804:	83 ec 04             	sub    $0x4,%esp
f0120807:	68 5c aa 13 f0       	push   $0xf013aa5c
f012080c:	68 8e 05 00 00       	push   $0x58e
f0120811:	68 76 a9 13 f0       	push   $0xf013a976
f0120816:	e8 8b f9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012081b:	e8 6c 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120820:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120823:	74 17                	je     f012083c <test_kfree+0x11cb>
f0120825:	83 ec 04             	sub    $0x4,%esp
f0120828:	68 90 a9 13 f0       	push   $0xf013a990
f012082d:	68 8f 05 00 00       	push   $0x58f
f0120832:	68 76 a9 13 f0       	push   $0xf013a976
f0120837:	e8 6a f9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012083c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012083f:	e8 a4 bc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120844:	29 c3                	sub    %eax,%ebx
f0120846:	89 d8                	mov    %ebx,%eax
f0120848:	3d 00 01 00 00       	cmp    $0x100,%eax
f012084d:	74 17                	je     f0120866 <test_kfree+0x11f5>
f012084f:	83 ec 04             	sub    $0x4,%esp
f0120852:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0120857:	68 90 05 00 00       	push   $0x590
f012085c:	68 76 a9 13 f0       	push   $0xf013a976
f0120861:	e8 40 f9 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120866:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f012086d:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120870:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120876:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120879:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120880:	eb 0e                	jmp    f0120890 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0120882:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120885:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120888:	01 d0                	add    %edx,%eax
f012088a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012088d:	ff 45 f4             	incl   -0xc(%ebp)
f0120890:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0120896:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120899:	7f e7                	jg     f0120882 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f012089b:	e8 ac 66 ff ff       	call   f0116f4c <isKHeapPlacementStrategyNEXTFIT>
f01208a0:	84 c0                	test   %al,%al
f01208a2:	0f 84 ac 06 00 00    	je     f0120f54 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01208a8:	e8 3b bc fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01208ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01208b0:	e8 d7 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01208b5:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01208b8:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01208bf:	10 00 00 
f01208c2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01208c8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01208cd:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01208d3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01208d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01208de:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01208e4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01208ea:	29 d0                	sub    %edx,%eax
f01208ec:	89 c1                	mov    %eax,%ecx
f01208ee:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01208f5:	10 00 00 
f01208f8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01208fd:	0f b6 d0             	movzbl %al,%edx
f0120900:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120906:	01 d0                	add    %edx,%eax
f0120908:	48                   	dec    %eax
f0120909:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012090f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120915:	ba 00 00 00 00       	mov    $0x0,%edx
f012091a:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120920:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120926:	29 d0                	sub    %edx,%eax
f0120928:	01 c1                	add    %eax,%ecx
f012092a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120931:	10 00 00 
f0120934:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0120939:	0f b6 c0             	movzbl %al,%eax
f012093c:	c1 e0 04             	shl    $0x4,%eax
f012093f:	89 c2                	mov    %eax,%edx
f0120941:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120947:	01 d0                	add    %edx,%eax
f0120949:	48                   	dec    %eax
f012094a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120950:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120956:	ba 00 00 00 00       	mov    $0x0,%edx
f012095b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120961:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120967:	29 d0                	sub    %edx,%eax
f0120969:	01 c8                	add    %ecx,%eax
f012096b:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120970:	29 c2                	sub    %eax,%edx
f0120972:	89 d0                	mov    %edx,%eax
f0120974:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f012097a:	83 ec 0c             	sub    $0xc,%esp
f012097d:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0120983:	e8 3c 6c fe ff       	call   f01075c4 <kmalloc>
f0120988:	83 c4 10             	add    $0x10,%esp
f012098b:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120991:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120997:	89 c1                	mov    %eax,%ecx
f0120999:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01209a0:	10 00 00 
f01209a3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01209a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01209ae:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01209b4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01209ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01209bf:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01209c5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01209cb:	29 d0                	sub    %edx,%eax
f01209cd:	89 c3                	mov    %eax,%ebx
f01209cf:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01209d6:	10 00 00 
f01209d9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01209de:	0f b6 d0             	movzbl %al,%edx
f01209e1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01209e7:	01 d0                	add    %edx,%eax
f01209e9:	48                   	dec    %eax
f01209ea:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01209f0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01209f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01209fb:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0120a01:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120a07:	29 d0                	sub    %edx,%eax
f0120a09:	01 c3                	add    %eax,%ebx
f0120a0b:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0120a12:	10 00 00 
f0120a15:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0120a1a:	0f b6 c0             	movzbl %al,%eax
f0120a1d:	c1 e0 04             	shl    $0x4,%eax
f0120a20:	89 c2                	mov    %eax,%edx
f0120a22:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0120a28:	01 d0                	add    %edx,%eax
f0120a2a:	48                   	dec    %eax
f0120a2b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120a31:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120a37:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a3c:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120a42:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120a48:	29 d0                	sub    %edx,%eax
f0120a4a:	01 d8                	add    %ebx,%eax
f0120a4c:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120a51:	39 c1                	cmp    %eax,%ecx
f0120a53:	74 17                	je     f0120a6c <test_kfree+0x13fb>
f0120a55:	83 ec 04             	sub    $0x4,%esp
f0120a58:	68 5c aa 13 f0       	push   $0xf013aa5c
f0120a5d:	68 9f 05 00 00       	push   $0x59f
f0120a62:	68 76 a9 13 f0       	push   $0xf013a976
f0120a67:	e8 3a f7 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a6c:	e8 1b 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120a71:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a74:	74 17                	je     f0120a8d <test_kfree+0x141c>
f0120a76:	83 ec 04             	sub    $0x4,%esp
f0120a79:	68 90 a9 13 f0       	push   $0xf013a990
f0120a7e:	68 a0 05 00 00       	push   $0x5a0
f0120a83:	68 76 a9 13 f0       	push   $0xf013a976
f0120a88:	e8 19 f7 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a8d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a90:	e8 53 ba fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120a95:	29 c3                	sub    %eax,%ebx
f0120a97:	89 da                	mov    %ebx,%edx
f0120a99:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120a9f:	c1 e8 0c             	shr    $0xc,%eax
f0120aa2:	39 c2                	cmp    %eax,%edx
f0120aa4:	74 17                	je     f0120abd <test_kfree+0x144c>
f0120aa6:	83 ec 04             	sub    $0x4,%esp
f0120aa9:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0120aae:	68 a1 05 00 00       	push   $0x5a1
f0120ab3:	68 76 a9 13 f0       	push   $0xf013a976
f0120ab8:	e8 e9 f6 fd ff       	call   f01001a6 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120abd:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120ac3:	48                   	dec    %eax
f0120ac4:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120aca:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120ad0:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120ad3:	e8 10 ba fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120ad8:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120adb:	e8 ac 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ae0:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120ae3:	83 ec 0c             	sub    $0xc,%esp
f0120ae6:	68 00 00 30 00       	push   $0x300000
f0120aeb:	e8 d4 6a fe ff       	call   f01075c4 <kmalloc>
f0120af0:	83 c4 10             	add    $0x10,%esp
f0120af3:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120af9:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120aff:	89 c1                	mov    %eax,%ecx
f0120b01:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0120b08:	10 00 00 
f0120b0b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120b11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120b16:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0120b1c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120b22:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b27:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0120b2d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120b33:	29 d0                	sub    %edx,%eax
f0120b35:	89 c3                	mov    %eax,%ebx
f0120b37:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120b3e:	10 00 00 
f0120b41:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0120b46:	0f b6 d0             	movzbl %al,%edx
f0120b49:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120b4f:	01 d0                	add    %edx,%eax
f0120b51:	48                   	dec    %eax
f0120b52:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120b58:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120b5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b63:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120b69:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120b6f:	29 d0                	sub    %edx,%eax
f0120b71:	01 c3                	add    %eax,%ebx
f0120b73:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120b7a:	10 00 00 
f0120b7d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0120b82:	0f b6 c0             	movzbl %al,%eax
f0120b85:	c1 e0 04             	shl    $0x4,%eax
f0120b88:	89 c2                	mov    %eax,%edx
f0120b8a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120b90:	01 d0                	add    %edx,%eax
f0120b92:	48                   	dec    %eax
f0120b93:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120b99:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120b9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ba4:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120baa:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120bb0:	29 d0                	sub    %edx,%eax
f0120bb2:	01 d8                	add    %ebx,%eax
f0120bb4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120bb9:	39 c1                	cmp    %eax,%ecx
f0120bbb:	74 17                	je     f0120bd4 <test_kfree+0x1563>
f0120bbd:	83 ec 04             	sub    $0x4,%esp
f0120bc0:	68 5c aa 13 f0       	push   $0xf013aa5c
f0120bc5:	68 ae 05 00 00       	push   $0x5ae
f0120bca:	68 76 a9 13 f0       	push   $0xf013a976
f0120bcf:	e8 d2 f5 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bd4:	e8 b3 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120bd9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bdc:	74 17                	je     f0120bf5 <test_kfree+0x1584>
f0120bde:	83 ec 04             	sub    $0x4,%esp
f0120be1:	68 90 a9 13 f0       	push   $0xf013a990
f0120be6:	68 af 05 00 00       	push   $0x5af
f0120beb:	68 76 a9 13 f0       	push   $0xf013a976
f0120bf0:	e8 b1 f5 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120bf5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120bf8:	e8 eb b8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120bfd:	29 c3                	sub    %eax,%ebx
f0120bff:	89 d8                	mov    %ebx,%eax
f0120c01:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120c06:	74 17                	je     f0120c1f <test_kfree+0x15ae>
f0120c08:	83 ec 04             	sub    $0x4,%esp
f0120c0b:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0120c10:	68 b0 05 00 00       	push   $0x5b0
f0120c15:	68 76 a9 13 f0       	push   $0xf013a976
f0120c1a:	e8 87 f5 fd ff       	call   f01001a6 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120c1f:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0120c26:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120c29:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120c2f:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120c32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c39:	eb 0e                	jmp    f0120c49 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0120c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120c3e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120c41:	01 d0                	add    %edx,%eax
f0120c43:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120c46:	ff 45 f4             	incl   -0xc(%ebp)
f0120c49:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120c4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c52:	7f e7                	jg     f0120c3b <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120c54:	e8 8f b8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120c59:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c5c:	e8 2b 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c61:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120c64:	83 ec 0c             	sub    $0xc,%esp
f0120c67:	68 00 08 00 00       	push   $0x800
f0120c6c:	e8 53 69 fe ff       	call   f01075c4 <kmalloc>
f0120c71:	83 c4 10             	add    $0x10,%esp
f0120c74:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c7a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120c80:	89 c1                	mov    %eax,%ecx
f0120c82:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120c89:	10 00 00 
f0120c8c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120c92:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120c97:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120c9d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120ca3:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ca8:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120cae:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120cb4:	29 d0                	sub    %edx,%eax
f0120cb6:	89 c3                	mov    %eax,%ebx
f0120cb8:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120cbf:	10 00 00 
f0120cc2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0120cc7:	0f b6 d0             	movzbl %al,%edx
f0120cca:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120cd0:	01 d0                	add    %edx,%eax
f0120cd2:	48                   	dec    %eax
f0120cd3:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120cd9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120cdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ce4:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120cea:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120cf0:	29 d0                	sub    %edx,%eax
f0120cf2:	01 c3                	add    %eax,%ebx
f0120cf4:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120cfb:	10 00 00 
f0120cfe:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0120d03:	0f b6 c0             	movzbl %al,%eax
f0120d06:	c1 e0 04             	shl    $0x4,%eax
f0120d09:	89 c2                	mov    %eax,%edx
f0120d0b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120d11:	01 d0                	add    %edx,%eax
f0120d13:	48                   	dec    %eax
f0120d14:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0120d1a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120d20:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d25:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120d2b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120d31:	29 d0                	sub    %edx,%eax
f0120d33:	01 d8                	add    %ebx,%eax
f0120d35:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120d3a:	39 c1                	cmp    %eax,%ecx
f0120d3c:	74 17                	je     f0120d55 <test_kfree+0x16e4>
f0120d3e:	83 ec 04             	sub    $0x4,%esp
f0120d41:	68 5c aa 13 f0       	push   $0xf013aa5c
f0120d46:	68 bc 05 00 00       	push   $0x5bc
f0120d4b:	68 76 a9 13 f0       	push   $0xf013a976
f0120d50:	e8 51 f4 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d55:	e8 32 2f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120d5a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d5d:	74 17                	je     f0120d76 <test_kfree+0x1705>
f0120d5f:	83 ec 04             	sub    $0x4,%esp
f0120d62:	68 90 a9 13 f0       	push   $0xf013a990
f0120d67:	68 bd 05 00 00       	push   $0x5bd
f0120d6c:	68 76 a9 13 f0       	push   $0xf013a976
f0120d71:	e8 30 f4 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d76:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d79:	e8 6a b7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120d7e:	29 c3                	sub    %eax,%ebx
f0120d80:	89 d8                	mov    %ebx,%eax
f0120d82:	83 f8 01             	cmp    $0x1,%eax
f0120d85:	74 17                	je     f0120d9e <test_kfree+0x172d>
f0120d87:	83 ec 04             	sub    $0x4,%esp
f0120d8a:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0120d8f:	68 be 05 00 00       	push   $0x5be
f0120d94:	68 76 a9 13 f0       	push   $0xf013a976
f0120d99:	e8 08 f4 fd ff       	call   f01001a6 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120d9e:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0120da5:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120da8:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120dae:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120db1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120db8:	eb 0e                	jmp    f0120dc8 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0120dba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120dbd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120dc0:	01 d0                	add    %edx,%eax
f0120dc2:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120dc5:	ff 45 f4             	incl   -0xc(%ebp)
f0120dc8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0120dce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120dd1:	7f e7                	jg     f0120dba <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120dd3:	e8 10 b7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120dd8:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120ddb:	e8 ac 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120de0:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120de3:	83 ec 0c             	sub    $0xc,%esp
f0120de6:	68 00 00 10 00       	push   $0x100000
f0120deb:	e8 d4 67 fe ff       	call   f01075c4 <kmalloc>
f0120df0:	83 c4 10             	add    $0x10,%esp
f0120df3:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120df9:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120dff:	89 c1                	mov    %eax,%ecx
f0120e01:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0120e08:	10 00 00 
f0120e0b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0120e11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e16:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0120e1c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120e22:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e27:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0120e2d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120e33:	29 d0                	sub    %edx,%eax
f0120e35:	89 c3                	mov    %eax,%ebx
f0120e37:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120e3e:	10 00 00 
f0120e41:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0120e46:	0f b6 d0             	movzbl %al,%edx
f0120e49:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0120e4f:	01 d0                	add    %edx,%eax
f0120e51:	48                   	dec    %eax
f0120e52:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120e58:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120e5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e63:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0120e69:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120e6f:	29 d0                	sub    %edx,%eax
f0120e71:	01 c3                	add    %eax,%ebx
f0120e73:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0120e7a:	10 00 00 
f0120e7d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0120e82:	0f b6 c0             	movzbl %al,%eax
f0120e85:	c1 e0 04             	shl    $0x4,%eax
f0120e88:	89 c2                	mov    %eax,%edx
f0120e8a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0120e90:	01 d0                	add    %edx,%eax
f0120e92:	48                   	dec    %eax
f0120e93:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0120e99:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120e9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ea4:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0120eaa:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120eb0:	29 d0                	sub    %edx,%eax
f0120eb2:	01 d8                	add    %ebx,%eax
f0120eb4:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120eb9:	39 c1                	cmp    %eax,%ecx
f0120ebb:	74 17                	je     f0120ed4 <test_kfree+0x1863>
f0120ebd:	83 ec 04             	sub    $0x4,%esp
f0120ec0:	68 5c aa 13 f0       	push   $0xf013aa5c
f0120ec5:	68 ca 05 00 00       	push   $0x5ca
f0120eca:	68 76 a9 13 f0       	push   $0xf013a976
f0120ecf:	e8 d2 f2 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ed4:	e8 b3 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ed9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120edc:	74 17                	je     f0120ef5 <test_kfree+0x1884>
f0120ede:	83 ec 04             	sub    $0x4,%esp
f0120ee1:	68 90 a9 13 f0       	push   $0xf013a990
f0120ee6:	68 cb 05 00 00       	push   $0x5cb
f0120eeb:	68 76 a9 13 f0       	push   $0xf013a976
f0120ef0:	e8 b1 f2 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ef5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ef8:	e8 eb b5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120efd:	29 c3                	sub    %eax,%ebx
f0120eff:	89 d8                	mov    %ebx,%eax
f0120f01:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120f06:	74 17                	je     f0120f1f <test_kfree+0x18ae>
f0120f08:	83 ec 04             	sub    $0x4,%esp
f0120f0b:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0120f10:	68 cc 05 00 00       	push   $0x5cc
f0120f15:	68 76 a9 13 f0       	push   $0xf013a976
f0120f1a:	e8 87 f2 fd ff       	call   f01001a6 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120f1f:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0120f26:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120f29:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120f2f:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120f32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f39:	eb 0e                	jmp    f0120f49 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0120f3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120f3e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f41:	01 d0                	add    %edx,%eax
f0120f43:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120f46:	ff 45 f4             	incl   -0xc(%ebp)
f0120f49:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0120f4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f52:	7f e7                	jg     f0120f3b <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120f54:	83 ec 0c             	sub    $0xc,%esp
f0120f57:	68 96 b1 13 f0       	push   $0xf013b196
f0120f5c:	e8 cc fc fd ff       	call   f0100c2d <cprintf>
f0120f61:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120f64:	e8 7f b5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120f69:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f6c:	e8 1b 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f71:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120f74:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120f7a:	83 ec 0c             	sub    $0xc,%esp
f0120f7d:	50                   	push   %eax
f0120f7e:	e8 5b 66 fe ff       	call   f01075de <kfree>
f0120f83:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f86:	e8 01 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f8b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f8e:	74 17                	je     f0120fa7 <test_kfree+0x1936>
f0120f90:	83 ec 04             	sub    $0x4,%esp
f0120f93:	68 90 a9 13 f0       	push   $0xf013a990
f0120f98:	68 dd 05 00 00       	push   $0x5dd
f0120f9d:	68 76 a9 13 f0       	push   $0xf013a976
f0120fa2:	e8 ff f1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fa7:	e8 3c b5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120fac:	89 c2                	mov    %eax,%edx
f0120fae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fb1:	29 c2                	sub    %eax,%edx
f0120fb3:	89 d0                	mov    %edx,%eax
f0120fb5:	83 f8 02             	cmp    $0x2,%eax
f0120fb8:	74 17                	je     f0120fd1 <test_kfree+0x1960>
f0120fba:	83 ec 04             	sub    $0x4,%esp
f0120fbd:	68 00 b1 13 f0       	push   $0xf013b100
f0120fc2:	68 de 05 00 00       	push   $0x5de
f0120fc7:	68 76 a9 13 f0       	push   $0xf013a976
f0120fcc:	e8 d5 f1 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120fd1:	e8 12 b5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0120fd6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120fd9:	e8 ae 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120fde:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120fe1:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120fe7:	83 ec 0c             	sub    $0xc,%esp
f0120fea:	50                   	push   %eax
f0120feb:	e8 ee 65 fe ff       	call   f01075de <kfree>
f0120ff0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ff3:	e8 94 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ff8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ffb:	74 17                	je     f0121014 <test_kfree+0x19a3>
f0120ffd:	83 ec 04             	sub    $0x4,%esp
f0121000:	68 90 a9 13 f0       	push   $0xf013a990
f0121005:	68 e4 05 00 00       	push   $0x5e4
f012100a:	68 76 a9 13 f0       	push   $0xf013a976
f012100f:	e8 92 f1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121014:	e8 cf b4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121019:	89 c2                	mov    %eax,%edx
f012101b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012101e:	29 c2                	sub    %eax,%edx
f0121020:	89 d0                	mov    %edx,%eax
f0121022:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121027:	74 17                	je     f0121040 <test_kfree+0x19cf>
f0121029:	83 ec 04             	sub    $0x4,%esp
f012102c:	68 00 b1 13 f0       	push   $0xf013b100
f0121031:	68 e5 05 00 00       	push   $0x5e5
f0121036:	68 76 a9 13 f0       	push   $0xf013a976
f012103b:	e8 66 f1 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121040:	e8 a3 b4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121045:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121048:	e8 3f 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012104d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121050:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121056:	83 ec 0c             	sub    $0xc,%esp
f0121059:	50                   	push   %eax
f012105a:	e8 7f 65 fe ff       	call   f01075de <kfree>
f012105f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121062:	e8 25 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121067:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012106a:	74 17                	je     f0121083 <test_kfree+0x1a12>
f012106c:	83 ec 04             	sub    $0x4,%esp
f012106f:	68 90 a9 13 f0       	push   $0xf013a990
f0121074:	68 eb 05 00 00       	push   $0x5eb
f0121079:	68 76 a9 13 f0       	push   $0xf013a976
f012107e:	e8 23 f1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121083:	e8 60 b4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121088:	89 c2                	mov    %eax,%edx
f012108a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012108d:	29 c2                	sub    %eax,%edx
f012108f:	89 d0                	mov    %edx,%eax
f0121091:	83 f8 01             	cmp    $0x1,%eax
f0121094:	74 17                	je     f01210ad <test_kfree+0x1a3c>
f0121096:	83 ec 04             	sub    $0x4,%esp
f0121099:	68 00 b1 13 f0       	push   $0xf013b100
f012109e:	68 ec 05 00 00       	push   $0x5ec
f01210a3:	68 76 a9 13 f0       	push   $0xf013a976
f01210a8:	e8 f9 f0 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01210ad:	e8 36 b4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01210b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01210b5:	e8 d2 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01210ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01210bd:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01210c3:	83 ec 0c             	sub    $0xc,%esp
f01210c6:	50                   	push   %eax
f01210c7:	e8 12 65 fe ff       	call   f01075de <kfree>
f01210cc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01210cf:	e8 b8 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01210d4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01210d7:	74 17                	je     f01210f0 <test_kfree+0x1a7f>
f01210d9:	83 ec 04             	sub    $0x4,%esp
f01210dc:	68 90 a9 13 f0       	push   $0xf013a990
f01210e1:	68 f2 05 00 00       	push   $0x5f2
f01210e6:	68 76 a9 13 f0       	push   $0xf013a976
f01210eb:	e8 b6 f0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01210f0:	e8 f3 b3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01210f5:	89 c2                	mov    %eax,%edx
f01210f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210fa:	29 c2                	sub    %eax,%edx
f01210fc:	89 d0                	mov    %edx,%eax
f01210fe:	83 f8 04             	cmp    $0x4,%eax
f0121101:	74 17                	je     f012111a <test_kfree+0x1aa9>
f0121103:	83 ec 04             	sub    $0x4,%esp
f0121106:	68 00 b1 13 f0       	push   $0xf013b100
f012110b:	68 f3 05 00 00       	push   $0x5f3
f0121110:	68 76 a9 13 f0       	push   $0xf013a976
f0121115:	e8 8c f0 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012111a:	e8 c9 b3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012111f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121122:	e8 65 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121127:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012112a:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121130:	83 ec 0c             	sub    $0xc,%esp
f0121133:	50                   	push   %eax
f0121134:	e8 a5 64 fe ff       	call   f01075de <kfree>
f0121139:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012113c:	e8 4b 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121141:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121144:	74 17                	je     f012115d <test_kfree+0x1aec>
f0121146:	83 ec 04             	sub    $0x4,%esp
f0121149:	68 90 a9 13 f0       	push   $0xf013a990
f012114e:	68 f9 05 00 00       	push   $0x5f9
f0121153:	68 76 a9 13 f0       	push   $0xf013a976
f0121158:	e8 49 f0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f012115d:	e8 86 b3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121162:	89 c2                	mov    %eax,%edx
f0121164:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121167:	29 c2                	sub    %eax,%edx
f0121169:	89 d0                	mov    %edx,%eax
f012116b:	83 f8 05             	cmp    $0x5,%eax
f012116e:	74 17                	je     f0121187 <test_kfree+0x1b16>
f0121170:	83 ec 04             	sub    $0x4,%esp
f0121173:	68 00 b1 13 f0       	push   $0xf013b100
f0121178:	68 fa 05 00 00       	push   $0x5fa
f012117d:	68 76 a9 13 f0       	push   $0xf013a976
f0121182:	e8 1f f0 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121187:	e8 5c b3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012118c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012118f:	e8 f8 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121194:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121197:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012119d:	83 ec 0c             	sub    $0xc,%esp
f01211a0:	50                   	push   %eax
f01211a1:	e8 38 64 fe ff       	call   f01075de <kfree>
f01211a6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211a9:	e8 de 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01211ae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211b1:	74 17                	je     f01211ca <test_kfree+0x1b59>
f01211b3:	83 ec 04             	sub    $0x4,%esp
f01211b6:	68 90 a9 13 f0       	push   $0xf013a990
f01211bb:	68 00 06 00 00       	push   $0x600
f01211c0:	68 76 a9 13 f0       	push   $0xf013a976
f01211c5:	e8 dc ef fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01211ca:	e8 19 b3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01211cf:	89 c2                	mov    %eax,%edx
f01211d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211d4:	29 c2                	sub    %eax,%edx
f01211d6:	89 d0                	mov    %edx,%eax
f01211d8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01211dd:	74 17                	je     f01211f6 <test_kfree+0x1b85>
f01211df:	83 ec 04             	sub    $0x4,%esp
f01211e2:	68 00 b1 13 f0       	push   $0xf013b100
f01211e7:	68 01 06 00 00       	push   $0x601
f01211ec:	68 76 a9 13 f0       	push   $0xf013a976
f01211f1:	e8 b0 ef fd ff       	call   f01001a6 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f01211f6:	e8 51 5d ff ff       	call   f0116f4c <isKHeapPlacementStrategyNEXTFIT>
f01211fb:	84 c0                	test   %al,%al
f01211fd:	0f 84 80 02 00 00    	je     f0121483 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121203:	e8 e0 b2 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121208:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012120b:	e8 7c 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121210:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121213:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121219:	83 ec 0c             	sub    $0xc,%esp
f012121c:	50                   	push   %eax
f012121d:	e8 bc 63 fe ff       	call   f01075de <kfree>
f0121222:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121225:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f012122c:	10 00 00 
f012122f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0121235:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012123a:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121240:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121246:	ba 00 00 00 00       	mov    $0x0,%edx
f012124b:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121251:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121257:	29 d0                	sub    %edx,%eax
f0121259:	89 c1                	mov    %eax,%ecx
f012125b:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121262:	10 00 00 
f0121265:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012126a:	0f b6 d0             	movzbl %al,%edx
f012126d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121273:	01 d0                	add    %edx,%eax
f0121275:	48                   	dec    %eax
f0121276:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f012127c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121282:	ba 00 00 00 00       	mov    $0x0,%edx
f0121287:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f012128d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121293:	29 d0                	sub    %edx,%eax
f0121295:	01 c1                	add    %eax,%ecx
f0121297:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f012129e:	10 00 00 
f01212a1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01212a6:	0f b6 c0             	movzbl %al,%eax
f01212a9:	c1 e0 04             	shl    $0x4,%eax
f01212ac:	89 c2                	mov    %eax,%edx
f01212ae:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01212b4:	01 d0                	add    %edx,%eax
f01212b6:	48                   	dec    %eax
f01212b7:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01212bd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01212c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01212c8:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01212ce:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01212d4:	29 d0                	sub    %edx,%eax
f01212d6:	01 c8                	add    %ecx,%eax
f01212d8:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01212dd:	29 c2                	sub    %eax,%edx
f01212df:	89 d0                	mov    %edx,%eax
f01212e1:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212e7:	e8 a0 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01212ec:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212ef:	74 17                	je     f0121308 <test_kfree+0x1c97>
f01212f1:	83 ec 04             	sub    $0x4,%esp
f01212f4:	68 90 a9 13 f0       	push   $0xf013a990
f01212f9:	68 0b 06 00 00       	push   $0x60b
f01212fe:	68 76 a9 13 f0       	push   $0xf013a976
f0121303:	e8 9e ee fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121308:	e8 db b1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012130d:	89 c2                	mov    %eax,%edx
f012130f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121312:	29 c2                	sub    %eax,%edx
f0121314:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012131a:	c1 e8 0c             	shr    $0xc,%eax
f012131d:	39 c2                	cmp    %eax,%edx
f012131f:	74 17                	je     f0121338 <test_kfree+0x1cc7>
f0121321:	83 ec 04             	sub    $0x4,%esp
f0121324:	68 00 b1 13 f0       	push   $0xf013b100
f0121329:	68 0c 06 00 00       	push   $0x60c
f012132e:	68 76 a9 13 f0       	push   $0xf013a976
f0121333:	e8 6e ee fd ff       	call   f01001a6 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121338:	e8 ab b1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012133d:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121340:	e8 47 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121345:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121348:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012134e:	83 ec 0c             	sub    $0xc,%esp
f0121351:	50                   	push   %eax
f0121352:	e8 87 62 fe ff       	call   f01075de <kfree>
f0121357:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012135a:	e8 2d 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012135f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121362:	74 17                	je     f012137b <test_kfree+0x1d0a>
f0121364:	83 ec 04             	sub    $0x4,%esp
f0121367:	68 90 a9 13 f0       	push   $0xf013a990
f012136c:	68 12 06 00 00       	push   $0x612
f0121371:	68 76 a9 13 f0       	push   $0xf013a976
f0121376:	e8 2b ee fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012137b:	e8 68 b1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121380:	89 c2                	mov    %eax,%edx
f0121382:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121385:	29 c2                	sub    %eax,%edx
f0121387:	89 d0                	mov    %edx,%eax
f0121389:	3d 00 03 00 00       	cmp    $0x300,%eax
f012138e:	74 17                	je     f01213a7 <test_kfree+0x1d36>
f0121390:	83 ec 04             	sub    $0x4,%esp
f0121393:	68 00 b1 13 f0       	push   $0xf013b100
f0121398:	68 13 06 00 00       	push   $0x613
f012139d:	68 76 a9 13 f0       	push   $0xf013a976
f01213a2:	e8 ff ed fd ff       	call   f01001a6 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f01213a7:	e8 3c b1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01213ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01213af:	e8 d8 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01213b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f01213b7:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01213bd:	83 ec 0c             	sub    $0xc,%esp
f01213c0:	50                   	push   %eax
f01213c1:	e8 18 62 fe ff       	call   f01075de <kfree>
f01213c6:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213c9:	e8 be 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01213ce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01213d1:	74 17                	je     f01213ea <test_kfree+0x1d79>
f01213d3:	83 ec 04             	sub    $0x4,%esp
f01213d6:	68 90 a9 13 f0       	push   $0xf013a990
f01213db:	68 19 06 00 00       	push   $0x619
f01213e0:	68 76 a9 13 f0       	push   $0xf013a976
f01213e5:	e8 bc ed fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01213ea:	e8 f9 b0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01213ef:	89 c2                	mov    %eax,%edx
f01213f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01213f4:	29 c2                	sub    %eax,%edx
f01213f6:	89 d0                	mov    %edx,%eax
f01213f8:	83 f8 01             	cmp    $0x1,%eax
f01213fb:	74 17                	je     f0121414 <test_kfree+0x1da3>
f01213fd:	83 ec 04             	sub    $0x4,%esp
f0121400:	68 00 b1 13 f0       	push   $0xf013b100
f0121405:	68 1a 06 00 00       	push   $0x61a
f012140a:	68 76 a9 13 f0       	push   $0xf013a976
f012140f:	e8 92 ed fd ff       	call   f01001a6 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121414:	e8 cf b0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121419:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012141c:	e8 6b 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121421:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121424:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012142a:	83 ec 0c             	sub    $0xc,%esp
f012142d:	50                   	push   %eax
f012142e:	e8 ab 61 fe ff       	call   f01075de <kfree>
f0121433:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121436:	e8 51 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012143b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012143e:	74 17                	je     f0121457 <test_kfree+0x1de6>
f0121440:	83 ec 04             	sub    $0x4,%esp
f0121443:	68 90 a9 13 f0       	push   $0xf013a990
f0121448:	68 20 06 00 00       	push   $0x620
f012144d:	68 76 a9 13 f0       	push   $0xf013a976
f0121452:	e8 4f ed fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121457:	e8 8c b0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012145c:	89 c2                	mov    %eax,%edx
f012145e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121461:	29 c2                	sub    %eax,%edx
f0121463:	89 d0                	mov    %edx,%eax
f0121465:	3d 00 01 00 00       	cmp    $0x100,%eax
f012146a:	74 17                	je     f0121483 <test_kfree+0x1e12>
f012146c:	83 ec 04             	sub    $0x4,%esp
f012146f:	68 00 b1 13 f0       	push   $0xf013b100
f0121474:	68 21 06 00 00       	push   $0x621
f0121479:	68 76 a9 13 f0       	push   $0xf013a976
f012147e:	e8 23 ed fd ff       	call   f01001a6 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121483:	e8 60 b0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121488:	89 c2                	mov    %eax,%edx
f012148a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012148d:	39 c2                	cmp    %eax,%edx
f012148f:	74 17                	je     f01214a8 <test_kfree+0x1e37>
f0121491:	83 ec 04             	sub    $0x4,%esp
f0121494:	68 a0 b1 13 f0       	push   $0xf013b1a0
f0121499:	68 24 06 00 00       	push   $0x624
f012149e:	68 76 a9 13 f0       	push   $0xf013a976
f01214a3:	e8 fe ec fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f01214a8:	83 ec 0c             	sub    $0xc,%esp
f01214ab:	68 d4 b1 13 f0       	push   $0xf013b1d4
f01214b0:	e8 78 f7 fd ff       	call   f0100c2d <cprintf>
f01214b5:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01214b8:	83 ec 0c             	sub    $0xc,%esp
f01214bb:	6a 03                	push   $0x3
f01214bd:	e8 cf b4 fe ff       	call   f010c991 <sys_bypassPageFault>
f01214c2:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01214c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01214cc:	e9 82 00 00 00       	jmp    f0121553 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f01214d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01214d4:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f01214db:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01214de:	8b 45 80             	mov    -0x80(%ebp),%eax
f01214e1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01214e4:	e8 96 b4 fe ff       	call   f010c97f <sys_rcr2>
f01214e9:	89 c2                	mov    %eax,%edx
f01214eb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01214ee:	39 c2                	cmp    %eax,%edx
f01214f0:	74 17                	je     f0121509 <test_kfree+0x1e98>
f01214f2:	83 ec 04             	sub    $0x4,%esp
f01214f5:	68 dc b1 13 f0       	push   $0xf013b1dc
f01214fa:	68 33 06 00 00       	push   $0x633
f01214ff:	68 76 a9 13 f0       	push   $0xf013a976
f0121504:	e8 9d ec fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0121509:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012150c:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121513:	89 c2                	mov    %eax,%edx
f0121515:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121518:	01 d0                	add    %edx,%eax
f012151a:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012151d:	e8 5d b4 fe ff       	call   f010c97f <sys_rcr2>
f0121522:	89 c2                	mov    %eax,%edx
f0121524:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121527:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012152e:	89 c1                	mov    %eax,%ecx
f0121530:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121533:	01 c8                	add    %ecx,%eax
f0121535:	39 c2                	cmp    %eax,%edx
f0121537:	74 17                	je     f0121550 <test_kfree+0x1edf>
f0121539:	83 ec 04             	sub    $0x4,%esp
f012153c:	68 dc b1 13 f0       	push   $0xf013b1dc
f0121541:	68 35 06 00 00       	push   $0x635
f0121546:	68 76 a9 13 f0       	push   $0xf013a976
f012154b:	e8 56 ec fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121550:	ff 45 f4             	incl   -0xc(%ebp)
f0121553:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121557:	0f 8e 74 ff ff ff    	jle    f01214d1 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012155d:	83 ec 0c             	sub    $0xc,%esp
f0121560:	6a 00                	push   $0x0
f0121562:	e8 2a b4 fe ff       	call   f010c991 <sys_bypassPageFault>
f0121567:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012156a:	83 ec 0c             	sub    $0xc,%esp
f012156d:	68 21 b2 13 f0       	push   $0xf013b221
f0121572:	e8 b6 f6 fd ff       	call   f0100c2d <cprintf>
f0121577:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012157a:	e8 69 af fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012157f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121582:	e8 05 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121587:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012158a:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121590:	83 ec 0c             	sub    $0xc,%esp
f0121593:	50                   	push   %eax
f0121594:	e8 45 60 fe ff       	call   f01075de <kfree>
f0121599:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012159c:	e8 eb 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01215a1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215a4:	74 17                	je     f01215bd <test_kfree+0x1f4c>
f01215a6:	83 ec 04             	sub    $0x4,%esp
f01215a9:	68 90 a9 13 f0       	push   $0xf013a990
f01215ae:	68 43 06 00 00       	push   $0x643
f01215b3:	68 76 a9 13 f0       	push   $0xf013a976
f01215b8:	e8 e9 eb fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01215bd:	e8 26 af fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01215c2:	89 c2                	mov    %eax,%edx
f01215c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01215c7:	39 c2                	cmp    %eax,%edx
f01215c9:	74 17                	je     f01215e2 <test_kfree+0x1f71>
f01215cb:	83 ec 04             	sub    $0x4,%esp
f01215ce:	68 28 b2 13 f0       	push   $0xf013b228
f01215d3:	68 44 06 00 00       	push   $0x644
f01215d8:	68 76 a9 13 f0       	push   $0xf013a976
f01215dd:	e8 c4 eb fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01215e2:	e8 01 af fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01215e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01215ea:	e8 9d 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01215ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01215f2:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01215f8:	83 ec 0c             	sub    $0xc,%esp
f01215fb:	50                   	push   %eax
f01215fc:	e8 dd 5f fe ff       	call   f01075de <kfree>
f0121601:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121604:	e8 83 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121609:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012160c:	74 17                	je     f0121625 <test_kfree+0x1fb4>
f012160e:	83 ec 04             	sub    $0x4,%esp
f0121611:	68 90 a9 13 f0       	push   $0xf013a990
f0121616:	68 4a 06 00 00       	push   $0x64a
f012161b:	68 76 a9 13 f0       	push   $0xf013a976
f0121620:	e8 81 eb fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121625:	e8 be ae fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012162a:	89 c2                	mov    %eax,%edx
f012162c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012162f:	39 c2                	cmp    %eax,%edx
f0121631:	74 17                	je     f012164a <test_kfree+0x1fd9>
f0121633:	83 ec 04             	sub    $0x4,%esp
f0121636:	68 28 b2 13 f0       	push   $0xf013b228
f012163b:	68 4b 06 00 00       	push   $0x64b
f0121640:	68 76 a9 13 f0       	push   $0xf013a976
f0121645:	e8 5c eb fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012164a:	e8 99 ae fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012164f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121652:	e8 35 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121657:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012165a:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121660:	83 ec 0c             	sub    $0xc,%esp
f0121663:	50                   	push   %eax
f0121664:	e8 75 5f fe ff       	call   f01075de <kfree>
f0121669:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012166c:	e8 1b 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121671:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121674:	74 17                	je     f012168d <test_kfree+0x201c>
f0121676:	83 ec 04             	sub    $0x4,%esp
f0121679:	68 90 a9 13 f0       	push   $0xf013a990
f012167e:	68 51 06 00 00       	push   $0x651
f0121683:	68 76 a9 13 f0       	push   $0xf013a976
f0121688:	e8 19 eb fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012168d:	e8 56 ae fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121692:	89 c2                	mov    %eax,%edx
f0121694:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121697:	39 c2                	cmp    %eax,%edx
f0121699:	74 17                	je     f01216b2 <test_kfree+0x2041>
f012169b:	83 ec 04             	sub    $0x4,%esp
f012169e:	68 28 b2 13 f0       	push   $0xf013b228
f01216a3:	68 52 06 00 00       	push   $0x652
f01216a8:	68 76 a9 13 f0       	push   $0xf013a976
f01216ad:	e8 f4 ea fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01216b2:	e8 31 ae fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01216b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01216ba:	e8 cd 25 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01216bf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01216c2:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01216c8:	83 ec 0c             	sub    $0xc,%esp
f01216cb:	50                   	push   %eax
f01216cc:	e8 0d 5f fe ff       	call   f01075de <kfree>
f01216d1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01216d4:	e8 b3 25 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01216d9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01216dc:	74 17                	je     f01216f5 <test_kfree+0x2084>
f01216de:	83 ec 04             	sub    $0x4,%esp
f01216e1:	68 90 a9 13 f0       	push   $0xf013a990
f01216e6:	68 58 06 00 00       	push   $0x658
f01216eb:	68 76 a9 13 f0       	push   $0xf013a976
f01216f0:	e8 b1 ea fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01216f5:	e8 ee ad fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01216fa:	89 c2                	mov    %eax,%edx
f01216fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01216ff:	39 c2                	cmp    %eax,%edx
f0121701:	74 17                	je     f012171a <test_kfree+0x20a9>
f0121703:	83 ec 04             	sub    $0x4,%esp
f0121706:	68 28 b2 13 f0       	push   $0xf013b228
f012170b:	68 59 06 00 00       	push   $0x659
f0121710:	68 76 a9 13 f0       	push   $0xf013a976
f0121715:	e8 8c ea fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f012171a:	83 ec 0c             	sub    $0xc,%esp
f012171d:	68 6f b2 13 f0       	push   $0xf013b26f
f0121722:	e8 06 f5 fd ff       	call   f0100c2d <cprintf>
f0121727:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012172a:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121731:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121738:	eb 48                	jmp    f0121782 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012173a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012173d:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0121742:	83 ec 04             	sub    $0x4,%esp
f0121745:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f012174b:	51                   	push   %ecx
f012174c:	52                   	push   %edx
f012174d:	50                   	push   %eax
f012174e:	e8 16 52 fe ff       	call   f0106969 <get_page_table>
f0121753:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121756:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f012175c:	85 c0                	test   %eax,%eax
f012175e:	75 17                	jne    f0121777 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121760:	83 ec 04             	sub    $0x4,%esp
f0121763:	68 78 b2 13 f0       	push   $0xf013b278
f0121768:	68 67 06 00 00       	push   $0x667
f012176d:	68 76 a9 13 f0       	push   $0xf013a976
f0121772:	e8 2f ea fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121777:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012177e:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121782:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121786:	78 b2                	js     f012173a <test_kfree+0x20c9>
f0121788:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012178c:	7f 09                	jg     f0121797 <test_kfree+0x2126>
f012178e:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0121795:	76 a3                	jbe    f012173a <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121797:	83 ec 0c             	sub    $0xc,%esp
f012179a:	68 5a ab 13 f0       	push   $0xf013ab5a
f012179f:	e8 89 f4 fd ff       	call   f0100c2d <cprintf>
f01217a4:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01217a7:	83 ec 0c             	sub    $0xc,%esp
f01217aa:	68 e0 b2 13 f0       	push   $0xf013b2e0
f01217af:	e8 79 f4 fd ff       	call   f0100c2d <cprintf>
f01217b4:	83 c4 10             	add    $0x10,%esp

	return 1;
f01217b7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01217bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01217bf:	5b                   	pop    %ebx
f01217c0:	5f                   	pop    %edi
f01217c1:	5d                   	pop    %ebp
f01217c2:	c3                   	ret    

f01217c3 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01217c3:	55                   	push   %ebp
f01217c4:	89 e5                	mov    %esp,%ebp
f01217c6:	57                   	push   %edi
f01217c7:	53                   	push   %ebx
f01217c8:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f01217ce:	83 ec 0c             	sub    $0xc,%esp
f01217d1:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01217d6:	e8 52 f4 fd ff       	call   f0100c2d <cprintf>
f01217db:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01217de:	83 ec 0c             	sub    $0xc,%esp
f01217e1:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01217e6:	e8 42 f4 fd ff       	call   f0100c2d <cprintf>
f01217eb:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01217ee:	83 ec 0c             	sub    $0xc,%esp
f01217f1:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01217f6:	e8 32 f4 fd ff       	call   f0100c2d <cprintf>
f01217fb:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01217fe:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121802:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121806:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012180c:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121812:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121819:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121820:	e8 c3 ac fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121825:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121828:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f012182e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121833:	b8 00 00 00 00       	mov    $0x0,%eax
f0121838:	89 d7                	mov    %edx,%edi
f012183a:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012183c:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121842:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121847:	b8 00 00 00 00       	mov    $0x0,%eax
f012184c:	89 d7                	mov    %edx,%edi
f012184e:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121850:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121856:	b9 14 00 00 00       	mov    $0x14,%ecx
f012185b:	b8 00 00 00 00       	mov    $0x0,%eax
f0121860:	89 d7                	mov    %edx,%edi
f0121862:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121864:	e8 7f ac fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121869:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012186c:	e8 1b 24 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121871:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121874:	83 ec 0c             	sub    $0xc,%esp
f0121877:	68 00 fc 1f 00       	push   $0x1ffc00
f012187c:	e8 43 5d fe ff       	call   f01075c4 <kmalloc>
f0121881:	83 c4 10             	add    $0x10,%esp
f0121884:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012188a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121890:	89 c1                	mov    %eax,%ecx
f0121892:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121899:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012189c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01218a1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01218a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01218a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01218ac:	f7 75 c8             	divl   -0x38(%ebp)
f01218af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01218b2:	29 d0                	sub    %edx,%eax
f01218b4:	89 c3                	mov    %eax,%ebx
f01218b6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01218bd:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01218c2:	0f b6 d0             	movzbl %al,%edx
f01218c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01218c8:	01 d0                	add    %edx,%eax
f01218ca:	48                   	dec    %eax
f01218cb:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01218ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01218d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01218d6:	f7 75 c0             	divl   -0x40(%ebp)
f01218d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01218dc:	29 d0                	sub    %edx,%eax
f01218de:	01 c3                	add    %eax,%ebx
f01218e0:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01218e7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01218ec:	0f b6 c0             	movzbl %al,%eax
f01218ef:	c1 e0 04             	shl    $0x4,%eax
f01218f2:	89 c2                	mov    %eax,%edx
f01218f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01218f7:	01 d0                	add    %edx,%eax
f01218f9:	48                   	dec    %eax
f01218fa:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01218fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121900:	ba 00 00 00 00       	mov    $0x0,%edx
f0121905:	f7 75 b8             	divl   -0x48(%ebp)
f0121908:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012190b:	29 d0                	sub    %edx,%eax
f012190d:	01 d8                	add    %ebx,%eax
f012190f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121914:	39 c1                	cmp    %eax,%ecx
f0121916:	74 17                	je     f012192f <test_kfree_bestfirstfit+0x16c>
f0121918:	83 ec 04             	sub    $0x4,%esp
f012191b:	68 5c aa 13 f0       	push   $0xf013aa5c
f0121920:	68 95 06 00 00       	push   $0x695
f0121925:	68 76 a9 13 f0       	push   $0xf013a976
f012192a:	e8 77 e8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012192f:	e8 58 23 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121934:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121937:	74 17                	je     f0121950 <test_kfree_bestfirstfit+0x18d>
f0121939:	83 ec 04             	sub    $0x4,%esp
f012193c:	68 90 a9 13 f0       	push   $0xf013a990
f0121941:	68 96 06 00 00       	push   $0x696
f0121946:	68 76 a9 13 f0       	push   $0xf013a976
f012194b:	e8 56 e8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121950:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121953:	e8 90 ab fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121958:	29 c3                	sub    %eax,%ebx
f012195a:	89 d8                	mov    %ebx,%eax
f012195c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121961:	74 17                	je     f012197a <test_kfree_bestfirstfit+0x1b7>
f0121963:	83 ec 04             	sub    $0x4,%esp
f0121966:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012196b:	68 97 06 00 00       	push   $0x697
f0121970:	68 76 a9 13 f0       	push   $0xf013a976
f0121975:	e8 2c e8 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012197a:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121981:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121984:	e8 5f ab fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121989:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012198c:	e8 fb 22 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121991:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121994:	83 ec 0c             	sub    $0xc,%esp
f0121997:	68 00 fc 1f 00       	push   $0x1ffc00
f012199c:	e8 23 5c fe ff       	call   f01075c4 <kmalloc>
f01219a1:	83 c4 10             	add    $0x10,%esp
f01219a4:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01219aa:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01219b0:	89 c1                	mov    %eax,%ecx
f01219b2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01219b9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01219bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01219c1:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01219c4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01219c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01219cc:	f7 75 b0             	divl   -0x50(%ebp)
f01219cf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01219d2:	29 d0                	sub    %edx,%eax
f01219d4:	89 c3                	mov    %eax,%ebx
f01219d6:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01219dd:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01219e2:	0f b6 d0             	movzbl %al,%edx
f01219e5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01219e8:	01 d0                	add    %edx,%eax
f01219ea:	48                   	dec    %eax
f01219eb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01219ee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01219f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01219f6:	f7 75 a8             	divl   -0x58(%ebp)
f01219f9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01219fc:	29 d0                	sub    %edx,%eax
f01219fe:	01 c3                	add    %eax,%ebx
f0121a00:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121a07:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121a0c:	0f b6 c0             	movzbl %al,%eax
f0121a0f:	c1 e0 04             	shl    $0x4,%eax
f0121a12:	89 c2                	mov    %eax,%edx
f0121a14:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121a17:	01 d0                	add    %edx,%eax
f0121a19:	48                   	dec    %eax
f0121a1a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121a1d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121a20:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a25:	f7 75 a0             	divl   -0x60(%ebp)
f0121a28:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121a2b:	29 d0                	sub    %edx,%eax
f0121a2d:	01 d8                	add    %ebx,%eax
f0121a2f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121a34:	39 c1                	cmp    %eax,%ecx
f0121a36:	74 17                	je     f0121a4f <test_kfree_bestfirstfit+0x28c>
f0121a38:	83 ec 04             	sub    $0x4,%esp
f0121a3b:	68 5c aa 13 f0       	push   $0xf013aa5c
f0121a40:	68 9e 06 00 00       	push   $0x69e
f0121a45:	68 76 a9 13 f0       	push   $0xf013a976
f0121a4a:	e8 57 e7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a4f:	e8 38 22 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121a54:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a57:	74 17                	je     f0121a70 <test_kfree_bestfirstfit+0x2ad>
f0121a59:	83 ec 04             	sub    $0x4,%esp
f0121a5c:	68 90 a9 13 f0       	push   $0xf013a990
f0121a61:	68 9f 06 00 00       	push   $0x69f
f0121a66:	68 76 a9 13 f0       	push   $0xf013a976
f0121a6b:	e8 36 e7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a70:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a73:	e8 70 aa fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121a78:	29 c3                	sub    %eax,%ebx
f0121a7a:	89 d8                	mov    %ebx,%eax
f0121a7c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121a81:	74 17                	je     f0121a9a <test_kfree_bestfirstfit+0x2d7>
f0121a83:	83 ec 04             	sub    $0x4,%esp
f0121a86:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0121a8b:	68 a0 06 00 00       	push   $0x6a0
f0121a90:	68 76 a9 13 f0       	push   $0xf013a976
f0121a95:	e8 0c e7 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121a9a:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0121aa1:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121aa4:	e8 3f aa fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121aa9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121aac:	e8 db 21 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ab1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121ab4:	83 ec 0c             	sub    $0xc,%esp
f0121ab7:	68 00 08 00 00       	push   $0x800
f0121abc:	e8 03 5b fe ff       	call   f01075c4 <kmalloc>
f0121ac1:	83 c4 10             	add    $0x10,%esp
f0121ac4:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121aca:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121ad0:	89 c1                	mov    %eax,%ecx
f0121ad2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0121ad9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121adc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121ae1:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0121ae4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121ae7:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aec:	f7 75 98             	divl   -0x68(%ebp)
f0121aef:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121af2:	29 d0                	sub    %edx,%eax
f0121af4:	89 c3                	mov    %eax,%ebx
f0121af6:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0121afd:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121b02:	0f b6 d0             	movzbl %al,%edx
f0121b05:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121b08:	01 d0                	add    %edx,%eax
f0121b0a:	48                   	dec    %eax
f0121b0b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0121b0e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121b11:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b16:	f7 75 90             	divl   -0x70(%ebp)
f0121b19:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121b1c:	29 d0                	sub    %edx,%eax
f0121b1e:	01 c3                	add    %eax,%ebx
f0121b20:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121b27:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121b2c:	0f b6 c0             	movzbl %al,%eax
f0121b2f:	c1 e0 04             	shl    $0x4,%eax
f0121b32:	89 c2                	mov    %eax,%edx
f0121b34:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121b37:	01 d0                	add    %edx,%eax
f0121b39:	48                   	dec    %eax
f0121b3a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121b3d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121b40:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b45:	f7 75 88             	divl   -0x78(%ebp)
f0121b48:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121b4b:	29 d0                	sub    %edx,%eax
f0121b4d:	01 d8                	add    %ebx,%eax
f0121b4f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121b54:	39 c1                	cmp    %eax,%ecx
f0121b56:	74 17                	je     f0121b6f <test_kfree_bestfirstfit+0x3ac>
f0121b58:	83 ec 04             	sub    $0x4,%esp
f0121b5b:	68 5c aa 13 f0       	push   $0xf013aa5c
f0121b60:	68 a7 06 00 00       	push   $0x6a7
f0121b65:	68 76 a9 13 f0       	push   $0xf013a976
f0121b6a:	e8 37 e6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b6f:	e8 18 21 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121b74:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b77:	74 17                	je     f0121b90 <test_kfree_bestfirstfit+0x3cd>
f0121b79:	83 ec 04             	sub    $0x4,%esp
f0121b7c:	68 90 a9 13 f0       	push   $0xf013a990
f0121b81:	68 a8 06 00 00       	push   $0x6a8
f0121b86:	68 76 a9 13 f0       	push   $0xf013a976
f0121b8b:	e8 16 e6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b90:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b93:	e8 50 a9 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121b98:	29 c3                	sub    %eax,%ebx
f0121b9a:	89 d8                	mov    %ebx,%eax
f0121b9c:	83 f8 01             	cmp    $0x1,%eax
f0121b9f:	74 17                	je     f0121bb8 <test_kfree_bestfirstfit+0x3f5>
f0121ba1:	83 ec 04             	sub    $0x4,%esp
f0121ba4:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0121ba9:	68 a9 06 00 00       	push   $0x6a9
f0121bae:	68 76 a9 13 f0       	push   $0xf013a976
f0121bb3:	e8 ee e5 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121bb8:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0121bbf:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121bc2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121bc8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121bcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121bd2:	eb 0e                	jmp    f0121be2 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0121bd4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121bd7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121bda:	01 d0                	add    %edx,%eax
f0121bdc:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121bdf:	ff 45 f4             	incl   -0xc(%ebp)
f0121be2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121be8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121beb:	7f e7                	jg     f0121bd4 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121bed:	e8 f6 a8 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121bf2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121bf5:	e8 92 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121bfa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121bfd:	83 ec 0c             	sub    $0xc,%esp
f0121c00:	68 00 08 00 00       	push   $0x800
f0121c05:	e8 ba 59 fe ff       	call   f01075c4 <kmalloc>
f0121c0a:	83 c4 10             	add    $0x10,%esp
f0121c0d:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c13:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121c19:	89 c1                	mov    %eax,%ecx
f0121c1b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121c22:	10 00 00 
f0121c25:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121c2b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c30:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121c36:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121c3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c41:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121c47:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121c4d:	29 d0                	sub    %edx,%eax
f0121c4f:	89 c3                	mov    %eax,%ebx
f0121c51:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121c58:	10 00 00 
f0121c5b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121c60:	0f b6 d0             	movzbl %al,%edx
f0121c63:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121c69:	01 d0                	add    %edx,%eax
f0121c6b:	48                   	dec    %eax
f0121c6c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121c72:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121c78:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c7d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121c83:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121c89:	29 d0                	sub    %edx,%eax
f0121c8b:	01 c3                	add    %eax,%ebx
f0121c8d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121c94:	10 00 00 
f0121c97:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121c9c:	0f b6 c0             	movzbl %al,%eax
f0121c9f:	c1 e0 04             	shl    $0x4,%eax
f0121ca2:	89 c2                	mov    %eax,%edx
f0121ca4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121caa:	01 d0                	add    %edx,%eax
f0121cac:	48                   	dec    %eax
f0121cad:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121cb3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121cb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cbe:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121cc4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121cca:	29 d0                	sub    %edx,%eax
f0121ccc:	01 d8                	add    %ebx,%eax
f0121cce:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121cd3:	39 c1                	cmp    %eax,%ecx
f0121cd5:	74 17                	je     f0121cee <test_kfree_bestfirstfit+0x52b>
f0121cd7:	83 ec 04             	sub    $0x4,%esp
f0121cda:	68 5c aa 13 f0       	push   $0xf013aa5c
f0121cdf:	68 b5 06 00 00       	push   $0x6b5
f0121ce4:	68 76 a9 13 f0       	push   $0xf013a976
f0121ce9:	e8 b8 e4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cee:	e8 99 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121cf3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cf6:	74 17                	je     f0121d0f <test_kfree_bestfirstfit+0x54c>
f0121cf8:	83 ec 04             	sub    $0x4,%esp
f0121cfb:	68 90 a9 13 f0       	push   $0xf013a990
f0121d00:	68 b6 06 00 00       	push   $0x6b6
f0121d05:	68 76 a9 13 f0       	push   $0xf013a976
f0121d0a:	e8 97 e4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d0f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d12:	e8 d1 a7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121d17:	29 c3                	sub    %eax,%ebx
f0121d19:	89 d8                	mov    %ebx,%eax
f0121d1b:	83 f8 01             	cmp    $0x1,%eax
f0121d1e:	74 17                	je     f0121d37 <test_kfree_bestfirstfit+0x574>
f0121d20:	83 ec 04             	sub    $0x4,%esp
f0121d23:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0121d28:	68 b7 06 00 00       	push   $0x6b7
f0121d2d:	68 76 a9 13 f0       	push   $0xf013a976
f0121d32:	e8 6f e4 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121d37:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0121d3e:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121d41:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121d47:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121d4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d51:	eb 0e                	jmp    f0121d61 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0121d53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d56:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d59:	01 d0                	add    %edx,%eax
f0121d5b:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121d5e:	ff 45 f4             	incl   -0xc(%ebp)
f0121d61:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121d67:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d6a:	7f e7                	jg     f0121d53 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121d6c:	e8 77 a7 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121d71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d74:	e8 13 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121d79:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121d7c:	83 ec 0c             	sub    $0xc,%esp
f0121d7f:	68 00 1c 00 00       	push   $0x1c00
f0121d84:	e8 3b 58 fe ff       	call   f01075c4 <kmalloc>
f0121d89:	83 c4 10             	add    $0x10,%esp
f0121d8c:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121d92:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121d98:	89 c1                	mov    %eax,%ecx
f0121d9a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121da1:	10 00 00 
f0121da4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121daa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121daf:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121db5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121dbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dc0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121dc6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121dcc:	29 d0                	sub    %edx,%eax
f0121dce:	89 c3                	mov    %eax,%ebx
f0121dd0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121dd7:	10 00 00 
f0121dda:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121ddf:	0f b6 d0             	movzbl %al,%edx
f0121de2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121de8:	01 d0                	add    %edx,%eax
f0121dea:	48                   	dec    %eax
f0121deb:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121df1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121df7:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dfc:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121e02:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121e08:	29 d0                	sub    %edx,%eax
f0121e0a:	01 c3                	add    %eax,%ebx
f0121e0c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121e13:	10 00 00 
f0121e16:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121e1b:	0f b6 c0             	movzbl %al,%eax
f0121e1e:	c1 e0 04             	shl    $0x4,%eax
f0121e21:	89 c2                	mov    %eax,%edx
f0121e23:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121e29:	01 d0                	add    %edx,%eax
f0121e2b:	48                   	dec    %eax
f0121e2c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121e32:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121e38:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e3d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121e43:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121e49:	29 d0                	sub    %edx,%eax
f0121e4b:	01 d8                	add    %ebx,%eax
f0121e4d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121e52:	39 c1                	cmp    %eax,%ecx
f0121e54:	74 17                	je     f0121e6d <test_kfree_bestfirstfit+0x6aa>
f0121e56:	83 ec 04             	sub    $0x4,%esp
f0121e59:	68 5c aa 13 f0       	push   $0xf013aa5c
f0121e5e:	68 c3 06 00 00       	push   $0x6c3
f0121e63:	68 76 a9 13 f0       	push   $0xf013a976
f0121e68:	e8 39 e3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e6d:	e8 1a 1e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121e72:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e75:	74 17                	je     f0121e8e <test_kfree_bestfirstfit+0x6cb>
f0121e77:	83 ec 04             	sub    $0x4,%esp
f0121e7a:	68 90 a9 13 f0       	push   $0xf013a990
f0121e7f:	68 c4 06 00 00       	push   $0x6c4
f0121e84:	68 76 a9 13 f0       	push   $0xf013a976
f0121e89:	e8 18 e3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e8e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121e91:	e8 52 a6 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121e96:	29 c3                	sub    %eax,%ebx
f0121e98:	89 d8                	mov    %ebx,%eax
f0121e9a:	83 f8 02             	cmp    $0x2,%eax
f0121e9d:	74 17                	je     f0121eb6 <test_kfree_bestfirstfit+0x6f3>
f0121e9f:	83 ec 04             	sub    $0x4,%esp
f0121ea2:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0121ea7:	68 c5 06 00 00       	push   $0x6c5
f0121eac:	68 76 a9 13 f0       	push   $0xf013a976
f0121eb1:	e8 f0 e2 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121eb6:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0121ebd:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0121ec0:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121ec6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121ec9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ed0:	eb 0e                	jmp    f0121ee0 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0121ed2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ed5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ed8:	01 d0                	add    %edx,%eax
f0121eda:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121edd:	ff 45 f4             	incl   -0xc(%ebp)
f0121ee0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121ee6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ee9:	7f e7                	jg     f0121ed2 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121eeb:	e8 f8 a5 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0121ef0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ef3:	e8 94 1d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ef8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121efb:	83 ec 0c             	sub    $0xc,%esp
f0121efe:	68 00 fc 2f 00       	push   $0x2ffc00
f0121f03:	e8 bc 56 fe ff       	call   f01075c4 <kmalloc>
f0121f08:	83 c4 10             	add    $0x10,%esp
f0121f0b:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f11:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121f17:	89 c1                	mov    %eax,%ecx
f0121f19:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121f20:	10 00 00 
f0121f23:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121f29:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f2e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121f34:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121f3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f3f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121f45:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121f4b:	29 d0                	sub    %edx,%eax
f0121f4d:	89 c3                	mov    %eax,%ebx
f0121f4f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0121f56:	10 00 00 
f0121f59:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121f5e:	0f b6 d0             	movzbl %al,%edx
f0121f61:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121f67:	01 d0                	add    %edx,%eax
f0121f69:	48                   	dec    %eax
f0121f6a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0121f70:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121f76:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f7b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0121f81:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121f87:	29 d0                	sub    %edx,%eax
f0121f89:	01 c3                	add    %eax,%ebx
f0121f8b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0121f92:	10 00 00 
f0121f95:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0121f9a:	0f b6 c0             	movzbl %al,%eax
f0121f9d:	c1 e0 04             	shl    $0x4,%eax
f0121fa0:	89 c2                	mov    %eax,%edx
f0121fa2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0121fa8:	01 d0                	add    %edx,%eax
f0121faa:	48                   	dec    %eax
f0121fab:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0121fb1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121fb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fbc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0121fc2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121fc8:	29 d0                	sub    %edx,%eax
f0121fca:	01 d8                	add    %ebx,%eax
f0121fcc:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121fd1:	39 c1                	cmp    %eax,%ecx
f0121fd3:	74 17                	je     f0121fec <test_kfree_bestfirstfit+0x829>
f0121fd5:	83 ec 04             	sub    $0x4,%esp
f0121fd8:	68 5c aa 13 f0       	push   $0xf013aa5c
f0121fdd:	68 d1 06 00 00       	push   $0x6d1
f0121fe2:	68 76 a9 13 f0       	push   $0xf013a976
f0121fe7:	e8 ba e1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fec:	e8 9b 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ff1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ff4:	74 17                	je     f012200d <test_kfree_bestfirstfit+0x84a>
f0121ff6:	83 ec 04             	sub    $0x4,%esp
f0121ff9:	68 90 a9 13 f0       	push   $0xf013a990
f0121ffe:	68 d2 06 00 00       	push   $0x6d2
f0122003:	68 76 a9 13 f0       	push   $0xf013a976
f0122008:	e8 99 e1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012200d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122010:	e8 d3 a4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122015:	29 c3                	sub    %eax,%ebx
f0122017:	89 d8                	mov    %ebx,%eax
f0122019:	3d 00 03 00 00       	cmp    $0x300,%eax
f012201e:	74 17                	je     f0122037 <test_kfree_bestfirstfit+0x874>
f0122020:	83 ec 04             	sub    $0x4,%esp
f0122023:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0122028:	68 d3 06 00 00       	push   $0x6d3
f012202d:	68 76 a9 13 f0       	push   $0xf013a976
f0122032:	e8 6f e1 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122037:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012203e:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122041:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122047:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012204a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122051:	eb 0e                	jmp    f0122061 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122053:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122056:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122059:	01 d0                	add    %edx,%eax
f012205b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012205e:	ff 45 f4             	incl   -0xc(%ebp)
f0122061:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122067:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012206a:	7f e7                	jg     f0122053 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012206c:	e8 77 a4 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122071:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122074:	e8 13 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122079:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012207c:	83 ec 0c             	sub    $0xc,%esp
f012207f:	68 00 fc 5f 00       	push   $0x5ffc00
f0122084:	e8 3b 55 fe ff       	call   f01075c4 <kmalloc>
f0122089:	83 c4 10             	add    $0x10,%esp
f012208c:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122092:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122098:	89 c1                	mov    %eax,%ecx
f012209a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01220a1:	10 00 00 
f01220a4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01220aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220af:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01220b5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01220bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01220c0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01220c6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01220cc:	29 d0                	sub    %edx,%eax
f01220ce:	89 c3                	mov    %eax,%ebx
f01220d0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01220d7:	10 00 00 
f01220da:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01220df:	0f b6 d0             	movzbl %al,%edx
f01220e2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01220e8:	01 d0                	add    %edx,%eax
f01220ea:	48                   	dec    %eax
f01220eb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01220f1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01220f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01220fc:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122102:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122108:	29 d0                	sub    %edx,%eax
f012210a:	01 c3                	add    %eax,%ebx
f012210c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122113:	10 00 00 
f0122116:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012211b:	0f b6 c0             	movzbl %al,%eax
f012211e:	c1 e0 04             	shl    $0x4,%eax
f0122121:	89 c2                	mov    %eax,%edx
f0122123:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122129:	01 d0                	add    %edx,%eax
f012212b:	48                   	dec    %eax
f012212c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122132:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122138:	ba 00 00 00 00       	mov    $0x0,%edx
f012213d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122143:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122149:	29 d0                	sub    %edx,%eax
f012214b:	01 d8                	add    %ebx,%eax
f012214d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122152:	39 c1                	cmp    %eax,%ecx
f0122154:	74 17                	je     f012216d <test_kfree_bestfirstfit+0x9aa>
f0122156:	83 ec 04             	sub    $0x4,%esp
f0122159:	68 5c aa 13 f0       	push   $0xf013aa5c
f012215e:	68 df 06 00 00       	push   $0x6df
f0122163:	68 76 a9 13 f0       	push   $0xf013a976
f0122168:	e8 39 e0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012216d:	e8 1a 1b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122172:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122175:	74 17                	je     f012218e <test_kfree_bestfirstfit+0x9cb>
f0122177:	83 ec 04             	sub    $0x4,%esp
f012217a:	68 90 a9 13 f0       	push   $0xf013a990
f012217f:	68 e0 06 00 00       	push   $0x6e0
f0122184:	68 76 a9 13 f0       	push   $0xf013a976
f0122189:	e8 18 e0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012218e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122191:	e8 52 a3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122196:	29 c3                	sub    %eax,%ebx
f0122198:	89 d8                	mov    %ebx,%eax
f012219a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012219f:	74 17                	je     f01221b8 <test_kfree_bestfirstfit+0x9f5>
f01221a1:	83 ec 04             	sub    $0x4,%esp
f01221a4:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01221a9:	68 e1 06 00 00       	push   $0x6e1
f01221ae:	68 76 a9 13 f0       	push   $0xf013a976
f01221b3:	e8 ee df fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01221b8:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01221bf:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01221c2:	e8 21 a3 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01221c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221ca:	e8 bd 1a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01221cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01221d2:	83 ec 0c             	sub    $0xc,%esp
f01221d5:	68 00 38 00 00       	push   $0x3800
f01221da:	e8 e5 53 fe ff       	call   f01075c4 <kmalloc>
f01221df:	83 c4 10             	add    $0x10,%esp
f01221e2:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01221e8:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01221ee:	89 c1                	mov    %eax,%ecx
f01221f0:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01221f7:	10 00 00 
f01221fa:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122200:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122205:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012220b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122211:	ba 00 00 00 00       	mov    $0x0,%edx
f0122216:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012221c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122222:	29 d0                	sub    %edx,%eax
f0122224:	89 c3                	mov    %eax,%ebx
f0122226:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012222d:	10 00 00 
f0122230:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0122235:	0f b6 d0             	movzbl %al,%edx
f0122238:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012223e:	01 d0                	add    %edx,%eax
f0122240:	48                   	dec    %eax
f0122241:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122247:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012224d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122252:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122258:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012225e:	29 d0                	sub    %edx,%eax
f0122260:	01 c3                	add    %eax,%ebx
f0122262:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122269:	10 00 00 
f012226c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0122271:	0f b6 c0             	movzbl %al,%eax
f0122274:	c1 e0 04             	shl    $0x4,%eax
f0122277:	89 c2                	mov    %eax,%edx
f0122279:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012227f:	01 d0                	add    %edx,%eax
f0122281:	48                   	dec    %eax
f0122282:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122288:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012228e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122293:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122299:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012229f:	29 d0                	sub    %edx,%eax
f01222a1:	01 d8                	add    %ebx,%eax
f01222a3:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01222a8:	39 c1                	cmp    %eax,%ecx
f01222aa:	74 17                	je     f01222c3 <test_kfree_bestfirstfit+0xb00>
f01222ac:	83 ec 04             	sub    $0x4,%esp
f01222af:	68 5c aa 13 f0       	push   $0xf013aa5c
f01222b4:	68 e8 06 00 00       	push   $0x6e8
f01222b9:	68 76 a9 13 f0       	push   $0xf013a976
f01222be:	e8 e3 de fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222c3:	e8 c4 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01222c8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222cb:	74 17                	je     f01222e4 <test_kfree_bestfirstfit+0xb21>
f01222cd:	83 ec 04             	sub    $0x4,%esp
f01222d0:	68 90 a9 13 f0       	push   $0xf013a990
f01222d5:	68 e9 06 00 00       	push   $0x6e9
f01222da:	68 76 a9 13 f0       	push   $0xf013a976
f01222df:	e8 c2 de fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01222e4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01222e7:	e8 fc a1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01222ec:	29 c3                	sub    %eax,%ebx
f01222ee:	89 d8                	mov    %ebx,%eax
f01222f0:	83 f8 04             	cmp    $0x4,%eax
f01222f3:	74 17                	je     f012230c <test_kfree_bestfirstfit+0xb49>
f01222f5:	83 ec 04             	sub    $0x4,%esp
f01222f8:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01222fd:	68 ea 06 00 00       	push   $0x6ea
f0122302:	68 76 a9 13 f0       	push   $0xf013a976
f0122307:	e8 9a de fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012230c:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122313:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122316:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012231c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012231f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122326:	eb 0e                	jmp    f0122336 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122328:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012232b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012232e:	01 d0                	add    %edx,%eax
f0122330:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122333:	ff 45 f4             	incl   -0xc(%ebp)
f0122336:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012233c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012233f:	7f e7                	jg     f0122328 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122341:	e8 a2 a1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122346:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012234c:	e8 3b 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122351:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122357:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012235d:	83 ec 0c             	sub    $0xc,%esp
f0122360:	50                   	push   %eax
f0122361:	e8 78 52 fe ff       	call   f01075de <kfree>
f0122366:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122369:	e8 1e 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012236e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122374:	74 17                	je     f012238d <test_kfree_bestfirstfit+0xbca>
f0122376:	83 ec 04             	sub    $0x4,%esp
f0122379:	68 90 a9 13 f0       	push   $0xf013a990
f012237e:	68 f9 06 00 00       	push   $0x6f9
f0122383:	68 76 a9 13 f0       	push   $0xf013a976
f0122388:	e8 19 de fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012238d:	e8 56 a1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122392:	89 c2                	mov    %eax,%edx
f0122394:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012239a:	29 c2                	sub    %eax,%edx
f012239c:	89 d0                	mov    %edx,%eax
f012239e:	3d 00 02 00 00       	cmp    $0x200,%eax
f01223a3:	74 17                	je     f01223bc <test_kfree_bestfirstfit+0xbf9>
f01223a5:	83 ec 04             	sub    $0x4,%esp
f01223a8:	68 00 b1 13 f0       	push   $0xf013b100
f01223ad:	68 fa 06 00 00       	push   $0x6fa
f01223b2:	68 76 a9 13 f0       	push   $0xf013a976
f01223b7:	e8 ea dd fd ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01223bc:	e8 27 a1 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01223c1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223c7:	e8 c0 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01223cc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01223d2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01223d8:	83 ec 0c             	sub    $0xc,%esp
f01223db:	50                   	push   %eax
f01223dc:	e8 fd 51 fe ff       	call   f01075de <kfree>
f01223e1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223e4:	e8 a3 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01223e9:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01223ef:	74 17                	je     f0122408 <test_kfree_bestfirstfit+0xc45>
f01223f1:	83 ec 04             	sub    $0x4,%esp
f01223f4:	68 90 a9 13 f0       	push   $0xf013a990
f01223f9:	68 00 07 00 00       	push   $0x700
f01223fe:	68 76 a9 13 f0       	push   $0xf013a976
f0122403:	e8 9e dd fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122408:	e8 db a0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012240d:	89 c2                	mov    %eax,%edx
f012240f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122415:	29 c2                	sub    %eax,%edx
f0122417:	89 d0                	mov    %edx,%eax
f0122419:	83 f8 01             	cmp    $0x1,%eax
f012241c:	74 17                	je     f0122435 <test_kfree_bestfirstfit+0xc72>
f012241e:	83 ec 04             	sub    $0x4,%esp
f0122421:	68 00 b1 13 f0       	push   $0xf013b100
f0122426:	68 01 07 00 00       	push   $0x701
f012242b:	68 76 a9 13 f0       	push   $0xf013a976
f0122430:	e8 71 dd fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122435:	e8 ae a0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012243a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122440:	e8 47 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122445:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012244b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122451:	83 ec 0c             	sub    $0xc,%esp
f0122454:	50                   	push   %eax
f0122455:	e8 84 51 fe ff       	call   f01075de <kfree>
f012245a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012245d:	e8 2a 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122462:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122468:	74 17                	je     f0122481 <test_kfree_bestfirstfit+0xcbe>
f012246a:	83 ec 04             	sub    $0x4,%esp
f012246d:	68 90 a9 13 f0       	push   $0xf013a990
f0122472:	68 07 07 00 00       	push   $0x707
f0122477:	68 76 a9 13 f0       	push   $0xf013a976
f012247c:	e8 25 dd fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122481:	e8 62 a0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122486:	89 c2                	mov    %eax,%edx
f0122488:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012248e:	29 c2                	sub    %eax,%edx
f0122490:	89 d0                	mov    %edx,%eax
f0122492:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122497:	74 17                	je     f01224b0 <test_kfree_bestfirstfit+0xced>
f0122499:	83 ec 04             	sub    $0x4,%esp
f012249c:	68 00 b1 13 f0       	push   $0xf013b100
f01224a1:	68 08 07 00 00       	push   $0x708
f01224a6:	68 76 a9 13 f0       	push   $0xf013a976
f01224ab:	e8 f6 dc fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01224b0:	e8 33 a0 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01224b5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224bb:	e8 cc 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01224c0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01224c6:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01224cc:	83 ec 0c             	sub    $0xc,%esp
f01224cf:	50                   	push   %eax
f01224d0:	e8 09 51 fe ff       	call   f01075de <kfree>
f01224d5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224d8:	e8 af 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01224dd:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01224e3:	74 17                	je     f01224fc <test_kfree_bestfirstfit+0xd39>
f01224e5:	83 ec 04             	sub    $0x4,%esp
f01224e8:	68 90 a9 13 f0       	push   $0xf013a990
f01224ed:	68 0e 07 00 00       	push   $0x70e
f01224f2:	68 76 a9 13 f0       	push   $0xf013a976
f01224f7:	e8 aa dc fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01224fc:	e8 e7 9f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122501:	89 c2                	mov    %eax,%edx
f0122503:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122509:	29 c2                	sub    %eax,%edx
f012250b:	89 d0                	mov    %edx,%eax
f012250d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122512:	74 17                	je     f012252b <test_kfree_bestfirstfit+0xd68>
f0122514:	83 ec 04             	sub    $0x4,%esp
f0122517:	68 00 b1 13 f0       	push   $0xf013b100
f012251c:	68 0f 07 00 00       	push   $0x70f
f0122521:	68 76 a9 13 f0       	push   $0xf013a976
f0122526:	e8 7b dc fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012252b:	83 ec 0c             	sub    $0xc,%esp
f012252e:	68 38 b1 13 f0       	push   $0xf013b138
f0122533:	e8 f5 e6 fd ff       	call   f0100c2d <cprintf>
f0122538:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012253b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122541:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122544:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012254b:	eb 1e                	jmp    f012256b <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f012254d:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122553:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122556:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122559:	01 c8                	add    %ecx,%eax
f012255b:	8a 00                	mov    (%eax),%al
f012255d:	0f be c0             	movsbl %al,%eax
f0122560:	01 d0                	add    %edx,%eax
f0122562:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122568:	ff 45 f4             	incl   -0xc(%ebp)
f012256b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122571:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122574:	7f d7                	jg     f012254d <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122576:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012257c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122582:	89 c1                	mov    %eax,%ecx
f0122584:	01 c9                	add    %ecx,%ecx
f0122586:	01 c8                	add    %ecx,%eax
f0122588:	39 c2                	cmp    %eax,%edx
f012258a:	74 17                	je     f01225a3 <test_kfree_bestfirstfit+0xde0>
f012258c:	83 ec 04             	sub    $0x4,%esp
f012258f:	68 5c b1 13 f0       	push   $0xf013b15c
f0122594:	68 1c 07 00 00       	push   $0x71c
f0122599:	68 76 a9 13 f0       	push   $0xf013a976
f012259e:	e8 03 dc fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01225a3:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01225a9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01225ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01225b3:	eb 1e                	jmp    f01225d3 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f01225b5:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01225bb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01225be:	8b 45 80             	mov    -0x80(%ebp),%eax
f01225c1:	01 c8                	add    %ecx,%eax
f01225c3:	8a 00                	mov    (%eax),%al
f01225c5:	0f be c0             	movsbl %al,%eax
f01225c8:	01 d0                	add    %edx,%eax
f01225ca:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01225d0:	ff 45 f4             	incl   -0xc(%ebp)
f01225d3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01225d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01225dc:	7f d7                	jg     f01225b5 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01225de:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01225e4:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01225ea:	c1 e2 02             	shl    $0x2,%edx
f01225ed:	39 d0                	cmp    %edx,%eax
f01225ef:	74 17                	je     f0122608 <test_kfree_bestfirstfit+0xe45>
f01225f1:	83 ec 04             	sub    $0x4,%esp
f01225f4:	68 5c b1 13 f0       	push   $0xf013b15c
f01225f9:	68 24 07 00 00       	push   $0x724
f01225fe:	68 76 a9 13 f0       	push   $0xf013a976
f0122603:	e8 9e db fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122608:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012260e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122611:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122618:	eb 1e                	jmp    f0122638 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f012261a:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0122620:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122623:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122626:	01 c8                	add    %ecx,%eax
f0122628:	8a 00                	mov    (%eax),%al
f012262a:	0f be c0             	movsbl %al,%eax
f012262d:	01 d0                	add    %edx,%eax
f012262f:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122635:	ff 45 f4             	incl   -0xc(%ebp)
f0122638:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012263e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122641:	7f d7                	jg     f012261a <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122643:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122649:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012264f:	89 d0                	mov    %edx,%eax
f0122651:	c1 e0 02             	shl    $0x2,%eax
f0122654:	01 d0                	add    %edx,%eax
f0122656:	39 c1                	cmp    %eax,%ecx
f0122658:	74 17                	je     f0122671 <test_kfree_bestfirstfit+0xeae>
f012265a:	83 ec 04             	sub    $0x4,%esp
f012265d:	68 5c b1 13 f0       	push   $0xf013b15c
f0122662:	68 2c 07 00 00       	push   $0x72c
f0122667:	68 76 a9 13 f0       	push   $0xf013a976
f012266c:	e8 35 db fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122671:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122677:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012267a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122681:	eb 1e                	jmp    f01226a1 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0122683:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122689:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012268c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012268f:	01 c8                	add    %ecx,%eax
f0122691:	8a 00                	mov    (%eax),%al
f0122693:	0f be c0             	movsbl %al,%eax
f0122696:	01 d0                	add    %edx,%eax
f0122698:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012269e:	ff 45 f4             	incl   -0xc(%ebp)
f01226a1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01226a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01226aa:	7f d7                	jg     f0122683 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01226ac:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01226b2:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01226b8:	89 d0                	mov    %edx,%eax
f01226ba:	01 c0                	add    %eax,%eax
f01226bc:	01 d0                	add    %edx,%eax
f01226be:	01 c0                	add    %eax,%eax
f01226c0:	01 d0                	add    %edx,%eax
f01226c2:	39 c1                	cmp    %eax,%ecx
f01226c4:	74 17                	je     f01226dd <test_kfree_bestfirstfit+0xf1a>
f01226c6:	83 ec 04             	sub    $0x4,%esp
f01226c9:	68 5c b1 13 f0       	push   $0xf013b15c
f01226ce:	68 34 07 00 00       	push   $0x734
f01226d3:	68 76 a9 13 f0       	push   $0xf013a976
f01226d8:	e8 c9 da fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f01226dd:	83 ec 0c             	sub    $0xc,%esp
f01226e0:	68 8f b1 13 f0       	push   $0xf013b18f
f01226e5:	e8 43 e5 fd ff       	call   f0100c2d <cprintf>
f01226ea:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01226ed:	e8 f6 9d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01226f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226f5:	e8 92 15 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01226fa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f01226fd:	83 ec 0c             	sub    $0xc,%esp
f0122700:	68 00 00 30 00       	push   $0x300000
f0122705:	e8 ba 4e fe ff       	call   f01075c4 <kmalloc>
f012270a:	83 c4 10             	add    $0x10,%esp
f012270d:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122713:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122719:	89 c1                	mov    %eax,%ecx
f012271b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0122722:	10 00 00 
f0122725:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012272b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122730:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0122736:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012273c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122741:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0122747:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012274d:	29 d0                	sub    %edx,%eax
f012274f:	89 c3                	mov    %eax,%ebx
f0122751:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122758:	10 00 00 
f012275b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0122760:	0f b6 d0             	movzbl %al,%edx
f0122763:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122769:	01 d0                	add    %edx,%eax
f012276b:	48                   	dec    %eax
f012276c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0122772:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122778:	ba 00 00 00 00       	mov    $0x0,%edx
f012277d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0122783:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122789:	29 d0                	sub    %edx,%eax
f012278b:	01 c3                	add    %eax,%ebx
f012278d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0122794:	10 00 00 
f0122797:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012279c:	0f b6 c0             	movzbl %al,%eax
f012279f:	c1 e0 04             	shl    $0x4,%eax
f01227a2:	89 c2                	mov    %eax,%edx
f01227a4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01227aa:	01 d0                	add    %edx,%eax
f01227ac:	48                   	dec    %eax
f01227ad:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01227b3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01227b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01227be:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01227c4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01227ca:	29 d0                	sub    %edx,%eax
f01227cc:	01 d8                	add    %ebx,%eax
f01227ce:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01227d3:	39 c1                	cmp    %eax,%ecx
f01227d5:	74 17                	je     f01227ee <test_kfree_bestfirstfit+0x102b>
f01227d7:	83 ec 04             	sub    $0x4,%esp
f01227da:	68 5c aa 13 f0       	push   $0xf013aa5c
f01227df:	68 3f 07 00 00       	push   $0x73f
f01227e4:	68 76 a9 13 f0       	push   $0xf013a976
f01227e9:	e8 b8 d9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227ee:	e8 99 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01227f3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227f6:	74 17                	je     f012280f <test_kfree_bestfirstfit+0x104c>
f01227f8:	83 ec 04             	sub    $0x4,%esp
f01227fb:	68 90 a9 13 f0       	push   $0xf013a990
f0122800:	68 40 07 00 00       	push   $0x740
f0122805:	68 76 a9 13 f0       	push   $0xf013a976
f012280a:	e8 97 d9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012280f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122812:	e8 d1 9c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122817:	29 c3                	sub    %eax,%ebx
f0122819:	89 d8                	mov    %ebx,%eax
f012281b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122820:	74 17                	je     f0122839 <test_kfree_bestfirstfit+0x1076>
f0122822:	83 ec 04             	sub    $0x4,%esp
f0122825:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012282a:	68 41 07 00 00       	push   $0x741
f012282f:	68 76 a9 13 f0       	push   $0xf013a976
f0122834:	e8 6d d9 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122839:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122840:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122843:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122849:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012284c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122853:	eb 0e                	jmp    f0122863 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0122855:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122858:	8b 45 80             	mov    -0x80(%ebp),%eax
f012285b:	01 d0                	add    %edx,%eax
f012285d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122860:	ff 45 f4             	incl   -0xc(%ebp)
f0122863:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122869:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012286c:	7f e7                	jg     f0122855 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012286e:	e8 75 9c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122873:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122876:	e8 11 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012287b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f012287e:	83 ec 0c             	sub    $0xc,%esp
f0122881:	68 00 08 00 00       	push   $0x800
f0122886:	e8 39 4d fe ff       	call   f01075c4 <kmalloc>
f012288b:	83 c4 10             	add    $0x10,%esp
f012288e:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122894:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012289a:	89 c1                	mov    %eax,%ecx
f012289c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01228a3:	10 00 00 
f01228a6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01228ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01228b1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01228b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01228bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01228c2:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01228c8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01228ce:	29 d0                	sub    %edx,%eax
f01228d0:	89 c3                	mov    %eax,%ebx
f01228d2:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01228d9:	10 00 00 
f01228dc:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01228e1:	0f b6 d0             	movzbl %al,%edx
f01228e4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01228ea:	01 d0                	add    %edx,%eax
f01228ec:	48                   	dec    %eax
f01228ed:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01228f3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01228f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01228fe:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122904:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012290a:	29 d0                	sub    %edx,%eax
f012290c:	01 c3                	add    %eax,%ebx
f012290e:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122915:	10 00 00 
f0122918:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012291d:	0f b6 c0             	movzbl %al,%eax
f0122920:	c1 e0 04             	shl    $0x4,%eax
f0122923:	89 c2                	mov    %eax,%edx
f0122925:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012292b:	01 d0                	add    %edx,%eax
f012292d:	48                   	dec    %eax
f012292e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122934:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012293a:	ba 00 00 00 00       	mov    $0x0,%edx
f012293f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122945:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012294b:	29 d0                	sub    %edx,%eax
f012294d:	01 d8                	add    %ebx,%eax
f012294f:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122954:	39 c1                	cmp    %eax,%ecx
f0122956:	74 17                	je     f012296f <test_kfree_bestfirstfit+0x11ac>
f0122958:	83 ec 04             	sub    $0x4,%esp
f012295b:	68 5c aa 13 f0       	push   $0xf013aa5c
f0122960:	68 4d 07 00 00       	push   $0x74d
f0122965:	68 76 a9 13 f0       	push   $0xf013a976
f012296a:	e8 37 d8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012296f:	e8 18 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122974:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122977:	74 17                	je     f0122990 <test_kfree_bestfirstfit+0x11cd>
f0122979:	83 ec 04             	sub    $0x4,%esp
f012297c:	68 90 a9 13 f0       	push   $0xf013a990
f0122981:	68 4e 07 00 00       	push   $0x74e
f0122986:	68 76 a9 13 f0       	push   $0xf013a976
f012298b:	e8 16 d8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122990:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122993:	e8 50 9b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122998:	29 c3                	sub    %eax,%ebx
f012299a:	89 d8                	mov    %ebx,%eax
f012299c:	83 f8 01             	cmp    $0x1,%eax
f012299f:	74 17                	je     f01229b8 <test_kfree_bestfirstfit+0x11f5>
f01229a1:	83 ec 04             	sub    $0x4,%esp
f01229a4:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01229a9:	68 4f 07 00 00       	push   $0x74f
f01229ae:	68 76 a9 13 f0       	push   $0xf013a976
f01229b3:	e8 ee d7 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01229b8:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01229bf:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01229c2:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01229c8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01229cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01229d2:	eb 0e                	jmp    f01229e2 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f01229d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01229d7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01229da:	01 d0                	add    %edx,%eax
f01229dc:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01229df:	ff 45 f4             	incl   -0xc(%ebp)
f01229e2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01229e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01229eb:	7f e7                	jg     f01229d4 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01229ed:	e8 f6 9a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01229f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229f5:	e8 92 12 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01229fa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01229fd:	83 ec 0c             	sub    $0xc,%esp
f0122a00:	68 00 00 10 00       	push   $0x100000
f0122a05:	e8 ba 4b fe ff       	call   f01075c4 <kmalloc>
f0122a0a:	83 c4 10             	add    $0x10,%esp
f0122a0d:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a13:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122a19:	89 c1                	mov    %eax,%ecx
f0122a1b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0122a22:	10 00 00 
f0122a25:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122a2b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a30:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122a36:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122a3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a41:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122a47:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122a4d:	29 d0                	sub    %edx,%eax
f0122a4f:	89 c3                	mov    %eax,%ebx
f0122a51:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122a58:	10 00 00 
f0122a5b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0122a60:	0f b6 d0             	movzbl %al,%edx
f0122a63:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122a69:	01 d0                	add    %edx,%eax
f0122a6b:	48                   	dec    %eax
f0122a6c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0122a72:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122a78:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a7d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0122a83:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122a89:	29 d0                	sub    %edx,%eax
f0122a8b:	01 c3                	add    %eax,%ebx
f0122a8d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0122a94:	10 00 00 
f0122a97:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0122a9c:	0f b6 c0             	movzbl %al,%eax
f0122a9f:	c1 e0 04             	shl    $0x4,%eax
f0122aa2:	89 c2                	mov    %eax,%edx
f0122aa4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122aaa:	01 d0                	add    %edx,%eax
f0122aac:	48                   	dec    %eax
f0122aad:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0122ab3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122ab9:	ba 00 00 00 00       	mov    $0x0,%edx
f0122abe:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0122ac4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122aca:	29 d0                	sub    %edx,%eax
f0122acc:	01 d8                	add    %ebx,%eax
f0122ace:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122ad3:	39 c1                	cmp    %eax,%ecx
f0122ad5:	74 17                	je     f0122aee <test_kfree_bestfirstfit+0x132b>
f0122ad7:	83 ec 04             	sub    $0x4,%esp
f0122ada:	68 5c aa 13 f0       	push   $0xf013aa5c
f0122adf:	68 5b 07 00 00       	push   $0x75b
f0122ae4:	68 76 a9 13 f0       	push   $0xf013a976
f0122ae9:	e8 b8 d6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122aee:	e8 99 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122af3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122af6:	74 17                	je     f0122b0f <test_kfree_bestfirstfit+0x134c>
f0122af8:	83 ec 04             	sub    $0x4,%esp
f0122afb:	68 90 a9 13 f0       	push   $0xf013a990
f0122b00:	68 5c 07 00 00       	push   $0x75c
f0122b05:	68 76 a9 13 f0       	push   $0xf013a976
f0122b0a:	e8 97 d6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b0f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b12:	e8 d1 99 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122b17:	29 c3                	sub    %eax,%ebx
f0122b19:	89 d8                	mov    %ebx,%eax
f0122b1b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122b20:	74 17                	je     f0122b39 <test_kfree_bestfirstfit+0x1376>
f0122b22:	83 ec 04             	sub    $0x4,%esp
f0122b25:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0122b2a:	68 5d 07 00 00       	push   $0x75d
f0122b2f:	68 76 a9 13 f0       	push   $0xf013a976
f0122b34:	e8 6d d6 fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122b39:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122b40:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122b43:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122b49:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122b4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b53:	eb 0e                	jmp    f0122b63 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122b55:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b58:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b5b:	01 d0                	add    %edx,%eax
f0122b5d:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122b60:	ff 45 f4             	incl   -0xc(%ebp)
f0122b63:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122b69:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b6c:	7f e7                	jg     f0122b55 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122b6e:	83 ec 0c             	sub    $0xc,%esp
f0122b71:	68 96 b1 13 f0       	push   $0xf013b196
f0122b76:	e8 b2 e0 fd ff       	call   f0100c2d <cprintf>
f0122b7b:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b7e:	e8 65 99 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122b83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b86:	e8 01 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122b8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122b8e:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122b94:	83 ec 0c             	sub    $0xc,%esp
f0122b97:	50                   	push   %eax
f0122b98:	e8 41 4a fe ff       	call   f01075de <kfree>
f0122b9d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ba0:	e8 e7 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122ba5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ba8:	74 17                	je     f0122bc1 <test_kfree_bestfirstfit+0x13fe>
f0122baa:	83 ec 04             	sub    $0x4,%esp
f0122bad:	68 90 a9 13 f0       	push   $0xf013a990
f0122bb2:	68 6d 07 00 00       	push   $0x76d
f0122bb7:	68 76 a9 13 f0       	push   $0xf013a976
f0122bbc:	e8 e5 d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122bc1:	e8 22 99 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122bc6:	89 c2                	mov    %eax,%edx
f0122bc8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122bcb:	29 c2                	sub    %eax,%edx
f0122bcd:	89 d0                	mov    %edx,%eax
f0122bcf:	83 f8 02             	cmp    $0x2,%eax
f0122bd2:	74 17                	je     f0122beb <test_kfree_bestfirstfit+0x1428>
f0122bd4:	83 ec 04             	sub    $0x4,%esp
f0122bd7:	68 00 b1 13 f0       	push   $0xf013b100
f0122bdc:	68 6e 07 00 00       	push   $0x76e
f0122be1:	68 76 a9 13 f0       	push   $0xf013a976
f0122be6:	e8 bb d5 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122beb:	e8 f8 98 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122bf0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bf3:	e8 94 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122bf8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122bfb:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122c01:	83 ec 0c             	sub    $0xc,%esp
f0122c04:	50                   	push   %eax
f0122c05:	e8 d4 49 fe ff       	call   f01075de <kfree>
f0122c0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c0d:	e8 7a 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c12:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c15:	74 17                	je     f0122c2e <test_kfree_bestfirstfit+0x146b>
f0122c17:	83 ec 04             	sub    $0x4,%esp
f0122c1a:	68 90 a9 13 f0       	push   $0xf013a990
f0122c1f:	68 74 07 00 00       	push   $0x774
f0122c24:	68 76 a9 13 f0       	push   $0xf013a976
f0122c29:	e8 78 d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122c2e:	e8 b5 98 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122c33:	89 c2                	mov    %eax,%edx
f0122c35:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c38:	29 c2                	sub    %eax,%edx
f0122c3a:	89 d0                	mov    %edx,%eax
f0122c3c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122c41:	74 17                	je     f0122c5a <test_kfree_bestfirstfit+0x1497>
f0122c43:	83 ec 04             	sub    $0x4,%esp
f0122c46:	68 00 b1 13 f0       	push   $0xf013b100
f0122c4b:	68 75 07 00 00       	push   $0x775
f0122c50:	68 76 a9 13 f0       	push   $0xf013a976
f0122c55:	e8 4c d5 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122c5a:	e8 89 98 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122c5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c62:	e8 25 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c67:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122c6a:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122c70:	83 ec 0c             	sub    $0xc,%esp
f0122c73:	50                   	push   %eax
f0122c74:	e8 65 49 fe ff       	call   f01075de <kfree>
f0122c79:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c7c:	e8 0b 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c81:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c84:	74 17                	je     f0122c9d <test_kfree_bestfirstfit+0x14da>
f0122c86:	83 ec 04             	sub    $0x4,%esp
f0122c89:	68 90 a9 13 f0       	push   $0xf013a990
f0122c8e:	68 7b 07 00 00       	push   $0x77b
f0122c93:	68 76 a9 13 f0       	push   $0xf013a976
f0122c98:	e8 09 d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122c9d:	e8 46 98 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122ca2:	89 c2                	mov    %eax,%edx
f0122ca4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122ca7:	29 c2                	sub    %eax,%edx
f0122ca9:	89 d0                	mov    %edx,%eax
f0122cab:	83 f8 01             	cmp    $0x1,%eax
f0122cae:	74 17                	je     f0122cc7 <test_kfree_bestfirstfit+0x1504>
f0122cb0:	83 ec 04             	sub    $0x4,%esp
f0122cb3:	68 00 b1 13 f0       	push   $0xf013b100
f0122cb8:	68 7c 07 00 00       	push   $0x77c
f0122cbd:	68 76 a9 13 f0       	push   $0xf013a976
f0122cc2:	e8 df d4 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cc7:	e8 1c 98 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122ccc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ccf:	e8 b8 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122cd4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122cd7:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122cdd:	83 ec 0c             	sub    $0xc,%esp
f0122ce0:	50                   	push   %eax
f0122ce1:	e8 f8 48 fe ff       	call   f01075de <kfree>
f0122ce6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ce9:	e8 9e 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122cee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122cf1:	74 17                	je     f0122d0a <test_kfree_bestfirstfit+0x1547>
f0122cf3:	83 ec 04             	sub    $0x4,%esp
f0122cf6:	68 90 a9 13 f0       	push   $0xf013a990
f0122cfb:	68 82 07 00 00       	push   $0x782
f0122d00:	68 76 a9 13 f0       	push   $0xf013a976
f0122d05:	e8 9c d4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122d0a:	e8 d9 97 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122d0f:	89 c2                	mov    %eax,%edx
f0122d11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122d14:	29 c2                	sub    %eax,%edx
f0122d16:	89 d0                	mov    %edx,%eax
f0122d18:	83 f8 04             	cmp    $0x4,%eax
f0122d1b:	74 17                	je     f0122d34 <test_kfree_bestfirstfit+0x1571>
f0122d1d:	83 ec 04             	sub    $0x4,%esp
f0122d20:	68 00 b1 13 f0       	push   $0xf013b100
f0122d25:	68 83 07 00 00       	push   $0x783
f0122d2a:	68 76 a9 13 f0       	push   $0xf013a976
f0122d2f:	e8 72 d4 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d34:	e8 af 97 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122d39:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d3c:	e8 4b 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122d41:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122d44:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122d4a:	83 ec 0c             	sub    $0xc,%esp
f0122d4d:	50                   	push   %eax
f0122d4e:	e8 8b 48 fe ff       	call   f01075de <kfree>
f0122d53:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d56:	e8 31 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122d5b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d5e:	74 17                	je     f0122d77 <test_kfree_bestfirstfit+0x15b4>
f0122d60:	83 ec 04             	sub    $0x4,%esp
f0122d63:	68 90 a9 13 f0       	push   $0xf013a990
f0122d68:	68 89 07 00 00       	push   $0x789
f0122d6d:	68 76 a9 13 f0       	push   $0xf013a976
f0122d72:	e8 2f d4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122d77:	e8 6c 97 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122d7c:	89 c2                	mov    %eax,%edx
f0122d7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122d81:	29 c2                	sub    %eax,%edx
f0122d83:	89 d0                	mov    %edx,%eax
f0122d85:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122d8a:	74 17                	je     f0122da3 <test_kfree_bestfirstfit+0x15e0>
f0122d8c:	83 ec 04             	sub    $0x4,%esp
f0122d8f:	68 00 b1 13 f0       	push   $0xf013b100
f0122d94:	68 8a 07 00 00       	push   $0x78a
f0122d99:	68 76 a9 13 f0       	push   $0xf013a976
f0122d9e:	e8 03 d4 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122da3:	e8 40 97 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122da8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122dab:	e8 dc 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122db0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122db3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122db9:	83 ec 0c             	sub    $0xc,%esp
f0122dbc:	50                   	push   %eax
f0122dbd:	e8 1c 48 fe ff       	call   f01075de <kfree>
f0122dc2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122dc5:	e8 c2 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122dca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122dcd:	74 17                	je     f0122de6 <test_kfree_bestfirstfit+0x1623>
f0122dcf:	83 ec 04             	sub    $0x4,%esp
f0122dd2:	68 90 a9 13 f0       	push   $0xf013a990
f0122dd7:	68 90 07 00 00       	push   $0x790
f0122ddc:	68 76 a9 13 f0       	push   $0xf013a976
f0122de1:	e8 c0 d3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122de6:	e8 fd 96 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122deb:	89 c2                	mov    %eax,%edx
f0122ded:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122df0:	29 c2                	sub    %eax,%edx
f0122df2:	89 d0                	mov    %edx,%eax
f0122df4:	83 f8 01             	cmp    $0x1,%eax
f0122df7:	74 17                	je     f0122e10 <test_kfree_bestfirstfit+0x164d>
f0122df9:	83 ec 04             	sub    $0x4,%esp
f0122dfc:	68 00 b1 13 f0       	push   $0xf013b100
f0122e01:	68 91 07 00 00       	push   $0x791
f0122e06:	68 76 a9 13 f0       	push   $0xf013a976
f0122e0b:	e8 96 d3 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e10:	e8 d3 96 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122e15:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e18:	e8 6f 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122e1d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122e20:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122e26:	83 ec 0c             	sub    $0xc,%esp
f0122e29:	50                   	push   %eax
f0122e2a:	e8 af 47 fe ff       	call   f01075de <kfree>
f0122e2f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e32:	e8 55 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122e37:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e3a:	74 17                	je     f0122e53 <test_kfree_bestfirstfit+0x1690>
f0122e3c:	83 ec 04             	sub    $0x4,%esp
f0122e3f:	68 90 a9 13 f0       	push   $0xf013a990
f0122e44:	68 97 07 00 00       	push   $0x797
f0122e49:	68 76 a9 13 f0       	push   $0xf013a976
f0122e4e:	e8 53 d3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e53:	e8 90 96 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122e58:	89 c2                	mov    %eax,%edx
f0122e5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e5d:	29 c2                	sub    %eax,%edx
f0122e5f:	89 d0                	mov    %edx,%eax
f0122e61:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122e66:	74 17                	je     f0122e7f <test_kfree_bestfirstfit+0x16bc>
f0122e68:	83 ec 04             	sub    $0x4,%esp
f0122e6b:	68 00 b1 13 f0       	push   $0xf013b100
f0122e70:	68 98 07 00 00       	push   $0x798
f0122e75:	68 76 a9 13 f0       	push   $0xf013a976
f0122e7a:	e8 27 d3 fd ff       	call   f01001a6 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122e7f:	e8 64 96 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122e84:	89 c2                	mov    %eax,%edx
f0122e86:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122e89:	39 c2                	cmp    %eax,%edx
f0122e8b:	74 17                	je     f0122ea4 <test_kfree_bestfirstfit+0x16e1>
f0122e8d:	83 ec 04             	sub    $0x4,%esp
f0122e90:	68 a0 b1 13 f0       	push   $0xf013b1a0
f0122e95:	68 9a 07 00 00       	push   $0x79a
f0122e9a:	68 76 a9 13 f0       	push   $0xf013a976
f0122e9f:	e8 02 d3 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f0122ea4:	83 ec 0c             	sub    $0xc,%esp
f0122ea7:	68 d4 b1 13 f0       	push   $0xf013b1d4
f0122eac:	e8 7c dd fd ff       	call   f0100c2d <cprintf>
f0122eb1:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122eb4:	83 ec 0c             	sub    $0xc,%esp
f0122eb7:	6a 03                	push   $0x3
f0122eb9:	e8 d3 9a fe ff       	call   f010c991 <sys_bypassPageFault>
f0122ebe:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122ec1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ec8:	e9 82 00 00 00       	jmp    f0122f4f <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0122ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ed0:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0122ed7:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0122eda:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122edd:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122ee0:	e8 9a 9a fe ff       	call   f010c97f <sys_rcr2>
f0122ee5:	89 c2                	mov    %eax,%edx
f0122ee7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122eea:	39 c2                	cmp    %eax,%edx
f0122eec:	74 17                	je     f0122f05 <test_kfree_bestfirstfit+0x1742>
f0122eee:	83 ec 04             	sub    $0x4,%esp
f0122ef1:	68 dc b1 13 f0       	push   $0xf013b1dc
f0122ef6:	68 a9 07 00 00       	push   $0x7a9
f0122efb:	68 76 a9 13 f0       	push   $0xf013a976
f0122f00:	e8 a1 d2 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0122f05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f08:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122f0f:	89 c2                	mov    %eax,%edx
f0122f11:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122f14:	01 d0                	add    %edx,%eax
f0122f16:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122f19:	e8 61 9a fe ff       	call   f010c97f <sys_rcr2>
f0122f1e:	89 c2                	mov    %eax,%edx
f0122f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f23:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122f2a:	89 c1                	mov    %eax,%ecx
f0122f2c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122f2f:	01 c8                	add    %ecx,%eax
f0122f31:	39 c2                	cmp    %eax,%edx
f0122f33:	74 17                	je     f0122f4c <test_kfree_bestfirstfit+0x1789>
f0122f35:	83 ec 04             	sub    $0x4,%esp
f0122f38:	68 dc b1 13 f0       	push   $0xf013b1dc
f0122f3d:	68 ab 07 00 00       	push   $0x7ab
f0122f42:	68 76 a9 13 f0       	push   $0xf013a976
f0122f47:	e8 5a d2 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122f4c:	ff 45 f4             	incl   -0xc(%ebp)
f0122f4f:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122f53:	0f 8e 74 ff ff ff    	jle    f0122ecd <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122f59:	83 ec 0c             	sub    $0xc,%esp
f0122f5c:	6a 00                	push   $0x0
f0122f5e:	e8 2e 9a fe ff       	call   f010c991 <sys_bypassPageFault>
f0122f63:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122f66:	83 ec 0c             	sub    $0xc,%esp
f0122f69:	68 21 b2 13 f0       	push   $0xf013b221
f0122f6e:	e8 ba dc fd ff       	call   f0100c2d <cprintf>
f0122f73:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f76:	e8 6d 95 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122f7b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f7e:	e8 09 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f83:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122f86:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122f8c:	83 ec 0c             	sub    $0xc,%esp
f0122f8f:	50                   	push   %eax
f0122f90:	e8 49 46 fe ff       	call   f01075de <kfree>
f0122f95:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f98:	e8 ef 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f9d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fa0:	74 17                	je     f0122fb9 <test_kfree_bestfirstfit+0x17f6>
f0122fa2:	83 ec 04             	sub    $0x4,%esp
f0122fa5:	68 90 a9 13 f0       	push   $0xf013a990
f0122faa:	68 b9 07 00 00       	push   $0x7b9
f0122faf:	68 76 a9 13 f0       	push   $0xf013a976
f0122fb4:	e8 ed d1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122fb9:	e8 2a 95 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122fbe:	89 c2                	mov    %eax,%edx
f0122fc0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122fc3:	39 c2                	cmp    %eax,%edx
f0122fc5:	74 17                	je     f0122fde <test_kfree_bestfirstfit+0x181b>
f0122fc7:	83 ec 04             	sub    $0x4,%esp
f0122fca:	68 28 b2 13 f0       	push   $0xf013b228
f0122fcf:	68 ba 07 00 00       	push   $0x7ba
f0122fd4:	68 76 a9 13 f0       	push   $0xf013a976
f0122fd9:	e8 c8 d1 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122fde:	e8 05 95 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0122fe3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fe6:	e8 a1 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122feb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122fee:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122ff4:	83 ec 0c             	sub    $0xc,%esp
f0122ff7:	50                   	push   %eax
f0122ff8:	e8 e1 45 fe ff       	call   f01075de <kfree>
f0122ffd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123000:	e8 87 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123005:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123008:	74 17                	je     f0123021 <test_kfree_bestfirstfit+0x185e>
f012300a:	83 ec 04             	sub    $0x4,%esp
f012300d:	68 90 a9 13 f0       	push   $0xf013a990
f0123012:	68 c0 07 00 00       	push   $0x7c0
f0123017:	68 76 a9 13 f0       	push   $0xf013a976
f012301c:	e8 85 d1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123021:	e8 c2 94 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123026:	89 c2                	mov    %eax,%edx
f0123028:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012302b:	39 c2                	cmp    %eax,%edx
f012302d:	74 17                	je     f0123046 <test_kfree_bestfirstfit+0x1883>
f012302f:	83 ec 04             	sub    $0x4,%esp
f0123032:	68 28 b2 13 f0       	push   $0xf013b228
f0123037:	68 c1 07 00 00       	push   $0x7c1
f012303c:	68 76 a9 13 f0       	push   $0xf013a976
f0123041:	e8 60 d1 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123046:	e8 9d 94 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012304b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012304e:	e8 39 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123053:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123056:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012305c:	83 ec 0c             	sub    $0xc,%esp
f012305f:	50                   	push   %eax
f0123060:	e8 79 45 fe ff       	call   f01075de <kfree>
f0123065:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123068:	e8 1f 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012306d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123070:	74 17                	je     f0123089 <test_kfree_bestfirstfit+0x18c6>
f0123072:	83 ec 04             	sub    $0x4,%esp
f0123075:	68 90 a9 13 f0       	push   $0xf013a990
f012307a:	68 c7 07 00 00       	push   $0x7c7
f012307f:	68 76 a9 13 f0       	push   $0xf013a976
f0123084:	e8 1d d1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123089:	e8 5a 94 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012308e:	89 c2                	mov    %eax,%edx
f0123090:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123093:	39 c2                	cmp    %eax,%edx
f0123095:	74 17                	je     f01230ae <test_kfree_bestfirstfit+0x18eb>
f0123097:	83 ec 04             	sub    $0x4,%esp
f012309a:	68 28 b2 13 f0       	push   $0xf013b228
f012309f:	68 c8 07 00 00       	push   $0x7c8
f01230a4:	68 76 a9 13 f0       	push   $0xf013a976
f01230a9:	e8 f8 d0 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01230ae:	e8 35 94 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01230b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230b6:	e8 d1 0b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01230bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01230be:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01230c4:	83 ec 0c             	sub    $0xc,%esp
f01230c7:	50                   	push   %eax
f01230c8:	e8 11 45 fe ff       	call   f01075de <kfree>
f01230cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230d0:	e8 b7 0b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01230d5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01230d8:	74 17                	je     f01230f1 <test_kfree_bestfirstfit+0x192e>
f01230da:	83 ec 04             	sub    $0x4,%esp
f01230dd:	68 90 a9 13 f0       	push   $0xf013a990
f01230e2:	68 ce 07 00 00       	push   $0x7ce
f01230e7:	68 76 a9 13 f0       	push   $0xf013a976
f01230ec:	e8 b5 d0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01230f1:	e8 f2 93 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01230f6:	89 c2                	mov    %eax,%edx
f01230f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01230fb:	39 c2                	cmp    %eax,%edx
f01230fd:	74 17                	je     f0123116 <test_kfree_bestfirstfit+0x1953>
f01230ff:	83 ec 04             	sub    $0x4,%esp
f0123102:	68 28 b2 13 f0       	push   $0xf013b228
f0123107:	68 cf 07 00 00       	push   $0x7cf
f012310c:	68 76 a9 13 f0       	push   $0xf013a976
f0123111:	e8 90 d0 fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0123116:	83 ec 0c             	sub    $0xc,%esp
f0123119:	68 6f b2 13 f0       	push   $0xf013b26f
f012311e:	e8 0a db fd ff       	call   f0100c2d <cprintf>
f0123123:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123126:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012312d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123134:	eb 48                	jmp    f012317e <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123136:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123139:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012313e:	83 ec 04             	sub    $0x4,%esp
f0123141:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0123147:	51                   	push   %ecx
f0123148:	52                   	push   %edx
f0123149:	50                   	push   %eax
f012314a:	e8 1a 38 fe ff       	call   f0106969 <get_page_table>
f012314f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123152:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123158:	85 c0                	test   %eax,%eax
f012315a:	75 17                	jne    f0123173 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012315c:	83 ec 04             	sub    $0x4,%esp
f012315f:	68 78 b2 13 f0       	push   $0xf013b278
f0123164:	68 dd 07 00 00       	push   $0x7dd
f0123169:	68 76 a9 13 f0       	push   $0xf013a976
f012316e:	e8 33 d0 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123173:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012317a:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012317e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123182:	78 b2                	js     f0123136 <test_kfree_bestfirstfit+0x1973>
f0123184:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123188:	7f 09                	jg     f0123193 <test_kfree_bestfirstfit+0x19d0>
f012318a:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123191:	76 a3                	jbe    f0123136 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123193:	83 ec 0c             	sub    $0xc,%esp
f0123196:	68 5a ab 13 f0       	push   $0xf013ab5a
f012319b:	e8 8d da fd ff       	call   f0100c2d <cprintf>
f01231a0:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01231a3:	83 ec 0c             	sub    $0xc,%esp
f01231a6:	68 e0 b2 13 f0       	push   $0xf013b2e0
f01231ab:	e8 7d da fd ff       	call   f0100c2d <cprintf>
f01231b0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01231b3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01231b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01231bb:	5b                   	pop    %ebx
f01231bc:	5f                   	pop    %edi
f01231bd:	5d                   	pop    %ebp
f01231be:	c3                   	ret    

f01231bf <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01231bf:	55                   	push   %ebp
f01231c0:	89 e5                	mov    %esp,%ebp
f01231c2:	57                   	push   %edi
f01231c3:	56                   	push   %esi
f01231c4:	53                   	push   %ebx
f01231c5:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f01231cb:	83 ec 0c             	sub    $0xc,%esp
f01231ce:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01231d3:	e8 55 da fd ff       	call   f0100c2d <cprintf>
f01231d8:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01231db:	83 ec 0c             	sub    $0xc,%esp
f01231de:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01231e3:	e8 45 da fd ff       	call   f0100c2d <cprintf>
f01231e8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01231eb:	83 ec 0c             	sub    $0xc,%esp
f01231ee:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01231f3:	e8 35 da fd ff       	call   f0100c2d <cprintf>
f01231f8:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01231fb:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f01231ff:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123203:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123209:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f012320f:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123216:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012321d:	e8 c6 92 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123222:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123225:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f012322b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123230:	b8 00 00 00 00       	mov    $0x0,%eax
f0123235:	89 d7                	mov    %edx,%edi
f0123237:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123239:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f012323f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123244:	b8 00 00 00 00       	mov    $0x0,%eax
f0123249:	89 d7                	mov    %edx,%edi
f012324b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012324d:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123253:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123258:	b8 00 00 00 00       	mov    $0x0,%eax
f012325d:	89 d7                	mov    %edx,%edi
f012325f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123261:	e8 82 92 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123266:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123269:	e8 1e 0a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012326e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123271:	83 ec 0c             	sub    $0xc,%esp
f0123274:	68 00 fc 1f 00       	push   $0x1ffc00
f0123279:	e8 46 43 fe ff       	call   f01075c4 <kmalloc>
f012327e:	83 c4 10             	add    $0x10,%esp
f0123281:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123287:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012328d:	89 c1                	mov    %eax,%ecx
f012328f:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123296:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123299:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012329e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01232a1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01232a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01232a9:	f7 75 a0             	divl   -0x60(%ebp)
f01232ac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01232af:	29 d0                	sub    %edx,%eax
f01232b1:	89 c3                	mov    %eax,%ebx
f01232b3:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01232ba:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01232bf:	0f b6 d0             	movzbl %al,%edx
f01232c2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01232c5:	01 d0                	add    %edx,%eax
f01232c7:	48                   	dec    %eax
f01232c8:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01232cb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01232ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01232d3:	f7 75 98             	divl   -0x68(%ebp)
f01232d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01232d9:	29 d0                	sub    %edx,%eax
f01232db:	01 c3                	add    %eax,%ebx
f01232dd:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01232e4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01232e9:	0f b6 c0             	movzbl %al,%eax
f01232ec:	c1 e0 04             	shl    $0x4,%eax
f01232ef:	89 c2                	mov    %eax,%edx
f01232f1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01232f4:	01 d0                	add    %edx,%eax
f01232f6:	48                   	dec    %eax
f01232f7:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01232fa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01232fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0123302:	f7 75 90             	divl   -0x70(%ebp)
f0123305:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123308:	29 d0                	sub    %edx,%eax
f012330a:	01 d8                	add    %ebx,%eax
f012330c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123311:	39 c1                	cmp    %eax,%ecx
f0123313:	74 17                	je     f012332c <test_kheap_phys_addr+0x16d>
f0123315:	83 ec 04             	sub    $0x4,%esp
f0123318:	68 5c aa 13 f0       	push   $0xf013aa5c
f012331d:	68 0a 08 00 00       	push   $0x80a
f0123322:	68 76 a9 13 f0       	push   $0xf013a976
f0123327:	e8 7a ce fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012332c:	e8 5b 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123331:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123334:	74 17                	je     f012334d <test_kheap_phys_addr+0x18e>
f0123336:	83 ec 04             	sub    $0x4,%esp
f0123339:	68 90 a9 13 f0       	push   $0xf013a990
f012333e:	68 0b 08 00 00       	push   $0x80b
f0123343:	68 76 a9 13 f0       	push   $0xf013a976
f0123348:	e8 59 ce fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012334d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123350:	e8 93 91 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123355:	29 c3                	sub    %eax,%ebx
f0123357:	89 d8                	mov    %ebx,%eax
f0123359:	3d 00 02 00 00       	cmp    $0x200,%eax
f012335e:	74 17                	je     f0123377 <test_kheap_phys_addr+0x1b8>
f0123360:	83 ec 04             	sub    $0x4,%esp
f0123363:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0123368:	68 0c 08 00 00       	push   $0x80c
f012336d:	68 76 a9 13 f0       	push   $0xf013a976
f0123372:	e8 2f ce fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123377:	e8 6c 91 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012337c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012337f:	e8 08 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123384:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123387:	83 ec 0c             	sub    $0xc,%esp
f012338a:	68 00 fc 1f 00       	push   $0x1ffc00
f012338f:	e8 30 42 fe ff       	call   f01075c4 <kmalloc>
f0123394:	83 c4 10             	add    $0x10,%esp
f0123397:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012339d:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01233a3:	89 c1                	mov    %eax,%ecx
f01233a5:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01233ac:	8b 45 88             	mov    -0x78(%ebp),%eax
f01233af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01233b4:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01233b7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01233ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01233bf:	f7 75 88             	divl   -0x78(%ebp)
f01233c2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01233c5:	29 d0                	sub    %edx,%eax
f01233c7:	89 c3                	mov    %eax,%ebx
f01233c9:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01233d0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01233d5:	0f b6 d0             	movzbl %al,%edx
f01233d8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01233db:	01 d0                	add    %edx,%eax
f01233dd:	48                   	dec    %eax
f01233de:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01233e4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01233ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01233ef:	f7 75 80             	divl   -0x80(%ebp)
f01233f2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01233f8:	29 d0                	sub    %edx,%eax
f01233fa:	01 c3                	add    %eax,%ebx
f01233fc:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123403:	10 00 00 
f0123406:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012340b:	0f b6 c0             	movzbl %al,%eax
f012340e:	c1 e0 04             	shl    $0x4,%eax
f0123411:	89 c2                	mov    %eax,%edx
f0123413:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123419:	01 d0                	add    %edx,%eax
f012341b:	48                   	dec    %eax
f012341c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123422:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123428:	ba 00 00 00 00       	mov    $0x0,%edx
f012342d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123433:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123439:	29 d0                	sub    %edx,%eax
f012343b:	01 d8                	add    %ebx,%eax
f012343d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123442:	39 c1                	cmp    %eax,%ecx
f0123444:	74 17                	je     f012345d <test_kheap_phys_addr+0x29e>
f0123446:	83 ec 04             	sub    $0x4,%esp
f0123449:	68 5c aa 13 f0       	push   $0xf013aa5c
f012344e:	68 12 08 00 00       	push   $0x812
f0123453:	68 76 a9 13 f0       	push   $0xf013a976
f0123458:	e8 49 cd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012345d:	e8 2a 08 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123462:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123465:	74 17                	je     f012347e <test_kheap_phys_addr+0x2bf>
f0123467:	83 ec 04             	sub    $0x4,%esp
f012346a:	68 90 a9 13 f0       	push   $0xf013a990
f012346f:	68 13 08 00 00       	push   $0x813
f0123474:	68 76 a9 13 f0       	push   $0xf013a976
f0123479:	e8 28 cd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012347e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123481:	e8 62 90 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123486:	29 c3                	sub    %eax,%ebx
f0123488:	89 d8                	mov    %ebx,%eax
f012348a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012348f:	74 17                	je     f01234a8 <test_kheap_phys_addr+0x2e9>
f0123491:	83 ec 04             	sub    $0x4,%esp
f0123494:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0123499:	68 14 08 00 00       	push   $0x814
f012349e:	68 76 a9 13 f0       	push   $0xf013a976
f01234a3:	e8 fe cc fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01234a8:	e8 3b 90 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01234ad:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234b0:	e8 d7 07 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01234b5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01234b8:	83 ec 0c             	sub    $0xc,%esp
f01234bb:	68 00 08 00 00       	push   $0x800
f01234c0:	e8 ff 40 fe ff       	call   f01075c4 <kmalloc>
f01234c5:	83 c4 10             	add    $0x10,%esp
f01234c8:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01234ce:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01234d4:	89 c1                	mov    %eax,%ecx
f01234d6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01234dd:	10 00 00 
f01234e0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01234e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01234eb:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01234f1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01234f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01234fc:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123502:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123508:	29 d0                	sub    %edx,%eax
f012350a:	89 c3                	mov    %eax,%ebx
f012350c:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123513:	10 00 00 
f0123516:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012351b:	0f b6 d0             	movzbl %al,%edx
f012351e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123524:	01 d0                	add    %edx,%eax
f0123526:	48                   	dec    %eax
f0123527:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012352d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123533:	ba 00 00 00 00       	mov    $0x0,%edx
f0123538:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012353e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123544:	29 d0                	sub    %edx,%eax
f0123546:	01 c3                	add    %eax,%ebx
f0123548:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012354f:	10 00 00 
f0123552:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123557:	0f b6 c0             	movzbl %al,%eax
f012355a:	c1 e0 04             	shl    $0x4,%eax
f012355d:	89 c2                	mov    %eax,%edx
f012355f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123565:	01 d0                	add    %edx,%eax
f0123567:	48                   	dec    %eax
f0123568:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012356e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123574:	ba 00 00 00 00       	mov    $0x0,%edx
f0123579:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012357f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123585:	29 d0                	sub    %edx,%eax
f0123587:	01 d8                	add    %ebx,%eax
f0123589:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012358e:	39 c1                	cmp    %eax,%ecx
f0123590:	74 17                	je     f01235a9 <test_kheap_phys_addr+0x3ea>
f0123592:	83 ec 04             	sub    $0x4,%esp
f0123595:	68 5c aa 13 f0       	push   $0xf013aa5c
f012359a:	68 1a 08 00 00       	push   $0x81a
f012359f:	68 76 a9 13 f0       	push   $0xf013a976
f01235a4:	e8 fd cb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235a9:	e8 de 06 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01235ae:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01235b1:	74 17                	je     f01235ca <test_kheap_phys_addr+0x40b>
f01235b3:	83 ec 04             	sub    $0x4,%esp
f01235b6:	68 90 a9 13 f0       	push   $0xf013a990
f01235bb:	68 1b 08 00 00       	push   $0x81b
f01235c0:	68 76 a9 13 f0       	push   $0xf013a976
f01235c5:	e8 dc cb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01235ca:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01235cd:	e8 16 8f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01235d2:	29 c3                	sub    %eax,%ebx
f01235d4:	89 d8                	mov    %ebx,%eax
f01235d6:	83 f8 01             	cmp    $0x1,%eax
f01235d9:	74 17                	je     f01235f2 <test_kheap_phys_addr+0x433>
f01235db:	83 ec 04             	sub    $0x4,%esp
f01235de:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01235e3:	68 1c 08 00 00       	push   $0x81c
f01235e8:	68 76 a9 13 f0       	push   $0xf013a976
f01235ed:	e8 b4 cb fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01235f2:	e8 f1 8e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01235f7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01235fa:	e8 8d 06 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01235ff:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123602:	83 ec 0c             	sub    $0xc,%esp
f0123605:	68 00 08 00 00       	push   $0x800
f012360a:	e8 b5 3f fe ff       	call   f01075c4 <kmalloc>
f012360f:	83 c4 10             	add    $0x10,%esp
f0123612:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123618:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012361e:	89 c1                	mov    %eax,%ecx
f0123620:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0123627:	10 00 00 
f012362a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123630:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123635:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012363b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123641:	ba 00 00 00 00       	mov    $0x0,%edx
f0123646:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012364c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123652:	29 d0                	sub    %edx,%eax
f0123654:	89 c3                	mov    %eax,%ebx
f0123656:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012365d:	10 00 00 
f0123660:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123665:	0f b6 d0             	movzbl %al,%edx
f0123668:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012366e:	01 d0                	add    %edx,%eax
f0123670:	48                   	dec    %eax
f0123671:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0123677:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012367d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123682:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123688:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012368e:	29 d0                	sub    %edx,%eax
f0123690:	01 c3                	add    %eax,%ebx
f0123692:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123699:	10 00 00 
f012369c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01236a1:	0f b6 c0             	movzbl %al,%eax
f01236a4:	c1 e0 04             	shl    $0x4,%eax
f01236a7:	89 c2                	mov    %eax,%edx
f01236a9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01236af:	01 d0                	add    %edx,%eax
f01236b1:	48                   	dec    %eax
f01236b2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01236b8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01236be:	ba 00 00 00 00       	mov    $0x0,%edx
f01236c3:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01236c9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01236cf:	29 d0                	sub    %edx,%eax
f01236d1:	01 d8                	add    %ebx,%eax
f01236d3:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01236d8:	39 c1                	cmp    %eax,%ecx
f01236da:	74 17                	je     f01236f3 <test_kheap_phys_addr+0x534>
f01236dc:	83 ec 04             	sub    $0x4,%esp
f01236df:	68 5c aa 13 f0       	push   $0xf013aa5c
f01236e4:	68 22 08 00 00       	push   $0x822
f01236e9:	68 76 a9 13 f0       	push   $0xf013a976
f01236ee:	e8 b3 ca fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01236f3:	e8 94 05 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01236f8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01236fb:	74 17                	je     f0123714 <test_kheap_phys_addr+0x555>
f01236fd:	83 ec 04             	sub    $0x4,%esp
f0123700:	68 90 a9 13 f0       	push   $0xf013a990
f0123705:	68 23 08 00 00       	push   $0x823
f012370a:	68 76 a9 13 f0       	push   $0xf013a976
f012370f:	e8 92 ca fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123714:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123717:	e8 cc 8d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012371c:	29 c3                	sub    %eax,%ebx
f012371e:	89 d8                	mov    %ebx,%eax
f0123720:	83 f8 01             	cmp    $0x1,%eax
f0123723:	74 17                	je     f012373c <test_kheap_phys_addr+0x57d>
f0123725:	83 ec 04             	sub    $0x4,%esp
f0123728:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012372d:	68 24 08 00 00       	push   $0x824
f0123732:	68 76 a9 13 f0       	push   $0xf013a976
f0123737:	e8 6a ca fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012373c:	e8 a7 8d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123741:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123744:	e8 43 05 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123749:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012374c:	83 ec 0c             	sub    $0xc,%esp
f012374f:	68 00 1c 00 00       	push   $0x1c00
f0123754:	e8 6b 3e fe ff       	call   f01075c4 <kmalloc>
f0123759:	83 c4 10             	add    $0x10,%esp
f012375c:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123762:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123768:	89 c1                	mov    %eax,%ecx
f012376a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123771:	10 00 00 
f0123774:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012377a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012377f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123785:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012378b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123790:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123796:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012379c:	29 d0                	sub    %edx,%eax
f012379e:	89 c3                	mov    %eax,%ebx
f01237a0:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01237a7:	10 00 00 
f01237aa:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01237af:	0f b6 d0             	movzbl %al,%edx
f01237b2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01237b8:	01 d0                	add    %edx,%eax
f01237ba:	48                   	dec    %eax
f01237bb:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01237c1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01237c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01237cc:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01237d2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01237d8:	29 d0                	sub    %edx,%eax
f01237da:	01 c3                	add    %eax,%ebx
f01237dc:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01237e3:	10 00 00 
f01237e6:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01237eb:	0f b6 c0             	movzbl %al,%eax
f01237ee:	c1 e0 04             	shl    $0x4,%eax
f01237f1:	89 c2                	mov    %eax,%edx
f01237f3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01237f9:	01 d0                	add    %edx,%eax
f01237fb:	48                   	dec    %eax
f01237fc:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123802:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123808:	ba 00 00 00 00       	mov    $0x0,%edx
f012380d:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123813:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123819:	29 d0                	sub    %edx,%eax
f012381b:	01 d8                	add    %ebx,%eax
f012381d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123822:	39 c1                	cmp    %eax,%ecx
f0123824:	74 17                	je     f012383d <test_kheap_phys_addr+0x67e>
f0123826:	83 ec 04             	sub    $0x4,%esp
f0123829:	68 5c aa 13 f0       	push   $0xf013aa5c
f012382e:	68 2a 08 00 00       	push   $0x82a
f0123833:	68 76 a9 13 f0       	push   $0xf013a976
f0123838:	e8 69 c9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012383d:	e8 4a 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123842:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123845:	74 17                	je     f012385e <test_kheap_phys_addr+0x69f>
f0123847:	83 ec 04             	sub    $0x4,%esp
f012384a:	68 90 a9 13 f0       	push   $0xf013a990
f012384f:	68 2b 08 00 00       	push   $0x82b
f0123854:	68 76 a9 13 f0       	push   $0xf013a976
f0123859:	e8 48 c9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012385e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123861:	e8 82 8c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123866:	29 c3                	sub    %eax,%ebx
f0123868:	89 d8                	mov    %ebx,%eax
f012386a:	83 f8 02             	cmp    $0x2,%eax
f012386d:	74 17                	je     f0123886 <test_kheap_phys_addr+0x6c7>
f012386f:	83 ec 04             	sub    $0x4,%esp
f0123872:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0123877:	68 2c 08 00 00       	push   $0x82c
f012387c:	68 76 a9 13 f0       	push   $0xf013a976
f0123881:	e8 20 c9 fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123886:	e8 5d 8c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012388b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012388e:	e8 f9 03 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123893:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123896:	83 ec 0c             	sub    $0xc,%esp
f0123899:	68 00 fc 2f 00       	push   $0x2ffc00
f012389e:	e8 21 3d fe ff       	call   f01075c4 <kmalloc>
f01238a3:	83 c4 10             	add    $0x10,%esp
f01238a6:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01238ac:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01238b2:	89 c1                	mov    %eax,%ecx
f01238b4:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01238bb:	10 00 00 
f01238be:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01238c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01238c9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01238cf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01238d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01238da:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01238e0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01238e6:	29 d0                	sub    %edx,%eax
f01238e8:	89 c3                	mov    %eax,%ebx
f01238ea:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01238f1:	10 00 00 
f01238f4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01238f9:	0f b6 d0             	movzbl %al,%edx
f01238fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123902:	01 d0                	add    %edx,%eax
f0123904:	48                   	dec    %eax
f0123905:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012390b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123911:	ba 00 00 00 00       	mov    $0x0,%edx
f0123916:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012391c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123922:	29 d0                	sub    %edx,%eax
f0123924:	01 c3                	add    %eax,%ebx
f0123926:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012392d:	10 00 00 
f0123930:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123935:	0f b6 c0             	movzbl %al,%eax
f0123938:	c1 e0 04             	shl    $0x4,%eax
f012393b:	89 c2                	mov    %eax,%edx
f012393d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123943:	01 d0                	add    %edx,%eax
f0123945:	48                   	dec    %eax
f0123946:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012394c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123952:	ba 00 00 00 00       	mov    $0x0,%edx
f0123957:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012395d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123963:	29 d0                	sub    %edx,%eax
f0123965:	01 d8                	add    %ebx,%eax
f0123967:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012396c:	39 c1                	cmp    %eax,%ecx
f012396e:	74 17                	je     f0123987 <test_kheap_phys_addr+0x7c8>
f0123970:	83 ec 04             	sub    $0x4,%esp
f0123973:	68 5c aa 13 f0       	push   $0xf013aa5c
f0123978:	68 32 08 00 00       	push   $0x832
f012397d:	68 76 a9 13 f0       	push   $0xf013a976
f0123982:	e8 1f c8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123987:	e8 00 03 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012398c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012398f:	74 17                	je     f01239a8 <test_kheap_phys_addr+0x7e9>
f0123991:	83 ec 04             	sub    $0x4,%esp
f0123994:	68 90 a9 13 f0       	push   $0xf013a990
f0123999:	68 33 08 00 00       	push   $0x833
f012399e:	68 76 a9 13 f0       	push   $0xf013a976
f01239a3:	e8 fe c7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01239a8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01239ab:	e8 38 8b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01239b0:	29 c3                	sub    %eax,%ebx
f01239b2:	89 d8                	mov    %ebx,%eax
f01239b4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01239b9:	74 17                	je     f01239d2 <test_kheap_phys_addr+0x813>
f01239bb:	83 ec 04             	sub    $0x4,%esp
f01239be:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01239c3:	68 34 08 00 00       	push   $0x834
f01239c8:	68 76 a9 13 f0       	push   $0xf013a976
f01239cd:	e8 d4 c7 fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01239d2:	e8 11 8b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01239d7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239da:	e8 ad 02 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01239df:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01239e2:	83 ec 0c             	sub    $0xc,%esp
f01239e5:	68 00 fc 5f 00       	push   $0x5ffc00
f01239ea:	e8 d5 3b fe ff       	call   f01075c4 <kmalloc>
f01239ef:	83 c4 10             	add    $0x10,%esp
f01239f2:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01239f8:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01239fe:	89 c1                	mov    %eax,%ecx
f0123a00:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0123a07:	10 00 00 
f0123a0a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123a10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a15:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0123a1b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123a21:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a26:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0123a2c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123a32:	29 d0                	sub    %edx,%eax
f0123a34:	89 c3                	mov    %eax,%ebx
f0123a36:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123a3d:	10 00 00 
f0123a40:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123a45:	0f b6 d0             	movzbl %al,%edx
f0123a48:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123a4e:	01 d0                	add    %edx,%eax
f0123a50:	48                   	dec    %eax
f0123a51:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123a57:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123a5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a62:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123a68:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123a6e:	29 d0                	sub    %edx,%eax
f0123a70:	01 c3                	add    %eax,%ebx
f0123a72:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123a79:	10 00 00 
f0123a7c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123a81:	0f b6 c0             	movzbl %al,%eax
f0123a84:	c1 e0 04             	shl    $0x4,%eax
f0123a87:	89 c2                	mov    %eax,%edx
f0123a89:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123a8f:	01 d0                	add    %edx,%eax
f0123a91:	48                   	dec    %eax
f0123a92:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0123a98:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123aa3:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0123aa9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123aaf:	29 d0                	sub    %edx,%eax
f0123ab1:	01 d8                	add    %ebx,%eax
f0123ab3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123ab8:	39 c1                	cmp    %eax,%ecx
f0123aba:	74 17                	je     f0123ad3 <test_kheap_phys_addr+0x914>
f0123abc:	83 ec 04             	sub    $0x4,%esp
f0123abf:	68 5c aa 13 f0       	push   $0xf013aa5c
f0123ac4:	68 3a 08 00 00       	push   $0x83a
f0123ac9:	68 76 a9 13 f0       	push   $0xf013a976
f0123ace:	e8 d3 c6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ad3:	e8 b4 01 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123ad8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123adb:	74 17                	je     f0123af4 <test_kheap_phys_addr+0x935>
f0123add:	83 ec 04             	sub    $0x4,%esp
f0123ae0:	68 90 a9 13 f0       	push   $0xf013a990
f0123ae5:	68 3b 08 00 00       	push   $0x83b
f0123aea:	68 76 a9 13 f0       	push   $0xf013a976
f0123aef:	e8 b2 c6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123af4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123af7:	e8 ec 89 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123afc:	29 c3                	sub    %eax,%ebx
f0123afe:	89 d8                	mov    %ebx,%eax
f0123b00:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123b05:	74 17                	je     f0123b1e <test_kheap_phys_addr+0x95f>
f0123b07:	83 ec 04             	sub    $0x4,%esp
f0123b0a:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0123b0f:	68 3c 08 00 00       	push   $0x83c
f0123b14:	68 76 a9 13 f0       	push   $0xf013a976
f0123b19:	e8 88 c6 fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b1e:	e8 c5 89 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123b23:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b26:	e8 61 01 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123b2b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123b2e:	83 ec 0c             	sub    $0xc,%esp
f0123b31:	68 00 38 00 00       	push   $0x3800
f0123b36:	e8 89 3a fe ff       	call   f01075c4 <kmalloc>
f0123b3b:	83 c4 10             	add    $0x10,%esp
f0123b3e:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123b44:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123b4a:	89 c1                	mov    %eax,%ecx
f0123b4c:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123b53:	10 00 00 
f0123b56:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123b5c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b61:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123b67:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123b6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b72:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123b78:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123b7e:	29 d0                	sub    %edx,%eax
f0123b80:	89 c3                	mov    %eax,%ebx
f0123b82:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123b89:	10 00 00 
f0123b8c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123b91:	0f b6 d0             	movzbl %al,%edx
f0123b94:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123b9a:	01 d0                	add    %edx,%eax
f0123b9c:	48                   	dec    %eax
f0123b9d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0123ba3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123ba9:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bae:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0123bb4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123bba:	29 d0                	sub    %edx,%eax
f0123bbc:	01 c3                	add    %eax,%ebx
f0123bbe:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123bc5:	10 00 00 
f0123bc8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123bcd:	0f b6 c0             	movzbl %al,%eax
f0123bd0:	c1 e0 04             	shl    $0x4,%eax
f0123bd3:	89 c2                	mov    %eax,%edx
f0123bd5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123bdb:	01 d0                	add    %edx,%eax
f0123bdd:	48                   	dec    %eax
f0123bde:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123be4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123bea:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bef:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123bf5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123bfb:	29 d0                	sub    %edx,%eax
f0123bfd:	01 d8                	add    %ebx,%eax
f0123bff:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123c04:	39 c1                	cmp    %eax,%ecx
f0123c06:	74 17                	je     f0123c1f <test_kheap_phys_addr+0xa60>
f0123c08:	83 ec 04             	sub    $0x4,%esp
f0123c0b:	68 5c aa 13 f0       	push   $0xf013aa5c
f0123c10:	68 42 08 00 00       	push   $0x842
f0123c15:	68 76 a9 13 f0       	push   $0xf013a976
f0123c1a:	e8 87 c5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c1f:	e8 68 00 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123c24:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123c27:	74 17                	je     f0123c40 <test_kheap_phys_addr+0xa81>
f0123c29:	83 ec 04             	sub    $0x4,%esp
f0123c2c:	68 90 a9 13 f0       	push   $0xf013a990
f0123c31:	68 43 08 00 00       	push   $0x843
f0123c36:	68 76 a9 13 f0       	push   $0xf013a976
f0123c3b:	e8 66 c5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123c40:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123c43:	e8 a0 88 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123c48:	29 c3                	sub    %eax,%ebx
f0123c4a:	89 d8                	mov    %ebx,%eax
f0123c4c:	83 f8 04             	cmp    $0x4,%eax
f0123c4f:	74 17                	je     f0123c68 <test_kheap_phys_addr+0xaa9>
f0123c51:	83 ec 04             	sub    $0x4,%esp
f0123c54:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0123c59:	68 44 08 00 00       	push   $0x844
f0123c5e:	68 76 a9 13 f0       	push   $0xf013a976
f0123c63:	e8 3e c5 fd ff       	call   f01001a6 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123c68:	89 e0                	mov    %esp,%eax
f0123c6a:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123c6c:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123c73:	10 00 00 
f0123c76:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123c7c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123c81:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123c87:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123c8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c92:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123c98:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123c9e:	29 d0                	sub    %edx,%eax
f0123ca0:	89 c1                	mov    %eax,%ecx
f0123ca2:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0123ca9:	10 00 00 
f0123cac:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123cb1:	0f b6 d0             	movzbl %al,%edx
f0123cb4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123cba:	01 d0                	add    %edx,%eax
f0123cbc:	48                   	dec    %eax
f0123cbd:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0123cc3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123cc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cce:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0123cd4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123cda:	29 d0                	sub    %edx,%eax
f0123cdc:	01 c1                	add    %eax,%ecx
f0123cde:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0123ce5:	10 00 00 
f0123ce8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123ced:	0f b6 c0             	movzbl %al,%eax
f0123cf0:	c1 e0 04             	shl    $0x4,%eax
f0123cf3:	89 c2                	mov    %eax,%edx
f0123cf5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123cfb:	01 d0                	add    %edx,%eax
f0123cfd:	48                   	dec    %eax
f0123cfe:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0123d04:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123d0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d0f:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0123d15:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123d1b:	29 d0                	sub    %edx,%eax
f0123d1d:	01 c8                	add    %ecx,%eax
f0123d1f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123d24:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123d2a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123d31:	10 00 00 
f0123d34:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123d3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d3f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123d45:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123d4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d50:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123d56:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123d5c:	29 d0                	sub    %edx,%eax
f0123d5e:	89 c1                	mov    %eax,%ecx
f0123d60:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123d67:	10 00 00 
f0123d6a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123d6f:	0f b6 d0             	movzbl %al,%edx
f0123d72:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123d78:	01 d0                	add    %edx,%eax
f0123d7a:	48                   	dec    %eax
f0123d7b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123d81:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123d87:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d8c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123d92:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123d98:	29 d0                	sub    %edx,%eax
f0123d9a:	01 c1                	add    %eax,%ecx
f0123d9c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0123da3:	10 00 00 
f0123da6:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0123dab:	0f b6 c0             	movzbl %al,%eax
f0123dae:	c1 e0 04             	shl    $0x4,%eax
f0123db1:	89 c2                	mov    %eax,%edx
f0123db3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123db9:	01 d0                	add    %edx,%eax
f0123dbb:	48                   	dec    %eax
f0123dbc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0123dc2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123dc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0123dcd:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0123dd3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123dd9:	29 d0                	sub    %edx,%eax
f0123ddb:	01 c8                	add    %ecx,%eax
f0123ddd:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123de2:	c1 e8 0c             	shr    $0xc,%eax
f0123de5:	89 c2                	mov    %eax,%edx
f0123de7:	4a                   	dec    %edx
f0123de8:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0123dee:	c1 e0 02             	shl    $0x2,%eax
f0123df1:	8d 50 03             	lea    0x3(%eax),%edx
f0123df4:	b8 10 00 00 00       	mov    $0x10,%eax
f0123df9:	48                   	dec    %eax
f0123dfa:	01 d0                	add    %edx,%eax
f0123dfc:	bf 10 00 00 00       	mov    $0x10,%edi
f0123e01:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e06:	f7 f7                	div    %edi
f0123e08:	6b c0 10             	imul   $0x10,%eax,%eax
f0123e0b:	29 c4                	sub    %eax,%esp
f0123e0d:	89 e0                	mov    %esp,%eax
f0123e0f:	83 c0 03             	add    $0x3,%eax
f0123e12:	c1 e8 02             	shr    $0x2,%eax
f0123e15:	c1 e0 02             	shl    $0x2,%eax
f0123e18:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123e1e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123e25:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0123e2c:	10 00 00 
f0123e2f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123e35:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123e3a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0123e40:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e4b:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0123e51:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123e57:	29 d0                	sub    %edx,%eax
f0123e59:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123e5e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123e61:	eb 29                	jmp    f0123e8c <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123e63:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123e66:	8d 43 01             	lea    0x1(%ebx),%eax
f0123e69:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123e6c:	83 ec 0c             	sub    $0xc,%esp
f0123e6f:	ff 75 e0             	pushl  -0x20(%ebp)
f0123e72:	e8 ad 37 fe ff       	call   f0107624 <kheap_physical_address>
f0123e77:	83 c4 10             	add    $0x10,%esp
f0123e7a:	89 c2                	mov    %eax,%edx
f0123e7c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123e82:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123e85:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123e8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123e8f:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0123e95:	72 cc                	jb     f0123e63 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123e97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123e9a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0123ea0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123ea7:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0123eae:	10 00 00 
f0123eb1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0123eb7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ebc:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0123ec2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0123ec8:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ecd:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0123ed3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0123ed9:	29 d0                	sub    %edx,%eax
f0123edb:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123ee0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123ee3:	e9 ab 00 00 00       	jmp    f0123f93 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123ee8:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0123eed:	83 ec 04             	sub    $0x4,%esp
f0123ef0:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0123ef6:	52                   	push   %edx
f0123ef7:	ff 75 e0             	pushl  -0x20(%ebp)
f0123efa:	50                   	push   %eax
f0123efb:	e8 69 2a fe ff       	call   f0106969 <get_page_table>
f0123f00:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123f03:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123f09:	85 c0                	test   %eax,%eax
f0123f0b:	75 17                	jne    f0123f24 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123f0d:	83 ec 04             	sub    $0x4,%esp
f0123f10:	68 18 b3 13 f0       	push   $0xf013b318
f0123f15:	68 59 08 00 00       	push   $0x859
f0123f1a:	68 76 a9 13 f0       	push   $0xf013a976
f0123f1f:	e8 82 c2 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123f24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123f27:	c1 e8 0c             	shr    $0xc,%eax
f0123f2a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123f2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123f32:	eb 4b                	jmp    f0123f7f <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123f34:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123f3a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0123f3d:	c1 e2 02             	shl    $0x2,%edx
f0123f40:	01 d0                	add    %edx,%eax
f0123f42:	8b 00                	mov    (%eax),%eax
f0123f44:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123f49:	89 c1                	mov    %eax,%ecx
f0123f4b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123f51:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123f54:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123f57:	39 c1                	cmp    %eax,%ecx
f0123f59:	74 17                	je     f0123f72 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123f5b:	83 ec 04             	sub    $0x4,%esp
f0123f5e:	68 71 b3 13 f0       	push   $0xf013b371
f0123f63:	68 60 08 00 00       	push   $0x860
f0123f68:	68 76 a9 13 f0       	push   $0xf013a976
f0123f6d:	e8 34 c2 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0123f72:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123f79:	ff 45 dc             	incl   -0x24(%ebp)
f0123f7c:	ff 45 e4             	incl   -0x1c(%ebp)
f0123f7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123f82:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123f88:	7d 09                	jge    f0123f93 <test_kheap_phys_addr+0xdd4>
f0123f8a:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123f91:	7e a1                	jle    f0123f34 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123f93:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123f96:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0123f9c:	0f 82 46 ff ff ff    	jb     f0123ee8 <test_kheap_phys_addr+0xd29>
f0123fa2:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123fa4:	83 ec 0c             	sub    $0xc,%esp
f0123fa7:	68 90 b3 13 f0       	push   $0xf013b390
f0123fac:	e8 7c cc fd ff       	call   f0100c2d <cprintf>
f0123fb1:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123fb4:	e8 2f 85 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0123fb9:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123fbf:	e8 c8 fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123fc4:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0123fca:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123fd0:	83 ec 0c             	sub    $0xc,%esp
f0123fd3:	50                   	push   %eax
f0123fd4:	e8 05 36 fe ff       	call   f01075de <kfree>
f0123fd9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fdc:	e8 ab fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123fe1:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123fe7:	74 17                	je     f0124000 <test_kheap_phys_addr+0xe41>
f0123fe9:	83 ec 04             	sub    $0x4,%esp
f0123fec:	68 90 a9 13 f0       	push   $0xf013a990
f0123ff1:	68 6e 08 00 00       	push   $0x86e
f0123ff6:	68 76 a9 13 f0       	push   $0xf013a976
f0123ffb:	e8 a6 c1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124000:	e8 e3 84 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124005:	89 c2                	mov    %eax,%edx
f0124007:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012400d:	29 c2                	sub    %eax,%edx
f012400f:	89 d0                	mov    %edx,%eax
f0124011:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124016:	74 17                	je     f012402f <test_kheap_phys_addr+0xe70>
f0124018:	83 ec 04             	sub    $0x4,%esp
f012401b:	68 00 b1 13 f0       	push   $0xf013b100
f0124020:	68 6f 08 00 00       	push   $0x86f
f0124025:	68 76 a9 13 f0       	push   $0xf013a976
f012402a:	e8 77 c1 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012402f:	e8 b4 84 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124034:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012403a:	e8 4d fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012403f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124045:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012404b:	83 ec 0c             	sub    $0xc,%esp
f012404e:	50                   	push   %eax
f012404f:	e8 8a 35 fe ff       	call   f01075de <kfree>
f0124054:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124057:	e8 30 fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012405c:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124062:	74 17                	je     f012407b <test_kheap_phys_addr+0xebc>
f0124064:	83 ec 04             	sub    $0x4,%esp
f0124067:	68 90 a9 13 f0       	push   $0xf013a990
f012406c:	68 75 08 00 00       	push   $0x875
f0124071:	68 76 a9 13 f0       	push   $0xf013a976
f0124076:	e8 2b c1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012407b:	e8 68 84 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124080:	89 c2                	mov    %eax,%edx
f0124082:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124088:	29 c2                	sub    %eax,%edx
f012408a:	89 d0                	mov    %edx,%eax
f012408c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124091:	74 17                	je     f01240aa <test_kheap_phys_addr+0xeeb>
f0124093:	83 ec 04             	sub    $0x4,%esp
f0124096:	68 00 b1 13 f0       	push   $0xf013b100
f012409b:	68 76 08 00 00       	push   $0x876
f01240a0:	68 76 a9 13 f0       	push   $0xf013a976
f01240a5:	e8 fc c0 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01240aa:	e8 39 84 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01240af:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01240b5:	e8 d2 fb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01240ba:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f01240c0:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01240c6:	83 ec 0c             	sub    $0xc,%esp
f01240c9:	50                   	push   %eax
f01240ca:	e8 0f 35 fe ff       	call   f01075de <kfree>
f01240cf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01240d2:	e8 b5 fb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01240d7:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01240dd:	74 17                	je     f01240f6 <test_kheap_phys_addr+0xf37>
f01240df:	83 ec 04             	sub    $0x4,%esp
f01240e2:	68 90 a9 13 f0       	push   $0xf013a990
f01240e7:	68 7c 08 00 00       	push   $0x87c
f01240ec:	68 76 a9 13 f0       	push   $0xf013a976
f01240f1:	e8 b0 c0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01240f6:	e8 ed 83 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01240fb:	89 c2                	mov    %eax,%edx
f01240fd:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124103:	29 c2                	sub    %eax,%edx
f0124105:	89 d0                	mov    %edx,%eax
f0124107:	3d 00 06 00 00       	cmp    $0x600,%eax
f012410c:	74 17                	je     f0124125 <test_kheap_phys_addr+0xf66>
f012410e:	83 ec 04             	sub    $0x4,%esp
f0124111:	68 00 b1 13 f0       	push   $0xf013b100
f0124116:	68 7d 08 00 00       	push   $0x87d
f012411b:	68 76 a9 13 f0       	push   $0xf013a976
f0124120:	e8 81 c0 fd ff       	call   f01001a6 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0124125:	89 e0                	mov    %esp,%eax
f0124127:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124129:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124130:	10 00 00 
f0124133:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124139:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012413e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0124144:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012414a:	ba 00 00 00 00       	mov    $0x0,%edx
f012414f:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0124155:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012415b:	29 d0                	sub    %edx,%eax
f012415d:	89 c1                	mov    %eax,%ecx
f012415f:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0124166:	10 00 00 
f0124169:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012416e:	0f b6 d0             	movzbl %al,%edx
f0124171:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124177:	01 d0                	add    %edx,%eax
f0124179:	48                   	dec    %eax
f012417a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124180:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124186:	ba 00 00 00 00       	mov    $0x0,%edx
f012418b:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124191:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124197:	29 d0                	sub    %edx,%eax
f0124199:	01 c1                	add    %eax,%ecx
f012419b:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01241a2:	10 00 00 
f01241a5:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01241aa:	0f b6 c0             	movzbl %al,%eax
f01241ad:	c1 e0 04             	shl    $0x4,%eax
f01241b0:	89 c2                	mov    %eax,%edx
f01241b2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01241b8:	01 d0                	add    %edx,%eax
f01241ba:	48                   	dec    %eax
f01241bb:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01241c1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01241c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01241cc:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01241d2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01241d8:	29 d0                	sub    %edx,%eax
f01241da:	01 c8                	add    %ecx,%eax
f01241dc:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01241e1:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01241e7:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01241ee:	10 00 00 
f01241f1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01241f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01241fc:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124202:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124208:	ba 00 00 00 00       	mov    $0x0,%edx
f012420d:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124213:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124219:	29 d0                	sub    %edx,%eax
f012421b:	89 c1                	mov    %eax,%ecx
f012421d:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0124224:	10 00 00 
f0124227:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012422c:	0f b6 d0             	movzbl %al,%edx
f012422f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124235:	01 d0                	add    %edx,%eax
f0124237:	48                   	dec    %eax
f0124238:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f012423e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124244:	ba 00 00 00 00       	mov    $0x0,%edx
f0124249:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f012424f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124255:	29 d0                	sub    %edx,%eax
f0124257:	01 c1                	add    %eax,%ecx
f0124259:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124260:	10 00 00 
f0124263:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124268:	0f b6 c0             	movzbl %al,%eax
f012426b:	c1 e0 04             	shl    $0x4,%eax
f012426e:	89 c2                	mov    %eax,%edx
f0124270:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124276:	01 d0                	add    %edx,%eax
f0124278:	48                   	dec    %eax
f0124279:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f012427f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124285:	ba 00 00 00 00       	mov    $0x0,%edx
f012428a:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124290:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124296:	29 d0                	sub    %edx,%eax
f0124298:	01 c8                	add    %ecx,%eax
f012429a:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012429f:	c1 e8 0c             	shr    $0xc,%eax
f01242a2:	89 c2                	mov    %eax,%edx
f01242a4:	4a                   	dec    %edx
f01242a5:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f01242ab:	c1 e0 02             	shl    $0x2,%eax
f01242ae:	8d 50 03             	lea    0x3(%eax),%edx
f01242b1:	b8 10 00 00 00       	mov    $0x10,%eax
f01242b6:	48                   	dec    %eax
f01242b7:	01 d0                	add    %edx,%eax
f01242b9:	bf 10 00 00 00       	mov    $0x10,%edi
f01242be:	ba 00 00 00 00       	mov    $0x0,%edx
f01242c3:	f7 f7                	div    %edi
f01242c5:	6b c0 10             	imul   $0x10,%eax,%eax
f01242c8:	29 c4                	sub    %eax,%esp
f01242ca:	89 e0                	mov    %esp,%eax
f01242cc:	83 c0 03             	add    $0x3,%eax
f01242cf:	c1 e8 02             	shr    $0x2,%eax
f01242d2:	c1 e0 02             	shl    $0x2,%eax
f01242d5:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f01242db:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01242e2:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01242e9:	10 00 00 
f01242ec:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01242f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01242f7:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01242fd:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124303:	ba 00 00 00 00       	mov    $0x0,%edx
f0124308:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012430e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124314:	29 d0                	sub    %edx,%eax
f0124316:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012431b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012431e:	eb 29                	jmp    f0124349 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124320:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124323:	8d 43 01             	lea    0x1(%ebx),%eax
f0124326:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124329:	83 ec 0c             	sub    $0xc,%esp
f012432c:	ff 75 d8             	pushl  -0x28(%ebp)
f012432f:	e8 f0 32 fe ff       	call   f0107624 <kheap_physical_address>
f0124334:	83 c4 10             	add    $0x10,%esp
f0124337:	89 c2                	mov    %eax,%edx
f0124339:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012433f:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124342:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124349:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012434c:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124352:	72 cc                	jb     f0124320 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124354:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124357:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f012435d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124364:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f012436b:	10 00 00 
f012436e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124374:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124379:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f012437f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124385:	ba 00 00 00 00       	mov    $0x0,%edx
f012438a:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124390:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124396:	29 d0                	sub    %edx,%eax
f0124398:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012439d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01243a0:	e9 ab 00 00 00       	jmp    f0124450 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01243a5:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f01243aa:	83 ec 04             	sub    $0x4,%esp
f01243ad:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f01243b3:	52                   	push   %edx
f01243b4:	ff 75 d8             	pushl  -0x28(%ebp)
f01243b7:	50                   	push   %eax
f01243b8:	e8 ac 25 fe ff       	call   f0106969 <get_page_table>
f01243bd:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01243c0:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f01243c6:	85 c0                	test   %eax,%eax
f01243c8:	75 17                	jne    f01243e1 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01243ca:	83 ec 04             	sub    $0x4,%esp
f01243cd:	68 18 b3 13 f0       	push   $0xf013b318
f01243d2:	68 93 08 00 00       	push   $0x893
f01243d7:	68 76 a9 13 f0       	push   $0xf013a976
f01243dc:	e8 c5 bd fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01243e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01243e4:	c1 e8 0c             	shr    $0xc,%eax
f01243e7:	25 ff 03 00 00       	and    $0x3ff,%eax
f01243ec:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01243ef:	eb 4b                	jmp    f012443c <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01243f1:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f01243f7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01243fa:	c1 e2 02             	shl    $0x2,%edx
f01243fd:	01 d0                	add    %edx,%eax
f01243ff:	8b 00                	mov    (%eax),%eax
f0124401:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124406:	89 c1                	mov    %eax,%ecx
f0124408:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012440e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124411:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124414:	39 c1                	cmp    %eax,%ecx
f0124416:	74 17                	je     f012442f <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124418:	83 ec 04             	sub    $0x4,%esp
f012441b:	68 71 b3 13 f0       	push   $0xf013b371
f0124420:	68 9a 08 00 00       	push   $0x89a
f0124425:	68 76 a9 13 f0       	push   $0xf013a976
f012442a:	e8 77 bd fd ff       	call   f01001a6 <_panic>
				}
				va += PAGE_SIZE;
f012442f:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124436:	ff 45 d4             	incl   -0x2c(%ebp)
f0124439:	ff 45 e4             	incl   -0x1c(%ebp)
f012443c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012443f:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124445:	7d 09                	jge    f0124450 <test_kheap_phys_addr+0x1291>
f0124447:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f012444e:	7e a1                	jle    f01243f1 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124450:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124453:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124459:	0f 82 46 ff ff ff    	jb     f01243a5 <test_kheap_phys_addr+0x11e6>
f012445f:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124461:	83 ec 0c             	sub    $0xc,%esp
f0124464:	68 01 ab 13 f0       	push   $0xf013ab01
f0124469:	e8 bf c7 fd ff       	call   f0100c2d <cprintf>
f012446e:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124471:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124478:	10 00 00 
f012447b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124481:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124486:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f012448c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124492:	ba 00 00 00 00       	mov    $0x0,%edx
f0124497:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f012449d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01244a3:	29 d0                	sub    %edx,%eax
f01244a5:	89 c1                	mov    %eax,%ecx
f01244a7:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01244ae:	10 00 00 
f01244b1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01244b6:	0f b6 d0             	movzbl %al,%edx
f01244b9:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01244bf:	01 d0                	add    %edx,%eax
f01244c1:	48                   	dec    %eax
f01244c2:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01244c8:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01244ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01244d3:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01244d9:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01244df:	29 d0                	sub    %edx,%eax
f01244e1:	01 c1                	add    %eax,%ecx
f01244e3:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f01244ea:	10 00 00 
f01244ed:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01244f2:	0f b6 c0             	movzbl %al,%eax
f01244f5:	c1 e0 04             	shl    $0x4,%eax
f01244f8:	89 c2                	mov    %eax,%edx
f01244fa:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124500:	01 d0                	add    %edx,%eax
f0124502:	48                   	dec    %eax
f0124503:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124509:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012450f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124514:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f012451a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124520:	29 d0                	sub    %edx,%eax
f0124522:	01 c8                	add    %ecx,%eax
f0124524:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124529:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f012452f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124536:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012453c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012453f:	eb 0a                	jmp    f012454b <test_kheap_phys_addr+0x138c>
		{
			i++;
f0124541:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124544:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f012454b:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0124552:	76 ed                	jbe    f0124541 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0124554:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124557:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f012455d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124564:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012456a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012456d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0124574:	e9 cc 00 00 00       	jmp    f0124645 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124579:	8b 55 c0             	mov    -0x40(%ebp),%edx
f012457c:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0124581:	83 ec 04             	sub    $0x4,%esp
f0124584:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f012458a:	51                   	push   %ecx
f012458b:	52                   	push   %edx
f012458c:	50                   	push   %eax
f012458d:	e8 d7 23 fe ff       	call   f0106969 <get_page_table>
f0124592:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124595:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f012459b:	85 c0                	test   %eax,%eax
f012459d:	75 17                	jne    f01245b6 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012459f:	83 ec 04             	sub    $0x4,%esp
f01245a2:	68 18 b3 13 f0       	push   $0xf013b318
f01245a7:	68 b6 08 00 00       	push   $0x8b6
f01245ac:	68 76 a9 13 f0       	push   $0xf013a976
f01245b1:	e8 f0 bb fd ff       	call   f01001a6 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01245b6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01245bd:	eb 67                	jmp    f0124626 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01245bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01245c2:	c1 e0 0c             	shl    $0xc,%eax
f01245c5:	89 c2                	mov    %eax,%edx
f01245c7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01245cd:	01 d0                	add    %edx,%eax
f01245cf:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f01245d5:	83 ec 0c             	sub    $0xc,%esp
f01245d8:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01245de:	e8 41 30 fe ff       	call   f0107624 <kheap_physical_address>
f01245e3:	83 c4 10             	add    $0x10,%esp
f01245e6:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f01245ec:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01245f2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01245f5:	c1 e2 02             	shl    $0x2,%edx
f01245f8:	01 d0                	add    %edx,%eax
f01245fa:	8b 00                	mov    (%eax),%eax
f01245fc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124601:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0124607:	74 17                	je     f0124620 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124609:	83 ec 04             	sub    $0x4,%esp
f012460c:	68 71 b3 13 f0       	push   $0xf013b371
f0124611:	68 c0 08 00 00       	push   $0x8c0
f0124616:	68 76 a9 13 f0       	push   $0xf013a976
f012461b:	e8 86 bb fd ff       	call   f01001a6 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124620:	ff 45 cc             	incl   -0x34(%ebp)
f0124623:	ff 45 e4             	incl   -0x1c(%ebp)
f0124626:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124629:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f012462f:	7d 09                	jge    f012463a <test_kheap_phys_addr+0x147b>
f0124631:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124638:	7e 85                	jle    f01245bf <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012463a:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0124641:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0124645:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124649:	0f 88 2a ff ff ff    	js     f0124579 <test_kheap_phys_addr+0x13ba>
f012464f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124653:	7f 0d                	jg     f0124662 <test_kheap_phys_addr+0x14a3>
f0124655:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f012465c:	0f 86 17 ff ff ff    	jbe    f0124579 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124662:	83 ec 0c             	sub    $0xc,%esp
f0124665:	68 5a ab 13 f0       	push   $0xf013ab5a
f012466a:	e8 be c5 fd ff       	call   f0100c2d <cprintf>
f012466f:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0124672:	83 ec 0c             	sub    $0xc,%esp
f0124675:	68 c4 b3 13 f0       	push   $0xf013b3c4
f012467a:	e8 ae c5 fd ff       	call   f0100c2d <cprintf>
f012467f:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124682:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124687:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012468a:	5b                   	pop    %ebx
f012468b:	5e                   	pop    %esi
f012468c:	5f                   	pop    %edi
f012468d:	5d                   	pop    %ebp
f012468e:	c3                   	ret    

f012468f <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f012468f:	55                   	push   %ebp
f0124690:	89 e5                	mov    %esp,%ebp
f0124692:	57                   	push   %edi
f0124693:	56                   	push   %esi
f0124694:	53                   	push   %ebx
f0124695:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f012469b:	89 e0                	mov    %esp,%eax
f012469d:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f012469f:	83 ec 0c             	sub    $0xc,%esp
f01246a2:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01246a7:	e8 81 c5 fd ff       	call   f0100c2d <cprintf>
f01246ac:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01246af:	83 ec 0c             	sub    $0xc,%esp
f01246b2:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01246b7:	e8 71 c5 fd ff       	call   f0100c2d <cprintf>
f01246bc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01246bf:	83 ec 0c             	sub    $0xc,%esp
f01246c2:	68 b8 a8 13 f0       	push   $0xf013a8b8
f01246c7:	e8 61 c5 fd ff       	call   f0100c2d <cprintf>
f01246cc:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01246cf:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01246d3:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01246d7:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01246dd:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01246e3:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f01246ea:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01246f1:	e8 f2 7d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01246f6:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01246f9:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01246ff:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124704:	b8 00 00 00 00       	mov    $0x0,%eax
f0124709:	89 d7                	mov    %edx,%edi
f012470b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012470d:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0124713:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124718:	b8 00 00 00 00       	mov    $0x0,%eax
f012471d:	89 d7                	mov    %edx,%edi
f012471f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124721:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0124727:	b9 14 00 00 00       	mov    $0x14,%ecx
f012472c:	b8 00 00 00 00       	mov    $0x0,%eax
f0124731:	89 d7                	mov    %edx,%edi
f0124733:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124735:	e8 ae 7d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012473a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012473d:	e8 4a f5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124742:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124745:	83 ec 0c             	sub    $0xc,%esp
f0124748:	68 00 fc 1f 00       	push   $0x1ffc00
f012474d:	e8 72 2e fe ff       	call   f01075c4 <kmalloc>
f0124752:	83 c4 10             	add    $0x10,%esp
f0124755:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012475b:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124761:	89 c1                	mov    %eax,%ecx
f0124763:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012476a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012476d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124772:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0124775:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124778:	ba 00 00 00 00       	mov    $0x0,%edx
f012477d:	f7 75 b4             	divl   -0x4c(%ebp)
f0124780:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124783:	29 d0                	sub    %edx,%eax
f0124785:	89 c3                	mov    %eax,%ebx
f0124787:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012478e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124793:	0f b6 d0             	movzbl %al,%edx
f0124796:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124799:	01 d0                	add    %edx,%eax
f012479b:	48                   	dec    %eax
f012479c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012479f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01247a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01247a7:	f7 75 ac             	divl   -0x54(%ebp)
f01247aa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01247ad:	29 d0                	sub    %edx,%eax
f01247af:	01 c3                	add    %eax,%ebx
f01247b1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01247b8:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01247bd:	0f b6 c0             	movzbl %al,%eax
f01247c0:	c1 e0 04             	shl    $0x4,%eax
f01247c3:	89 c2                	mov    %eax,%edx
f01247c5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01247c8:	01 d0                	add    %edx,%eax
f01247ca:	48                   	dec    %eax
f01247cb:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01247ce:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01247d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01247d6:	f7 75 a4             	divl   -0x5c(%ebp)
f01247d9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01247dc:	29 d0                	sub    %edx,%eax
f01247de:	01 d8                	add    %ebx,%eax
f01247e0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01247e5:	39 c1                	cmp    %eax,%ecx
f01247e7:	74 17                	je     f0124800 <test_kheap_virt_addr+0x171>
f01247e9:	83 ec 04             	sub    $0x4,%esp
f01247ec:	68 5c aa 13 f0       	push   $0xf013aa5c
f01247f1:	68 ed 08 00 00       	push   $0x8ed
f01247f6:	68 76 a9 13 f0       	push   $0xf013a976
f01247fb:	e8 a6 b9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124800:	e8 87 f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124805:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124808:	74 17                	je     f0124821 <test_kheap_virt_addr+0x192>
f012480a:	83 ec 04             	sub    $0x4,%esp
f012480d:	68 90 a9 13 f0       	push   $0xf013a990
f0124812:	68 ee 08 00 00       	push   $0x8ee
f0124817:	68 76 a9 13 f0       	push   $0xf013a976
f012481c:	e8 85 b9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124821:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124824:	e8 bf 7c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124829:	29 c3                	sub    %eax,%ebx
f012482b:	89 d8                	mov    %ebx,%eax
f012482d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124832:	74 17                	je     f012484b <test_kheap_virt_addr+0x1bc>
f0124834:	83 ec 04             	sub    $0x4,%esp
f0124837:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012483c:	68 ef 08 00 00       	push   $0x8ef
f0124841:	68 76 a9 13 f0       	push   $0xf013a976
f0124846:	e8 5b b9 fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012484b:	e8 98 7c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124850:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124853:	e8 34 f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124858:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012485b:	83 ec 0c             	sub    $0xc,%esp
f012485e:	68 00 fc 1f 00       	push   $0x1ffc00
f0124863:	e8 5c 2d fe ff       	call   f01075c4 <kmalloc>
f0124868:	83 c4 10             	add    $0x10,%esp
f012486b:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124871:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124877:	89 c1                	mov    %eax,%ecx
f0124879:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124880:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124883:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124888:	89 45 98             	mov    %eax,-0x68(%ebp)
f012488b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012488e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124893:	f7 75 9c             	divl   -0x64(%ebp)
f0124896:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124899:	29 d0                	sub    %edx,%eax
f012489b:	89 c3                	mov    %eax,%ebx
f012489d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01248a4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01248a9:	0f b6 d0             	movzbl %al,%edx
f01248ac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01248af:	01 d0                	add    %edx,%eax
f01248b1:	48                   	dec    %eax
f01248b2:	89 45 90             	mov    %eax,-0x70(%ebp)
f01248b5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01248b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01248bd:	f7 75 94             	divl   -0x6c(%ebp)
f01248c0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01248c3:	29 d0                	sub    %edx,%eax
f01248c5:	01 c3                	add    %eax,%ebx
f01248c7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01248ce:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01248d3:	0f b6 c0             	movzbl %al,%eax
f01248d6:	c1 e0 04             	shl    $0x4,%eax
f01248d9:	89 c2                	mov    %eax,%edx
f01248db:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01248de:	01 d0                	add    %edx,%eax
f01248e0:	48                   	dec    %eax
f01248e1:	89 45 88             	mov    %eax,-0x78(%ebp)
f01248e4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01248e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01248ec:	f7 75 8c             	divl   -0x74(%ebp)
f01248ef:	8b 45 88             	mov    -0x78(%ebp),%eax
f01248f2:	29 d0                	sub    %edx,%eax
f01248f4:	01 d8                	add    %ebx,%eax
f01248f6:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01248fb:	39 c1                	cmp    %eax,%ecx
f01248fd:	74 17                	je     f0124916 <test_kheap_virt_addr+0x287>
f01248ff:	83 ec 04             	sub    $0x4,%esp
f0124902:	68 5c aa 13 f0       	push   $0xf013aa5c
f0124907:	68 f5 08 00 00       	push   $0x8f5
f012490c:	68 76 a9 13 f0       	push   $0xf013a976
f0124911:	e8 90 b8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124916:	e8 71 f3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012491b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012491e:	74 17                	je     f0124937 <test_kheap_virt_addr+0x2a8>
f0124920:	83 ec 04             	sub    $0x4,%esp
f0124923:	68 90 a9 13 f0       	push   $0xf013a990
f0124928:	68 f6 08 00 00       	push   $0x8f6
f012492d:	68 76 a9 13 f0       	push   $0xf013a976
f0124932:	e8 6f b8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124937:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012493a:	e8 a9 7b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012493f:	29 c3                	sub    %eax,%ebx
f0124941:	89 d8                	mov    %ebx,%eax
f0124943:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124948:	74 17                	je     f0124961 <test_kheap_virt_addr+0x2d2>
f012494a:	83 ec 04             	sub    $0x4,%esp
f012494d:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0124952:	68 f7 08 00 00       	push   $0x8f7
f0124957:	68 76 a9 13 f0       	push   $0xf013a976
f012495c:	e8 45 b8 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124961:	e8 82 7b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124966:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124969:	e8 1e f3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012496e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124971:	83 ec 0c             	sub    $0xc,%esp
f0124974:	68 00 08 00 00       	push   $0x800
f0124979:	e8 46 2c fe ff       	call   f01075c4 <kmalloc>
f012497e:	83 c4 10             	add    $0x10,%esp
f0124981:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124987:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012498d:	89 c1                	mov    %eax,%ecx
f012498f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124996:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124999:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012499e:	89 45 80             	mov    %eax,-0x80(%ebp)
f01249a1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01249a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01249a9:	f7 75 84             	divl   -0x7c(%ebp)
f01249ac:	8b 45 80             	mov    -0x80(%ebp),%eax
f01249af:	29 d0                	sub    %edx,%eax
f01249b1:	89 c3                	mov    %eax,%ebx
f01249b3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01249ba:	10 00 00 
f01249bd:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01249c2:	0f b6 d0             	movzbl %al,%edx
f01249c5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01249cb:	01 d0                	add    %edx,%eax
f01249cd:	48                   	dec    %eax
f01249ce:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01249d4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01249da:	ba 00 00 00 00       	mov    $0x0,%edx
f01249df:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01249e5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01249eb:	29 d0                	sub    %edx,%eax
f01249ed:	01 c3                	add    %eax,%ebx
f01249ef:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01249f6:	10 00 00 
f01249f9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01249fe:	0f b6 c0             	movzbl %al,%eax
f0124a01:	c1 e0 04             	shl    $0x4,%eax
f0124a04:	89 c2                	mov    %eax,%edx
f0124a06:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124a0c:	01 d0                	add    %edx,%eax
f0124a0e:	48                   	dec    %eax
f0124a0f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124a15:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124a1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a20:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124a26:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124a2c:	29 d0                	sub    %edx,%eax
f0124a2e:	01 d8                	add    %ebx,%eax
f0124a30:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124a35:	39 c1                	cmp    %eax,%ecx
f0124a37:	74 17                	je     f0124a50 <test_kheap_virt_addr+0x3c1>
f0124a39:	83 ec 04             	sub    $0x4,%esp
f0124a3c:	68 5c aa 13 f0       	push   $0xf013aa5c
f0124a41:	68 fd 08 00 00       	push   $0x8fd
f0124a46:	68 76 a9 13 f0       	push   $0xf013a976
f0124a4b:	e8 56 b7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a50:	e8 37 f2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124a55:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124a58:	74 17                	je     f0124a71 <test_kheap_virt_addr+0x3e2>
f0124a5a:	83 ec 04             	sub    $0x4,%esp
f0124a5d:	68 90 a9 13 f0       	push   $0xf013a990
f0124a62:	68 fe 08 00 00       	push   $0x8fe
f0124a67:	68 76 a9 13 f0       	push   $0xf013a976
f0124a6c:	e8 35 b7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124a71:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124a74:	e8 6f 7a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124a79:	29 c3                	sub    %eax,%ebx
f0124a7b:	89 d8                	mov    %ebx,%eax
f0124a7d:	83 f8 01             	cmp    $0x1,%eax
f0124a80:	74 17                	je     f0124a99 <test_kheap_virt_addr+0x40a>
f0124a82:	83 ec 04             	sub    $0x4,%esp
f0124a85:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0124a8a:	68 ff 08 00 00       	push   $0x8ff
f0124a8f:	68 76 a9 13 f0       	push   $0xf013a976
f0124a94:	e8 0d b7 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124a99:	e8 4a 7a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124a9e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124aa1:	e8 e6 f1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124aa6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124aa9:	83 ec 0c             	sub    $0xc,%esp
f0124aac:	68 00 08 00 00       	push   $0x800
f0124ab1:	e8 0e 2b fe ff       	call   f01075c4 <kmalloc>
f0124ab6:	83 c4 10             	add    $0x10,%esp
f0124ab9:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124abf:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124ac5:	89 c1                	mov    %eax,%ecx
f0124ac7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124ace:	10 00 00 
f0124ad1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124ad7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124adc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124ae2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124ae8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124aed:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124af3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124af9:	29 d0                	sub    %edx,%eax
f0124afb:	89 c3                	mov    %eax,%ebx
f0124afd:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124b04:	10 00 00 
f0124b07:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124b0c:	0f b6 d0             	movzbl %al,%edx
f0124b0f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124b15:	01 d0                	add    %edx,%eax
f0124b17:	48                   	dec    %eax
f0124b18:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124b1e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124b24:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b29:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124b2f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124b35:	29 d0                	sub    %edx,%eax
f0124b37:	01 c3                	add    %eax,%ebx
f0124b39:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124b40:	10 00 00 
f0124b43:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124b48:	0f b6 c0             	movzbl %al,%eax
f0124b4b:	c1 e0 04             	shl    $0x4,%eax
f0124b4e:	89 c2                	mov    %eax,%edx
f0124b50:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124b56:	01 d0                	add    %edx,%eax
f0124b58:	48                   	dec    %eax
f0124b59:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124b5f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b6a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124b70:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124b76:	29 d0                	sub    %edx,%eax
f0124b78:	01 d8                	add    %ebx,%eax
f0124b7a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124b7f:	39 c1                	cmp    %eax,%ecx
f0124b81:	74 17                	je     f0124b9a <test_kheap_virt_addr+0x50b>
f0124b83:	83 ec 04             	sub    $0x4,%esp
f0124b86:	68 5c aa 13 f0       	push   $0xf013aa5c
f0124b8b:	68 05 09 00 00       	push   $0x905
f0124b90:	68 76 a9 13 f0       	push   $0xf013a976
f0124b95:	e8 0c b6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b9a:	e8 ed f0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124b9f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124ba2:	74 17                	je     f0124bbb <test_kheap_virt_addr+0x52c>
f0124ba4:	83 ec 04             	sub    $0x4,%esp
f0124ba7:	68 90 a9 13 f0       	push   $0xf013a990
f0124bac:	68 06 09 00 00       	push   $0x906
f0124bb1:	68 76 a9 13 f0       	push   $0xf013a976
f0124bb6:	e8 eb b5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124bbb:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124bbe:	e8 25 79 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124bc3:	29 c3                	sub    %eax,%ebx
f0124bc5:	89 d8                	mov    %ebx,%eax
f0124bc7:	83 f8 01             	cmp    $0x1,%eax
f0124bca:	74 17                	je     f0124be3 <test_kheap_virt_addr+0x554>
f0124bcc:	83 ec 04             	sub    $0x4,%esp
f0124bcf:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0124bd4:	68 07 09 00 00       	push   $0x907
f0124bd9:	68 76 a9 13 f0       	push   $0xf013a976
f0124bde:	e8 c3 b5 fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124be3:	e8 00 79 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124be8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124beb:	e8 9c f0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124bf0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124bf3:	83 ec 0c             	sub    $0xc,%esp
f0124bf6:	68 00 1c 00 00       	push   $0x1c00
f0124bfb:	e8 c4 29 fe ff       	call   f01075c4 <kmalloc>
f0124c00:	83 c4 10             	add    $0x10,%esp
f0124c03:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124c09:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124c0f:	89 c1                	mov    %eax,%ecx
f0124c11:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124c18:	10 00 00 
f0124c1b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124c21:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c26:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124c2c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124c32:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c37:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124c3d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124c43:	29 d0                	sub    %edx,%eax
f0124c45:	89 c3                	mov    %eax,%ebx
f0124c47:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124c4e:	10 00 00 
f0124c51:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124c56:	0f b6 d0             	movzbl %al,%edx
f0124c59:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124c5f:	01 d0                	add    %edx,%eax
f0124c61:	48                   	dec    %eax
f0124c62:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124c68:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124c6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c73:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124c79:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124c7f:	29 d0                	sub    %edx,%eax
f0124c81:	01 c3                	add    %eax,%ebx
f0124c83:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124c8a:	10 00 00 
f0124c8d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124c92:	0f b6 c0             	movzbl %al,%eax
f0124c95:	c1 e0 04             	shl    $0x4,%eax
f0124c98:	89 c2                	mov    %eax,%edx
f0124c9a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124ca0:	01 d0                	add    %edx,%eax
f0124ca2:	48                   	dec    %eax
f0124ca3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124ca9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124caf:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cb4:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124cba:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124cc0:	29 d0                	sub    %edx,%eax
f0124cc2:	01 d8                	add    %ebx,%eax
f0124cc4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124cc9:	39 c1                	cmp    %eax,%ecx
f0124ccb:	74 17                	je     f0124ce4 <test_kheap_virt_addr+0x655>
f0124ccd:	83 ec 04             	sub    $0x4,%esp
f0124cd0:	68 5c aa 13 f0       	push   $0xf013aa5c
f0124cd5:	68 0d 09 00 00       	push   $0x90d
f0124cda:	68 76 a9 13 f0       	push   $0xf013a976
f0124cdf:	e8 c2 b4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ce4:	e8 a3 ef fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124ce9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124cec:	74 17                	je     f0124d05 <test_kheap_virt_addr+0x676>
f0124cee:	83 ec 04             	sub    $0x4,%esp
f0124cf1:	68 90 a9 13 f0       	push   $0xf013a990
f0124cf6:	68 0e 09 00 00       	push   $0x90e
f0124cfb:	68 76 a9 13 f0       	push   $0xf013a976
f0124d00:	e8 a1 b4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124d05:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124d08:	e8 db 77 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124d0d:	29 c3                	sub    %eax,%ebx
f0124d0f:	89 d8                	mov    %ebx,%eax
f0124d11:	83 f8 02             	cmp    $0x2,%eax
f0124d14:	74 17                	je     f0124d2d <test_kheap_virt_addr+0x69e>
f0124d16:	83 ec 04             	sub    $0x4,%esp
f0124d19:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0124d1e:	68 0f 09 00 00       	push   $0x90f
f0124d23:	68 76 a9 13 f0       	push   $0xf013a976
f0124d28:	e8 79 b4 fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124d2d:	e8 b6 77 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124d32:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124d35:	e8 52 ef fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124d3a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124d3d:	83 ec 0c             	sub    $0xc,%esp
f0124d40:	68 00 fc 2f 00       	push   $0x2ffc00
f0124d45:	e8 7a 28 fe ff       	call   f01075c4 <kmalloc>
f0124d4a:	83 c4 10             	add    $0x10,%esp
f0124d4d:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124d53:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124d59:	89 c1                	mov    %eax,%ecx
f0124d5b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124d62:	10 00 00 
f0124d65:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124d6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d70:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124d76:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124d7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d81:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124d87:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124d8d:	29 d0                	sub    %edx,%eax
f0124d8f:	89 c3                	mov    %eax,%ebx
f0124d91:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124d98:	10 00 00 
f0124d9b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124da0:	0f b6 d0             	movzbl %al,%edx
f0124da3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124da9:	01 d0                	add    %edx,%eax
f0124dab:	48                   	dec    %eax
f0124dac:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124db2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124db8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dbd:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124dc3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124dc9:	29 d0                	sub    %edx,%eax
f0124dcb:	01 c3                	add    %eax,%ebx
f0124dcd:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124dd4:	10 00 00 
f0124dd7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124ddc:	0f b6 c0             	movzbl %al,%eax
f0124ddf:	c1 e0 04             	shl    $0x4,%eax
f0124de2:	89 c2                	mov    %eax,%edx
f0124de4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124dea:	01 d0                	add    %edx,%eax
f0124dec:	48                   	dec    %eax
f0124ded:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124df3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124df9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dfe:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124e04:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124e0a:	29 d0                	sub    %edx,%eax
f0124e0c:	01 d8                	add    %ebx,%eax
f0124e0e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124e13:	39 c1                	cmp    %eax,%ecx
f0124e15:	74 17                	je     f0124e2e <test_kheap_virt_addr+0x79f>
f0124e17:	83 ec 04             	sub    $0x4,%esp
f0124e1a:	68 5c aa 13 f0       	push   $0xf013aa5c
f0124e1f:	68 15 09 00 00       	push   $0x915
f0124e24:	68 76 a9 13 f0       	push   $0xf013a976
f0124e29:	e8 78 b3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e2e:	e8 59 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124e33:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124e36:	74 17                	je     f0124e4f <test_kheap_virt_addr+0x7c0>
f0124e38:	83 ec 04             	sub    $0x4,%esp
f0124e3b:	68 90 a9 13 f0       	push   $0xf013a990
f0124e40:	68 16 09 00 00       	push   $0x916
f0124e45:	68 76 a9 13 f0       	push   $0xf013a976
f0124e4a:	e8 57 b3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124e4f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124e52:	e8 91 76 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124e57:	29 c3                	sub    %eax,%ebx
f0124e59:	89 d8                	mov    %ebx,%eax
f0124e5b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124e60:	74 17                	je     f0124e79 <test_kheap_virt_addr+0x7ea>
f0124e62:	83 ec 04             	sub    $0x4,%esp
f0124e65:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0124e6a:	68 17 09 00 00       	push   $0x917
f0124e6f:	68 76 a9 13 f0       	push   $0xf013a976
f0124e74:	e8 2d b3 fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124e79:	e8 6a 76 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124e7e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124e81:	e8 06 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124e86:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124e89:	83 ec 0c             	sub    $0xc,%esp
f0124e8c:	68 00 fc 5f 00       	push   $0x5ffc00
f0124e91:	e8 2e 27 fe ff       	call   f01075c4 <kmalloc>
f0124e96:	83 c4 10             	add    $0x10,%esp
f0124e99:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124e9f:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124ea5:	89 c1                	mov    %eax,%ecx
f0124ea7:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0124eae:	10 00 00 
f0124eb1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124eb7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ebc:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0124ec2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124ec8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ecd:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0124ed3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124ed9:	29 d0                	sub    %edx,%eax
f0124edb:	89 c3                	mov    %eax,%ebx
f0124edd:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124ee4:	10 00 00 
f0124ee7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124eec:	0f b6 d0             	movzbl %al,%edx
f0124eef:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124ef5:	01 d0                	add    %edx,%eax
f0124ef7:	48                   	dec    %eax
f0124ef8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124efe:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124f04:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f09:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124f0f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124f15:	29 d0                	sub    %edx,%eax
f0124f17:	01 c3                	add    %eax,%ebx
f0124f19:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124f20:	10 00 00 
f0124f23:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0124f28:	0f b6 c0             	movzbl %al,%eax
f0124f2b:	c1 e0 04             	shl    $0x4,%eax
f0124f2e:	89 c2                	mov    %eax,%edx
f0124f30:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124f36:	01 d0                	add    %edx,%eax
f0124f38:	48                   	dec    %eax
f0124f39:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124f3f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124f45:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f4a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124f50:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124f56:	29 d0                	sub    %edx,%eax
f0124f58:	01 d8                	add    %ebx,%eax
f0124f5a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124f5f:	39 c1                	cmp    %eax,%ecx
f0124f61:	74 17                	je     f0124f7a <test_kheap_virt_addr+0x8eb>
f0124f63:	83 ec 04             	sub    $0x4,%esp
f0124f66:	68 5c aa 13 f0       	push   $0xf013aa5c
f0124f6b:	68 1d 09 00 00       	push   $0x91d
f0124f70:	68 76 a9 13 f0       	push   $0xf013a976
f0124f75:	e8 2c b2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f7a:	e8 0d ed fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124f7f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124f82:	74 17                	je     f0124f9b <test_kheap_virt_addr+0x90c>
f0124f84:	83 ec 04             	sub    $0x4,%esp
f0124f87:	68 90 a9 13 f0       	push   $0xf013a990
f0124f8c:	68 1e 09 00 00       	push   $0x91e
f0124f91:	68 76 a9 13 f0       	push   $0xf013a976
f0124f96:	e8 0b b2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124f9b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124f9e:	e8 45 75 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124fa3:	29 c3                	sub    %eax,%ebx
f0124fa5:	89 d8                	mov    %ebx,%eax
f0124fa7:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124fac:	74 17                	je     f0124fc5 <test_kheap_virt_addr+0x936>
f0124fae:	83 ec 04             	sub    $0x4,%esp
f0124fb1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0124fb6:	68 1f 09 00 00       	push   $0x91f
f0124fbb:	68 76 a9 13 f0       	push   $0xf013a976
f0124fc0:	e8 e1 b1 fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124fc5:	e8 1e 75 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0124fca:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124fcd:	e8 ba ec fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124fd2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124fd5:	83 ec 0c             	sub    $0xc,%esp
f0124fd8:	68 00 38 00 00       	push   $0x3800
f0124fdd:	e8 e2 25 fe ff       	call   f01075c4 <kmalloc>
f0124fe2:	83 c4 10             	add    $0x10,%esp
f0124fe5:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124feb:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0124ff1:	89 c1                	mov    %eax,%ecx
f0124ff3:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0124ffa:	10 00 00 
f0124ffd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125003:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125008:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012500e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125014:	ba 00 00 00 00       	mov    $0x0,%edx
f0125019:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012501f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125025:	29 d0                	sub    %edx,%eax
f0125027:	89 c3                	mov    %eax,%ebx
f0125029:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125030:	10 00 00 
f0125033:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125038:	0f b6 d0             	movzbl %al,%edx
f012503b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125041:	01 d0                	add    %edx,%eax
f0125043:	48                   	dec    %eax
f0125044:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012504a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125050:	ba 00 00 00 00       	mov    $0x0,%edx
f0125055:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012505b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125061:	29 d0                	sub    %edx,%eax
f0125063:	01 c3                	add    %eax,%ebx
f0125065:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012506c:	10 00 00 
f012506f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125074:	0f b6 c0             	movzbl %al,%eax
f0125077:	c1 e0 04             	shl    $0x4,%eax
f012507a:	89 c2                	mov    %eax,%edx
f012507c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125082:	01 d0                	add    %edx,%eax
f0125084:	48                   	dec    %eax
f0125085:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012508b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125091:	ba 00 00 00 00       	mov    $0x0,%edx
f0125096:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012509c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01250a2:	29 d0                	sub    %edx,%eax
f01250a4:	01 d8                	add    %ebx,%eax
f01250a6:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01250ab:	39 c1                	cmp    %eax,%ecx
f01250ad:	74 17                	je     f01250c6 <test_kheap_virt_addr+0xa37>
f01250af:	83 ec 04             	sub    $0x4,%esp
f01250b2:	68 5c aa 13 f0       	push   $0xf013aa5c
f01250b7:	68 25 09 00 00       	push   $0x925
f01250bc:	68 76 a9 13 f0       	push   $0xf013a976
f01250c1:	e8 e0 b0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01250c6:	e8 c1 eb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01250cb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01250ce:	74 17                	je     f01250e7 <test_kheap_virt_addr+0xa58>
f01250d0:	83 ec 04             	sub    $0x4,%esp
f01250d3:	68 90 a9 13 f0       	push   $0xf013a990
f01250d8:	68 26 09 00 00       	push   $0x926
f01250dd:	68 76 a9 13 f0       	push   $0xf013a976
f01250e2:	e8 bf b0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01250e7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01250ea:	e8 f9 73 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01250ef:	29 c3                	sub    %eax,%ebx
f01250f1:	89 d8                	mov    %ebx,%eax
f01250f3:	83 f8 04             	cmp    $0x4,%eax
f01250f6:	74 17                	je     f012510f <test_kheap_virt_addr+0xa80>
f01250f8:	83 ec 04             	sub    $0x4,%esp
f01250fb:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0125100:	68 27 09 00 00       	push   $0x927
f0125105:	68 76 a9 13 f0       	push   $0xf013a976
f012510a:	e8 97 b0 fd ff       	call   f01001a6 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f012510f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125116:	10 00 00 
f0125119:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012511f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125124:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012512a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125130:	ba 00 00 00 00       	mov    $0x0,%edx
f0125135:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012513b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125141:	29 d0                	sub    %edx,%eax
f0125143:	89 c1                	mov    %eax,%ecx
f0125145:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012514c:	10 00 00 
f012514f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125154:	0f b6 d0             	movzbl %al,%edx
f0125157:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012515d:	01 d0                	add    %edx,%eax
f012515f:	48                   	dec    %eax
f0125160:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0125166:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012516c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125171:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0125177:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012517d:	29 d0                	sub    %edx,%eax
f012517f:	01 c1                	add    %eax,%ecx
f0125181:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125188:	10 00 00 
f012518b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125190:	0f b6 c0             	movzbl %al,%eax
f0125193:	c1 e0 04             	shl    $0x4,%eax
f0125196:	89 c2                	mov    %eax,%edx
f0125198:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012519e:	01 d0                	add    %edx,%eax
f01251a0:	48                   	dec    %eax
f01251a1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01251a7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01251ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01251b2:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01251b8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01251be:	29 d0                	sub    %edx,%eax
f01251c0:	01 c1                	add    %eax,%ecx
f01251c2:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01251c9:	10 00 00 
f01251cc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01251d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01251d7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01251dd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01251e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01251e8:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01251ee:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01251f4:	29 d0                	sub    %edx,%eax
f01251f6:	29 c1                	sub    %eax,%ecx
f01251f8:	89 c8                	mov    %ecx,%eax
f01251fa:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01251ff:	c1 e8 0c             	shr    $0xc,%eax
f0125202:	89 c2                	mov    %eax,%edx
f0125204:	4a                   	dec    %edx
f0125205:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f012520b:	c1 e0 02             	shl    $0x2,%eax
f012520e:	8d 50 03             	lea    0x3(%eax),%edx
f0125211:	b8 10 00 00 00       	mov    $0x10,%eax
f0125216:	48                   	dec    %eax
f0125217:	01 d0                	add    %edx,%eax
f0125219:	bf 10 00 00 00       	mov    $0x10,%edi
f012521e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125223:	f7 f7                	div    %edi
f0125225:	6b c0 10             	imul   $0x10,%eax,%eax
f0125228:	29 c4                	sub    %eax,%esp
f012522a:	89 e0                	mov    %esp,%eax
f012522c:	83 c0 03             	add    $0x3,%eax
f012522f:	c1 e8 02             	shr    $0x2,%eax
f0125232:	c1 e0 02             	shl    $0x2,%eax
f0125235:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f012523b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125242:	10 00 00 
f0125245:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012524b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125250:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125256:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012525c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125261:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125267:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012526d:	29 d0                	sub    %edx,%eax
f012526f:	89 c1                	mov    %eax,%ecx
f0125271:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125278:	10 00 00 
f012527b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125280:	0f b6 d0             	movzbl %al,%edx
f0125283:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125289:	01 d0                	add    %edx,%eax
f012528b:	48                   	dec    %eax
f012528c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125292:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125298:	ba 00 00 00 00       	mov    $0x0,%edx
f012529d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01252a3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01252a9:	29 d0                	sub    %edx,%eax
f01252ab:	01 c1                	add    %eax,%ecx
f01252ad:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01252b4:	10 00 00 
f01252b7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01252bc:	0f b6 c0             	movzbl %al,%eax
f01252bf:	c1 e0 04             	shl    $0x4,%eax
f01252c2:	89 c2                	mov    %eax,%edx
f01252c4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01252ca:	01 d0                	add    %edx,%eax
f01252cc:	48                   	dec    %eax
f01252cd:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01252d3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01252d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01252de:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01252e4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01252ea:	29 d0                	sub    %edx,%eax
f01252ec:	01 c1                	add    %eax,%ecx
f01252ee:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01252f5:	10 00 00 
f01252f8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01252fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125303:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125309:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012530f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125314:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012531a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125320:	29 d0                	sub    %edx,%eax
f0125322:	29 c1                	sub    %eax,%ecx
f0125324:	89 c8                	mov    %ecx,%eax
f0125326:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012532b:	c1 e8 0c             	shr    $0xc,%eax
f012532e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125334:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012533b:	10 00 00 
f012533e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125344:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125349:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012534f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125355:	ba 00 00 00 00       	mov    $0x0,%edx
f012535a:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125360:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125366:	29 d0                	sub    %edx,%eax
f0125368:	89 c1                	mov    %eax,%ecx
f012536a:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125371:	10 00 00 
f0125374:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125379:	0f b6 d0             	movzbl %al,%edx
f012537c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125382:	01 d0                	add    %edx,%eax
f0125384:	48                   	dec    %eax
f0125385:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012538b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125391:	ba 00 00 00 00       	mov    $0x0,%edx
f0125396:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012539c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01253a2:	29 d0                	sub    %edx,%eax
f01253a4:	01 c1                	add    %eax,%ecx
f01253a6:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01253ad:	10 00 00 
f01253b0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01253b5:	0f b6 c0             	movzbl %al,%eax
f01253b8:	c1 e0 04             	shl    $0x4,%eax
f01253bb:	89 c2                	mov    %eax,%edx
f01253bd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01253c3:	01 d0                	add    %edx,%eax
f01253c5:	48                   	dec    %eax
f01253c6:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01253cc:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01253d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01253d7:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01253dd:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01253e3:	29 d0                	sub    %edx,%eax
f01253e5:	01 c8                	add    %ecx,%eax
f01253e7:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01253ec:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f01253f2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01253f9:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125400:	10 00 00 
f0125403:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125409:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012540e:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125414:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012541a:	ba 00 00 00 00       	mov    $0x0,%edx
f012541f:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125425:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012542b:	29 d0                	sub    %edx,%eax
f012542d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125432:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125435:	e9 21 01 00 00       	jmp    f012555b <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012543a:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012543f:	83 ec 04             	sub    $0x4,%esp
f0125442:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125448:	52                   	push   %edx
f0125449:	ff 75 e4             	pushl  -0x1c(%ebp)
f012544c:	50                   	push   %eax
f012544d:	e8 17 15 fe ff       	call   f0106969 <get_page_table>
f0125452:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125455:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012545b:	85 c0                	test   %eax,%eax
f012545d:	75 17                	jne    f0125476 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012545f:	83 ec 04             	sub    $0x4,%esp
f0125462:	68 18 b3 13 f0       	push   $0xf013b318
f0125467:	68 38 09 00 00       	push   $0x938
f012546c:	68 76 a9 13 f0       	push   $0xf013a976
f0125471:	e8 30 ad fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125476:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125479:	c1 e8 0c             	shr    $0xc,%eax
f012547c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125481:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125484:	e9 ba 00 00 00       	jmp    f0125543 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125489:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012548f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125492:	c1 e2 02             	shl    $0x2,%edx
f0125495:	01 d0                	add    %edx,%eax
f0125497:	8b 00                	mov    (%eax),%eax
f0125499:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012549e:	89 c1                	mov    %eax,%ecx
f01254a0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01254a6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01254a9:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01254ac:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01254b2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01254b5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01254b8:	83 ec 0c             	sub    $0xc,%esp
f01254bb:	50                   	push   %eax
f01254bc:	e8 37 21 fe ff       	call   f01075f8 <kheap_virtual_address>
f01254c1:	83 c4 10             	add    $0x10,%esp
f01254c4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f01254ca:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01254d0:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01254d3:	74 61                	je     f0125536 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01254d5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01254db:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01254de:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01254e1:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f01254e7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01254ea:	c1 e1 02             	shl    $0x2,%ecx
f01254ed:	01 ca                	add    %ecx,%edx
f01254ef:	8b 12                	mov    (%edx),%edx
f01254f1:	89 d1                	mov    %edx,%ecx
f01254f3:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f01254f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01254fc:	c1 e2 0c             	shl    $0xc,%edx
f01254ff:	89 d3                	mov    %edx,%ebx
f0125501:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125504:	01 da                	add    %ebx,%edx
f0125506:	83 ec 0c             	sub    $0xc,%esp
f0125509:	50                   	push   %eax
f012550a:	51                   	push   %ecx
f012550b:	52                   	push   %edx
f012550c:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0125512:	68 0c b4 13 f0       	push   $0xf013b40c
f0125517:	e8 11 b7 fd ff       	call   f0100c2d <cprintf>
f012551c:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012551f:	83 ec 04             	sub    $0x4,%esp
f0125522:	68 4f b4 13 f0       	push   $0xf013b44f
f0125527:	68 42 09 00 00       	push   $0x942
f012552c:	68 76 a9 13 f0       	push   $0xf013a976
f0125531:	e8 70 ac fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0125536:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012553d:	ff 45 dc             	incl   -0x24(%ebp)
f0125540:	ff 45 e0             	incl   -0x20(%ebp)
f0125543:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125546:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f012554c:	7d 0d                	jge    f012555b <test_kheap_virt_addr+0xecc>
f012554e:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0125555:	0f 8e 2e ff ff ff    	jle    f0125489 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012555b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012555e:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0125564:	0f 82 d0 fe ff ff    	jb     f012543a <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f012556a:	83 ec 0c             	sub    $0xc,%esp
f012556d:	68 6c b4 13 f0       	push   $0xf013b46c
f0125572:	e8 b6 b6 fd ff       	call   f0100c2d <cprintf>
f0125577:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012557a:	e8 69 6f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012557f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125585:	e8 02 e7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012558a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0125590:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125596:	83 ec 0c             	sub    $0xc,%esp
f0125599:	50                   	push   %eax
f012559a:	e8 3f 20 fe ff       	call   f01075de <kfree>
f012559f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01255a2:	e8 e5 e6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01255a7:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01255ad:	74 17                	je     f01255c6 <test_kheap_virt_addr+0xf37>
f01255af:	83 ec 04             	sub    $0x4,%esp
f01255b2:	68 90 a9 13 f0       	push   $0xf013a990
f01255b7:	68 50 09 00 00       	push   $0x950
f01255bc:	68 76 a9 13 f0       	push   $0xf013a976
f01255c1:	e8 e0 ab fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01255c6:	e8 1d 6f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01255cb:	89 c2                	mov    %eax,%edx
f01255cd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01255d3:	29 c2                	sub    %eax,%edx
f01255d5:	89 d0                	mov    %edx,%eax
f01255d7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01255dc:	74 17                	je     f01255f5 <test_kheap_virt_addr+0xf66>
f01255de:	83 ec 04             	sub    $0x4,%esp
f01255e1:	68 00 b1 13 f0       	push   $0xf013b100
f01255e6:	68 51 09 00 00       	push   $0x951
f01255eb:	68 76 a9 13 f0       	push   $0xf013a976
f01255f0:	e8 b1 ab fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01255f5:	e8 ee 6e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01255fa:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125600:	e8 87 e6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125605:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f012560b:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0125611:	83 ec 0c             	sub    $0xc,%esp
f0125614:	50                   	push   %eax
f0125615:	e8 c4 1f fe ff       	call   f01075de <kfree>
f012561a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012561d:	e8 6a e6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125622:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125628:	74 17                	je     f0125641 <test_kheap_virt_addr+0xfb2>
f012562a:	83 ec 04             	sub    $0x4,%esp
f012562d:	68 90 a9 13 f0       	push   $0xf013a990
f0125632:	68 57 09 00 00       	push   $0x957
f0125637:	68 76 a9 13 f0       	push   $0xf013a976
f012563c:	e8 65 ab fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125641:	e8 a2 6e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0125646:	89 c2                	mov    %eax,%edx
f0125648:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012564e:	29 c2                	sub    %eax,%edx
f0125650:	89 d0                	mov    %edx,%eax
f0125652:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125657:	74 17                	je     f0125670 <test_kheap_virt_addr+0xfe1>
f0125659:	83 ec 04             	sub    $0x4,%esp
f012565c:	68 00 b1 13 f0       	push   $0xf013b100
f0125661:	68 58 09 00 00       	push   $0x958
f0125666:	68 76 a9 13 f0       	push   $0xf013a976
f012566b:	e8 36 ab fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125670:	e8 73 6e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0125675:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012567b:	e8 0c e6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125680:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0125686:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012568c:	83 ec 0c             	sub    $0xc,%esp
f012568f:	50                   	push   %eax
f0125690:	e8 49 1f fe ff       	call   f01075de <kfree>
f0125695:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125698:	e8 ef e5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012569d:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01256a3:	74 17                	je     f01256bc <test_kheap_virt_addr+0x102d>
f01256a5:	83 ec 04             	sub    $0x4,%esp
f01256a8:	68 90 a9 13 f0       	push   $0xf013a990
f01256ad:	68 5e 09 00 00       	push   $0x95e
f01256b2:	68 76 a9 13 f0       	push   $0xf013a976
f01256b7:	e8 ea aa fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01256bc:	e8 27 6e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01256c1:	89 c2                	mov    %eax,%edx
f01256c3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01256c9:	29 c2                	sub    %eax,%edx
f01256cb:	89 d0                	mov    %edx,%eax
f01256cd:	3d 00 06 00 00       	cmp    $0x600,%eax
f01256d2:	74 17                	je     f01256eb <test_kheap_virt_addr+0x105c>
f01256d4:	83 ec 04             	sub    $0x4,%esp
f01256d7:	68 00 b1 13 f0       	push   $0xf013b100
f01256dc:	68 5f 09 00 00       	push   $0x95f
f01256e1:	68 76 a9 13 f0       	push   $0xf013a976
f01256e6:	e8 bb aa fd ff       	call   f01001a6 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01256eb:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01256f2:	10 00 00 
f01256f5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01256fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125700:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125706:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012570c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125711:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125717:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012571d:	29 d0                	sub    %edx,%eax
f012571f:	89 c1                	mov    %eax,%ecx
f0125721:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0125728:	10 00 00 
f012572b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125730:	0f b6 d0             	movzbl %al,%edx
f0125733:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125739:	01 d0                	add    %edx,%eax
f012573b:	48                   	dec    %eax
f012573c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0125742:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125748:	ba 00 00 00 00       	mov    $0x0,%edx
f012574d:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0125753:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125759:	29 d0                	sub    %edx,%eax
f012575b:	01 c1                	add    %eax,%ecx
f012575d:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0125764:	10 00 00 
f0125767:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012576c:	0f b6 c0             	movzbl %al,%eax
f012576f:	c1 e0 04             	shl    $0x4,%eax
f0125772:	89 c2                	mov    %eax,%edx
f0125774:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012577a:	01 d0                	add    %edx,%eax
f012577c:	48                   	dec    %eax
f012577d:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0125783:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125789:	ba 00 00 00 00       	mov    $0x0,%edx
f012578e:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0125794:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012579a:	29 d0                	sub    %edx,%eax
f012579c:	01 c8                	add    %ecx,%eax
f012579e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01257a3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f01257a9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f01257b0:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01257b7:	10 00 00 
f01257ba:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01257c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01257c5:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01257cb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01257d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01257d6:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01257dc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01257e2:	29 d0                	sub    %edx,%eax
f01257e4:	89 c1                	mov    %eax,%ecx
f01257e6:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01257ed:	10 00 00 
f01257f0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01257f5:	0f b6 d0             	movzbl %al,%edx
f01257f8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01257fe:	01 d0                	add    %edx,%eax
f0125800:	48                   	dec    %eax
f0125801:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125807:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012580d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125812:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125818:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012581e:	29 d0                	sub    %edx,%eax
f0125820:	01 c1                	add    %eax,%ecx
f0125822:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125829:	10 00 00 
f012582c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125831:	0f b6 c0             	movzbl %al,%eax
f0125834:	c1 e0 04             	shl    $0x4,%eax
f0125837:	89 c2                	mov    %eax,%edx
f0125839:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012583f:	01 d0                	add    %edx,%eax
f0125841:	48                   	dec    %eax
f0125842:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125848:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012584e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125853:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125859:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012585f:	29 d0                	sub    %edx,%eax
f0125861:	01 c1                	add    %eax,%ecx
f0125863:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f012586a:	10 00 00 
f012586d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125873:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125878:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f012587e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125884:	ba 00 00 00 00       	mov    $0x0,%edx
f0125889:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f012588f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125895:	29 d0                	sub    %edx,%eax
f0125897:	29 c1                	sub    %eax,%ecx
f0125899:	89 c8                	mov    %ecx,%eax
f012589b:	05 00 40 00 00       	add    $0x4000,%eax
f01258a0:	c1 e8 0c             	shr    $0xc,%eax
f01258a3:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01258a9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01258af:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01258b2:	eb 41                	jmp    f01258f5 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01258b4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01258ba:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01258bd:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01258c0:	83 ec 0c             	sub    $0xc,%esp
f01258c3:	50                   	push   %eax
f01258c4:	e8 2f 1d fe ff       	call   f01075f8 <kheap_virtual_address>
f01258c9:	83 c4 10             	add    $0x10,%esp
f01258cc:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f01258d2:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f01258d9:	74 17                	je     f01258f2 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f01258db:	83 ec 04             	sub    $0x4,%esp
f01258de:	68 4f b4 13 f0       	push   $0xf013b44f
f01258e3:	68 70 09 00 00       	push   $0x970
f01258e8:	68 76 a9 13 f0       	push   $0xf013a976
f01258ed:	e8 b4 a8 fd ff       	call   f01001a6 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01258f2:	ff 45 d8             	incl   -0x28(%ebp)
f01258f5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01258fb:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125901:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125904:	39 c2                	cmp    %eax,%edx
f0125906:	77 ac                	ja     f01258b4 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125908:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012590e:	05 00 04 00 00       	add    $0x400,%eax
f0125913:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125916:	e9 83 00 00 00       	jmp    f012599e <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012591b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125921:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125924:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125927:	83 ec 0c             	sub    $0xc,%esp
f012592a:	50                   	push   %eax
f012592b:	e8 c8 1c fe ff       	call   f01075f8 <kheap_virtual_address>
f0125930:	83 c4 10             	add    $0x10,%esp
f0125933:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125939:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125940:	10 00 00 
f0125943:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125949:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012594e:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125954:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012595a:	ba 00 00 00 00       	mov    $0x0,%edx
f012595f:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125965:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012596b:	29 d0                	sub    %edx,%eax
f012596d:	89 c2                	mov    %eax,%edx
f012596f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125972:	c1 e0 0c             	shl    $0xc,%eax
f0125975:	01 d0                	add    %edx,%eax
f0125977:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012597c:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0125982:	74 17                	je     f012599b <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0125984:	83 ec 04             	sub    $0x4,%esp
f0125987:	68 4f b4 13 f0       	push   $0xf013b44f
f012598c:	68 7a 09 00 00       	push   $0x97a
f0125991:	68 76 a9 13 f0       	push   $0xf013a976
f0125996:	e8 0b a8 fd ff       	call   f01001a6 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012599b:	ff 45 d8             	incl   -0x28(%ebp)
f012599e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01259a4:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01259aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01259ad:	39 c2                	cmp    %eax,%edx
f01259af:	0f 87 66 ff ff ff    	ja     f012591b <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01259b5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01259bb:	05 04 07 00 00       	add    $0x704,%eax
f01259c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01259c3:	eb 41                	jmp    f0125a06 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01259c5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01259cb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01259ce:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01259d1:	83 ec 0c             	sub    $0xc,%esp
f01259d4:	50                   	push   %eax
f01259d5:	e8 1e 1c fe ff       	call   f01075f8 <kheap_virtual_address>
f01259da:	83 c4 10             	add    $0x10,%esp
f01259dd:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f01259e3:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f01259ea:	74 17                	je     f0125a03 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f01259ec:	83 ec 04             	sub    $0x4,%esp
f01259ef:	68 4f b4 13 f0       	push   $0xf013b44f
f01259f4:	68 83 09 00 00       	push   $0x983
f01259f9:	68 76 a9 13 f0       	push   $0xf013a976
f01259fe:	e8 a3 a7 fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125a03:	ff 45 d8             	incl   -0x28(%ebp)
f0125a06:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a0c:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0125a12:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125a15:	39 c2                	cmp    %eax,%edx
f0125a17:	77 ac                	ja     f01259c5 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125a19:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a1f:	05 04 0d 00 00       	add    $0xd04,%eax
f0125a24:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125a27:	e9 83 00 00 00       	jmp    f0125aaf <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125a2c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125a32:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125a35:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125a38:	83 ec 0c             	sub    $0xc,%esp
f0125a3b:	50                   	push   %eax
f0125a3c:	e8 b7 1b fe ff       	call   f01075f8 <kheap_virtual_address>
f0125a41:	83 c4 10             	add    $0x10,%esp
f0125a44:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125a4a:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125a51:	10 00 00 
f0125a54:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125a5a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a5f:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0125a65:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125a6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a70:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0125a76:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125a7c:	29 d0                	sub    %edx,%eax
f0125a7e:	89 c2                	mov    %eax,%edx
f0125a80:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125a83:	c1 e0 0c             	shl    $0xc,%eax
f0125a86:	01 d0                	add    %edx,%eax
f0125a88:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125a8d:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0125a93:	74 17                	je     f0125aac <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0125a95:	83 ec 04             	sub    $0x4,%esp
f0125a98:	68 4f b4 13 f0       	push   $0xf013b44f
f0125a9d:	68 8c 09 00 00       	push   $0x98c
f0125aa2:	68 76 a9 13 f0       	push   $0xf013a976
f0125aa7:	e8 fa a6 fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125aac:	ff 45 d8             	incl   -0x28(%ebp)
f0125aaf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125ab5:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125abb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125abe:	39 c2                	cmp    %eax,%edx
f0125ac0:	0f 87 66 ff ff ff    	ja     f0125a2c <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0125ac6:	83 ec 0c             	sub    $0xc,%esp
f0125ac9:	68 01 ab 13 f0       	push   $0xf013ab01
f0125ace:	e8 5a b1 fd ff       	call   f0100c2d <cprintf>
f0125ad3:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125ad6:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0125add:	eb 54                	jmp    f0125b33 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0125adf:	83 ec 0c             	sub    $0xc,%esp
f0125ae2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125ae5:	e8 0e 1b fe ff       	call   f01075f8 <kheap_virtual_address>
f0125aea:	83 c4 10             	add    $0x10,%esp
f0125aed:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0125af3:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0125afa:	74 30                	je     f0125b2c <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0125afc:	83 ec 04             	sub    $0x4,%esp
f0125aff:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125b05:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125b08:	68 9d b4 13 f0       	push   $0xf013b49d
f0125b0d:	e8 1b b1 fd ff       	call   f0100c2d <cprintf>
f0125b12:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0125b15:	83 ec 04             	sub    $0x4,%esp
f0125b18:	68 4f b4 13 f0       	push   $0xf013b44f
f0125b1d:	68 9c 09 00 00       	push   $0x99c
f0125b22:	68 76 a9 13 f0       	push   $0xf013a976
f0125b27:	e8 7a a6 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125b2c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125b33:	b8 fc 1f 6c 00       	mov    $0x6c1ffc,%eax
f0125b38:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125b3b:	72 a2                	jb     f0125adf <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125b3d:	83 ec 0c             	sub    $0xc,%esp
f0125b40:	68 5a ab 13 f0       	push   $0xf013ab5a
f0125b45:	e8 e3 b0 fd ff       	call   f0100c2d <cprintf>
f0125b4a:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125b4d:	83 ec 0c             	sub    $0xc,%esp
f0125b50:	68 bc b4 13 f0       	push   $0xf013b4bc
f0125b55:	e8 d3 b0 fd ff       	call   f0100c2d <cprintf>
f0125b5a:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125b5d:	b8 01 00 00 00       	mov    $0x1,%eax
f0125b62:	89 f4                	mov    %esi,%esp

}
f0125b64:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125b67:	5b                   	pop    %ebx
f0125b68:	5e                   	pop    %esi
f0125b69:	5f                   	pop    %edi
f0125b6a:	5d                   	pop    %ebp
f0125b6b:	c3                   	ret    

f0125b6c <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125b6c:	55                   	push   %ebp
f0125b6d:	89 e5                	mov    %esp,%ebp
f0125b6f:	57                   	push   %edi
f0125b70:	56                   	push   %esi
f0125b71:	53                   	push   %ebx
f0125b72:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125b78:	a0 cf 1c 19 f0       	mov    0xf0191ccf,%al
f0125b7d:	84 c0                	test   %al,%al
f0125b7f:	74 56                	je     f0125bd7 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125b81:	c6 05 cf 1c 19 f0 00 	movb   $0x0,0xf0191ccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125b88:	e8 5b 69 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0125b8d:	a3 f8 1f 6c f0       	mov    %eax,0xf06c1ff8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0125b92:	e8 f5 e0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125b97:	a3 f4 1f 6c f0       	mov    %eax,0xf06c1ff4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125b9c:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125ba2:	bb 19 b6 13 f0       	mov    $0xf013b619,%ebx
f0125ba7:	ba 11 00 00 00       	mov    $0x11,%edx
f0125bac:	89 c7                	mov    %eax,%edi
f0125bae:	89 de                	mov    %ebx,%esi
f0125bb0:	89 d1                	mov    %edx,%ecx
f0125bb2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0125bb4:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0125bba:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125bbf:	b0 00                	mov    $0x0,%al
f0125bc1:	89 d7                	mov    %edx,%edi
f0125bc3:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0125bc5:	83 ec 0c             	sub    $0xc,%esp
f0125bc8:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125bce:	50                   	push   %eax
f0125bcf:	e8 bb b0 fd ff       	call   f0100c8f <execute_command>
f0125bd4:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0125bd7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125bde:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125be5:	a1 44 fa 6b f0       	mov    0xf06bfa44,%eax
f0125bea:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125bed:	eb 2d                	jmp    f0125c1c <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0125bef:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125bf2:	05 18 da 01 00       	add    $0x1da18,%eax
f0125bf7:	83 ec 08             	sub    $0x8,%esp
f0125bfa:	68 03 b5 13 f0       	push   $0xf013b503
f0125bff:	50                   	push   %eax
f0125c00:	e8 5c ad 00 00       	call   f0130961 <strcmp>
f0125c05:	83 c4 10             	add    $0x10,%esp
f0125c08:	85 c0                	test   %eax,%eax
f0125c0a:	75 08                	jne    f0125c14 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0125c0c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125c0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0125c12:	eb 2f                	jmp    f0125c43 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125c14:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f0125c19:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125c1c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125c20:	74 08                	je     f0125c2a <test_three_creation_functions+0xbe>
f0125c22:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125c25:	8b 40 44             	mov    0x44(%eax),%eax
f0125c28:	eb 05                	jmp    f0125c2f <test_three_creation_functions+0xc3>
f0125c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0125c2f:	a3 4c fa 6b f0       	mov    %eax,0xf06bfa4c
f0125c34:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f0125c39:	85 c0                	test   %eax,%eax
f0125c3b:	75 b2                	jne    f0125bef <test_three_creation_functions+0x83>
f0125c3d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125c41:	75 ac                	jne    f0125bef <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0125c43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125c46:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f0125c4c:	85 c0                	test   %eax,%eax
f0125c4e:	74 17                	je     f0125c67 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125c50:	83 ec 04             	sub    $0x4,%esp
f0125c53:	68 0c b5 13 f0       	push   $0xf013b50c
f0125c58:	68 c6 09 00 00       	push   $0x9c6
f0125c5d:	68 76 a9 13 f0       	push   $0xf013a976
f0125c62:	e8 3f a5 fd ff       	call   f01001a6 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125c67:	83 ec 0c             	sub    $0xc,%esp
f0125c6a:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125c6d:	e8 eb 1c fe ff       	call   f010795d <env_page_ws_get_size>
f0125c72:	83 c4 10             	add    $0x10,%esp
f0125c75:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125c78:	e8 6b 68 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0125c7d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125c80:	e8 07 e0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125c85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c88:	a1 f4 1f 6c f0       	mov    0xf06c1ff4,%eax
f0125c8d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125c90:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125c93:	74 17                	je     f0125cac <test_three_creation_functions+0x140>
f0125c95:	83 ec 04             	sub    $0x4,%esp
f0125c98:	68 90 a9 13 f0       	push   $0xf013a990
f0125c9d:	68 cc 09 00 00       	push   $0x9cc
f0125ca2:	68 76 a9 13 f0       	push   $0xf013a976
f0125ca7:	e8 fa a4 fd ff       	call   f01001a6 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125cac:	a1 f8 1f 6c f0       	mov    0xf06c1ff8,%eax
f0125cb1:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0125cb4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125cb7:	83 c2 15             	add    $0x15,%edx
f0125cba:	39 d0                	cmp    %edx,%eax
f0125cbc:	74 17                	je     f0125cd5 <test_three_creation_functions+0x169>
f0125cbe:	83 ec 04             	sub    $0x4,%esp
f0125cc1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0125cc6:	68 ce 09 00 00       	push   $0x9ce
f0125ccb:	68 76 a9 13 f0       	push   $0xf013a976
f0125cd0:	e8 d1 a4 fd ff       	call   f01001a6 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0125cd5:	83 ec 0c             	sub    $0xc,%esp
f0125cd8:	68 00 10 00 00       	push   $0x1000
f0125cdd:	e8 e2 18 fe ff       	call   f01075c4 <kmalloc>
f0125ce2:	83 c4 10             	add    $0x10,%esp
f0125ce5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0125ce8:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0125cef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0125cf2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125cf7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0125cfa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125cfd:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d02:	f7 75 cc             	divl   -0x34(%ebp)
f0125d05:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125d08:	29 d0                	sub    %edx,%eax
f0125d0a:	89 c1                	mov    %eax,%ecx
f0125d0c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0125d13:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125d18:	0f b6 d0             	movzbl %al,%edx
f0125d1b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125d1e:	01 d0                	add    %edx,%eax
f0125d20:	48                   	dec    %eax
f0125d21:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125d24:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125d27:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d2c:	f7 75 c4             	divl   -0x3c(%ebp)
f0125d2f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125d32:	29 d0                	sub    %edx,%eax
f0125d34:	01 c1                	add    %eax,%ecx
f0125d36:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0125d3d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125d42:	0f b6 c0             	movzbl %al,%eax
f0125d45:	c1 e0 04             	shl    $0x4,%eax
f0125d48:	89 c2                	mov    %eax,%edx
f0125d4a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125d4d:	01 d0                	add    %edx,%eax
f0125d4f:	48                   	dec    %eax
f0125d50:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0125d53:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125d56:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d5b:	f7 75 bc             	divl   -0x44(%ebp)
f0125d5e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125d61:	29 d0                	sub    %edx,%eax
f0125d63:	01 c8                	add    %ecx,%eax
f0125d65:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0125d6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125d6e:	39 c2                	cmp    %eax,%edx
f0125d70:	74 17                	je     f0125d89 <test_three_creation_functions+0x21d>
f0125d72:	83 ec 04             	sub    $0x4,%esp
f0125d75:	68 5c b5 13 f0       	push   $0xf013b55c
f0125d7a:	68 d2 09 00 00       	push   $0x9d2
f0125d7f:	68 76 a9 13 f0       	push   $0xf013a976
f0125d84:	e8 1d a4 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125d89:	83 ec 0c             	sub    $0xc,%esp
f0125d8c:	68 cc b5 13 f0       	push   $0xf013b5cc
f0125d91:	e8 97 ae fd ff       	call   f0100c2d <cprintf>
f0125d96:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125d99:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125d9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125da1:	5b                   	pop    %ebx
f0125da2:	5e                   	pop    %esi
f0125da3:	5f                   	pop    %edi
f0125da4:	5d                   	pop    %ebp
f0125da5:	c3                   	ret    

f0125da6 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0125da6:	55                   	push   %ebp
f0125da7:	89 e5                	mov    %esp,%ebp
f0125da9:	57                   	push   %edi
f0125daa:	53                   	push   %ebx
f0125dab:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0125db1:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0125db5:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0125db9:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0125dbf:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0125dc5:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125dcc:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125dd3:	e8 10 67 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0125dd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125ddb:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0125de1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125de6:	b8 00 00 00 00       	mov    $0x0,%eax
f0125deb:	89 d7                	mov    %edx,%edi
f0125ded:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125def:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0125df5:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125dfa:	b8 00 00 00 00       	mov    $0x0,%eax
f0125dff:	89 d7                	mov    %edx,%edi
f0125e01:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125e03:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125e09:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125e0e:	b8 00 00 00 00       	mov    $0x0,%eax
f0125e13:	89 d7                	mov    %edx,%edi
f0125e15:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e17:	e8 cc 66 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0125e1c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e1f:	e8 68 de fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125e24:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125e27:	83 ec 0c             	sub    $0xc,%esp
f0125e2a:	68 00 fc 1f 00       	push   $0x1ffc00
f0125e2f:	e8 90 17 fe ff       	call   f01075c4 <kmalloc>
f0125e34:	83 c4 10             	add    $0x10,%esp
f0125e37:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e3d:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0125e43:	89 c1                	mov    %eax,%ecx
f0125e45:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125e4c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125e4f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e54:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125e57:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125e5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e5f:	f7 75 c8             	divl   -0x38(%ebp)
f0125e62:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125e65:	29 d0                	sub    %edx,%eax
f0125e67:	89 c3                	mov    %eax,%ebx
f0125e69:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0125e70:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125e75:	0f b6 d0             	movzbl %al,%edx
f0125e78:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125e7b:	01 d0                	add    %edx,%eax
f0125e7d:	48                   	dec    %eax
f0125e7e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125e81:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125e84:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e89:	f7 75 c0             	divl   -0x40(%ebp)
f0125e8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125e8f:	29 d0                	sub    %edx,%eax
f0125e91:	01 c3                	add    %eax,%ebx
f0125e93:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0125e9a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125e9f:	0f b6 c0             	movzbl %al,%eax
f0125ea2:	c1 e0 04             	shl    $0x4,%eax
f0125ea5:	89 c2                	mov    %eax,%edx
f0125ea7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125eaa:	01 d0                	add    %edx,%eax
f0125eac:	48                   	dec    %eax
f0125ead:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0125eb0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125eb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125eb8:	f7 75 b8             	divl   -0x48(%ebp)
f0125ebb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125ebe:	29 d0                	sub    %edx,%eax
f0125ec0:	01 d8                	add    %ebx,%eax
f0125ec2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125ec7:	39 c1                	cmp    %eax,%ecx
f0125ec9:	74 17                	je     f0125ee2 <test_kfreeall+0x13c>
f0125ecb:	83 ec 04             	sub    $0x4,%esp
f0125ece:	68 5c aa 13 f0       	push   $0xf013aa5c
f0125ed3:	68 f9 09 00 00       	push   $0x9f9
f0125ed8:	68 76 a9 13 f0       	push   $0xf013a976
f0125edd:	e8 c4 a2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ee2:	e8 a5 dd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125ee7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125eea:	74 17                	je     f0125f03 <test_kfreeall+0x15d>
f0125eec:	83 ec 04             	sub    $0x4,%esp
f0125eef:	68 90 a9 13 f0       	push   $0xf013a990
f0125ef4:	68 fa 09 00 00       	push   $0x9fa
f0125ef9:	68 76 a9 13 f0       	push   $0xf013a976
f0125efe:	e8 a3 a2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f03:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125f06:	e8 dd 65 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0125f0b:	29 c3                	sub    %eax,%ebx
f0125f0d:	89 d8                	mov    %ebx,%eax
f0125f0f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125f14:	74 17                	je     f0125f2d <test_kfreeall+0x187>
f0125f16:	83 ec 04             	sub    $0x4,%esp
f0125f19:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0125f1e:	68 fb 09 00 00       	push   $0x9fb
f0125f23:	68 76 a9 13 f0       	push   $0xf013a976
f0125f28:	e8 79 a2 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0125f2d:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0125f34:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125f37:	e8 ac 65 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0125f3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f3f:	e8 48 dd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125f44:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125f47:	83 ec 0c             	sub    $0xc,%esp
f0125f4a:	68 00 fc 1f 00       	push   $0x1ffc00
f0125f4f:	e8 70 16 fe ff       	call   f01075c4 <kmalloc>
f0125f54:	83 c4 10             	add    $0x10,%esp
f0125f57:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125f5d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0125f63:	89 c1                	mov    %eax,%ecx
f0125f65:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125f6c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125f6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f74:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0125f77:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f7f:	f7 75 b0             	divl   -0x50(%ebp)
f0125f82:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125f85:	29 d0                	sub    %edx,%eax
f0125f87:	89 c3                	mov    %eax,%ebx
f0125f89:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0125f90:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125f95:	0f b6 d0             	movzbl %al,%edx
f0125f98:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125f9b:	01 d0                	add    %edx,%eax
f0125f9d:	48                   	dec    %eax
f0125f9e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0125fa1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125fa4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fa9:	f7 75 a8             	divl   -0x58(%ebp)
f0125fac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125faf:	29 d0                	sub    %edx,%eax
f0125fb1:	01 c3                	add    %eax,%ebx
f0125fb3:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125fba:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0125fbf:	0f b6 c0             	movzbl %al,%eax
f0125fc2:	c1 e0 04             	shl    $0x4,%eax
f0125fc5:	89 c2                	mov    %eax,%edx
f0125fc7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125fca:	01 d0                	add    %edx,%eax
f0125fcc:	48                   	dec    %eax
f0125fcd:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0125fd0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125fd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fd8:	f7 75 a0             	divl   -0x60(%ebp)
f0125fdb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125fde:	29 d0                	sub    %edx,%eax
f0125fe0:	01 d8                	add    %ebx,%eax
f0125fe2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125fe7:	39 c1                	cmp    %eax,%ecx
f0125fe9:	74 17                	je     f0126002 <test_kfreeall+0x25c>
f0125feb:	83 ec 04             	sub    $0x4,%esp
f0125fee:	68 5c aa 13 f0       	push   $0xf013aa5c
f0125ff3:	68 02 0a 00 00       	push   $0xa02
f0125ff8:	68 76 a9 13 f0       	push   $0xf013a976
f0125ffd:	e8 a4 a1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126002:	e8 85 dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126007:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012600a:	74 17                	je     f0126023 <test_kfreeall+0x27d>
f012600c:	83 ec 04             	sub    $0x4,%esp
f012600f:	68 90 a9 13 f0       	push   $0xf013a990
f0126014:	68 03 0a 00 00       	push   $0xa03
f0126019:	68 76 a9 13 f0       	push   $0xf013a976
f012601e:	e8 83 a1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126023:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126026:	e8 bd 64 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012602b:	29 c3                	sub    %eax,%ebx
f012602d:	89 d8                	mov    %ebx,%eax
f012602f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126034:	74 17                	je     f012604d <test_kfreeall+0x2a7>
f0126036:	83 ec 04             	sub    $0x4,%esp
f0126039:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012603e:	68 04 0a 00 00       	push   $0xa04
f0126043:	68 76 a9 13 f0       	push   $0xf013a976
f0126048:	e8 59 a1 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012604d:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126054:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126057:	e8 8c 64 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012605c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012605f:	e8 28 dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126064:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126067:	83 ec 0c             	sub    $0xc,%esp
f012606a:	68 00 08 00 00       	push   $0x800
f012606f:	e8 50 15 fe ff       	call   f01075c4 <kmalloc>
f0126074:	83 c4 10             	add    $0x10,%esp
f0126077:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012607d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126083:	89 c1                	mov    %eax,%ecx
f0126085:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012608c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012608f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126094:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126097:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012609a:	ba 00 00 00 00       	mov    $0x0,%edx
f012609f:	f7 75 98             	divl   -0x68(%ebp)
f01260a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01260a5:	29 d0                	sub    %edx,%eax
f01260a7:	89 c3                	mov    %eax,%ebx
f01260a9:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01260b0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01260b5:	0f b6 d0             	movzbl %al,%edx
f01260b8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01260bb:	01 d0                	add    %edx,%eax
f01260bd:	48                   	dec    %eax
f01260be:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01260c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01260c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01260c9:	f7 75 90             	divl   -0x70(%ebp)
f01260cc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01260cf:	29 d0                	sub    %edx,%eax
f01260d1:	01 c3                	add    %eax,%ebx
f01260d3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01260da:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01260df:	0f b6 c0             	movzbl %al,%eax
f01260e2:	c1 e0 04             	shl    $0x4,%eax
f01260e5:	89 c2                	mov    %eax,%edx
f01260e7:	8b 45 88             	mov    -0x78(%ebp),%eax
f01260ea:	01 d0                	add    %edx,%eax
f01260ec:	48                   	dec    %eax
f01260ed:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01260f0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01260f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01260f8:	f7 75 88             	divl   -0x78(%ebp)
f01260fb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01260fe:	29 d0                	sub    %edx,%eax
f0126100:	01 d8                	add    %ebx,%eax
f0126102:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126107:	39 c1                	cmp    %eax,%ecx
f0126109:	74 17                	je     f0126122 <test_kfreeall+0x37c>
f012610b:	83 ec 04             	sub    $0x4,%esp
f012610e:	68 5c aa 13 f0       	push   $0xf013aa5c
f0126113:	68 0b 0a 00 00       	push   $0xa0b
f0126118:	68 76 a9 13 f0       	push   $0xf013a976
f012611d:	e8 84 a0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126122:	e8 65 db fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126127:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012612a:	74 17                	je     f0126143 <test_kfreeall+0x39d>
f012612c:	83 ec 04             	sub    $0x4,%esp
f012612f:	68 90 a9 13 f0       	push   $0xf013a990
f0126134:	68 0c 0a 00 00       	push   $0xa0c
f0126139:	68 76 a9 13 f0       	push   $0xf013a976
f012613e:	e8 63 a0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126143:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126146:	e8 9d 63 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012614b:	29 c3                	sub    %eax,%ebx
f012614d:	89 d8                	mov    %ebx,%eax
f012614f:	83 f8 01             	cmp    $0x1,%eax
f0126152:	74 17                	je     f012616b <test_kfreeall+0x3c5>
f0126154:	83 ec 04             	sub    $0x4,%esp
f0126157:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012615c:	68 0d 0a 00 00       	push   $0xa0d
f0126161:	68 76 a9 13 f0       	push   $0xf013a976
f0126166:	e8 3b a0 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012616b:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126172:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126175:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012617b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012617e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126185:	eb 0e                	jmp    f0126195 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126187:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012618a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012618d:	01 d0                	add    %edx,%eax
f012618f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126192:	ff 45 f4             	incl   -0xc(%ebp)
f0126195:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012619b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012619e:	7f e7                	jg     f0126187 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01261a0:	e8 43 63 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01261a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261a8:	e8 df da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01261ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01261b0:	83 ec 0c             	sub    $0xc,%esp
f01261b3:	68 00 08 00 00       	push   $0x800
f01261b8:	e8 07 14 fe ff       	call   f01075c4 <kmalloc>
f01261bd:	83 c4 10             	add    $0x10,%esp
f01261c0:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01261c6:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01261cc:	89 c1                	mov    %eax,%ecx
f01261ce:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01261d5:	10 00 00 
f01261d8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01261de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01261e3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01261e9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01261ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01261f4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01261fa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126200:	29 d0                	sub    %edx,%eax
f0126202:	89 c3                	mov    %eax,%ebx
f0126204:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012620b:	10 00 00 
f012620e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126213:	0f b6 d0             	movzbl %al,%edx
f0126216:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012621c:	01 d0                	add    %edx,%eax
f012621e:	48                   	dec    %eax
f012621f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0126225:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012622b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126230:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126236:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012623c:	29 d0                	sub    %edx,%eax
f012623e:	01 c3                	add    %eax,%ebx
f0126240:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126247:	10 00 00 
f012624a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012624f:	0f b6 c0             	movzbl %al,%eax
f0126252:	c1 e0 04             	shl    $0x4,%eax
f0126255:	89 c2                	mov    %eax,%edx
f0126257:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012625d:	01 d0                	add    %edx,%eax
f012625f:	48                   	dec    %eax
f0126260:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0126266:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012626c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126271:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0126277:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012627d:	29 d0                	sub    %edx,%eax
f012627f:	01 d8                	add    %ebx,%eax
f0126281:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126286:	39 c1                	cmp    %eax,%ecx
f0126288:	74 17                	je     f01262a1 <test_kfreeall+0x4fb>
f012628a:	83 ec 04             	sub    $0x4,%esp
f012628d:	68 5c aa 13 f0       	push   $0xf013aa5c
f0126292:	68 19 0a 00 00       	push   $0xa19
f0126297:	68 76 a9 13 f0       	push   $0xf013a976
f012629c:	e8 05 9f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262a1:	e8 e6 d9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01262a6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262a9:	74 17                	je     f01262c2 <test_kfreeall+0x51c>
f01262ab:	83 ec 04             	sub    $0x4,%esp
f01262ae:	68 90 a9 13 f0       	push   $0xf013a990
f01262b3:	68 1a 0a 00 00       	push   $0xa1a
f01262b8:	68 76 a9 13 f0       	push   $0xf013a976
f01262bd:	e8 e4 9e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01262c2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01262c5:	e8 1e 62 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01262ca:	29 c3                	sub    %eax,%ebx
f01262cc:	89 d8                	mov    %ebx,%eax
f01262ce:	83 f8 01             	cmp    $0x1,%eax
f01262d1:	74 17                	je     f01262ea <test_kfreeall+0x544>
f01262d3:	83 ec 04             	sub    $0x4,%esp
f01262d6:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01262db:	68 1b 0a 00 00       	push   $0xa1b
f01262e0:	68 76 a9 13 f0       	push   $0xf013a976
f01262e5:	e8 bc 9e fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01262ea:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f01262f1:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01262f4:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01262fa:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01262fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126304:	eb 0e                	jmp    f0126314 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126306:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126309:	8b 45 80             	mov    -0x80(%ebp),%eax
f012630c:	01 d0                	add    %edx,%eax
f012630e:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126311:	ff 45 f4             	incl   -0xc(%ebp)
f0126314:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012631a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012631d:	7f e7                	jg     f0126306 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012631f:	e8 c4 61 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126324:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126327:	e8 60 d9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012632c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012632f:	83 ec 0c             	sub    $0xc,%esp
f0126332:	68 00 1c 00 00       	push   $0x1c00
f0126337:	e8 88 12 fe ff       	call   f01075c4 <kmalloc>
f012633c:	83 c4 10             	add    $0x10,%esp
f012633f:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126345:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012634b:	89 c1                	mov    %eax,%ecx
f012634d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126354:	10 00 00 
f0126357:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012635d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126362:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126368:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012636e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126373:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126379:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012637f:	29 d0                	sub    %edx,%eax
f0126381:	89 c3                	mov    %eax,%ebx
f0126383:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012638a:	10 00 00 
f012638d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126392:	0f b6 d0             	movzbl %al,%edx
f0126395:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012639b:	01 d0                	add    %edx,%eax
f012639d:	48                   	dec    %eax
f012639e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01263a4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01263aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01263af:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01263b5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01263bb:	29 d0                	sub    %edx,%eax
f01263bd:	01 c3                	add    %eax,%ebx
f01263bf:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01263c6:	10 00 00 
f01263c9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01263ce:	0f b6 c0             	movzbl %al,%eax
f01263d1:	c1 e0 04             	shl    $0x4,%eax
f01263d4:	89 c2                	mov    %eax,%edx
f01263d6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01263dc:	01 d0                	add    %edx,%eax
f01263de:	48                   	dec    %eax
f01263df:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01263e5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01263eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01263f0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01263f6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01263fc:	29 d0                	sub    %edx,%eax
f01263fe:	01 d8                	add    %ebx,%eax
f0126400:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126405:	39 c1                	cmp    %eax,%ecx
f0126407:	74 17                	je     f0126420 <test_kfreeall+0x67a>
f0126409:	83 ec 04             	sub    $0x4,%esp
f012640c:	68 5c aa 13 f0       	push   $0xf013aa5c
f0126411:	68 27 0a 00 00       	push   $0xa27
f0126416:	68 76 a9 13 f0       	push   $0xf013a976
f012641b:	e8 86 9d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126420:	e8 67 d8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126425:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126428:	74 17                	je     f0126441 <test_kfreeall+0x69b>
f012642a:	83 ec 04             	sub    $0x4,%esp
f012642d:	68 90 a9 13 f0       	push   $0xf013a990
f0126432:	68 28 0a 00 00       	push   $0xa28
f0126437:	68 76 a9 13 f0       	push   $0xf013a976
f012643c:	e8 65 9d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126441:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126444:	e8 9f 60 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126449:	29 c3                	sub    %eax,%ebx
f012644b:	89 d8                	mov    %ebx,%eax
f012644d:	83 f8 02             	cmp    $0x2,%eax
f0126450:	74 17                	je     f0126469 <test_kfreeall+0x6c3>
f0126452:	83 ec 04             	sub    $0x4,%esp
f0126455:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012645a:	68 29 0a 00 00       	push   $0xa29
f012645f:	68 76 a9 13 f0       	push   $0xf013a976
f0126464:	e8 3d 9d fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126469:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126470:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126473:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126479:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012647c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126483:	eb 0e                	jmp    f0126493 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126485:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126488:	8b 45 80             	mov    -0x80(%ebp),%eax
f012648b:	01 d0                	add    %edx,%eax
f012648d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126490:	ff 45 f4             	incl   -0xc(%ebp)
f0126493:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126499:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012649c:	7f e7                	jg     f0126485 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012649e:	e8 45 60 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01264a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264a6:	e8 e1 d7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01264ab:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01264ae:	83 ec 0c             	sub    $0xc,%esp
f01264b1:	68 00 fc 2f 00       	push   $0x2ffc00
f01264b6:	e8 09 11 fe ff       	call   f01075c4 <kmalloc>
f01264bb:	83 c4 10             	add    $0x10,%esp
f01264be:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264c4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01264ca:	89 c1                	mov    %eax,%ecx
f01264cc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01264d3:	10 00 00 
f01264d6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01264dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264e1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01264e7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01264ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01264f2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01264f8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01264fe:	29 d0                	sub    %edx,%eax
f0126500:	89 c3                	mov    %eax,%ebx
f0126502:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126509:	10 00 00 
f012650c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126511:	0f b6 d0             	movzbl %al,%edx
f0126514:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012651a:	01 d0                	add    %edx,%eax
f012651c:	48                   	dec    %eax
f012651d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0126523:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126529:	ba 00 00 00 00       	mov    $0x0,%edx
f012652e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0126534:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012653a:	29 d0                	sub    %edx,%eax
f012653c:	01 c3                	add    %eax,%ebx
f012653e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0126545:	10 00 00 
f0126548:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012654d:	0f b6 c0             	movzbl %al,%eax
f0126550:	c1 e0 04             	shl    $0x4,%eax
f0126553:	89 c2                	mov    %eax,%edx
f0126555:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012655b:	01 d0                	add    %edx,%eax
f012655d:	48                   	dec    %eax
f012655e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0126564:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012656a:	ba 00 00 00 00       	mov    $0x0,%edx
f012656f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0126575:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012657b:	29 d0                	sub    %edx,%eax
f012657d:	01 d8                	add    %ebx,%eax
f012657f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126584:	39 c1                	cmp    %eax,%ecx
f0126586:	74 17                	je     f012659f <test_kfreeall+0x7f9>
f0126588:	83 ec 04             	sub    $0x4,%esp
f012658b:	68 5c aa 13 f0       	push   $0xf013aa5c
f0126590:	68 35 0a 00 00       	push   $0xa35
f0126595:	68 76 a9 13 f0       	push   $0xf013a976
f012659a:	e8 07 9c fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012659f:	e8 e8 d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01265a4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01265a7:	74 17                	je     f01265c0 <test_kfreeall+0x81a>
f01265a9:	83 ec 04             	sub    $0x4,%esp
f01265ac:	68 90 a9 13 f0       	push   $0xf013a990
f01265b1:	68 36 0a 00 00       	push   $0xa36
f01265b6:	68 76 a9 13 f0       	push   $0xf013a976
f01265bb:	e8 e6 9b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01265c0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01265c3:	e8 20 5f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01265c8:	29 c3                	sub    %eax,%ebx
f01265ca:	89 d8                	mov    %ebx,%eax
f01265cc:	3d 00 03 00 00       	cmp    $0x300,%eax
f01265d1:	74 17                	je     f01265ea <test_kfreeall+0x844>
f01265d3:	83 ec 04             	sub    $0x4,%esp
f01265d6:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01265db:	68 37 0a 00 00       	push   $0xa37
f01265e0:	68 76 a9 13 f0       	push   $0xf013a976
f01265e5:	e8 bc 9b fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01265ea:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01265f1:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01265f4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01265fa:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01265fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126604:	eb 0e                	jmp    f0126614 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0126606:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126609:	8b 45 80             	mov    -0x80(%ebp),%eax
f012660c:	01 d0                	add    %edx,%eax
f012660e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126611:	ff 45 f4             	incl   -0xc(%ebp)
f0126614:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012661a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012661d:	7f e7                	jg     f0126606 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012661f:	e8 c4 5e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126624:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126627:	e8 60 d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012662c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012662f:	83 ec 0c             	sub    $0xc,%esp
f0126632:	68 00 fc 5f 00       	push   $0x5ffc00
f0126637:	e8 88 0f fe ff       	call   f01075c4 <kmalloc>
f012663c:	83 c4 10             	add    $0x10,%esp
f012663f:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126645:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012664b:	89 c1                	mov    %eax,%ecx
f012664d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0126654:	10 00 00 
f0126657:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012665d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126662:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126668:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012666e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126673:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126679:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012667f:	29 d0                	sub    %edx,%eax
f0126681:	89 c3                	mov    %eax,%ebx
f0126683:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012668a:	10 00 00 
f012668d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126692:	0f b6 d0             	movzbl %al,%edx
f0126695:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012669b:	01 d0                	add    %edx,%eax
f012669d:	48                   	dec    %eax
f012669e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01266a4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01266aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01266af:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01266b5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01266bb:	29 d0                	sub    %edx,%eax
f01266bd:	01 c3                	add    %eax,%ebx
f01266bf:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01266c6:	10 00 00 
f01266c9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01266ce:	0f b6 c0             	movzbl %al,%eax
f01266d1:	c1 e0 04             	shl    $0x4,%eax
f01266d4:	89 c2                	mov    %eax,%edx
f01266d6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01266dc:	01 d0                	add    %edx,%eax
f01266de:	48                   	dec    %eax
f01266df:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01266e5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01266eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01266f0:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01266f6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01266fc:	29 d0                	sub    %edx,%eax
f01266fe:	01 d8                	add    %ebx,%eax
f0126700:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126705:	39 c1                	cmp    %eax,%ecx
f0126707:	74 17                	je     f0126720 <test_kfreeall+0x97a>
f0126709:	83 ec 04             	sub    $0x4,%esp
f012670c:	68 5c aa 13 f0       	push   $0xf013aa5c
f0126711:	68 43 0a 00 00       	push   $0xa43
f0126716:	68 76 a9 13 f0       	push   $0xf013a976
f012671b:	e8 86 9a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126720:	e8 67 d5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126725:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126728:	74 17                	je     f0126741 <test_kfreeall+0x99b>
f012672a:	83 ec 04             	sub    $0x4,%esp
f012672d:	68 90 a9 13 f0       	push   $0xf013a990
f0126732:	68 44 0a 00 00       	push   $0xa44
f0126737:	68 76 a9 13 f0       	push   $0xf013a976
f012673c:	e8 65 9a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126741:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126744:	e8 9f 5d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126749:	29 c3                	sub    %eax,%ebx
f012674b:	89 d8                	mov    %ebx,%eax
f012674d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126752:	74 17                	je     f012676b <test_kfreeall+0x9c5>
f0126754:	83 ec 04             	sub    $0x4,%esp
f0126757:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012675c:	68 45 0a 00 00       	push   $0xa45
f0126761:	68 76 a9 13 f0       	push   $0xf013a976
f0126766:	e8 3b 9a fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012676b:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0126772:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0126775:	e8 6e 5d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012677a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012677d:	e8 0a d5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126782:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0126785:	83 ec 0c             	sub    $0xc,%esp
f0126788:	68 00 38 00 00       	push   $0x3800
f012678d:	e8 32 0e fe ff       	call   f01075c4 <kmalloc>
f0126792:	83 c4 10             	add    $0x10,%esp
f0126795:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012679b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01267a1:	89 c1                	mov    %eax,%ecx
f01267a3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01267aa:	10 00 00 
f01267ad:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01267b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267b8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01267be:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01267c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01267c9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01267cf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01267d5:	29 d0                	sub    %edx,%eax
f01267d7:	89 c3                	mov    %eax,%ebx
f01267d9:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01267e0:	10 00 00 
f01267e3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01267e8:	0f b6 d0             	movzbl %al,%edx
f01267eb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01267f1:	01 d0                	add    %edx,%eax
f01267f3:	48                   	dec    %eax
f01267f4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01267fa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126800:	ba 00 00 00 00       	mov    $0x0,%edx
f0126805:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012680b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126811:	29 d0                	sub    %edx,%eax
f0126813:	01 c3                	add    %eax,%ebx
f0126815:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012681c:	10 00 00 
f012681f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126824:	0f b6 c0             	movzbl %al,%eax
f0126827:	c1 e0 04             	shl    $0x4,%eax
f012682a:	89 c2                	mov    %eax,%edx
f012682c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126832:	01 d0                	add    %edx,%eax
f0126834:	48                   	dec    %eax
f0126835:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012683b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126841:	ba 00 00 00 00       	mov    $0x0,%edx
f0126846:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012684c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126852:	29 d0                	sub    %edx,%eax
f0126854:	01 d8                	add    %ebx,%eax
f0126856:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012685b:	39 c1                	cmp    %eax,%ecx
f012685d:	74 17                	je     f0126876 <test_kfreeall+0xad0>
f012685f:	83 ec 04             	sub    $0x4,%esp
f0126862:	68 5c aa 13 f0       	push   $0xf013aa5c
f0126867:	68 4c 0a 00 00       	push   $0xa4c
f012686c:	68 76 a9 13 f0       	push   $0xf013a976
f0126871:	e8 30 99 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126876:	e8 11 d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012687b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012687e:	74 17                	je     f0126897 <test_kfreeall+0xaf1>
f0126880:	83 ec 04             	sub    $0x4,%esp
f0126883:	68 90 a9 13 f0       	push   $0xf013a990
f0126888:	68 4d 0a 00 00       	push   $0xa4d
f012688d:	68 76 a9 13 f0       	push   $0xf013a976
f0126892:	e8 0f 99 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126897:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012689a:	e8 49 5c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012689f:	29 c3                	sub    %eax,%ebx
f01268a1:	89 d8                	mov    %ebx,%eax
f01268a3:	83 f8 04             	cmp    $0x4,%eax
f01268a6:	74 17                	je     f01268bf <test_kfreeall+0xb19>
f01268a8:	83 ec 04             	sub    $0x4,%esp
f01268ab:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01268b0:	68 4e 0a 00 00       	push   $0xa4e
f01268b5:	68 76 a9 13 f0       	push   $0xf013a976
f01268ba:	e8 e7 98 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01268bf:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01268c6:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01268c9:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01268cf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01268d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268d9:	eb 0e                	jmp    f01268e9 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f01268db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01268de:	8b 45 80             	mov    -0x80(%ebp),%eax
f01268e1:	01 d0                	add    %edx,%eax
f01268e3:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01268e6:	ff 45 f4             	incl   -0xc(%ebp)
f01268e9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01268ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01268f2:	7f e7                	jg     f01268db <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01268f4:	e8 ef 5b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01268f9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01268ff:	e8 88 d3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126904:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012690a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126910:	83 ec 0c             	sub    $0xc,%esp
f0126913:	50                   	push   %eax
f0126914:	e8 c5 0c fe ff       	call   f01075de <kfree>
f0126919:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012691c:	e8 6b d3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126921:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126927:	74 17                	je     f0126940 <test_kfreeall+0xb9a>
f0126929:	83 ec 04             	sub    $0x4,%esp
f012692c:	68 90 a9 13 f0       	push   $0xf013a990
f0126931:	68 5d 0a 00 00       	push   $0xa5d
f0126936:	68 76 a9 13 f0       	push   $0xf013a976
f012693b:	e8 66 98 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126940:	e8 a3 5b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126945:	89 c2                	mov    %eax,%edx
f0126947:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012694d:	29 c2                	sub    %eax,%edx
f012694f:	89 d0                	mov    %edx,%eax
f0126951:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126956:	74 17                	je     f012696f <test_kfreeall+0xbc9>
f0126958:	83 ec 04             	sub    $0x4,%esp
f012695b:	68 00 b1 13 f0       	push   $0xf013b100
f0126960:	68 5e 0a 00 00       	push   $0xa5e
f0126965:	68 76 a9 13 f0       	push   $0xf013a976
f012696a:	e8 37 98 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012696f:	e8 74 5b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126974:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012697a:	e8 0d d3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012697f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0126985:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012698b:	83 ec 0c             	sub    $0xc,%esp
f012698e:	50                   	push   %eax
f012698f:	e8 4a 0c fe ff       	call   f01075de <kfree>
f0126994:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126997:	e8 f0 d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012699c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01269a2:	74 17                	je     f01269bb <test_kfreeall+0xc15>
f01269a4:	83 ec 04             	sub    $0x4,%esp
f01269a7:	68 90 a9 13 f0       	push   $0xf013a990
f01269ac:	68 64 0a 00 00       	push   $0xa64
f01269b1:	68 76 a9 13 f0       	push   $0xf013a976
f01269b6:	e8 eb 97 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01269bb:	e8 28 5b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01269c0:	89 c2                	mov    %eax,%edx
f01269c2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01269c8:	29 c2                	sub    %eax,%edx
f01269ca:	89 d0                	mov    %edx,%eax
f01269cc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01269d1:	74 17                	je     f01269ea <test_kfreeall+0xc44>
f01269d3:	83 ec 04             	sub    $0x4,%esp
f01269d6:	68 00 b1 13 f0       	push   $0xf013b100
f01269db:	68 65 0a 00 00       	push   $0xa65
f01269e0:	68 76 a9 13 f0       	push   $0xf013a976
f01269e5:	e8 bc 97 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01269ea:	e8 f9 5a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01269ef:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269f5:	e8 92 d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01269fa:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0126a00:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126a06:	83 ec 0c             	sub    $0xc,%esp
f0126a09:	50                   	push   %eax
f0126a0a:	e8 cf 0b fe ff       	call   f01075de <kfree>
f0126a0f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a12:	e8 75 d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126a17:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126a1d:	74 17                	je     f0126a36 <test_kfreeall+0xc90>
f0126a1f:	83 ec 04             	sub    $0x4,%esp
f0126a22:	68 90 a9 13 f0       	push   $0xf013a990
f0126a27:	68 6b 0a 00 00       	push   $0xa6b
f0126a2c:	68 76 a9 13 f0       	push   $0xf013a976
f0126a31:	e8 70 97 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126a36:	e8 ad 5a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126a3b:	89 c2                	mov    %eax,%edx
f0126a3d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126a43:	29 c2                	sub    %eax,%edx
f0126a45:	89 d0                	mov    %edx,%eax
f0126a47:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126a4c:	74 17                	je     f0126a65 <test_kfreeall+0xcbf>
f0126a4e:	83 ec 04             	sub    $0x4,%esp
f0126a51:	68 00 b1 13 f0       	push   $0xf013b100
f0126a56:	68 6c 0a 00 00       	push   $0xa6c
f0126a5b:	68 76 a9 13 f0       	push   $0xf013a976
f0126a60:	e8 41 97 fd ff       	call   f01001a6 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0126a65:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126a6b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126a6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a75:	eb 1e                	jmp    f0126a95 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0126a77:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126a7d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126a80:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a83:	01 c8                	add    %ecx,%eax
f0126a85:	8a 00                	mov    (%eax),%al
f0126a87:	0f be c0             	movsbl %al,%eax
f0126a8a:	01 d0                	add    %edx,%eax
f0126a8c:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126a92:	ff 45 f4             	incl   -0xc(%ebp)
f0126a95:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126a9b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a9e:	7f d7                	jg     f0126a77 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0126aa0:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126aa6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126aac:	01 c0                	add    %eax,%eax
f0126aae:	39 c2                	cmp    %eax,%edx
f0126ab0:	74 17                	je     f0126ac9 <test_kfreeall+0xd23>
f0126ab2:	83 ec 04             	sub    $0x4,%esp
f0126ab5:	68 5c b1 13 f0       	push   $0xf013b15c
f0126aba:	68 78 0a 00 00       	push   $0xa78
f0126abf:	68 76 a9 13 f0       	push   $0xf013a976
f0126ac4:	e8 dd 96 fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0126ac9:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126acf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126ad2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ad9:	eb 1e                	jmp    f0126af9 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0126adb:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126ae1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126ae4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ae7:	01 c8                	add    %ecx,%eax
f0126ae9:	8a 00                	mov    (%eax),%al
f0126aeb:	0f be c0             	movsbl %al,%eax
f0126aee:	01 d0                	add    %edx,%eax
f0126af0:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126af6:	ff 45 f4             	incl   -0xc(%ebp)
f0126af9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126aff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b02:	7f d7                	jg     f0126adb <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0126b04:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126b0a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126b10:	89 c1                	mov    %eax,%ecx
f0126b12:	01 c9                	add    %ecx,%ecx
f0126b14:	01 c8                	add    %ecx,%eax
f0126b16:	39 c2                	cmp    %eax,%edx
f0126b18:	74 17                	je     f0126b31 <test_kfreeall+0xd8b>
f0126b1a:	83 ec 04             	sub    $0x4,%esp
f0126b1d:	68 5c b1 13 f0       	push   $0xf013b15c
f0126b22:	68 80 0a 00 00       	push   $0xa80
f0126b27:	68 76 a9 13 f0       	push   $0xf013a976
f0126b2c:	e8 75 96 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126b31:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126b37:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126b3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b41:	eb 1e                	jmp    f0126b61 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126b43:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126b49:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126b4c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126b4f:	01 c8                	add    %ecx,%eax
f0126b51:	8a 00                	mov    (%eax),%al
f0126b53:	0f be c0             	movsbl %al,%eax
f0126b56:	01 d0                	add    %edx,%eax
f0126b58:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126b5e:	ff 45 f4             	incl   -0xc(%ebp)
f0126b61:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126b67:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b6a:	7f d7                	jg     f0126b43 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126b6c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126b72:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126b78:	c1 e2 02             	shl    $0x2,%edx
f0126b7b:	39 d0                	cmp    %edx,%eax
f0126b7d:	74 17                	je     f0126b96 <test_kfreeall+0xdf0>
f0126b7f:	83 ec 04             	sub    $0x4,%esp
f0126b82:	68 5c b1 13 f0       	push   $0xf013b15c
f0126b87:	68 88 0a 00 00       	push   $0xa88
f0126b8c:	68 76 a9 13 f0       	push   $0xf013a976
f0126b91:	e8 10 96 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126b96:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126b9c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126b9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ba6:	eb 1e                	jmp    f0126bc6 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0126ba8:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0126bae:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126bb1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126bb4:	01 c8                	add    %ecx,%eax
f0126bb6:	8a 00                	mov    (%eax),%al
f0126bb8:	0f be c0             	movsbl %al,%eax
f0126bbb:	01 d0                	add    %edx,%eax
f0126bbd:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126bc3:	ff 45 f4             	incl   -0xc(%ebp)
f0126bc6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126bcc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126bcf:	7f d7                	jg     f0126ba8 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0126bd1:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0126bd7:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0126bdd:	89 d0                	mov    %edx,%eax
f0126bdf:	c1 e0 02             	shl    $0x2,%eax
f0126be2:	01 d0                	add    %edx,%eax
f0126be4:	39 c1                	cmp    %eax,%ecx
f0126be6:	74 17                	je     f0126bff <test_kfreeall+0xe59>
f0126be8:	83 ec 04             	sub    $0x4,%esp
f0126beb:	68 5c b1 13 f0       	push   $0xf013b15c
f0126bf0:	68 90 0a 00 00       	push   $0xa90
f0126bf5:	68 76 a9 13 f0       	push   $0xf013a976
f0126bfa:	e8 a7 95 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0126bff:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126c05:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126c08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c0f:	eb 1e                	jmp    f0126c2f <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0126c11:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0126c17:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126c1a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c1d:	01 c8                	add    %ecx,%eax
f0126c1f:	8a 00                	mov    (%eax),%al
f0126c21:	0f be c0             	movsbl %al,%eax
f0126c24:	01 d0                	add    %edx,%eax
f0126c26:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126c2c:	ff 45 f4             	incl   -0xc(%ebp)
f0126c2f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126c35:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c38:	7f d7                	jg     f0126c11 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0126c3a:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126c40:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126c46:	89 d0                	mov    %edx,%eax
f0126c48:	01 c0                	add    %eax,%eax
f0126c4a:	01 d0                	add    %edx,%eax
f0126c4c:	01 c0                	add    %eax,%eax
f0126c4e:	01 d0                	add    %edx,%eax
f0126c50:	39 c1                	cmp    %eax,%ecx
f0126c52:	74 17                	je     f0126c6b <test_kfreeall+0xec5>
f0126c54:	83 ec 04             	sub    $0x4,%esp
f0126c57:	68 5c b1 13 f0       	push   $0xf013b15c
f0126c5c:	68 98 0a 00 00       	push   $0xa98
f0126c61:	68 76 a9 13 f0       	push   $0xf013a976
f0126c66:	e8 3b 95 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126c6b:	e8 78 58 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126c70:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c73:	e8 14 d0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126c78:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0126c7b:	83 ec 0c             	sub    $0xc,%esp
f0126c7e:	68 00 50 00 00       	push   $0x5000
f0126c83:	e8 3c 09 fe ff       	call   f01075c4 <kmalloc>
f0126c88:	83 c4 10             	add    $0x10,%esp
f0126c8b:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126c91:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126c97:	89 c1                	mov    %eax,%ecx
f0126c99:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126ca0:	10 00 00 
f0126ca3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126ca9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126cae:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126cb4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126cba:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cbf:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126cc5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126ccb:	29 d0                	sub    %edx,%eax
f0126ccd:	89 c3                	mov    %eax,%ebx
f0126ccf:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126cd6:	10 00 00 
f0126cd9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126cde:	0f b6 d0             	movzbl %al,%edx
f0126ce1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126ce7:	01 d0                	add    %edx,%eax
f0126ce9:	48                   	dec    %eax
f0126cea:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0126cf0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126cf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cfb:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0126d01:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126d07:	29 d0                	sub    %edx,%eax
f0126d09:	01 c3                	add    %eax,%ebx
f0126d0b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0126d12:	10 00 00 
f0126d15:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126d1a:	0f b6 c0             	movzbl %al,%eax
f0126d1d:	c1 e0 04             	shl    $0x4,%eax
f0126d20:	89 c2                	mov    %eax,%edx
f0126d22:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126d28:	01 d0                	add    %edx,%eax
f0126d2a:	48                   	dec    %eax
f0126d2b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0126d31:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126d37:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d3c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0126d42:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126d48:	29 d0                	sub    %edx,%eax
f0126d4a:	01 d8                	add    %ebx,%eax
f0126d4c:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126d51:	39 c1                	cmp    %eax,%ecx
f0126d53:	74 17                	je     f0126d6c <test_kfreeall+0xfc6>
f0126d55:	83 ec 04             	sub    $0x4,%esp
f0126d58:	68 5c aa 13 f0       	push   $0xf013aa5c
f0126d5d:	68 a1 0a 00 00       	push   $0xaa1
f0126d62:	68 76 a9 13 f0       	push   $0xf013a976
f0126d67:	e8 3a 94 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d6c:	e8 1b cf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126d71:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126d74:	74 17                	je     f0126d8d <test_kfreeall+0xfe7>
f0126d76:	83 ec 04             	sub    $0x4,%esp
f0126d79:	68 90 a9 13 f0       	push   $0xf013a990
f0126d7e:	68 a2 0a 00 00       	push   $0xaa2
f0126d83:	68 76 a9 13 f0       	push   $0xf013a976
f0126d88:	e8 19 94 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126d8d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126d90:	e8 53 57 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126d95:	29 c3                	sub    %eax,%ebx
f0126d97:	89 d8                	mov    %ebx,%eax
f0126d99:	83 f8 05             	cmp    $0x5,%eax
f0126d9c:	74 17                	je     f0126db5 <test_kfreeall+0x100f>
f0126d9e:	83 ec 04             	sub    $0x4,%esp
f0126da1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0126da6:	68 a3 0a 00 00       	push   $0xaa3
f0126dab:	68 76 a9 13 f0       	push   $0xf013a976
f0126db0:	e8 f1 93 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0126db5:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0126dbc:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0126dbf:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126dc5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0126dc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126dcf:	eb 0e                	jmp    f0126ddf <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0126dd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126dd4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126dd7:	01 d0                	add    %edx,%eax
f0126dd9:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0126ddc:	ff 45 f4             	incl   -0xc(%ebp)
f0126ddf:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126de5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126de8:	7f e7                	jg     f0126dd1 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126dea:	e8 f9 56 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126def:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126df2:	e8 95 ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126df7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0126dfa:	83 ec 0c             	sub    $0xc,%esp
f0126dfd:	68 00 00 10 00       	push   $0x100000
f0126e02:	e8 bd 07 fe ff       	call   f01075c4 <kmalloc>
f0126e07:	83 c4 10             	add    $0x10,%esp
f0126e0a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e10:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126e16:	89 c1                	mov    %eax,%ecx
f0126e18:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0126e1f:	10 00 00 
f0126e22:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126e28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e2d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126e33:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126e39:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e3e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126e44:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126e4a:	29 d0                	sub    %edx,%eax
f0126e4c:	89 c3                	mov    %eax,%ebx
f0126e4e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126e55:	10 00 00 
f0126e58:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126e5d:	0f b6 d0             	movzbl %al,%edx
f0126e60:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126e66:	01 d0                	add    %edx,%eax
f0126e68:	48                   	dec    %eax
f0126e69:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0126e6f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126e75:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e7a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0126e80:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126e86:	29 d0                	sub    %edx,%eax
f0126e88:	01 c3                	add    %eax,%ebx
f0126e8a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0126e91:	10 00 00 
f0126e94:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126e99:	0f b6 c0             	movzbl %al,%eax
f0126e9c:	c1 e0 04             	shl    $0x4,%eax
f0126e9f:	89 c2                	mov    %eax,%edx
f0126ea1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0126ea7:	01 d0                	add    %edx,%eax
f0126ea9:	48                   	dec    %eax
f0126eaa:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0126eb0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126eb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ebb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0126ec1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126ec7:	29 d0                	sub    %edx,%eax
f0126ec9:	01 d8                	add    %ebx,%eax
f0126ecb:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0126ed0:	39 c1                	cmp    %eax,%ecx
f0126ed2:	74 17                	je     f0126eeb <test_kfreeall+0x1145>
f0126ed4:	83 ec 04             	sub    $0x4,%esp
f0126ed7:	68 5c aa 13 f0       	push   $0xf013aa5c
f0126edc:	68 af 0a 00 00       	push   $0xaaf
f0126ee1:	68 76 a9 13 f0       	push   $0xf013a976
f0126ee6:	e8 bb 92 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126eeb:	e8 9c cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126ef0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ef3:	74 17                	je     f0126f0c <test_kfreeall+0x1166>
f0126ef5:	83 ec 04             	sub    $0x4,%esp
f0126ef8:	68 90 a9 13 f0       	push   $0xf013a990
f0126efd:	68 b0 0a 00 00       	push   $0xab0
f0126f02:	68 76 a9 13 f0       	push   $0xf013a976
f0126f07:	e8 9a 92 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f0c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f0f:	e8 d4 55 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126f14:	29 c3                	sub    %eax,%ebx
f0126f16:	89 d8                	mov    %ebx,%eax
f0126f18:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126f1d:	74 17                	je     f0126f36 <test_kfreeall+0x1190>
f0126f1f:	83 ec 04             	sub    $0x4,%esp
f0126f22:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0126f27:	68 b1 0a 00 00       	push   $0xab1
f0126f2c:	68 76 a9 13 f0       	push   $0xf013a976
f0126f31:	e8 70 92 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0126f36:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0126f3d:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0126f40:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126f46:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0126f49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f50:	eb 0e                	jmp    f0126f60 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0126f52:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126f55:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f58:	01 d0                	add    %edx,%eax
f0126f5a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0126f5d:	ff 45 f4             	incl   -0xc(%ebp)
f0126f60:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0126f66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f69:	7f e7                	jg     f0126f52 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0126f6b:	e8 78 55 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126f70:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f73:	e8 14 cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f78:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0126f7b:	e8 be 06 fe ff       	call   f010763e <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f80:	e8 07 cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f85:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f88:	74 17                	je     f0126fa1 <test_kfreeall+0x11fb>
f0126f8a:	83 ec 04             	sub    $0x4,%esp
f0126f8d:	68 90 a9 13 f0       	push   $0xf013a990
f0126f92:	68 c1 0a 00 00       	push   $0xac1
f0126f97:	68 76 a9 13 f0       	push   $0xf013a976
f0126f9c:	e8 05 92 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0126fa1:	e8 42 55 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0126fa6:	89 c2                	mov    %eax,%edx
f0126fa8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126fab:	89 d1                	mov    %edx,%ecx
f0126fad:	29 c1                	sub    %eax,%ecx
f0126faf:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0126fb6:	10 00 00 
f0126fb9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0126fbf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126fc4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0126fca:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126fd0:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fd5:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0126fdb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126fe1:	29 d0                	sub    %edx,%eax
f0126fe3:	89 c3                	mov    %eax,%ebx
f0126fe5:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0126fec:	10 00 00 
f0126fef:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0126ff4:	0f b6 d0             	movzbl %al,%edx
f0126ff7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126ffd:	01 d0                	add    %edx,%eax
f0126fff:	48                   	dec    %eax
f0127000:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127006:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012700c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127011:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127017:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012701d:	29 d0                	sub    %edx,%eax
f012701f:	01 c3                	add    %eax,%ebx
f0127021:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127028:	10 00 00 
f012702b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127030:	0f b6 c0             	movzbl %al,%eax
f0127033:	c1 e0 04             	shl    $0x4,%eax
f0127036:	89 c2                	mov    %eax,%edx
f0127038:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012703e:	01 d0                	add    %edx,%eax
f0127040:	48                   	dec    %eax
f0127041:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127047:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012704d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127052:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127058:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012705e:	29 d0                	sub    %edx,%eax
f0127060:	01 d8                	add    %ebx,%eax
f0127062:	05 00 40 00 00       	add    $0x4000,%eax
f0127067:	c1 e8 0c             	shr    $0xc,%eax
f012706a:	05 0d 04 00 00       	add    $0x40d,%eax
f012706f:	39 c1                	cmp    %eax,%ecx
f0127071:	74 17                	je     f012708a <test_kfreeall+0x12e4>
f0127073:	83 ec 04             	sub    $0x4,%esp
f0127076:	68 00 b1 13 f0       	push   $0xf013b100
f012707b:	68 c2 0a 00 00       	push   $0xac2
f0127080:	68 76 a9 13 f0       	push   $0xf013a976
f0127085:	e8 1c 91 fd ff       	call   f01001a6 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012708a:	83 ec 0c             	sub    $0xc,%esp
f012708d:	6a 03                	push   $0x3
f012708f:	e8 fd 58 fe ff       	call   f010c991 <sys_bypassPageFault>
f0127094:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127097:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012709e:	e9 82 00 00 00       	jmp    f0127125 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f01270a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01270a6:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01270ad:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01270b0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270b3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01270b6:	e8 c4 58 fe ff       	call   f010c97f <sys_rcr2>
f01270bb:	89 c2                	mov    %eax,%edx
f01270bd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270c0:	39 c2                	cmp    %eax,%edx
f01270c2:	74 17                	je     f01270db <test_kfreeall+0x1335>
f01270c4:	83 ec 04             	sub    $0x4,%esp
f01270c7:	68 dc b1 13 f0       	push   $0xf013b1dc
f01270cc:	68 d0 0a 00 00       	push   $0xad0
f01270d1:	68 76 a9 13 f0       	push   $0xf013a976
f01270d6:	e8 cb 90 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f01270db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01270de:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01270e5:	89 c2                	mov    %eax,%edx
f01270e7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270ea:	01 d0                	add    %edx,%eax
f01270ec:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01270ef:	e8 8b 58 fe ff       	call   f010c97f <sys_rcr2>
f01270f4:	89 c2                	mov    %eax,%edx
f01270f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01270f9:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127100:	89 c1                	mov    %eax,%ecx
f0127102:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127105:	01 c8                	add    %ecx,%eax
f0127107:	39 c2                	cmp    %eax,%edx
f0127109:	74 17                	je     f0127122 <test_kfreeall+0x137c>
f012710b:	83 ec 04             	sub    $0x4,%esp
f012710e:	68 dc b1 13 f0       	push   $0xf013b1dc
f0127113:	68 d2 0a 00 00       	push   $0xad2
f0127118:	68 76 a9 13 f0       	push   $0xf013a976
f012711d:	e8 84 90 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127122:	ff 45 f4             	incl   -0xc(%ebp)
f0127125:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127129:	0f 8e 74 ff ff ff    	jle    f01270a3 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012712f:	83 ec 0c             	sub    $0xc,%esp
f0127132:	6a 00                	push   $0x0
f0127134:	e8 58 58 fe ff       	call   f010c991 <sys_bypassPageFault>
f0127139:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012713c:	e8 a7 53 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127141:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127144:	e8 43 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127149:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f012714c:	83 ec 0c             	sub    $0xc,%esp
f012714f:	68 00 00 40 00       	push   $0x400000
f0127154:	e8 6b 04 fe ff       	call   f01075c4 <kmalloc>
f0127159:	83 c4 10             	add    $0x10,%esp
f012715c:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127162:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127168:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f012716d:	74 17                	je     f0127186 <test_kfreeall+0x13e0>
f012716f:	83 ec 04             	sub    $0x4,%esp
f0127172:	68 80 b6 13 f0       	push   $0xf013b680
f0127177:	68 de 0a 00 00       	push   $0xade
f012717c:	68 76 a9 13 f0       	push   $0xf013a976
f0127181:	e8 20 90 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127186:	e8 01 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012718b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012718e:	74 17                	je     f01271a7 <test_kfreeall+0x1401>
f0127190:	83 ec 04             	sub    $0x4,%esp
f0127193:	68 90 a9 13 f0       	push   $0xf013a990
f0127198:	68 df 0a 00 00       	push   $0xadf
f012719d:	68 76 a9 13 f0       	push   $0xf013a976
f01271a2:	e8 ff 8f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271a7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01271aa:	e8 39 53 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01271af:	29 c3                	sub    %eax,%ebx
f01271b1:	89 d8                	mov    %ebx,%eax
f01271b3:	3d 00 04 00 00       	cmp    $0x400,%eax
f01271b8:	74 17                	je     f01271d1 <test_kfreeall+0x142b>
f01271ba:	83 ec 04             	sub    $0x4,%esp
f01271bd:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01271c2:	68 e0 0a 00 00       	push   $0xae0
f01271c7:	68 76 a9 13 f0       	push   $0xf013a976
f01271cc:	e8 d5 8f fd ff       	call   f01001a6 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01271d1:	e8 12 53 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01271d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271d9:	e8 ae ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01271de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f01271e1:	83 ec 0c             	sub    $0xc,%esp
f01271e4:	68 00 30 00 00       	push   $0x3000
f01271e9:	e8 d6 03 fe ff       	call   f01075c4 <kmalloc>
f01271ee:	83 c4 10             	add    $0x10,%esp
f01271f1:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01271f7:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01271fd:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127202:	74 17                	je     f012721b <test_kfreeall+0x1475>
f0127204:	83 ec 04             	sub    $0x4,%esp
f0127207:	68 80 b6 13 f0       	push   $0xf013b680
f012720c:	68 e6 0a 00 00       	push   $0xae6
f0127211:	68 76 a9 13 f0       	push   $0xf013a976
f0127216:	e8 8b 8f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012721b:	e8 6c ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127220:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127223:	74 17                	je     f012723c <test_kfreeall+0x1496>
f0127225:	83 ec 04             	sub    $0x4,%esp
f0127228:	68 90 a9 13 f0       	push   $0xf013a990
f012722d:	68 e7 0a 00 00       	push   $0xae7
f0127232:	68 76 a9 13 f0       	push   $0xf013a976
f0127237:	e8 6a 8f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f012723c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012723f:	e8 a4 52 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127244:	29 c3                	sub    %eax,%ebx
f0127246:	89 d8                	mov    %ebx,%eax
f0127248:	83 f8 03             	cmp    $0x3,%eax
f012724b:	74 17                	je     f0127264 <test_kfreeall+0x14be>
f012724d:	83 ec 04             	sub    $0x4,%esp
f0127250:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0127255:	68 e8 0a 00 00       	push   $0xae8
f012725a:	68 76 a9 13 f0       	push   $0xf013a976
f012725f:	e8 42 8f fd ff       	call   f01001a6 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127264:	e8 7f 52 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127269:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012726c:	e8 1b ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127271:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0127274:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012727a:	83 ec 0c             	sub    $0xc,%esp
f012727d:	50                   	push   %eax
f012727e:	e8 5b 03 fe ff       	call   f01075de <kfree>
f0127283:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127286:	e8 01 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012728b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012728e:	74 17                	je     f01272a7 <test_kfreeall+0x1501>
f0127290:	83 ec 04             	sub    $0x4,%esp
f0127293:	68 90 a9 13 f0       	push   $0xf013a990
f0127298:	68 f2 0a 00 00       	push   $0xaf2
f012729d:	68 76 a9 13 f0       	push   $0xf013a976
f01272a2:	e8 ff 8e fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01272a7:	e8 3c 52 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01272ac:	89 c2                	mov    %eax,%edx
f01272ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01272b1:	29 c2                	sub    %eax,%edx
f01272b3:	89 d0                	mov    %edx,%eax
f01272b5:	83 f8 03             	cmp    $0x3,%eax
f01272b8:	74 17                	je     f01272d1 <test_kfreeall+0x152b>
f01272ba:	83 ec 04             	sub    $0x4,%esp
f01272bd:	68 28 b2 13 f0       	push   $0xf013b228
f01272c2:	68 f3 0a 00 00       	push   $0xaf3
f01272c7:	68 76 a9 13 f0       	push   $0xf013a976
f01272cc:	e8 d5 8e fd ff       	call   f01001a6 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01272d1:	e8 12 52 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01272d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01272d9:	e8 ae c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01272de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01272e1:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01272e7:	83 ec 0c             	sub    $0xc,%esp
f01272ea:	50                   	push   %eax
f01272eb:	e8 ee 02 fe ff       	call   f01075de <kfree>
f01272f0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01272f3:	e8 94 c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01272f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01272fb:	74 17                	je     f0127314 <test_kfreeall+0x156e>
f01272fd:	83 ec 04             	sub    $0x4,%esp
f0127300:	68 90 a9 13 f0       	push   $0xf013a990
f0127305:	68 fc 0a 00 00       	push   $0xafc
f012730a:	68 76 a9 13 f0       	push   $0xf013a976
f012730f:	e8 92 8e fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127314:	e8 cf 51 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127319:	89 c2                	mov    %eax,%edx
f012731b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012731e:	39 c2                	cmp    %eax,%edx
f0127320:	74 17                	je     f0127339 <test_kfreeall+0x1593>
f0127322:	83 ec 04             	sub    $0x4,%esp
f0127325:	68 28 b2 13 f0       	push   $0xf013b228
f012732a:	68 fd 0a 00 00       	push   $0xafd
f012732f:	68 76 a9 13 f0       	push   $0xf013a976
f0127334:	e8 6d 8e fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127339:	e8 aa 51 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012733e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127341:	e8 46 c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127346:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127349:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012734f:	83 ec 0c             	sub    $0xc,%esp
f0127352:	50                   	push   %eax
f0127353:	e8 86 02 fe ff       	call   f01075de <kfree>
f0127358:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012735b:	e8 2c c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127360:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127363:	74 17                	je     f012737c <test_kfreeall+0x15d6>
f0127365:	83 ec 04             	sub    $0x4,%esp
f0127368:	68 90 a9 13 f0       	push   $0xf013a990
f012736d:	68 03 0b 00 00       	push   $0xb03
f0127372:	68 76 a9 13 f0       	push   $0xf013a976
f0127377:	e8 2a 8e fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012737c:	e8 67 51 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127381:	89 c2                	mov    %eax,%edx
f0127383:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127386:	39 c2                	cmp    %eax,%edx
f0127388:	74 17                	je     f01273a1 <test_kfreeall+0x15fb>
f012738a:	83 ec 04             	sub    $0x4,%esp
f012738d:	68 28 b2 13 f0       	push   $0xf013b228
f0127392:	68 04 0b 00 00       	push   $0xb04
f0127397:	68 76 a9 13 f0       	push   $0xf013a976
f012739c:	e8 05 8e fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01273a1:	e8 42 51 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01273a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273a9:	e8 de c8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01273ae:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01273b1:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01273b7:	83 ec 0c             	sub    $0xc,%esp
f01273ba:	50                   	push   %eax
f01273bb:	e8 1e 02 fe ff       	call   f01075de <kfree>
f01273c0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273c3:	e8 c4 c8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01273c8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01273cb:	74 17                	je     f01273e4 <test_kfreeall+0x163e>
f01273cd:	83 ec 04             	sub    $0x4,%esp
f01273d0:	68 90 a9 13 f0       	push   $0xf013a990
f01273d5:	68 0a 0b 00 00       	push   $0xb0a
f01273da:	68 76 a9 13 f0       	push   $0xf013a976
f01273df:	e8 c2 8d fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01273e4:	e8 ff 50 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01273e9:	89 c2                	mov    %eax,%edx
f01273eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01273ee:	39 c2                	cmp    %eax,%edx
f01273f0:	74 17                	je     f0127409 <test_kfreeall+0x1663>
f01273f2:	83 ec 04             	sub    $0x4,%esp
f01273f5:	68 28 b2 13 f0       	push   $0xf013b228
f01273fa:	68 0b 0b 00 00       	push   $0xb0b
f01273ff:	68 76 a9 13 f0       	push   $0xf013a976
f0127404:	e8 9d 8d fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127409:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127410:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127417:	eb 48                	jmp    f0127461 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127419:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012741c:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f0127421:	83 ec 04             	sub    $0x4,%esp
f0127424:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012742a:	51                   	push   %ecx
f012742b:	52                   	push   %edx
f012742c:	50                   	push   %eax
f012742d:	e8 37 f5 fd ff       	call   f0106969 <get_page_table>
f0127432:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127435:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012743b:	85 c0                	test   %eax,%eax
f012743d:	75 17                	jne    f0127456 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012743f:	83 ec 04             	sub    $0x4,%esp
f0127442:	68 78 b2 13 f0       	push   $0xf013b278
f0127447:	68 18 0b 00 00       	push   $0xb18
f012744c:	68 76 a9 13 f0       	push   $0xf013a976
f0127451:	e8 50 8d fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127456:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012745d:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127461:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127465:	78 b2                	js     f0127419 <test_kfreeall+0x1673>
f0127467:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012746b:	7f 09                	jg     f0127476 <test_kfreeall+0x16d0>
f012746d:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0127474:	76 a3                	jbe    f0127419 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127476:	83 ec 0c             	sub    $0xc,%esp
f0127479:	68 d4 b6 13 f0       	push   $0xf013b6d4
f012747e:	e8 aa 97 fd ff       	call   f0100c2d <cprintf>
f0127483:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127486:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012748b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012748e:	5b                   	pop    %ebx
f012748f:	5f                   	pop    %edi
f0127490:	5d                   	pop    %ebp
f0127491:	c3                   	ret    

f0127492 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127492:	55                   	push   %ebp
f0127493:	89 e5                	mov    %esp,%ebp
f0127495:	57                   	push   %edi
f0127496:	53                   	push   %ebx
f0127497:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f012749d:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01274a1:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01274a5:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01274ab:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01274b1:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01274b8:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01274bf:	e8 24 50 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01274c4:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01274c7:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01274cd:	b9 14 00 00 00       	mov    $0x14,%ecx
f01274d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01274d7:	89 d7                	mov    %edx,%edi
f01274d9:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01274db:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01274e1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01274e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01274eb:	89 d7                	mov    %edx,%edi
f01274ed:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01274ef:	e8 f4 4f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01274f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274f7:	e8 90 c7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01274fc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01274ff:	83 ec 0c             	sub    $0xc,%esp
f0127502:	68 00 fc 1f 00       	push   $0x1ffc00
f0127507:	e8 b8 00 fe ff       	call   f01075c4 <kmalloc>
f012750c:	83 c4 10             	add    $0x10,%esp
f012750f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127515:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012751b:	89 c1                	mov    %eax,%ecx
f012751d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127524:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127527:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012752c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012752f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127532:	ba 00 00 00 00       	mov    $0x0,%edx
f0127537:	f7 75 d4             	divl   -0x2c(%ebp)
f012753a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012753d:	29 d0                	sub    %edx,%eax
f012753f:	89 c3                	mov    %eax,%ebx
f0127541:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127548:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012754d:	0f b6 d0             	movzbl %al,%edx
f0127550:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127553:	01 d0                	add    %edx,%eax
f0127555:	48                   	dec    %eax
f0127556:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127559:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012755c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127561:	f7 75 cc             	divl   -0x34(%ebp)
f0127564:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127567:	29 d0                	sub    %edx,%eax
f0127569:	01 c3                	add    %eax,%ebx
f012756b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127572:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127577:	0f b6 c0             	movzbl %al,%eax
f012757a:	c1 e0 04             	shl    $0x4,%eax
f012757d:	89 c2                	mov    %eax,%edx
f012757f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127582:	01 d0                	add    %edx,%eax
f0127584:	48                   	dec    %eax
f0127585:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127588:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012758b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127590:	f7 75 c4             	divl   -0x3c(%ebp)
f0127593:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127596:	29 d0                	sub    %edx,%eax
f0127598:	01 d8                	add    %ebx,%eax
f012759a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012759f:	39 c1                	cmp    %eax,%ecx
f01275a1:	74 17                	je     f01275ba <test_kexpand+0x128>
f01275a3:	83 ec 04             	sub    $0x4,%esp
f01275a6:	68 5c aa 13 f0       	push   $0xf013aa5c
f01275ab:	68 43 0b 00 00       	push   $0xb43
f01275b0:	68 76 a9 13 f0       	push   $0xf013a976
f01275b5:	e8 ec 8b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275ba:	e8 cd c6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01275bf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01275c2:	74 17                	je     f01275db <test_kexpand+0x149>
f01275c4:	83 ec 04             	sub    $0x4,%esp
f01275c7:	68 90 a9 13 f0       	push   $0xf013a990
f01275cc:	68 44 0b 00 00       	push   $0xb44
f01275d1:	68 76 a9 13 f0       	push   $0xf013a976
f01275d6:	e8 cb 8b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01275db:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01275de:	e8 05 4f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01275e3:	29 c3                	sub    %eax,%ebx
f01275e5:	89 d8                	mov    %ebx,%eax
f01275e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01275ec:	74 17                	je     f0127605 <test_kexpand+0x173>
f01275ee:	83 ec 04             	sub    $0x4,%esp
f01275f1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01275f6:	68 45 0b 00 00       	push   $0xb45
f01275fb:	68 76 a9 13 f0       	push   $0xf013a976
f0127600:	e8 a1 8b fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127605:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f012760c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012760f:	e8 d4 4e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127614:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127617:	e8 70 c6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012761c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012761f:	83 ec 0c             	sub    $0xc,%esp
f0127622:	68 00 fc 1f 00       	push   $0x1ffc00
f0127627:	e8 98 ff fd ff       	call   f01075c4 <kmalloc>
f012762c:	83 c4 10             	add    $0x10,%esp
f012762f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127635:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012763b:	89 c1                	mov    %eax,%ecx
f012763d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127644:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127647:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012764c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012764f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127652:	ba 00 00 00 00       	mov    $0x0,%edx
f0127657:	f7 75 bc             	divl   -0x44(%ebp)
f012765a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012765d:	29 d0                	sub    %edx,%eax
f012765f:	89 c3                	mov    %eax,%ebx
f0127661:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127668:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012766d:	0f b6 d0             	movzbl %al,%edx
f0127670:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127673:	01 d0                	add    %edx,%eax
f0127675:	48                   	dec    %eax
f0127676:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127679:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012767c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127681:	f7 75 b4             	divl   -0x4c(%ebp)
f0127684:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127687:	29 d0                	sub    %edx,%eax
f0127689:	01 c3                	add    %eax,%ebx
f012768b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127692:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127697:	0f b6 c0             	movzbl %al,%eax
f012769a:	c1 e0 04             	shl    $0x4,%eax
f012769d:	89 c2                	mov    %eax,%edx
f012769f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01276a2:	01 d0                	add    %edx,%eax
f01276a4:	48                   	dec    %eax
f01276a5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01276a8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01276ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01276b0:	f7 75 ac             	divl   -0x54(%ebp)
f01276b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01276b6:	29 d0                	sub    %edx,%eax
f01276b8:	01 d8                	add    %ebx,%eax
f01276ba:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01276bf:	39 c1                	cmp    %eax,%ecx
f01276c1:	74 17                	je     f01276da <test_kexpand+0x248>
f01276c3:	83 ec 04             	sub    $0x4,%esp
f01276c6:	68 5c aa 13 f0       	push   $0xf013aa5c
f01276cb:	68 4c 0b 00 00       	push   $0xb4c
f01276d0:	68 76 a9 13 f0       	push   $0xf013a976
f01276d5:	e8 cc 8a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276da:	e8 ad c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01276df:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276e2:	74 17                	je     f01276fb <test_kexpand+0x269>
f01276e4:	83 ec 04             	sub    $0x4,%esp
f01276e7:	68 90 a9 13 f0       	push   $0xf013a990
f01276ec:	68 4d 0b 00 00       	push   $0xb4d
f01276f1:	68 76 a9 13 f0       	push   $0xf013a976
f01276f6:	e8 ab 8a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276fb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276fe:	e8 e5 4d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127703:	29 c3                	sub    %eax,%ebx
f0127705:	89 d8                	mov    %ebx,%eax
f0127707:	3d 00 02 00 00       	cmp    $0x200,%eax
f012770c:	74 17                	je     f0127725 <test_kexpand+0x293>
f012770e:	83 ec 04             	sub    $0x4,%esp
f0127711:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0127716:	68 4e 0b 00 00       	push   $0xb4e
f012771b:	68 76 a9 13 f0       	push   $0xf013a976
f0127720:	e8 81 8a fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127725:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f012772c:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012772f:	e8 b4 4d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127734:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127737:	e8 50 c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012773c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012773f:	83 ec 0c             	sub    $0xc,%esp
f0127742:	68 00 08 00 00       	push   $0x800
f0127747:	e8 78 fe fd ff       	call   f01075c4 <kmalloc>
f012774c:	83 c4 10             	add    $0x10,%esp
f012774f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127755:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012775b:	89 c1                	mov    %eax,%ecx
f012775d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127764:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127767:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012776c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012776f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127772:	ba 00 00 00 00       	mov    $0x0,%edx
f0127777:	f7 75 a4             	divl   -0x5c(%ebp)
f012777a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012777d:	29 d0                	sub    %edx,%eax
f012777f:	89 c3                	mov    %eax,%ebx
f0127781:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127788:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012778d:	0f b6 d0             	movzbl %al,%edx
f0127790:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127793:	01 d0                	add    %edx,%eax
f0127795:	48                   	dec    %eax
f0127796:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127799:	8b 45 98             	mov    -0x68(%ebp),%eax
f012779c:	ba 00 00 00 00       	mov    $0x0,%edx
f01277a1:	f7 75 9c             	divl   -0x64(%ebp)
f01277a4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01277a7:	29 d0                	sub    %edx,%eax
f01277a9:	01 c3                	add    %eax,%ebx
f01277ab:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01277b2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01277b7:	0f b6 c0             	movzbl %al,%eax
f01277ba:	c1 e0 04             	shl    $0x4,%eax
f01277bd:	89 c2                	mov    %eax,%edx
f01277bf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01277c2:	01 d0                	add    %edx,%eax
f01277c4:	48                   	dec    %eax
f01277c5:	89 45 90             	mov    %eax,-0x70(%ebp)
f01277c8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01277cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01277d0:	f7 75 94             	divl   -0x6c(%ebp)
f01277d3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01277d6:	29 d0                	sub    %edx,%eax
f01277d8:	01 d8                	add    %ebx,%eax
f01277da:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01277df:	39 c1                	cmp    %eax,%ecx
f01277e1:	74 17                	je     f01277fa <test_kexpand+0x368>
f01277e3:	83 ec 04             	sub    $0x4,%esp
f01277e6:	68 5c aa 13 f0       	push   $0xf013aa5c
f01277eb:	68 55 0b 00 00       	push   $0xb55
f01277f0:	68 76 a9 13 f0       	push   $0xf013a976
f01277f5:	e8 ac 89 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277fa:	e8 8d c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01277ff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127802:	74 17                	je     f012781b <test_kexpand+0x389>
f0127804:	83 ec 04             	sub    $0x4,%esp
f0127807:	68 90 a9 13 f0       	push   $0xf013a990
f012780c:	68 56 0b 00 00       	push   $0xb56
f0127811:	68 76 a9 13 f0       	push   $0xf013a976
f0127816:	e8 8b 89 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012781b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012781e:	e8 c5 4c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127823:	29 c3                	sub    %eax,%ebx
f0127825:	89 d8                	mov    %ebx,%eax
f0127827:	83 f8 01             	cmp    $0x1,%eax
f012782a:	74 17                	je     f0127843 <test_kexpand+0x3b1>
f012782c:	83 ec 04             	sub    $0x4,%esp
f012782f:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0127834:	68 57 0b 00 00       	push   $0xb57
f0127839:	68 76 a9 13 f0       	push   $0xf013a976
f012783e:	e8 63 89 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127843:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f012784a:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012784d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127853:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127856:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012785d:	eb 0e                	jmp    f012786d <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f012785f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127862:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127865:	01 d0                	add    %edx,%eax
f0127867:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012786a:	ff 45 f4             	incl   -0xc(%ebp)
f012786d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127873:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127876:	7f e7                	jg     f012785f <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127878:	e8 6b 4c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012787d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127880:	e8 07 c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127885:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127888:	83 ec 0c             	sub    $0xc,%esp
f012788b:	68 00 08 00 00       	push   $0x800
f0127890:	e8 2f fd fd ff       	call   f01075c4 <kmalloc>
f0127895:	83 c4 10             	add    $0x10,%esp
f0127898:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012789e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01278a4:	89 c1                	mov    %eax,%ecx
f01278a6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01278ad:	8b 45 88             	mov    -0x78(%ebp),%eax
f01278b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01278b5:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01278b8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01278bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01278c0:	f7 75 88             	divl   -0x78(%ebp)
f01278c3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01278c6:	29 d0                	sub    %edx,%eax
f01278c8:	89 c3                	mov    %eax,%ebx
f01278ca:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01278d1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01278d6:	0f b6 d0             	movzbl %al,%edx
f01278d9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01278dc:	01 d0                	add    %edx,%eax
f01278de:	48                   	dec    %eax
f01278df:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01278e5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01278eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01278f0:	f7 75 80             	divl   -0x80(%ebp)
f01278f3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01278f9:	29 d0                	sub    %edx,%eax
f01278fb:	01 c3                	add    %eax,%ebx
f01278fd:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127904:	10 00 00 
f0127907:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012790c:	0f b6 c0             	movzbl %al,%eax
f012790f:	c1 e0 04             	shl    $0x4,%eax
f0127912:	89 c2                	mov    %eax,%edx
f0127914:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012791a:	01 d0                	add    %edx,%eax
f012791c:	48                   	dec    %eax
f012791d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127923:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127929:	ba 00 00 00 00       	mov    $0x0,%edx
f012792e:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127934:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012793a:	29 d0                	sub    %edx,%eax
f012793c:	01 d8                	add    %ebx,%eax
f012793e:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127943:	39 c1                	cmp    %eax,%ecx
f0127945:	74 17                	je     f012795e <test_kexpand+0x4cc>
f0127947:	83 ec 04             	sub    $0x4,%esp
f012794a:	68 5c aa 13 f0       	push   $0xf013aa5c
f012794f:	68 63 0b 00 00       	push   $0xb63
f0127954:	68 76 a9 13 f0       	push   $0xf013a976
f0127959:	e8 48 88 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012795e:	e8 29 c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127963:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127966:	74 17                	je     f012797f <test_kexpand+0x4ed>
f0127968:	83 ec 04             	sub    $0x4,%esp
f012796b:	68 90 a9 13 f0       	push   $0xf013a990
f0127970:	68 64 0b 00 00       	push   $0xb64
f0127975:	68 76 a9 13 f0       	push   $0xf013a976
f012797a:	e8 27 88 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012797f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127982:	e8 61 4b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127987:	29 c3                	sub    %eax,%ebx
f0127989:	89 d8                	mov    %ebx,%eax
f012798b:	83 f8 01             	cmp    $0x1,%eax
f012798e:	74 17                	je     f01279a7 <test_kexpand+0x515>
f0127990:	83 ec 04             	sub    $0x4,%esp
f0127993:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0127998:	68 65 0b 00 00       	push   $0xb65
f012799d:	68 76 a9 13 f0       	push   $0xf013a976
f01279a2:	e8 ff 87 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01279a7:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01279ae:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01279b1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01279b7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01279ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01279c1:	eb 0e                	jmp    f01279d1 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01279c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01279c6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01279c9:	01 d0                	add    %edx,%eax
f01279cb:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01279ce:	ff 45 f4             	incl   -0xc(%ebp)
f01279d1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01279d7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01279da:	7f e7                	jg     f01279c3 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01279dc:	e8 07 4b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01279e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279e4:	e8 a3 c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01279e9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01279ec:	83 ec 0c             	sub    $0xc,%esp
f01279ef:	68 00 1c 00 00       	push   $0x1c00
f01279f4:	e8 cb fb fd ff       	call   f01075c4 <kmalloc>
f01279f9:	83 c4 10             	add    $0x10,%esp
f01279fc:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a02:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127a08:	89 c1                	mov    %eax,%ecx
f0127a0a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127a11:	10 00 00 
f0127a14:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127a1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127a1f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127a25:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127a2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a30:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127a36:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127a3c:	29 d0                	sub    %edx,%eax
f0127a3e:	89 c3                	mov    %eax,%ebx
f0127a40:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127a47:	10 00 00 
f0127a4a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127a4f:	0f b6 d0             	movzbl %al,%edx
f0127a52:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127a58:	01 d0                	add    %edx,%eax
f0127a5a:	48                   	dec    %eax
f0127a5b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127a61:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127a67:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a6c:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127a72:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127a78:	29 d0                	sub    %edx,%eax
f0127a7a:	01 c3                	add    %eax,%ebx
f0127a7c:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0127a83:	10 00 00 
f0127a86:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127a8b:	0f b6 c0             	movzbl %al,%eax
f0127a8e:	c1 e0 04             	shl    $0x4,%eax
f0127a91:	89 c2                	mov    %eax,%edx
f0127a93:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127a99:	01 d0                	add    %edx,%eax
f0127a9b:	48                   	dec    %eax
f0127a9c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0127aa2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127aa8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127aad:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0127ab3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127ab9:	29 d0                	sub    %edx,%eax
f0127abb:	01 d8                	add    %ebx,%eax
f0127abd:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127ac2:	39 c1                	cmp    %eax,%ecx
f0127ac4:	74 17                	je     f0127add <test_kexpand+0x64b>
f0127ac6:	83 ec 04             	sub    $0x4,%esp
f0127ac9:	68 5c aa 13 f0       	push   $0xf013aa5c
f0127ace:	68 71 0b 00 00       	push   $0xb71
f0127ad3:	68 76 a9 13 f0       	push   $0xf013a976
f0127ad8:	e8 c9 86 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127add:	e8 aa c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127ae2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127ae5:	74 17                	je     f0127afe <test_kexpand+0x66c>
f0127ae7:	83 ec 04             	sub    $0x4,%esp
f0127aea:	68 90 a9 13 f0       	push   $0xf013a990
f0127aef:	68 72 0b 00 00       	push   $0xb72
f0127af4:	68 76 a9 13 f0       	push   $0xf013a976
f0127af9:	e8 a8 86 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127afe:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b01:	e8 e2 49 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127b06:	29 c3                	sub    %eax,%ebx
f0127b08:	89 d8                	mov    %ebx,%eax
f0127b0a:	83 f8 02             	cmp    $0x2,%eax
f0127b0d:	74 17                	je     f0127b26 <test_kexpand+0x694>
f0127b0f:	83 ec 04             	sub    $0x4,%esp
f0127b12:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0127b17:	68 73 0b 00 00       	push   $0xb73
f0127b1c:	68 76 a9 13 f0       	push   $0xf013a976
f0127b21:	e8 80 86 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127b26:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0127b2d:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127b30:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127b36:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127b39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b40:	eb 0e                	jmp    f0127b50 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127b42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127b45:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127b48:	01 d0                	add    %edx,%eax
f0127b4a:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127b4d:	ff 45 f4             	incl   -0xc(%ebp)
f0127b50:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127b56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b59:	7f e7                	jg     f0127b42 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127b5b:	e8 88 49 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127b60:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b63:	e8 24 c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127b68:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127b6b:	83 ec 0c             	sub    $0xc,%esp
f0127b6e:	68 00 fc 2f 00       	push   $0x2ffc00
f0127b73:	e8 4c fa fd ff       	call   f01075c4 <kmalloc>
f0127b78:	83 c4 10             	add    $0x10,%esp
f0127b7b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127b81:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127b87:	89 c1                	mov    %eax,%ecx
f0127b89:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127b90:	10 00 00 
f0127b93:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127b99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127b9e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127ba4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127baa:	ba 00 00 00 00       	mov    $0x0,%edx
f0127baf:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127bb5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127bbb:	29 d0                	sub    %edx,%eax
f0127bbd:	89 c3                	mov    %eax,%ebx
f0127bbf:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127bc6:	10 00 00 
f0127bc9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127bce:	0f b6 d0             	movzbl %al,%edx
f0127bd1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127bd7:	01 d0                	add    %edx,%eax
f0127bd9:	48                   	dec    %eax
f0127bda:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127be0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127be6:	ba 00 00 00 00       	mov    $0x0,%edx
f0127beb:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127bf1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127bf7:	29 d0                	sub    %edx,%eax
f0127bf9:	01 c3                	add    %eax,%ebx
f0127bfb:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127c02:	10 00 00 
f0127c05:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127c0a:	0f b6 c0             	movzbl %al,%eax
f0127c0d:	c1 e0 04             	shl    $0x4,%eax
f0127c10:	89 c2                	mov    %eax,%edx
f0127c12:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127c18:	01 d0                	add    %edx,%eax
f0127c1a:	48                   	dec    %eax
f0127c1b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127c21:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127c27:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c2c:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127c32:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127c38:	29 d0                	sub    %edx,%eax
f0127c3a:	01 d8                	add    %ebx,%eax
f0127c3c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127c41:	39 c1                	cmp    %eax,%ecx
f0127c43:	74 17                	je     f0127c5c <test_kexpand+0x7ca>
f0127c45:	83 ec 04             	sub    $0x4,%esp
f0127c48:	68 5c aa 13 f0       	push   $0xf013aa5c
f0127c4d:	68 7f 0b 00 00       	push   $0xb7f
f0127c52:	68 76 a9 13 f0       	push   $0xf013a976
f0127c57:	e8 4a 85 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c5c:	e8 2b c0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127c61:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c64:	74 17                	je     f0127c7d <test_kexpand+0x7eb>
f0127c66:	83 ec 04             	sub    $0x4,%esp
f0127c69:	68 90 a9 13 f0       	push   $0xf013a990
f0127c6e:	68 80 0b 00 00       	push   $0xb80
f0127c73:	68 76 a9 13 f0       	push   $0xf013a976
f0127c78:	e8 29 85 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c7d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127c80:	e8 63 48 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127c85:	29 c3                	sub    %eax,%ebx
f0127c87:	89 d8                	mov    %ebx,%eax
f0127c89:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127c8e:	74 17                	je     f0127ca7 <test_kexpand+0x815>
f0127c90:	83 ec 04             	sub    $0x4,%esp
f0127c93:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0127c98:	68 81 0b 00 00       	push   $0xb81
f0127c9d:	68 76 a9 13 f0       	push   $0xf013a976
f0127ca2:	e8 ff 84 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127ca7:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0127cae:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127cb1:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127cb7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127cba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127cc1:	eb 0e                	jmp    f0127cd1 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0127cc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127cc6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127cc9:	01 d0                	add    %edx,%eax
f0127ccb:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127cce:	ff 45 f4             	incl   -0xc(%ebp)
f0127cd1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127cd7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127cda:	7f e7                	jg     f0127cc3 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127cdc:	e8 07 48 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127ce1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ce4:	e8 a3 bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127ce9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0127cec:	83 ec 0c             	sub    $0xc,%esp
f0127cef:	68 00 00 60 00       	push   $0x600000
f0127cf4:	e8 cb f8 fd ff       	call   f01075c4 <kmalloc>
f0127cf9:	83 c4 10             	add    $0x10,%esp
f0127cfc:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d02:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127d08:	89 c1                	mov    %eax,%ecx
f0127d0a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127d11:	10 00 00 
f0127d14:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127d1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127d1f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127d25:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127d2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d30:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127d36:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127d3c:	29 d0                	sub    %edx,%eax
f0127d3e:	89 c3                	mov    %eax,%ebx
f0127d40:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0127d47:	10 00 00 
f0127d4a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127d4f:	0f b6 d0             	movzbl %al,%edx
f0127d52:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127d58:	01 d0                	add    %edx,%eax
f0127d5a:	48                   	dec    %eax
f0127d5b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0127d61:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127d67:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d6c:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0127d72:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127d78:	29 d0                	sub    %edx,%eax
f0127d7a:	01 c3                	add    %eax,%ebx
f0127d7c:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0127d83:	10 00 00 
f0127d86:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0127d8b:	0f b6 c0             	movzbl %al,%eax
f0127d8e:	c1 e0 04             	shl    $0x4,%eax
f0127d91:	89 c2                	mov    %eax,%edx
f0127d93:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127d99:	01 d0                	add    %edx,%eax
f0127d9b:	48                   	dec    %eax
f0127d9c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0127da2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127da8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dad:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0127db3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127db9:	29 d0                	sub    %edx,%eax
f0127dbb:	01 d8                	add    %ebx,%eax
f0127dbd:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127dc2:	39 c1                	cmp    %eax,%ecx
f0127dc4:	74 17                	je     f0127ddd <test_kexpand+0x94b>
f0127dc6:	83 ec 04             	sub    $0x4,%esp
f0127dc9:	68 5c aa 13 f0       	push   $0xf013aa5c
f0127dce:	68 8d 0b 00 00       	push   $0xb8d
f0127dd3:	68 76 a9 13 f0       	push   $0xf013a976
f0127dd8:	e8 c9 83 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ddd:	e8 aa be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127de2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127de5:	74 17                	je     f0127dfe <test_kexpand+0x96c>
f0127de7:	83 ec 04             	sub    $0x4,%esp
f0127dea:	68 90 a9 13 f0       	push   $0xf013a990
f0127def:	68 8e 0b 00 00       	push   $0xb8e
f0127df4:	68 76 a9 13 f0       	push   $0xf013a976
f0127df9:	e8 a8 83 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127dfe:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e01:	e8 e2 46 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127e06:	29 c3                	sub    %eax,%ebx
f0127e08:	89 d8                	mov    %ebx,%eax
f0127e0a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127e0f:	74 17                	je     f0127e28 <test_kexpand+0x996>
f0127e11:	83 ec 04             	sub    $0x4,%esp
f0127e14:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0127e19:	68 8f 0b 00 00       	push   $0xb8f
f0127e1e:	68 76 a9 13 f0       	push   $0xf013a976
f0127e23:	e8 7e 83 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127e28:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0127e2f:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127e32:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127e38:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127e3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127e45:	eb 1a                	jmp    f0127e61 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0127e47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127e4a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127e51:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127e57:	01 c2                	add    %eax,%edx
f0127e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127e5c:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127e5e:	ff 45 f4             	incl   -0xc(%ebp)
f0127e61:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127e67:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e6a:	7d db                	jge    f0127e47 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0127e6c:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0127e73:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0127e76:	e8 6d 46 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127e7b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e7e:	e8 09 be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127e83:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0127e86:	83 ec 0c             	sub    $0xc,%esp
f0127e89:	68 00 00 70 00       	push   $0x700000
f0127e8e:	e8 df f7 fd ff       	call   f0107672 <kexpand>
f0127e93:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127e96:	e8 f1 bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127e9b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127e9e:	74 19                	je     f0127eb9 <test_kexpand+0xa27>
f0127ea0:	68 10 b7 13 f0       	push   $0xf013b710
f0127ea5:	68 41 b7 13 f0       	push   $0xf013b741
f0127eaa:	68 a0 0b 00 00       	push   $0xba0
f0127eaf:	68 76 a9 13 f0       	push   $0xf013a976
f0127eb4:	e8 ed 82 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0127eb9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127ebc:	e8 27 46 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127ec1:	29 c3                	sub    %eax,%ebx
f0127ec3:	89 d8                	mov    %ebx,%eax
f0127ec5:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127eca:	74 19                	je     f0127ee5 <test_kexpand+0xa53>
f0127ecc:	68 58 b7 13 f0       	push   $0xf013b758
f0127ed1:	68 41 b7 13 f0       	push   $0xf013b741
f0127ed6:	68 a1 0b 00 00       	push   $0xba1
f0127edb:	68 76 a9 13 f0       	push   $0xf013a976
f0127ee0:	e8 c1 82 fd ff       	call   f01001a6 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127ee5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127eeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0127eee:	eb 1a                	jmp    f0127f0a <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0127ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127ef3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127efa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127f00:	01 c2                	add    %eax,%edx
f0127f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f05:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127f07:	ff 45 f4             	incl   -0xc(%ebp)
f0127f0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f0d:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127f13:	7c db                	jl     f0127ef0 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127f15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f1c:	eb 37                	jmp    f0127f55 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0127f1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f21:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127f28:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127f2e:	01 d0                	add    %edx,%eax
f0127f30:	8b 10                	mov    (%eax),%edx
f0127f32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f35:	39 c2                	cmp    %eax,%edx
f0127f37:	74 19                	je     f0127f52 <test_kexpand+0xac0>
f0127f39:	68 88 b7 13 f0       	push   $0xf013b788
f0127f3e:	68 41 b7 13 f0       	push   $0xf013b741
f0127f43:	68 ad 0b 00 00       	push   $0xbad
f0127f48:	68 76 a9 13 f0       	push   $0xf013a976
f0127f4d:	e8 54 82 fd ff       	call   f01001a6 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127f52:	ff 45 f4             	incl   -0xc(%ebp)
f0127f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f58:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127f5e:	7c be                	jl     f0127f1e <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127f60:	e8 83 45 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127f65:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f68:	e8 1f bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127f6d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0127f70:	83 ec 0c             	sub    $0xc,%esp
f0127f73:	68 00 00 a0 00       	push   $0xa00000
f0127f78:	e8 f5 f6 fd ff       	call   f0107672 <kexpand>
f0127f7d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127f80:	e8 07 bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127f85:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f88:	74 19                	je     f0127fa3 <test_kexpand+0xb11>
f0127f8a:	68 10 b7 13 f0       	push   $0xf013b710
f0127f8f:	68 41 b7 13 f0       	push   $0xf013b741
f0127f94:	68 b8 0b 00 00       	push   $0xbb8
f0127f99:	68 76 a9 13 f0       	push   $0xf013a976
f0127f9e:	e8 03 82 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0127fa3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127fa6:	e8 3d 45 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127fab:	29 c3                	sub    %eax,%ebx
f0127fad:	89 d8                	mov    %ebx,%eax
f0127faf:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127fb4:	74 19                	je     f0127fcf <test_kexpand+0xb3d>
f0127fb6:	68 94 b7 13 f0       	push   $0xf013b794
f0127fbb:	68 41 b7 13 f0       	push   $0xf013b741
f0127fc0:	68 b9 0b 00 00       	push   $0xbb9
f0127fc5:	68 76 a9 13 f0       	push   $0xf013a976
f0127fca:	e8 d7 81 fd ff       	call   f01001a6 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127fcf:	e8 14 45 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0127fd4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127fd7:	e8 b0 bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127fdc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127fdf:	83 ec 0c             	sub    $0xc,%esp
f0127fe2:	68 00 00 40 00       	push   $0x400000
f0127fe7:	e8 d8 f5 fd ff       	call   f01075c4 <kmalloc>
f0127fec:	83 c4 10             	add    $0x10,%esp
f0127fef:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0127ff5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127ffb:	89 c1                	mov    %eax,%ecx
f0127ffd:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128004:	10 00 00 
f0128007:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012800d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128012:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128018:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012801e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128023:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128029:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012802f:	29 d0                	sub    %edx,%eax
f0128031:	89 c3                	mov    %eax,%ebx
f0128033:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012803a:	10 00 00 
f012803d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128042:	0f b6 d0             	movzbl %al,%edx
f0128045:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012804b:	01 d0                	add    %edx,%eax
f012804d:	48                   	dec    %eax
f012804e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128054:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012805a:	ba 00 00 00 00       	mov    $0x0,%edx
f012805f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128065:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012806b:	29 d0                	sub    %edx,%eax
f012806d:	01 c3                	add    %eax,%ebx
f012806f:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128076:	10 00 00 
f0128079:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012807e:	0f b6 c0             	movzbl %al,%eax
f0128081:	c1 e0 04             	shl    $0x4,%eax
f0128084:	89 c2                	mov    %eax,%edx
f0128086:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012808c:	01 d0                	add    %edx,%eax
f012808e:	48                   	dec    %eax
f012808f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128095:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012809b:	ba 00 00 00 00       	mov    $0x0,%edx
f01280a0:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01280a6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01280ac:	29 d0                	sub    %edx,%eax
f01280ae:	01 d8                	add    %ebx,%eax
f01280b0:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f01280b5:	39 c1                	cmp    %eax,%ecx
f01280b7:	74 17                	je     f01280d0 <test_kexpand+0xc3e>
f01280b9:	83 ec 04             	sub    $0x4,%esp
f01280bc:	68 c4 b7 13 f0       	push   $0xf013b7c4
f01280c1:	68 c4 0b 00 00       	push   $0xbc4
f01280c6:	68 76 a9 13 f0       	push   $0xf013a976
f01280cb:	e8 d6 80 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280d0:	e8 b7 bb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01280d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280d8:	74 17                	je     f01280f1 <test_kexpand+0xc5f>
f01280da:	83 ec 04             	sub    $0x4,%esp
f01280dd:	68 90 a9 13 f0       	push   $0xf013a990
f01280e2:	68 c5 0b 00 00       	push   $0xbc5
f01280e7:	68 76 a9 13 f0       	push   $0xf013a976
f01280ec:	e8 b5 80 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01280f1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01280f4:	e8 ef 43 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01280f9:	29 c3                	sub    %eax,%ebx
f01280fb:	89 d8                	mov    %ebx,%eax
f01280fd:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128102:	74 17                	je     f012811b <test_kexpand+0xc89>
f0128104:	83 ec 04             	sub    $0x4,%esp
f0128107:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012810c:	68 c6 0b 00 00       	push   $0xbc6
f0128111:	68 76 a9 13 f0       	push   $0xf013a976
f0128116:	e8 8b 80 fd ff       	call   f01001a6 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f012811b:	e8 c8 43 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128120:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128123:	e8 64 bb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128128:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012812b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128131:	83 ec 0c             	sub    $0xc,%esp
f0128134:	50                   	push   %eax
f0128135:	e8 a4 f4 fd ff       	call   f01075de <kfree>
f012813a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012813d:	e8 4a bb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128142:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128145:	74 17                	je     f012815e <test_kexpand+0xccc>
f0128147:	83 ec 04             	sub    $0x4,%esp
f012814a:	68 90 a9 13 f0       	push   $0xf013a990
f012814f:	68 cf 0b 00 00       	push   $0xbcf
f0128154:	68 76 a9 13 f0       	push   $0xf013a976
f0128159:	e8 48 80 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012815e:	e8 85 43 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128163:	89 c2                	mov    %eax,%edx
f0128165:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128168:	29 c2                	sub    %eax,%edx
f012816a:	89 d0                	mov    %edx,%eax
f012816c:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128171:	74 17                	je     f012818a <test_kexpand+0xcf8>
f0128173:	83 ec 04             	sub    $0x4,%esp
f0128176:	68 28 b2 13 f0       	push   $0xf013b228
f012817b:	68 d0 0b 00 00       	push   $0xbd0
f0128180:	68 76 a9 13 f0       	push   $0xf013a976
f0128185:	e8 1c 80 fd ff       	call   f01001a6 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012818a:	e8 59 43 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012818f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128192:	e8 f5 ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128197:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f012819a:	83 ec 0c             	sub    $0xc,%esp
f012819d:	68 00 50 40 00       	push   $0x405000
f01281a2:	e8 cb f4 fd ff       	call   f0107672 <kexpand>
f01281a7:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01281aa:	e8 dd ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01281af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01281b2:	74 19                	je     f01281cd <test_kexpand+0xd3b>
f01281b4:	68 10 b7 13 f0       	push   $0xf013b710
f01281b9:	68 41 b7 13 f0       	push   $0xf013b741
f01281be:	68 da 0b 00 00       	push   $0xbda
f01281c3:	68 76 a9 13 f0       	push   $0xf013a976
f01281c8:	e8 d9 7f fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f01281cd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01281d0:	e8 13 43 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01281d5:	29 c3                	sub    %eax,%ebx
f01281d7:	89 d8                	mov    %ebx,%eax
f01281d9:	83 f8 05             	cmp    $0x5,%eax
f01281dc:	74 19                	je     f01281f7 <test_kexpand+0xd65>
f01281de:	68 ec b7 13 f0       	push   $0xf013b7ec
f01281e3:	68 41 b7 13 f0       	push   $0xf013b741
f01281e8:	68 db 0b 00 00       	push   $0xbdb
f01281ed:	68 76 a9 13 f0       	push   $0xf013a976
f01281f2:	e8 af 7f fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01281f7:	83 ec 0c             	sub    $0xc,%esp
f01281fa:	68 d4 b6 13 f0       	push   $0xf013b6d4
f01281ff:	e8 29 8a fd ff       	call   f0100c2d <cprintf>
f0128204:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128207:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012820c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012820f:	5b                   	pop    %ebx
f0128210:	5f                   	pop    %edi
f0128211:	5d                   	pop    %ebp
f0128212:	c3                   	ret    

f0128213 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128213:	55                   	push   %ebp
f0128214:	89 e5                	mov    %esp,%ebp
f0128216:	57                   	push   %edi
f0128217:	53                   	push   %ebx
f0128218:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f012821e:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128222:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128226:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012822c:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128232:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128239:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128240:	e8 a3 42 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128245:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128248:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f012824e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128253:	b8 00 00 00 00       	mov    $0x0,%eax
f0128258:	89 d7                	mov    %edx,%edi
f012825a:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012825c:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128262:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128267:	b8 00 00 00 00       	mov    $0x0,%eax
f012826c:	89 d7                	mov    %edx,%edi
f012826e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128270:	e8 73 42 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128275:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128278:	e8 0f ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012827d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128280:	83 ec 0c             	sub    $0xc,%esp
f0128283:	68 00 fc 1f 00       	push   $0x1ffc00
f0128288:	e8 37 f3 fd ff       	call   f01075c4 <kmalloc>
f012828d:	83 c4 10             	add    $0x10,%esp
f0128290:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128296:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012829c:	89 c1                	mov    %eax,%ecx
f012829e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01282a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01282a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01282ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01282b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01282b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01282b8:	f7 75 d4             	divl   -0x2c(%ebp)
f01282bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01282be:	29 d0                	sub    %edx,%eax
f01282c0:	89 c3                	mov    %eax,%ebx
f01282c2:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01282c9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01282ce:	0f b6 d0             	movzbl %al,%edx
f01282d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01282d4:	01 d0                	add    %edx,%eax
f01282d6:	48                   	dec    %eax
f01282d7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01282da:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01282dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01282e2:	f7 75 cc             	divl   -0x34(%ebp)
f01282e5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01282e8:	29 d0                	sub    %edx,%eax
f01282ea:	01 c3                	add    %eax,%ebx
f01282ec:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01282f3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01282f8:	0f b6 c0             	movzbl %al,%eax
f01282fb:	c1 e0 04             	shl    $0x4,%eax
f01282fe:	89 c2                	mov    %eax,%edx
f0128300:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128303:	01 d0                	add    %edx,%eax
f0128305:	48                   	dec    %eax
f0128306:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128309:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012830c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128311:	f7 75 c4             	divl   -0x3c(%ebp)
f0128314:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128317:	29 d0                	sub    %edx,%eax
f0128319:	01 d8                	add    %ebx,%eax
f012831b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128320:	39 c1                	cmp    %eax,%ecx
f0128322:	74 17                	je     f012833b <test_kshrink+0x128>
f0128324:	83 ec 04             	sub    $0x4,%esp
f0128327:	68 5c aa 13 f0       	push   $0xf013aa5c
f012832c:	68 01 0c 00 00       	push   $0xc01
f0128331:	68 76 a9 13 f0       	push   $0xf013a976
f0128336:	e8 6b 7e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012833b:	e8 4c b9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128340:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128343:	74 17                	je     f012835c <test_kshrink+0x149>
f0128345:	83 ec 04             	sub    $0x4,%esp
f0128348:	68 90 a9 13 f0       	push   $0xf013a990
f012834d:	68 02 0c 00 00       	push   $0xc02
f0128352:	68 76 a9 13 f0       	push   $0xf013a976
f0128357:	e8 4a 7e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012835c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012835f:	e8 84 41 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128364:	29 c3                	sub    %eax,%ebx
f0128366:	89 d8                	mov    %ebx,%eax
f0128368:	3d 00 02 00 00       	cmp    $0x200,%eax
f012836d:	74 17                	je     f0128386 <test_kshrink+0x173>
f012836f:	83 ec 04             	sub    $0x4,%esp
f0128372:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0128377:	68 03 0c 00 00       	push   $0xc03
f012837c:	68 76 a9 13 f0       	push   $0xf013a976
f0128381:	e8 20 7e fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128386:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f012838d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128390:	e8 53 41 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128395:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128398:	e8 ef b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012839d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01283a0:	83 ec 0c             	sub    $0xc,%esp
f01283a3:	68 00 fc 1f 00       	push   $0x1ffc00
f01283a8:	e8 17 f2 fd ff       	call   f01075c4 <kmalloc>
f01283ad:	83 c4 10             	add    $0x10,%esp
f01283b0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01283b6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01283bc:	89 c1                	mov    %eax,%ecx
f01283be:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01283c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01283c8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01283cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01283d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01283d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01283d8:	f7 75 bc             	divl   -0x44(%ebp)
f01283db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01283de:	29 d0                	sub    %edx,%eax
f01283e0:	89 c3                	mov    %eax,%ebx
f01283e2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01283e9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01283ee:	0f b6 d0             	movzbl %al,%edx
f01283f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01283f4:	01 d0                	add    %edx,%eax
f01283f6:	48                   	dec    %eax
f01283f7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01283fa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01283fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0128402:	f7 75 b4             	divl   -0x4c(%ebp)
f0128405:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128408:	29 d0                	sub    %edx,%eax
f012840a:	01 c3                	add    %eax,%ebx
f012840c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128413:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128418:	0f b6 c0             	movzbl %al,%eax
f012841b:	c1 e0 04             	shl    $0x4,%eax
f012841e:	89 c2                	mov    %eax,%edx
f0128420:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128423:	01 d0                	add    %edx,%eax
f0128425:	48                   	dec    %eax
f0128426:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128429:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012842c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128431:	f7 75 ac             	divl   -0x54(%ebp)
f0128434:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128437:	29 d0                	sub    %edx,%eax
f0128439:	01 d8                	add    %ebx,%eax
f012843b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128440:	39 c1                	cmp    %eax,%ecx
f0128442:	74 17                	je     f012845b <test_kshrink+0x248>
f0128444:	83 ec 04             	sub    $0x4,%esp
f0128447:	68 5c aa 13 f0       	push   $0xf013aa5c
f012844c:	68 0a 0c 00 00       	push   $0xc0a
f0128451:	68 76 a9 13 f0       	push   $0xf013a976
f0128456:	e8 4b 7d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012845b:	e8 2c b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128460:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128463:	74 17                	je     f012847c <test_kshrink+0x269>
f0128465:	83 ec 04             	sub    $0x4,%esp
f0128468:	68 90 a9 13 f0       	push   $0xf013a990
f012846d:	68 0b 0c 00 00       	push   $0xc0b
f0128472:	68 76 a9 13 f0       	push   $0xf013a976
f0128477:	e8 2a 7d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012847c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012847f:	e8 64 40 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128484:	29 c3                	sub    %eax,%ebx
f0128486:	89 d8                	mov    %ebx,%eax
f0128488:	3d 00 02 00 00       	cmp    $0x200,%eax
f012848d:	74 17                	je     f01284a6 <test_kshrink+0x293>
f012848f:	83 ec 04             	sub    $0x4,%esp
f0128492:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0128497:	68 0c 0c 00 00       	push   $0xc0c
f012849c:	68 76 a9 13 f0       	push   $0xf013a976
f01284a1:	e8 00 7d fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01284a6:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f01284ad:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01284b0:	e8 33 40 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01284b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284b8:	e8 cf b7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01284bd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01284c0:	83 ec 0c             	sub    $0xc,%esp
f01284c3:	68 00 08 00 00       	push   $0x800
f01284c8:	e8 f7 f0 fd ff       	call   f01075c4 <kmalloc>
f01284cd:	83 c4 10             	add    $0x10,%esp
f01284d0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01284d6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01284dc:	89 c1                	mov    %eax,%ecx
f01284de:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01284e5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01284e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01284ed:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01284f0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01284f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01284f8:	f7 75 a4             	divl   -0x5c(%ebp)
f01284fb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01284fe:	29 d0                	sub    %edx,%eax
f0128500:	89 c3                	mov    %eax,%ebx
f0128502:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128509:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012850e:	0f b6 d0             	movzbl %al,%edx
f0128511:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128514:	01 d0                	add    %edx,%eax
f0128516:	48                   	dec    %eax
f0128517:	89 45 98             	mov    %eax,-0x68(%ebp)
f012851a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012851d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128522:	f7 75 9c             	divl   -0x64(%ebp)
f0128525:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128528:	29 d0                	sub    %edx,%eax
f012852a:	01 c3                	add    %eax,%ebx
f012852c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128533:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128538:	0f b6 c0             	movzbl %al,%eax
f012853b:	c1 e0 04             	shl    $0x4,%eax
f012853e:	89 c2                	mov    %eax,%edx
f0128540:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128543:	01 d0                	add    %edx,%eax
f0128545:	48                   	dec    %eax
f0128546:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128549:	8b 45 90             	mov    -0x70(%ebp),%eax
f012854c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128551:	f7 75 94             	divl   -0x6c(%ebp)
f0128554:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128557:	29 d0                	sub    %edx,%eax
f0128559:	01 d8                	add    %ebx,%eax
f012855b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128560:	39 c1                	cmp    %eax,%ecx
f0128562:	74 17                	je     f012857b <test_kshrink+0x368>
f0128564:	83 ec 04             	sub    $0x4,%esp
f0128567:	68 5c aa 13 f0       	push   $0xf013aa5c
f012856c:	68 13 0c 00 00       	push   $0xc13
f0128571:	68 76 a9 13 f0       	push   $0xf013a976
f0128576:	e8 2b 7c fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012857b:	e8 0c b7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128580:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128583:	74 17                	je     f012859c <test_kshrink+0x389>
f0128585:	83 ec 04             	sub    $0x4,%esp
f0128588:	68 90 a9 13 f0       	push   $0xf013a990
f012858d:	68 14 0c 00 00       	push   $0xc14
f0128592:	68 76 a9 13 f0       	push   $0xf013a976
f0128597:	e8 0a 7c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012859c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012859f:	e8 44 3f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01285a4:	29 c3                	sub    %eax,%ebx
f01285a6:	89 d8                	mov    %ebx,%eax
f01285a8:	83 f8 01             	cmp    $0x1,%eax
f01285ab:	74 17                	je     f01285c4 <test_kshrink+0x3b1>
f01285ad:	83 ec 04             	sub    $0x4,%esp
f01285b0:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01285b5:	68 15 0c 00 00       	push   $0xc15
f01285ba:	68 76 a9 13 f0       	push   $0xf013a976
f01285bf:	e8 e2 7b fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01285c4:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f01285cb:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01285ce:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01285d4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01285d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01285de:	eb 0e                	jmp    f01285ee <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f01285e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01285e3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01285e6:	01 d0                	add    %edx,%eax
f01285e8:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01285eb:	ff 45 f4             	incl   -0xc(%ebp)
f01285ee:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01285f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01285f7:	7f e7                	jg     f01285e0 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01285f9:	e8 ea 3e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01285fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128601:	e8 86 b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128606:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128609:	83 ec 0c             	sub    $0xc,%esp
f012860c:	68 00 08 00 00       	push   $0x800
f0128611:	e8 ae ef fd ff       	call   f01075c4 <kmalloc>
f0128616:	83 c4 10             	add    $0x10,%esp
f0128619:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012861f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128625:	89 c1                	mov    %eax,%ecx
f0128627:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012862e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128631:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128636:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128639:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012863c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128641:	f7 75 88             	divl   -0x78(%ebp)
f0128644:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128647:	29 d0                	sub    %edx,%eax
f0128649:	89 c3                	mov    %eax,%ebx
f012864b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128652:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128657:	0f b6 d0             	movzbl %al,%edx
f012865a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012865d:	01 d0                	add    %edx,%eax
f012865f:	48                   	dec    %eax
f0128660:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128666:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012866c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128671:	f7 75 80             	divl   -0x80(%ebp)
f0128674:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012867a:	29 d0                	sub    %edx,%eax
f012867c:	01 c3                	add    %eax,%ebx
f012867e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128685:	10 00 00 
f0128688:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012868d:	0f b6 c0             	movzbl %al,%eax
f0128690:	c1 e0 04             	shl    $0x4,%eax
f0128693:	89 c2                	mov    %eax,%edx
f0128695:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012869b:	01 d0                	add    %edx,%eax
f012869d:	48                   	dec    %eax
f012869e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01286a4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01286aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01286af:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01286b5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01286bb:	29 d0                	sub    %edx,%eax
f01286bd:	01 d8                	add    %ebx,%eax
f01286bf:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01286c4:	39 c1                	cmp    %eax,%ecx
f01286c6:	74 17                	je     f01286df <test_kshrink+0x4cc>
f01286c8:	83 ec 04             	sub    $0x4,%esp
f01286cb:	68 5c aa 13 f0       	push   $0xf013aa5c
f01286d0:	68 21 0c 00 00       	push   $0xc21
f01286d5:	68 76 a9 13 f0       	push   $0xf013a976
f01286da:	e8 c7 7a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01286df:	e8 a8 b5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01286e4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01286e7:	74 17                	je     f0128700 <test_kshrink+0x4ed>
f01286e9:	83 ec 04             	sub    $0x4,%esp
f01286ec:	68 90 a9 13 f0       	push   $0xf013a990
f01286f1:	68 22 0c 00 00       	push   $0xc22
f01286f6:	68 76 a9 13 f0       	push   $0xf013a976
f01286fb:	e8 a6 7a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128700:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128703:	e8 e0 3d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128708:	29 c3                	sub    %eax,%ebx
f012870a:	89 d8                	mov    %ebx,%eax
f012870c:	83 f8 01             	cmp    $0x1,%eax
f012870f:	74 17                	je     f0128728 <test_kshrink+0x515>
f0128711:	83 ec 04             	sub    $0x4,%esp
f0128714:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0128719:	68 23 0c 00 00       	push   $0xc23
f012871e:	68 76 a9 13 f0       	push   $0xf013a976
f0128723:	e8 7e 7a fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128728:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f012872f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128732:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128738:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012873b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128742:	eb 0e                	jmp    f0128752 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0128744:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128747:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012874a:	01 d0                	add    %edx,%eax
f012874c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012874f:	ff 45 f4             	incl   -0xc(%ebp)
f0128752:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128758:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012875b:	7f e7                	jg     f0128744 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012875d:	e8 86 3d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128762:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128765:	e8 22 b5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012876a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012876d:	83 ec 0c             	sub    $0xc,%esp
f0128770:	68 00 1c 00 00       	push   $0x1c00
f0128775:	e8 4a ee fd ff       	call   f01075c4 <kmalloc>
f012877a:	83 c4 10             	add    $0x10,%esp
f012877d:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128783:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128789:	89 c1                	mov    %eax,%ecx
f012878b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128792:	10 00 00 
f0128795:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012879b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01287a0:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01287a6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01287ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01287b1:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01287b7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01287bd:	29 d0                	sub    %edx,%eax
f01287bf:	89 c3                	mov    %eax,%ebx
f01287c1:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01287c8:	10 00 00 
f01287cb:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01287d0:	0f b6 d0             	movzbl %al,%edx
f01287d3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01287d9:	01 d0                	add    %edx,%eax
f01287db:	48                   	dec    %eax
f01287dc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01287e2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01287e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01287ed:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01287f3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01287f9:	29 d0                	sub    %edx,%eax
f01287fb:	01 c3                	add    %eax,%ebx
f01287fd:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128804:	10 00 00 
f0128807:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012880c:	0f b6 c0             	movzbl %al,%eax
f012880f:	c1 e0 04             	shl    $0x4,%eax
f0128812:	89 c2                	mov    %eax,%edx
f0128814:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012881a:	01 d0                	add    %edx,%eax
f012881c:	48                   	dec    %eax
f012881d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128823:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128829:	ba 00 00 00 00       	mov    $0x0,%edx
f012882e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128834:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012883a:	29 d0                	sub    %edx,%eax
f012883c:	01 d8                	add    %ebx,%eax
f012883e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128843:	39 c1                	cmp    %eax,%ecx
f0128845:	74 17                	je     f012885e <test_kshrink+0x64b>
f0128847:	83 ec 04             	sub    $0x4,%esp
f012884a:	68 5c aa 13 f0       	push   $0xf013aa5c
f012884f:	68 2f 0c 00 00       	push   $0xc2f
f0128854:	68 76 a9 13 f0       	push   $0xf013a976
f0128859:	e8 48 79 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012885e:	e8 29 b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128863:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128866:	74 17                	je     f012887f <test_kshrink+0x66c>
f0128868:	83 ec 04             	sub    $0x4,%esp
f012886b:	68 90 a9 13 f0       	push   $0xf013a990
f0128870:	68 30 0c 00 00       	push   $0xc30
f0128875:	68 76 a9 13 f0       	push   $0xf013a976
f012887a:	e8 27 79 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012887f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128882:	e8 61 3c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128887:	29 c3                	sub    %eax,%ebx
f0128889:	89 d8                	mov    %ebx,%eax
f012888b:	83 f8 02             	cmp    $0x2,%eax
f012888e:	74 17                	je     f01288a7 <test_kshrink+0x694>
f0128890:	83 ec 04             	sub    $0x4,%esp
f0128893:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0128898:	68 31 0c 00 00       	push   $0xc31
f012889d:	68 76 a9 13 f0       	push   $0xf013a976
f01288a2:	e8 ff 78 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01288a7:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01288ae:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01288b1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01288b7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01288ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288c1:	eb 0e                	jmp    f01288d1 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01288c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01288c6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01288c9:	01 d0                	add    %edx,%eax
f01288cb:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01288ce:	ff 45 f4             	incl   -0xc(%ebp)
f01288d1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01288d7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288da:	7f e7                	jg     f01288c3 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01288dc:	e8 07 3c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01288e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01288e4:	e8 a3 b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01288e9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01288ec:	83 ec 0c             	sub    $0xc,%esp
f01288ef:	68 00 fc 2f 00       	push   $0x2ffc00
f01288f4:	e8 cb ec fd ff       	call   f01075c4 <kmalloc>
f01288f9:	83 c4 10             	add    $0x10,%esp
f01288fc:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128902:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128908:	89 c1                	mov    %eax,%ecx
f012890a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128911:	10 00 00 
f0128914:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012891a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012891f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128925:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012892b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128930:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128936:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012893c:	29 d0                	sub    %edx,%eax
f012893e:	89 c3                	mov    %eax,%ebx
f0128940:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128947:	10 00 00 
f012894a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012894f:	0f b6 d0             	movzbl %al,%edx
f0128952:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128958:	01 d0                	add    %edx,%eax
f012895a:	48                   	dec    %eax
f012895b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128961:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128967:	ba 00 00 00 00       	mov    $0x0,%edx
f012896c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128972:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128978:	29 d0                	sub    %edx,%eax
f012897a:	01 c3                	add    %eax,%ebx
f012897c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128983:	10 00 00 
f0128986:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012898b:	0f b6 c0             	movzbl %al,%eax
f012898e:	c1 e0 04             	shl    $0x4,%eax
f0128991:	89 c2                	mov    %eax,%edx
f0128993:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128999:	01 d0                	add    %edx,%eax
f012899b:	48                   	dec    %eax
f012899c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01289a2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01289a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01289ad:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01289b3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01289b9:	29 d0                	sub    %edx,%eax
f01289bb:	01 d8                	add    %ebx,%eax
f01289bd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01289c2:	39 c1                	cmp    %eax,%ecx
f01289c4:	74 17                	je     f01289dd <test_kshrink+0x7ca>
f01289c6:	83 ec 04             	sub    $0x4,%esp
f01289c9:	68 5c aa 13 f0       	push   $0xf013aa5c
f01289ce:	68 3d 0c 00 00       	push   $0xc3d
f01289d3:	68 76 a9 13 f0       	push   $0xf013a976
f01289d8:	e8 c9 77 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01289dd:	e8 aa b2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01289e2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289e5:	74 17                	je     f01289fe <test_kshrink+0x7eb>
f01289e7:	83 ec 04             	sub    $0x4,%esp
f01289ea:	68 90 a9 13 f0       	push   $0xf013a990
f01289ef:	68 3e 0c 00 00       	push   $0xc3e
f01289f4:	68 76 a9 13 f0       	push   $0xf013a976
f01289f9:	e8 a8 77 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01289fe:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a01:	e8 e2 3a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128a06:	29 c3                	sub    %eax,%ebx
f0128a08:	89 d8                	mov    %ebx,%eax
f0128a0a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128a0f:	74 17                	je     f0128a28 <test_kshrink+0x815>
f0128a11:	83 ec 04             	sub    $0x4,%esp
f0128a14:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0128a19:	68 3f 0c 00 00       	push   $0xc3f
f0128a1e:	68 76 a9 13 f0       	push   $0xf013a976
f0128a23:	e8 7e 77 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128a28:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128a2f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128a32:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128a38:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128a3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a42:	eb 0e                	jmp    f0128a52 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0128a44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128a47:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128a4a:	01 d0                	add    %edx,%eax
f0128a4c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128a4f:	ff 45 f4             	incl   -0xc(%ebp)
f0128a52:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128a58:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a5b:	7f e7                	jg     f0128a44 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128a5d:	e8 86 3a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128a62:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a65:	e8 22 b2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128a6a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128a6d:	83 ec 0c             	sub    $0xc,%esp
f0128a70:	68 00 00 60 00       	push   $0x600000
f0128a75:	e8 4a eb fd ff       	call   f01075c4 <kmalloc>
f0128a7a:	83 c4 10             	add    $0x10,%esp
f0128a7d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a83:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128a89:	89 c1                	mov    %eax,%ecx
f0128a8b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128a92:	10 00 00 
f0128a95:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128a9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128aa0:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128aa6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128aac:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ab1:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128ab7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128abd:	29 d0                	sub    %edx,%eax
f0128abf:	89 c3                	mov    %eax,%ebx
f0128ac1:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128ac8:	10 00 00 
f0128acb:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128ad0:	0f b6 d0             	movzbl %al,%edx
f0128ad3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128ad9:	01 d0                	add    %edx,%eax
f0128adb:	48                   	dec    %eax
f0128adc:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128ae2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128ae8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128aed:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128af3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128af9:	29 d0                	sub    %edx,%eax
f0128afb:	01 c3                	add    %eax,%ebx
f0128afd:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128b04:	10 00 00 
f0128b07:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128b0c:	0f b6 c0             	movzbl %al,%eax
f0128b0f:	c1 e0 04             	shl    $0x4,%eax
f0128b12:	89 c2                	mov    %eax,%edx
f0128b14:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128b1a:	01 d0                	add    %edx,%eax
f0128b1c:	48                   	dec    %eax
f0128b1d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128b23:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128b29:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b2e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128b34:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128b3a:	29 d0                	sub    %edx,%eax
f0128b3c:	01 d8                	add    %ebx,%eax
f0128b3e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128b43:	39 c1                	cmp    %eax,%ecx
f0128b45:	74 17                	je     f0128b5e <test_kshrink+0x94b>
f0128b47:	83 ec 04             	sub    $0x4,%esp
f0128b4a:	68 5c aa 13 f0       	push   $0xf013aa5c
f0128b4f:	68 4b 0c 00 00       	push   $0xc4b
f0128b54:	68 76 a9 13 f0       	push   $0xf013a976
f0128b59:	e8 48 76 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b5e:	e8 29 b1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128b63:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b66:	74 17                	je     f0128b7f <test_kshrink+0x96c>
f0128b68:	83 ec 04             	sub    $0x4,%esp
f0128b6b:	68 90 a9 13 f0       	push   $0xf013a990
f0128b70:	68 4c 0c 00 00       	push   $0xc4c
f0128b75:	68 76 a9 13 f0       	push   $0xf013a976
f0128b7a:	e8 27 76 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b7f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b82:	e8 61 39 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128b87:	29 c3                	sub    %eax,%ebx
f0128b89:	89 d8                	mov    %ebx,%eax
f0128b8b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128b90:	74 17                	je     f0128ba9 <test_kshrink+0x996>
f0128b92:	83 ec 04             	sub    $0x4,%esp
f0128b95:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0128b9a:	68 4d 0c 00 00       	push   $0xc4d
f0128b9f:	68 76 a9 13 f0       	push   $0xf013a976
f0128ba4:	e8 fd 75 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128ba9:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0128bb0:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128bb3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128bb9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128bbf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128bc6:	eb 1a                	jmp    f0128be2 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0128bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128bcb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128bd2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128bd8:	01 c2                	add    %eax,%edx
f0128bda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128bdd:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128bdf:	ff 45 f4             	incl   -0xc(%ebp)
f0128be2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0128be8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128beb:	7d db                	jge    f0128bc8 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128bed:	e8 f6 38 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128bf2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bf5:	e8 92 b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128bfa:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0128bfd:	83 ec 0c             	sub    $0xc,%esp
f0128c00:	68 00 00 50 00       	push   $0x500000
f0128c05:	e8 4e ea fd ff       	call   f0107658 <kshrink>
f0128c0a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128c0d:	e8 7a b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128c12:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c15:	74 19                	je     f0128c30 <test_kshrink+0xa1d>
f0128c17:	68 10 b7 13 f0       	push   $0xf013b710
f0128c1c:	68 41 b7 13 f0       	push   $0xf013b741
f0128c21:	68 5d 0c 00 00       	push   $0xc5d
f0128c26:	68 76 a9 13 f0       	push   $0xf013a976
f0128c2b:	e8 76 75 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128c30:	e8 b3 38 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128c35:	89 c2                	mov    %eax,%edx
f0128c37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128c3a:	29 c2                	sub    %eax,%edx
f0128c3c:	89 d0                	mov    %edx,%eax
f0128c3e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128c43:	74 19                	je     f0128c5e <test_kshrink+0xa4b>
f0128c45:	68 1c b8 13 f0       	push   $0xf013b81c
f0128c4a:	68 41 b7 13 f0       	push   $0xf013b741
f0128c4f:	68 5e 0c 00 00       	push   $0xc5e
f0128c54:	68 76 a9 13 f0       	push   $0xf013a976
f0128c59:	e8 48 75 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0128c5e:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0128c65:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128c68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c6f:	eb 37                	jmp    f0128ca8 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0128c71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128c74:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128c7b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128c81:	01 d0                	add    %edx,%eax
f0128c83:	8b 10                	mov    (%eax),%edx
f0128c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128c88:	39 c2                	cmp    %eax,%edx
f0128c8a:	74 19                	je     f0128ca5 <test_kshrink+0xa92>
f0128c8c:	68 4c b8 13 f0       	push   $0xf013b84c
f0128c91:	68 41 b7 13 f0       	push   $0xf013b741
f0128c96:	68 66 0c 00 00       	push   $0xc66
f0128c9b:	68 76 a9 13 f0       	push   $0xf013a976
f0128ca0:	e8 01 75 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128ca5:	ff 45 f4             	incl   -0xc(%ebp)
f0128ca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128cab:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128cb1:	7e be                	jle    f0128c71 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128cb3:	83 ec 0c             	sub    $0xc,%esp
f0128cb6:	6a 03                	push   $0x3
f0128cb8:	e8 d4 3c fe ff       	call   f010c991 <sys_bypassPageFault>
f0128cbd:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0128cc0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128cc6:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0128cc9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128ccc:	05 00 00 50 00       	add    $0x500000,%eax
f0128cd1:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0128cd4:	e8 a6 3c fe ff       	call   f010c97f <sys_rcr2>
f0128cd9:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128cdc:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0128ce2:	39 d0                	cmp    %edx,%eax
f0128ce4:	74 19                	je     f0128cff <test_kshrink+0xaec>
f0128ce6:	68 58 b8 13 f0       	push   $0xf013b858
f0128ceb:	68 41 b7 13 f0       	push   $0xf013b741
f0128cf0:	68 6f 0c 00 00       	push   $0xc6f
f0128cf5:	68 76 a9 13 f0       	push   $0xf013a976
f0128cfa:	e8 a7 74 fd ff       	call   f01001a6 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0128cff:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128d02:	05 00 10 50 00       	add    $0x501000,%eax
f0128d07:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0128d0a:	e8 70 3c fe ff       	call   f010c97f <sys_rcr2>
f0128d0f:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128d12:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0128d18:	39 d0                	cmp    %edx,%eax
f0128d1a:	74 19                	je     f0128d35 <test_kshrink+0xb22>
f0128d1c:	68 80 b8 13 f0       	push   $0xf013b880
f0128d21:	68 41 b7 13 f0       	push   $0xf013b741
f0128d26:	68 72 0c 00 00       	push   $0xc72
f0128d2b:	68 76 a9 13 f0       	push   $0xf013a976
f0128d30:	e8 71 74 fd ff       	call   f01001a6 <_panic>

		ptr[6*Mega - kilo] = 10;
f0128d35:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128d38:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0128d3d:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128d40:	e8 3a 3c fe ff       	call   f010c97f <sys_rcr2>
f0128d45:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128d48:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128d4e:	39 d0                	cmp    %edx,%eax
f0128d50:	74 19                	je     f0128d6b <test_kshrink+0xb58>
f0128d52:	68 ac b8 13 f0       	push   $0xf013b8ac
f0128d57:	68 41 b7 13 f0       	push   $0xf013b741
f0128d5c:	68 75 0c 00 00       	push   $0xc75
f0128d61:	68 76 a9 13 f0       	push   $0xf013a976
f0128d66:	e8 3b 74 fd ff       	call   f01001a6 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128d6b:	83 ec 0c             	sub    $0xc,%esp
f0128d6e:	6a 00                	push   $0x0
f0128d70:	e8 1c 3c fe ff       	call   f010c991 <sys_bypassPageFault>
f0128d75:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128d78:	e8 6b 37 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128d7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d80:	e8 07 af fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128d85:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0128d88:	83 ec 0c             	sub    $0xc,%esp
f0128d8b:	68 00 00 20 00       	push   $0x200000
f0128d90:	e8 c3 e8 fd ff       	call   f0107658 <kshrink>
f0128d95:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128d98:	e8 ef ae fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128d9d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128da0:	74 19                	je     f0128dbb <test_kshrink+0xba8>
f0128da2:	68 10 b7 13 f0       	push   $0xf013b710
f0128da7:	68 41 b7 13 f0       	push   $0xf013b741
f0128dac:	68 82 0c 00 00       	push   $0xc82
f0128db1:	68 76 a9 13 f0       	push   $0xf013a976
f0128db6:	e8 eb 73 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0128dbb:	e8 28 37 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128dc0:	89 c2                	mov    %eax,%edx
f0128dc2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128dc5:	29 c2                	sub    %eax,%edx
f0128dc7:	89 d0                	mov    %edx,%eax
f0128dc9:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128dce:	74 19                	je     f0128de9 <test_kshrink+0xbd6>
f0128dd0:	68 d8 b8 13 f0       	push   $0xf013b8d8
f0128dd5:	68 41 b7 13 f0       	push   $0xf013b741
f0128dda:	68 83 0c 00 00       	push   $0xc83
f0128ddf:	68 76 a9 13 f0       	push   $0xf013a976
f0128de4:	e8 bd 73 fd ff       	call   f01001a6 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128de9:	e8 fa 36 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128dee:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128df1:	e8 96 ae fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128df6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128df9:	83 ec 0c             	sub    $0xc,%esp
f0128dfc:	68 00 00 40 00       	push   $0x400000
f0128e01:	e8 be e7 fd ff       	call   f01075c4 <kmalloc>
f0128e06:	83 c4 10             	add    $0x10,%esp
f0128e09:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0128e0f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128e16:	10 00 00 
f0128e19:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128e1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128e24:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128e2a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128e30:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e35:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128e3b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128e41:	29 d0                	sub    %edx,%eax
f0128e43:	89 c1                	mov    %eax,%ecx
f0128e45:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128e4c:	10 00 00 
f0128e4f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128e54:	0f b6 d0             	movzbl %al,%edx
f0128e57:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128e5d:	01 d0                	add    %edx,%eax
f0128e5f:	48                   	dec    %eax
f0128e60:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128e66:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128e6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e71:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128e77:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128e7d:	29 d0                	sub    %edx,%eax
f0128e7f:	01 c1                	add    %eax,%ecx
f0128e81:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128e88:	10 00 00 
f0128e8b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128e90:	0f b6 c0             	movzbl %al,%eax
f0128e93:	c1 e0 04             	shl    $0x4,%eax
f0128e96:	89 c2                	mov    %eax,%edx
f0128e98:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128e9e:	01 d0                	add    %edx,%eax
f0128ea0:	48                   	dec    %eax
f0128ea1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128ea7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ead:	ba 00 00 00 00       	mov    $0x0,%edx
f0128eb2:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128eb8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ebe:	29 d0                	sub    %edx,%eax
f0128ec0:	01 c8                	add    %ecx,%eax
f0128ec2:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0128ec8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128ece:	83 ec 04             	sub    $0x4,%esp
f0128ed1:	52                   	push   %edx
f0128ed2:	50                   	push   %eax
f0128ed3:	68 08 b9 13 f0       	push   $0xf013b908
f0128ed8:	e8 50 7d fd ff       	call   f0100c2d <cprintf>
f0128edd:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0128ee0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128ee6:	89 c1                	mov    %eax,%ecx
f0128ee8:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128eef:	10 00 00 
f0128ef2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128ef8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128efd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128f03:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128f09:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f0e:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128f14:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128f1a:	29 d0                	sub    %edx,%eax
f0128f1c:	89 c3                	mov    %eax,%ebx
f0128f1e:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0128f25:	10 00 00 
f0128f28:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128f2d:	0f b6 d0             	movzbl %al,%edx
f0128f30:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0128f36:	01 d0                	add    %edx,%eax
f0128f38:	48                   	dec    %eax
f0128f39:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0128f3f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128f45:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f4a:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0128f50:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128f56:	29 d0                	sub    %edx,%eax
f0128f58:	01 c3                	add    %eax,%ebx
f0128f5a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0128f61:	10 00 00 
f0128f64:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0128f69:	0f b6 c0             	movzbl %al,%eax
f0128f6c:	c1 e0 04             	shl    $0x4,%eax
f0128f6f:	89 c2                	mov    %eax,%edx
f0128f71:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0128f77:	01 d0                	add    %edx,%eax
f0128f79:	48                   	dec    %eax
f0128f7a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0128f80:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128f86:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f8b:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0128f91:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128f97:	29 d0                	sub    %edx,%eax
f0128f99:	01 d8                	add    %ebx,%eax
f0128f9b:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0128fa0:	39 c1                	cmp    %eax,%ecx
f0128fa2:	74 17                	je     f0128fbb <test_kshrink+0xda8>
f0128fa4:	83 ec 04             	sub    $0x4,%esp
f0128fa7:	68 24 b9 13 f0       	push   $0xf013b924
f0128fac:	68 8e 0c 00 00       	push   $0xc8e
f0128fb1:	68 76 a9 13 f0       	push   $0xf013a976
f0128fb6:	e8 eb 71 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128fbb:	e8 cc ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128fc0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128fc3:	74 17                	je     f0128fdc <test_kshrink+0xdc9>
f0128fc5:	83 ec 04             	sub    $0x4,%esp
f0128fc8:	68 90 a9 13 f0       	push   $0xf013a990
f0128fcd:	68 8f 0c 00 00       	push   $0xc8f
f0128fd2:	68 76 a9 13 f0       	push   $0xf013a976
f0128fd7:	e8 ca 71 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128fdc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128fdf:	e8 04 35 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0128fe4:	29 c3                	sub    %eax,%ebx
f0128fe6:	89 d8                	mov    %ebx,%eax
f0128fe8:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128fed:	74 17                	je     f0129006 <test_kshrink+0xdf3>
f0128fef:	83 ec 04             	sub    $0x4,%esp
f0128ff2:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0128ff7:	68 90 0c 00 00       	push   $0xc90
f0128ffc:	68 76 a9 13 f0       	push   $0xf013a976
f0129001:	e8 a0 71 fd ff       	call   f01001a6 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129006:	e8 dd 34 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012900b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012900e:	e8 79 ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129013:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129016:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012901c:	83 ec 0c             	sub    $0xc,%esp
f012901f:	50                   	push   %eax
f0129020:	e8 b9 e5 fd ff       	call   f01075de <kfree>
f0129025:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129028:	e8 5f ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012902d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129030:	74 17                	je     f0129049 <test_kshrink+0xe36>
f0129032:	83 ec 04             	sub    $0x4,%esp
f0129035:	68 90 a9 13 f0       	push   $0xf013a990
f012903a:	68 9a 0c 00 00       	push   $0xc9a
f012903f:	68 76 a9 13 f0       	push   $0xf013a976
f0129044:	e8 5d 71 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129049:	e8 9a 34 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012904e:	89 c2                	mov    %eax,%edx
f0129050:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129053:	29 c2                	sub    %eax,%edx
f0129055:	89 d0                	mov    %edx,%eax
f0129057:	3d 00 02 00 00       	cmp    $0x200,%eax
f012905c:	74 17                	je     f0129075 <test_kshrink+0xe62>
f012905e:	83 ec 04             	sub    $0x4,%esp
f0129061:	68 28 b2 13 f0       	push   $0xf013b228
f0129066:	68 9b 0c 00 00       	push   $0xc9b
f012906b:	68 76 a9 13 f0       	push   $0xf013a976
f0129070:	e8 31 71 fd ff       	call   f01001a6 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129075:	e8 6e 34 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012907a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012907d:	e8 0a ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129082:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129085:	83 ec 0c             	sub    $0xc,%esp
f0129088:	68 00 b0 3f 00       	push   $0x3fb000
f012908d:	e8 c6 e5 fd ff       	call   f0107658 <kshrink>
f0129092:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129095:	e8 f2 ab fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012909a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012909d:	74 19                	je     f01290b8 <test_kshrink+0xea5>
f012909f:	68 10 b7 13 f0       	push   $0xf013b710
f01290a4:	68 41 b7 13 f0       	push   $0xf013b741
f01290a9:	68 a5 0c 00 00       	push   $0xca5
f01290ae:	68 76 a9 13 f0       	push   $0xf013a976
f01290b3:	e8 ee 70 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f01290b8:	e8 2b 34 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01290bd:	89 c2                	mov    %eax,%edx
f01290bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01290c2:	29 c2                	sub    %eax,%edx
f01290c4:	89 d0                	mov    %edx,%eax
f01290c6:	83 f8 05             	cmp    $0x5,%eax
f01290c9:	74 19                	je     f01290e4 <test_kshrink+0xed1>
f01290cb:	68 78 b9 13 f0       	push   $0xf013b978
f01290d0:	68 41 b7 13 f0       	push   $0xf013b741
f01290d5:	68 a6 0c 00 00       	push   $0xca6
f01290da:	68 76 a9 13 f0       	push   $0xf013a976
f01290df:	e8 c2 70 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01290e4:	83 ec 0c             	sub    $0xc,%esp
f01290e7:	68 d4 b6 13 f0       	push   $0xf013b6d4
f01290ec:	e8 3c 7b fd ff       	call   f0100c2d <cprintf>
f01290f1:	83 c4 10             	add    $0x10,%esp

	return 1;
f01290f4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01290f9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01290fc:	5b                   	pop    %ebx
f01290fd:	5f                   	pop    %edi
f01290fe:	5d                   	pop    %ebp
f01290ff:	c3                   	ret    

f0129100 <test_kfreelast>:


int test_kfreelast()
{
f0129100:	55                   	push   %ebp
f0129101:	89 e5                	mov    %esp,%ebp
f0129103:	57                   	push   %edi
f0129104:	53                   	push   %ebx
f0129105:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f012910b:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012910f:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129113:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129119:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012911f:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129126:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012912d:	e8 b6 33 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129132:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0129135:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f012913b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129140:	b8 00 00 00 00       	mov    $0x0,%eax
f0129145:	89 d7                	mov    %edx,%edi
f0129147:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129149:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f012914f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129154:	b8 00 00 00 00       	mov    $0x0,%eax
f0129159:	89 d7                	mov    %edx,%edi
f012915b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012915d:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129163:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129168:	b8 00 00 00 00       	mov    $0x0,%eax
f012916d:	89 d7                	mov    %edx,%edi
f012916f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129171:	e8 72 33 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129176:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129179:	e8 0e ab fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012917e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129181:	83 ec 0c             	sub    $0xc,%esp
f0129184:	68 00 fc 1f 00       	push   $0x1ffc00
f0129189:	e8 36 e4 fd ff       	call   f01075c4 <kmalloc>
f012918e:	83 c4 10             	add    $0x10,%esp
f0129191:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129197:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012919d:	89 c1                	mov    %eax,%ecx
f012919f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01291a6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01291a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01291ae:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01291b1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01291b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01291b9:	f7 75 cc             	divl   -0x34(%ebp)
f01291bc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01291bf:	29 d0                	sub    %edx,%eax
f01291c1:	89 c3                	mov    %eax,%ebx
f01291c3:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01291ca:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01291cf:	0f b6 d0             	movzbl %al,%edx
f01291d2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01291d5:	01 d0                	add    %edx,%eax
f01291d7:	48                   	dec    %eax
f01291d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01291db:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01291de:	ba 00 00 00 00       	mov    $0x0,%edx
f01291e3:	f7 75 c4             	divl   -0x3c(%ebp)
f01291e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01291e9:	29 d0                	sub    %edx,%eax
f01291eb:	01 c3                	add    %eax,%ebx
f01291ed:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01291f4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01291f9:	0f b6 c0             	movzbl %al,%eax
f01291fc:	c1 e0 04             	shl    $0x4,%eax
f01291ff:	89 c2                	mov    %eax,%edx
f0129201:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129204:	01 d0                	add    %edx,%eax
f0129206:	48                   	dec    %eax
f0129207:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012920a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012920d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129212:	f7 75 bc             	divl   -0x44(%ebp)
f0129215:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129218:	29 d0                	sub    %edx,%eax
f012921a:	01 d8                	add    %ebx,%eax
f012921c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129221:	39 c1                	cmp    %eax,%ecx
f0129223:	74 17                	je     f012923c <test_kfreelast+0x13c>
f0129225:	83 ec 04             	sub    $0x4,%esp
f0129228:	68 5c aa 13 f0       	push   $0xf013aa5c
f012922d:	68 ca 0c 00 00       	push   $0xcca
f0129232:	68 76 a9 13 f0       	push   $0xf013a976
f0129237:	e8 6a 6f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012923c:	e8 4b aa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129241:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129244:	74 17                	je     f012925d <test_kfreelast+0x15d>
f0129246:	83 ec 04             	sub    $0x4,%esp
f0129249:	68 90 a9 13 f0       	push   $0xf013a990
f012924e:	68 cb 0c 00 00       	push   $0xccb
f0129253:	68 76 a9 13 f0       	push   $0xf013a976
f0129258:	e8 49 6f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012925d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129260:	e8 83 32 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129265:	29 c3                	sub    %eax,%ebx
f0129267:	89 d8                	mov    %ebx,%eax
f0129269:	3d 00 02 00 00       	cmp    $0x200,%eax
f012926e:	74 17                	je     f0129287 <test_kfreelast+0x187>
f0129270:	83 ec 04             	sub    $0x4,%esp
f0129273:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0129278:	68 cc 0c 00 00       	push   $0xccc
f012927d:	68 76 a9 13 f0       	push   $0xf013a976
f0129282:	e8 1f 6f fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129287:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f012928e:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129291:	e8 52 32 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129296:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129299:	e8 ee a9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012929e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01292a1:	83 ec 0c             	sub    $0xc,%esp
f01292a4:	68 00 fc 1f 00       	push   $0x1ffc00
f01292a9:	e8 16 e3 fd ff       	call   f01075c4 <kmalloc>
f01292ae:	83 c4 10             	add    $0x10,%esp
f01292b1:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01292b7:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01292bd:	89 c1                	mov    %eax,%ecx
f01292bf:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01292c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01292c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01292ce:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01292d1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01292d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01292d9:	f7 75 b4             	divl   -0x4c(%ebp)
f01292dc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01292df:	29 d0                	sub    %edx,%eax
f01292e1:	89 c3                	mov    %eax,%ebx
f01292e3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01292ea:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01292ef:	0f b6 d0             	movzbl %al,%edx
f01292f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01292f5:	01 d0                	add    %edx,%eax
f01292f7:	48                   	dec    %eax
f01292f8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01292fb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01292fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0129303:	f7 75 ac             	divl   -0x54(%ebp)
f0129306:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129309:	29 d0                	sub    %edx,%eax
f012930b:	01 c3                	add    %eax,%ebx
f012930d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129314:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0129319:	0f b6 c0             	movzbl %al,%eax
f012931c:	c1 e0 04             	shl    $0x4,%eax
f012931f:	89 c2                	mov    %eax,%edx
f0129321:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129324:	01 d0                	add    %edx,%eax
f0129326:	48                   	dec    %eax
f0129327:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012932a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012932d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129332:	f7 75 a4             	divl   -0x5c(%ebp)
f0129335:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129338:	29 d0                	sub    %edx,%eax
f012933a:	01 d8                	add    %ebx,%eax
f012933c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129341:	39 c1                	cmp    %eax,%ecx
f0129343:	74 17                	je     f012935c <test_kfreelast+0x25c>
f0129345:	83 ec 04             	sub    $0x4,%esp
f0129348:	68 5c aa 13 f0       	push   $0xf013aa5c
f012934d:	68 d3 0c 00 00       	push   $0xcd3
f0129352:	68 76 a9 13 f0       	push   $0xf013a976
f0129357:	e8 4a 6e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012935c:	e8 2b a9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129361:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129364:	74 17                	je     f012937d <test_kfreelast+0x27d>
f0129366:	83 ec 04             	sub    $0x4,%esp
f0129369:	68 90 a9 13 f0       	push   $0xf013a990
f012936e:	68 d4 0c 00 00       	push   $0xcd4
f0129373:	68 76 a9 13 f0       	push   $0xf013a976
f0129378:	e8 29 6e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012937d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129380:	e8 63 31 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129385:	29 c3                	sub    %eax,%ebx
f0129387:	89 d8                	mov    %ebx,%eax
f0129389:	3d 00 02 00 00       	cmp    $0x200,%eax
f012938e:	74 17                	je     f01293a7 <test_kfreelast+0x2a7>
f0129390:	83 ec 04             	sub    $0x4,%esp
f0129393:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0129398:	68 d5 0c 00 00       	push   $0xcd5
f012939d:	68 76 a9 13 f0       	push   $0xf013a976
f01293a2:	e8 ff 6d fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01293a7:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f01293ae:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01293b1:	e8 32 31 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01293b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293b9:	e8 ce a8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01293be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01293c1:	83 ec 0c             	sub    $0xc,%esp
f01293c4:	68 00 08 00 00       	push   $0x800
f01293c9:	e8 f6 e1 fd ff       	call   f01075c4 <kmalloc>
f01293ce:	83 c4 10             	add    $0x10,%esp
f01293d1:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01293d7:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01293dd:	89 c1                	mov    %eax,%ecx
f01293df:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01293e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01293e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01293ee:	89 45 98             	mov    %eax,-0x68(%ebp)
f01293f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01293f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01293f9:	f7 75 9c             	divl   -0x64(%ebp)
f01293fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01293ff:	29 d0                	sub    %edx,%eax
f0129401:	89 c3                	mov    %eax,%ebx
f0129403:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012940a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012940f:	0f b6 d0             	movzbl %al,%edx
f0129412:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129415:	01 d0                	add    %edx,%eax
f0129417:	48                   	dec    %eax
f0129418:	89 45 90             	mov    %eax,-0x70(%ebp)
f012941b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012941e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129423:	f7 75 94             	divl   -0x6c(%ebp)
f0129426:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129429:	29 d0                	sub    %edx,%eax
f012942b:	01 c3                	add    %eax,%ebx
f012942d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129434:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0129439:	0f b6 c0             	movzbl %al,%eax
f012943c:	c1 e0 04             	shl    $0x4,%eax
f012943f:	89 c2                	mov    %eax,%edx
f0129441:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129444:	01 d0                	add    %edx,%eax
f0129446:	48                   	dec    %eax
f0129447:	89 45 88             	mov    %eax,-0x78(%ebp)
f012944a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012944d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129452:	f7 75 8c             	divl   -0x74(%ebp)
f0129455:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129458:	29 d0                	sub    %edx,%eax
f012945a:	01 d8                	add    %ebx,%eax
f012945c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129461:	39 c1                	cmp    %eax,%ecx
f0129463:	74 17                	je     f012947c <test_kfreelast+0x37c>
f0129465:	83 ec 04             	sub    $0x4,%esp
f0129468:	68 5c aa 13 f0       	push   $0xf013aa5c
f012946d:	68 dc 0c 00 00       	push   $0xcdc
f0129472:	68 76 a9 13 f0       	push   $0xf013a976
f0129477:	e8 2a 6d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012947c:	e8 0b a8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129481:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129484:	74 17                	je     f012949d <test_kfreelast+0x39d>
f0129486:	83 ec 04             	sub    $0x4,%esp
f0129489:	68 90 a9 13 f0       	push   $0xf013a990
f012948e:	68 dd 0c 00 00       	push   $0xcdd
f0129493:	68 76 a9 13 f0       	push   $0xf013a976
f0129498:	e8 09 6d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012949d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01294a0:	e8 43 30 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01294a5:	29 c3                	sub    %eax,%ebx
f01294a7:	89 d8                	mov    %ebx,%eax
f01294a9:	83 f8 01             	cmp    $0x1,%eax
f01294ac:	74 17                	je     f01294c5 <test_kfreelast+0x3c5>
f01294ae:	83 ec 04             	sub    $0x4,%esp
f01294b1:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01294b6:	68 de 0c 00 00       	push   $0xcde
f01294bb:	68 76 a9 13 f0       	push   $0xf013a976
f01294c0:	e8 e1 6c fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01294c5:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f01294cc:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01294cf:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01294d5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01294d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01294df:	eb 0e                	jmp    f01294ef <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f01294e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01294e4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01294e7:	01 d0                	add    %edx,%eax
f01294e9:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01294ec:	ff 45 f4             	incl   -0xc(%ebp)
f01294ef:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01294f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01294f8:	7f e7                	jg     f01294e1 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01294fa:	e8 e9 2f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01294ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129502:	e8 85 a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129507:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012950a:	83 ec 0c             	sub    $0xc,%esp
f012950d:	68 00 08 00 00       	push   $0x800
f0129512:	e8 ad e0 fd ff       	call   f01075c4 <kmalloc>
f0129517:	83 c4 10             	add    $0x10,%esp
f012951a:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129520:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129526:	89 c1                	mov    %eax,%ecx
f0129528:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012952f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129532:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129537:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012953d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129543:	ba 00 00 00 00       	mov    $0x0,%edx
f0129548:	f7 75 80             	divl   -0x80(%ebp)
f012954b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129551:	29 d0                	sub    %edx,%eax
f0129553:	89 c3                	mov    %eax,%ebx
f0129555:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012955c:	10 00 00 
f012955f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0129564:	0f b6 d0             	movzbl %al,%edx
f0129567:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012956d:	01 d0                	add    %edx,%eax
f012956f:	48                   	dec    %eax
f0129570:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129576:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012957c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129581:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129587:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012958d:	29 d0                	sub    %edx,%eax
f012958f:	01 c3                	add    %eax,%ebx
f0129591:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129598:	10 00 00 
f012959b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01295a0:	0f b6 c0             	movzbl %al,%eax
f01295a3:	c1 e0 04             	shl    $0x4,%eax
f01295a6:	89 c2                	mov    %eax,%edx
f01295a8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01295ae:	01 d0                	add    %edx,%eax
f01295b0:	48                   	dec    %eax
f01295b1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01295b7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01295bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01295c2:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01295c8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01295ce:	29 d0                	sub    %edx,%eax
f01295d0:	01 d8                	add    %ebx,%eax
f01295d2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01295d7:	39 c1                	cmp    %eax,%ecx
f01295d9:	74 17                	je     f01295f2 <test_kfreelast+0x4f2>
f01295db:	83 ec 04             	sub    $0x4,%esp
f01295de:	68 5c aa 13 f0       	push   $0xf013aa5c
f01295e3:	68 ea 0c 00 00       	push   $0xcea
f01295e8:	68 76 a9 13 f0       	push   $0xf013a976
f01295ed:	e8 b4 6b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01295f2:	e8 95 a6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01295f7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01295fa:	74 17                	je     f0129613 <test_kfreelast+0x513>
f01295fc:	83 ec 04             	sub    $0x4,%esp
f01295ff:	68 90 a9 13 f0       	push   $0xf013a990
f0129604:	68 eb 0c 00 00       	push   $0xceb
f0129609:	68 76 a9 13 f0       	push   $0xf013a976
f012960e:	e8 93 6b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129613:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129616:	e8 cd 2e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012961b:	29 c3                	sub    %eax,%ebx
f012961d:	89 d8                	mov    %ebx,%eax
f012961f:	83 f8 01             	cmp    $0x1,%eax
f0129622:	74 17                	je     f012963b <test_kfreelast+0x53b>
f0129624:	83 ec 04             	sub    $0x4,%esp
f0129627:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012962c:	68 ec 0c 00 00       	push   $0xcec
f0129631:	68 76 a9 13 f0       	push   $0xf013a976
f0129636:	e8 6b 6b fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012963b:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0129642:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129645:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012964b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012964e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129655:	eb 0e                	jmp    f0129665 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0129657:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012965a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012965d:	01 d0                	add    %edx,%eax
f012965f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129662:	ff 45 f4             	incl   -0xc(%ebp)
f0129665:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012966b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012966e:	7f e7                	jg     f0129657 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129670:	e8 73 2e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129675:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129678:	e8 0f a6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012967d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129680:	83 ec 0c             	sub    $0xc,%esp
f0129683:	68 00 1c 00 00       	push   $0x1c00
f0129688:	e8 37 df fd ff       	call   f01075c4 <kmalloc>
f012968d:	83 c4 10             	add    $0x10,%esp
f0129690:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129696:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012969c:	89 c1                	mov    %eax,%ecx
f012969e:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01296a5:	10 00 00 
f01296a8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01296ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01296b3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01296b9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01296bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01296c4:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01296ca:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01296d0:	29 d0                	sub    %edx,%eax
f01296d2:	89 c3                	mov    %eax,%ebx
f01296d4:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01296db:	10 00 00 
f01296de:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01296e3:	0f b6 d0             	movzbl %al,%edx
f01296e6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01296ec:	01 d0                	add    %edx,%eax
f01296ee:	48                   	dec    %eax
f01296ef:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01296f5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01296fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0129700:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129706:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012970c:	29 d0                	sub    %edx,%eax
f012970e:	01 c3                	add    %eax,%ebx
f0129710:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129717:	10 00 00 
f012971a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012971f:	0f b6 c0             	movzbl %al,%eax
f0129722:	c1 e0 04             	shl    $0x4,%eax
f0129725:	89 c2                	mov    %eax,%edx
f0129727:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012972d:	01 d0                	add    %edx,%eax
f012972f:	48                   	dec    %eax
f0129730:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129736:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012973c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129741:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129747:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012974d:	29 d0                	sub    %edx,%eax
f012974f:	01 d8                	add    %ebx,%eax
f0129751:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129756:	39 c1                	cmp    %eax,%ecx
f0129758:	74 17                	je     f0129771 <test_kfreelast+0x671>
f012975a:	83 ec 04             	sub    $0x4,%esp
f012975d:	68 5c aa 13 f0       	push   $0xf013aa5c
f0129762:	68 f8 0c 00 00       	push   $0xcf8
f0129767:	68 76 a9 13 f0       	push   $0xf013a976
f012976c:	e8 35 6a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129771:	e8 16 a5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129776:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129779:	74 17                	je     f0129792 <test_kfreelast+0x692>
f012977b:	83 ec 04             	sub    $0x4,%esp
f012977e:	68 90 a9 13 f0       	push   $0xf013a990
f0129783:	68 f9 0c 00 00       	push   $0xcf9
f0129788:	68 76 a9 13 f0       	push   $0xf013a976
f012978d:	e8 14 6a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129792:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129795:	e8 4e 2d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012979a:	29 c3                	sub    %eax,%ebx
f012979c:	89 d8                	mov    %ebx,%eax
f012979e:	83 f8 02             	cmp    $0x2,%eax
f01297a1:	74 17                	je     f01297ba <test_kfreelast+0x6ba>
f01297a3:	83 ec 04             	sub    $0x4,%esp
f01297a6:	68 f8 a9 13 f0       	push   $0xf013a9f8
f01297ab:	68 fa 0c 00 00       	push   $0xcfa
f01297b0:	68 76 a9 13 f0       	push   $0xf013a976
f01297b5:	e8 ec 69 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01297ba:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f01297c1:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01297c4:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01297ca:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01297cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297d4:	eb 0e                	jmp    f01297e4 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f01297d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01297d9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01297dc:	01 d0                	add    %edx,%eax
f01297de:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01297e1:	ff 45 f4             	incl   -0xc(%ebp)
f01297e4:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01297ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01297ed:	7f e7                	jg     f01297d6 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01297ef:	e8 f4 2c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f01297f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01297f7:	e8 90 a4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01297fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01297ff:	83 ec 0c             	sub    $0xc,%esp
f0129802:	68 00 fc 2f 00       	push   $0x2ffc00
f0129807:	e8 b8 dd fd ff       	call   f01075c4 <kmalloc>
f012980c:	83 c4 10             	add    $0x10,%esp
f012980f:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129815:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012981b:	89 c1                	mov    %eax,%ecx
f012981d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129824:	10 00 00 
f0129827:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012982d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129832:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129838:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012983e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129843:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129849:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012984f:	29 d0                	sub    %edx,%eax
f0129851:	89 c3                	mov    %eax,%ebx
f0129853:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012985a:	10 00 00 
f012985d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0129862:	0f b6 d0             	movzbl %al,%edx
f0129865:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012986b:	01 d0                	add    %edx,%eax
f012986d:	48                   	dec    %eax
f012986e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129874:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012987a:	ba 00 00 00 00       	mov    $0x0,%edx
f012987f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129885:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012988b:	29 d0                	sub    %edx,%eax
f012988d:	01 c3                	add    %eax,%ebx
f012988f:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129896:	10 00 00 
f0129899:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012989e:	0f b6 c0             	movzbl %al,%eax
f01298a1:	c1 e0 04             	shl    $0x4,%eax
f01298a4:	89 c2                	mov    %eax,%edx
f01298a6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01298ac:	01 d0                	add    %edx,%eax
f01298ae:	48                   	dec    %eax
f01298af:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01298b5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01298bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01298c0:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01298c6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01298cc:	29 d0                	sub    %edx,%eax
f01298ce:	01 d8                	add    %ebx,%eax
f01298d0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01298d5:	39 c1                	cmp    %eax,%ecx
f01298d7:	74 17                	je     f01298f0 <test_kfreelast+0x7f0>
f01298d9:	83 ec 04             	sub    $0x4,%esp
f01298dc:	68 5c aa 13 f0       	push   $0xf013aa5c
f01298e1:	68 06 0d 00 00       	push   $0xd06
f01298e6:	68 76 a9 13 f0       	push   $0xf013a976
f01298eb:	e8 b6 68 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298f0:	e8 97 a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01298f5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298f8:	74 17                	je     f0129911 <test_kfreelast+0x811>
f01298fa:	83 ec 04             	sub    $0x4,%esp
f01298fd:	68 90 a9 13 f0       	push   $0xf013a990
f0129902:	68 07 0d 00 00       	push   $0xd07
f0129907:	68 76 a9 13 f0       	push   $0xf013a976
f012990c:	e8 95 68 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129911:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129914:	e8 cf 2b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129919:	29 c3                	sub    %eax,%ebx
f012991b:	89 d8                	mov    %ebx,%eax
f012991d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129922:	74 17                	je     f012993b <test_kfreelast+0x83b>
f0129924:	83 ec 04             	sub    $0x4,%esp
f0129927:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012992c:	68 08 0d 00 00       	push   $0xd08
f0129931:	68 76 a9 13 f0       	push   $0xf013a976
f0129936:	e8 6b 68 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012993b:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129942:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129945:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012994b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012994e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129955:	eb 0e                	jmp    f0129965 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129957:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012995a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012995d:	01 d0                	add    %edx,%eax
f012995f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129962:	ff 45 f4             	incl   -0xc(%ebp)
f0129965:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012996b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012996e:	7f e7                	jg     f0129957 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129970:	e8 73 2b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129975:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129978:	e8 0f a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012997d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129980:	83 ec 0c             	sub    $0xc,%esp
f0129983:	68 00 fc 5f 00       	push   $0x5ffc00
f0129988:	e8 37 dc fd ff       	call   f01075c4 <kmalloc>
f012998d:	83 c4 10             	add    $0x10,%esp
f0129990:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129996:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012999c:	89 c1                	mov    %eax,%ecx
f012999e:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01299a5:	10 00 00 
f01299a8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01299ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01299b3:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01299b9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01299bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01299c4:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01299ca:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01299d0:	29 d0                	sub    %edx,%eax
f01299d2:	89 c3                	mov    %eax,%ebx
f01299d4:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01299db:	10 00 00 
f01299de:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f01299e3:	0f b6 d0             	movzbl %al,%edx
f01299e6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01299ec:	01 d0                	add    %edx,%eax
f01299ee:	48                   	dec    %eax
f01299ef:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01299f5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01299fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a00:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129a06:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129a0c:	29 d0                	sub    %edx,%eax
f0129a0e:	01 c3                	add    %eax,%ebx
f0129a10:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0129a17:	10 00 00 
f0129a1a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0129a1f:	0f b6 c0             	movzbl %al,%eax
f0129a22:	c1 e0 04             	shl    $0x4,%eax
f0129a25:	89 c2                	mov    %eax,%edx
f0129a27:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129a2d:	01 d0                	add    %edx,%eax
f0129a2f:	48                   	dec    %eax
f0129a30:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129a36:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129a3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a41:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129a47:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129a4d:	29 d0                	sub    %edx,%eax
f0129a4f:	01 d8                	add    %ebx,%eax
f0129a51:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129a56:	39 c1                	cmp    %eax,%ecx
f0129a58:	74 17                	je     f0129a71 <test_kfreelast+0x971>
f0129a5a:	83 ec 04             	sub    $0x4,%esp
f0129a5d:	68 5c aa 13 f0       	push   $0xf013aa5c
f0129a62:	68 14 0d 00 00       	push   $0xd14
f0129a67:	68 76 a9 13 f0       	push   $0xf013a976
f0129a6c:	e8 35 67 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a71:	e8 16 a2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129a76:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a79:	74 17                	je     f0129a92 <test_kfreelast+0x992>
f0129a7b:	83 ec 04             	sub    $0x4,%esp
f0129a7e:	68 90 a9 13 f0       	push   $0xf013a990
f0129a83:	68 15 0d 00 00       	push   $0xd15
f0129a88:	68 76 a9 13 f0       	push   $0xf013a976
f0129a8d:	e8 14 67 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129a92:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129a95:	e8 4e 2a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129a9a:	29 c3                	sub    %eax,%ebx
f0129a9c:	89 d8                	mov    %ebx,%eax
f0129a9e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129aa3:	74 17                	je     f0129abc <test_kfreelast+0x9bc>
f0129aa5:	83 ec 04             	sub    $0x4,%esp
f0129aa8:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0129aad:	68 16 0d 00 00       	push   $0xd16
f0129ab2:	68 76 a9 13 f0       	push   $0xf013a976
f0129ab7:	e8 ea 66 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0129abc:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f0129ac3:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129ac6:	e8 1d 2a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129acb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ace:	e8 b9 a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129ad3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0129ad6:	83 ec 0c             	sub    $0xc,%esp
f0129ad9:	68 00 38 00 00       	push   $0x3800
f0129ade:	e8 e1 da fd ff       	call   f01075c4 <kmalloc>
f0129ae3:	83 c4 10             	add    $0x10,%esp
f0129ae6:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129aec:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129af2:	89 c1                	mov    %eax,%ecx
f0129af4:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129afb:	10 00 00 
f0129afe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129b04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129b09:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129b0f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129b15:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b1a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129b20:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129b26:	29 d0                	sub    %edx,%eax
f0129b28:	89 c3                	mov    %eax,%ebx
f0129b2a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129b31:	10 00 00 
f0129b34:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0129b39:	0f b6 d0             	movzbl %al,%edx
f0129b3c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129b42:	01 d0                	add    %edx,%eax
f0129b44:	48                   	dec    %eax
f0129b45:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129b4b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129b51:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b56:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129b5c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129b62:	29 d0                	sub    %edx,%eax
f0129b64:	01 c3                	add    %eax,%ebx
f0129b66:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129b6d:	10 00 00 
f0129b70:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f0129b75:	0f b6 c0             	movzbl %al,%eax
f0129b78:	c1 e0 04             	shl    $0x4,%eax
f0129b7b:	89 c2                	mov    %eax,%edx
f0129b7d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129b83:	01 d0                	add    %edx,%eax
f0129b85:	48                   	dec    %eax
f0129b86:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129b8c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129b92:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b97:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129b9d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129ba3:	29 d0                	sub    %edx,%eax
f0129ba5:	01 d8                	add    %ebx,%eax
f0129ba7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0129bac:	39 c1                	cmp    %eax,%ecx
f0129bae:	74 17                	je     f0129bc7 <test_kfreelast+0xac7>
f0129bb0:	83 ec 04             	sub    $0x4,%esp
f0129bb3:	68 5c aa 13 f0       	push   $0xf013aa5c
f0129bb8:	68 1d 0d 00 00       	push   $0xd1d
f0129bbd:	68 76 a9 13 f0       	push   $0xf013a976
f0129bc2:	e8 df 65 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bc7:	e8 c0 a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129bcc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129bcf:	74 17                	je     f0129be8 <test_kfreelast+0xae8>
f0129bd1:	83 ec 04             	sub    $0x4,%esp
f0129bd4:	68 90 a9 13 f0       	push   $0xf013a990
f0129bd9:	68 1e 0d 00 00       	push   $0xd1e
f0129bde:	68 76 a9 13 f0       	push   $0xf013a976
f0129be3:	e8 be 65 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129be8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129beb:	e8 f8 28 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129bf0:	29 c3                	sub    %eax,%ebx
f0129bf2:	89 d8                	mov    %ebx,%eax
f0129bf4:	83 f8 04             	cmp    $0x4,%eax
f0129bf7:	74 17                	je     f0129c10 <test_kfreelast+0xb10>
f0129bf9:	83 ec 04             	sub    $0x4,%esp
f0129bfc:	68 f8 a9 13 f0       	push   $0xf013a9f8
f0129c01:	68 1f 0d 00 00       	push   $0xd1f
f0129c06:	68 76 a9 13 f0       	push   $0xf013a976
f0129c0b:	e8 96 65 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0129c10:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0129c17:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0129c1a:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129c20:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129c23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129c2a:	eb 0e                	jmp    f0129c3a <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f0129c2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129c2f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129c32:	01 d0                	add    %edx,%eax
f0129c34:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129c37:	ff 45 f4             	incl   -0xc(%ebp)
f0129c3a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129c40:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129c43:	7f e7                	jg     f0129c2c <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0129c45:	e8 9e 28 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129c4a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129c50:	e8 37 a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129c55:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0129c5b:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129c61:	83 ec 0c             	sub    $0xc,%esp
f0129c64:	50                   	push   %eax
f0129c65:	e8 74 d9 fd ff       	call   f01075de <kfree>
f0129c6a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c6d:	e8 1a a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129c72:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129c78:	74 17                	je     f0129c91 <test_kfreelast+0xb91>
f0129c7a:	83 ec 04             	sub    $0x4,%esp
f0129c7d:	68 90 a9 13 f0       	push   $0xf013a990
f0129c82:	68 2e 0d 00 00       	push   $0xd2e
f0129c87:	68 76 a9 13 f0       	push   $0xf013a976
f0129c8c:	e8 15 65 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0129c91:	e8 52 28 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129c96:	89 c2                	mov    %eax,%edx
f0129c98:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129c9e:	29 c2                	sub    %eax,%edx
f0129ca0:	89 d0                	mov    %edx,%eax
f0129ca2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129ca7:	74 17                	je     f0129cc0 <test_kfreelast+0xbc0>
f0129ca9:	83 ec 04             	sub    $0x4,%esp
f0129cac:	68 00 b1 13 f0       	push   $0xf013b100
f0129cb1:	68 2f 0d 00 00       	push   $0xd2f
f0129cb6:	68 76 a9 13 f0       	push   $0xf013a976
f0129cbb:	e8 e6 64 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129cc0:	e8 23 28 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129cc5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ccb:	e8 bc 9f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129cd0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f0129cd6:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129cdc:	83 ec 0c             	sub    $0xc,%esp
f0129cdf:	50                   	push   %eax
f0129ce0:	e8 f9 d8 fd ff       	call   f01075de <kfree>
f0129ce5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ce8:	e8 9f 9f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129ced:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129cf3:	74 17                	je     f0129d0c <test_kfreelast+0xc0c>
f0129cf5:	83 ec 04             	sub    $0x4,%esp
f0129cf8:	68 90 a9 13 f0       	push   $0xf013a990
f0129cfd:	68 35 0d 00 00       	push   $0xd35
f0129d02:	68 76 a9 13 f0       	push   $0xf013a976
f0129d07:	e8 9a 64 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0129d0c:	e8 d7 27 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129d11:	89 c2                	mov    %eax,%edx
f0129d13:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129d19:	29 c2                	sub    %eax,%edx
f0129d1b:	89 d0                	mov    %edx,%eax
f0129d1d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129d22:	74 17                	je     f0129d3b <test_kfreelast+0xc3b>
f0129d24:	83 ec 04             	sub    $0x4,%esp
f0129d27:	68 00 b1 13 f0       	push   $0xf013b100
f0129d2c:	68 36 0d 00 00       	push   $0xd36
f0129d31:	68 76 a9 13 f0       	push   $0xf013a976
f0129d36:	e8 6b 64 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129d3b:	e8 a8 27 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129d40:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d46:	e8 41 9f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129d4b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0129d51:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129d57:	83 ec 0c             	sub    $0xc,%esp
f0129d5a:	50                   	push   %eax
f0129d5b:	e8 7e d8 fd ff       	call   f01075de <kfree>
f0129d60:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d63:	e8 24 9f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129d68:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129d6e:	74 17                	je     f0129d87 <test_kfreelast+0xc87>
f0129d70:	83 ec 04             	sub    $0x4,%esp
f0129d73:	68 90 a9 13 f0       	push   $0xf013a990
f0129d78:	68 3c 0d 00 00       	push   $0xd3c
f0129d7d:	68 76 a9 13 f0       	push   $0xf013a976
f0129d82:	e8 1f 64 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0129d87:	e8 5c 27 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129d8c:	89 c2                	mov    %eax,%edx
f0129d8e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129d94:	29 c2                	sub    %eax,%edx
f0129d96:	89 d0                	mov    %edx,%eax
f0129d98:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129d9d:	74 17                	je     f0129db6 <test_kfreelast+0xcb6>
f0129d9f:	83 ec 04             	sub    $0x4,%esp
f0129da2:	68 00 b1 13 f0       	push   $0xf013b100
f0129da7:	68 3d 0d 00 00       	push   $0xd3d
f0129dac:	68 76 a9 13 f0       	push   $0xf013a976
f0129db1:	e8 f0 63 fd ff       	call   f01001a6 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0129db6:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129dbc:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129dbf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129dc6:	eb 1e                	jmp    f0129de6 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f0129dc8:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129dce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129dd1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129dd4:	01 c8                	add    %ecx,%eax
f0129dd6:	8a 00                	mov    (%eax),%al
f0129dd8:	0f be c0             	movsbl %al,%eax
f0129ddb:	01 d0                	add    %edx,%eax
f0129ddd:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129de3:	ff 45 f4             	incl   -0xc(%ebp)
f0129de6:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129dec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129def:	7f d7                	jg     f0129dc8 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0129df1:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129df7:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129dfd:	01 c0                	add    %eax,%eax
f0129dff:	39 c2                	cmp    %eax,%edx
f0129e01:	74 17                	je     f0129e1a <test_kfreelast+0xd1a>
f0129e03:	83 ec 04             	sub    $0x4,%esp
f0129e06:	68 5c b1 13 f0       	push   $0xf013b15c
f0129e0b:	68 48 0d 00 00       	push   $0xd48
f0129e10:	68 76 a9 13 f0       	push   $0xf013a976
f0129e15:	e8 8c 63 fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0129e1a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129e20:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129e23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e2a:	eb 1e                	jmp    f0129e4a <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f0129e2c:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129e32:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129e35:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e38:	01 c8                	add    %ecx,%eax
f0129e3a:	8a 00                	mov    (%eax),%al
f0129e3c:	0f be c0             	movsbl %al,%eax
f0129e3f:	01 d0                	add    %edx,%eax
f0129e41:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129e47:	ff 45 f4             	incl   -0xc(%ebp)
f0129e4a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129e50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129e53:	7f d7                	jg     f0129e2c <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0129e55:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129e5b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129e61:	89 c1                	mov    %eax,%ecx
f0129e63:	01 c9                	add    %ecx,%ecx
f0129e65:	01 c8                	add    %ecx,%eax
f0129e67:	39 c2                	cmp    %eax,%edx
f0129e69:	74 17                	je     f0129e82 <test_kfreelast+0xd82>
f0129e6b:	83 ec 04             	sub    $0x4,%esp
f0129e6e:	68 5c b1 13 f0       	push   $0xf013b15c
f0129e73:	68 50 0d 00 00       	push   $0xd50
f0129e78:	68 76 a9 13 f0       	push   $0xf013a976
f0129e7d:	e8 24 63 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0129e82:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129e88:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129e8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e92:	eb 1e                	jmp    f0129eb2 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f0129e94:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f0129e9a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129e9d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ea0:	01 c8                	add    %ecx,%eax
f0129ea2:	8a 00                	mov    (%eax),%al
f0129ea4:	0f be c0             	movsbl %al,%eax
f0129ea7:	01 d0                	add    %edx,%eax
f0129ea9:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129eaf:	ff 45 f4             	incl   -0xc(%ebp)
f0129eb2:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129eb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129ebb:	7f d7                	jg     f0129e94 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0129ebd:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0129ec3:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f0129ec9:	c1 e2 02             	shl    $0x2,%edx
f0129ecc:	39 d0                	cmp    %edx,%eax
f0129ece:	74 17                	je     f0129ee7 <test_kfreelast+0xde7>
f0129ed0:	83 ec 04             	sub    $0x4,%esp
f0129ed3:	68 5c b1 13 f0       	push   $0xf013b15c
f0129ed8:	68 58 0d 00 00       	push   $0xd58
f0129edd:	68 76 a9 13 f0       	push   $0xf013a976
f0129ee2:	e8 bf 62 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0129ee7:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129eed:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129ef0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ef7:	eb 1e                	jmp    f0129f17 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f0129ef9:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f0129eff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129f02:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129f05:	01 c8                	add    %ecx,%eax
f0129f07:	8a 00                	mov    (%eax),%al
f0129f09:	0f be c0             	movsbl %al,%eax
f0129f0c:	01 d0                	add    %edx,%eax
f0129f0e:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129f14:	ff 45 f4             	incl   -0xc(%ebp)
f0129f17:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129f1d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129f20:	7f d7                	jg     f0129ef9 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0129f22:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f0129f28:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0129f2e:	89 d0                	mov    %edx,%eax
f0129f30:	c1 e0 02             	shl    $0x2,%eax
f0129f33:	01 d0                	add    %edx,%eax
f0129f35:	39 c1                	cmp    %eax,%ecx
f0129f37:	74 17                	je     f0129f50 <test_kfreelast+0xe50>
f0129f39:	83 ec 04             	sub    $0x4,%esp
f0129f3c:	68 5c b1 13 f0       	push   $0xf013b15c
f0129f41:	68 60 0d 00 00       	push   $0xd60
f0129f46:	68 76 a9 13 f0       	push   $0xf013a976
f0129f4b:	e8 56 62 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0129f50:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129f56:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129f59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129f60:	eb 1e                	jmp    f0129f80 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f0129f62:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f0129f68:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129f6b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129f6e:	01 c8                	add    %ecx,%eax
f0129f70:	8a 00                	mov    (%eax),%al
f0129f72:	0f be c0             	movsbl %al,%eax
f0129f75:	01 d0                	add    %edx,%eax
f0129f77:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129f7d:	ff 45 f4             	incl   -0xc(%ebp)
f0129f80:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129f86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129f89:	7f d7                	jg     f0129f62 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0129f8b:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f0129f91:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0129f97:	89 d0                	mov    %edx,%eax
f0129f99:	01 c0                	add    %eax,%eax
f0129f9b:	01 d0                	add    %edx,%eax
f0129f9d:	01 c0                	add    %eax,%eax
f0129f9f:	01 d0                	add    %edx,%eax
f0129fa1:	39 c1                	cmp    %eax,%ecx
f0129fa3:	74 17                	je     f0129fbc <test_kfreelast+0xebc>
f0129fa5:	83 ec 04             	sub    $0x4,%esp
f0129fa8:	68 5c b1 13 f0       	push   $0xf013b15c
f0129fad:	68 68 0d 00 00       	push   $0xd68
f0129fb2:	68 76 a9 13 f0       	push   $0xf013a976
f0129fb7:	e8 ea 61 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129fbc:	e8 27 25 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f0129fc1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129fc4:	e8 c3 9c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129fc9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0129fcc:	83 ec 0c             	sub    $0xc,%esp
f0129fcf:	68 00 50 00 00       	push   $0x5000
f0129fd4:	e8 eb d5 fd ff       	call   f01075c4 <kmalloc>
f0129fd9:	83 c4 10             	add    $0x10,%esp
f0129fdc:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129fe2:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129fe8:	89 c1                	mov    %eax,%ecx
f0129fea:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129ff1:	10 00 00 
f0129ff4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129ffa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129fff:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a005:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a00b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a010:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a016:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a01c:	29 d0                	sub    %edx,%eax
f012a01e:	89 c3                	mov    %eax,%ebx
f012a020:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a027:	10 00 00 
f012a02a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a02f:	0f b6 d0             	movzbl %al,%edx
f012a032:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a038:	01 d0                	add    %edx,%eax
f012a03a:	48                   	dec    %eax
f012a03b:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a041:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a047:	ba 00 00 00 00       	mov    $0x0,%edx
f012a04c:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a052:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a058:	29 d0                	sub    %edx,%eax
f012a05a:	01 c3                	add    %eax,%ebx
f012a05c:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a063:	10 00 00 
f012a066:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a06b:	0f b6 c0             	movzbl %al,%eax
f012a06e:	c1 e0 04             	shl    $0x4,%eax
f012a071:	89 c2                	mov    %eax,%edx
f012a073:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a079:	01 d0                	add    %edx,%eax
f012a07b:	48                   	dec    %eax
f012a07c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a082:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a088:	ba 00 00 00 00       	mov    $0x0,%edx
f012a08d:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a093:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a099:	29 d0                	sub    %edx,%eax
f012a09b:	01 d8                	add    %ebx,%eax
f012a09d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a0a2:	39 c1                	cmp    %eax,%ecx
f012a0a4:	74 17                	je     f012a0bd <test_kfreelast+0xfbd>
f012a0a6:	83 ec 04             	sub    $0x4,%esp
f012a0a9:	68 5c aa 13 f0       	push   $0xf013aa5c
f012a0ae:	68 71 0d 00 00       	push   $0xd71
f012a0b3:	68 76 a9 13 f0       	push   $0xf013a976
f012a0b8:	e8 e9 60 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a0bd:	e8 ca 9b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a0c2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a0c5:	74 17                	je     f012a0de <test_kfreelast+0xfde>
f012a0c7:	83 ec 04             	sub    $0x4,%esp
f012a0ca:	68 90 a9 13 f0       	push   $0xf013a990
f012a0cf:	68 72 0d 00 00       	push   $0xd72
f012a0d4:	68 76 a9 13 f0       	push   $0xf013a976
f012a0d9:	e8 c8 60 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a0de:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a0e1:	e8 02 24 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a0e6:	29 c3                	sub    %eax,%ebx
f012a0e8:	89 d8                	mov    %ebx,%eax
f012a0ea:	83 f8 05             	cmp    $0x5,%eax
f012a0ed:	74 17                	je     f012a106 <test_kfreelast+0x1006>
f012a0ef:	83 ec 04             	sub    $0x4,%esp
f012a0f2:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012a0f7:	68 73 0d 00 00       	push   $0xd73
f012a0fc:	68 76 a9 13 f0       	push   $0xf013a976
f012a101:	e8 a0 60 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a106:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a10d:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a110:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a116:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a119:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a120:	eb 0e                	jmp    f012a130 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a122:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a125:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a128:	01 d0                	add    %edx,%eax
f012a12a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a12d:	ff 45 f4             	incl   -0xc(%ebp)
f012a130:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a136:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a139:	7f e7                	jg     f012a122 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a13b:	e8 a8 23 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a140:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a143:	e8 44 9b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a148:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a14b:	83 ec 0c             	sub    $0xc,%esp
f012a14e:	68 00 00 10 00       	push   $0x100000
f012a153:	e8 6c d4 fd ff       	call   f01075c4 <kmalloc>
f012a158:	83 c4 10             	add    $0x10,%esp
f012a15b:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a161:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a167:	89 c1                	mov    %eax,%ecx
f012a169:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a170:	10 00 00 
f012a173:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a179:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a17e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a184:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a18a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a18f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a195:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a19b:	29 d0                	sub    %edx,%eax
f012a19d:	89 c3                	mov    %eax,%ebx
f012a19f:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a1a6:	10 00 00 
f012a1a9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a1ae:	0f b6 d0             	movzbl %al,%edx
f012a1b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a1b7:	01 d0                	add    %edx,%eax
f012a1b9:	48                   	dec    %eax
f012a1ba:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a1c0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a1c6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1cb:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a1d1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a1d7:	29 d0                	sub    %edx,%eax
f012a1d9:	01 c3                	add    %eax,%ebx
f012a1db:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a1e2:	10 00 00 
f012a1e5:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a1ea:	0f b6 c0             	movzbl %al,%eax
f012a1ed:	c1 e0 04             	shl    $0x4,%eax
f012a1f0:	89 c2                	mov    %eax,%edx
f012a1f2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a1f8:	01 d0                	add    %edx,%eax
f012a1fa:	48                   	dec    %eax
f012a1fb:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a201:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a207:	ba 00 00 00 00       	mov    $0x0,%edx
f012a20c:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a212:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a218:	29 d0                	sub    %edx,%eax
f012a21a:	01 d8                	add    %ebx,%eax
f012a21c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a221:	39 c1                	cmp    %eax,%ecx
f012a223:	74 17                	je     f012a23c <test_kfreelast+0x113c>
f012a225:	83 ec 04             	sub    $0x4,%esp
f012a228:	68 5c aa 13 f0       	push   $0xf013aa5c
f012a22d:	68 7f 0d 00 00       	push   $0xd7f
f012a232:	68 76 a9 13 f0       	push   $0xf013a976
f012a237:	e8 6a 5f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a23c:	e8 4b 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a241:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a244:	74 17                	je     f012a25d <test_kfreelast+0x115d>
f012a246:	83 ec 04             	sub    $0x4,%esp
f012a249:	68 90 a9 13 f0       	push   $0xf013a990
f012a24e:	68 80 0d 00 00       	push   $0xd80
f012a253:	68 76 a9 13 f0       	push   $0xf013a976
f012a258:	e8 49 5f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a25d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a260:	e8 83 22 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a265:	29 c3                	sub    %eax,%ebx
f012a267:	89 d8                	mov    %ebx,%eax
f012a269:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a26e:	74 17                	je     f012a287 <test_kfreelast+0x1187>
f012a270:	83 ec 04             	sub    $0x4,%esp
f012a273:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012a278:	68 81 0d 00 00       	push   $0xd81
f012a27d:	68 76 a9 13 f0       	push   $0xf013a976
f012a282:	e8 1f 5f fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012a287:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012a28e:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012a291:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a297:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012a29a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a2a1:	eb 0e                	jmp    f012a2b1 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012a2a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a2a6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a2a9:	01 d0                	add    %edx,%eax
f012a2ab:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012a2ae:	ff 45 f4             	incl   -0xc(%ebp)
f012a2b1:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012a2b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a2ba:	7f e7                	jg     f012a2a3 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012a2bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a2c3:	e8 20 22 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a2c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2cb:	e8 bc 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a2d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a2d3:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a2d9:	83 ec 0c             	sub    $0xc,%esp
f012a2dc:	50                   	push   %eax
f012a2dd:	e8 fc d2 fd ff       	call   f01075de <kfree>
f012a2e2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a2e5:	e8 a2 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a2ea:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2ed:	74 17                	je     f012a306 <test_kfreelast+0x1206>
f012a2ef:	83 ec 04             	sub    $0x4,%esp
f012a2f2:	68 90 a9 13 f0       	push   $0xf013a990
f012a2f7:	68 91 0d 00 00       	push   $0xd91
f012a2fc:	68 76 a9 13 f0       	push   $0xf013a976
f012a301:	e8 a0 5e fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012a306:	e8 dd 21 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a30b:	89 c2                	mov    %eax,%edx
f012a30d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a310:	29 c2                	sub    %eax,%edx
f012a312:	89 d0                	mov    %edx,%eax
f012a314:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a319:	74 17                	je     f012a332 <test_kfreelast+0x1232>
f012a31b:	83 ec 04             	sub    $0x4,%esp
f012a31e:	68 00 b1 13 f0       	push   $0xf013b100
f012a323:	68 92 0d 00 00       	push   $0xd92
f012a328:	68 76 a9 13 f0       	push   $0xf013a976
f012a32d:	e8 74 5e fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a332:	e8 b1 21 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a337:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a33a:	e8 4d 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a33f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012a342:	83 ec 0c             	sub    $0xc,%esp
f012a345:	68 00 78 00 00       	push   $0x7800
f012a34a:	e8 75 d2 fd ff       	call   f01075c4 <kmalloc>
f012a34f:	83 c4 10             	add    $0x10,%esp
f012a352:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a358:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a35e:	89 c1                	mov    %eax,%ecx
f012a360:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012a367:	10 00 00 
f012a36a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012a370:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a375:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012a37b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a381:	ba 00 00 00 00       	mov    $0x0,%edx
f012a386:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012a38c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a392:	29 d0                	sub    %edx,%eax
f012a394:	89 c3                	mov    %eax,%ebx
f012a396:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012a39d:	10 00 00 
f012a3a0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a3a5:	0f b6 d0             	movzbl %al,%edx
f012a3a8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012a3ae:	01 d0                	add    %edx,%eax
f012a3b0:	48                   	dec    %eax
f012a3b1:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012a3b7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a3bd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3c2:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012a3c8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a3ce:	29 d0                	sub    %edx,%eax
f012a3d0:	01 c3                	add    %eax,%ebx
f012a3d2:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012a3d9:	10 00 00 
f012a3dc:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a3e1:	0f b6 c0             	movzbl %al,%eax
f012a3e4:	c1 e0 04             	shl    $0x4,%eax
f012a3e7:	89 c2                	mov    %eax,%edx
f012a3e9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a3ef:	01 d0                	add    %edx,%eax
f012a3f1:	48                   	dec    %eax
f012a3f2:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012a3f8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a3fe:	ba 00 00 00 00       	mov    $0x0,%edx
f012a403:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012a409:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a40f:	29 d0                	sub    %edx,%eax
f012a411:	01 d8                	add    %ebx,%eax
f012a413:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a418:	39 c1                	cmp    %eax,%ecx
f012a41a:	74 17                	je     f012a433 <test_kfreelast+0x1333>
f012a41c:	83 ec 04             	sub    $0x4,%esp
f012a41f:	68 5c aa 13 f0       	push   $0xf013aa5c
f012a424:	68 9b 0d 00 00       	push   $0xd9b
f012a429:	68 76 a9 13 f0       	push   $0xf013a976
f012a42e:	e8 73 5d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a433:	e8 54 98 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a438:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a43b:	74 17                	je     f012a454 <test_kfreelast+0x1354>
f012a43d:	83 ec 04             	sub    $0x4,%esp
f012a440:	68 90 a9 13 f0       	push   $0xf013a990
f012a445:	68 9c 0d 00 00       	push   $0xd9c
f012a44a:	68 76 a9 13 f0       	push   $0xf013a976
f012a44f:	e8 52 5d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a454:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a457:	e8 8c 20 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a45c:	29 c3                	sub    %eax,%ebx
f012a45e:	89 d8                	mov    %ebx,%eax
f012a460:	83 f8 08             	cmp    $0x8,%eax
f012a463:	74 17                	je     f012a47c <test_kfreelast+0x137c>
f012a465:	83 ec 04             	sub    $0x4,%esp
f012a468:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012a46d:	68 9d 0d 00 00       	push   $0xd9d
f012a472:	68 76 a9 13 f0       	push   $0xf013a976
f012a477:	e8 2a 5d fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a47c:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a483:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a486:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a48c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a48f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a496:	eb 0e                	jmp    f012a4a6 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a498:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a49b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a49e:	01 d0                	add    %edx,%eax
f012a4a0:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a4a3:	ff 45 f4             	incl   -0xc(%ebp)
f012a4a6:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a4ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a4af:	7f e7                	jg     f012a498 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a4b1:	e8 32 20 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a4b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4b9:	e8 ce 97 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a4be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a4c1:	83 ec 0c             	sub    $0xc,%esp
f012a4c4:	68 00 00 10 00       	push   $0x100000
f012a4c9:	e8 f6 d0 fd ff       	call   f01075c4 <kmalloc>
f012a4ce:	83 c4 10             	add    $0x10,%esp
f012a4d1:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a4d7:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a4dd:	89 c1                	mov    %eax,%ecx
f012a4df:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a4e6:	10 00 00 
f012a4e9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a4ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a4f4:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a4fa:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a500:	ba 00 00 00 00       	mov    $0x0,%edx
f012a505:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a50b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a511:	29 d0                	sub    %edx,%eax
f012a513:	89 c3                	mov    %eax,%ebx
f012a515:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a51c:	10 00 00 
f012a51f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a524:	0f b6 d0             	movzbl %al,%edx
f012a527:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a52d:	01 d0                	add    %edx,%eax
f012a52f:	48                   	dec    %eax
f012a530:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a536:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a53c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a541:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a547:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a54d:	29 d0                	sub    %edx,%eax
f012a54f:	01 c3                	add    %eax,%ebx
f012a551:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a558:	10 00 00 
f012a55b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a560:	0f b6 c0             	movzbl %al,%eax
f012a563:	c1 e0 04             	shl    $0x4,%eax
f012a566:	89 c2                	mov    %eax,%edx
f012a568:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a56e:	01 d0                	add    %edx,%eax
f012a570:	48                   	dec    %eax
f012a571:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a577:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a57d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a582:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a588:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a58e:	29 d0                	sub    %edx,%eax
f012a590:	01 d8                	add    %ebx,%eax
f012a592:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a597:	39 c1                	cmp    %eax,%ecx
f012a599:	74 17                	je     f012a5b2 <test_kfreelast+0x14b2>
f012a59b:	83 ec 04             	sub    $0x4,%esp
f012a59e:	68 5c aa 13 f0       	push   $0xf013aa5c
f012a5a3:	68 a9 0d 00 00       	push   $0xda9
f012a5a8:	68 76 a9 13 f0       	push   $0xf013a976
f012a5ad:	e8 f4 5b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5b2:	e8 d5 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a5b7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5ba:	74 17                	je     f012a5d3 <test_kfreelast+0x14d3>
f012a5bc:	83 ec 04             	sub    $0x4,%esp
f012a5bf:	68 90 a9 13 f0       	push   $0xf013a990
f012a5c4:	68 aa 0d 00 00       	push   $0xdaa
f012a5c9:	68 76 a9 13 f0       	push   $0xf013a976
f012a5ce:	e8 d3 5b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a5d3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a5d6:	e8 0d 1f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a5db:	29 c3                	sub    %eax,%ebx
f012a5dd:	89 d8                	mov    %ebx,%eax
f012a5df:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a5e4:	74 17                	je     f012a5fd <test_kfreelast+0x14fd>
f012a5e6:	83 ec 04             	sub    $0x4,%esp
f012a5e9:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012a5ee:	68 ab 0d 00 00       	push   $0xdab
f012a5f3:	68 76 a9 13 f0       	push   $0xf013a976
f012a5f8:	e8 a9 5b fd ff       	call   f01001a6 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012a5fd:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012a604:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012a607:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a60d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012a610:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a617:	eb 0e                	jmp    f012a627 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012a619:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a61c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a61f:	01 d0                	add    %edx,%eax
f012a621:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012a624:	ff 45 f4             	incl   -0xc(%ebp)
f012a627:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012a62d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a630:	7f e7                	jg     f012a619 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012a632:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012a636:	83 ec 08             	sub    $0x8,%esp
f012a639:	ff 75 f0             	pushl  -0x10(%ebp)
f012a63c:	68 a8 b9 13 f0       	push   $0xf013b9a8
f012a641:	e8 e7 65 fd ff       	call   f0100c2d <cprintf>
f012a646:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012a649:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a650:	e8 93 1e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a655:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a658:	e8 2f 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a65d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012a660:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a666:	83 ec 0c             	sub    $0xc,%esp
f012a669:	50                   	push   %eax
f012a66a:	e8 6f cf fd ff       	call   f01075de <kfree>
f012a66f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a672:	e8 15 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a677:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a67a:	74 1d                	je     f012a699 <test_kfreelast+0x1599>
f012a67c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a680:	75 17                	jne    f012a699 <test_kfreelast+0x1599>
f012a682:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a689:	83 ec 0c             	sub    $0xc,%esp
f012a68c:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012a691:	e8 97 65 fd ff       	call   f0100c2d <cprintf>
f012a696:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a699:	e8 4a 1e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a69e:	89 c2                	mov    %eax,%edx
f012a6a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a6a3:	29 c2                	sub    %eax,%edx
f012a6a5:	89 d0                	mov    %edx,%eax
f012a6a7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a6ac:	74 1d                	je     f012a6cb <test_kfreelast+0x15cb>
f012a6ae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a6b2:	75 17                	jne    f012a6cb <test_kfreelast+0x15cb>
f012a6b4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a6bb:	83 ec 0c             	sub    $0xc,%esp
f012a6be:	68 3c ba 13 f0       	push   $0xf013ba3c
f012a6c3:	e8 65 65 fd ff       	call   f0100c2d <cprintf>
f012a6c8:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a6cb:	e8 18 1e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a6d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a6d3:	e8 b4 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a6d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012a6db:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a6e1:	83 ec 0c             	sub    $0xc,%esp
f012a6e4:	50                   	push   %eax
f012a6e5:	e8 f4 ce fd ff       	call   f01075de <kfree>
f012a6ea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a6ed:	e8 9a 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a6f2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a6f5:	74 1d                	je     f012a714 <test_kfreelast+0x1614>
f012a6f7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a6fb:	75 17                	jne    f012a714 <test_kfreelast+0x1614>
f012a6fd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a704:	83 ec 0c             	sub    $0xc,%esp
f012a707:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012a70c:	e8 1c 65 fd ff       	call   f0100c2d <cprintf>
f012a711:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a714:	e8 cf 1d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a719:	89 c2                	mov    %eax,%edx
f012a71b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a71e:	29 c2                	sub    %eax,%edx
f012a720:	89 d0                	mov    %edx,%eax
f012a722:	83 f8 08             	cmp    $0x8,%eax
f012a725:	74 1d                	je     f012a744 <test_kfreelast+0x1644>
f012a727:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a72b:	75 17                	jne    f012a744 <test_kfreelast+0x1644>
f012a72d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a734:	83 ec 0c             	sub    $0xc,%esp
f012a737:	68 3c ba 13 f0       	push   $0xf013ba3c
f012a73c:	e8 ec 64 fd ff       	call   f0100c2d <cprintf>
f012a741:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a744:	e8 9f 1d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a749:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a74c:	e8 3b 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a751:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012a754:	83 ec 0c             	sub    $0xc,%esp
f012a757:	68 00 28 00 00       	push   $0x2800
f012a75c:	e8 63 ce fd ff       	call   f01075c4 <kmalloc>
f012a761:	83 c4 10             	add    $0x10,%esp
f012a764:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a76a:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a770:	89 c1                	mov    %eax,%ecx
f012a772:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012a779:	10 00 00 
f012a77c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012a782:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a787:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012a78d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a793:	ba 00 00 00 00       	mov    $0x0,%edx
f012a798:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012a79e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a7a4:	29 d0                	sub    %edx,%eax
f012a7a6:	89 c3                	mov    %eax,%ebx
f012a7a8:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012a7af:	10 00 00 
f012a7b2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a7b7:	0f b6 d0             	movzbl %al,%edx
f012a7ba:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012a7c0:	01 d0                	add    %edx,%eax
f012a7c2:	48                   	dec    %eax
f012a7c3:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012a7c9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a7cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7d4:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012a7da:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a7e0:	29 d0                	sub    %edx,%eax
f012a7e2:	01 c3                	add    %eax,%ebx
f012a7e4:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012a7eb:	10 00 00 
f012a7ee:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012a7f3:	0f b6 c0             	movzbl %al,%eax
f012a7f6:	c1 e0 04             	shl    $0x4,%eax
f012a7f9:	89 c2                	mov    %eax,%edx
f012a7fb:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012a801:	01 d0                	add    %edx,%eax
f012a803:	48                   	dec    %eax
f012a804:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012a80a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a810:	ba 00 00 00 00       	mov    $0x0,%edx
f012a815:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012a81b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a821:	29 d0                	sub    %edx,%eax
f012a823:	01 d8                	add    %ebx,%eax
f012a825:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a82a:	39 c1                	cmp    %eax,%ecx
f012a82c:	74 1d                	je     f012a84b <test_kfreelast+0x174b>
f012a82e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a832:	75 17                	jne    f012a84b <test_kfreelast+0x174b>
f012a834:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a83b:	83 ec 0c             	sub    $0xc,%esp
f012a83e:	68 74 ba 13 f0       	push   $0xf013ba74
f012a843:	e8 e5 63 fd ff       	call   f0100c2d <cprintf>
f012a848:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a84b:	e8 3c 94 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a850:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a853:	74 1d                	je     f012a872 <test_kfreelast+0x1772>
f012a855:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a859:	75 17                	jne    f012a872 <test_kfreelast+0x1772>
f012a85b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a862:	83 ec 0c             	sub    $0xc,%esp
f012a865:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012a86a:	e8 be 63 fd ff       	call   f0100c2d <cprintf>
f012a86f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a872:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a875:	e8 6e 1c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012a87a:	29 c3                	sub    %eax,%ebx
f012a87c:	89 d8                	mov    %ebx,%eax
f012a87e:	83 f8 03             	cmp    $0x3,%eax
f012a881:	74 1d                	je     f012a8a0 <test_kfreelast+0x17a0>
f012a883:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a887:	75 17                	jne    f012a8a0 <test_kfreelast+0x17a0>
f012a889:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a890:	83 ec 0c             	sub    $0xc,%esp
f012a893:	68 dc ba 13 f0       	push   $0xf013badc
f012a898:	e8 90 63 fd ff       	call   f0100c2d <cprintf>
f012a89d:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012a8a0:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012a8a7:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012a8aa:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a8b0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a8b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8ba:	eb 0e                	jmp    f012a8ca <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012a8bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a8bf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8c2:	01 d0                	add    %edx,%eax
f012a8c4:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a8c7:	ff 45 f4             	incl   -0xc(%ebp)
f012a8ca:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a8d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a8d3:	7f e7                	jg     f012a8bc <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a8d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8d9:	75 17                	jne    f012a8f2 <test_kfreelast+0x17f2>
f012a8db:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a8df:	83 ec 08             	sub    $0x8,%esp
f012a8e2:	ff 75 f0             	pushl  -0x10(%ebp)
f012a8e5:	68 a8 b9 13 f0       	push   $0xf013b9a8
f012a8ea:	e8 3e 63 fd ff       	call   f0100c2d <cprintf>
f012a8ef:	83 c4 10             	add    $0x10,%esp
f012a8f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012a8f9:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a8ff:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a902:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a909:	eb 1e                	jmp    f012a929 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012a90b:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012a911:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a914:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a917:	01 c8                	add    %ecx,%eax
f012a919:	8a 00                	mov    (%eax),%al
f012a91b:	0f be c0             	movsbl %al,%eax
f012a91e:	01 d0                	add    %edx,%eax
f012a920:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a926:	ff 45 f4             	incl   -0xc(%ebp)
f012a929:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a92f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a932:	7f d7                	jg     f012a90b <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012a934:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012a93a:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012a940:	89 d0                	mov    %edx,%eax
f012a942:	01 c0                	add    %eax,%eax
f012a944:	01 d0                	add    %edx,%eax
f012a946:	c1 e0 02             	shl    $0x2,%eax
f012a949:	39 c1                	cmp    %eax,%ecx
f012a94b:	74 1d                	je     f012a96a <test_kfreelast+0x186a>
f012a94d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a951:	75 17                	jne    f012a96a <test_kfreelast+0x186a>
f012a953:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a95a:	83 ec 0c             	sub    $0xc,%esp
f012a95d:	68 20 bb 13 f0       	push   $0xf013bb20
f012a962:	e8 c6 62 fd ff       	call   f0100c2d <cprintf>
f012a967:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a96a:	83 ec 0c             	sub    $0xc,%esp
f012a96d:	6a 03                	push   $0x3
f012a96f:	e8 1d 20 fe ff       	call   f010c991 <sys_bypassPageFault>
f012a974:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012a977:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a97d:	05 00 30 00 00       	add    $0x3000,%eax
f012a982:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012a985:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a98c:	eb 3c                	jmp    f012a9ca <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012a98e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a991:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a994:	01 d0                	add    %edx,%eax
f012a996:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a999:	e8 e1 1f fe ff       	call   f010c97f <sys_rcr2>
f012a99e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a9a1:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012a9a4:	01 ca                	add    %ecx,%edx
f012a9a6:	39 d0                	cmp    %edx,%eax
f012a9a8:	74 1d                	je     f012a9c7 <test_kfreelast+0x18c7>
f012a9aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9ae:	75 17                	jne    f012a9c7 <test_kfreelast+0x18c7>
f012a9b0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9b7:	83 ec 0c             	sub    $0xc,%esp
f012a9ba:	68 54 bb 13 f0       	push   $0xf013bb54
f012a9bf:	e8 69 62 fd ff       	call   f0100c2d <cprintf>
f012a9c4:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012a9c7:	ff 45 f4             	incl   -0xc(%ebp)
f012a9ca:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012a9d1:	7e bb                	jle    f012a98e <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a9d3:	83 ec 0c             	sub    $0xc,%esp
f012a9d6:	6a 00                	push   $0x0
f012a9d8:	e8 b4 1f fe ff       	call   f010c991 <sys_bypassPageFault>
f012a9dd:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a9e0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9e4:	75 17                	jne    f012a9fd <test_kfreelast+0x18fd>
f012a9e6:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012a9ea:	83 ec 08             	sub    $0x8,%esp
f012a9ed:	ff 75 f0             	pushl  -0x10(%ebp)
f012a9f0:	68 a8 b9 13 f0       	push   $0xf013b9a8
f012a9f5:	e8 33 62 fd ff       	call   f0100c2d <cprintf>
f012a9fa:	83 c4 10             	add    $0x10,%esp
f012a9fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa04:	e8 df 1a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012aa09:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa0c:	e8 7b 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012aa14:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aa1a:	83 ec 0c             	sub    $0xc,%esp
f012aa1d:	50                   	push   %eax
f012aa1e:	e8 bb cb fd ff       	call   f01075de <kfree>
f012aa23:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aa26:	e8 61 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa2b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa2e:	74 1d                	je     f012aa4d <test_kfreelast+0x194d>
f012aa30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa34:	75 17                	jne    f012aa4d <test_kfreelast+0x194d>
f012aa36:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa3d:	83 ec 0c             	sub    $0xc,%esp
f012aa40:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012aa45:	e8 e3 61 fd ff       	call   f0100c2d <cprintf>
f012aa4a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aa4d:	e8 96 1a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012aa52:	89 c2                	mov    %eax,%edx
f012aa54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aa57:	29 c2                	sub    %eax,%edx
f012aa59:	89 d0                	mov    %edx,%eax
f012aa5b:	83 f8 03             	cmp    $0x3,%eax
f012aa5e:	74 1d                	je     f012aa7d <test_kfreelast+0x197d>
f012aa60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa64:	75 17                	jne    f012aa7d <test_kfreelast+0x197d>
f012aa66:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa6d:	83 ec 0c             	sub    $0xc,%esp
f012aa70:	68 3c ba 13 f0       	push   $0xf013ba3c
f012aa75:	e8 b3 61 fd ff       	call   f0100c2d <cprintf>
f012aa7a:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa7d:	e8 66 1a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012aa82:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa85:	e8 02 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa8a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012aa8d:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aa93:	83 ec 0c             	sub    $0xc,%esp
f012aa96:	50                   	push   %eax
f012aa97:	e8 42 cb fd ff       	call   f01075de <kfree>
f012aa9c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aa9f:	e8 e8 91 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aaa4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aaa7:	74 1d                	je     f012aac6 <test_kfreelast+0x19c6>
f012aaa9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aaad:	75 17                	jne    f012aac6 <test_kfreelast+0x19c6>
f012aaaf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aab6:	83 ec 0c             	sub    $0xc,%esp
f012aab9:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012aabe:	e8 6a 61 fd ff       	call   f0100c2d <cprintf>
f012aac3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aac6:	e8 1d 1a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012aacb:	89 c2                	mov    %eax,%edx
f012aacd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aad0:	29 c2                	sub    %eax,%edx
f012aad2:	89 d0                	mov    %edx,%eax
f012aad4:	83 f8 04             	cmp    $0x4,%eax
f012aad7:	74 1d                	je     f012aaf6 <test_kfreelast+0x19f6>
f012aad9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aadd:	75 17                	jne    f012aaf6 <test_kfreelast+0x19f6>
f012aadf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aae6:	83 ec 0c             	sub    $0xc,%esp
f012aae9:	68 3c ba 13 f0       	push   $0xf013ba3c
f012aaee:	e8 3a 61 fd ff       	call   f0100c2d <cprintf>
f012aaf3:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012aaf6:	e8 ed 19 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012aafb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aafe:	e8 89 91 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ab03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ab06:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ab0c:	83 ec 0c             	sub    $0xc,%esp
f012ab0f:	50                   	push   %eax
f012ab10:	e8 c9 ca fd ff       	call   f01075de <kfree>
f012ab15:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ab18:	e8 6f 91 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ab1d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ab20:	74 1d                	je     f012ab3f <test_kfreelast+0x1a3f>
f012ab22:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab26:	75 17                	jne    f012ab3f <test_kfreelast+0x1a3f>
f012ab28:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab2f:	83 ec 0c             	sub    $0xc,%esp
f012ab32:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012ab37:	e8 f1 60 fd ff       	call   f0100c2d <cprintf>
f012ab3c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ab3f:	e8 a4 19 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ab44:	89 c2                	mov    %eax,%edx
f012ab46:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ab49:	29 c2                	sub    %eax,%edx
f012ab4b:	89 d0                	mov    %edx,%eax
f012ab4d:	83 f8 05             	cmp    $0x5,%eax
f012ab50:	74 1d                	je     f012ab6f <test_kfreelast+0x1a6f>
f012ab52:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab56:	75 17                	jne    f012ab6f <test_kfreelast+0x1a6f>
f012ab58:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab5f:	83 ec 0c             	sub    $0xc,%esp
f012ab62:	68 3c ba 13 f0       	push   $0xf013ba3c
f012ab67:	e8 c1 60 fd ff       	call   f0100c2d <cprintf>
f012ab6c:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012ab6f:	e8 74 19 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ab74:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab77:	e8 10 91 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ab7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012ab7f:	83 ec 0c             	sub    $0xc,%esp
f012ab82:	68 00 c8 00 00       	push   $0xc800
f012ab87:	e8 38 ca fd ff       	call   f01075c4 <kmalloc>
f012ab8c:	83 c4 10             	add    $0x10,%esp
f012ab8f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012ab95:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ab9b:	89 c1                	mov    %eax,%ecx
f012ab9d:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012aba4:	10 00 00 
f012aba7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012abad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012abb2:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012abb8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012abbe:	ba 00 00 00 00       	mov    $0x0,%edx
f012abc3:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012abc9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012abcf:	29 d0                	sub    %edx,%eax
f012abd1:	89 c3                	mov    %eax,%ebx
f012abd3:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012abda:	10 00 00 
f012abdd:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012abe2:	0f b6 d0             	movzbl %al,%edx
f012abe5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012abeb:	01 d0                	add    %edx,%eax
f012abed:	48                   	dec    %eax
f012abee:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012abf4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012abfa:	ba 00 00 00 00       	mov    $0x0,%edx
f012abff:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012ac05:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ac0b:	29 d0                	sub    %edx,%eax
f012ac0d:	01 c3                	add    %eax,%ebx
f012ac0f:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012ac16:	10 00 00 
f012ac19:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012ac1e:	0f b6 c0             	movzbl %al,%eax
f012ac21:	c1 e0 04             	shl    $0x4,%eax
f012ac24:	89 c2                	mov    %eax,%edx
f012ac26:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012ac2c:	01 d0                	add    %edx,%eax
f012ac2e:	48                   	dec    %eax
f012ac2f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012ac35:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac3b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac40:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012ac46:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac4c:	29 d0                	sub    %edx,%eax
f012ac4e:	01 d8                	add    %ebx,%eax
f012ac50:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012ac55:	39 c1                	cmp    %eax,%ecx
f012ac57:	74 1d                	je     f012ac76 <test_kfreelast+0x1b76>
f012ac59:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac5d:	75 17                	jne    f012ac76 <test_kfreelast+0x1b76>
f012ac5f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac66:	83 ec 0c             	sub    $0xc,%esp
f012ac69:	68 74 ba 13 f0       	push   $0xf013ba74
f012ac6e:	e8 ba 5f fd ff       	call   f0100c2d <cprintf>
f012ac73:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac76:	e8 11 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac7b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac7e:	74 1d                	je     f012ac9d <test_kfreelast+0x1b9d>
f012ac80:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac84:	75 17                	jne    f012ac9d <test_kfreelast+0x1b9d>
f012ac86:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac8d:	83 ec 0c             	sub    $0xc,%esp
f012ac90:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012ac95:	e8 93 5f fd ff       	call   f0100c2d <cprintf>
f012ac9a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012ac9d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aca0:	e8 43 18 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012aca5:	29 c3                	sub    %eax,%ebx
f012aca7:	89 d8                	mov    %ebx,%eax
f012aca9:	83 f8 0d             	cmp    $0xd,%eax
f012acac:	74 1d                	je     f012accb <test_kfreelast+0x1bcb>
f012acae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acb2:	75 17                	jne    f012accb <test_kfreelast+0x1bcb>
f012acb4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acbb:	83 ec 0c             	sub    $0xc,%esp
f012acbe:	68 dc ba 13 f0       	push   $0xf013badc
f012acc3:	e8 65 5f fd ff       	call   f0100c2d <cprintf>
f012acc8:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012accb:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012acd2:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012acd5:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012acdb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012acde:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ace5:	eb 0e                	jmp    f012acf5 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012ace7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012acea:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aced:	01 d0                	add    %edx,%eax
f012acef:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012acf2:	ff 45 f4             	incl   -0xc(%ebp)
f012acf5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012acfb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012acfe:	7f e7                	jg     f012ace7 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012ad00:	e8 e3 17 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ad05:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad08:	e8 7f 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012ad10:	83 ec 0c             	sub    $0xc,%esp
f012ad13:	68 00 fc 2f 00       	push   $0x2ffc00
f012ad18:	e8 a7 c8 fd ff       	call   f01075c4 <kmalloc>
f012ad1d:	83 c4 10             	add    $0x10,%esp
f012ad20:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012ad26:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ad2c:	89 c1                	mov    %eax,%ecx
f012ad2e:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012ad35:	10 00 00 
f012ad38:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ad3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ad43:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012ad49:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ad4f:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad54:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012ad5a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ad60:	29 d0                	sub    %edx,%eax
f012ad62:	89 c3                	mov    %eax,%ebx
f012ad64:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012ad6b:	10 00 00 
f012ad6e:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012ad73:	0f b6 d0             	movzbl %al,%edx
f012ad76:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ad7c:	01 d0                	add    %edx,%eax
f012ad7e:	48                   	dec    %eax
f012ad7f:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012ad85:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ad8b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad90:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012ad96:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ad9c:	29 d0                	sub    %edx,%eax
f012ad9e:	01 c3                	add    %eax,%ebx
f012ada0:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012ada7:	10 00 00 
f012adaa:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012adaf:	0f b6 c0             	movzbl %al,%eax
f012adb2:	c1 e0 04             	shl    $0x4,%eax
f012adb5:	89 c2                	mov    %eax,%edx
f012adb7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012adbd:	01 d0                	add    %edx,%eax
f012adbf:	48                   	dec    %eax
f012adc0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012adc6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012adcc:	ba 00 00 00 00       	mov    $0x0,%edx
f012add1:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012add7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012addd:	29 d0                	sub    %edx,%eax
f012addf:	01 d8                	add    %ebx,%eax
f012ade1:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012ade6:	39 c1                	cmp    %eax,%ecx
f012ade8:	74 1d                	je     f012ae07 <test_kfreelast+0x1d07>
f012adea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012adee:	75 17                	jne    f012ae07 <test_kfreelast+0x1d07>
f012adf0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adf7:	83 ec 0c             	sub    $0xc,%esp
f012adfa:	68 74 ba 13 f0       	push   $0xf013ba74
f012adff:	e8 29 5e fd ff       	call   f0100c2d <cprintf>
f012ae04:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ae07:	e8 80 8e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ae0c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae0f:	74 1d                	je     f012ae2e <test_kfreelast+0x1d2e>
f012ae11:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae15:	75 17                	jne    f012ae2e <test_kfreelast+0x1d2e>
f012ae17:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae1e:	83 ec 0c             	sub    $0xc,%esp
f012ae21:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012ae26:	e8 02 5e fd ff       	call   f0100c2d <cprintf>
f012ae2b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012ae2e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ae31:	e8 b2 16 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ae36:	29 c3                	sub    %eax,%ebx
f012ae38:	89 d8                	mov    %ebx,%eax
f012ae3a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ae3f:	74 1d                	je     f012ae5e <test_kfreelast+0x1d5e>
f012ae41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae45:	75 17                	jne    f012ae5e <test_kfreelast+0x1d5e>
f012ae47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae4e:	83 ec 0c             	sub    $0xc,%esp
f012ae51:	68 dc ba 13 f0       	push   $0xf013badc
f012ae56:	e8 d2 5d fd ff       	call   f0100c2d <cprintf>
f012ae5b:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012ae5e:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012ae65:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012ae68:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ae6e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012ae71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae78:	eb 0e                	jmp    f012ae88 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012ae7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ae7d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae80:	01 d0                	add    %edx,%eax
f012ae82:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012ae85:	ff 45 f4             	incl   -0xc(%ebp)
f012ae88:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ae8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae91:	7f e7                	jg     f012ae7a <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ae93:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae97:	75 17                	jne    f012aeb0 <test_kfreelast+0x1db0>
f012ae99:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012ae9d:	83 ec 08             	sub    $0x8,%esp
f012aea0:	ff 75 f0             	pushl  -0x10(%ebp)
f012aea3:	68 a8 b9 13 f0       	push   $0xf013b9a8
f012aea8:	e8 80 5d fd ff       	call   f0100c2d <cprintf>
f012aead:	83 c4 10             	add    $0x10,%esp
f012aeb0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012aeb7:	e8 2c 16 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012aebc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aebf:	e8 c8 8d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aec4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012aec7:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012aecd:	83 ec 0c             	sub    $0xc,%esp
f012aed0:	50                   	push   %eax
f012aed1:	e8 08 c7 fd ff       	call   f01075de <kfree>
f012aed6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aed9:	e8 ae 8d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aede:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aee1:	74 1d                	je     f012af00 <test_kfreelast+0x1e00>
f012aee3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aee7:	75 17                	jne    f012af00 <test_kfreelast+0x1e00>
f012aee9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aef0:	83 ec 0c             	sub    $0xc,%esp
f012aef3:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012aef8:	e8 30 5d fd ff       	call   f0100c2d <cprintf>
f012aefd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012af00:	e8 e3 15 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012af05:	89 c2                	mov    %eax,%edx
f012af07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012af0a:	29 c2                	sub    %eax,%edx
f012af0c:	89 d0                	mov    %edx,%eax
f012af0e:	83 f8 0d             	cmp    $0xd,%eax
f012af11:	74 1d                	je     f012af30 <test_kfreelast+0x1e30>
f012af13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af17:	75 17                	jne    f012af30 <test_kfreelast+0x1e30>
f012af19:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af20:	83 ec 0c             	sub    $0xc,%esp
f012af23:	68 3c ba 13 f0       	push   $0xf013ba3c
f012af28:	e8 00 5d fd ff       	call   f0100c2d <cprintf>
f012af2d:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012af30:	83 ec 0c             	sub    $0xc,%esp
f012af33:	6a 03                	push   $0x3
f012af35:	e8 57 1a fe ff       	call   f010c991 <sys_bypassPageFault>
f012af3a:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012af3d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012af43:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012af46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012af4d:	eb 3c                	jmp    f012af8b <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012af4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012af52:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af55:	01 d0                	add    %edx,%eax
f012af57:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012af5a:	e8 20 1a fe ff       	call   f010c97f <sys_rcr2>
f012af5f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012af62:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012af65:	01 ca                	add    %ecx,%edx
f012af67:	39 d0                	cmp    %edx,%eax
f012af69:	74 1d                	je     f012af88 <test_kfreelast+0x1e88>
f012af6b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af6f:	75 17                	jne    f012af88 <test_kfreelast+0x1e88>
f012af71:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af78:	83 ec 0c             	sub    $0xc,%esp
f012af7b:	68 54 bb 13 f0       	push   $0xf013bb54
f012af80:	e8 a8 5c fd ff       	call   f0100c2d <cprintf>
f012af85:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012af88:	ff 45 f4             	incl   -0xc(%ebp)
f012af8b:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012af92:	7e bb                	jle    f012af4f <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012af94:	83 ec 0c             	sub    $0xc,%esp
f012af97:	6a 00                	push   $0x0
f012af99:	e8 f3 19 fe ff       	call   f010c991 <sys_bypassPageFault>
f012af9e:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012afa1:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012afa7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012afaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012afb1:	eb 1e                	jmp    f012afd1 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012afb3:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012afb9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012afbc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012afbf:	01 c8                	add    %ecx,%eax
f012afc1:	8a 00                	mov    (%eax),%al
f012afc3:	0f be c0             	movsbl %al,%eax
f012afc6:	01 d0                	add    %edx,%eax
f012afc8:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012afce:	ff 45 f4             	incl   -0xc(%ebp)
f012afd1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012afd7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012afda:	7f d7                	jg     f012afb3 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012afdc:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012afe2:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012afe8:	89 d0                	mov    %edx,%eax
f012afea:	01 c0                	add    %eax,%eax
f012afec:	01 d0                	add    %edx,%eax
f012afee:	01 c0                	add    %eax,%eax
f012aff0:	01 d0                	add    %edx,%eax
f012aff2:	01 c0                	add    %eax,%eax
f012aff4:	39 c1                	cmp    %eax,%ecx
f012aff6:	74 1d                	je     f012b015 <test_kfreelast+0x1f15>
f012aff8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012affc:	75 17                	jne    f012b015 <test_kfreelast+0x1f15>
f012affe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b005:	83 ec 0c             	sub    $0xc,%esp
f012b008:	68 20 bb 13 f0       	push   $0xf013bb20
f012b00d:	e8 1b 5c fd ff       	call   f0100c2d <cprintf>
f012b012:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b015:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b019:	75 17                	jne    f012b032 <test_kfreelast+0x1f32>
f012b01b:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b01f:	83 ec 08             	sub    $0x8,%esp
f012b022:	ff 75 f0             	pushl  -0x10(%ebp)
f012b025:	68 a8 b9 13 f0       	push   $0xf013b9a8
f012b02a:	e8 fe 5b fd ff       	call   f0100c2d <cprintf>
f012b02f:	83 c4 10             	add    $0x10,%esp
f012b032:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b039:	e8 aa 14 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b03e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b041:	e8 46 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b046:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b049:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b04f:	83 ec 0c             	sub    $0xc,%esp
f012b052:	50                   	push   %eax
f012b053:	e8 86 c5 fd ff       	call   f01075de <kfree>
f012b058:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b05b:	e8 2c 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b060:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b063:	74 1d                	je     f012b082 <test_kfreelast+0x1f82>
f012b065:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b069:	75 17                	jne    f012b082 <test_kfreelast+0x1f82>
f012b06b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b072:	83 ec 0c             	sub    $0xc,%esp
f012b075:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b07a:	e8 ae 5b fd ff       	call   f0100c2d <cprintf>
f012b07f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b082:	e8 61 14 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b087:	89 c2                	mov    %eax,%edx
f012b089:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b08c:	29 c2                	sub    %eax,%edx
f012b08e:	89 d0                	mov    %edx,%eax
f012b090:	83 f8 02             	cmp    $0x2,%eax
f012b093:	74 1d                	je     f012b0b2 <test_kfreelast+0x1fb2>
f012b095:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b099:	75 17                	jne    f012b0b2 <test_kfreelast+0x1fb2>
f012b09b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0a2:	83 ec 0c             	sub    $0xc,%esp
f012b0a5:	68 3c ba 13 f0       	push   $0xf013ba3c
f012b0aa:	e8 7e 5b fd ff       	call   f0100c2d <cprintf>
f012b0af:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b0b2:	e8 31 14 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b0b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0ba:	e8 cd 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b0bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b0c2:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b0c8:	83 ec 0c             	sub    $0xc,%esp
f012b0cb:	50                   	push   %eax
f012b0cc:	e8 0d c5 fd ff       	call   f01075de <kfree>
f012b0d1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b0d4:	e8 b3 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b0d9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0dc:	74 1d                	je     f012b0fb <test_kfreelast+0x1ffb>
f012b0de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0e2:	75 17                	jne    f012b0fb <test_kfreelast+0x1ffb>
f012b0e4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0eb:	83 ec 0c             	sub    $0xc,%esp
f012b0ee:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b0f3:	e8 35 5b fd ff       	call   f0100c2d <cprintf>
f012b0f8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b0fb:	e8 e8 13 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b100:	89 c2                	mov    %eax,%edx
f012b102:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b105:	29 c2                	sub    %eax,%edx
f012b107:	89 d0                	mov    %edx,%eax
f012b109:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b10e:	74 1d                	je     f012b12d <test_kfreelast+0x202d>
f012b110:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b114:	75 17                	jne    f012b12d <test_kfreelast+0x202d>
f012b116:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b11d:	83 ec 0c             	sub    $0xc,%esp
f012b120:	68 3c ba 13 f0       	push   $0xf013ba3c
f012b125:	e8 03 5b fd ff       	call   f0100c2d <cprintf>
f012b12a:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b12d:	e8 b6 13 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b132:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b135:	e8 52 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b13a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b13d:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b143:	83 ec 0c             	sub    $0xc,%esp
f012b146:	50                   	push   %eax
f012b147:	e8 92 c4 fd ff       	call   f01075de <kfree>
f012b14c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b14f:	e8 38 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b154:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b157:	74 1d                	je     f012b176 <test_kfreelast+0x2076>
f012b159:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b15d:	75 17                	jne    f012b176 <test_kfreelast+0x2076>
f012b15f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b166:	83 ec 0c             	sub    $0xc,%esp
f012b169:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b16e:	e8 ba 5a fd ff       	call   f0100c2d <cprintf>
f012b173:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b176:	e8 6d 13 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b17b:	89 c2                	mov    %eax,%edx
f012b17d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b180:	29 c2                	sub    %eax,%edx
f012b182:	89 d0                	mov    %edx,%eax
f012b184:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b189:	74 1d                	je     f012b1a8 <test_kfreelast+0x20a8>
f012b18b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b18f:	75 17                	jne    f012b1a8 <test_kfreelast+0x20a8>
f012b191:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b198:	83 ec 0c             	sub    $0xc,%esp
f012b19b:	68 3c ba 13 f0       	push   $0xf013ba3c
f012b1a0:	e8 88 5a fd ff       	call   f0100c2d <cprintf>
f012b1a5:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b1a8:	e8 3b 13 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b1ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b1b0:	e8 d7 8a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b1b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b1b8:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b1be:	83 ec 0c             	sub    $0xc,%esp
f012b1c1:	50                   	push   %eax
f012b1c2:	e8 17 c4 fd ff       	call   f01075de <kfree>
f012b1c7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b1ca:	e8 bd 8a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b1cf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1d2:	74 1d                	je     f012b1f1 <test_kfreelast+0x20f1>
f012b1d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1d8:	75 17                	jne    f012b1f1 <test_kfreelast+0x20f1>
f012b1da:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1e1:	83 ec 0c             	sub    $0xc,%esp
f012b1e4:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b1e9:	e8 3f 5a fd ff       	call   f0100c2d <cprintf>
f012b1ee:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b1f1:	e8 f2 12 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b1f6:	89 c2                	mov    %eax,%edx
f012b1f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b1fb:	29 c2                	sub    %eax,%edx
f012b1fd:	89 d0                	mov    %edx,%eax
f012b1ff:	83 f8 01             	cmp    $0x1,%eax
f012b202:	74 1d                	je     f012b221 <test_kfreelast+0x2121>
f012b204:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b208:	75 17                	jne    f012b221 <test_kfreelast+0x2121>
f012b20a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b211:	83 ec 0c             	sub    $0xc,%esp
f012b214:	68 3c ba 13 f0       	push   $0xf013ba3c
f012b219:	e8 0f 5a fd ff       	call   f0100c2d <cprintf>
f012b21e:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b221:	e8 c2 12 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b226:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b229:	e8 5e 8a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b22e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b231:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b237:	83 ec 0c             	sub    $0xc,%esp
f012b23a:	50                   	push   %eax
f012b23b:	e8 9e c3 fd ff       	call   f01075de <kfree>
f012b240:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b243:	e8 44 8a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b248:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b24b:	74 1d                	je     f012b26a <test_kfreelast+0x216a>
f012b24d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b251:	75 17                	jne    f012b26a <test_kfreelast+0x216a>
f012b253:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b25a:	83 ec 0c             	sub    $0xc,%esp
f012b25d:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b262:	e8 c6 59 fd ff       	call   f0100c2d <cprintf>
f012b267:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b26a:	e8 79 12 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b26f:	89 c2                	mov    %eax,%edx
f012b271:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b274:	29 c2                	sub    %eax,%edx
f012b276:	89 d0                	mov    %edx,%eax
f012b278:	83 f8 01             	cmp    $0x1,%eax
f012b27b:	74 1d                	je     f012b29a <test_kfreelast+0x219a>
f012b27d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b281:	75 17                	jne    f012b29a <test_kfreelast+0x219a>
f012b283:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b28a:	83 ec 0c             	sub    $0xc,%esp
f012b28d:	68 3c ba 13 f0       	push   $0xf013ba3c
f012b292:	e8 96 59 fd ff       	call   f0100c2d <cprintf>
f012b297:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012b29a:	e8 49 12 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b29f:	89 c2                	mov    %eax,%edx
f012b2a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b2a4:	39 c2                	cmp    %eax,%edx
f012b2a6:	74 1d                	je     f012b2c5 <test_kfreelast+0x21c5>
f012b2a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2ac:	75 17                	jne    f012b2c5 <test_kfreelast+0x21c5>
f012b2ae:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2b5:	83 ec 0c             	sub    $0xc,%esp
f012b2b8:	68 9c bb 13 f0       	push   $0xf013bb9c
f012b2bd:	e8 6b 59 fd ff       	call   f0100c2d <cprintf>
f012b2c2:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b2c5:	83 ec 0c             	sub    $0xc,%esp
f012b2c8:	6a 03                	push   $0x3
f012b2ca:	e8 c2 16 fe ff       	call   f010c991 <sys_bypassPageFault>
f012b2cf:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012b2d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b2d9:	e9 8e 00 00 00       	jmp    f012b36c <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012b2de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b2e1:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012b2e8:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012b2eb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b2ee:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b2f1:	e8 89 16 fe ff       	call   f010c97f <sys_rcr2>
f012b2f6:	89 c2                	mov    %eax,%edx
f012b2f8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b2fb:	39 c2                	cmp    %eax,%edx
f012b2fd:	74 1d                	je     f012b31c <test_kfreelast+0x221c>
f012b2ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b303:	75 17                	jne    f012b31c <test_kfreelast+0x221c>
f012b305:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b30c:	83 ec 0c             	sub    $0xc,%esp
f012b30f:	68 54 bb 13 f0       	push   $0xf013bb54
f012b314:	e8 14 59 fd ff       	call   f0100c2d <cprintf>
f012b319:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012b31c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b31f:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b326:	89 c2                	mov    %eax,%edx
f012b328:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b32b:	01 d0                	add    %edx,%eax
f012b32d:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b330:	e8 4a 16 fe ff       	call   f010c97f <sys_rcr2>
f012b335:	89 c2                	mov    %eax,%edx
f012b337:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b33a:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b341:	89 c1                	mov    %eax,%ecx
f012b343:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b346:	01 c8                	add    %ecx,%eax
f012b348:	39 c2                	cmp    %eax,%edx
f012b34a:	74 1d                	je     f012b369 <test_kfreelast+0x2269>
f012b34c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b350:	75 17                	jne    f012b369 <test_kfreelast+0x2269>
f012b352:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b359:	83 ec 0c             	sub    $0xc,%esp
f012b35c:	68 54 bb 13 f0       	push   $0xf013bb54
f012b361:	e8 c7 58 fd ff       	call   f0100c2d <cprintf>
f012b366:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012b369:	ff 45 f4             	incl   -0xc(%ebp)
f012b36c:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012b370:	0f 8e 68 ff ff ff    	jle    f012b2de <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b376:	83 ec 0c             	sub    $0xc,%esp
f012b379:	6a 00                	push   $0x0
f012b37b:	e8 11 16 fe ff       	call   f010c991 <sys_bypassPageFault>
f012b380:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012b383:	e8 60 11 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b388:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b38b:	e8 fc 88 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b390:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012b393:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012b399:	83 ec 0c             	sub    $0xc,%esp
f012b39c:	50                   	push   %eax
f012b39d:	e8 3c c2 fd ff       	call   f01075de <kfree>
f012b3a2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b3a5:	e8 e2 88 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b3aa:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3ad:	74 1d                	je     f012b3cc <test_kfreelast+0x22cc>
f012b3af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3b3:	75 17                	jne    f012b3cc <test_kfreelast+0x22cc>
f012b3b5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3bc:	83 ec 0c             	sub    $0xc,%esp
f012b3bf:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b3c4:	e8 64 58 fd ff       	call   f0100c2d <cprintf>
f012b3c9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b3cc:	e8 17 11 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b3d1:	89 c2                	mov    %eax,%edx
f012b3d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b3d6:	39 c2                	cmp    %eax,%edx
f012b3d8:	74 1d                	je     f012b3f7 <test_kfreelast+0x22f7>
f012b3da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3de:	75 17                	jne    f012b3f7 <test_kfreelast+0x22f7>
f012b3e0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3e7:	83 ec 0c             	sub    $0xc,%esp
f012b3ea:	68 d4 bb 13 f0       	push   $0xf013bbd4
f012b3ef:	e8 39 58 fd ff       	call   f0100c2d <cprintf>
f012b3f4:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b3f7:	e8 ec 10 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b3fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b3ff:	e8 88 88 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b404:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b407:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b40d:	83 ec 0c             	sub    $0xc,%esp
f012b410:	50                   	push   %eax
f012b411:	e8 c8 c1 fd ff       	call   f01075de <kfree>
f012b416:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b419:	e8 6e 88 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b41e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b421:	74 1d                	je     f012b440 <test_kfreelast+0x2340>
f012b423:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b427:	75 17                	jne    f012b440 <test_kfreelast+0x2340>
f012b429:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b430:	83 ec 0c             	sub    $0xc,%esp
f012b433:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b438:	e8 f0 57 fd ff       	call   f0100c2d <cprintf>
f012b43d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b440:	e8 a3 10 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b445:	89 c2                	mov    %eax,%edx
f012b447:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b44a:	39 c2                	cmp    %eax,%edx
f012b44c:	74 1d                	je     f012b46b <test_kfreelast+0x236b>
f012b44e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b452:	75 17                	jne    f012b46b <test_kfreelast+0x236b>
f012b454:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b45b:	83 ec 0c             	sub    $0xc,%esp
f012b45e:	68 d4 bb 13 f0       	push   $0xf013bbd4
f012b463:	e8 c5 57 fd ff       	call   f0100c2d <cprintf>
f012b468:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b46b:	e8 78 10 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b470:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b473:	e8 14 88 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b478:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b47b:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b481:	83 ec 0c             	sub    $0xc,%esp
f012b484:	50                   	push   %eax
f012b485:	e8 54 c1 fd ff       	call   f01075de <kfree>
f012b48a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b48d:	e8 fa 87 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b492:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b495:	74 1d                	je     f012b4b4 <test_kfreelast+0x23b4>
f012b497:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b49b:	75 17                	jne    f012b4b4 <test_kfreelast+0x23b4>
f012b49d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4a4:	83 ec 0c             	sub    $0xc,%esp
f012b4a7:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b4ac:	e8 7c 57 fd ff       	call   f0100c2d <cprintf>
f012b4b1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b4b4:	e8 2f 10 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b4b9:	89 c2                	mov    %eax,%edx
f012b4bb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b4be:	39 c2                	cmp    %eax,%edx
f012b4c0:	74 1d                	je     f012b4df <test_kfreelast+0x23df>
f012b4c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4c6:	75 17                	jne    f012b4df <test_kfreelast+0x23df>
f012b4c8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4cf:	83 ec 0c             	sub    $0xc,%esp
f012b4d2:	68 d4 bb 13 f0       	push   $0xf013bbd4
f012b4d7:	e8 51 57 fd ff       	call   f0100c2d <cprintf>
f012b4dc:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b4df:	e8 04 10 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b4e4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b4e7:	e8 a0 87 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b4ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b4ef:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b4f5:	83 ec 0c             	sub    $0xc,%esp
f012b4f8:	50                   	push   %eax
f012b4f9:	e8 e0 c0 fd ff       	call   f01075de <kfree>
f012b4fe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b501:	e8 86 87 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b506:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b509:	74 1d                	je     f012b528 <test_kfreelast+0x2428>
f012b50b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b50f:	75 17                	jne    f012b528 <test_kfreelast+0x2428>
f012b511:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b518:	83 ec 0c             	sub    $0xc,%esp
f012b51b:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012b520:	e8 08 57 fd ff       	call   f0100c2d <cprintf>
f012b525:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b528:	e8 bb 0f fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b52d:	89 c2                	mov    %eax,%edx
f012b52f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b532:	39 c2                	cmp    %eax,%edx
f012b534:	74 1d                	je     f012b553 <test_kfreelast+0x2453>
f012b536:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b53a:	75 17                	jne    f012b553 <test_kfreelast+0x2453>
f012b53c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b543:	83 ec 0c             	sub    $0xc,%esp
f012b546:	68 d4 bb 13 f0       	push   $0xf013bbd4
f012b54b:	e8 dd 56 fd ff       	call   f0100c2d <cprintf>
f012b550:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b553:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b557:	75 17                	jne    f012b570 <test_kfreelast+0x2470>
f012b559:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b55d:	83 ec 08             	sub    $0x8,%esp
f012b560:	ff 75 f0             	pushl  -0x10(%ebp)
f012b563:	68 a8 b9 13 f0       	push   $0xf013b9a8
f012b568:	e8 c0 56 fd ff       	call   f0100c2d <cprintf>
f012b56d:	83 c4 10             	add    $0x10,%esp
f012b570:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b577:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b57c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b57f:	5b                   	pop    %ebx
f012b580:	5f                   	pop    %edi
f012b581:	5d                   	pop    %ebp
f012b582:	c3                   	ret    

f012b583 <test_krealloc>:

int test_krealloc() {
f012b583:	55                   	push   %ebp
f012b584:	89 e5                	mov    %esp,%ebp
f012b586:	57                   	push   %edi
f012b587:	53                   	push   %ebx
f012b588:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b58e:	83 ec 0c             	sub    $0xc,%esp
f012b591:	68 b8 a8 13 f0       	push   $0xf013a8b8
f012b596:	e8 92 56 fd ff       	call   f0100c2d <cprintf>
f012b59b:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b59e:	83 ec 0c             	sub    $0xc,%esp
f012b5a1:	68 e8 a8 13 f0       	push   $0xf013a8e8
f012b5a6:	e8 82 56 fd ff       	call   f0100c2d <cprintf>
f012b5ab:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b5ae:	83 ec 0c             	sub    $0xc,%esp
f012b5b1:	68 b8 a8 13 f0       	push   $0xf013a8b8
f012b5b6:	e8 72 56 fd ff       	call   f0100c2d <cprintf>
f012b5bb:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b5be:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b5c2:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b5c6:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b5cc:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b5d2:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b5d9:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b5e0:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012b5e6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b5eb:	b8 00 00 00 00       	mov    $0x0,%eax
f012b5f0:	89 d7                	mov    %edx,%edi
f012b5f2:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b5f4:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b5fb:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012b601:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b606:	b8 00 00 00 00       	mov    $0x0,%eax
f012b60b:	89 d7                	mov    %edx,%edi
f012b60d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b60f:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012b615:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b61a:	b8 00 00 00 00       	mov    $0x0,%eax
f012b61f:	89 d7                	mov    %edx,%edi
f012b621:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b623:	e8 c0 0e fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b628:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b62b:	83 ec 08             	sub    $0x8,%esp
f012b62e:	68 00 fc 0f 00       	push   $0xffc00
f012b633:	6a 00                	push   $0x0
f012b635:	e8 52 c0 fd ff       	call   f010768c <krealloc>
f012b63a:	83 c4 10             	add    $0x10,%esp
f012b63d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b643:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b649:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b64e:	77 17                	ja     f012b667 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b650:	83 ec 04             	sub    $0x4,%esp
f012b653:	68 1c bc 13 f0       	push   $0xf013bc1c
f012b658:	68 e2 0e 00 00       	push   $0xee2
f012b65d:	68 76 a9 13 f0       	push   $0xf013a976
f012b662:	e8 3f 4b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b667:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b66d:	89 c1                	mov    %eax,%ecx
f012b66f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b676:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b679:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b67e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b681:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b684:	ba 00 00 00 00       	mov    $0x0,%edx
f012b689:	f7 75 b4             	divl   -0x4c(%ebp)
f012b68c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b68f:	29 d0                	sub    %edx,%eax
f012b691:	89 c3                	mov    %eax,%ebx
f012b693:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b69a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012b69f:	0f b6 d0             	movzbl %al,%edx
f012b6a2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b6a5:	01 d0                	add    %edx,%eax
f012b6a7:	48                   	dec    %eax
f012b6a8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b6ab:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b6ae:	ba 00 00 00 00       	mov    $0x0,%edx
f012b6b3:	f7 75 ac             	divl   -0x54(%ebp)
f012b6b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b6b9:	29 d0                	sub    %edx,%eax
f012b6bb:	01 c3                	add    %eax,%ebx
f012b6bd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012b6c4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012b6c9:	0f b6 c0             	movzbl %al,%eax
f012b6cc:	c1 e0 04             	shl    $0x4,%eax
f012b6cf:	89 c2                	mov    %eax,%edx
f012b6d1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012b6d4:	01 d0                	add    %edx,%eax
f012b6d6:	48                   	dec    %eax
f012b6d7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012b6da:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b6dd:	ba 00 00 00 00       	mov    $0x0,%edx
f012b6e2:	f7 75 a4             	divl   -0x5c(%ebp)
f012b6e5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b6e8:	29 d0                	sub    %edx,%eax
f012b6ea:	01 d8                	add    %ebx,%eax
f012b6ec:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b6f1:	39 c1                	cmp    %eax,%ecx
f012b6f3:	74 17                	je     f012b70c <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012b6f5:	83 ec 04             	sub    $0x4,%esp
f012b6f8:	68 58 bc 13 f0       	push   $0xf013bc58
f012b6fd:	68 e4 0e 00 00       	push   $0xee4
f012b702:	68 76 a9 13 f0       	push   $0xf013a976
f012b707:	e8 9a 4a fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b70c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b70f:	e8 d4 0d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b714:	29 c3                	sub    %eax,%ebx
f012b716:	89 d8                	mov    %ebx,%eax
f012b718:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b71d:	74 17                	je     f012b736 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012b71f:	83 ec 04             	sub    $0x4,%esp
f012b722:	68 8a bc 13 f0       	push   $0xf013bc8a
f012b727:	68 e7 0e 00 00       	push   $0xee7
f012b72c:	68 76 a9 13 f0       	push   $0xf013a976
f012b731:	e8 70 4a fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b736:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012b73d:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b740:	e8 a3 0d fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b745:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012b748:	83 ec 08             	sub    $0x8,%esp
f012b74b:	68 00 fc 0f 00       	push   $0xffc00
f012b750:	6a 00                	push   $0x0
f012b752:	e8 35 bf fd ff       	call   f010768c <krealloc>
f012b757:	83 c4 10             	add    $0x10,%esp
f012b75a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012b760:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b766:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012b76b:	77 17                	ja     f012b784 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b76d:	83 ec 04             	sub    $0x4,%esp
f012b770:	68 1c bc 13 f0       	push   $0xf013bc1c
f012b775:	68 ef 0e 00 00       	push   $0xeef
f012b77a:	68 76 a9 13 f0       	push   $0xf013a976
f012b77f:	e8 22 4a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012b784:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b78a:	89 c1                	mov    %eax,%ecx
f012b78c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012b793:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012b796:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b79b:	89 45 98             	mov    %eax,-0x68(%ebp)
f012b79e:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b7a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7a6:	f7 75 9c             	divl   -0x64(%ebp)
f012b7a9:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b7ac:	29 d0                	sub    %edx,%eax
f012b7ae:	89 c3                	mov    %eax,%ebx
f012b7b0:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012b7b7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012b7bc:	0f b6 d0             	movzbl %al,%edx
f012b7bf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012b7c2:	01 d0                	add    %edx,%eax
f012b7c4:	48                   	dec    %eax
f012b7c5:	89 45 90             	mov    %eax,-0x70(%ebp)
f012b7c8:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b7cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7d0:	f7 75 94             	divl   -0x6c(%ebp)
f012b7d3:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b7d6:	29 d0                	sub    %edx,%eax
f012b7d8:	01 c3                	add    %eax,%ebx
f012b7da:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012b7e1:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012b7e6:	0f b6 c0             	movzbl %al,%eax
f012b7e9:	c1 e0 04             	shl    $0x4,%eax
f012b7ec:	89 c2                	mov    %eax,%edx
f012b7ee:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012b7f1:	01 d0                	add    %edx,%eax
f012b7f3:	48                   	dec    %eax
f012b7f4:	89 45 88             	mov    %eax,-0x78(%ebp)
f012b7f7:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b7fa:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7ff:	f7 75 8c             	divl   -0x74(%ebp)
f012b802:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b805:	29 d0                	sub    %edx,%eax
f012b807:	01 d8                	add    %ebx,%eax
f012b809:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012b80e:	39 c1                	cmp    %eax,%ecx
f012b810:	74 17                	je     f012b829 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012b812:	83 ec 04             	sub    $0x4,%esp
f012b815:	68 58 bc 13 f0       	push   $0xf013bc58
f012b81a:	68 f1 0e 00 00       	push   $0xef1
f012b81f:	68 76 a9 13 f0       	push   $0xf013a976
f012b824:	e8 7d 49 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b829:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b82c:	e8 b7 0c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b831:	29 c3                	sub    %eax,%ebx
f012b833:	89 d8                	mov    %ebx,%eax
f012b835:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b83a:	74 17                	je     f012b853 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012b83c:	83 ec 04             	sub    $0x4,%esp
f012b83f:	68 8a bc 13 f0       	push   $0xf013bc8a
f012b844:	68 f3 0e 00 00       	push   $0xef3
f012b849:	68 76 a9 13 f0       	push   $0xf013a976
f012b84e:	e8 53 49 fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b853:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012b85a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b85d:	e8 86 0c fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b862:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012b865:	83 ec 08             	sub    $0x8,%esp
f012b868:	68 00 fc 0f 00       	push   $0xffc00
f012b86d:	6a 00                	push   $0x0
f012b86f:	e8 18 be fd ff       	call   f010768c <krealloc>
f012b874:	83 c4 10             	add    $0x10,%esp
f012b877:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012b87d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b883:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012b888:	77 17                	ja     f012b8a1 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b88a:	83 ec 04             	sub    $0x4,%esp
f012b88d:	68 1c bc 13 f0       	push   $0xf013bc1c
f012b892:	68 fb 0e 00 00       	push   $0xefb
f012b897:	68 76 a9 13 f0       	push   $0xf013a976
f012b89c:	e8 05 49 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012b8a1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b8a7:	89 c1                	mov    %eax,%ecx
f012b8a9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012b8b0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b8b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b8b8:	89 45 80             	mov    %eax,-0x80(%ebp)
f012b8bb:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b8be:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8c3:	f7 75 84             	divl   -0x7c(%ebp)
f012b8c6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b8c9:	29 d0                	sub    %edx,%eax
f012b8cb:	89 c3                	mov    %eax,%ebx
f012b8cd:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012b8d4:	10 00 00 
f012b8d7:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012b8dc:	0f b6 d0             	movzbl %al,%edx
f012b8df:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012b8e5:	01 d0                	add    %edx,%eax
f012b8e7:	48                   	dec    %eax
f012b8e8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012b8ee:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b8f4:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8f9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012b8ff:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b905:	29 d0                	sub    %edx,%eax
f012b907:	01 c3                	add    %eax,%ebx
f012b909:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012b910:	10 00 00 
f012b913:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012b918:	0f b6 c0             	movzbl %al,%eax
f012b91b:	c1 e0 04             	shl    $0x4,%eax
f012b91e:	89 c2                	mov    %eax,%edx
f012b920:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012b926:	01 d0                	add    %edx,%eax
f012b928:	48                   	dec    %eax
f012b929:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012b92f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b935:	ba 00 00 00 00       	mov    $0x0,%edx
f012b93a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012b940:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b946:	29 d0                	sub    %edx,%eax
f012b948:	01 d8                	add    %ebx,%eax
f012b94a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012b94f:	39 c1                	cmp    %eax,%ecx
f012b951:	74 17                	je     f012b96a <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012b953:	83 ec 04             	sub    $0x4,%esp
f012b956:	68 58 bc 13 f0       	push   $0xf013bc58
f012b95b:	68 fd 0e 00 00       	push   $0xefd
f012b960:	68 76 a9 13 f0       	push   $0xf013a976
f012b965:	e8 3c 48 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b96a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b96d:	e8 76 0b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b972:	29 c3                	sub    %eax,%ebx
f012b974:	89 d8                	mov    %ebx,%eax
f012b976:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b97b:	74 17                	je     f012b994 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012b97d:	83 ec 04             	sub    $0x4,%esp
f012b980:	68 8a bc 13 f0       	push   $0xf013bc8a
f012b985:	68 ff 0e 00 00       	push   $0xeff
f012b98a:	68 76 a9 13 f0       	push   $0xf013a976
f012b98f:	e8 12 48 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b994:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012b99b:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b99e:	e8 45 0b fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012b9a3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012b9a6:	83 ec 08             	sub    $0x8,%esp
f012b9a9:	68 00 fc 0f 00       	push   $0xffc00
f012b9ae:	6a 00                	push   $0x0
f012b9b0:	e8 d7 bc fd ff       	call   f010768c <krealloc>
f012b9b5:	83 c4 10             	add    $0x10,%esp
f012b9b8:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012b9be:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b9c4:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012b9c9:	77 17                	ja     f012b9e2 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b9cb:	83 ec 04             	sub    $0x4,%esp
f012b9ce:	68 1c bc 13 f0       	push   $0xf013bc1c
f012b9d3:	68 06 0f 00 00       	push   $0xf06
f012b9d8:	68 76 a9 13 f0       	push   $0xf013a976
f012b9dd:	e8 c4 47 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012b9e2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b9e8:	89 c1                	mov    %eax,%ecx
f012b9ea:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012b9f1:	10 00 00 
f012b9f4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012b9fa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b9ff:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012ba05:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012ba0b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba10:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012ba16:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012ba1c:	29 d0                	sub    %edx,%eax
f012ba1e:	89 c3                	mov    %eax,%ebx
f012ba20:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012ba27:	10 00 00 
f012ba2a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012ba2f:	0f b6 d0             	movzbl %al,%edx
f012ba32:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012ba38:	01 d0                	add    %edx,%eax
f012ba3a:	48                   	dec    %eax
f012ba3b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012ba41:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012ba47:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba4c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012ba52:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012ba58:	29 d0                	sub    %edx,%eax
f012ba5a:	01 c3                	add    %eax,%ebx
f012ba5c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012ba63:	10 00 00 
f012ba66:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012ba6b:	0f b6 c0             	movzbl %al,%eax
f012ba6e:	c1 e0 04             	shl    $0x4,%eax
f012ba71:	89 c2                	mov    %eax,%edx
f012ba73:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012ba79:	01 d0                	add    %edx,%eax
f012ba7b:	48                   	dec    %eax
f012ba7c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012ba82:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ba88:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba8d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012ba93:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ba99:	29 d0                	sub    %edx,%eax
f012ba9b:	01 d8                	add    %ebx,%eax
f012ba9d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012baa2:	39 c1                	cmp    %eax,%ecx
f012baa4:	74 17                	je     f012babd <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012baa6:	83 ec 04             	sub    $0x4,%esp
f012baa9:	68 58 bc 13 f0       	push   $0xf013bc58
f012baae:	68 08 0f 00 00       	push   $0xf08
f012bab3:	68 76 a9 13 f0       	push   $0xf013a976
f012bab8:	e8 e9 46 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012babd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bac0:	e8 23 0a fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012bac5:	29 c3                	sub    %eax,%ebx
f012bac7:	89 d8                	mov    %ebx,%eax
f012bac9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bace:	74 17                	je     f012bae7 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012bad0:	83 ec 04             	sub    $0x4,%esp
f012bad3:	68 8a bc 13 f0       	push   $0xf013bc8a
f012bad8:	68 0a 0f 00 00       	push   $0xf0a
f012badd:	68 76 a9 13 f0       	push   $0xf013a976
f012bae2:	e8 bf 46 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bae7:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012baee:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012baf1:	e8 f2 09 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012baf6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012baf9:	83 ec 08             	sub    $0x8,%esp
f012bafc:	68 00 fc 1f 00       	push   $0x1ffc00
f012bb01:	6a 00                	push   $0x0
f012bb03:	e8 84 bb fd ff       	call   f010768c <krealloc>
f012bb08:	83 c4 10             	add    $0x10,%esp
f012bb0b:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012bb11:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bb17:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012bb1c:	77 17                	ja     f012bb35 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bb1e:	83 ec 04             	sub    $0x4,%esp
f012bb21:	68 1c bc 13 f0       	push   $0xf013bc1c
f012bb26:	68 11 0f 00 00       	push   $0xf11
f012bb2b:	68 76 a9 13 f0       	push   $0xf013a976
f012bb30:	e8 71 46 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012bb35:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bb3b:	89 c1                	mov    %eax,%ecx
f012bb3d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012bb44:	10 00 00 
f012bb47:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012bb4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb52:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012bb58:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bb5e:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb63:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012bb69:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bb6f:	29 d0                	sub    %edx,%eax
f012bb71:	89 c3                	mov    %eax,%ebx
f012bb73:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012bb7a:	10 00 00 
f012bb7d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012bb82:	0f b6 d0             	movzbl %al,%edx
f012bb85:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012bb8b:	01 d0                	add    %edx,%eax
f012bb8d:	48                   	dec    %eax
f012bb8e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012bb94:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bb9a:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb9f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012bba5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bbab:	29 d0                	sub    %edx,%eax
f012bbad:	01 c3                	add    %eax,%ebx
f012bbaf:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012bbb6:	10 00 00 
f012bbb9:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012bbbe:	0f b6 c0             	movzbl %al,%eax
f012bbc1:	c1 e0 04             	shl    $0x4,%eax
f012bbc4:	89 c2                	mov    %eax,%edx
f012bbc6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012bbcc:	01 d0                	add    %edx,%eax
f012bbce:	48                   	dec    %eax
f012bbcf:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012bbd5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bbdb:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbe0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012bbe6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bbec:	29 d0                	sub    %edx,%eax
f012bbee:	01 d8                	add    %ebx,%eax
f012bbf0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012bbf5:	39 c1                	cmp    %eax,%ecx
f012bbf7:	74 17                	je     f012bc10 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012bbf9:	83 ec 04             	sub    $0x4,%esp
f012bbfc:	68 58 bc 13 f0       	push   $0xf013bc58
f012bc01:	68 13 0f 00 00       	push   $0xf13
f012bc06:	68 76 a9 13 f0       	push   $0xf013a976
f012bc0b:	e8 96 45 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bc10:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bc13:	e8 d0 08 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012bc18:	29 c3                	sub    %eax,%ebx
f012bc1a:	89 d8                	mov    %ebx,%eax
f012bc1c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bc21:	74 17                	je     f012bc3a <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012bc23:	83 ec 04             	sub    $0x4,%esp
f012bc26:	68 8a bc 13 f0       	push   $0xf013bc8a
f012bc2b:	68 15 0f 00 00       	push   $0xf15
f012bc30:	68 76 a9 13 f0       	push   $0xf013a976
f012bc35:	e8 6c 45 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bc3a:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012bc41:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bc44:	e8 9f 08 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012bc49:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012bc4c:	83 ec 08             	sub    $0x8,%esp
f012bc4f:	68 00 fc 1f 00       	push   $0x1ffc00
f012bc54:	6a 00                	push   $0x0
f012bc56:	e8 31 ba fd ff       	call   f010768c <krealloc>
f012bc5b:	83 c4 10             	add    $0x10,%esp
f012bc5e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012bc64:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bc6a:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012bc6f:	77 17                	ja     f012bc88 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bc71:	83 ec 04             	sub    $0x4,%esp
f012bc74:	68 1c bc 13 f0       	push   $0xf013bc1c
f012bc79:	68 1c 0f 00 00       	push   $0xf1c
f012bc7e:	68 76 a9 13 f0       	push   $0xf013a976
f012bc83:	e8 1e 45 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012bc88:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bc8e:	89 c1                	mov    %eax,%ecx
f012bc90:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012bc97:	10 00 00 
f012bc9a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012bca0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bca5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012bcab:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012bcb1:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcb6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012bcbc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012bcc2:	29 d0                	sub    %edx,%eax
f012bcc4:	89 c3                	mov    %eax,%ebx
f012bcc6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012bccd:	10 00 00 
f012bcd0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012bcd5:	0f b6 d0             	movzbl %al,%edx
f012bcd8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012bcde:	01 d0                	add    %edx,%eax
f012bce0:	48                   	dec    %eax
f012bce1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012bce7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012bced:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcf2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012bcf8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012bcfe:	29 d0                	sub    %edx,%eax
f012bd00:	01 c3                	add    %eax,%ebx
f012bd02:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012bd09:	10 00 00 
f012bd0c:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012bd11:	0f b6 c0             	movzbl %al,%eax
f012bd14:	c1 e0 04             	shl    $0x4,%eax
f012bd17:	89 c2                	mov    %eax,%edx
f012bd19:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012bd1f:	01 d0                	add    %edx,%eax
f012bd21:	48                   	dec    %eax
f012bd22:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012bd28:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012bd2e:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd33:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012bd39:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012bd3f:	29 d0                	sub    %edx,%eax
f012bd41:	01 d8                	add    %ebx,%eax
f012bd43:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012bd48:	39 c1                	cmp    %eax,%ecx
f012bd4a:	74 17                	je     f012bd63 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012bd4c:	83 ec 04             	sub    $0x4,%esp
f012bd4f:	68 58 bc 13 f0       	push   $0xf013bc58
f012bd54:	68 1e 0f 00 00       	push   $0xf1e
f012bd59:	68 76 a9 13 f0       	push   $0xf013a976
f012bd5e:	e8 43 44 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bd63:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bd66:	e8 7d 07 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012bd6b:	29 c3                	sub    %eax,%ebx
f012bd6d:	89 d8                	mov    %ebx,%eax
f012bd6f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bd74:	74 17                	je     f012bd8d <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012bd76:	83 ec 04             	sub    $0x4,%esp
f012bd79:	68 8a bc 13 f0       	push   $0xf013bc8a
f012bd7e:	68 20 0f 00 00       	push   $0xf20
f012bd83:	68 76 a9 13 f0       	push   $0xf013a976
f012bd88:	e8 19 44 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bd8d:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012bd94:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bd97:	e8 4c 07 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012bd9c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012bd9f:	83 ec 08             	sub    $0x8,%esp
f012bda2:	68 00 fc 2f 00       	push   $0x2ffc00
f012bda7:	6a 00                	push   $0x0
f012bda9:	e8 de b8 fd ff       	call   f010768c <krealloc>
f012bdae:	83 c4 10             	add    $0x10,%esp
f012bdb1:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012bdb7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bdbd:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012bdc2:	77 17                	ja     f012bddb <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bdc4:	83 ec 04             	sub    $0x4,%esp
f012bdc7:	68 1c bc 13 f0       	push   $0xf013bc1c
f012bdcc:	68 27 0f 00 00       	push   $0xf27
f012bdd1:	68 76 a9 13 f0       	push   $0xf013a976
f012bdd6:	e8 cb 43 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012bddb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bde1:	89 c1                	mov    %eax,%ecx
f012bde3:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012bdea:	10 00 00 
f012bded:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012bdf3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bdf8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012bdfe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012be04:	ba 00 00 00 00       	mov    $0x0,%edx
f012be09:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012be0f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012be15:	29 d0                	sub    %edx,%eax
f012be17:	89 c3                	mov    %eax,%ebx
f012be19:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012be20:	10 00 00 
f012be23:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012be28:	0f b6 d0             	movzbl %al,%edx
f012be2b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012be31:	01 d0                	add    %edx,%eax
f012be33:	48                   	dec    %eax
f012be34:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012be3a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012be40:	ba 00 00 00 00       	mov    $0x0,%edx
f012be45:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012be4b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012be51:	29 d0                	sub    %edx,%eax
f012be53:	01 c3                	add    %eax,%ebx
f012be55:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012be5c:	10 00 00 
f012be5f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012be64:	0f b6 c0             	movzbl %al,%eax
f012be67:	c1 e0 04             	shl    $0x4,%eax
f012be6a:	89 c2                	mov    %eax,%edx
f012be6c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012be72:	01 d0                	add    %edx,%eax
f012be74:	48                   	dec    %eax
f012be75:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012be7b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012be81:	ba 00 00 00 00       	mov    $0x0,%edx
f012be86:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012be8c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012be92:	29 d0                	sub    %edx,%eax
f012be94:	01 d8                	add    %ebx,%eax
f012be96:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012be9b:	39 c1                	cmp    %eax,%ecx
f012be9d:	74 17                	je     f012beb6 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012be9f:	83 ec 04             	sub    $0x4,%esp
f012bea2:	68 58 bc 13 f0       	push   $0xf013bc58
f012bea7:	68 29 0f 00 00       	push   $0xf29
f012beac:	68 76 a9 13 f0       	push   $0xf013a976
f012beb1:	e8 f0 42 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012beb6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012beb9:	e8 2a 06 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012bebe:	29 c3                	sub    %eax,%ebx
f012bec0:	89 d8                	mov    %ebx,%eax
f012bec2:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bec7:	74 17                	je     f012bee0 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012bec9:	83 ec 04             	sub    $0x4,%esp
f012becc:	68 c0 ad 13 f0       	push   $0xf013adc0
f012bed1:	68 2b 0f 00 00       	push   $0xf2b
f012bed6:	68 76 a9 13 f0       	push   $0xf013a976
f012bedb:	e8 c6 42 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012bee0:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012bee7:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012beea:	e8 f9 05 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012beef:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012bef2:	83 ec 08             	sub    $0x8,%esp
f012bef5:	68 00 fc 2f 00       	push   $0x2ffc00
f012befa:	6a 00                	push   $0x0
f012befc:	e8 8b b7 fd ff       	call   f010768c <krealloc>
f012bf01:	83 c4 10             	add    $0x10,%esp
f012bf04:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012bf0a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bf10:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012bf15:	77 17                	ja     f012bf2e <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf17:	83 ec 04             	sub    $0x4,%esp
f012bf1a:	68 1c bc 13 f0       	push   $0xf013bc1c
f012bf1f:	68 32 0f 00 00       	push   $0xf32
f012bf24:	68 76 a9 13 f0       	push   $0xf013a976
f012bf29:	e8 78 42 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012bf2e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bf34:	89 c1                	mov    %eax,%ecx
f012bf36:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012bf3d:	10 00 00 
f012bf40:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012bf46:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bf4b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012bf51:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012bf57:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf5c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012bf62:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012bf68:	29 d0                	sub    %edx,%eax
f012bf6a:	89 c3                	mov    %eax,%ebx
f012bf6c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012bf73:	10 00 00 
f012bf76:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012bf7b:	0f b6 d0             	movzbl %al,%edx
f012bf7e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012bf84:	01 d0                	add    %edx,%eax
f012bf86:	48                   	dec    %eax
f012bf87:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012bf8d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012bf93:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf98:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012bf9e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012bfa4:	29 d0                	sub    %edx,%eax
f012bfa6:	01 c3                	add    %eax,%ebx
f012bfa8:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012bfaf:	10 00 00 
f012bfb2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012bfb7:	0f b6 c0             	movzbl %al,%eax
f012bfba:	c1 e0 04             	shl    $0x4,%eax
f012bfbd:	89 c2                	mov    %eax,%edx
f012bfbf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012bfc5:	01 d0                	add    %edx,%eax
f012bfc7:	48                   	dec    %eax
f012bfc8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012bfce:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012bfd4:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfd9:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012bfdf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012bfe5:	29 d0                	sub    %edx,%eax
f012bfe7:	01 d8                	add    %ebx,%eax
f012bfe9:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012bfee:	39 c1                	cmp    %eax,%ecx
f012bff0:	74 17                	je     f012c009 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012bff2:	83 ec 04             	sub    $0x4,%esp
f012bff5:	68 58 bc 13 f0       	push   $0xf013bc58
f012bffa:	68 34 0f 00 00       	push   $0xf34
f012bfff:	68 76 a9 13 f0       	push   $0xf013a976
f012c004:	e8 9d 41 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c009:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c00c:	e8 d7 04 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c011:	29 c3                	sub    %eax,%ebx
f012c013:	89 d8                	mov    %ebx,%eax
f012c015:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c01a:	74 17                	je     f012c033 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c01c:	83 ec 04             	sub    $0x4,%esp
f012c01f:	68 8a bc 13 f0       	push   $0xf013bc8a
f012c024:	68 36 0f 00 00       	push   $0xf36
f012c029:	68 76 a9 13 f0       	push   $0xf013a976
f012c02e:	e8 73 41 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c033:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c03a:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c03d:	e8 a6 04 fe ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c042:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c045:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c04c:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c04f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c055:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c05b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c061:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c064:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c066:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c06c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c072:	01 c2                	add    %eax,%edx
f012c074:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c077:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c079:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c07f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c085:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c08c:	eb 11                	jmp    f012c09f <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c08e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c091:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c097:	01 d0                	add    %edx,%eax
f012c099:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c09c:	ff 45 f4             	incl   -0xc(%ebp)
f012c09f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c0a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c0a8:	7d e4                	jge    f012c08e <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c0aa:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c0b0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c0b6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c0bc:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c0c2:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c0c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c0cf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c0d5:	01 d0                	add    %edx,%eax
f012c0d7:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c0dd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c0e3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c0e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c0f0:	eb 1b                	jmp    f012c10d <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c0f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c0f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c0fc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c102:	01 d0                	add    %edx,%eax
f012c104:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c10a:	ff 45 f0             	incl   -0x10(%ebp)
f012c10d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c113:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c116:	7d da                	jge    f012c0f2 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c118:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c11e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c124:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c12b:	eb 17                	jmp    f012c144 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c12d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c130:	01 c0                	add    %eax,%eax
f012c132:	89 c2                	mov    %eax,%edx
f012c134:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c13a:	01 d0                	add    %edx,%eax
f012c13c:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c141:	ff 45 ec             	incl   -0x14(%ebp)
f012c144:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c14a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c14d:	7d de                	jge    f012c12d <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c14f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c155:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c15b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c161:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c166:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c16c:	01 c0                	add    %eax,%eax
f012c16e:	89 c2                	mov    %eax,%edx
f012c170:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c176:	01 d0                	add    %edx,%eax
f012c178:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c17d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c183:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c189:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c190:	eb 49                	jmp    f012c1db <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c192:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c195:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c19c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c1a2:	01 d0                	add    %edx,%eax
f012c1a4:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c1a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c1aa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c1b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c1b7:	01 d0                	add    %edx,%eax
f012c1b9:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c1bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c1c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c1c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c1cf:	01 d0                	add    %edx,%eax
f012c1d1:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c1d8:	ff 45 e8             	incl   -0x18(%ebp)
f012c1db:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c1e1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c1e4:	7d ac                	jge    f012c192 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c1e6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c1ec:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c1f2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c1f8:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c1fb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c201:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c207:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c20d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c214:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c21a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c221:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c227:	01 d0                	add    %edx,%eax
f012c229:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c22c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c232:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c239:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c23f:	01 d0                	add    %edx,%eax
f012c241:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c247:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c24d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c254:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c25a:	01 d0                	add    %edx,%eax
f012c25c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c263:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c269:	8a 00                	mov    (%eax),%al
f012c26b:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c26e:	75 17                	jne    f012c287 <test_krealloc+0xd04>
f012c270:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c276:	89 c2                	mov    %eax,%edx
f012c278:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c27e:	01 d0                	add    %edx,%eax
f012c280:	8a 00                	mov    (%eax),%al
f012c282:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c285:	74 17                	je     f012c29e <test_krealloc+0xd1b>
			panic(
f012c287:	83 ec 04             	sub    $0x4,%esp
f012c28a:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c28f:	68 79 0f 00 00       	push   $0xf79
f012c294:	68 76 a9 13 f0       	push   $0xf013a976
f012c299:	e8 08 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c29e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c2a4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c2aa:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c2b0:	8a 00                	mov    (%eax),%al
f012c2b2:	3c 02                	cmp    $0x2,%al
f012c2b4:	75 16                	jne    f012c2cc <test_krealloc+0xd49>
f012c2b6:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c2bc:	89 c2                	mov    %eax,%edx
f012c2be:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c2c4:	01 d0                	add    %edx,%eax
f012c2c6:	8a 00                	mov    (%eax),%al
f012c2c8:	3c 02                	cmp    $0x2,%al
f012c2ca:	74 20                	je     f012c2ec <test_krealloc+0xd69>
			panic(
f012c2cc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c2d2:	8a 00                	mov    (%eax),%al
f012c2d4:	0f be c0             	movsbl %al,%eax
f012c2d7:	50                   	push   %eax
f012c2d8:	68 e8 bc 13 f0       	push   $0xf013bce8
f012c2dd:	68 7f 0f 00 00       	push   $0xf7f
f012c2e2:	68 76 a9 13 f0       	push   $0xf013a976
f012c2e7:	e8 ba 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c2ec:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c2f2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c2f8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c2fe:	8b 00                	mov    (%eax),%eax
f012c300:	83 f8 03             	cmp    $0x3,%eax
f012c303:	75 1c                	jne    f012c321 <test_krealloc+0xd9e>
f012c305:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c30b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c312:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c318:	01 d0                	add    %edx,%eax
f012c31a:	8b 00                	mov    (%eax),%eax
f012c31c:	83 f8 03             	cmp    $0x3,%eax
f012c31f:	74 17                	je     f012c338 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012c321:	83 ec 04             	sub    $0x4,%esp
f012c324:	68 34 bd 13 f0       	push   $0xf013bd34
f012c329:	68 83 0f 00 00       	push   $0xf83
f012c32e:	68 76 a9 13 f0       	push   $0xf013a976
f012c333:	e8 6e 3e fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c338:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c33e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c344:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c34a:	8b 00                	mov    (%eax),%eax
f012c34c:	83 f8 04             	cmp    $0x4,%eax
f012c34f:	75 1c                	jne    f012c36d <test_krealloc+0xdea>
f012c351:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c357:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c35e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c364:	01 d0                	add    %edx,%eax
f012c366:	8b 00                	mov    (%eax),%eax
f012c368:	83 f8 04             	cmp    $0x4,%eax
f012c36b:	74 17                	je     f012c384 <test_krealloc+0xe01>
			panic(
f012c36d:	83 ec 04             	sub    $0x4,%esp
f012c370:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c375:	68 88 0f 00 00       	push   $0xf88
f012c37a:	68 76 a9 13 f0       	push   $0xf013a976
f012c37f:	e8 22 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c384:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c38a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c390:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c396:	66 8b 00             	mov    (%eax),%ax
f012c399:	66 83 f8 05          	cmp    $0x5,%ax
f012c39d:	75 1b                	jne    f012c3ba <test_krealloc+0xe37>
f012c39f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c3a5:	01 c0                	add    %eax,%eax
f012c3a7:	89 c2                	mov    %eax,%edx
f012c3a9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c3af:	01 d0                	add    %edx,%eax
f012c3b1:	66 8b 00             	mov    (%eax),%ax
f012c3b4:	66 83 f8 05          	cmp    $0x5,%ax
f012c3b8:	74 17                	je     f012c3d1 <test_krealloc+0xe4e>
			panic(
f012c3ba:	83 ec 04             	sub    $0x4,%esp
f012c3bd:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c3c2:	68 8d 0f 00 00       	push   $0xf8d
f012c3c7:	68 76 a9 13 f0       	push   $0xf013a976
f012c3cc:	e8 d5 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c3d1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c3d7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c3dd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c3e3:	66 8b 00             	mov    (%eax),%ax
f012c3e6:	66 83 f8 06          	cmp    $0x6,%ax
f012c3ea:	75 1b                	jne    f012c407 <test_krealloc+0xe84>
f012c3ec:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c3f2:	01 c0                	add    %eax,%eax
f012c3f4:	89 c2                	mov    %eax,%edx
f012c3f6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c3fc:	01 d0                	add    %edx,%eax
f012c3fe:	66 8b 00             	mov    (%eax),%ax
f012c401:	66 83 f8 06          	cmp    $0x6,%ax
f012c405:	74 17                	je     f012c41e <test_krealloc+0xe9b>
			panic(
f012c407:	83 ec 04             	sub    $0x4,%esp
f012c40a:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c40f:	68 92 0f 00 00       	push   $0xf92
f012c414:	68 76 a9 13 f0       	push   $0xf013a976
f012c419:	e8 88 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c41e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c424:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c42a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c430:	8a 00                	mov    (%eax),%al
f012c432:	3c 07                	cmp    $0x7,%al
f012c434:	75 1b                	jne    f012c451 <test_krealloc+0xece>
f012c436:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c43c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c443:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c449:	01 d0                	add    %edx,%eax
f012c44b:	8a 00                	mov    (%eax),%al
f012c44d:	3c 07                	cmp    $0x7,%al
f012c44f:	74 17                	je     f012c468 <test_krealloc+0xee5>
			panic(
f012c451:	83 ec 04             	sub    $0x4,%esp
f012c454:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c459:	68 97 0f 00 00       	push   $0xf97
f012c45e:	68 76 a9 13 f0       	push   $0xf013a976
f012c463:	e8 3e 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c468:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c46e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c472:	66 83 f8 07          	cmp    $0x7,%ax
f012c476:	75 1f                	jne    f012c497 <test_krealloc+0xf14>
f012c478:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c47e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c485:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c48b:	01 d0                	add    %edx,%eax
f012c48d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c491:	66 83 f8 07          	cmp    $0x7,%ax
f012c495:	74 17                	je     f012c4ae <test_krealloc+0xf2b>
			panic(
f012c497:	83 ec 04             	sub    $0x4,%esp
f012c49a:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c49f:	68 9a 0f 00 00       	push   $0xf9a
f012c4a4:	68 76 a9 13 f0       	push   $0xf013a976
f012c4a9:	e8 f8 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c4ae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c4b4:	8b 40 04             	mov    0x4(%eax),%eax
f012c4b7:	83 f8 07             	cmp    $0x7,%eax
f012c4ba:	75 1d                	jne    f012c4d9 <test_krealloc+0xf56>
f012c4bc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c4c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c4c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c4cf:	01 d0                	add    %edx,%eax
f012c4d1:	8b 40 04             	mov    0x4(%eax),%eax
f012c4d4:	83 f8 07             	cmp    $0x7,%eax
f012c4d7:	74 17                	je     f012c4f0 <test_krealloc+0xf6d>
			panic(
f012c4d9:	83 ec 04             	sub    $0x4,%esp
f012c4dc:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c4e1:	68 9d 0f 00 00       	push   $0xf9d
f012c4e6:	68 76 a9 13 f0       	push   $0xf013a976
f012c4eb:	e8 b6 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c4f0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c4f6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c4fc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c502:	8a 00                	mov    (%eax),%al
f012c504:	3c 08                	cmp    $0x8,%al
f012c506:	75 1b                	jne    f012c523 <test_krealloc+0xfa0>
f012c508:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c50e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c515:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c51b:	01 d0                	add    %edx,%eax
f012c51d:	8a 00                	mov    (%eax),%al
f012c51f:	3c 08                	cmp    $0x8,%al
f012c521:	74 17                	je     f012c53a <test_krealloc+0xfb7>
			panic(
f012c523:	83 ec 04             	sub    $0x4,%esp
f012c526:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c52b:	68 a2 0f 00 00       	push   $0xfa2
f012c530:	68 76 a9 13 f0       	push   $0xf013a976
f012c535:	e8 6c 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c53a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c540:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c544:	66 83 f8 08          	cmp    $0x8,%ax
f012c548:	75 1f                	jne    f012c569 <test_krealloc+0xfe6>
f012c54a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c550:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c557:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c55d:	01 d0                	add    %edx,%eax
f012c55f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c563:	66 83 f8 08          	cmp    $0x8,%ax
f012c567:	74 17                	je     f012c580 <test_krealloc+0xffd>
			panic(
f012c569:	83 ec 04             	sub    $0x4,%esp
f012c56c:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c571:	68 a5 0f 00 00       	push   $0xfa5
f012c576:	68 76 a9 13 f0       	push   $0xf013a976
f012c57b:	e8 26 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c580:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c586:	8b 40 04             	mov    0x4(%eax),%eax
f012c589:	83 f8 08             	cmp    $0x8,%eax
f012c58c:	75 1d                	jne    f012c5ab <test_krealloc+0x1028>
f012c58e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c594:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c59b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5a1:	01 d0                	add    %edx,%eax
f012c5a3:	8b 40 04             	mov    0x4(%eax),%eax
f012c5a6:	83 f8 08             	cmp    $0x8,%eax
f012c5a9:	74 17                	je     f012c5c2 <test_krealloc+0x103f>
			panic(
f012c5ab:	83 ec 04             	sub    $0x4,%esp
f012c5ae:	68 a8 bc 13 f0       	push   $0xf013bca8
f012c5b3:	68 a8 0f 00 00       	push   $0xfa8
f012c5b8:	68 76 a9 13 f0       	push   $0xf013a976
f012c5bd:	e8 e4 3b fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c5c2:	e8 21 ff fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c5c7:	89 c2                	mov    %eax,%edx
f012c5c9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c5cc:	39 c2                	cmp    %eax,%edx
f012c5ce:	74 17                	je     f012c5e7 <test_krealloc+0x1064>
			panic(
f012c5d0:	83 ec 04             	sub    $0x4,%esp
f012c5d3:	68 68 bd 13 f0       	push   $0xf013bd68
f012c5d8:	68 ac 0f 00 00       	push   $0xfac
f012c5dd:	68 76 a9 13 f0       	push   $0xf013a976
f012c5e2:	e8 bf 3b fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c5e7:	83 ec 0c             	sub    $0xc,%esp
f012c5ea:	68 b4 bd 13 f0       	push   $0xf013bdb4
f012c5ef:	e8 39 46 fd ff       	call   f0100c2d <cprintf>
f012c5f4:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c5f7:	e8 ec fe fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c5fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c5ff:	e8 88 76 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c604:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c60a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c610:	83 ec 08             	sub    $0x8,%esp
f012c613:	6a 00                	push   $0x0
f012c615:	50                   	push   %eax
f012c616:	e8 71 b0 fd ff       	call   f010768c <krealloc>
f012c61b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c61e:	e8 69 76 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c623:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c629:	74 17                	je     f012c642 <test_krealloc+0x10bf>
			panic(
f012c62b:	83 ec 04             	sub    $0x4,%esp
f012c62e:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012c633:	68 b9 0f 00 00       	push   $0xfb9
f012c638:	68 76 a9 13 f0       	push   $0xf013a976
f012c63d:	e8 64 3b fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c642:	e8 a1 fe fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c647:	89 c2                	mov    %eax,%edx
f012c649:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c64c:	29 c2                	sub    %eax,%edx
f012c64e:	89 d0                	mov    %edx,%eax
f012c650:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c655:	74 17                	je     f012c66e <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012c657:	83 ec 04             	sub    $0x4,%esp
f012c65a:	68 4c be 13 f0       	push   $0xf013be4c
f012c65f:	68 bb 0f 00 00       	push   $0xfbb
f012c664:	68 76 a9 13 f0       	push   $0xf013a976
f012c669:	e8 38 3b fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c66e:	e8 75 fe fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c673:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c676:	e8 11 76 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c67b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c681:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c687:	83 ec 08             	sub    $0x8,%esp
f012c68a:	6a 00                	push   $0x0
f012c68c:	50                   	push   %eax
f012c68d:	e8 fa af fd ff       	call   f010768c <krealloc>
f012c692:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c695:	e8 f2 75 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c69a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c6a0:	74 17                	je     f012c6b9 <test_krealloc+0x1136>
			panic(
f012c6a2:	83 ec 04             	sub    $0x4,%esp
f012c6a5:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012c6aa:	68 c4 0f 00 00       	push   $0xfc4
f012c6af:	68 76 a9 13 f0       	push   $0xf013a976
f012c6b4:	e8 ed 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c6b9:	e8 2a fe fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c6be:	89 c2                	mov    %eax,%edx
f012c6c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c6c3:	29 c2                	sub    %eax,%edx
f012c6c5:	89 d0                	mov    %edx,%eax
f012c6c7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c6cc:	74 17                	je     f012c6e5 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012c6ce:	83 ec 04             	sub    $0x4,%esp
f012c6d1:	68 4c be 13 f0       	push   $0xf013be4c
f012c6d6:	68 c6 0f 00 00       	push   $0xfc6
f012c6db:	68 76 a9 13 f0       	push   $0xf013a976
f012c6e0:	e8 c1 3a fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c6e5:	e8 fe fd fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c6ea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c6ed:	e8 9a 75 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c6f2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c6f8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c6fe:	83 ec 08             	sub    $0x8,%esp
f012c701:	6a 00                	push   $0x0
f012c703:	50                   	push   %eax
f012c704:	e8 83 af fd ff       	call   f010768c <krealloc>
f012c709:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c70c:	e8 7b 75 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c711:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c717:	74 17                	je     f012c730 <test_krealloc+0x11ad>
			panic(
f012c719:	83 ec 04             	sub    $0x4,%esp
f012c71c:	68 90 a9 13 f0       	push   $0xf013a990
f012c721:	68 ce 0f 00 00       	push   $0xfce
f012c726:	68 76 a9 13 f0       	push   $0xf013a976
f012c72b:	e8 76 3a fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c730:	e8 b3 fd fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c735:	89 c2                	mov    %eax,%edx
f012c737:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c73a:	29 c2                	sub    %eax,%edx
f012c73c:	89 d0                	mov    %edx,%eax
f012c73e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c743:	74 17                	je     f012c75c <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012c745:	83 ec 04             	sub    $0x4,%esp
f012c748:	68 4c be 13 f0       	push   $0xf013be4c
f012c74d:	68 d0 0f 00 00       	push   $0xfd0
f012c752:	68 76 a9 13 f0       	push   $0xf013a976
f012c757:	e8 4a 3a fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c75c:	e8 87 fd fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c761:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c764:	e8 23 75 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c769:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c76f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c775:	83 ec 08             	sub    $0x8,%esp
f012c778:	6a 00                	push   $0x0
f012c77a:	50                   	push   %eax
f012c77b:	e8 0c af fd ff       	call   f010768c <krealloc>
f012c780:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c783:	e8 04 75 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c788:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c78e:	74 17                	je     f012c7a7 <test_krealloc+0x1224>
			panic(
f012c790:	83 ec 04             	sub    $0x4,%esp
f012c793:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012c798:	68 d8 0f 00 00       	push   $0xfd8
f012c79d:	68 76 a9 13 f0       	push   $0xf013a976
f012c7a2:	e8 ff 39 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c7a7:	e8 3c fd fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012c7ac:	89 c2                	mov    %eax,%edx
f012c7ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c7b1:	29 c2                	sub    %eax,%edx
f012c7b3:	89 d0                	mov    %edx,%eax
f012c7b5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c7ba:	74 17                	je     f012c7d3 <test_krealloc+0x1250>
			panic(
f012c7bc:	83 ec 04             	sub    $0x4,%esp
f012c7bf:	68 80 be 13 f0       	push   $0xf013be80
f012c7c4:	68 db 0f 00 00       	push   $0xfdb
f012c7c9:	68 76 a9 13 f0       	push   $0xf013a976
f012c7ce:	e8 d3 39 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c7d3:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c7da:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c7e1:	eb 48                	jmp    f012c82b <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c7e3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c7e6:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012c7eb:	83 ec 04             	sub    $0x4,%esp
f012c7ee:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012c7f4:	51                   	push   %ecx
f012c7f5:	52                   	push   %edx
f012c7f6:	50                   	push   %eax
f012c7f7:	e8 6d a1 fd ff       	call   f0106969 <get_page_table>
f012c7fc:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c7ff:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012c805:	85 c0                	test   %eax,%eax
f012c807:	75 17                	jne    f012c820 <test_krealloc+0x129d>
					panic(
f012c809:	83 ec 04             	sub    $0x4,%esp
f012c80c:	68 78 b2 13 f0       	push   $0xf013b278
f012c811:	68 e7 0f 00 00       	push   $0xfe7
f012c816:	68 76 a9 13 f0       	push   $0xf013a976
f012c81b:	e8 86 39 fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c820:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c827:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c82b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c82f:	78 b2                	js     f012c7e3 <test_krealloc+0x1260>
f012c831:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c835:	7f 09                	jg     f012c840 <test_krealloc+0x12bd>
f012c837:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c83e:	76 a3                	jbe    f012c7e3 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c840:	83 ec 0c             	sub    $0xc,%esp
f012c843:	68 bf be 13 f0       	push   $0xf013bebf
f012c848:	e8 e0 43 fd ff       	call   f0100c2d <cprintf>
f012c84d:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c850:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c856:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c85c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c863:	eb 21                	jmp    f012c886 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012c865:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c86b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c86e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c874:	01 c8                	add    %ecx,%eax
f012c876:	8a 00                	mov    (%eax),%al
f012c878:	0f be c0             	movsbl %al,%eax
f012c87b:	01 d0                	add    %edx,%eax
f012c87d:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c883:	ff 45 dc             	incl   -0x24(%ebp)
f012c886:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c88c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c88f:	7d d4                	jge    f012c865 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c891:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012c897:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012c89d:	42                   	inc    %edx
f012c89e:	01 d2                	add    %edx,%edx
f012c8a0:	39 d0                	cmp    %edx,%eax
f012c8a2:	74 17                	je     f012c8bb <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012c8a4:	83 ec 04             	sub    $0x4,%esp
f012c8a7:	68 c8 be 13 f0       	push   $0xf013bec8
f012c8ac:	68 f9 0f 00 00       	push   $0xff9
f012c8b1:	68 76 a9 13 f0       	push   $0xf013a976
f012c8b6:	e8 eb 38 fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012c8bb:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c8c1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c8c7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c8ce:	eb 25                	jmp    f012c8f5 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012c8d0:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012c8d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c8d9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012c8e0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c8e6:	01 c8                	add    %ecx,%eax
f012c8e8:	8b 00                	mov    (%eax),%eax
f012c8ea:	01 d0                	add    %edx,%eax
f012c8ec:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c8f2:	ff 45 dc             	incl   -0x24(%ebp)
f012c8f5:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c8fb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c8fe:	7d d0                	jge    f012c8d0 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012c900:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012c906:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012c90c:	42                   	inc    %edx
f012c90d:	c1 e2 02             	shl    $0x2,%edx
f012c910:	39 d0                	cmp    %edx,%eax
f012c912:	74 17                	je     f012c92b <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012c914:	83 ec 04             	sub    $0x4,%esp
f012c917:	68 c8 be 13 f0       	push   $0xf013bec8
f012c91c:	68 03 10 00 00       	push   $0x1003
f012c921:	68 76 a9 13 f0       	push   $0xf013a976
f012c926:	e8 7b 38 fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012c92b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c931:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c937:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c93e:	eb 24                	jmp    f012c964 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012c940:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c946:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c949:	01 c0                	add    %eax,%eax
f012c94b:	89 c1                	mov    %eax,%ecx
f012c94d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c953:	01 c8                	add    %ecx,%eax
f012c955:	66 8b 00             	mov    (%eax),%ax
f012c958:	98                   	cwtl   
f012c959:	01 d0                	add    %edx,%eax
f012c95b:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c961:	ff 45 dc             	incl   -0x24(%ebp)
f012c964:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c96a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c96d:	7d d1                	jge    f012c940 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012c96f:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c975:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c97b:	8d 48 01             	lea    0x1(%eax),%ecx
f012c97e:	89 c8                	mov    %ecx,%eax
f012c980:	c1 e0 02             	shl    $0x2,%eax
f012c983:	01 c8                	add    %ecx,%eax
f012c985:	39 c2                	cmp    %eax,%edx
f012c987:	74 17                	je     f012c9a0 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012c989:	83 ec 04             	sub    $0x4,%esp
f012c98c:	68 c8 be 13 f0       	push   $0xf013bec8
f012c991:	68 0d 10 00 00       	push   $0x100d
f012c996:	68 76 a9 13 f0       	push   $0xf013a976
f012c99b:	e8 06 38 fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012c9a0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c9a6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c9ac:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c9b3:	eb 70                	jmp    f012ca25 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012c9b5:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012c9bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c9be:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c9c5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9cb:	01 c8                	add    %ecx,%eax
f012c9cd:	8a 00                	mov    (%eax),%al
f012c9cf:	0f be c0             	movsbl %al,%eax
f012c9d2:	01 d0                	add    %edx,%eax
f012c9d4:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012c9da:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012c9e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c9e3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c9ea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9f0:	01 c8                	add    %ecx,%eax
f012c9f2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c9f6:	98                   	cwtl   
f012c9f7:	01 d0                	add    %edx,%eax
f012c9f9:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012c9ff:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012ca05:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ca08:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ca0f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca15:	01 c8                	add    %ecx,%eax
f012ca17:	8b 40 04             	mov    0x4(%eax),%eax
f012ca1a:	01 d0                	add    %edx,%eax
f012ca1c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ca22:	ff 45 dc             	incl   -0x24(%ebp)
f012ca25:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ca2b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ca2e:	7d 85                	jge    f012c9b5 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012ca30:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012ca36:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ca3c:	8d 50 01             	lea    0x1(%eax),%edx
f012ca3f:	89 d0                	mov    %edx,%eax
f012ca41:	01 c0                	add    %eax,%eax
f012ca43:	01 d0                	add    %edx,%eax
f012ca45:	01 c0                	add    %eax,%eax
f012ca47:	01 d0                	add    %edx,%eax
f012ca49:	39 c1                	cmp    %eax,%ecx
f012ca4b:	75 3a                	jne    f012ca87 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012ca4d:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012ca53:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ca59:	8d 50 01             	lea    0x1(%eax),%edx
f012ca5c:	89 d0                	mov    %edx,%eax
f012ca5e:	01 c0                	add    %eax,%eax
f012ca60:	01 d0                	add    %edx,%eax
f012ca62:	01 c0                	add    %eax,%eax
f012ca64:	01 d0                	add    %edx,%eax
f012ca66:	39 c1                	cmp    %eax,%ecx
f012ca68:	75 1d                	jne    f012ca87 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012ca6a:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012ca70:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ca76:	8d 50 01             	lea    0x1(%eax),%edx
f012ca79:	89 d0                	mov    %edx,%eax
f012ca7b:	01 c0                	add    %eax,%eax
f012ca7d:	01 d0                	add    %edx,%eax
f012ca7f:	01 c0                	add    %eax,%eax
f012ca81:	01 d0                	add    %edx,%eax
f012ca83:	39 c1                	cmp    %eax,%ecx
f012ca85:	74 17                	je     f012ca9e <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012ca87:	83 ec 04             	sub    $0x4,%esp
f012ca8a:	68 c8 be 13 f0       	push   $0xf013bec8
f012ca8f:	68 1b 10 00 00       	push   $0x101b
f012ca94:	68 76 a9 13 f0       	push   $0xf013a976
f012ca99:	e8 08 37 fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ca9e:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012caa5:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012caa8:	e8 3b fa fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012caad:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cab0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cab6:	83 ec 08             	sub    $0x8,%esp
f012cab9:	68 00 3c 00 00       	push   $0x3c00
f012cabe:	50                   	push   %eax
f012cabf:	e8 c8 ab fd ff       	call   f010768c <krealloc>
f012cac4:	83 c4 10             	add    $0x10,%esp
f012cac7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cacd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cad3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cad8:	77 17                	ja     f012caf1 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cada:	83 ec 04             	sub    $0x4,%esp
f012cadd:	68 1c bc 13 f0       	push   $0xf013bc1c
f012cae2:	68 27 10 00 00       	push   $0x1027
f012cae7:	68 76 a9 13 f0       	push   $0xf013a976
f012caec:	e8 b5 36 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012caf1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012caf7:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cafd:	74 17                	je     f012cb16 <test_krealloc+0x1593>
			panic(
f012caff:	83 ec 04             	sub    $0x4,%esp
f012cb02:	68 00 bf 13 f0       	push   $0xf013bf00
f012cb07:	68 2a 10 00 00       	push   $0x102a
f012cb0c:	68 76 a9 13 f0       	push   $0xf013a976
f012cb11:	e8 90 36 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cb16:	e8 cd f9 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cb1b:	89 c2                	mov    %eax,%edx
f012cb1d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb20:	39 c2                	cmp    %eax,%edx
f012cb22:	74 17                	je     f012cb3b <test_krealloc+0x15b8>
			panic(
f012cb24:	83 ec 04             	sub    $0x4,%esp
f012cb27:	68 6c bf 13 f0       	push   $0xf013bf6c
f012cb2c:	68 2d 10 00 00       	push   $0x102d
f012cb31:	68 76 a9 13 f0       	push   $0xf013a976
f012cb36:	e8 6b 36 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cb3b:	e8 a8 f9 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cb40:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012cb43:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb49:	83 ec 08             	sub    $0x8,%esp
f012cb4c:	68 00 fc 0f 00       	push   $0xffc00
f012cb51:	50                   	push   %eax
f012cb52:	e8 35 ab fd ff       	call   f010768c <krealloc>
f012cb57:	83 c4 10             	add    $0x10,%esp
f012cb5a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cb60:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cb66:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cb6b:	77 17                	ja     f012cb84 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cb6d:	83 ec 04             	sub    $0x4,%esp
f012cb70:	68 1c bc 13 f0       	push   $0xf013bc1c
f012cb75:	68 33 10 00 00       	push   $0x1033
f012cb7a:	68 76 a9 13 f0       	push   $0xf013a976
f012cb7f:	e8 22 36 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012cb84:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb8a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cb90:	74 17                	je     f012cba9 <test_krealloc+0x1626>
			panic(
f012cb92:	83 ec 04             	sub    $0x4,%esp
f012cb95:	68 00 bf 13 f0       	push   $0xf013bf00
f012cb9a:	68 36 10 00 00       	push   $0x1036
f012cb9f:	68 76 a9 13 f0       	push   $0xf013a976
f012cba4:	e8 fd 35 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cba9:	e8 3a f9 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cbae:	89 c2                	mov    %eax,%edx
f012cbb0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cbb3:	39 c2                	cmp    %eax,%edx
f012cbb5:	74 17                	je     f012cbce <test_krealloc+0x164b>
			panic(
f012cbb7:	83 ec 04             	sub    $0x4,%esp
f012cbba:	68 6c bf 13 f0       	push   $0xf013bf6c
f012cbbf:	68 39 10 00 00       	push   $0x1039
f012cbc4:	68 76 a9 13 f0       	push   $0xf013a976
f012cbc9:	e8 d8 35 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cbce:	e8 15 f9 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cbd3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012cbd6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cbdc:	83 ec 08             	sub    $0x8,%esp
f012cbdf:	68 00 fc 0f 00       	push   $0xffc00
f012cbe4:	50                   	push   %eax
f012cbe5:	e8 a2 aa fd ff       	call   f010768c <krealloc>
f012cbea:	83 c4 10             	add    $0x10,%esp
f012cbed:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cbf3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cbf9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cbfe:	77 17                	ja     f012cc17 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc00:	83 ec 04             	sub    $0x4,%esp
f012cc03:	68 1c bc 13 f0       	push   $0xf013bc1c
f012cc08:	68 3f 10 00 00       	push   $0x103f
f012cc0d:	68 76 a9 13 f0       	push   $0xf013a976
f012cc12:	e8 8f 35 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012cc17:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cc1d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cc23:	74 17                	je     f012cc3c <test_krealloc+0x16b9>
			panic(
f012cc25:	83 ec 04             	sub    $0x4,%esp
f012cc28:	68 00 bf 13 f0       	push   $0xf013bf00
f012cc2d:	68 42 10 00 00       	push   $0x1042
f012cc32:	68 76 a9 13 f0       	push   $0xf013a976
f012cc37:	e8 6a 35 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cc3c:	e8 a7 f8 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cc41:	89 c2                	mov    %eax,%edx
f012cc43:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc46:	39 c2                	cmp    %eax,%edx
f012cc48:	74 17                	je     f012cc61 <test_krealloc+0x16de>
			panic(
f012cc4a:	83 ec 04             	sub    $0x4,%esp
f012cc4d:	68 6c bf 13 f0       	push   $0xf013bf6c
f012cc52:	68 45 10 00 00       	push   $0x1045
f012cc57:	68 76 a9 13 f0       	push   $0xf013a976
f012cc5c:	e8 45 35 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cc61:	e8 82 f8 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cc66:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012cc69:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cc6f:	83 ec 08             	sub    $0x8,%esp
f012cc72:	68 00 fc 0f 00       	push   $0xffc00
f012cc77:	50                   	push   %eax
f012cc78:	e8 0f aa fd ff       	call   f010768c <krealloc>
f012cc7d:	83 c4 10             	add    $0x10,%esp
f012cc80:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cc86:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cc8c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc91:	77 17                	ja     f012ccaa <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc93:	83 ec 04             	sub    $0x4,%esp
f012cc96:	68 1c bc 13 f0       	push   $0xf013bc1c
f012cc9b:	68 4d 10 00 00       	push   $0x104d
f012cca0:	68 76 a9 13 f0       	push   $0xf013a976
f012cca5:	e8 fc 34 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012ccaa:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ccb0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ccb6:	74 17                	je     f012cccf <test_krealloc+0x174c>
			panic(
f012ccb8:	83 ec 04             	sub    $0x4,%esp
f012ccbb:	68 b0 bf 13 f0       	push   $0xf013bfb0
f012ccc0:	68 50 10 00 00       	push   $0x1050
f012ccc5:	68 76 a9 13 f0       	push   $0xf013a976
f012ccca:	e8 d7 34 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cccf:	e8 14 f8 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ccd4:	89 c2                	mov    %eax,%edx
f012ccd6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ccd9:	39 c2                	cmp    %eax,%edx
f012ccdb:	74 17                	je     f012ccf4 <test_krealloc+0x1771>
			panic(
f012ccdd:	83 ec 04             	sub    $0x4,%esp
f012cce0:	68 6c bf 13 f0       	push   $0xf013bf6c
f012cce5:	68 53 10 00 00       	push   $0x1053
f012ccea:	68 76 a9 13 f0       	push   $0xf013a976
f012ccef:	e8 b2 34 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012ccf4:	83 ec 0c             	sub    $0xc,%esp
f012ccf7:	68 8f b1 13 f0       	push   $0xf013b18f
f012ccfc:	e8 2c 3f fd ff       	call   f0100c2d <cprintf>
f012cd01:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012cd04:	e8 df f7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cd09:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012cd0c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cd12:	83 ec 08             	sub    $0x8,%esp
f012cd15:	68 00 18 10 00       	push   $0x101800
f012cd1a:	50                   	push   %eax
f012cd1b:	e8 6c a9 fd ff       	call   f010768c <krealloc>
f012cd20:	83 c4 10             	add    $0x10,%esp
f012cd23:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cd26:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cd29:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cd2e:	77 17                	ja     f012cd47 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd30:	83 ec 04             	sub    $0x4,%esp
f012cd33:	68 1c bc 13 f0       	push   $0xf013bc1c
f012cd38:	68 5c 10 00 00       	push   $0x105c
f012cd3d:	68 76 a9 13 f0       	push   $0xf013a976
f012cd42:	e8 5f 34 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012cd47:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cd4d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cd50:	74 17                	je     f012cd69 <test_krealloc+0x17e6>
			panic(
f012cd52:	83 ec 04             	sub    $0x4,%esp
f012cd55:	68 10 c0 13 f0       	push   $0xf013c010
f012cd5a:	68 5f 10 00 00       	push   $0x105f
f012cd5f:	68 76 a9 13 f0       	push   $0xf013a976
f012cd64:	e8 3d 34 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012cd69:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cd6c:	e8 77 f7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cd71:	29 c3                	sub    %eax,%ebx
f012cd73:	89 d8                	mov    %ebx,%eax
f012cd75:	83 f8 02             	cmp    $0x2,%eax
f012cd78:	74 17                	je     f012cd91 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012cd7a:	83 ec 04             	sub    $0x4,%esp
f012cd7d:	68 8c c0 13 f0       	push   $0xf013c08c
f012cd82:	68 61 10 00 00       	push   $0x1061
f012cd87:	68 76 a9 13 f0       	push   $0xf013a976
f012cd8c:	e8 15 34 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012cd91:	e8 52 f7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cd96:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012cd99:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cd9f:	83 ec 08             	sub    $0x8,%esp
f012cda2:	68 00 fc 3f 00       	push   $0x3ffc00
f012cda7:	50                   	push   %eax
f012cda8:	e8 df a8 fd ff       	call   f010768c <krealloc>
f012cdad:	83 c4 10             	add    $0x10,%esp
f012cdb0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cdb3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cdb6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cdbb:	77 17                	ja     f012cdd4 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cdbd:	83 ec 04             	sub    $0x4,%esp
f012cdc0:	68 1c bc 13 f0       	push   $0xf013bc1c
f012cdc5:	68 67 10 00 00       	push   $0x1067
f012cdca:	68 76 a9 13 f0       	push   $0xf013a976
f012cdcf:	e8 d2 33 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012cdd4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cdda:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cddd:	74 17                	je     f012cdf6 <test_krealloc+0x1873>
			panic(
f012cddf:	83 ec 04             	sub    $0x4,%esp
f012cde2:	68 10 c0 13 f0       	push   $0xf013c010
f012cde7:	68 6a 10 00 00       	push   $0x106a
f012cdec:	68 76 a9 13 f0       	push   $0xf013a976
f012cdf1:	e8 b0 33 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012cdf6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cdf9:	e8 ea f6 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cdfe:	29 c3                	sub    %eax,%ebx
f012ce00:	89 d8                	mov    %ebx,%eax
f012ce02:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ce07:	74 17                	je     f012ce20 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012ce09:	83 ec 04             	sub    $0x4,%esp
f012ce0c:	68 8c c0 13 f0       	push   $0xf013c08c
f012ce11:	68 6d 10 00 00       	push   $0x106d
f012ce16:	68 76 a9 13 f0       	push   $0xf013a976
f012ce1b:	e8 86 33 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012ce20:	83 ec 0c             	sub    $0xc,%esp
f012ce23:	68 d4 b1 13 f0       	push   $0xf013b1d4
f012ce28:	e8 00 3e fd ff       	call   f0100c2d <cprintf>
f012ce2d:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ce30:	e8 b3 f6 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ce35:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ce38:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ce3e:	83 ec 08             	sub    $0x8,%esp
f012ce41:	68 00 fc 9f 00       	push   $0x9ffc00
f012ce46:	50                   	push   %eax
f012ce47:	e8 40 a8 fd ff       	call   f010768c <krealloc>
f012ce4c:	83 c4 10             	add    $0x10,%esp
f012ce4f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce52:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ce55:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce5a:	77 17                	ja     f012ce73 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce5c:	83 ec 04             	sub    $0x4,%esp
f012ce5f:	68 1c bc 13 f0       	push   $0xf013bc1c
f012ce64:	68 78 10 00 00       	push   $0x1078
f012ce69:	68 76 a9 13 f0       	push   $0xf013a976
f012ce6e:	e8 33 33 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012ce73:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012ce7a:	10 00 00 
f012ce7d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ce83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ce88:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012ce8e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ce94:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce99:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012ce9f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012cea5:	29 d0                	sub    %edx,%eax
f012cea7:	89 c1                	mov    %eax,%ecx
f012cea9:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012ceb0:	10 00 00 
f012ceb3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012ceb8:	0f b6 d0             	movzbl %al,%edx
f012cebb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012cec1:	01 d0                	add    %edx,%eax
f012cec3:	48                   	dec    %eax
f012cec4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012ceca:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ced0:	ba 00 00 00 00       	mov    $0x0,%edx
f012ced5:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012cedb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012cee1:	29 d0                	sub    %edx,%eax
f012cee3:	01 c1                	add    %eax,%ecx
f012cee5:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012ceec:	10 00 00 
f012ceef:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012cef4:	0f b6 c0             	movzbl %al,%eax
f012cef7:	c1 e0 04             	shl    $0x4,%eax
f012cefa:	89 c2                	mov    %eax,%edx
f012cefc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012cf02:	01 d0                	add    %edx,%eax
f012cf04:	48                   	dec    %eax
f012cf05:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012cf0b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012cf11:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf16:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012cf1c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012cf22:	29 d0                	sub    %edx,%eax
f012cf24:	01 c8                	add    %ecx,%eax
f012cf26:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012cf2c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf2f:	39 c2                	cmp    %eax,%edx
f012cf31:	74 18                	je     f012cf4b <test_krealloc+0x19c8>
			panic(
f012cf33:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf36:	50                   	push   %eax
f012cf37:	68 c0 c0 13 f0       	push   $0xf013c0c0
f012cf3c:	68 7c 10 00 00       	push   $0x107c
f012cf41:	68 76 a9 13 f0       	push   $0xf013a976
f012cf46:	e8 5b 32 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012cf4b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cf51:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cf54:	75 17                	jne    f012cf6d <test_krealloc+0x19ea>
			panic(
f012cf56:	83 ec 04             	sub    $0x4,%esp
f012cf59:	68 04 c1 13 f0       	push   $0xf013c104
f012cf5e:	68 7f 10 00 00       	push   $0x107f
f012cf63:	68 76 a9 13 f0       	push   $0xf013a976
f012cf68:	e8 39 32 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012cf6d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf70:	e8 73 f5 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cf75:	29 c3                	sub    %eax,%ebx
f012cf77:	89 d8                	mov    %ebx,%eax
f012cf79:	3d 00 06 00 00       	cmp    $0x600,%eax
f012cf7e:	74 17                	je     f012cf97 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012cf80:	83 ec 04             	sub    $0x4,%esp
f012cf83:	68 8c c0 13 f0       	push   $0xf013c08c
f012cf88:	68 82 10 00 00       	push   $0x1082
f012cf8d:	68 76 a9 13 f0       	push   $0xf013a976
f012cf92:	e8 0f 32 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012cf97:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf9a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012cfa0:	e8 43 f5 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012cfa5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012cfa8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cfae:	83 ec 08             	sub    $0x8,%esp
f012cfb1:	68 00 fc 5f 00       	push   $0x5ffc00
f012cfb6:	50                   	push   %eax
f012cfb7:	e8 d0 a6 fd ff       	call   f010768c <krealloc>
f012cfbc:	83 c4 10             	add    $0x10,%esp
f012cfbf:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfc2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cfc5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfca:	77 17                	ja     f012cfe3 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfcc:	83 ec 04             	sub    $0x4,%esp
f012cfcf:	68 1c bc 13 f0       	push   $0xf013bc1c
f012cfd4:	68 8b 10 00 00       	push   $0x108b
f012cfd9:	68 76 a9 13 f0       	push   $0xf013a976
f012cfde:	e8 c3 31 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[6])
f012cfe3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cfe9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cfec:	74 17                	je     f012d005 <test_krealloc+0x1a82>
			panic(
f012cfee:	83 ec 04             	sub    $0x4,%esp
f012cff1:	68 10 c0 13 f0       	push   $0xf013c010
f012cff6:	68 8e 10 00 00       	push   $0x108e
f012cffb:	68 76 a9 13 f0       	push   $0xf013a976
f012d000:	e8 a1 31 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d005:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d008:	e8 db f4 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d00d:	29 c3                	sub    %eax,%ebx
f012d00f:	89 d8                	mov    %ebx,%eax
f012d011:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d016:	74 17                	je     f012d02f <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d018:	83 ec 04             	sub    $0x4,%esp
f012d01b:	68 8c c0 13 f0       	push   $0xf013c08c
f012d020:	68 91 10 00 00       	push   $0x1091
f012d025:	68 76 a9 13 f0       	push   $0xf013a976
f012d02a:	e8 77 31 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d02f:	e8 b4 f4 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d034:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d037:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d03d:	83 ec 08             	sub    $0x8,%esp
f012d040:	68 00 fc 3f 01       	push   $0x13ffc00
f012d045:	50                   	push   %eax
f012d046:	e8 41 a6 fd ff       	call   f010768c <krealloc>
f012d04b:	83 c4 10             	add    $0x10,%esp
f012d04e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d051:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d054:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d059:	77 17                	ja     f012d072 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d05b:	83 ec 04             	sub    $0x4,%esp
f012d05e:	68 1c bc 13 f0       	push   $0xf013bc1c
f012d063:	68 98 10 00 00       	push   $0x1098
f012d068:	68 76 a9 13 f0       	push   $0xf013a976
f012d06d:	e8 34 31 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012d072:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d078:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d07b:	75 17                	jne    f012d094 <test_krealloc+0x1b11>
			panic(
f012d07d:	83 ec 04             	sub    $0x4,%esp
f012d080:	68 04 c1 13 f0       	push   $0xf013c104
f012d085:	68 9b 10 00 00       	push   $0x109b
f012d08a:	68 76 a9 13 f0       	push   $0xf013a976
f012d08f:	e8 12 31 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d094:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d09b:	10 00 00 
f012d09e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d0a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d0a9:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d0af:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d0b5:	ba 00 00 00 00       	mov    $0x0,%edx
f012d0ba:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d0c0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d0c6:	29 d0                	sub    %edx,%eax
f012d0c8:	89 c1                	mov    %eax,%ecx
f012d0ca:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d0d1:	10 00 00 
f012d0d4:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d0d9:	0f b6 d0             	movzbl %al,%edx
f012d0dc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d0e2:	01 d0                	add    %edx,%eax
f012d0e4:	48                   	dec    %eax
f012d0e5:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d0eb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d0f1:	ba 00 00 00 00       	mov    $0x0,%edx
f012d0f6:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d0fc:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d102:	29 d0                	sub    %edx,%eax
f012d104:	01 c1                	add    %eax,%ecx
f012d106:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d10d:	10 00 00 
f012d110:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d115:	0f b6 c0             	movzbl %al,%eax
f012d118:	c1 e0 04             	shl    $0x4,%eax
f012d11b:	89 c2                	mov    %eax,%edx
f012d11d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d123:	01 d0                	add    %edx,%eax
f012d125:	48                   	dec    %eax
f012d126:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d12c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d132:	ba 00 00 00 00       	mov    $0x0,%edx
f012d137:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d13d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d143:	29 d0                	sub    %edx,%eax
f012d145:	01 c8                	add    %ecx,%eax
f012d147:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d14d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d150:	39 c2                	cmp    %eax,%edx
f012d152:	74 17                	je     f012d16b <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d154:	83 ec 04             	sub    $0x4,%esp
f012d157:	68 88 c1 13 f0       	push   $0xf013c188
f012d15c:	68 9d 10 00 00       	push   $0x109d
f012d161:	68 76 a9 13 f0       	push   $0xf013a976
f012d166:	e8 3b 30 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d16b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d16e:	e8 75 f3 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d173:	29 c3                	sub    %eax,%ebx
f012d175:	89 d8                	mov    %ebx,%eax
f012d177:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d17c:	74 17                	je     f012d195 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d17e:	83 ec 04             	sub    $0x4,%esp
f012d181:	68 8c c0 13 f0       	push   $0xf013c08c
f012d186:	68 a0 10 00 00       	push   $0x10a0
f012d18b:	68 76 a9 13 f0       	push   $0xf013a976
f012d190:	e8 11 30 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012d195:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d198:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d19e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d1a4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d1aa:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d1b1:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d1b4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d1bb:	eb 21                	jmp    f012d1de <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d1bd:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d1c3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d1c6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d1cc:	01 c8                	add    %ecx,%eax
f012d1ce:	8a 00                	mov    (%eax),%al
f012d1d0:	0f be c0             	movsbl %al,%eax
f012d1d3:	01 d0                	add    %edx,%eax
f012d1d5:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d1db:	ff 45 d8             	incl   -0x28(%ebp)
f012d1de:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d1e4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d1e7:	7d d4                	jge    f012d1bd <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d1e9:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d1ef:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d1f5:	42                   	inc    %edx
f012d1f6:	01 d2                	add    %edx,%edx
f012d1f8:	39 d0                	cmp    %edx,%eax
f012d1fa:	74 17                	je     f012d213 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d1fc:	83 ec 04             	sub    $0x4,%esp
f012d1ff:	68 bc c1 13 f0       	push   $0xf013c1bc
f012d204:	68 ae 10 00 00       	push   $0x10ae
f012d209:	68 76 a9 13 f0       	push   $0xf013a976
f012d20e:	e8 93 2f fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d213:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d219:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d21f:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d226:	00 00 00 
		sums[1] = 0;
f012d229:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d230:	00 00 00 
		sums[2] = 0;
f012d233:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d23a:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d23d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d244:	eb 70                	jmp    f012d2b6 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d246:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d24c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d24f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d256:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d25c:	01 c8                	add    %ecx,%eax
f012d25e:	8a 00                	mov    (%eax),%al
f012d260:	0f be c0             	movsbl %al,%eax
f012d263:	01 d0                	add    %edx,%eax
f012d265:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d26b:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d271:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d274:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d27b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d281:	01 c8                	add    %ecx,%eax
f012d283:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d287:	98                   	cwtl   
f012d288:	01 d0                	add    %edx,%eax
f012d28a:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012d290:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d296:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d299:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d2a0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d2a6:	01 c8                	add    %ecx,%eax
f012d2a8:	8b 40 04             	mov    0x4(%eax),%eax
f012d2ab:	01 d0                	add    %edx,%eax
f012d2ad:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d2b3:	ff 45 d8             	incl   -0x28(%ebp)
f012d2b6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d2bc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d2bf:	7d 85                	jge    f012d246 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d2c1:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012d2c7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d2cd:	8d 50 01             	lea    0x1(%eax),%edx
f012d2d0:	89 d0                	mov    %edx,%eax
f012d2d2:	01 c0                	add    %eax,%eax
f012d2d4:	01 d0                	add    %edx,%eax
f012d2d6:	01 c0                	add    %eax,%eax
f012d2d8:	01 d0                	add    %edx,%eax
f012d2da:	39 c1                	cmp    %eax,%ecx
f012d2dc:	75 3a                	jne    f012d318 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d2de:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012d2e4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d2ea:	8d 50 01             	lea    0x1(%eax),%edx
f012d2ed:	89 d0                	mov    %edx,%eax
f012d2ef:	01 c0                	add    %eax,%eax
f012d2f1:	01 d0                	add    %edx,%eax
f012d2f3:	01 c0                	add    %eax,%eax
f012d2f5:	01 d0                	add    %edx,%eax
f012d2f7:	39 c1                	cmp    %eax,%ecx
f012d2f9:	75 1d                	jne    f012d318 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d2fb:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012d301:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d307:	8d 50 01             	lea    0x1(%eax),%edx
f012d30a:	89 d0                	mov    %edx,%eax
f012d30c:	01 c0                	add    %eax,%eax
f012d30e:	01 d0                	add    %edx,%eax
f012d310:	01 c0                	add    %eax,%eax
f012d312:	01 d0                	add    %edx,%eax
f012d314:	39 c1                	cmp    %eax,%ecx
f012d316:	74 17                	je     f012d32f <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012d318:	83 ec 04             	sub    $0x4,%esp
f012d31b:	68 bc c1 13 f0       	push   $0xf013c1bc
f012d320:	68 c0 10 00 00       	push   $0x10c0
f012d325:	68 76 a9 13 f0       	push   $0xf013a976
f012d32a:	e8 77 2e fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d32f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d335:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012d33b:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d342:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d345:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d34c:	eb 24                	jmp    f012d372 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012d34e:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d354:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d357:	01 c0                	add    %eax,%eax
f012d359:	89 c1                	mov    %eax,%ecx
f012d35b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d361:	01 c8                	add    %ecx,%eax
f012d363:	66 8b 00             	mov    (%eax),%ax
f012d366:	98                   	cwtl   
f012d367:	01 d0                	add    %edx,%eax
f012d369:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d36f:	ff 45 d8             	incl   -0x28(%ebp)
f012d372:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d378:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d37b:	7d d1                	jge    f012d34e <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d37d:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d383:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d389:	8d 48 01             	lea    0x1(%eax),%ecx
f012d38c:	89 c8                	mov    %ecx,%eax
f012d38e:	c1 e0 02             	shl    $0x2,%eax
f012d391:	01 c8                	add    %ecx,%eax
f012d393:	39 c2                	cmp    %eax,%edx
f012d395:	74 17                	je     f012d3ae <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012d397:	83 ec 04             	sub    $0x4,%esp
f012d39a:	68 bc c1 13 f0       	push   $0xf013c1bc
f012d39f:	68 ca 10 00 00       	push   $0x10ca
f012d3a4:	68 76 a9 13 f0       	push   $0xf013a976
f012d3a9:	e8 f8 2d fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d3ae:	e8 35 f1 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d3b3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d3b6:	e8 d1 68 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d3bb:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d3c1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d3c7:	83 ec 08             	sub    $0x8,%esp
f012d3ca:	6a 00                	push   $0x0
f012d3cc:	50                   	push   %eax
f012d3cd:	e8 ba a2 fd ff       	call   f010768c <krealloc>
f012d3d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d3d5:	e8 b2 68 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d3da:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d3e0:	74 17                	je     f012d3f9 <test_krealloc+0x1e76>
			panic(
f012d3e2:	83 ec 04             	sub    $0x4,%esp
f012d3e5:	68 90 a9 13 f0       	push   $0xf013a990
f012d3ea:	68 d2 10 00 00       	push   $0x10d2
f012d3ef:	68 76 a9 13 f0       	push   $0xf013a976
f012d3f4:	e8 ad 2d fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d3f9:	e8 ea f0 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d3fe:	89 c2                	mov    %eax,%edx
f012d400:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d403:	29 c2                	sub    %eax,%edx
f012d405:	89 d0                	mov    %edx,%eax
f012d407:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d40c:	74 17                	je     f012d425 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012d40e:	83 ec 04             	sub    $0x4,%esp
f012d411:	68 4c be 13 f0       	push   $0xf013be4c
f012d416:	68 d4 10 00 00       	push   $0x10d4
f012d41b:	68 76 a9 13 f0       	push   $0xf013a976
f012d420:	e8 81 2d fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d425:	e8 be f0 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d42a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d42d:	e8 5a 68 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d432:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d438:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d43e:	83 ec 0c             	sub    $0xc,%esp
f012d441:	50                   	push   %eax
f012d442:	e8 97 a1 fd ff       	call   f01075de <kfree>
f012d447:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d44a:	e8 3d 68 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d44f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d455:	74 17                	je     f012d46e <test_krealloc+0x1eeb>
			panic(
f012d457:	83 ec 04             	sub    $0x4,%esp
f012d45a:	68 90 a9 13 f0       	push   $0xf013a990
f012d45f:	68 dc 10 00 00       	push   $0x10dc
f012d464:	68 76 a9 13 f0       	push   $0xf013a976
f012d469:	e8 38 2d fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d46e:	e8 75 f0 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d473:	89 c2                	mov    %eax,%edx
f012d475:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d478:	29 c2                	sub    %eax,%edx
f012d47a:	89 d0                	mov    %edx,%eax
f012d47c:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d481:	74 17                	je     f012d49a <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d483:	83 ec 04             	sub    $0x4,%esp
f012d486:	68 4c be 13 f0       	push   $0xf013be4c
f012d48b:	68 de 10 00 00       	push   $0x10de
f012d490:	68 76 a9 13 f0       	push   $0xf013a976
f012d495:	e8 0c 2d fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d49a:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d4a1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d4a8:	eb 48                	jmp    f012d4f2 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d4aa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d4ad:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012d4b2:	83 ec 04             	sub    $0x4,%esp
f012d4b5:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d4bb:	51                   	push   %ecx
f012d4bc:	52                   	push   %edx
f012d4bd:	50                   	push   %eax
f012d4be:	e8 a6 94 fd ff       	call   f0106969 <get_page_table>
f012d4c3:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d4c6:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d4cc:	85 c0                	test   %eax,%eax
f012d4ce:	75 17                	jne    f012d4e7 <test_krealloc+0x1f64>
					panic(
f012d4d0:	83 ec 04             	sub    $0x4,%esp
f012d4d3:	68 78 b2 13 f0       	push   $0xf013b278
f012d4d8:	68 eb 10 00 00       	push   $0x10eb
f012d4dd:	68 76 a9 13 f0       	push   $0xf013a976
f012d4e2:	e8 bf 2c fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d4e7:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d4ee:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d4f2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d4f6:	78 b2                	js     f012d4aa <test_krealloc+0x1f27>
f012d4f8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d4fc:	7f 09                	jg     f012d507 <test_krealloc+0x1f84>
f012d4fe:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d505:	76 a3                	jbe    f012d4aa <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d507:	83 ec 0c             	sub    $0xc,%esp
f012d50a:	68 5a ab 13 f0       	push   $0xf013ab5a
f012d50f:	e8 19 37 fd ff       	call   f0100c2d <cprintf>
f012d514:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d517:	83 ec 0c             	sub    $0xc,%esp
f012d51a:	68 e8 c1 13 f0       	push   $0xf013c1e8
f012d51f:	e8 09 37 fd ff       	call   f0100c2d <cprintf>
f012d524:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d527:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d52c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d52f:	5b                   	pop    %ebx
f012d530:	5f                   	pop    %edi
f012d531:	5d                   	pop    %ebp
f012d532:	c3                   	ret    

f012d533 <test_krealloc_BF>:


int test_krealloc_BF() {
f012d533:	55                   	push   %ebp
f012d534:	89 e5                	mov    %esp,%ebp
f012d536:	57                   	push   %edi
f012d537:	53                   	push   %ebx
f012d538:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d53e:	83 ec 0c             	sub    $0xc,%esp
f012d541:	68 b8 a8 13 f0       	push   $0xf013a8b8
f012d546:	e8 e2 36 fd ff       	call   f0100c2d <cprintf>
f012d54b:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d54e:	83 ec 0c             	sub    $0xc,%esp
f012d551:	68 e8 a8 13 f0       	push   $0xf013a8e8
f012d556:	e8 d2 36 fd ff       	call   f0100c2d <cprintf>
f012d55b:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d55e:	83 ec 0c             	sub    $0xc,%esp
f012d561:	68 b8 a8 13 f0       	push   $0xf013a8b8
f012d566:	e8 c2 36 fd ff       	call   f0100c2d <cprintf>
f012d56b:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d56e:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d572:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d576:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d57c:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d582:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d589:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d590:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d596:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d59b:	b8 00 00 00 00       	mov    $0x0,%eax
f012d5a0:	89 d7                	mov    %edx,%edi
f012d5a2:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d5a4:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012d5ab:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012d5b1:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d5b6:	b8 00 00 00 00       	mov    $0x0,%eax
f012d5bb:	89 d7                	mov    %edx,%edi
f012d5bd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012d5bf:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012d5c5:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d5ca:	b8 00 00 00 00       	mov    $0x0,%eax
f012d5cf:	89 d7                	mov    %edx,%edi
f012d5d1:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d5d3:	e8 10 ef fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d5d8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012d5db:	83 ec 08             	sub    $0x8,%esp
f012d5de:	68 00 fc 0f 00       	push   $0xffc00
f012d5e3:	6a 00                	push   $0x0
f012d5e5:	e8 a2 a0 fd ff       	call   f010768c <krealloc>
f012d5ea:	83 c4 10             	add    $0x10,%esp
f012d5ed:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012d5f3:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d5f9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d5fe:	77 17                	ja     f012d617 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d600:	83 ec 04             	sub    $0x4,%esp
f012d603:	68 1c bc 13 f0       	push   $0xf013bc1c
f012d608:	68 1a 11 00 00       	push   $0x111a
f012d60d:	68 76 a9 13 f0       	push   $0xf013a976
f012d612:	e8 8f 2b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012d617:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d61d:	89 c1                	mov    %eax,%ecx
f012d61f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012d626:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012d629:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d62e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012d631:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d634:	ba 00 00 00 00       	mov    $0x0,%edx
f012d639:	f7 75 b4             	divl   -0x4c(%ebp)
f012d63c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d63f:	29 d0                	sub    %edx,%eax
f012d641:	89 c3                	mov    %eax,%ebx
f012d643:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012d64a:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d64f:	0f b6 d0             	movzbl %al,%edx
f012d652:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012d655:	01 d0                	add    %edx,%eax
f012d657:	48                   	dec    %eax
f012d658:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012d65b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d65e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d663:	f7 75 ac             	divl   -0x54(%ebp)
f012d666:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d669:	29 d0                	sub    %edx,%eax
f012d66b:	01 c3                	add    %eax,%ebx
f012d66d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012d674:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d679:	0f b6 c0             	movzbl %al,%eax
f012d67c:	c1 e0 04             	shl    $0x4,%eax
f012d67f:	89 c2                	mov    %eax,%edx
f012d681:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012d684:	01 d0                	add    %edx,%eax
f012d686:	48                   	dec    %eax
f012d687:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012d68a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d68d:	ba 00 00 00 00       	mov    $0x0,%edx
f012d692:	f7 75 a4             	divl   -0x5c(%ebp)
f012d695:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d698:	29 d0                	sub    %edx,%eax
f012d69a:	01 d8                	add    %ebx,%eax
f012d69c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012d6a1:	39 c1                	cmp    %eax,%ecx
f012d6a3:	74 17                	je     f012d6bc <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012d6a5:	83 ec 04             	sub    $0x4,%esp
f012d6a8:	68 58 bc 13 f0       	push   $0xf013bc58
f012d6ad:	68 1c 11 00 00       	push   $0x111c
f012d6b2:	68 76 a9 13 f0       	push   $0xf013a976
f012d6b7:	e8 ea 2a fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d6bc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d6bf:	e8 24 ee fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d6c4:	29 c3                	sub    %eax,%ebx
f012d6c6:	89 d8                	mov    %ebx,%eax
f012d6c8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d6cd:	74 17                	je     f012d6e6 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012d6cf:	83 ec 04             	sub    $0x4,%esp
f012d6d2:	68 8a bc 13 f0       	push   $0xf013bc8a
f012d6d7:	68 1f 11 00 00       	push   $0x111f
f012d6dc:	68 76 a9 13 f0       	push   $0xf013a976
f012d6e1:	e8 c0 2a fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d6e6:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012d6ed:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d6f0:	e8 f3 ed fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d6f5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012d6f8:	83 ec 08             	sub    $0x8,%esp
f012d6fb:	68 00 fc 0f 00       	push   $0xffc00
f012d700:	6a 00                	push   $0x0
f012d702:	e8 85 9f fd ff       	call   f010768c <krealloc>
f012d707:	83 c4 10             	add    $0x10,%esp
f012d70a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012d710:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d716:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012d71b:	77 17                	ja     f012d734 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d71d:	83 ec 04             	sub    $0x4,%esp
f012d720:	68 1c bc 13 f0       	push   $0xf013bc1c
f012d725:	68 27 11 00 00       	push   $0x1127
f012d72a:	68 76 a9 13 f0       	push   $0xf013a976
f012d72f:	e8 72 2a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012d734:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d73a:	89 c1                	mov    %eax,%ecx
f012d73c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012d743:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012d746:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d74b:	89 45 98             	mov    %eax,-0x68(%ebp)
f012d74e:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d751:	ba 00 00 00 00       	mov    $0x0,%edx
f012d756:	f7 75 9c             	divl   -0x64(%ebp)
f012d759:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d75c:	29 d0                	sub    %edx,%eax
f012d75e:	89 c3                	mov    %eax,%ebx
f012d760:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012d767:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d76c:	0f b6 d0             	movzbl %al,%edx
f012d76f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012d772:	01 d0                	add    %edx,%eax
f012d774:	48                   	dec    %eax
f012d775:	89 45 90             	mov    %eax,-0x70(%ebp)
f012d778:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d77b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d780:	f7 75 94             	divl   -0x6c(%ebp)
f012d783:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d786:	29 d0                	sub    %edx,%eax
f012d788:	01 c3                	add    %eax,%ebx
f012d78a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012d791:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d796:	0f b6 c0             	movzbl %al,%eax
f012d799:	c1 e0 04             	shl    $0x4,%eax
f012d79c:	89 c2                	mov    %eax,%edx
f012d79e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012d7a1:	01 d0                	add    %edx,%eax
f012d7a3:	48                   	dec    %eax
f012d7a4:	89 45 88             	mov    %eax,-0x78(%ebp)
f012d7a7:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d7aa:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7af:	f7 75 8c             	divl   -0x74(%ebp)
f012d7b2:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d7b5:	29 d0                	sub    %edx,%eax
f012d7b7:	01 d8                	add    %ebx,%eax
f012d7b9:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012d7be:	39 c1                	cmp    %eax,%ecx
f012d7c0:	74 17                	je     f012d7d9 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012d7c2:	83 ec 04             	sub    $0x4,%esp
f012d7c5:	68 58 bc 13 f0       	push   $0xf013bc58
f012d7ca:	68 29 11 00 00       	push   $0x1129
f012d7cf:	68 76 a9 13 f0       	push   $0xf013a976
f012d7d4:	e8 cd 29 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d7d9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d7dc:	e8 07 ed fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d7e1:	29 c3                	sub    %eax,%ebx
f012d7e3:	89 d8                	mov    %ebx,%eax
f012d7e5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d7ea:	74 17                	je     f012d803 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012d7ec:	83 ec 04             	sub    $0x4,%esp
f012d7ef:	68 8a bc 13 f0       	push   $0xf013bc8a
f012d7f4:	68 2b 11 00 00       	push   $0x112b
f012d7f9:	68 76 a9 13 f0       	push   $0xf013a976
f012d7fe:	e8 a3 29 fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d803:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012d80a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d80d:	e8 d6 ec fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d812:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012d815:	83 ec 08             	sub    $0x8,%esp
f012d818:	68 00 fc 0f 00       	push   $0xffc00
f012d81d:	6a 00                	push   $0x0
f012d81f:	e8 68 9e fd ff       	call   f010768c <krealloc>
f012d824:	83 c4 10             	add    $0x10,%esp
f012d827:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012d82d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d833:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012d838:	77 17                	ja     f012d851 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d83a:	83 ec 04             	sub    $0x4,%esp
f012d83d:	68 1c bc 13 f0       	push   $0xf013bc1c
f012d842:	68 33 11 00 00       	push   $0x1133
f012d847:	68 76 a9 13 f0       	push   $0xf013a976
f012d84c:	e8 55 29 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012d851:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d857:	89 c1                	mov    %eax,%ecx
f012d859:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012d860:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012d863:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d868:	89 45 80             	mov    %eax,-0x80(%ebp)
f012d86b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d86e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d873:	f7 75 84             	divl   -0x7c(%ebp)
f012d876:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d879:	29 d0                	sub    %edx,%eax
f012d87b:	89 c3                	mov    %eax,%ebx
f012d87d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012d884:	10 00 00 
f012d887:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d88c:	0f b6 d0             	movzbl %al,%edx
f012d88f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012d895:	01 d0                	add    %edx,%eax
f012d897:	48                   	dec    %eax
f012d898:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012d89e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d8a4:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8a9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012d8af:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d8b5:	29 d0                	sub    %edx,%eax
f012d8b7:	01 c3                	add    %eax,%ebx
f012d8b9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012d8c0:	10 00 00 
f012d8c3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d8c8:	0f b6 c0             	movzbl %al,%eax
f012d8cb:	c1 e0 04             	shl    $0x4,%eax
f012d8ce:	89 c2                	mov    %eax,%edx
f012d8d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012d8d6:	01 d0                	add    %edx,%eax
f012d8d8:	48                   	dec    %eax
f012d8d9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012d8df:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d8e5:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8ea:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012d8f0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d8f6:	29 d0                	sub    %edx,%eax
f012d8f8:	01 d8                	add    %ebx,%eax
f012d8fa:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012d8ff:	39 c1                	cmp    %eax,%ecx
f012d901:	74 17                	je     f012d91a <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012d903:	83 ec 04             	sub    $0x4,%esp
f012d906:	68 58 bc 13 f0       	push   $0xf013bc58
f012d90b:	68 35 11 00 00       	push   $0x1135
f012d910:	68 76 a9 13 f0       	push   $0xf013a976
f012d915:	e8 8c 28 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d91a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d91d:	e8 c6 eb fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d922:	29 c3                	sub    %eax,%ebx
f012d924:	89 d8                	mov    %ebx,%eax
f012d926:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d92b:	74 17                	je     f012d944 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012d92d:	83 ec 04             	sub    $0x4,%esp
f012d930:	68 8a bc 13 f0       	push   $0xf013bc8a
f012d935:	68 37 11 00 00       	push   $0x1137
f012d93a:	68 76 a9 13 f0       	push   $0xf013a976
f012d93f:	e8 62 28 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d944:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012d94b:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d94e:	e8 95 eb fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012d953:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012d956:	83 ec 08             	sub    $0x8,%esp
f012d959:	68 00 fc 0f 00       	push   $0xffc00
f012d95e:	6a 00                	push   $0x0
f012d960:	e8 27 9d fd ff       	call   f010768c <krealloc>
f012d965:	83 c4 10             	add    $0x10,%esp
f012d968:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012d96e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d974:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012d979:	77 17                	ja     f012d992 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d97b:	83 ec 04             	sub    $0x4,%esp
f012d97e:	68 1c bc 13 f0       	push   $0xf013bc1c
f012d983:	68 3e 11 00 00       	push   $0x113e
f012d988:	68 76 a9 13 f0       	push   $0xf013a976
f012d98d:	e8 14 28 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012d992:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d998:	89 c1                	mov    %eax,%ecx
f012d99a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012d9a1:	10 00 00 
f012d9a4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012d9aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d9af:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012d9b5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d9bb:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9c0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012d9c6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d9cc:	29 d0                	sub    %edx,%eax
f012d9ce:	89 c3                	mov    %eax,%ebx
f012d9d0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012d9d7:	10 00 00 
f012d9da:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012d9df:	0f b6 d0             	movzbl %al,%edx
f012d9e2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012d9e8:	01 d0                	add    %edx,%eax
f012d9ea:	48                   	dec    %eax
f012d9eb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012d9f1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d9f7:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9fc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012da02:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012da08:	29 d0                	sub    %edx,%eax
f012da0a:	01 c3                	add    %eax,%ebx
f012da0c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012da13:	10 00 00 
f012da16:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012da1b:	0f b6 c0             	movzbl %al,%eax
f012da1e:	c1 e0 04             	shl    $0x4,%eax
f012da21:	89 c2                	mov    %eax,%edx
f012da23:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012da29:	01 d0                	add    %edx,%eax
f012da2b:	48                   	dec    %eax
f012da2c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012da32:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012da38:	ba 00 00 00 00       	mov    $0x0,%edx
f012da3d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012da43:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012da49:	29 d0                	sub    %edx,%eax
f012da4b:	01 d8                	add    %ebx,%eax
f012da4d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012da52:	39 c1                	cmp    %eax,%ecx
f012da54:	74 17                	je     f012da6d <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012da56:	83 ec 04             	sub    $0x4,%esp
f012da59:	68 58 bc 13 f0       	push   $0xf013bc58
f012da5e:	68 40 11 00 00       	push   $0x1140
f012da63:	68 76 a9 13 f0       	push   $0xf013a976
f012da68:	e8 39 27 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012da6d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012da70:	e8 73 ea fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012da75:	29 c3                	sub    %eax,%ebx
f012da77:	89 d8                	mov    %ebx,%eax
f012da79:	3d 00 01 00 00       	cmp    $0x100,%eax
f012da7e:	74 17                	je     f012da97 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012da80:	83 ec 04             	sub    $0x4,%esp
f012da83:	68 8a bc 13 f0       	push   $0xf013bc8a
f012da88:	68 42 11 00 00       	push   $0x1142
f012da8d:	68 76 a9 13 f0       	push   $0xf013a976
f012da92:	e8 0f 27 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012da97:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012da9e:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012daa1:	e8 42 ea fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012daa6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012daa9:	83 ec 08             	sub    $0x8,%esp
f012daac:	68 00 fc 1f 00       	push   $0x1ffc00
f012dab1:	6a 00                	push   $0x0
f012dab3:	e8 d4 9b fd ff       	call   f010768c <krealloc>
f012dab8:	83 c4 10             	add    $0x10,%esp
f012dabb:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012dac1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dac7:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012dacc:	77 17                	ja     f012dae5 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dace:	83 ec 04             	sub    $0x4,%esp
f012dad1:	68 1c bc 13 f0       	push   $0xf013bc1c
f012dad6:	68 49 11 00 00       	push   $0x1149
f012dadb:	68 76 a9 13 f0       	push   $0xf013a976
f012dae0:	e8 c1 26 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012dae5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012daeb:	89 c1                	mov    %eax,%ecx
f012daed:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012daf4:	10 00 00 
f012daf7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012dafd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012db02:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012db08:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012db0e:	ba 00 00 00 00       	mov    $0x0,%edx
f012db13:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012db19:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012db1f:	29 d0                	sub    %edx,%eax
f012db21:	89 c3                	mov    %eax,%ebx
f012db23:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012db2a:	10 00 00 
f012db2d:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012db32:	0f b6 d0             	movzbl %al,%edx
f012db35:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012db3b:	01 d0                	add    %edx,%eax
f012db3d:	48                   	dec    %eax
f012db3e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012db44:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012db4a:	ba 00 00 00 00       	mov    $0x0,%edx
f012db4f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012db55:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012db5b:	29 d0                	sub    %edx,%eax
f012db5d:	01 c3                	add    %eax,%ebx
f012db5f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012db66:	10 00 00 
f012db69:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012db6e:	0f b6 c0             	movzbl %al,%eax
f012db71:	c1 e0 04             	shl    $0x4,%eax
f012db74:	89 c2                	mov    %eax,%edx
f012db76:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012db7c:	01 d0                	add    %edx,%eax
f012db7e:	48                   	dec    %eax
f012db7f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012db85:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012db8b:	ba 00 00 00 00       	mov    $0x0,%edx
f012db90:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012db96:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012db9c:	29 d0                	sub    %edx,%eax
f012db9e:	01 d8                	add    %ebx,%eax
f012dba0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012dba5:	39 c1                	cmp    %eax,%ecx
f012dba7:	74 17                	je     f012dbc0 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012dba9:	83 ec 04             	sub    $0x4,%esp
f012dbac:	68 58 bc 13 f0       	push   $0xf013bc58
f012dbb1:	68 4b 11 00 00       	push   $0x114b
f012dbb6:	68 76 a9 13 f0       	push   $0xf013a976
f012dbbb:	e8 e6 25 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012dbc0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dbc3:	e8 20 e9 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012dbc8:	29 c3                	sub    %eax,%ebx
f012dbca:	89 d8                	mov    %ebx,%eax
f012dbcc:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dbd1:	74 17                	je     f012dbea <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012dbd3:	83 ec 04             	sub    $0x4,%esp
f012dbd6:	68 8a bc 13 f0       	push   $0xf013bc8a
f012dbdb:	68 4d 11 00 00       	push   $0x114d
f012dbe0:	68 76 a9 13 f0       	push   $0xf013a976
f012dbe5:	e8 bc 25 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012dbea:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012dbf1:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012dbf4:	e8 ef e8 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012dbf9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012dbfc:	83 ec 08             	sub    $0x8,%esp
f012dbff:	68 00 fc 1f 00       	push   $0x1ffc00
f012dc04:	6a 00                	push   $0x0
f012dc06:	e8 81 9a fd ff       	call   f010768c <krealloc>
f012dc0b:	83 c4 10             	add    $0x10,%esp
f012dc0e:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012dc14:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012dc1a:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012dc1f:	77 17                	ja     f012dc38 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc21:	83 ec 04             	sub    $0x4,%esp
f012dc24:	68 1c bc 13 f0       	push   $0xf013bc1c
f012dc29:	68 54 11 00 00       	push   $0x1154
f012dc2e:	68 76 a9 13 f0       	push   $0xf013a976
f012dc33:	e8 6e 25 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012dc38:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012dc3e:	89 c1                	mov    %eax,%ecx
f012dc40:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012dc47:	10 00 00 
f012dc4a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012dc50:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dc55:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012dc5b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012dc61:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc66:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012dc6c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012dc72:	29 d0                	sub    %edx,%eax
f012dc74:	89 c3                	mov    %eax,%ebx
f012dc76:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012dc7d:	10 00 00 
f012dc80:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012dc85:	0f b6 d0             	movzbl %al,%edx
f012dc88:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012dc8e:	01 d0                	add    %edx,%eax
f012dc90:	48                   	dec    %eax
f012dc91:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012dc97:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012dc9d:	ba 00 00 00 00       	mov    $0x0,%edx
f012dca2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012dca8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012dcae:	29 d0                	sub    %edx,%eax
f012dcb0:	01 c3                	add    %eax,%ebx
f012dcb2:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012dcb9:	10 00 00 
f012dcbc:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012dcc1:	0f b6 c0             	movzbl %al,%eax
f012dcc4:	c1 e0 04             	shl    $0x4,%eax
f012dcc7:	89 c2                	mov    %eax,%edx
f012dcc9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012dccf:	01 d0                	add    %edx,%eax
f012dcd1:	48                   	dec    %eax
f012dcd2:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012dcd8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012dcde:	ba 00 00 00 00       	mov    $0x0,%edx
f012dce3:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012dce9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012dcef:	29 d0                	sub    %edx,%eax
f012dcf1:	01 d8                	add    %ebx,%eax
f012dcf3:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012dcf8:	39 c1                	cmp    %eax,%ecx
f012dcfa:	74 17                	je     f012dd13 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012dcfc:	83 ec 04             	sub    $0x4,%esp
f012dcff:	68 58 bc 13 f0       	push   $0xf013bc58
f012dd04:	68 56 11 00 00       	push   $0x1156
f012dd09:	68 76 a9 13 f0       	push   $0xf013a976
f012dd0e:	e8 93 24 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012dd13:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd16:	e8 cd e7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012dd1b:	29 c3                	sub    %eax,%ebx
f012dd1d:	89 d8                	mov    %ebx,%eax
f012dd1f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dd24:	74 17                	je     f012dd3d <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012dd26:	83 ec 04             	sub    $0x4,%esp
f012dd29:	68 8a bc 13 f0       	push   $0xf013bc8a
f012dd2e:	68 58 11 00 00       	push   $0x1158
f012dd33:	68 76 a9 13 f0       	push   $0xf013a976
f012dd38:	e8 69 24 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012dd3d:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012dd44:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012dd47:	e8 9c e7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012dd4c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012dd4f:	83 ec 08             	sub    $0x8,%esp
f012dd52:	68 00 fc 2f 00       	push   $0x2ffc00
f012dd57:	6a 00                	push   $0x0
f012dd59:	e8 2e 99 fd ff       	call   f010768c <krealloc>
f012dd5e:	83 c4 10             	add    $0x10,%esp
f012dd61:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012dd67:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dd6d:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012dd72:	77 17                	ja     f012dd8b <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dd74:	83 ec 04             	sub    $0x4,%esp
f012dd77:	68 1c bc 13 f0       	push   $0xf013bc1c
f012dd7c:	68 5f 11 00 00       	push   $0x115f
f012dd81:	68 76 a9 13 f0       	push   $0xf013a976
f012dd86:	e8 1b 24 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012dd8b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dd91:	89 c1                	mov    %eax,%ecx
f012dd93:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012dd9a:	10 00 00 
f012dd9d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012dda3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dda8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012ddae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ddb4:	ba 00 00 00 00       	mov    $0x0,%edx
f012ddb9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012ddbf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ddc5:	29 d0                	sub    %edx,%eax
f012ddc7:	89 c3                	mov    %eax,%ebx
f012ddc9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ddd0:	10 00 00 
f012ddd3:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012ddd8:	0f b6 d0             	movzbl %al,%edx
f012dddb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012dde1:	01 d0                	add    %edx,%eax
f012dde3:	48                   	dec    %eax
f012dde4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ddea:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ddf0:	ba 00 00 00 00       	mov    $0x0,%edx
f012ddf5:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ddfb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012de01:	29 d0                	sub    %edx,%eax
f012de03:	01 c3                	add    %eax,%ebx
f012de05:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012de0c:	10 00 00 
f012de0f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012de14:	0f b6 c0             	movzbl %al,%eax
f012de17:	c1 e0 04             	shl    $0x4,%eax
f012de1a:	89 c2                	mov    %eax,%edx
f012de1c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012de22:	01 d0                	add    %edx,%eax
f012de24:	48                   	dec    %eax
f012de25:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012de2b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012de31:	ba 00 00 00 00       	mov    $0x0,%edx
f012de36:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012de3c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012de42:	29 d0                	sub    %edx,%eax
f012de44:	01 d8                	add    %ebx,%eax
f012de46:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012de4b:	39 c1                	cmp    %eax,%ecx
f012de4d:	74 17                	je     f012de66 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012de4f:	83 ec 04             	sub    $0x4,%esp
f012de52:	68 58 bc 13 f0       	push   $0xf013bc58
f012de57:	68 61 11 00 00       	push   $0x1161
f012de5c:	68 76 a9 13 f0       	push   $0xf013a976
f012de61:	e8 40 23 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012de66:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012de69:	e8 7a e6 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012de6e:	29 c3                	sub    %eax,%ebx
f012de70:	89 d8                	mov    %ebx,%eax
f012de72:	3d 00 03 00 00       	cmp    $0x300,%eax
f012de77:	74 17                	je     f012de90 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012de79:	83 ec 04             	sub    $0x4,%esp
f012de7c:	68 c0 ad 13 f0       	push   $0xf013adc0
f012de81:	68 63 11 00 00       	push   $0x1163
f012de86:	68 76 a9 13 f0       	push   $0xf013a976
f012de8b:	e8 16 23 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012de90:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012de97:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012de9a:	e8 49 e6 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012de9f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012dea2:	83 ec 08             	sub    $0x8,%esp
f012dea5:	68 00 fc 2f 00       	push   $0x2ffc00
f012deaa:	6a 00                	push   $0x0
f012deac:	e8 db 97 fd ff       	call   f010768c <krealloc>
f012deb1:	83 c4 10             	add    $0x10,%esp
f012deb4:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012deba:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dec0:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012dec5:	77 17                	ja     f012dede <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dec7:	83 ec 04             	sub    $0x4,%esp
f012deca:	68 1c bc 13 f0       	push   $0xf013bc1c
f012decf:	68 6a 11 00 00       	push   $0x116a
f012ded4:	68 76 a9 13 f0       	push   $0xf013a976
f012ded9:	e8 c8 22 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012dede:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dee4:	89 c1                	mov    %eax,%ecx
f012dee6:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012deed:	10 00 00 
f012def0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012def6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012defb:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012df01:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012df07:	ba 00 00 00 00       	mov    $0x0,%edx
f012df0c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012df12:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012df18:	29 d0                	sub    %edx,%eax
f012df1a:	89 c3                	mov    %eax,%ebx
f012df1c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012df23:	10 00 00 
f012df26:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012df2b:	0f b6 d0             	movzbl %al,%edx
f012df2e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012df34:	01 d0                	add    %edx,%eax
f012df36:	48                   	dec    %eax
f012df37:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012df3d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012df43:	ba 00 00 00 00       	mov    $0x0,%edx
f012df48:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012df4e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012df54:	29 d0                	sub    %edx,%eax
f012df56:	01 c3                	add    %eax,%ebx
f012df58:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012df5f:	10 00 00 
f012df62:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012df67:	0f b6 c0             	movzbl %al,%eax
f012df6a:	c1 e0 04             	shl    $0x4,%eax
f012df6d:	89 c2                	mov    %eax,%edx
f012df6f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012df75:	01 d0                	add    %edx,%eax
f012df77:	48                   	dec    %eax
f012df78:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012df7e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012df84:	ba 00 00 00 00       	mov    $0x0,%edx
f012df89:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012df8f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012df95:	29 d0                	sub    %edx,%eax
f012df97:	01 d8                	add    %ebx,%eax
f012df99:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012df9e:	39 c1                	cmp    %eax,%ecx
f012dfa0:	74 17                	je     f012dfb9 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012dfa2:	83 ec 04             	sub    $0x4,%esp
f012dfa5:	68 58 bc 13 f0       	push   $0xf013bc58
f012dfaa:	68 6c 11 00 00       	push   $0x116c
f012dfaf:	68 76 a9 13 f0       	push   $0xf013a976
f012dfb4:	e8 ed 21 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012dfb9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dfbc:	e8 27 e5 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012dfc1:	29 c3                	sub    %eax,%ebx
f012dfc3:	89 d8                	mov    %ebx,%eax
f012dfc5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dfca:	74 17                	je     f012dfe3 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012dfcc:	83 ec 04             	sub    $0x4,%esp
f012dfcf:	68 8a bc 13 f0       	push   $0xf013bc8a
f012dfd4:	68 6e 11 00 00       	push   $0x116e
f012dfd9:	68 76 a9 13 f0       	push   $0xf013a976
f012dfde:	e8 c3 21 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012dfe3:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012dfea:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012dfed:	e8 f6 e4 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012dff2:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012dff5:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012dffc:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012dfff:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e005:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e00b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e011:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e014:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e016:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e01c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e022:	01 c2                	add    %eax,%edx
f012e024:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e027:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e029:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e02f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e035:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e03c:	eb 11                	jmp    f012e04f <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e03e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e041:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e047:	01 d0                	add    %edx,%eax
f012e049:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e04c:	ff 45 f4             	incl   -0xc(%ebp)
f012e04f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e055:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e058:	7d e4                	jge    f012e03e <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e05a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e060:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e066:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e06c:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e072:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e078:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e07f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e085:	01 d0                	add    %edx,%eax
f012e087:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e08d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e093:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e099:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e0a0:	eb 1b                	jmp    f012e0bd <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e0a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e0a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e0ac:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e0b2:	01 d0                	add    %edx,%eax
f012e0b4:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e0ba:	ff 45 f0             	incl   -0x10(%ebp)
f012e0bd:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e0c3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e0c6:	7d da                	jge    f012e0a2 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e0c8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e0ce:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e0d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e0db:	eb 17                	jmp    f012e0f4 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e0dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e0e0:	01 c0                	add    %eax,%eax
f012e0e2:	89 c2                	mov    %eax,%edx
f012e0e4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e0ea:	01 d0                	add    %edx,%eax
f012e0ec:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e0f1:	ff 45 ec             	incl   -0x14(%ebp)
f012e0f4:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e0fa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e0fd:	7d de                	jge    f012e0dd <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e0ff:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e105:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e10b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e111:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e116:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e11c:	01 c0                	add    %eax,%eax
f012e11e:	89 c2                	mov    %eax,%edx
f012e120:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e126:	01 d0                	add    %edx,%eax
f012e128:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e12d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e133:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e139:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e140:	eb 49                	jmp    f012e18b <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e142:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e145:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e14c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e152:	01 d0                	add    %edx,%eax
f012e154:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e157:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e15a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e161:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e167:	01 d0                	add    %edx,%eax
f012e169:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e16f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e172:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e179:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e17f:	01 d0                	add    %edx,%eax
f012e181:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e188:	ff 45 e8             	incl   -0x18(%ebp)
f012e18b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e191:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e194:	7d ac                	jge    f012e142 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e196:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e19c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e1a2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1a8:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e1ab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1b1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e1b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1bd:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e1c4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e1ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e1d1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1d7:	01 d0                	add    %edx,%eax
f012e1d9:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e1dc:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e1e2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e1e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1ef:	01 d0                	add    %edx,%eax
f012e1f1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e1f7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e1fd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e204:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e20a:	01 d0                	add    %edx,%eax
f012e20c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e213:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e219:	8a 00                	mov    (%eax),%al
f012e21b:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e21e:	75 17                	jne    f012e237 <test_krealloc_BF+0xd04>
f012e220:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e226:	89 c2                	mov    %eax,%edx
f012e228:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e22e:	01 d0                	add    %edx,%eax
f012e230:	8a 00                	mov    (%eax),%al
f012e232:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e235:	74 17                	je     f012e24e <test_krealloc_BF+0xd1b>
			panic(
f012e237:	83 ec 04             	sub    $0x4,%esp
f012e23a:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e23f:	68 b1 11 00 00       	push   $0x11b1
f012e244:	68 76 a9 13 f0       	push   $0xf013a976
f012e249:	e8 58 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e24e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e254:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e25a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e260:	8a 00                	mov    (%eax),%al
f012e262:	3c 02                	cmp    $0x2,%al
f012e264:	75 16                	jne    f012e27c <test_krealloc_BF+0xd49>
f012e266:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e26c:	89 c2                	mov    %eax,%edx
f012e26e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e274:	01 d0                	add    %edx,%eax
f012e276:	8a 00                	mov    (%eax),%al
f012e278:	3c 02                	cmp    $0x2,%al
f012e27a:	74 20                	je     f012e29c <test_krealloc_BF+0xd69>
			panic(
f012e27c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e282:	8a 00                	mov    (%eax),%al
f012e284:	0f be c0             	movsbl %al,%eax
f012e287:	50                   	push   %eax
f012e288:	68 e8 bc 13 f0       	push   $0xf013bce8
f012e28d:	68 b7 11 00 00       	push   $0x11b7
f012e292:	68 76 a9 13 f0       	push   $0xf013a976
f012e297:	e8 0a 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012e29c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e2a2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012e2a8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e2ae:	8b 00                	mov    (%eax),%eax
f012e2b0:	83 f8 03             	cmp    $0x3,%eax
f012e2b3:	75 1c                	jne    f012e2d1 <test_krealloc_BF+0xd9e>
f012e2b5:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e2bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e2c2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e2c8:	01 d0                	add    %edx,%eax
f012e2ca:	8b 00                	mov    (%eax),%eax
f012e2cc:	83 f8 03             	cmp    $0x3,%eax
f012e2cf:	74 17                	je     f012e2e8 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012e2d1:	83 ec 04             	sub    $0x4,%esp
f012e2d4:	68 34 bd 13 f0       	push   $0xf013bd34
f012e2d9:	68 bb 11 00 00       	push   $0x11bb
f012e2de:	68 76 a9 13 f0       	push   $0xf013a976
f012e2e3:	e8 be 1e fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012e2e8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e2ee:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012e2f4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e2fa:	8b 00                	mov    (%eax),%eax
f012e2fc:	83 f8 04             	cmp    $0x4,%eax
f012e2ff:	75 1c                	jne    f012e31d <test_krealloc_BF+0xdea>
f012e301:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e307:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e30e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e314:	01 d0                	add    %edx,%eax
f012e316:	8b 00                	mov    (%eax),%eax
f012e318:	83 f8 04             	cmp    $0x4,%eax
f012e31b:	74 17                	je     f012e334 <test_krealloc_BF+0xe01>
			panic(
f012e31d:	83 ec 04             	sub    $0x4,%esp
f012e320:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e325:	68 c0 11 00 00       	push   $0x11c0
f012e32a:	68 76 a9 13 f0       	push   $0xf013a976
f012e32f:	e8 72 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012e334:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e33a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012e340:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e346:	66 8b 00             	mov    (%eax),%ax
f012e349:	66 83 f8 05          	cmp    $0x5,%ax
f012e34d:	75 1b                	jne    f012e36a <test_krealloc_BF+0xe37>
f012e34f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e355:	01 c0                	add    %eax,%eax
f012e357:	89 c2                	mov    %eax,%edx
f012e359:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e35f:	01 d0                	add    %edx,%eax
f012e361:	66 8b 00             	mov    (%eax),%ax
f012e364:	66 83 f8 05          	cmp    $0x5,%ax
f012e368:	74 17                	je     f012e381 <test_krealloc_BF+0xe4e>
			panic(
f012e36a:	83 ec 04             	sub    $0x4,%esp
f012e36d:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e372:	68 c5 11 00 00       	push   $0x11c5
f012e377:	68 76 a9 13 f0       	push   $0xf013a976
f012e37c:	e8 25 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012e381:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e387:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012e38d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e393:	66 8b 00             	mov    (%eax),%ax
f012e396:	66 83 f8 06          	cmp    $0x6,%ax
f012e39a:	75 1b                	jne    f012e3b7 <test_krealloc_BF+0xe84>
f012e39c:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e3a2:	01 c0                	add    %eax,%eax
f012e3a4:	89 c2                	mov    %eax,%edx
f012e3a6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e3ac:	01 d0                	add    %edx,%eax
f012e3ae:	66 8b 00             	mov    (%eax),%ax
f012e3b1:	66 83 f8 06          	cmp    $0x6,%ax
f012e3b5:	74 17                	je     f012e3ce <test_krealloc_BF+0xe9b>
			panic(
f012e3b7:	83 ec 04             	sub    $0x4,%esp
f012e3ba:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e3bf:	68 ca 11 00 00       	push   $0x11ca
f012e3c4:	68 76 a9 13 f0       	push   $0xf013a976
f012e3c9:	e8 d8 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012e3ce:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e3d4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012e3da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3e0:	8a 00                	mov    (%eax),%al
f012e3e2:	3c 07                	cmp    $0x7,%al
f012e3e4:	75 1b                	jne    f012e401 <test_krealloc_BF+0xece>
f012e3e6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e3ec:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e3f3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3f9:	01 d0                	add    %edx,%eax
f012e3fb:	8a 00                	mov    (%eax),%al
f012e3fd:	3c 07                	cmp    $0x7,%al
f012e3ff:	74 17                	je     f012e418 <test_krealloc_BF+0xee5>
			panic(
f012e401:	83 ec 04             	sub    $0x4,%esp
f012e404:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e409:	68 cf 11 00 00       	push   $0x11cf
f012e40e:	68 76 a9 13 f0       	push   $0xf013a976
f012e413:	e8 8e 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012e418:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e41e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e422:	66 83 f8 07          	cmp    $0x7,%ax
f012e426:	75 1f                	jne    f012e447 <test_krealloc_BF+0xf14>
f012e428:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e42e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e435:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e43b:	01 d0                	add    %edx,%eax
f012e43d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e441:	66 83 f8 07          	cmp    $0x7,%ax
f012e445:	74 17                	je     f012e45e <test_krealloc_BF+0xf2b>
			panic(
f012e447:	83 ec 04             	sub    $0x4,%esp
f012e44a:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e44f:	68 d2 11 00 00       	push   $0x11d2
f012e454:	68 76 a9 13 f0       	push   $0xf013a976
f012e459:	e8 48 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e45e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e464:	8b 40 04             	mov    0x4(%eax),%eax
f012e467:	83 f8 07             	cmp    $0x7,%eax
f012e46a:	75 1d                	jne    f012e489 <test_krealloc_BF+0xf56>
f012e46c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e472:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e479:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e47f:	01 d0                	add    %edx,%eax
f012e481:	8b 40 04             	mov    0x4(%eax),%eax
f012e484:	83 f8 07             	cmp    $0x7,%eax
f012e487:	74 17                	je     f012e4a0 <test_krealloc_BF+0xf6d>
			panic(
f012e489:	83 ec 04             	sub    $0x4,%esp
f012e48c:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e491:	68 d5 11 00 00       	push   $0x11d5
f012e496:	68 76 a9 13 f0       	push   $0xf013a976
f012e49b:	e8 06 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e4a0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e4a6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e4ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e4b2:	8a 00                	mov    (%eax),%al
f012e4b4:	3c 08                	cmp    $0x8,%al
f012e4b6:	75 1b                	jne    f012e4d3 <test_krealloc_BF+0xfa0>
f012e4b8:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e4be:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e4c5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e4cb:	01 d0                	add    %edx,%eax
f012e4cd:	8a 00                	mov    (%eax),%al
f012e4cf:	3c 08                	cmp    $0x8,%al
f012e4d1:	74 17                	je     f012e4ea <test_krealloc_BF+0xfb7>
			panic(
f012e4d3:	83 ec 04             	sub    $0x4,%esp
f012e4d6:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e4db:	68 da 11 00 00       	push   $0x11da
f012e4e0:	68 76 a9 13 f0       	push   $0xf013a976
f012e4e5:	e8 bc 1c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e4ea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e4f0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e4f4:	66 83 f8 08          	cmp    $0x8,%ax
f012e4f8:	75 1f                	jne    f012e519 <test_krealloc_BF+0xfe6>
f012e4fa:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e500:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e507:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e50d:	01 d0                	add    %edx,%eax
f012e50f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e513:	66 83 f8 08          	cmp    $0x8,%ax
f012e517:	74 17                	je     f012e530 <test_krealloc_BF+0xffd>
			panic(
f012e519:	83 ec 04             	sub    $0x4,%esp
f012e51c:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e521:	68 dd 11 00 00       	push   $0x11dd
f012e526:	68 76 a9 13 f0       	push   $0xf013a976
f012e52b:	e8 76 1c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e530:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e536:	8b 40 04             	mov    0x4(%eax),%eax
f012e539:	83 f8 08             	cmp    $0x8,%eax
f012e53c:	75 1d                	jne    f012e55b <test_krealloc_BF+0x1028>
f012e53e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e544:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e54b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e551:	01 d0                	add    %edx,%eax
f012e553:	8b 40 04             	mov    0x4(%eax),%eax
f012e556:	83 f8 08             	cmp    $0x8,%eax
f012e559:	74 17                	je     f012e572 <test_krealloc_BF+0x103f>
			panic(
f012e55b:	83 ec 04             	sub    $0x4,%esp
f012e55e:	68 a8 bc 13 f0       	push   $0xf013bca8
f012e563:	68 e0 11 00 00       	push   $0x11e0
f012e568:	68 76 a9 13 f0       	push   $0xf013a976
f012e56d:	e8 34 1c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e572:	e8 71 df fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e577:	89 c2                	mov    %eax,%edx
f012e579:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e57c:	39 c2                	cmp    %eax,%edx
f012e57e:	74 17                	je     f012e597 <test_krealloc_BF+0x1064>
			panic(
f012e580:	83 ec 04             	sub    $0x4,%esp
f012e583:	68 68 bd 13 f0       	push   $0xf013bd68
f012e588:	68 e4 11 00 00       	push   $0x11e4
f012e58d:	68 76 a9 13 f0       	push   $0xf013a976
f012e592:	e8 0f 1c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e597:	83 ec 0c             	sub    $0xc,%esp
f012e59a:	68 b4 bd 13 f0       	push   $0xf013bdb4
f012e59f:	e8 89 26 fd ff       	call   f0100c2d <cprintf>
f012e5a4:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012e5a7:	e8 3c df fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e5ac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e5af:	e8 d8 56 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e5b4:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012e5ba:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e5c0:	83 ec 08             	sub    $0x8,%esp
f012e5c3:	6a 00                	push   $0x0
f012e5c5:	50                   	push   %eax
f012e5c6:	e8 c1 90 fd ff       	call   f010768c <krealloc>
f012e5cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e5ce:	e8 b9 56 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e5d3:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e5d9:	74 17                	je     f012e5f2 <test_krealloc_BF+0x10bf>
			panic(
f012e5db:	83 ec 04             	sub    $0x4,%esp
f012e5de:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012e5e3:	68 f1 11 00 00       	push   $0x11f1
f012e5e8:	68 76 a9 13 f0       	push   $0xf013a976
f012e5ed:	e8 b4 1b fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e5f2:	e8 f1 de fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e5f7:	89 c2                	mov    %eax,%edx
f012e5f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e5fc:	29 c2                	sub    %eax,%edx
f012e5fe:	89 d0                	mov    %edx,%eax
f012e600:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e605:	74 17                	je     f012e61e <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012e607:	83 ec 04             	sub    $0x4,%esp
f012e60a:	68 4c be 13 f0       	push   $0xf013be4c
f012e60f:	68 f3 11 00 00       	push   $0x11f3
f012e614:	68 76 a9 13 f0       	push   $0xf013a976
f012e619:	e8 88 1b fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012e61e:	e8 c5 de fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e623:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e626:	e8 61 56 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e62b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012e631:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e637:	83 ec 08             	sub    $0x8,%esp
f012e63a:	6a 00                	push   $0x0
f012e63c:	50                   	push   %eax
f012e63d:	e8 4a 90 fd ff       	call   f010768c <krealloc>
f012e642:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e645:	e8 42 56 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e64a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e650:	74 17                	je     f012e669 <test_krealloc_BF+0x1136>
			panic(
f012e652:	83 ec 04             	sub    $0x4,%esp
f012e655:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012e65a:	68 fc 11 00 00       	push   $0x11fc
f012e65f:	68 76 a9 13 f0       	push   $0xf013a976
f012e664:	e8 3d 1b fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e669:	e8 7a de fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e66e:	89 c2                	mov    %eax,%edx
f012e670:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e673:	29 c2                	sub    %eax,%edx
f012e675:	89 d0                	mov    %edx,%eax
f012e677:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e67c:	74 17                	je     f012e695 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012e67e:	83 ec 04             	sub    $0x4,%esp
f012e681:	68 4c be 13 f0       	push   $0xf013be4c
f012e686:	68 fe 11 00 00       	push   $0x11fe
f012e68b:	68 76 a9 13 f0       	push   $0xf013a976
f012e690:	e8 11 1b fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012e695:	e8 4e de fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e69a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e69d:	e8 ea 55 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e6a2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012e6a8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e6ae:	83 ec 08             	sub    $0x8,%esp
f012e6b1:	6a 00                	push   $0x0
f012e6b3:	50                   	push   %eax
f012e6b4:	e8 d3 8f fd ff       	call   f010768c <krealloc>
f012e6b9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e6bc:	e8 cb 55 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e6c1:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e6c7:	74 17                	je     f012e6e0 <test_krealloc_BF+0x11ad>
			panic(
f012e6c9:	83 ec 04             	sub    $0x4,%esp
f012e6cc:	68 90 a9 13 f0       	push   $0xf013a990
f012e6d1:	68 06 12 00 00       	push   $0x1206
f012e6d6:	68 76 a9 13 f0       	push   $0xf013a976
f012e6db:	e8 c6 1a fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012e6e0:	e8 03 de fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e6e5:	89 c2                	mov    %eax,%edx
f012e6e7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e6ea:	29 c2                	sub    %eax,%edx
f012e6ec:	89 d0                	mov    %edx,%eax
f012e6ee:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e6f3:	74 17                	je     f012e70c <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012e6f5:	83 ec 04             	sub    $0x4,%esp
f012e6f8:	68 4c be 13 f0       	push   $0xf013be4c
f012e6fd:	68 08 12 00 00       	push   $0x1208
f012e702:	68 76 a9 13 f0       	push   $0xf013a976
f012e707:	e8 9a 1a fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012e70c:	e8 d7 dd fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e711:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e714:	e8 73 55 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e719:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012e71f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e725:	83 ec 08             	sub    $0x8,%esp
f012e728:	6a 00                	push   $0x0
f012e72a:	50                   	push   %eax
f012e72b:	e8 5c 8f fd ff       	call   f010768c <krealloc>
f012e730:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e733:	e8 54 55 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e738:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e73e:	74 17                	je     f012e757 <test_krealloc_BF+0x1224>
			panic(
f012e740:	83 ec 04             	sub    $0x4,%esp
f012e743:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012e748:	68 10 12 00 00       	push   $0x1210
f012e74d:	68 76 a9 13 f0       	push   $0xf013a976
f012e752:	e8 4f 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012e757:	e8 8c dd fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012e75c:	89 c2                	mov    %eax,%edx
f012e75e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e761:	29 c2                	sub    %eax,%edx
f012e763:	89 d0                	mov    %edx,%eax
f012e765:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e76a:	74 17                	je     f012e783 <test_krealloc_BF+0x1250>
			panic(
f012e76c:	83 ec 04             	sub    $0x4,%esp
f012e76f:	68 80 be 13 f0       	push   $0xf013be80
f012e774:	68 13 12 00 00       	push   $0x1213
f012e779:	68 76 a9 13 f0       	push   $0xf013a976
f012e77e:	e8 23 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e783:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012e78a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012e791:	eb 48                	jmp    f012e7db <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e793:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e796:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012e79b:	83 ec 04             	sub    $0x4,%esp
f012e79e:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012e7a4:	51                   	push   %ecx
f012e7a5:	52                   	push   %edx
f012e7a6:	50                   	push   %eax
f012e7a7:	e8 bd 81 fd ff       	call   f0106969 <get_page_table>
f012e7ac:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e7af:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012e7b5:	85 c0                	test   %eax,%eax
f012e7b7:	75 17                	jne    f012e7d0 <test_krealloc_BF+0x129d>
					panic(
f012e7b9:	83 ec 04             	sub    $0x4,%esp
f012e7bc:	68 78 b2 13 f0       	push   $0xf013b278
f012e7c1:	68 1f 12 00 00       	push   $0x121f
f012e7c6:	68 76 a9 13 f0       	push   $0xf013a976
f012e7cb:	e8 d6 19 fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e7d0:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012e7d7:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012e7db:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e7df:	78 b2                	js     f012e793 <test_krealloc_BF+0x1260>
f012e7e1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e7e5:	7f 09                	jg     f012e7f0 <test_krealloc_BF+0x12bd>
f012e7e7:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012e7ee:	76 a3                	jbe    f012e793 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012e7f0:	83 ec 0c             	sub    $0xc,%esp
f012e7f3:	68 bf be 13 f0       	push   $0xf013bebf
f012e7f8:	e8 30 24 fd ff       	call   f0100c2d <cprintf>
f012e7fd:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012e800:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e806:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e80c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e813:	eb 21                	jmp    f012e836 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012e815:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012e81b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012e81e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e824:	01 c8                	add    %ecx,%eax
f012e826:	8a 00                	mov    (%eax),%al
f012e828:	0f be c0             	movsbl %al,%eax
f012e82b:	01 d0                	add    %edx,%eax
f012e82d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e833:	ff 45 dc             	incl   -0x24(%ebp)
f012e836:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e83c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e83f:	7d d4                	jge    f012e815 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e841:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012e847:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012e84d:	42                   	inc    %edx
f012e84e:	01 d2                	add    %edx,%edx
f012e850:	39 d0                	cmp    %edx,%eax
f012e852:	74 17                	je     f012e86b <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012e854:	83 ec 04             	sub    $0x4,%esp
f012e857:	68 c8 be 13 f0       	push   $0xf013bec8
f012e85c:	68 31 12 00 00       	push   $0x1231
f012e861:	68 76 a9 13 f0       	push   $0xf013a976
f012e866:	e8 3b 19 fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012e86b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e871:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e877:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e87e:	eb 25                	jmp    f012e8a5 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012e880:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012e886:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e889:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012e890:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e896:	01 c8                	add    %ecx,%eax
f012e898:	8b 00                	mov    (%eax),%eax
f012e89a:	01 d0                	add    %edx,%eax
f012e89c:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e8a2:	ff 45 dc             	incl   -0x24(%ebp)
f012e8a5:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e8ab:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e8ae:	7d d0                	jge    f012e880 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012e8b0:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012e8b6:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012e8bc:	42                   	inc    %edx
f012e8bd:	c1 e2 02             	shl    $0x2,%edx
f012e8c0:	39 d0                	cmp    %edx,%eax
f012e8c2:	74 17                	je     f012e8db <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012e8c4:	83 ec 04             	sub    $0x4,%esp
f012e8c7:	68 c8 be 13 f0       	push   $0xf013bec8
f012e8cc:	68 3b 12 00 00       	push   $0x123b
f012e8d1:	68 76 a9 13 f0       	push   $0xf013a976
f012e8d6:	e8 cb 18 fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012e8db:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e8e1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e8e7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e8ee:	eb 24                	jmp    f012e914 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012e8f0:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e8f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e8f9:	01 c0                	add    %eax,%eax
f012e8fb:	89 c1                	mov    %eax,%ecx
f012e8fd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e903:	01 c8                	add    %ecx,%eax
f012e905:	66 8b 00             	mov    (%eax),%ax
f012e908:	98                   	cwtl   
f012e909:	01 d0                	add    %edx,%eax
f012e90b:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e911:	ff 45 dc             	incl   -0x24(%ebp)
f012e914:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e91a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e91d:	7d d1                	jge    f012e8f0 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012e91f:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e925:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e92b:	8d 48 01             	lea    0x1(%eax),%ecx
f012e92e:	89 c8                	mov    %ecx,%eax
f012e930:	c1 e0 02             	shl    $0x2,%eax
f012e933:	01 c8                	add    %ecx,%eax
f012e935:	39 c2                	cmp    %eax,%edx
f012e937:	74 17                	je     f012e950 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012e939:	83 ec 04             	sub    $0x4,%esp
f012e93c:	68 c8 be 13 f0       	push   $0xf013bec8
f012e941:	68 45 12 00 00       	push   $0x1245
f012e946:	68 76 a9 13 f0       	push   $0xf013a976
f012e94b:	e8 56 18 fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e950:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e956:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e95c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e963:	eb 70                	jmp    f012e9d5 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012e965:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012e96b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e96e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e975:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e97b:	01 c8                	add    %ecx,%eax
f012e97d:	8a 00                	mov    (%eax),%al
f012e97f:	0f be c0             	movsbl %al,%eax
f012e982:	01 d0                	add    %edx,%eax
f012e984:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012e98a:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012e990:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e993:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e99a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e9a0:	01 c8                	add    %ecx,%eax
f012e9a2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e9a6:	98                   	cwtl   
f012e9a7:	01 d0                	add    %edx,%eax
f012e9a9:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012e9af:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012e9b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e9b8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e9bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e9c5:	01 c8                	add    %ecx,%eax
f012e9c7:	8b 40 04             	mov    0x4(%eax),%eax
f012e9ca:	01 d0                	add    %edx,%eax
f012e9cc:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e9d2:	ff 45 dc             	incl   -0x24(%ebp)
f012e9d5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e9db:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e9de:	7d 85                	jge    f012e965 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012e9e0:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012e9e6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e9ec:	8d 50 01             	lea    0x1(%eax),%edx
f012e9ef:	89 d0                	mov    %edx,%eax
f012e9f1:	01 c0                	add    %eax,%eax
f012e9f3:	01 d0                	add    %edx,%eax
f012e9f5:	01 c0                	add    %eax,%eax
f012e9f7:	01 d0                	add    %edx,%eax
f012e9f9:	39 c1                	cmp    %eax,%ecx
f012e9fb:	75 3a                	jne    f012ea37 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012e9fd:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012ea03:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ea09:	8d 50 01             	lea    0x1(%eax),%edx
f012ea0c:	89 d0                	mov    %edx,%eax
f012ea0e:	01 c0                	add    %eax,%eax
f012ea10:	01 d0                	add    %edx,%eax
f012ea12:	01 c0                	add    %eax,%eax
f012ea14:	01 d0                	add    %edx,%eax
f012ea16:	39 c1                	cmp    %eax,%ecx
f012ea18:	75 1d                	jne    f012ea37 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012ea1a:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012ea20:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ea26:	8d 50 01             	lea    0x1(%eax),%edx
f012ea29:	89 d0                	mov    %edx,%eax
f012ea2b:	01 c0                	add    %eax,%eax
f012ea2d:	01 d0                	add    %edx,%eax
f012ea2f:	01 c0                	add    %eax,%eax
f012ea31:	01 d0                	add    %edx,%eax
f012ea33:	39 c1                	cmp    %eax,%ecx
f012ea35:	74 17                	je     f012ea4e <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012ea37:	83 ec 04             	sub    $0x4,%esp
f012ea3a:	68 c8 be 13 f0       	push   $0xf013bec8
f012ea3f:	68 53 12 00 00       	push   $0x1253
f012ea44:	68 76 a9 13 f0       	push   $0xf013a976
f012ea49:	e8 58 17 fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ea4e:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012ea55:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ea58:	e8 8b da fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ea5d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012ea60:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ea66:	83 ec 08             	sub    $0x8,%esp
f012ea69:	68 00 3c 00 00       	push   $0x3c00
f012ea6e:	50                   	push   %eax
f012ea6f:	e8 18 8c fd ff       	call   f010768c <krealloc>
f012ea74:	83 c4 10             	add    $0x10,%esp
f012ea77:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ea7d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ea83:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ea88:	77 17                	ja     f012eaa1 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ea8a:	83 ec 04             	sub    $0x4,%esp
f012ea8d:	68 1c bc 13 f0       	push   $0xf013bc1c
f012ea92:	68 5f 12 00 00       	push   $0x125f
f012ea97:	68 76 a9 13 f0       	push   $0xf013a976
f012ea9c:	e8 05 17 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012eaa1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eaa7:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012eaad:	74 17                	je     f012eac6 <test_krealloc_BF+0x1593>
			panic(
f012eaaf:	83 ec 04             	sub    $0x4,%esp
f012eab2:	68 00 bf 13 f0       	push   $0xf013bf00
f012eab7:	68 62 12 00 00       	push   $0x1262
f012eabc:	68 76 a9 13 f0       	push   $0xf013a976
f012eac1:	e8 e0 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012eac6:	e8 1d da fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012eacb:	89 c2                	mov    %eax,%edx
f012eacd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ead0:	39 c2                	cmp    %eax,%edx
f012ead2:	74 17                	je     f012eaeb <test_krealloc_BF+0x15b8>
			panic(
f012ead4:	83 ec 04             	sub    $0x4,%esp
f012ead7:	68 6c bf 13 f0       	push   $0xf013bf6c
f012eadc:	68 65 12 00 00       	push   $0x1265
f012eae1:	68 76 a9 13 f0       	push   $0xf013a976
f012eae6:	e8 bb 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012eaeb:	e8 f8 d9 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012eaf0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012eaf3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eaf9:	83 ec 08             	sub    $0x8,%esp
f012eafc:	68 00 fc 0f 00       	push   $0xffc00
f012eb01:	50                   	push   %eax
f012eb02:	e8 85 8b fd ff       	call   f010768c <krealloc>
f012eb07:	83 c4 10             	add    $0x10,%esp
f012eb0a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eb10:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012eb16:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eb1b:	77 17                	ja     f012eb34 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eb1d:	83 ec 04             	sub    $0x4,%esp
f012eb20:	68 1c bc 13 f0       	push   $0xf013bc1c
f012eb25:	68 6b 12 00 00       	push   $0x126b
f012eb2a:	68 76 a9 13 f0       	push   $0xf013a976
f012eb2f:	e8 72 16 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012eb34:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eb3a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012eb40:	74 17                	je     f012eb59 <test_krealloc_BF+0x1626>
			panic(
f012eb42:	83 ec 04             	sub    $0x4,%esp
f012eb45:	68 00 bf 13 f0       	push   $0xf013bf00
f012eb4a:	68 6e 12 00 00       	push   $0x126e
f012eb4f:	68 76 a9 13 f0       	push   $0xf013a976
f012eb54:	e8 4d 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012eb59:	e8 8a d9 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012eb5e:	89 c2                	mov    %eax,%edx
f012eb60:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eb63:	39 c2                	cmp    %eax,%edx
f012eb65:	74 17                	je     f012eb7e <test_krealloc_BF+0x164b>
			panic(
f012eb67:	83 ec 04             	sub    $0x4,%esp
f012eb6a:	68 6c bf 13 f0       	push   $0xf013bf6c
f012eb6f:	68 71 12 00 00       	push   $0x1271
f012eb74:	68 76 a9 13 f0       	push   $0xf013a976
f012eb79:	e8 28 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012eb7e:	e8 65 d9 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012eb83:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012eb86:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eb8c:	83 ec 08             	sub    $0x8,%esp
f012eb8f:	68 00 fc 0f 00       	push   $0xffc00
f012eb94:	50                   	push   %eax
f012eb95:	e8 f2 8a fd ff       	call   f010768c <krealloc>
f012eb9a:	83 c4 10             	add    $0x10,%esp
f012eb9d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eba3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012eba9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ebae:	77 17                	ja     f012ebc7 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ebb0:	83 ec 04             	sub    $0x4,%esp
f012ebb3:	68 1c bc 13 f0       	push   $0xf013bc1c
f012ebb8:	68 77 12 00 00       	push   $0x1277
f012ebbd:	68 76 a9 13 f0       	push   $0xf013a976
f012ebc2:	e8 df 15 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012ebc7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ebcd:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ebd3:	74 17                	je     f012ebec <test_krealloc_BF+0x16b9>
			panic(
f012ebd5:	83 ec 04             	sub    $0x4,%esp
f012ebd8:	68 00 bf 13 f0       	push   $0xf013bf00
f012ebdd:	68 7a 12 00 00       	push   $0x127a
f012ebe2:	68 76 a9 13 f0       	push   $0xf013a976
f012ebe7:	e8 ba 15 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ebec:	e8 f7 d8 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ebf1:	89 c2                	mov    %eax,%edx
f012ebf3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ebf6:	39 c2                	cmp    %eax,%edx
f012ebf8:	74 17                	je     f012ec11 <test_krealloc_BF+0x16de>
			panic(
f012ebfa:	83 ec 04             	sub    $0x4,%esp
f012ebfd:	68 6c bf 13 f0       	push   $0xf013bf6c
f012ec02:	68 7d 12 00 00       	push   $0x127d
f012ec07:	68 76 a9 13 f0       	push   $0xf013a976
f012ec0c:	e8 95 15 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ec11:	e8 d2 d8 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ec16:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012ec19:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ec1f:	83 ec 08             	sub    $0x8,%esp
f012ec22:	68 00 fc 0f 00       	push   $0xffc00
f012ec27:	50                   	push   %eax
f012ec28:	e8 5f 8a fd ff       	call   f010768c <krealloc>
f012ec2d:	83 c4 10             	add    $0x10,%esp
f012ec30:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ec36:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ec3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ec41:	77 17                	ja     f012ec5a <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ec43:	83 ec 04             	sub    $0x4,%esp
f012ec46:	68 1c bc 13 f0       	push   $0xf013bc1c
f012ec4b:	68 85 12 00 00       	push   $0x1285
f012ec50:	68 76 a9 13 f0       	push   $0xf013a976
f012ec55:	e8 4c 15 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012ec5a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ec60:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ec66:	74 17                	je     f012ec7f <test_krealloc_BF+0x174c>
			panic(
f012ec68:	83 ec 04             	sub    $0x4,%esp
f012ec6b:	68 b0 bf 13 f0       	push   $0xf013bfb0
f012ec70:	68 88 12 00 00       	push   $0x1288
f012ec75:	68 76 a9 13 f0       	push   $0xf013a976
f012ec7a:	e8 27 15 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ec7f:	e8 64 d8 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ec84:	89 c2                	mov    %eax,%edx
f012ec86:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ec89:	39 c2                	cmp    %eax,%edx
f012ec8b:	74 17                	je     f012eca4 <test_krealloc_BF+0x1771>
			panic(
f012ec8d:	83 ec 04             	sub    $0x4,%esp
f012ec90:	68 6c bf 13 f0       	push   $0xf013bf6c
f012ec95:	68 8b 12 00 00       	push   $0x128b
f012ec9a:	68 76 a9 13 f0       	push   $0xf013a976
f012ec9f:	e8 02 15 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012eca4:	83 ec 0c             	sub    $0xc,%esp
f012eca7:	68 8f b1 13 f0       	push   $0xf013b18f
f012ecac:	e8 7c 1f fd ff       	call   f0100c2d <cprintf>
f012ecb1:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012ecb4:	e8 2f d8 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ecb9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012ecbc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ecc2:	83 ec 08             	sub    $0x8,%esp
f012ecc5:	68 00 18 10 00       	push   $0x101800
f012ecca:	50                   	push   %eax
f012eccb:	e8 bc 89 fd ff       	call   f010768c <krealloc>
f012ecd0:	83 c4 10             	add    $0x10,%esp
f012ecd3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ecd6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ecd9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ecde:	77 17                	ja     f012ecf7 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ece0:	83 ec 04             	sub    $0x4,%esp
f012ece3:	68 1c bc 13 f0       	push   $0xf013bc1c
f012ece8:	68 93 12 00 00       	push   $0x1293
f012eced:	68 76 a9 13 f0       	push   $0xf013a976
f012ecf2:	e8 af 14 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012ecf7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ecfd:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ed00:	74 17                	je     f012ed19 <test_krealloc_BF+0x17e6>
			panic(
f012ed02:	83 ec 04             	sub    $0x4,%esp
f012ed05:	68 10 c0 13 f0       	push   $0xf013c010
f012ed0a:	68 96 12 00 00       	push   $0x1296
f012ed0f:	68 76 a9 13 f0       	push   $0xf013a976
f012ed14:	e8 8d 14 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012ed19:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ed1c:	e8 c7 d7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ed21:	29 c3                	sub    %eax,%ebx
f012ed23:	89 d8                	mov    %ebx,%eax
f012ed25:	83 f8 02             	cmp    $0x2,%eax
f012ed28:	74 17                	je     f012ed41 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012ed2a:	83 ec 04             	sub    $0x4,%esp
f012ed2d:	68 8c c0 13 f0       	push   $0xf013c08c
f012ed32:	68 98 12 00 00       	push   $0x1298
f012ed37:	68 76 a9 13 f0       	push   $0xf013a976
f012ed3c:	e8 65 14 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012ed41:	e8 a2 d7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ed46:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012ed49:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ed4f:	83 ec 08             	sub    $0x8,%esp
f012ed52:	68 00 fc 3f 00       	push   $0x3ffc00
f012ed57:	50                   	push   %eax
f012ed58:	e8 2f 89 fd ff       	call   f010768c <krealloc>
f012ed5d:	83 c4 10             	add    $0x10,%esp
f012ed60:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ed63:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ed66:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ed6b:	77 17                	ja     f012ed84 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ed6d:	83 ec 04             	sub    $0x4,%esp
f012ed70:	68 1c bc 13 f0       	push   $0xf013bc1c
f012ed75:	68 9e 12 00 00       	push   $0x129e
f012ed7a:	68 76 a9 13 f0       	push   $0xf013a976
f012ed7f:	e8 22 14 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012ed84:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ed8a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ed8d:	74 17                	je     f012eda6 <test_krealloc_BF+0x1873>
			panic(
f012ed8f:	83 ec 04             	sub    $0x4,%esp
f012ed92:	68 10 c0 13 f0       	push   $0xf013c010
f012ed97:	68 a1 12 00 00       	push   $0x12a1
f012ed9c:	68 76 a9 13 f0       	push   $0xf013a976
f012eda1:	e8 00 14 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012eda6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eda9:	e8 3a d7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012edae:	29 c3                	sub    %eax,%ebx
f012edb0:	89 d8                	mov    %ebx,%eax
f012edb2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012edb7:	74 17                	je     f012edd0 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012edb9:	83 ec 04             	sub    $0x4,%esp
f012edbc:	68 8c c0 13 f0       	push   $0xf013c08c
f012edc1:	68 a4 12 00 00       	push   $0x12a4
f012edc6:	68 76 a9 13 f0       	push   $0xf013a976
f012edcb:	e8 d6 13 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012edd0:	83 ec 0c             	sub    $0xc,%esp
f012edd3:	68 d4 b1 13 f0       	push   $0xf013b1d4
f012edd8:	e8 50 1e fd ff       	call   f0100c2d <cprintf>
f012eddd:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ede0:	e8 03 d7 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ede5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ede8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012edee:	83 ec 08             	sub    $0x8,%esp
f012edf1:	68 00 fc 9f 00       	push   $0x9ffc00
f012edf6:	50                   	push   %eax
f012edf7:	e8 90 88 fd ff       	call   f010768c <krealloc>
f012edfc:	83 c4 10             	add    $0x10,%esp
f012edff:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ee02:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ee05:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ee0a:	77 17                	ja     f012ee23 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee0c:	83 ec 04             	sub    $0x4,%esp
f012ee0f:	68 1c bc 13 f0       	push   $0xf013bc1c
f012ee14:	68 af 12 00 00       	push   $0x12af
f012ee19:	68 76 a9 13 f0       	push   $0xf013a976
f012ee1e:	e8 83 13 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012ee23:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012ee2a:	10 00 00 
f012ee2d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ee33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ee38:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012ee3e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ee44:	ba 00 00 00 00       	mov    $0x0,%edx
f012ee49:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012ee4f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ee55:	29 d0                	sub    %edx,%eax
f012ee57:	89 c1                	mov    %eax,%ecx
f012ee59:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012ee60:	10 00 00 
f012ee63:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012ee68:	0f b6 d0             	movzbl %al,%edx
f012ee6b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012ee71:	01 d0                	add    %edx,%eax
f012ee73:	48                   	dec    %eax
f012ee74:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012ee7a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ee80:	ba 00 00 00 00       	mov    $0x0,%edx
f012ee85:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012ee8b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ee91:	29 d0                	sub    %edx,%eax
f012ee93:	01 c1                	add    %eax,%ecx
f012ee95:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012ee9c:	10 00 00 
f012ee9f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012eea4:	0f b6 c0             	movzbl %al,%eax
f012eea7:	c1 e0 04             	shl    $0x4,%eax
f012eeaa:	89 c2                	mov    %eax,%edx
f012eeac:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012eeb2:	01 d0                	add    %edx,%eax
f012eeb4:	48                   	dec    %eax
f012eeb5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012eebb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012eec1:	ba 00 00 00 00       	mov    $0x0,%edx
f012eec6:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012eecc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012eed2:	29 d0                	sub    %edx,%eax
f012eed4:	01 c8                	add    %ecx,%eax
f012eed6:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012eedc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eedf:	39 c2                	cmp    %eax,%edx
f012eee1:	74 18                	je     f012eefb <test_krealloc_BF+0x19c8>
			panic(
f012eee3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eee6:	50                   	push   %eax
f012eee7:	68 c0 c0 13 f0       	push   $0xf013c0c0
f012eeec:	68 b3 12 00 00       	push   $0x12b3
f012eef1:	68 76 a9 13 f0       	push   $0xf013a976
f012eef6:	e8 ab 12 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012eefb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef01:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ef04:	75 17                	jne    f012ef1d <test_krealloc_BF+0x19ea>
			panic(
f012ef06:	83 ec 04             	sub    $0x4,%esp
f012ef09:	68 04 c1 13 f0       	push   $0xf013c104
f012ef0e:	68 b6 12 00 00       	push   $0x12b6
f012ef13:	68 76 a9 13 f0       	push   $0xf013a976
f012ef18:	e8 89 12 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012ef1d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ef20:	e8 c3 d5 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ef25:	29 c3                	sub    %eax,%ebx
f012ef27:	89 d8                	mov    %ebx,%eax
f012ef29:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ef2e:	74 17                	je     f012ef47 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012ef30:	83 ec 04             	sub    $0x4,%esp
f012ef33:	68 8c c0 13 f0       	push   $0xf013c08c
f012ef38:	68 b9 12 00 00       	push   $0x12b9
f012ef3d:	68 76 a9 13 f0       	push   $0xf013a976
f012ef42:	e8 5f 12 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012ef47:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ef4a:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012ef50:	e8 93 d5 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012ef55:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012ef58:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ef5e:	83 ec 08             	sub    $0x8,%esp
f012ef61:	68 00 fc 3f 00       	push   $0x3ffc00
f012ef66:	50                   	push   %eax
f012ef67:	e8 20 87 fd ff       	call   f010768c <krealloc>
f012ef6c:	83 c4 10             	add    $0x10,%esp
f012ef6f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ef72:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ef75:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ef7a:	77 17                	ja     f012ef93 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ef7c:	83 ec 04             	sub    $0x4,%esp
f012ef7f:	68 1c bc 13 f0       	push   $0xf013bc1c
f012ef84:	68 c2 12 00 00       	push   $0x12c2
f012ef89:	68 76 a9 13 f0       	push   $0xf013a976
f012ef8e:	e8 13 12 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012ef93:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ef99:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ef9c:	75 17                	jne    f012efb5 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ef9e:	83 ec 04             	sub    $0x4,%esp
f012efa1:	68 04 c1 13 f0       	push   $0xf013c104
f012efa6:	68 c4 12 00 00       	push   $0x12c4
f012efab:	68 76 a9 13 f0       	push   $0xf013a976
f012efb0:	e8 f1 11 fd ff       	call   f01001a6 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012efb5:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012efbc:	10 00 00 
f012efbf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012efc5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012efca:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012efd0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012efd6:	ba 00 00 00 00       	mov    $0x0,%edx
f012efdb:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012efe1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012efe7:	29 d0                	sub    %edx,%eax
f012efe9:	89 c1                	mov    %eax,%ecx
f012efeb:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012eff2:	10 00 00 
f012eff5:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012effa:	0f b6 d0             	movzbl %al,%edx
f012effd:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f003:	01 d0                	add    %edx,%eax
f012f005:	48                   	dec    %eax
f012f006:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f00c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f012:	ba 00 00 00 00       	mov    $0x0,%edx
f012f017:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f01d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f023:	29 d0                	sub    %edx,%eax
f012f025:	01 c1                	add    %eax,%ecx
f012f027:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f02e:	10 00 00 
f012f031:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012f036:	0f b6 c0             	movzbl %al,%eax
f012f039:	c1 e0 04             	shl    $0x4,%eax
f012f03c:	89 c2                	mov    %eax,%edx
f012f03e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f044:	01 d0                	add    %edx,%eax
f012f046:	48                   	dec    %eax
f012f047:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f04d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f053:	ba 00 00 00 00       	mov    $0x0,%edx
f012f058:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f05e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f064:	29 d0                	sub    %edx,%eax
f012f066:	01 c8                	add    %ecx,%eax
f012f068:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f06e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f071:	39 c2                	cmp    %eax,%edx
f012f073:	74 17                	je     f012f08c <test_krealloc_BF+0x1b59>
f012f075:	83 ec 04             	sub    $0x4,%esp
f012f078:	68 58 bc 13 f0       	push   $0xf013bc58
f012f07d:	68 c5 12 00 00       	push   $0x12c5
f012f082:	68 76 a9 13 f0       	push   $0xf013a976
f012f087:	e8 1a 11 fd ff       	call   f01001a6 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f08c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f08f:	e8 54 d4 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012f094:	29 c3                	sub    %eax,%ebx
f012f096:	89 d8                	mov    %ebx,%eax
f012f098:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f09d:	74 17                	je     f012f0b6 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f09f:	83 ec 04             	sub    $0x4,%esp
f012f0a2:	68 8c c0 13 f0       	push   $0xf013c08c
f012f0a7:	68 c9 12 00 00       	push   $0x12c9
f012f0ac:	68 76 a9 13 f0       	push   $0xf013a976
f012f0b1:	e8 f0 10 fd ff       	call   f01001a6 <_panic>
		ptr_allocations[6] = newAddress;
f012f0b6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0b9:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f0bf:	e8 24 d4 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012f0c4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f0c7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f0cd:	83 ec 08             	sub    $0x8,%esp
f012f0d0:	68 00 fc 3f 01       	push   $0x13ffc00
f012f0d5:	50                   	push   %eax
f012f0d6:	e8 b1 85 fd ff       	call   f010768c <krealloc>
f012f0db:	83 c4 10             	add    $0x10,%esp
f012f0de:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f0e1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0e4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f0e9:	77 17                	ja     f012f102 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f0eb:	83 ec 04             	sub    $0x4,%esp
f012f0ee:	68 1c bc 13 f0       	push   $0xf013bc1c
f012f0f3:	68 cf 12 00 00       	push   $0x12cf
f012f0f8:	68 76 a9 13 f0       	push   $0xf013a976
f012f0fd:	e8 a4 10 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012f102:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f108:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f10b:	75 17                	jne    f012f124 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f10d:	83 ec 04             	sub    $0x4,%esp
f012f110:	68 04 c1 13 f0       	push   $0xf013c104
f012f115:	68 d1 12 00 00       	push   $0x12d1
f012f11a:	68 76 a9 13 f0       	push   $0xf013a976
f012f11f:	e8 82 10 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f124:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f12b:	10 00 00 
f012f12e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f134:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f139:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f13f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f145:	ba 00 00 00 00       	mov    $0x0,%edx
f012f14a:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f150:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f156:	29 d0                	sub    %edx,%eax
f012f158:	89 c1                	mov    %eax,%ecx
f012f15a:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f161:	10 00 00 
f012f164:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012f169:	0f b6 d0             	movzbl %al,%edx
f012f16c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f172:	01 d0                	add    %edx,%eax
f012f174:	48                   	dec    %eax
f012f175:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f17b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f181:	ba 00 00 00 00       	mov    $0x0,%edx
f012f186:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f18c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f192:	29 d0                	sub    %edx,%eax
f012f194:	01 c1                	add    %eax,%ecx
f012f196:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f19d:	10 00 00 
f012f1a0:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012f1a5:	0f b6 c0             	movzbl %al,%eax
f012f1a8:	c1 e0 04             	shl    $0x4,%eax
f012f1ab:	89 c2                	mov    %eax,%edx
f012f1ad:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f1b3:	01 d0                	add    %edx,%eax
f012f1b5:	48                   	dec    %eax
f012f1b6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f1bc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f1c2:	ba 00 00 00 00       	mov    $0x0,%edx
f012f1c7:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f1cd:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f1d3:	29 d0                	sub    %edx,%eax
f012f1d5:	01 c8                	add    %ecx,%eax
f012f1d7:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f1dd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f1e0:	39 c2                	cmp    %eax,%edx
f012f1e2:	74 17                	je     f012f1fb <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f1e4:	83 ec 04             	sub    $0x4,%esp
f012f1e7:	68 24 c2 13 f0       	push   $0xf013c224
f012f1ec:	68 d3 12 00 00       	push   $0x12d3
f012f1f1:	68 76 a9 13 f0       	push   $0xf013a976
f012f1f6:	e8 ab 0f fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f1fb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f1fe:	e8 e5 d2 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012f203:	29 c3                	sub    %eax,%ebx
f012f205:	89 d8                	mov    %ebx,%eax
f012f207:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f20c:	74 17                	je     f012f225 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f20e:	83 ec 04             	sub    $0x4,%esp
f012f211:	68 8c c0 13 f0       	push   $0xf013c08c
f012f216:	68 d6 12 00 00       	push   $0x12d6
f012f21b:	68 76 a9 13 f0       	push   $0xf013a976
f012f220:	e8 81 0f fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012f225:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f228:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f22e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f234:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f23a:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f241:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f244:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f24b:	eb 21                	jmp    f012f26e <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f24d:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f253:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f256:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f25c:	01 c8                	add    %ecx,%eax
f012f25e:	8a 00                	mov    (%eax),%al
f012f260:	0f be c0             	movsbl %al,%eax
f012f263:	01 d0                	add    %edx,%eax
f012f265:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f26b:	ff 45 d8             	incl   -0x28(%ebp)
f012f26e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f274:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f277:	7d d4                	jge    f012f24d <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f279:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f27f:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f285:	42                   	inc    %edx
f012f286:	01 d2                	add    %edx,%edx
f012f288:	39 d0                	cmp    %edx,%eax
f012f28a:	74 17                	je     f012f2a3 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012f28c:	83 ec 04             	sub    $0x4,%esp
f012f28f:	68 bc c1 13 f0       	push   $0xf013c1bc
f012f294:	68 e4 12 00 00       	push   $0x12e4
f012f299:	68 76 a9 13 f0       	push   $0xf013a976
f012f29e:	e8 03 0f fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f2a3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f2a9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012f2af:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f2b6:	00 00 00 
		sums[1] = 0;
f012f2b9:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012f2c0:	00 00 00 
		sums[2] = 0;
f012f2c3:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012f2ca:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f2cd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f2d4:	eb 70                	jmp    f012f346 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012f2d6:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f2dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f2df:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f2e6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f2ec:	01 c8                	add    %ecx,%eax
f012f2ee:	8a 00                	mov    (%eax),%al
f012f2f0:	0f be c0             	movsbl %al,%eax
f012f2f3:	01 d0                	add    %edx,%eax
f012f2f5:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012f2fb:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f301:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f304:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f30b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f311:	01 c8                	add    %ecx,%eax
f012f313:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f317:	98                   	cwtl   
f012f318:	01 d0                	add    %edx,%eax
f012f31a:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012f320:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f326:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f329:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f330:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f336:	01 c8                	add    %ecx,%eax
f012f338:	8b 40 04             	mov    0x4(%eax),%eax
f012f33b:	01 d0                	add    %edx,%eax
f012f33d:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f343:	ff 45 d8             	incl   -0x28(%ebp)
f012f346:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f34c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f34f:	7d 85                	jge    f012f2d6 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012f351:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012f357:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f35d:	8d 50 01             	lea    0x1(%eax),%edx
f012f360:	89 d0                	mov    %edx,%eax
f012f362:	01 c0                	add    %eax,%eax
f012f364:	01 d0                	add    %edx,%eax
f012f366:	01 c0                	add    %eax,%eax
f012f368:	01 d0                	add    %edx,%eax
f012f36a:	39 c1                	cmp    %eax,%ecx
f012f36c:	75 3a                	jne    f012f3a8 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012f36e:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012f374:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f37a:	8d 50 01             	lea    0x1(%eax),%edx
f012f37d:	89 d0                	mov    %edx,%eax
f012f37f:	01 c0                	add    %eax,%eax
f012f381:	01 d0                	add    %edx,%eax
f012f383:	01 c0                	add    %eax,%eax
f012f385:	01 d0                	add    %edx,%eax
f012f387:	39 c1                	cmp    %eax,%ecx
f012f389:	75 1d                	jne    f012f3a8 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012f38b:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012f391:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f397:	8d 50 01             	lea    0x1(%eax),%edx
f012f39a:	89 d0                	mov    %edx,%eax
f012f39c:	01 c0                	add    %eax,%eax
f012f39e:	01 d0                	add    %edx,%eax
f012f3a0:	01 c0                	add    %eax,%eax
f012f3a2:	01 d0                	add    %edx,%eax
f012f3a4:	39 c1                	cmp    %eax,%ecx
f012f3a6:	74 17                	je     f012f3bf <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012f3a8:	83 ec 04             	sub    $0x4,%esp
f012f3ab:	68 bc c1 13 f0       	push   $0xf013c1bc
f012f3b0:	68 f6 12 00 00       	push   $0x12f6
f012f3b5:	68 76 a9 13 f0       	push   $0xf013a976
f012f3ba:	e8 e7 0d fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f3bf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f3c5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012f3cb:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f3d2:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f3d5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f3dc:	eb 24                	jmp    f012f402 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012f3de:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f3e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f3e7:	01 c0                	add    %eax,%eax
f012f3e9:	89 c1                	mov    %eax,%ecx
f012f3eb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f3f1:	01 c8                	add    %ecx,%eax
f012f3f3:	66 8b 00             	mov    (%eax),%ax
f012f3f6:	98                   	cwtl   
f012f3f7:	01 d0                	add    %edx,%eax
f012f3f9:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f3ff:	ff 45 d8             	incl   -0x28(%ebp)
f012f402:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f408:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f40b:	7d d1                	jge    f012f3de <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012f40d:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f413:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f419:	8d 48 01             	lea    0x1(%eax),%ecx
f012f41c:	89 c8                	mov    %ecx,%eax
f012f41e:	c1 e0 02             	shl    $0x2,%eax
f012f421:	01 c8                	add    %ecx,%eax
f012f423:	39 c2                	cmp    %eax,%edx
f012f425:	74 17                	je     f012f43e <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012f427:	83 ec 04             	sub    $0x4,%esp
f012f42a:	68 bc c1 13 f0       	push   $0xf013c1bc
f012f42f:	68 00 13 00 00       	push   $0x1300
f012f434:	68 76 a9 13 f0       	push   $0xf013a976
f012f439:	e8 68 0d fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f43e:	e8 a5 d0 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012f443:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f446:	e8 41 48 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f44b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f451:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f457:	83 ec 08             	sub    $0x8,%esp
f012f45a:	6a 00                	push   $0x0
f012f45c:	50                   	push   %eax
f012f45d:	e8 2a 82 fd ff       	call   f010768c <krealloc>
f012f462:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f465:	e8 22 48 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f46a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f470:	74 17                	je     f012f489 <test_krealloc_BF+0x1f56>
			panic(
f012f472:	83 ec 04             	sub    $0x4,%esp
f012f475:	68 90 a9 13 f0       	push   $0xf013a990
f012f47a:	68 08 13 00 00       	push   $0x1308
f012f47f:	68 76 a9 13 f0       	push   $0xf013a976
f012f484:	e8 1d 0d fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f489:	e8 5a d0 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012f48e:	89 c2                	mov    %eax,%edx
f012f490:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f493:	29 c2                	sub    %eax,%edx
f012f495:	89 d0                	mov    %edx,%eax
f012f497:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f49c:	74 17                	je     f012f4b5 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f49e:	83 ec 04             	sub    $0x4,%esp
f012f4a1:	68 4c be 13 f0       	push   $0xf013be4c
f012f4a6:	68 0a 13 00 00       	push   $0x130a
f012f4ab:	68 76 a9 13 f0       	push   $0xf013a976
f012f4b0:	e8 f1 0c fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f4b5:	e8 2e d0 fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012f4ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f4bd:	e8 ca 47 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f4c2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f4c8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f4ce:	83 ec 0c             	sub    $0xc,%esp
f012f4d1:	50                   	push   %eax
f012f4d2:	e8 07 81 fd ff       	call   f01075de <kfree>
f012f4d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f4da:	e8 ad 47 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f4df:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f4e5:	74 17                	je     f012f4fe <test_krealloc_BF+0x1fcb>
			panic(
f012f4e7:	83 ec 04             	sub    $0x4,%esp
f012f4ea:	68 90 a9 13 f0       	push   $0xf013a990
f012f4ef:	68 12 13 00 00       	push   $0x1312
f012f4f4:	68 76 a9 13 f0       	push   $0xf013a976
f012f4f9:	e8 a8 0c fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f4fe:	e8 e5 cf fd ff       	call   f010c4e8 <sys_calculate_free_frames>
f012f503:	89 c2                	mov    %eax,%edx
f012f505:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f508:	29 c2                	sub    %eax,%edx
f012f50a:	89 d0                	mov    %edx,%eax
f012f50c:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f511:	74 17                	je     f012f52a <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f513:	83 ec 04             	sub    $0x4,%esp
f012f516:	68 4c be 13 f0       	push   $0xf013be4c
f012f51b:	68 14 13 00 00       	push   $0x1314
f012f520:	68 76 a9 13 f0       	push   $0xf013a976
f012f525:	e8 7c 0c fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f52a:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f531:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f538:	eb 48                	jmp    f012f582 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f53a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f53d:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012f542:	83 ec 04             	sub    $0x4,%esp
f012f545:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f54b:	51                   	push   %ecx
f012f54c:	52                   	push   %edx
f012f54d:	50                   	push   %eax
f012f54e:	e8 16 74 fd ff       	call   f0106969 <get_page_table>
f012f553:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f556:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f55c:	85 c0                	test   %eax,%eax
f012f55e:	75 17                	jne    f012f577 <test_krealloc_BF+0x2044>
					panic(
f012f560:	83 ec 04             	sub    $0x4,%esp
f012f563:	68 78 b2 13 f0       	push   $0xf013b278
f012f568:	68 21 13 00 00       	push   $0x1321
f012f56d:	68 76 a9 13 f0       	push   $0xf013a976
f012f572:	e8 2f 0c fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f577:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f57e:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f582:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f586:	78 b2                	js     f012f53a <test_krealloc_BF+0x2007>
f012f588:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f58c:	7f 09                	jg     f012f597 <test_krealloc_BF+0x2064>
f012f58e:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f595:	76 a3                	jbe    f012f53a <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f597:	83 ec 0c             	sub    $0xc,%esp
f012f59a:	68 5a ab 13 f0       	push   $0xf013ab5a
f012f59f:	e8 89 16 fd ff       	call   f0100c2d <cprintf>
f012f5a4:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012f5a7:	83 ec 0c             	sub    $0xc,%esp
f012f5aa:	68 5c c2 13 f0       	push   $0xf013c25c
f012f5af:	e8 79 16 fd ff       	call   f0100c2d <cprintf>
f012f5b4:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f5b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f5bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f5bf:	5b                   	pop    %ebx
f012f5c0:	5f                   	pop    %edi
f012f5c1:	5d                   	pop    %ebp
f012f5c2:	c3                   	ret    

f012f5c3 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012f5c3:	55                   	push   %ebp
f012f5c4:	89 e5                	mov    %esp,%ebp
f012f5c6:	83 ec 08             	sub    $0x8,%esp
	if(USE_KHEAP != 1)
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
f012f5c9:	83 ec 04             	sub    $0x4,%esp
f012f5cc:	68 9c c2 13 f0       	push   $0xf013c29c
f012f5d1:	68 32 13 00 00       	push   $0x1332
f012f5d6:	68 76 a9 13 f0       	push   $0xf013a976
f012f5db:	e8 c6 0b fd ff       	call   f01001a6 <_panic>

f012f5e0 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012f5e0:	55                   	push   %ebp
f012f5e1:	89 e5                	mov    %esp,%ebp
f012f5e3:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f5e6:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f5ea:	77 07                	ja     f012f5f3 <nearest_pow2_ceil+0x13>
f012f5ec:	b8 01 00 00 00       	mov    $0x1,%eax
f012f5f1:	eb 20                	jmp    f012f613 <nearest_pow2_ceil+0x33>
    int power = 2;
f012f5f3:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f5fa:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f5fd:	eb 08                	jmp    f012f607 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012f5ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f602:	01 c0                	add    %eax,%eax
f012f604:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012f607:	d1 6d 08             	shrl   0x8(%ebp)
f012f60a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f60e:	75 ef                	jne    f012f5ff <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012f610:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f613:	c9                   	leave  
f012f614:	c3                   	ret    

f012f615 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012f615:	55                   	push   %ebp
f012f616:	89 e5                	mov    %esp,%ebp
f012f618:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f61b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f61f:	77 07                	ja     f012f628 <log2_ceil+0x13>
f012f621:	b8 01 00 00 00       	mov    $0x1,%eax
f012f626:	eb 1b                	jmp    f012f643 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012f628:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f62f:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f632:	eb 03                	jmp    f012f637 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012f634:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012f637:	d1 6d 08             	shrl   0x8(%ebp)
f012f63a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f63e:	75 f4                	jne    f012f634 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012f640:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f643:	c9                   	leave  
f012f644:	c3                   	ret    

f012f645 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012f645:	55                   	push   %ebp
f012f646:	89 e5                	mov    %esp,%ebp
f012f648:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012f64b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f64e:	8b 00                	mov    (%eax),%eax
f012f650:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012f653:	8b 45 08             	mov    0x8(%ebp),%eax
f012f656:	8b 00                	mov    (%eax),%eax
f012f658:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012f65b:	eb 52                	jmp    f012f6af <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012f65d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f660:	8b 00                	mov    (%eax),%eax
f012f662:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012f665:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f668:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f66b:	75 12                	jne    f012f67f <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012f66d:	83 ec 0c             	sub    $0xc,%esp
f012f670:	68 08 c3 13 f0       	push   $0xf013c308
f012f675:	e8 b3 15 fd ff       	call   f0100c2d <cprintf>
f012f67a:	83 c4 10             	add    $0x10,%esp
			break;
f012f67d:	eb 3f                	jmp    f012f6be <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012f67f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f683:	74 38                	je     f012f6bd <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012f685:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f688:	8b 00                	mov    (%eax),%eax
f012f68a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012f68d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f690:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f693:	75 12                	jne    f012f6a7 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012f695:	83 ec 0c             	sub    $0xc,%esp
f012f698:	68 24 c3 13 f0       	push   $0xf013c324
f012f69d:	e8 8b 15 fd ff       	call   f0100c2d <cprintf>
f012f6a2:	83 c4 10             	add    $0x10,%esp
			break;
f012f6a5:	eb 17                	jmp    f012f6be <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012f6a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f6aa:	8b 00                	mov    (%eax),%eax
f012f6ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012f6af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f6b3:	74 09                	je     f012f6be <detect_loop_in_FrameInfo_list+0x79>
f012f6b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f6b9:	75 a2                	jne    f012f65d <detect_loop_in_FrameInfo_list+0x18>
f012f6bb:	eb 01                	jmp    f012f6be <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012f6bd:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012f6be:	83 ec 0c             	sub    $0xc,%esp
f012f6c1:	68 3b c3 13 f0       	push   $0xf013c33b
f012f6c6:	e8 62 15 fd ff       	call   f0100c2d <cprintf>
f012f6cb:	83 c4 10             	add    $0x10,%esp
}
f012f6ce:	90                   	nop
f012f6cf:	c9                   	leave  
f012f6d0:	c3                   	ret    

f012f6d1 <scarce_memory>:

void scarce_memory()
{
f012f6d1:	55                   	push   %ebp
f012f6d2:	89 e5                	mov    %esp,%ebp
f012f6d4:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012f6d7:	a1 40 fa 6b f0       	mov    0xf06bfa40,%eax
f012f6dc:	ba 64 00 00 00       	mov    $0x64,%edx
f012f6e1:	29 c2                	sub    %eax,%edx
f012f6e3:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f012f6e8:	0f af c2             	imul   %edx,%eax
f012f6eb:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f6f0:	f7 e2                	mul    %edx
f012f6f2:	89 d0                	mov    %edx,%eax
f012f6f4:	c1 e8 05             	shr    $0x5,%eax
f012f6f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012f6fa:	a1 40 fa 6b f0       	mov    0xf06bfa40,%eax
f012f6ff:	ba 64 00 00 00       	mov    $0x64,%edx
f012f704:	29 c2                	sub    %eax,%edx
f012f706:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f012f70b:	89 d1                	mov    %edx,%ecx
f012f70d:	0f af c8             	imul   %eax,%ecx
f012f710:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f715:	f7 e1                	mul    %ecx
f012f717:	c1 ea 05             	shr    $0x5,%edx
f012f71a:	89 d0                	mov    %edx,%eax
f012f71c:	c1 e0 02             	shl    $0x2,%eax
f012f71f:	01 d0                	add    %edx,%eax
f012f721:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f728:	01 d0                	add    %edx,%eax
f012f72a:	c1 e0 02             	shl    $0x2,%eax
f012f72d:	29 c1                	sub    %eax,%ecx
f012f72f:	89 ca                	mov    %ecx,%edx
f012f731:	85 d2                	test   %edx,%edx
f012f733:	74 03                	je     f012f738 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012f735:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012f738:	8b 15 50 1e 6c f0    	mov    0xf06c1e50,%edx
f012f73e:	a1 64 1e 6c f0       	mov    0xf06c1e64,%eax
f012f743:	29 c2                	sub    %eax,%edx
f012f745:	89 d0                	mov    %edx,%eax
f012f747:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012f74a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f74d:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012f750:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012f753:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012f75a:	eb 12                	jmp    f012f76e <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012f75c:	83 ec 0c             	sub    $0xc,%esp
f012f75f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012f762:	50                   	push   %eax
f012f763:	e8 42 70 fd ff       	call   f01067aa <allocate_frame>
f012f768:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012f76b:	ff 45 f0             	incl   -0x10(%ebp)
f012f76e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f771:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f774:	76 e6                	jbe    f012f75c <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012f776:	90                   	nop
f012f777:	c9                   	leave  
f012f778:	c3                   	ret    

f012f779 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012f779:	55                   	push   %ebp
f012f77a:	89 e5                	mov    %esp,%ebp
f012f77c:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012f77f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012f786:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012f78d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012f794:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f798:	0f 85 d3 01 00 00    	jne    f012f971 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f79e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012f7a5:	e9 e1 00 00 00       	jmp    f012f88b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012f7aa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f7b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f7b4:	c1 e0 04             	shl    $0x4,%eax
f012f7b7:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f012f7bc:	8b 00                	mov    (%eax),%eax
f012f7be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f7c1:	e9 82 00 00 00       	jmp    f012f848 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012f7c6:	83 ec 0c             	sub    $0xc,%esp
f012f7c9:	ff 75 e4             	pushl  -0x1c(%ebp)
f012f7cc:	e8 8c 81 fd ff       	call   f010795d <env_page_ws_get_size>
f012f7d1:	83 c4 10             	add    $0x10,%esp
f012f7d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f7d7:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f7dc:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f7e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f7e5:	0f af c2             	imul   %edx,%eax
f012f7e8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f7ed:	f7 e2                	mul    %edx
f012f7ef:	89 d0                	mov    %edx,%eax
f012f7f1:	c1 e8 05             	shr    $0x5,%eax
f012f7f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f7f7:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f7fc:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f802:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f805:	89 d1                	mov    %edx,%ecx
f012f807:	0f af c8             	imul   %eax,%ecx
f012f80a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f80f:	f7 e1                	mul    %ecx
f012f811:	c1 ea 05             	shr    $0x5,%edx
f012f814:	89 d0                	mov    %edx,%eax
f012f816:	c1 e0 02             	shl    $0x2,%eax
f012f819:	01 d0                	add    %edx,%eax
f012f81b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f822:	01 d0                	add    %edx,%eax
f012f824:	c1 e0 02             	shl    $0x2,%eax
f012f827:	29 c1                	sub    %eax,%ecx
f012f829:	89 ca                	mov    %ecx,%edx
f012f82b:	85 d2                	test   %edx,%edx
f012f82d:	74 03                	je     f012f832 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012f82f:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012f832:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f835:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f838:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f83b:	c1 e0 04             	shl    $0x4,%eax
f012f83e:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f012f843:	8b 00                	mov    (%eax),%eax
f012f845:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f848:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f84c:	74 08                	je     f012f856 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012f84e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f851:	8b 40 44             	mov    0x44(%eax),%eax
f012f854:	eb 05                	jmp    f012f85b <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012f856:	b8 00 00 00 00       	mov    $0x0,%eax
f012f85b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f85e:	c1 e2 04             	shl    $0x4,%edx
f012f861:	81 c2 f8 9a 65 f0    	add    $0xf0659af8,%edx
f012f867:	89 02                	mov    %eax,(%edx)
f012f869:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f86c:	c1 e0 04             	shl    $0x4,%eax
f012f86f:	05 f8 9a 65 f0       	add    $0xf0659af8,%eax
f012f874:	8b 00                	mov    (%eax),%eax
f012f876:	85 c0                	test   %eax,%eax
f012f878:	0f 85 48 ff ff ff    	jne    f012f7c6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012f87e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f882:	0f 85 3e ff ff ff    	jne    f012f7c6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f888:	ff 45 e8             	incl   -0x18(%ebp)
f012f88b:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012f890:	0f b6 c0             	movzbl %al,%eax
f012f893:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f896:	0f 8f 0e ff ff ff    	jg     f012f7aa <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012f89c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f8a3:	a1 44 fa 6b f0       	mov    0xf06bfa44,%eax
f012f8a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f8ab:	eb 19                	jmp    f012f8c6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012f8ad:	83 ec 0c             	sub    $0xc,%esp
f012f8b0:	ff 75 dc             	pushl  -0x24(%ebp)
f012f8b3:	e8 a5 80 fd ff       	call   f010795d <env_page_ws_get_size>
f012f8b8:	83 c4 10             	add    $0x10,%esp
f012f8bb:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f8be:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f012f8c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f8c6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f8ca:	74 08                	je     f012f8d4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012f8cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f8cf:	8b 40 44             	mov    0x44(%eax),%eax
f012f8d2:	eb 05                	jmp    f012f8d9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012f8d4:	b8 00 00 00 00       	mov    $0x0,%eax
f012f8d9:	a3 4c fa 6b f0       	mov    %eax,0xf06bfa4c
f012f8de:	a1 4c fa 6b f0       	mov    0xf06bfa4c,%eax
f012f8e3:	85 c0                	test   %eax,%eax
f012f8e5:	75 c6                	jne    f012f8ad <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012f8e7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f8eb:	75 c0                	jne    f012f8ad <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012f8ed:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f8f2:	85 c0                	test   %eax,%eax
f012f8f4:	0f 84 ec 00 00 00    	je     f012f9e6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f8fa:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f8ff:	83 ec 0c             	sub    $0xc,%esp
f012f902:	50                   	push   %eax
f012f903:	e8 55 80 fd ff       	call   f010795d <env_page_ws_get_size>
f012f908:	83 c4 10             	add    $0x10,%esp
f012f90b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f90e:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f913:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f919:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f91c:	0f af c2             	imul   %edx,%eax
f012f91f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f924:	f7 e2                	mul    %edx
f012f926:	89 d0                	mov    %edx,%eax
f012f928:	c1 e8 05             	shr    $0x5,%eax
f012f92b:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f92e:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f933:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f939:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f93c:	89 d1                	mov    %edx,%ecx
f012f93e:	0f af c8             	imul   %eax,%ecx
f012f941:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f946:	f7 e1                	mul    %ecx
f012f948:	c1 ea 05             	shr    $0x5,%edx
f012f94b:	89 d0                	mov    %edx,%eax
f012f94d:	c1 e0 02             	shl    $0x2,%eax
f012f950:	01 d0                	add    %edx,%eax
f012f952:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f959:	01 d0                	add    %edx,%eax
f012f95b:	c1 e0 02             	shl    $0x2,%eax
f012f95e:	29 c1                	sub    %eax,%ecx
f012f960:	89 ca                	mov    %ecx,%edx
f012f962:	85 d2                	test   %edx,%edx
f012f964:	74 03                	je     f012f969 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012f966:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f969:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f96c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f96f:	eb 75                	jmp    f012f9e6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f971:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f976:	83 ec 0c             	sub    $0xc,%esp
f012f979:	50                   	push   %eax
f012f97a:	e8 de 7f fd ff       	call   f010795d <env_page_ws_get_size>
f012f97f:	83 c4 10             	add    $0x10,%esp
f012f982:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f985:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f98a:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f990:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f993:	0f af c2             	imul   %edx,%eax
f012f996:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f99b:	f7 e2                	mul    %edx
f012f99d:	89 d0                	mov    %edx,%eax
f012f99f:	c1 e8 05             	shr    $0x5,%eax
f012f9a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f9a5:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012f9aa:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f9b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f9b3:	89 d1                	mov    %edx,%ecx
f012f9b5:	0f af c8             	imul   %eax,%ecx
f012f9b8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f9bd:	f7 e1                	mul    %ecx
f012f9bf:	c1 ea 05             	shr    $0x5,%edx
f012f9c2:	89 d0                	mov    %edx,%eax
f012f9c4:	c1 e0 02             	shl    $0x2,%eax
f012f9c7:	01 d0                	add    %edx,%eax
f012f9c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f9d0:	01 d0                	add    %edx,%eax
f012f9d2:	c1 e0 02             	shl    $0x2,%eax
f012f9d5:	29 c1                	sub    %eax,%ecx
f012f9d7:	89 ca                	mov    %ecx,%edx
f012f9d9:	85 d2                	test   %edx,%edx
f012f9db:	74 03                	je     f012f9e0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012f9dd:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f9e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012f9e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012f9e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f9e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f9ec:	01 c2                	add    %eax,%edx
f012f9ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f9f1:	01 d0                	add    %edx,%eax
}
f012f9f3:	c9                   	leave  
f012f9f4:	c3                   	ret    

f012f9f5 <schenv>:


void schenv()
{
f012f9f5:	55                   	push   %ebp
f012f9f6:	89 e5                	mov    %esp,%ebp
f012f9f8:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012f9fb:	c6 05 e4 1e 6c f0 00 	movb   $0x0,0xf06c1ee4
	__ne = NULL;
f012fa02:	c7 05 74 1e 6c f0 00 	movl   $0x0,0xf06c1e74
f012fa09:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012fa0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fa13:	eb 3a                	jmp    f012fa4f <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012fa15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa18:	c1 e0 04             	shl    $0x4,%eax
f012fa1b:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f012fa20:	83 ec 0c             	sub    $0xc,%esp
f012fa23:	50                   	push   %eax
f012fa24:	e8 76 49 fd ff       	call   f010439f <queue_size>
f012fa29:	83 c4 10             	add    $0x10,%esp
f012fa2c:	85 c0                	test   %eax,%eax
f012fa2e:	74 1c                	je     f012fa4c <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012fa30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa33:	c1 e0 04             	shl    $0x4,%eax
f012fa36:	05 f4 9a 65 f0       	add    $0xf0659af4,%eax
f012fa3b:	8b 00                	mov    (%eax),%eax
f012fa3d:	a3 74 1e 6c f0       	mov    %eax,0xf06c1e74
			__nl = i;
f012fa42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa45:	a2 e4 1e 6c f0       	mov    %al,0xf06c1ee4
			break;
f012fa4a:	eb 10                	jmp    f012fa5c <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012fa4c:	ff 45 f4             	incl   -0xc(%ebp)
f012fa4f:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012fa54:	0f b6 c0             	movzbl %al,%eax
f012fa57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fa5a:	7f b9                	jg     f012fa15 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012fa5c:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012fa61:	85 c0                	test   %eax,%eax
f012fa63:	0f 84 86 00 00 00    	je     f012faef <schenv+0xfa>
	{
		if (__ne != NULL)
f012fa69:	a1 74 1e 6c f0       	mov    0xf06c1e74,%eax
f012fa6e:	85 c0                	test   %eax,%eax
f012fa70:	74 4b                	je     f012fabd <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012fa72:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012fa77:	0f b6 c0             	movzbl %al,%eax
f012fa7a:	8d 50 01             	lea    0x1(%eax),%edx
f012fa7d:	a0 e4 1e 6c f0       	mov    0xf06c1ee4,%al
f012fa82:	0f b6 c0             	movzbl %al,%eax
f012fa85:	39 c2                	cmp    %eax,%edx
f012fa87:	7d 66                	jge    f012faef <schenv+0xfa>
			{
				__ne = curenv;
f012fa89:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012fa8e:	a3 74 1e 6c f0       	mov    %eax,0xf06c1e74
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012fa93:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012fa98:	0f b6 c0             	movzbl %al,%eax
f012fa9b:	8a 15 bc 1e 6c f0    	mov    0xf06c1ebc,%dl
f012faa1:	0f b6 d2             	movzbl %dl,%edx
f012faa4:	4a                   	dec    %edx
f012faa5:	39 d0                	cmp    %edx,%eax
f012faa7:	7d 08                	jge    f012fab1 <schenv+0xbc>
f012faa9:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012faae:	40                   	inc    %eax
f012faaf:	eb 05                	jmp    f012fab6 <schenv+0xc1>
f012fab1:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012fab6:	a2 e4 1e 6c f0       	mov    %al,0xf06c1ee4
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012fabb:	eb 32                	jmp    f012faef <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012fabd:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012fac2:	a3 74 1e 6c f0       	mov    %eax,0xf06c1e74
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012fac7:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012facc:	0f b6 c0             	movzbl %al,%eax
f012facf:	8a 15 bc 1e 6c f0    	mov    0xf06c1ebc,%dl
f012fad5:	0f b6 d2             	movzbl %dl,%edx
f012fad8:	4a                   	dec    %edx
f012fad9:	39 d0                	cmp    %edx,%eax
f012fadb:	7d 08                	jge    f012fae5 <schenv+0xf0>
f012fadd:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012fae2:	40                   	inc    %eax
f012fae3:	eb 05                	jmp    f012faea <schenv+0xf5>
f012fae5:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012faea:	a2 e4 1e 6c f0       	mov    %al,0xf06c1ee4
		}
	}
}
f012faef:	90                   	nop
f012faf0:	c9                   	leave  
f012faf1:	c3                   	ret    

f012faf2 <chksch>:

void chksch(uint8 onoff)
{
f012faf2:	55                   	push   %ebp
f012faf3:	89 e5                	mov    %esp,%ebp
f012faf5:	83 ec 04             	sub    $0x4,%esp
f012faf8:	8b 45 08             	mov    0x8(%ebp),%eax
f012fafb:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012fafe:	c7 05 d0 1e 6c f0 00 	movl   $0x0,0xf06c1ed0
f012fb05:	00 00 00 
	__ne = NULL;
f012fb08:	c7 05 74 1e 6c f0 00 	movl   $0x0,0xf06c1e74
f012fb0f:	00 00 00 
	__pl = 0 ;
f012fb12:	c6 05 e8 9a 65 f0 00 	movb   $0x0,0xf0659ae8
	__nl = 0 ;
f012fb19:	c6 05 e4 1e 6c f0 00 	movb   $0x0,0xf06c1ee4
	__chkstatus = onoff;
f012fb20:	8a 45 fc             	mov    -0x4(%ebp),%al
f012fb23:	a2 70 1e 6c f0       	mov    %al,0xf06c1e70
}
f012fb28:	90                   	nop
f012fb29:	c9                   	leave  
f012fb2a:	c3                   	ret    

f012fb2b <chk1>:
void chk1()
{
f012fb2b:	55                   	push   %ebp
f012fb2c:	89 e5                	mov    %esp,%ebp
f012fb2e:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012fb31:	a0 70 1e 6c f0       	mov    0xf06c1e70,%al
f012fb36:	84 c0                	test   %al,%al
f012fb38:	74 2b                	je     f012fb65 <chk1+0x3a>
		return ;
	__pe = curenv;
f012fb3a:	a1 14 92 65 f0       	mov    0xf0659214,%eax
f012fb3f:	a3 d0 1e 6c f0       	mov    %eax,0xf06c1ed0
	__pl = __nl ;
f012fb44:	a0 e4 1e 6c f0       	mov    0xf06c1ee4,%al
f012fb49:	a2 e8 9a 65 f0       	mov    %al,0xf0659ae8
	if (__pe == NULL)
f012fb4e:	a1 d0 1e 6c f0       	mov    0xf06c1ed0,%eax
f012fb53:	85 c0                	test   %eax,%eax
f012fb55:	75 07                	jne    f012fb5e <chk1+0x33>
	{
		__pl = 0;
f012fb57:	c6 05 e8 9a 65 f0 00 	movb   $0x0,0xf0659ae8
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012fb5e:	e8 92 fe ff ff       	call   f012f9f5 <schenv>
f012fb63:	eb 01                	jmp    f012fb66 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012fb65:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012fb66:	c9                   	leave  
f012fb67:	c3                   	ret    

f012fb68 <chk2>:
void chk2(struct Env* __se)
{
f012fb68:	55                   	push   %ebp
f012fb69:	89 e5                	mov    %esp,%ebp
f012fb6b:	53                   	push   %ebx
f012fb6c:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012fb6f:	a0 70 1e 6c f0       	mov    0xf06c1e70,%al
f012fb74:	84 c0                	test   %al,%al
f012fb76:	0f 84 35 02 00 00    	je     f012fdb1 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012fb7c:	a1 74 1e 6c f0       	mov    0xf06c1e74,%eax
f012fb81:	39 45 08             	cmp    %eax,0x8(%ebp)
f012fb84:	74 19                	je     f012fb9f <chk2+0x37>
f012fb86:	68 55 c3 13 f0       	push   $0xf013c355
f012fb8b:	68 62 c3 13 f0       	push   $0xf013c362
f012fb90:	68 c0 00 00 00       	push   $0xc0
f012fb95:	68 77 c3 13 f0       	push   $0xf013c377
f012fb9a:	e8 76 06 fd ff       	call   f0100215 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012fb9f:	a1 74 1e 6c f0       	mov    0xf06c1e74,%eax
f012fba4:	85 c0                	test   %eax,%eax
f012fba6:	0f 84 1b 01 00 00    	je     f012fcc7 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012fbac:	a0 e4 1e 6c f0       	mov    0xf06c1ee4,%al
f012fbb1:	0f b6 c0             	movzbl %al,%eax
f012fbb4:	8a 80 68 1e 6c f0    	mov    -0xf93e198(%eax),%al
f012fbba:	0f b6 d8             	movzbl %al,%ebx
f012fbbd:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012fbc2:	99                   	cltd   
f012fbc3:	f7 fb                	idiv   %ebx
f012fbc5:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012fbcb:	a0 e4 1e 6c f0       	mov    0xf06c1ee4,%al
f012fbd0:	0f b6 c0             	movzbl %al,%eax
f012fbd3:	8a 80 68 1e 6c f0    	mov    -0xf93e198(%eax),%al
f012fbd9:	0f b6 d8             	movzbl %al,%ebx
f012fbdc:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012fbe1:	99                   	cltd   
f012fbe2:	f7 fb                	idiv   %ebx
f012fbe4:	89 c3                	mov    %eax,%ebx
f012fbe6:	89 c8                	mov    %ecx,%eax
f012fbe8:	99                   	cltd   
f012fbe9:	f7 fb                	idiv   %ebx
f012fbeb:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012fbef:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012fbf3:	83 e0 01             	and    $0x1,%eax
f012fbf6:	66 85 c0             	test   %ax,%ax
f012fbf9:	74 07                	je     f012fc02 <chk2+0x9a>
f012fbfb:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012fbff:	40                   	inc    %eax
f012fc00:	eb 04                	jmp    f012fc06 <chk2+0x9e>
f012fc02:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012fc06:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012fc0a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012fc0e:	89 d0                	mov    %edx,%eax
f012fc10:	c1 e0 02             	shl    $0x2,%eax
f012fc13:	01 d0                	add    %edx,%eax
f012fc15:	01 c0                	add    %eax,%eax
f012fc17:	01 d0                	add    %edx,%eax
f012fc19:	c1 e0 02             	shl    $0x2,%eax
f012fc1c:	01 d0                	add    %edx,%eax
f012fc1e:	01 c0                	add    %eax,%eax
f012fc20:	89 c1                	mov    %eax,%ecx
f012fc22:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fc27:	f7 e9                	imul   %ecx
f012fc29:	c1 fa 05             	sar    $0x5,%edx
f012fc2c:	89 c8                	mov    %ecx,%eax
f012fc2e:	c1 f8 1f             	sar    $0x1f,%eax
f012fc31:	29 c2                	sub    %eax,%edx
f012fc33:	89 d0                	mov    %edx,%eax
f012fc35:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012fc39:	e8 32 46 fd ff       	call   f0104270 <kclock_read_cnt0>
f012fc3e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012fc42:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012fc46:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012fc4a:	76 0a                	jbe    f012fc56 <chk2+0xee>
f012fc4c:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012fc50:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012fc54:	76 19                	jbe    f012fc6f <chk2+0x107>
f012fc56:	68 90 c3 13 f0       	push   $0xf013c390
f012fc5b:	68 62 c3 13 f0       	push   $0xf013c362
f012fc60:	68 ca 00 00 00       	push   $0xca
f012fc65:	68 77 c3 13 f0       	push   $0xf013c377
f012fc6a:	e8 a6 05 fd ff       	call   f0100215 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012fc6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fc76:	eb 42                	jmp    f012fcba <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012fc78:	a1 74 1e 6c f0       	mov    0xf06c1e74,%eax
f012fc7d:	8b 40 4c             	mov    0x4c(%eax),%eax
f012fc80:	89 c2                	mov    %eax,%edx
f012fc82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc85:	c1 e0 04             	shl    $0x4,%eax
f012fc88:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f012fc8d:	83 ec 08             	sub    $0x8,%esp
f012fc90:	52                   	push   %edx
f012fc91:	50                   	push   %eax
f012fc92:	e8 da 48 fd ff       	call   f0104571 <find_env_in_queue>
f012fc97:	83 c4 10             	add    $0x10,%esp
f012fc9a:	85 c0                	test   %eax,%eax
f012fc9c:	74 19                	je     f012fcb7 <chk2+0x14f>
f012fc9e:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012fca3:	68 62 c3 13 f0       	push   $0xf013c362
f012fca8:	68 ce 00 00 00       	push   $0xce
f012fcad:	68 77 c3 13 f0       	push   $0xf013c377
f012fcb2:	e8 5e 05 fd ff       	call   f0100215 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012fcb7:	ff 45 f4             	incl   -0xc(%ebp)
f012fcba:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012fcbf:	0f b6 c0             	movzbl %al,%eax
f012fcc2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fcc5:	7f b1                	jg     f012fc78 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012fcc7:	a1 d0 1e 6c f0       	mov    0xf06c1ed0,%eax
f012fccc:	85 c0                	test   %eax,%eax
f012fcce:	0f 84 de 00 00 00    	je     f012fdb2 <chk2+0x24a>
f012fcd4:	8b 15 d0 1e 6c f0    	mov    0xf06c1ed0,%edx
f012fcda:	a1 74 1e 6c f0       	mov    0xf06c1e74,%eax
f012fcdf:	39 c2                	cmp    %eax,%edx
f012fce1:	0f 84 cb 00 00 00    	je     f012fdb2 <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012fce7:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012fcec:	0f b6 c0             	movzbl %al,%eax
f012fcef:	8a 15 bc 1e 6c f0    	mov    0xf06c1ebc,%dl
f012fcf5:	0f b6 d2             	movzbl %dl,%edx
f012fcf8:	4a                   	dec    %edx
f012fcf9:	39 d0                	cmp    %edx,%eax
f012fcfb:	74 08                	je     f012fd05 <chk2+0x19d>
f012fcfd:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012fd02:	40                   	inc    %eax
f012fd03:	eb 05                	jmp    f012fd0a <chk2+0x1a2>
f012fd05:	a0 e8 9a 65 f0       	mov    0xf0659ae8,%al
f012fd0a:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012fd0d:	a1 d0 1e 6c f0       	mov    0xf06c1ed0,%eax
f012fd12:	8b 40 4c             	mov    0x4c(%eax),%eax
f012fd15:	89 c2                	mov    %eax,%edx
f012fd17:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012fd1b:	c1 e0 04             	shl    $0x4,%eax
f012fd1e:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f012fd23:	83 ec 08             	sub    $0x8,%esp
f012fd26:	52                   	push   %edx
f012fd27:	50                   	push   %eax
f012fd28:	e8 44 48 fd ff       	call   f0104571 <find_env_in_queue>
f012fd2d:	83 c4 10             	add    $0x10,%esp
f012fd30:	85 c0                	test   %eax,%eax
f012fd32:	75 19                	jne    f012fd4d <chk2+0x1e5>
f012fd34:	68 f4 c3 13 f0       	push   $0xf013c3f4
f012fd39:	68 62 c3 13 f0       	push   $0xf013c362
f012fd3e:	68 d4 00 00 00       	push   $0xd4
f012fd43:	68 77 c3 13 f0       	push   $0xf013c377
f012fd48:	e8 c8 04 fd ff       	call   f0100215 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012fd4d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012fd54:	eb 4c                	jmp    f012fda2 <chk2+0x23a>
		{
			if (i == __tl) continue;
f012fd56:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012fd5a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fd5d:	74 3f                	je     f012fd9e <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012fd5f:	a1 d0 1e 6c f0       	mov    0xf06c1ed0,%eax
f012fd64:	8b 40 4c             	mov    0x4c(%eax),%eax
f012fd67:	89 c2                	mov    %eax,%edx
f012fd69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd6c:	c1 e0 04             	shl    $0x4,%eax
f012fd6f:	05 f0 9a 65 f0       	add    $0xf0659af0,%eax
f012fd74:	83 ec 08             	sub    $0x8,%esp
f012fd77:	52                   	push   %edx
f012fd78:	50                   	push   %eax
f012fd79:	e8 f3 47 fd ff       	call   f0104571 <find_env_in_queue>
f012fd7e:	83 c4 10             	add    $0x10,%esp
f012fd81:	85 c0                	test   %eax,%eax
f012fd83:	74 1a                	je     f012fd9f <chk2+0x237>
f012fd85:	68 38 c4 13 f0       	push   $0xf013c438
f012fd8a:	68 62 c3 13 f0       	push   $0xf013c362
f012fd8f:	68 d8 00 00 00       	push   $0xd8
f012fd94:	68 77 c3 13 f0       	push   $0xf013c377
f012fd99:	e8 77 04 fd ff       	call   f0100215 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012fd9e:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012fd9f:	ff 45 f0             	incl   -0x10(%ebp)
f012fda2:	a0 bc 1e 6c f0       	mov    0xf06c1ebc,%al
f012fda7:	0f b6 c0             	movzbl %al,%eax
f012fdaa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fdad:	7f a7                	jg     f012fd56 <chk2+0x1ee>
f012fdaf:	eb 01                	jmp    f012fdb2 <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012fdb1:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012fdb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012fdb5:	c9                   	leave  
f012fdb6:	c3                   	ret    

f012fdb7 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012fdb7:	55                   	push   %ebp
f012fdb8:	89 e5                	mov    %esp,%ebp
f012fdba:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012fdbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fdc4:	eb 40                	jmp    f012fe06 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012fdc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdc9:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012fdcf:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012fdd4:	83 ec 08             	sub    $0x8,%esp
f012fdd7:	52                   	push   %edx
f012fdd8:	50                   	push   %eax
f012fdd9:	e8 92 01 00 00       	call   f012ff70 <check_va2pa>
f012fdde:	83 c4 10             	add    $0x10,%esp
f012fde1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fde4:	74 19                	je     f012fdff <check_boot_pgdir+0x48>
f012fde6:	68 78 c4 13 f0       	push   $0xf013c478
f012fdeb:	68 62 c3 13 f0       	push   $0xf013c362
f012fdf0:	68 ff 00 00 00       	push   $0xff
f012fdf5:	68 77 c3 13 f0       	push   $0xf013c377
f012fdfa:	e8 a7 03 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012fdff:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012fe06:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012fe0d:	75 b7                	jne    f012fdc6 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012fe0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fe16:	eb 74                	jmp    f012fe8c <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012fe18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe1b:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012fe21:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012fe26:	83 ec 08             	sub    $0x8,%esp
f012fe29:	52                   	push   %edx
f012fe2a:	50                   	push   %eax
f012fe2b:	e8 40 01 00 00       	call   f012ff70 <check_va2pa>
f012fe30:	83 c4 10             	add    $0x10,%esp
f012fe33:	c7 45 f0 00 90 18 f0 	movl   $0xf0189000,-0x10(%ebp)
f012fe3a:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012fe41:	77 17                	ja     f012fe5a <check_boot_pgdir+0xa3>
f012fe43:	ff 75 f0             	pushl  -0x10(%ebp)
f012fe46:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012fe4b:	68 04 01 00 00       	push   $0x104
f012fe50:	68 77 c3 13 f0       	push   $0xf013c377
f012fe55:	e8 4c 03 fd ff       	call   f01001a6 <_panic>
f012fe5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fe5d:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012fe63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fe66:	01 ca                	add    %ecx,%edx
f012fe68:	39 d0                	cmp    %edx,%eax
f012fe6a:	74 19                	je     f012fe85 <check_boot_pgdir+0xce>
f012fe6c:	68 e4 c4 13 f0       	push   $0xf013c4e4
f012fe71:	68 62 c3 13 f0       	push   $0xf013c362
f012fe76:	68 04 01 00 00       	push   $0x104
f012fe7b:	68 77 c3 13 f0       	push   $0xf013c377
f012fe80:	e8 21 03 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012fe85:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012fe8c:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012fe93:	76 83                	jbe    f012fe18 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012fe95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fe9c:	e9 af 00 00 00       	jmp    f012ff50 <check_boot_pgdir+0x199>
		switch (i) {
f012fea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fea4:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012fea9:	74 11                	je     f012febc <check_boot_pgdir+0x105>
f012feab:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012feb0:	72 36                	jb     f012fee8 <check_boot_pgdir+0x131>
f012feb2:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012feb7:	83 f8 02             	cmp    $0x2,%eax
f012feba:	77 2c                	ja     f012fee8 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012febc:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012fec1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fec4:	c1 e2 02             	shl    $0x2,%edx
f012fec7:	01 d0                	add    %edx,%eax
f012fec9:	8b 00                	mov    (%eax),%eax
f012fecb:	85 c0                	test   %eax,%eax
f012fecd:	75 7a                	jne    f012ff49 <check_boot_pgdir+0x192>
f012fecf:	68 66 c5 13 f0       	push   $0xf013c566
f012fed4:	68 62 c3 13 f0       	push   $0xf013c362
f012fed9:	68 0f 01 00 00       	push   $0x10f
f012fede:	68 77 c3 13 f0       	push   $0xf013c377
f012fee3:	e8 be 02 fd ff       	call   f01001a6 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012fee8:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012feef:	76 2c                	jbe    f012ff1d <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012fef1:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012fef6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fef9:	c1 e2 02             	shl    $0x2,%edx
f012fefc:	01 d0                	add    %edx,%eax
f012fefe:	8b 00                	mov    (%eax),%eax
f012ff00:	85 c0                	test   %eax,%eax
f012ff02:	75 48                	jne    f012ff4c <check_boot_pgdir+0x195>
f012ff04:	68 66 c5 13 f0       	push   $0xf013c566
f012ff09:	68 62 c3 13 f0       	push   $0xf013c362
f012ff0e:	68 13 01 00 00       	push   $0x113
f012ff13:	68 77 c3 13 f0       	push   $0xf013c377
f012ff18:	e8 89 02 fd ff       	call   f01001a6 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012ff1d:	a1 b8 1e 6c f0       	mov    0xf06c1eb8,%eax
f012ff22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ff25:	c1 e2 02             	shl    $0x2,%edx
f012ff28:	01 d0                	add    %edx,%eax
f012ff2a:	8b 00                	mov    (%eax),%eax
f012ff2c:	85 c0                	test   %eax,%eax
f012ff2e:	74 1c                	je     f012ff4c <check_boot_pgdir+0x195>
f012ff30:	68 7c c5 13 f0       	push   $0xf013c57c
f012ff35:	68 62 c3 13 f0       	push   $0xf013c362
f012ff3a:	68 15 01 00 00       	push   $0x115
f012ff3f:	68 77 c3 13 f0       	push   $0xf013c377
f012ff44:	e8 5d 02 fd ff       	call   f01001a6 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012ff49:	90                   	nop
f012ff4a:	eb 01                	jmp    f012ff4d <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012ff4c:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012ff4d:	ff 45 f4             	incl   -0xc(%ebp)
f012ff50:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012ff57:	0f 86 44 ff ff ff    	jbe    f012fea1 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012ff5d:	83 ec 0c             	sub    $0xc,%esp
f012ff60:	68 98 c5 13 f0       	push   $0xf013c598
f012ff65:	e8 c3 0c fd ff       	call   f0100c2d <cprintf>
f012ff6a:	83 c4 10             	add    $0x10,%esp
}
f012ff6d:	90                   	nop
f012ff6e:	c9                   	leave  
f012ff6f:	c3                   	ret    

f012ff70 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012ff70:	55                   	push   %ebp
f012ff71:	89 e5                	mov    %esp,%ebp
f012ff73:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012ff76:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ff79:	c1 e8 16             	shr    $0x16,%eax
f012ff7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ff83:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff86:	01 d0                	add    %edx,%eax
f012ff88:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012ff8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ff8e:	8b 00                	mov    (%eax),%eax
f012ff90:	83 e0 01             	and    $0x1,%eax
f012ff93:	85 c0                	test   %eax,%eax
f012ff95:	75 0a                	jne    f012ffa1 <check_va2pa+0x31>
		return ~0;
f012ff97:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012ff9c:	e9 87 00 00 00       	jmp    f0130028 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012ffa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ffa4:	8b 00                	mov    (%eax),%eax
f012ffa6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012ffab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ffae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffb1:	c1 e8 0c             	shr    $0xc,%eax
f012ffb4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012ffb7:	a1 50 1e 6c f0       	mov    0xf06c1e50,%eax
f012ffbc:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012ffbf:	72 17                	jb     f012ffd8 <check_va2pa+0x68>
f012ffc1:	ff 75 f0             	pushl  -0x10(%ebp)
f012ffc4:	68 b8 c5 13 f0       	push   $0xf013c5b8
f012ffc9:	68 2b 01 00 00       	push   $0x12b
f012ffce:	68 77 c3 13 f0       	push   $0xf013c377
f012ffd3:	e8 ce 01 fd ff       	call   f01001a6 <_panic>
f012ffd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffdb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012ffe0:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012ffe3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ffe6:	c1 e8 0c             	shr    $0xc,%eax
f012ffe9:	25 ff 03 00 00       	and    $0x3ff,%eax
f012ffee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fff5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fff8:	01 d0                	add    %edx,%eax
f012fffa:	8b 00                	mov    (%eax),%eax
f012fffc:	83 e0 01             	and    $0x1,%eax
f012ffff:	85 c0                	test   %eax,%eax
f0130001:	75 07                	jne    f013000a <check_va2pa+0x9a>
		return ~0;
f0130003:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130008:	eb 1e                	jmp    f0130028 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f013000a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013000d:	c1 e8 0c             	shr    $0xc,%eax
f0130010:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130015:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013001c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013001f:	01 d0                	add    %edx,%eax
f0130021:	8b 00                	mov    (%eax),%eax
f0130023:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0130028:	c9                   	leave  
f0130029:	c3                   	ret    

f013002a <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f013002a:	55                   	push   %ebp
f013002b:	89 e5                	mov    %esp,%ebp
f013002d:	53                   	push   %ebx
f013002e:	83 ec 14             	sub    $0x14,%esp
f0130031:	8b 45 10             	mov    0x10(%ebp),%eax
f0130034:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130037:	8b 45 14             	mov    0x14(%ebp),%eax
f013003a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f013003d:	8b 45 18             	mov    0x18(%ebp),%eax
f0130040:	ba 00 00 00 00       	mov    $0x0,%edx
f0130045:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130048:	77 55                	ja     f013009f <printnum+0x75>
f013004a:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f013004d:	72 05                	jb     f0130054 <printnum+0x2a>
f013004f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130052:	77 4b                	ja     f013009f <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130054:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0130057:	8d 58 ff             	lea    -0x1(%eax),%ebx
f013005a:	8b 45 18             	mov    0x18(%ebp),%eax
f013005d:	ba 00 00 00 00       	mov    $0x0,%edx
f0130062:	52                   	push   %edx
f0130063:	50                   	push   %eax
f0130064:	ff 75 f4             	pushl  -0xc(%ebp)
f0130067:	ff 75 f0             	pushl  -0x10(%ebp)
f013006a:	e8 09 28 00 00       	call   f0132878 <__udivdi3>
f013006f:	83 c4 10             	add    $0x10,%esp
f0130072:	83 ec 04             	sub    $0x4,%esp
f0130075:	ff 75 20             	pushl  0x20(%ebp)
f0130078:	53                   	push   %ebx
f0130079:	ff 75 18             	pushl  0x18(%ebp)
f013007c:	52                   	push   %edx
f013007d:	50                   	push   %eax
f013007e:	ff 75 0c             	pushl  0xc(%ebp)
f0130081:	ff 75 08             	pushl  0x8(%ebp)
f0130084:	e8 a1 ff ff ff       	call   f013002a <printnum>
f0130089:	83 c4 20             	add    $0x20,%esp
f013008c:	eb 1a                	jmp    f01300a8 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f013008e:	83 ec 08             	sub    $0x8,%esp
f0130091:	ff 75 0c             	pushl  0xc(%ebp)
f0130094:	ff 75 20             	pushl  0x20(%ebp)
f0130097:	8b 45 08             	mov    0x8(%ebp),%eax
f013009a:	ff d0                	call   *%eax
f013009c:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f013009f:	ff 4d 1c             	decl   0x1c(%ebp)
f01300a2:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f01300a6:	7f e6                	jg     f013008e <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f01300a8:	8b 4d 18             	mov    0x18(%ebp),%ecx
f01300ab:	bb 00 00 00 00       	mov    $0x0,%ebx
f01300b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01300b6:	53                   	push   %ebx
f01300b7:	51                   	push   %ecx
f01300b8:	52                   	push   %edx
f01300b9:	50                   	push   %eax
f01300ba:	e8 c9 28 00 00       	call   f0132988 <__umoddi3>
f01300bf:	83 c4 10             	add    $0x10,%esp
f01300c2:	05 14 c8 13 f0       	add    $0xf013c814,%eax
f01300c7:	8a 00                	mov    (%eax),%al
f01300c9:	0f be c0             	movsbl %al,%eax
f01300cc:	83 ec 08             	sub    $0x8,%esp
f01300cf:	ff 75 0c             	pushl  0xc(%ebp)
f01300d2:	50                   	push   %eax
f01300d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01300d6:	ff d0                	call   *%eax
f01300d8:	83 c4 10             	add    $0x10,%esp
}
f01300db:	90                   	nop
f01300dc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01300df:	c9                   	leave  
f01300e0:	c3                   	ret    

f01300e1 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f01300e1:	55                   	push   %ebp
f01300e2:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01300e4:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01300e8:	7e 1c                	jle    f0130106 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f01300ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01300ed:	8b 00                	mov    (%eax),%eax
f01300ef:	8d 50 08             	lea    0x8(%eax),%edx
f01300f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01300f5:	89 10                	mov    %edx,(%eax)
f01300f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01300fa:	8b 00                	mov    (%eax),%eax
f01300fc:	83 e8 08             	sub    $0x8,%eax
f01300ff:	8b 50 04             	mov    0x4(%eax),%edx
f0130102:	8b 00                	mov    (%eax),%eax
f0130104:	eb 40                	jmp    f0130146 <getuint+0x65>
	else if (lflag)
f0130106:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013010a:	74 1e                	je     f013012a <getuint+0x49>
		return va_arg(*ap, unsigned long);
f013010c:	8b 45 08             	mov    0x8(%ebp),%eax
f013010f:	8b 00                	mov    (%eax),%eax
f0130111:	8d 50 04             	lea    0x4(%eax),%edx
f0130114:	8b 45 08             	mov    0x8(%ebp),%eax
f0130117:	89 10                	mov    %edx,(%eax)
f0130119:	8b 45 08             	mov    0x8(%ebp),%eax
f013011c:	8b 00                	mov    (%eax),%eax
f013011e:	83 e8 04             	sub    $0x4,%eax
f0130121:	8b 00                	mov    (%eax),%eax
f0130123:	ba 00 00 00 00       	mov    $0x0,%edx
f0130128:	eb 1c                	jmp    f0130146 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f013012a:	8b 45 08             	mov    0x8(%ebp),%eax
f013012d:	8b 00                	mov    (%eax),%eax
f013012f:	8d 50 04             	lea    0x4(%eax),%edx
f0130132:	8b 45 08             	mov    0x8(%ebp),%eax
f0130135:	89 10                	mov    %edx,(%eax)
f0130137:	8b 45 08             	mov    0x8(%ebp),%eax
f013013a:	8b 00                	mov    (%eax),%eax
f013013c:	83 e8 04             	sub    $0x4,%eax
f013013f:	8b 00                	mov    (%eax),%eax
f0130141:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130146:	5d                   	pop    %ebp
f0130147:	c3                   	ret    

f0130148 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130148:	55                   	push   %ebp
f0130149:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f013014b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f013014f:	7e 1c                	jle    f013016d <getint+0x25>
		return va_arg(*ap, long long);
f0130151:	8b 45 08             	mov    0x8(%ebp),%eax
f0130154:	8b 00                	mov    (%eax),%eax
f0130156:	8d 50 08             	lea    0x8(%eax),%edx
f0130159:	8b 45 08             	mov    0x8(%ebp),%eax
f013015c:	89 10                	mov    %edx,(%eax)
f013015e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130161:	8b 00                	mov    (%eax),%eax
f0130163:	83 e8 08             	sub    $0x8,%eax
f0130166:	8b 50 04             	mov    0x4(%eax),%edx
f0130169:	8b 00                	mov    (%eax),%eax
f013016b:	eb 38                	jmp    f01301a5 <getint+0x5d>
	else if (lflag)
f013016d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130171:	74 1a                	je     f013018d <getint+0x45>
		return va_arg(*ap, long);
f0130173:	8b 45 08             	mov    0x8(%ebp),%eax
f0130176:	8b 00                	mov    (%eax),%eax
f0130178:	8d 50 04             	lea    0x4(%eax),%edx
f013017b:	8b 45 08             	mov    0x8(%ebp),%eax
f013017e:	89 10                	mov    %edx,(%eax)
f0130180:	8b 45 08             	mov    0x8(%ebp),%eax
f0130183:	8b 00                	mov    (%eax),%eax
f0130185:	83 e8 04             	sub    $0x4,%eax
f0130188:	8b 00                	mov    (%eax),%eax
f013018a:	99                   	cltd   
f013018b:	eb 18                	jmp    f01301a5 <getint+0x5d>
	else
		return va_arg(*ap, int);
f013018d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130190:	8b 00                	mov    (%eax),%eax
f0130192:	8d 50 04             	lea    0x4(%eax),%edx
f0130195:	8b 45 08             	mov    0x8(%ebp),%eax
f0130198:	89 10                	mov    %edx,(%eax)
f013019a:	8b 45 08             	mov    0x8(%ebp),%eax
f013019d:	8b 00                	mov    (%eax),%eax
f013019f:	83 e8 04             	sub    $0x4,%eax
f01301a2:	8b 00                	mov    (%eax),%eax
f01301a4:	99                   	cltd   
}
f01301a5:	5d                   	pop    %ebp
f01301a6:	c3                   	ret    

f01301a7 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f01301a7:	55                   	push   %ebp
f01301a8:	89 e5                	mov    %esp,%ebp
f01301aa:	56                   	push   %esi
f01301ab:	53                   	push   %ebx
f01301ac:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01301af:	eb 17                	jmp    f01301c8 <vprintfmt+0x21>
			if (ch == '\0')
f01301b1:	85 db                	test   %ebx,%ebx
f01301b3:	0f 84 af 03 00 00    	je     f0130568 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f01301b9:	83 ec 08             	sub    $0x8,%esp
f01301bc:	ff 75 0c             	pushl  0xc(%ebp)
f01301bf:	53                   	push   %ebx
f01301c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01301c3:	ff d0                	call   *%eax
f01301c5:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01301c8:	8b 45 10             	mov    0x10(%ebp),%eax
f01301cb:	8d 50 01             	lea    0x1(%eax),%edx
f01301ce:	89 55 10             	mov    %edx,0x10(%ebp)
f01301d1:	8a 00                	mov    (%eax),%al
f01301d3:	0f b6 d8             	movzbl %al,%ebx
f01301d6:	83 fb 25             	cmp    $0x25,%ebx
f01301d9:	75 d6                	jne    f01301b1 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f01301db:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f01301df:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f01301e6:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f01301ed:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f01301f4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f01301fb:	8b 45 10             	mov    0x10(%ebp),%eax
f01301fe:	8d 50 01             	lea    0x1(%eax),%edx
f0130201:	89 55 10             	mov    %edx,0x10(%ebp)
f0130204:	8a 00                	mov    (%eax),%al
f0130206:	0f b6 d8             	movzbl %al,%ebx
f0130209:	8d 43 dd             	lea    -0x23(%ebx),%eax
f013020c:	83 f8 55             	cmp    $0x55,%eax
f013020f:	0f 87 2b 03 00 00    	ja     f0130540 <vprintfmt+0x399>
f0130215:	8b 04 85 38 c8 13 f0 	mov    -0xfec37c8(,%eax,4),%eax
f013021c:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f013021e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130222:	eb d7                	jmp    f01301fb <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130224:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130228:	eb d1                	jmp    f01301fb <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f013022a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130231:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130234:	89 d0                	mov    %edx,%eax
f0130236:	c1 e0 02             	shl    $0x2,%eax
f0130239:	01 d0                	add    %edx,%eax
f013023b:	01 c0                	add    %eax,%eax
f013023d:	01 d8                	add    %ebx,%eax
f013023f:	83 e8 30             	sub    $0x30,%eax
f0130242:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130245:	8b 45 10             	mov    0x10(%ebp),%eax
f0130248:	8a 00                	mov    (%eax),%al
f013024a:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f013024d:	83 fb 2f             	cmp    $0x2f,%ebx
f0130250:	7e 3e                	jle    f0130290 <vprintfmt+0xe9>
f0130252:	83 fb 39             	cmp    $0x39,%ebx
f0130255:	7f 39                	jg     f0130290 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130257:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f013025a:	eb d5                	jmp    f0130231 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f013025c:	8b 45 14             	mov    0x14(%ebp),%eax
f013025f:	83 c0 04             	add    $0x4,%eax
f0130262:	89 45 14             	mov    %eax,0x14(%ebp)
f0130265:	8b 45 14             	mov    0x14(%ebp),%eax
f0130268:	83 e8 04             	sub    $0x4,%eax
f013026b:	8b 00                	mov    (%eax),%eax
f013026d:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130270:	eb 1f                	jmp    f0130291 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130272:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130276:	79 83                	jns    f01301fb <vprintfmt+0x54>
				width = 0;
f0130278:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f013027f:	e9 77 ff ff ff       	jmp    f01301fb <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0130284:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f013028b:	e9 6b ff ff ff       	jmp    f01301fb <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130290:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130291:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130295:	0f 89 60 ff ff ff    	jns    f01301fb <vprintfmt+0x54>
				width = precision, precision = -1;
f013029b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013029e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01302a1:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f01302a8:	e9 4e ff ff ff       	jmp    f01301fb <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f01302ad:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f01302b0:	e9 46 ff ff ff       	jmp    f01301fb <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f01302b5:	8b 45 14             	mov    0x14(%ebp),%eax
f01302b8:	83 c0 04             	add    $0x4,%eax
f01302bb:	89 45 14             	mov    %eax,0x14(%ebp)
f01302be:	8b 45 14             	mov    0x14(%ebp),%eax
f01302c1:	83 e8 04             	sub    $0x4,%eax
f01302c4:	8b 00                	mov    (%eax),%eax
f01302c6:	83 ec 08             	sub    $0x8,%esp
f01302c9:	ff 75 0c             	pushl  0xc(%ebp)
f01302cc:	50                   	push   %eax
f01302cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01302d0:	ff d0                	call   *%eax
f01302d2:	83 c4 10             	add    $0x10,%esp
			break;
f01302d5:	e9 89 02 00 00       	jmp    f0130563 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f01302da:	8b 45 14             	mov    0x14(%ebp),%eax
f01302dd:	83 c0 04             	add    $0x4,%eax
f01302e0:	89 45 14             	mov    %eax,0x14(%ebp)
f01302e3:	8b 45 14             	mov    0x14(%ebp),%eax
f01302e6:	83 e8 04             	sub    $0x4,%eax
f01302e9:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f01302eb:	85 db                	test   %ebx,%ebx
f01302ed:	79 02                	jns    f01302f1 <vprintfmt+0x14a>
				err = -err;
f01302ef:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f01302f1:	83 fb 64             	cmp    $0x64,%ebx
f01302f4:	7f 0b                	jg     f0130301 <vprintfmt+0x15a>
f01302f6:	8b 34 9d 80 c6 13 f0 	mov    -0xfec3980(,%ebx,4),%esi
f01302fd:	85 f6                	test   %esi,%esi
f01302ff:	75 19                	jne    f013031a <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0130301:	53                   	push   %ebx
f0130302:	68 25 c8 13 f0       	push   $0xf013c825
f0130307:	ff 75 0c             	pushl  0xc(%ebp)
f013030a:	ff 75 08             	pushl  0x8(%ebp)
f013030d:	e8 5e 02 00 00       	call   f0130570 <printfmt>
f0130312:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0130315:	e9 49 02 00 00       	jmp    f0130563 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f013031a:	56                   	push   %esi
f013031b:	68 2e c8 13 f0       	push   $0xf013c82e
f0130320:	ff 75 0c             	pushl  0xc(%ebp)
f0130323:	ff 75 08             	pushl  0x8(%ebp)
f0130326:	e8 45 02 00 00       	call   f0130570 <printfmt>
f013032b:	83 c4 10             	add    $0x10,%esp
			break;
f013032e:	e9 30 02 00 00       	jmp    f0130563 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0130333:	8b 45 14             	mov    0x14(%ebp),%eax
f0130336:	83 c0 04             	add    $0x4,%eax
f0130339:	89 45 14             	mov    %eax,0x14(%ebp)
f013033c:	8b 45 14             	mov    0x14(%ebp),%eax
f013033f:	83 e8 04             	sub    $0x4,%eax
f0130342:	8b 30                	mov    (%eax),%esi
f0130344:	85 f6                	test   %esi,%esi
f0130346:	75 05                	jne    f013034d <vprintfmt+0x1a6>
				p = "(null)";
f0130348:	be 31 c8 13 f0       	mov    $0xf013c831,%esi
			if (width > 0 && padc != '-')
f013034d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130351:	7e 6d                	jle    f01303c0 <vprintfmt+0x219>
f0130353:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0130357:	74 67                	je     f01303c0 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0130359:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013035c:	83 ec 08             	sub    $0x8,%esp
f013035f:	50                   	push   %eax
f0130360:	56                   	push   %esi
f0130361:	e8 12 05 00 00       	call   f0130878 <strnlen>
f0130366:	83 c4 10             	add    $0x10,%esp
f0130369:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f013036c:	eb 16                	jmp    f0130384 <vprintfmt+0x1dd>
					putch(padc, putdat);
f013036e:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0130372:	83 ec 08             	sub    $0x8,%esp
f0130375:	ff 75 0c             	pushl  0xc(%ebp)
f0130378:	50                   	push   %eax
f0130379:	8b 45 08             	mov    0x8(%ebp),%eax
f013037c:	ff d0                	call   *%eax
f013037e:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0130381:	ff 4d e4             	decl   -0x1c(%ebp)
f0130384:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130388:	7f e4                	jg     f013036e <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013038a:	eb 34                	jmp    f01303c0 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f013038c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130390:	74 1c                	je     f01303ae <vprintfmt+0x207>
f0130392:	83 fb 1f             	cmp    $0x1f,%ebx
f0130395:	7e 05                	jle    f013039c <vprintfmt+0x1f5>
f0130397:	83 fb 7e             	cmp    $0x7e,%ebx
f013039a:	7e 12                	jle    f01303ae <vprintfmt+0x207>
					putch('?', putdat);
f013039c:	83 ec 08             	sub    $0x8,%esp
f013039f:	ff 75 0c             	pushl  0xc(%ebp)
f01303a2:	6a 3f                	push   $0x3f
f01303a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01303a7:	ff d0                	call   *%eax
f01303a9:	83 c4 10             	add    $0x10,%esp
f01303ac:	eb 0f                	jmp    f01303bd <vprintfmt+0x216>
				else
					putch(ch, putdat);
f01303ae:	83 ec 08             	sub    $0x8,%esp
f01303b1:	ff 75 0c             	pushl  0xc(%ebp)
f01303b4:	53                   	push   %ebx
f01303b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01303b8:	ff d0                	call   *%eax
f01303ba:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01303bd:	ff 4d e4             	decl   -0x1c(%ebp)
f01303c0:	89 f0                	mov    %esi,%eax
f01303c2:	8d 70 01             	lea    0x1(%eax),%esi
f01303c5:	8a 00                	mov    (%eax),%al
f01303c7:	0f be d8             	movsbl %al,%ebx
f01303ca:	85 db                	test   %ebx,%ebx
f01303cc:	74 24                	je     f01303f2 <vprintfmt+0x24b>
f01303ce:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01303d2:	78 b8                	js     f013038c <vprintfmt+0x1e5>
f01303d4:	ff 4d e0             	decl   -0x20(%ebp)
f01303d7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01303db:	79 af                	jns    f013038c <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01303dd:	eb 13                	jmp    f01303f2 <vprintfmt+0x24b>
				putch(' ', putdat);
f01303df:	83 ec 08             	sub    $0x8,%esp
f01303e2:	ff 75 0c             	pushl  0xc(%ebp)
f01303e5:	6a 20                	push   $0x20
f01303e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01303ea:	ff d0                	call   *%eax
f01303ec:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01303ef:	ff 4d e4             	decl   -0x1c(%ebp)
f01303f2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01303f6:	7f e7                	jg     f01303df <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f01303f8:	e9 66 01 00 00       	jmp    f0130563 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f01303fd:	83 ec 08             	sub    $0x8,%esp
f0130400:	ff 75 e8             	pushl  -0x18(%ebp)
f0130403:	8d 45 14             	lea    0x14(%ebp),%eax
f0130406:	50                   	push   %eax
f0130407:	e8 3c fd ff ff       	call   f0130148 <getint>
f013040c:	83 c4 10             	add    $0x10,%esp
f013040f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130412:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0130415:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013041b:	85 d2                	test   %edx,%edx
f013041d:	79 23                	jns    f0130442 <vprintfmt+0x29b>
				putch('-', putdat);
f013041f:	83 ec 08             	sub    $0x8,%esp
f0130422:	ff 75 0c             	pushl  0xc(%ebp)
f0130425:	6a 2d                	push   $0x2d
f0130427:	8b 45 08             	mov    0x8(%ebp),%eax
f013042a:	ff d0                	call   *%eax
f013042c:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f013042f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130432:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130435:	f7 d8                	neg    %eax
f0130437:	83 d2 00             	adc    $0x0,%edx
f013043a:	f7 da                	neg    %edx
f013043c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013043f:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0130442:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130449:	e9 bc 00 00 00       	jmp    f013050a <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f013044e:	83 ec 08             	sub    $0x8,%esp
f0130451:	ff 75 e8             	pushl  -0x18(%ebp)
f0130454:	8d 45 14             	lea    0x14(%ebp),%eax
f0130457:	50                   	push   %eax
f0130458:	e8 84 fc ff ff       	call   f01300e1 <getuint>
f013045d:	83 c4 10             	add    $0x10,%esp
f0130460:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130463:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0130466:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f013046d:	e9 98 00 00 00       	jmp    f013050a <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0130472:	83 ec 08             	sub    $0x8,%esp
f0130475:	ff 75 0c             	pushl  0xc(%ebp)
f0130478:	6a 58                	push   $0x58
f013047a:	8b 45 08             	mov    0x8(%ebp),%eax
f013047d:	ff d0                	call   *%eax
f013047f:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130482:	83 ec 08             	sub    $0x8,%esp
f0130485:	ff 75 0c             	pushl  0xc(%ebp)
f0130488:	6a 58                	push   $0x58
f013048a:	8b 45 08             	mov    0x8(%ebp),%eax
f013048d:	ff d0                	call   *%eax
f013048f:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130492:	83 ec 08             	sub    $0x8,%esp
f0130495:	ff 75 0c             	pushl  0xc(%ebp)
f0130498:	6a 58                	push   $0x58
f013049a:	8b 45 08             	mov    0x8(%ebp),%eax
f013049d:	ff d0                	call   *%eax
f013049f:	83 c4 10             	add    $0x10,%esp
			break;
f01304a2:	e9 bc 00 00 00       	jmp    f0130563 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f01304a7:	83 ec 08             	sub    $0x8,%esp
f01304aa:	ff 75 0c             	pushl  0xc(%ebp)
f01304ad:	6a 30                	push   $0x30
f01304af:	8b 45 08             	mov    0x8(%ebp),%eax
f01304b2:	ff d0                	call   *%eax
f01304b4:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f01304b7:	83 ec 08             	sub    $0x8,%esp
f01304ba:	ff 75 0c             	pushl  0xc(%ebp)
f01304bd:	6a 78                	push   $0x78
f01304bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01304c2:	ff d0                	call   *%eax
f01304c4:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f01304c7:	8b 45 14             	mov    0x14(%ebp),%eax
f01304ca:	83 c0 04             	add    $0x4,%eax
f01304cd:	89 45 14             	mov    %eax,0x14(%ebp)
f01304d0:	8b 45 14             	mov    0x14(%ebp),%eax
f01304d3:	83 e8 04             	sub    $0x4,%eax
f01304d6:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01304d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01304db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f01304e2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f01304e9:	eb 1f                	jmp    f013050a <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f01304eb:	83 ec 08             	sub    $0x8,%esp
f01304ee:	ff 75 e8             	pushl  -0x18(%ebp)
f01304f1:	8d 45 14             	lea    0x14(%ebp),%eax
f01304f4:	50                   	push   %eax
f01304f5:	e8 e7 fb ff ff       	call   f01300e1 <getuint>
f01304fa:	83 c4 10             	add    $0x10,%esp
f01304fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130500:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0130503:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f013050a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f013050e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130511:	83 ec 04             	sub    $0x4,%esp
f0130514:	52                   	push   %edx
f0130515:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130518:	50                   	push   %eax
f0130519:	ff 75 f4             	pushl  -0xc(%ebp)
f013051c:	ff 75 f0             	pushl  -0x10(%ebp)
f013051f:	ff 75 0c             	pushl  0xc(%ebp)
f0130522:	ff 75 08             	pushl  0x8(%ebp)
f0130525:	e8 00 fb ff ff       	call   f013002a <printnum>
f013052a:	83 c4 20             	add    $0x20,%esp
			break;
f013052d:	eb 34                	jmp    f0130563 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f013052f:	83 ec 08             	sub    $0x8,%esp
f0130532:	ff 75 0c             	pushl  0xc(%ebp)
f0130535:	53                   	push   %ebx
f0130536:	8b 45 08             	mov    0x8(%ebp),%eax
f0130539:	ff d0                	call   *%eax
f013053b:	83 c4 10             	add    $0x10,%esp
			break;
f013053e:	eb 23                	jmp    f0130563 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130540:	83 ec 08             	sub    $0x8,%esp
f0130543:	ff 75 0c             	pushl  0xc(%ebp)
f0130546:	6a 25                	push   $0x25
f0130548:	8b 45 08             	mov    0x8(%ebp),%eax
f013054b:	ff d0                	call   *%eax
f013054d:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130550:	ff 4d 10             	decl   0x10(%ebp)
f0130553:	eb 03                	jmp    f0130558 <vprintfmt+0x3b1>
f0130555:	ff 4d 10             	decl   0x10(%ebp)
f0130558:	8b 45 10             	mov    0x10(%ebp),%eax
f013055b:	48                   	dec    %eax
f013055c:	8a 00                	mov    (%eax),%al
f013055e:	3c 25                	cmp    $0x25,%al
f0130560:	75 f3                	jne    f0130555 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130562:	90                   	nop
		}
	}
f0130563:	e9 47 fc ff ff       	jmp    f01301af <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130568:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130569:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013056c:	5b                   	pop    %ebx
f013056d:	5e                   	pop    %esi
f013056e:	5d                   	pop    %ebp
f013056f:	c3                   	ret    

f0130570 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130570:	55                   	push   %ebp
f0130571:	89 e5                	mov    %esp,%ebp
f0130573:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0130576:	8d 45 10             	lea    0x10(%ebp),%eax
f0130579:	83 c0 04             	add    $0x4,%eax
f013057c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f013057f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130582:	ff 75 f4             	pushl  -0xc(%ebp)
f0130585:	50                   	push   %eax
f0130586:	ff 75 0c             	pushl  0xc(%ebp)
f0130589:	ff 75 08             	pushl  0x8(%ebp)
f013058c:	e8 16 fc ff ff       	call   f01301a7 <vprintfmt>
f0130591:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0130594:	90                   	nop
f0130595:	c9                   	leave  
f0130596:	c3                   	ret    

f0130597 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0130597:	55                   	push   %ebp
f0130598:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f013059a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013059d:	8b 40 08             	mov    0x8(%eax),%eax
f01305a0:	8d 50 01             	lea    0x1(%eax),%edx
f01305a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305a6:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f01305a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305ac:	8b 10                	mov    (%eax),%edx
f01305ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305b1:	8b 40 04             	mov    0x4(%eax),%eax
f01305b4:	39 c2                	cmp    %eax,%edx
f01305b6:	73 12                	jae    f01305ca <sprintputch+0x33>
		*b->buf++ = ch;
f01305b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305bb:	8b 00                	mov    (%eax),%eax
f01305bd:	8d 48 01             	lea    0x1(%eax),%ecx
f01305c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01305c3:	89 0a                	mov    %ecx,(%edx)
f01305c5:	8b 55 08             	mov    0x8(%ebp),%edx
f01305c8:	88 10                	mov    %dl,(%eax)
}
f01305ca:	90                   	nop
f01305cb:	5d                   	pop    %ebp
f01305cc:	c3                   	ret    

f01305cd <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01305cd:	55                   	push   %ebp
f01305ce:	89 e5                	mov    %esp,%ebp
f01305d0:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f01305d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01305d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01305d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305dc:	8d 50 ff             	lea    -0x1(%eax),%edx
f01305df:	8b 45 08             	mov    0x8(%ebp),%eax
f01305e2:	01 d0                	add    %edx,%eax
f01305e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01305e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01305ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01305f2:	74 06                	je     f01305fa <vsnprintf+0x2d>
f01305f4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01305f8:	7f 07                	jg     f0130601 <vsnprintf+0x34>
		return -E_INVAL;
f01305fa:	b8 03 00 00 00       	mov    $0x3,%eax
f01305ff:	eb 20                	jmp    f0130621 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0130601:	ff 75 14             	pushl  0x14(%ebp)
f0130604:	ff 75 10             	pushl  0x10(%ebp)
f0130607:	8d 45 ec             	lea    -0x14(%ebp),%eax
f013060a:	50                   	push   %eax
f013060b:	68 97 05 13 f0       	push   $0xf0130597
f0130610:	e8 92 fb ff ff       	call   f01301a7 <vprintfmt>
f0130615:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0130618:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013061b:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f013061e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0130621:	c9                   	leave  
f0130622:	c3                   	ret    

f0130623 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0130623:	55                   	push   %ebp
f0130624:	89 e5                	mov    %esp,%ebp
f0130626:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0130629:	8d 45 10             	lea    0x10(%ebp),%eax
f013062c:	83 c0 04             	add    $0x4,%eax
f013062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0130632:	8b 45 10             	mov    0x10(%ebp),%eax
f0130635:	ff 75 f4             	pushl  -0xc(%ebp)
f0130638:	50                   	push   %eax
f0130639:	ff 75 0c             	pushl  0xc(%ebp)
f013063c:	ff 75 08             	pushl  0x8(%ebp)
f013063f:	e8 89 ff ff ff       	call   f01305cd <vsnprintf>
f0130644:	83 c4 10             	add    $0x10,%esp
f0130647:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f013064a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f013064d:	c9                   	leave  
f013064e:	c3                   	ret    

f013064f <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f013064f:	55                   	push   %ebp
f0130650:	89 e5                	mov    %esp,%ebp
f0130652:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0130655:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130659:	74 13                	je     f013066e <readline+0x1f>
		cprintf("%s", prompt);
f013065b:	83 ec 08             	sub    $0x8,%esp
f013065e:	ff 75 08             	pushl  0x8(%ebp)
f0130661:	68 90 c9 13 f0       	push   $0xf013c990
f0130666:	e8 c2 05 fd ff       	call   f0100c2d <cprintf>
f013066b:	83 c4 10             	add    $0x10,%esp

	i = 0;
f013066e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130675:	83 ec 0c             	sub    $0xc,%esp
f0130678:	6a 00                	push   $0x0
f013067a:	e8 5b 05 fd ff       	call   f0100bda <iscons>
f013067f:	83 c4 10             	add    $0x10,%esp
f0130682:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130685:	e8 37 05 fd ff       	call   f0100bc1 <getchar>
f013068a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013068d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130691:	79 22                	jns    f01306b5 <readline+0x66>
			if (c != -E_EOF)
f0130693:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130697:	0f 84 ad 00 00 00    	je     f013074a <readline+0xfb>
				cprintf("read error: %e\n", c);
f013069d:	83 ec 08             	sub    $0x8,%esp
f01306a0:	ff 75 ec             	pushl  -0x14(%ebp)
f01306a3:	68 93 c9 13 f0       	push   $0xf013c993
f01306a8:	e8 80 05 fd ff       	call   f0100c2d <cprintf>
f01306ad:	83 c4 10             	add    $0x10,%esp
			return;
f01306b0:	e9 95 00 00 00       	jmp    f013074a <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01306b5:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01306b9:	7e 34                	jle    f01306ef <readline+0xa0>
f01306bb:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01306c2:	7f 2b                	jg     f01306ef <readline+0xa0>
			if (echoing)
f01306c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01306c8:	74 0e                	je     f01306d8 <readline+0x89>
				cputchar(c);
f01306ca:	83 ec 0c             	sub    $0xc,%esp
f01306cd:	ff 75 ec             	pushl  -0x14(%ebp)
f01306d0:	e8 d5 04 fd ff       	call   f0100baa <cputchar>
f01306d5:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01306d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01306db:	8d 50 01             	lea    0x1(%eax),%edx
f01306de:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01306e1:	89 c2                	mov    %eax,%edx
f01306e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01306e6:	01 d0                	add    %edx,%eax
f01306e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01306eb:	88 10                	mov    %dl,(%eax)
f01306ed:	eb 56                	jmp    f0130745 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01306ef:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01306f3:	75 1f                	jne    f0130714 <readline+0xc5>
f01306f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01306f9:	7e 19                	jle    f0130714 <readline+0xc5>
			if (echoing)
f01306fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01306ff:	74 0e                	je     f013070f <readline+0xc0>
				cputchar(c);
f0130701:	83 ec 0c             	sub    $0xc,%esp
f0130704:	ff 75 ec             	pushl  -0x14(%ebp)
f0130707:	e8 9e 04 fd ff       	call   f0100baa <cputchar>
f013070c:	83 c4 10             	add    $0x10,%esp

			i--;
f013070f:	ff 4d f4             	decl   -0xc(%ebp)
f0130712:	eb 31                	jmp    f0130745 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0130714:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130718:	74 0a                	je     f0130724 <readline+0xd5>
f013071a:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f013071e:	0f 85 61 ff ff ff    	jne    f0130685 <readline+0x36>
			if (echoing)
f0130724:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130728:	74 0e                	je     f0130738 <readline+0xe9>
				cputchar(c);
f013072a:	83 ec 0c             	sub    $0xc,%esp
f013072d:	ff 75 ec             	pushl  -0x14(%ebp)
f0130730:	e8 75 04 fd ff       	call   f0100baa <cputchar>
f0130735:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130738:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013073b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013073e:	01 d0                	add    %edx,%eax
f0130740:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0130743:	eb 06                	jmp    f013074b <readline+0xfc>
		}
	}
f0130745:	e9 3b ff ff ff       	jmp    f0130685 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f013074a:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f013074b:	c9                   	leave  
f013074c:	c3                   	ret    

f013074d <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f013074d:	55                   	push   %ebp
f013074e:	89 e5                	mov    %esp,%ebp
f0130750:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0130753:	e8 11 bf fd ff       	call   f010c669 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0130758:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013075c:	74 13                	je     f0130771 <atomic_readline+0x24>
		cprintf("%s", prompt);
f013075e:	83 ec 08             	sub    $0x8,%esp
f0130761:	ff 75 08             	pushl  0x8(%ebp)
f0130764:	68 90 c9 13 f0       	push   $0xf013c990
f0130769:	e8 bf 04 fd ff       	call   f0100c2d <cprintf>
f013076e:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130771:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130778:	83 ec 0c             	sub    $0xc,%esp
f013077b:	6a 00                	push   $0x0
f013077d:	e8 58 04 fd ff       	call   f0100bda <iscons>
f0130782:	83 c4 10             	add    $0x10,%esp
f0130785:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130788:	e8 34 04 fd ff       	call   f0100bc1 <getchar>
f013078d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130790:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130794:	79 23                	jns    f01307b9 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0130796:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f013079a:	74 13                	je     f01307af <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f013079c:	83 ec 08             	sub    $0x8,%esp
f013079f:	ff 75 ec             	pushl  -0x14(%ebp)
f01307a2:	68 93 c9 13 f0       	push   $0xf013c993
f01307a7:	e8 81 04 fd ff       	call   f0100c2d <cprintf>
f01307ac:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f01307af:	e8 cf be fd ff       	call   f010c683 <sys_enable_interrupt>
			return;
f01307b4:	e9 9a 00 00 00       	jmp    f0130853 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01307b9:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01307bd:	7e 34                	jle    f01307f3 <atomic_readline+0xa6>
f01307bf:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01307c6:	7f 2b                	jg     f01307f3 <atomic_readline+0xa6>
			if (echoing)
f01307c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01307cc:	74 0e                	je     f01307dc <atomic_readline+0x8f>
				cputchar(c);
f01307ce:	83 ec 0c             	sub    $0xc,%esp
f01307d1:	ff 75 ec             	pushl  -0x14(%ebp)
f01307d4:	e8 d1 03 fd ff       	call   f0100baa <cputchar>
f01307d9:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01307dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01307df:	8d 50 01             	lea    0x1(%eax),%edx
f01307e2:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01307e5:	89 c2                	mov    %eax,%edx
f01307e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01307ea:	01 d0                	add    %edx,%eax
f01307ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01307ef:	88 10                	mov    %dl,(%eax)
f01307f1:	eb 5b                	jmp    f013084e <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01307f3:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01307f7:	75 1f                	jne    f0130818 <atomic_readline+0xcb>
f01307f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01307fd:	7e 19                	jle    f0130818 <atomic_readline+0xcb>
			if (echoing)
f01307ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130803:	74 0e                	je     f0130813 <atomic_readline+0xc6>
				cputchar(c);
f0130805:	83 ec 0c             	sub    $0xc,%esp
f0130808:	ff 75 ec             	pushl  -0x14(%ebp)
f013080b:	e8 9a 03 fd ff       	call   f0100baa <cputchar>
f0130810:	83 c4 10             	add    $0x10,%esp
			i--;
f0130813:	ff 4d f4             	decl   -0xc(%ebp)
f0130816:	eb 36                	jmp    f013084e <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0130818:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f013081c:	74 0a                	je     f0130828 <atomic_readline+0xdb>
f013081e:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130822:	0f 85 60 ff ff ff    	jne    f0130788 <atomic_readline+0x3b>
			if (echoing)
f0130828:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013082c:	74 0e                	je     f013083c <atomic_readline+0xef>
				cputchar(c);
f013082e:	83 ec 0c             	sub    $0xc,%esp
f0130831:	ff 75 ec             	pushl  -0x14(%ebp)
f0130834:	e8 71 03 fd ff       	call   f0100baa <cputchar>
f0130839:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f013083c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013083f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130842:	01 d0                	add    %edx,%eax
f0130844:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130847:	e8 37 be fd ff       	call   f010c683 <sys_enable_interrupt>
			return;
f013084c:	eb 05                	jmp    f0130853 <atomic_readline+0x106>
		}
	}
f013084e:	e9 35 ff ff ff       	jmp    f0130788 <atomic_readline+0x3b>
}
f0130853:	c9                   	leave  
f0130854:	c3                   	ret    

f0130855 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0130855:	55                   	push   %ebp
f0130856:	89 e5                	mov    %esp,%ebp
f0130858:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f013085b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130862:	eb 06                	jmp    f013086a <strlen+0x15>
		n++;
f0130864:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0130867:	ff 45 08             	incl   0x8(%ebp)
f013086a:	8b 45 08             	mov    0x8(%ebp),%eax
f013086d:	8a 00                	mov    (%eax),%al
f013086f:	84 c0                	test   %al,%al
f0130871:	75 f1                	jne    f0130864 <strlen+0xf>
		n++;
	return n;
f0130873:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130876:	c9                   	leave  
f0130877:	c3                   	ret    

f0130878 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130878:	55                   	push   %ebp
f0130879:	89 e5                	mov    %esp,%ebp
f013087b:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f013087e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130885:	eb 09                	jmp    f0130890 <strnlen+0x18>
		n++;
f0130887:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f013088a:	ff 45 08             	incl   0x8(%ebp)
f013088d:	ff 4d 0c             	decl   0xc(%ebp)
f0130890:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130894:	74 09                	je     f013089f <strnlen+0x27>
f0130896:	8b 45 08             	mov    0x8(%ebp),%eax
f0130899:	8a 00                	mov    (%eax),%al
f013089b:	84 c0                	test   %al,%al
f013089d:	75 e8                	jne    f0130887 <strnlen+0xf>
		n++;
	return n;
f013089f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01308a2:	c9                   	leave  
f01308a3:	c3                   	ret    

f01308a4 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01308a4:	55                   	push   %ebp
f01308a5:	89 e5                	mov    %esp,%ebp
f01308a7:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f01308aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01308ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f01308b0:	90                   	nop
f01308b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01308b4:	8d 50 01             	lea    0x1(%eax),%edx
f01308b7:	89 55 08             	mov    %edx,0x8(%ebp)
f01308ba:	8b 55 0c             	mov    0xc(%ebp),%edx
f01308bd:	8d 4a 01             	lea    0x1(%edx),%ecx
f01308c0:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01308c3:	8a 12                	mov    (%edx),%dl
f01308c5:	88 10                	mov    %dl,(%eax)
f01308c7:	8a 00                	mov    (%eax),%al
f01308c9:	84 c0                	test   %al,%al
f01308cb:	75 e4                	jne    f01308b1 <strcpy+0xd>
		/* do nothing */;
	return ret;
f01308cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01308d0:	c9                   	leave  
f01308d1:	c3                   	ret    

f01308d2 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f01308d2:	55                   	push   %ebp
f01308d3:	89 e5                	mov    %esp,%ebp
f01308d5:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f01308d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01308db:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01308de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01308e5:	eb 1f                	jmp    f0130906 <strncpy+0x34>
		*dst++ = *src;
f01308e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01308ea:	8d 50 01             	lea    0x1(%eax),%edx
f01308ed:	89 55 08             	mov    %edx,0x8(%ebp)
f01308f0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01308f3:	8a 12                	mov    (%edx),%dl
f01308f5:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01308f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308fa:	8a 00                	mov    (%eax),%al
f01308fc:	84 c0                	test   %al,%al
f01308fe:	74 03                	je     f0130903 <strncpy+0x31>
			src++;
f0130900:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0130903:	ff 45 fc             	incl   -0x4(%ebp)
f0130906:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130909:	3b 45 10             	cmp    0x10(%ebp),%eax
f013090c:	72 d9                	jb     f01308e7 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f013090e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130911:	c9                   	leave  
f0130912:	c3                   	ret    

f0130913 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0130913:	55                   	push   %ebp
f0130914:	89 e5                	mov    %esp,%ebp
f0130916:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0130919:	8b 45 08             	mov    0x8(%ebp),%eax
f013091c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f013091f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130923:	74 30                	je     f0130955 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0130925:	eb 16                	jmp    f013093d <strlcpy+0x2a>
			*dst++ = *src++;
f0130927:	8b 45 08             	mov    0x8(%ebp),%eax
f013092a:	8d 50 01             	lea    0x1(%eax),%edx
f013092d:	89 55 08             	mov    %edx,0x8(%ebp)
f0130930:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130933:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130936:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130939:	8a 12                	mov    (%edx),%dl
f013093b:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f013093d:	ff 4d 10             	decl   0x10(%ebp)
f0130940:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130944:	74 09                	je     f013094f <strlcpy+0x3c>
f0130946:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130949:	8a 00                	mov    (%eax),%al
f013094b:	84 c0                	test   %al,%al
f013094d:	75 d8                	jne    f0130927 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f013094f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130952:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0130955:	8b 55 08             	mov    0x8(%ebp),%edx
f0130958:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013095b:	29 c2                	sub    %eax,%edx
f013095d:	89 d0                	mov    %edx,%eax
}
f013095f:	c9                   	leave  
f0130960:	c3                   	ret    

f0130961 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130961:	55                   	push   %ebp
f0130962:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0130964:	eb 06                	jmp    f013096c <strcmp+0xb>
		p++, q++;
f0130966:	ff 45 08             	incl   0x8(%ebp)
f0130969:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f013096c:	8b 45 08             	mov    0x8(%ebp),%eax
f013096f:	8a 00                	mov    (%eax),%al
f0130971:	84 c0                	test   %al,%al
f0130973:	74 0e                	je     f0130983 <strcmp+0x22>
f0130975:	8b 45 08             	mov    0x8(%ebp),%eax
f0130978:	8a 10                	mov    (%eax),%dl
f013097a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013097d:	8a 00                	mov    (%eax),%al
f013097f:	38 c2                	cmp    %al,%dl
f0130981:	74 e3                	je     f0130966 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0130983:	8b 45 08             	mov    0x8(%ebp),%eax
f0130986:	8a 00                	mov    (%eax),%al
f0130988:	0f b6 d0             	movzbl %al,%edx
f013098b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013098e:	8a 00                	mov    (%eax),%al
f0130990:	0f b6 c0             	movzbl %al,%eax
f0130993:	29 c2                	sub    %eax,%edx
f0130995:	89 d0                	mov    %edx,%eax
}
f0130997:	5d                   	pop    %ebp
f0130998:	c3                   	ret    

f0130999 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0130999:	55                   	push   %ebp
f013099a:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f013099c:	eb 09                	jmp    f01309a7 <strncmp+0xe>
		n--, p++, q++;
f013099e:	ff 4d 10             	decl   0x10(%ebp)
f01309a1:	ff 45 08             	incl   0x8(%ebp)
f01309a4:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01309a7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01309ab:	74 17                	je     f01309c4 <strncmp+0x2b>
f01309ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01309b0:	8a 00                	mov    (%eax),%al
f01309b2:	84 c0                	test   %al,%al
f01309b4:	74 0e                	je     f01309c4 <strncmp+0x2b>
f01309b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01309b9:	8a 10                	mov    (%eax),%dl
f01309bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309be:	8a 00                	mov    (%eax),%al
f01309c0:	38 c2                	cmp    %al,%dl
f01309c2:	74 da                	je     f013099e <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f01309c4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01309c8:	75 07                	jne    f01309d1 <strncmp+0x38>
		return 0;
f01309ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01309cf:	eb 14                	jmp    f01309e5 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f01309d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01309d4:	8a 00                	mov    (%eax),%al
f01309d6:	0f b6 d0             	movzbl %al,%edx
f01309d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309dc:	8a 00                	mov    (%eax),%al
f01309de:	0f b6 c0             	movzbl %al,%eax
f01309e1:	29 c2                	sub    %eax,%edx
f01309e3:	89 d0                	mov    %edx,%eax
}
f01309e5:	5d                   	pop    %ebp
f01309e6:	c3                   	ret    

f01309e7 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01309e7:	55                   	push   %ebp
f01309e8:	89 e5                	mov    %esp,%ebp
f01309ea:	83 ec 04             	sub    $0x4,%esp
f01309ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309f0:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01309f3:	eb 12                	jmp    f0130a07 <strchr+0x20>
		if (*s == c)
f01309f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01309f8:	8a 00                	mov    (%eax),%al
f01309fa:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01309fd:	75 05                	jne    f0130a04 <strchr+0x1d>
			return (char *) s;
f01309ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a02:	eb 11                	jmp    f0130a15 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0130a04:	ff 45 08             	incl   0x8(%ebp)
f0130a07:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a0a:	8a 00                	mov    (%eax),%al
f0130a0c:	84 c0                	test   %al,%al
f0130a0e:	75 e5                	jne    f01309f5 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0130a10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130a15:	c9                   	leave  
f0130a16:	c3                   	ret    

f0130a17 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0130a17:	55                   	push   %ebp
f0130a18:	89 e5                	mov    %esp,%ebp
f0130a1a:	83 ec 04             	sub    $0x4,%esp
f0130a1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a20:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130a23:	eb 0d                	jmp    f0130a32 <strfind+0x1b>
		if (*s == c)
f0130a25:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a28:	8a 00                	mov    (%eax),%al
f0130a2a:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130a2d:	74 0e                	je     f0130a3d <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0130a2f:	ff 45 08             	incl   0x8(%ebp)
f0130a32:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a35:	8a 00                	mov    (%eax),%al
f0130a37:	84 c0                	test   %al,%al
f0130a39:	75 ea                	jne    f0130a25 <strfind+0xe>
f0130a3b:	eb 01                	jmp    f0130a3e <strfind+0x27>
		if (*s == c)
			break;
f0130a3d:	90                   	nop
	return (char *) s;
f0130a3e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130a41:	c9                   	leave  
f0130a42:	c3                   	ret    

f0130a43 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0130a43:	55                   	push   %ebp
f0130a44:	89 e5                	mov    %esp,%ebp
f0130a46:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0130a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130a4f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a52:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0130a55:	eb 0e                	jmp    f0130a65 <memset+0x22>
		*p++ = c;
f0130a57:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130a5a:	8d 50 01             	lea    0x1(%eax),%edx
f0130a5d:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130a60:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130a63:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0130a65:	ff 4d f8             	decl   -0x8(%ebp)
f0130a68:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0130a6c:	79 e9                	jns    f0130a57 <memset+0x14>
		*p++ = c;

	return v;
f0130a6e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130a71:	c9                   	leave  
f0130a72:	c3                   	ret    

f0130a73 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0130a73:	55                   	push   %ebp
f0130a74:	89 e5                	mov    %esp,%ebp
f0130a76:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130a79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a7c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130a7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a82:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0130a85:	eb 16                	jmp    f0130a9d <memcpy+0x2a>
		*d++ = *s++;
f0130a87:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130a8a:	8d 50 01             	lea    0x1(%eax),%edx
f0130a8d:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130a90:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130a93:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130a96:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130a99:	8a 12                	mov    (%edx),%dl
f0130a9b:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0130a9d:	8b 45 10             	mov    0x10(%ebp),%eax
f0130aa0:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130aa3:	89 55 10             	mov    %edx,0x10(%ebp)
f0130aa6:	85 c0                	test   %eax,%eax
f0130aa8:	75 dd                	jne    f0130a87 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0130aaa:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130aad:	c9                   	leave  
f0130aae:	c3                   	ret    

f0130aaf <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0130aaf:	55                   	push   %ebp
f0130ab0:	89 e5                	mov    %esp,%ebp
f0130ab2:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ab8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130abb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130abe:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0130ac1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ac4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130ac7:	73 50                	jae    f0130b19 <memmove+0x6a>
f0130ac9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130acc:	8b 45 10             	mov    0x10(%ebp),%eax
f0130acf:	01 d0                	add    %edx,%eax
f0130ad1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130ad4:	76 43                	jbe    f0130b19 <memmove+0x6a>
		s += n;
f0130ad6:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ad9:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0130adc:	8b 45 10             	mov    0x10(%ebp),%eax
f0130adf:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0130ae2:	eb 10                	jmp    f0130af4 <memmove+0x45>
			*--d = *--s;
f0130ae4:	ff 4d f8             	decl   -0x8(%ebp)
f0130ae7:	ff 4d fc             	decl   -0x4(%ebp)
f0130aea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130aed:	8a 10                	mov    (%eax),%dl
f0130aef:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130af2:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0130af4:	8b 45 10             	mov    0x10(%ebp),%eax
f0130af7:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130afa:	89 55 10             	mov    %edx,0x10(%ebp)
f0130afd:	85 c0                	test   %eax,%eax
f0130aff:	75 e3                	jne    f0130ae4 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0130b01:	eb 23                	jmp    f0130b26 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0130b03:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130b06:	8d 50 01             	lea    0x1(%eax),%edx
f0130b09:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130b0c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130b0f:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130b12:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130b15:	8a 12                	mov    (%edx),%dl
f0130b17:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0130b19:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b1c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130b1f:	89 55 10             	mov    %edx,0x10(%ebp)
f0130b22:	85 c0                	test   %eax,%eax
f0130b24:	75 dd                	jne    f0130b03 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0130b26:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130b29:	c9                   	leave  
f0130b2a:	c3                   	ret    

f0130b2b <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0130b2b:	55                   	push   %ebp
f0130b2c:	89 e5                	mov    %esp,%ebp
f0130b2e:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0130b31:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b34:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0130b37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130b3a:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0130b3d:	eb 2a                	jmp    f0130b69 <memcmp+0x3e>
		if (*s1 != *s2)
f0130b3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130b42:	8a 10                	mov    (%eax),%dl
f0130b44:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130b47:	8a 00                	mov    (%eax),%al
f0130b49:	38 c2                	cmp    %al,%dl
f0130b4b:	74 16                	je     f0130b63 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0130b4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130b50:	8a 00                	mov    (%eax),%al
f0130b52:	0f b6 d0             	movzbl %al,%edx
f0130b55:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130b58:	8a 00                	mov    (%eax),%al
f0130b5a:	0f b6 c0             	movzbl %al,%eax
f0130b5d:	29 c2                	sub    %eax,%edx
f0130b5f:	89 d0                	mov    %edx,%eax
f0130b61:	eb 18                	jmp    f0130b7b <memcmp+0x50>
		s1++, s2++;
f0130b63:	ff 45 fc             	incl   -0x4(%ebp)
f0130b66:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0130b69:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b6c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130b6f:	89 55 10             	mov    %edx,0x10(%ebp)
f0130b72:	85 c0                	test   %eax,%eax
f0130b74:	75 c9                	jne    f0130b3f <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0130b76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130b7b:	c9                   	leave  
f0130b7c:	c3                   	ret    

f0130b7d <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0130b7d:	55                   	push   %ebp
f0130b7e:	89 e5                	mov    %esp,%ebp
f0130b80:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0130b83:	8b 55 08             	mov    0x8(%ebp),%edx
f0130b86:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b89:	01 d0                	add    %edx,%eax
f0130b8b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0130b8e:	eb 15                	jmp    f0130ba5 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0130b90:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b93:	8a 00                	mov    (%eax),%al
f0130b95:	0f b6 d0             	movzbl %al,%edx
f0130b98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130b9b:	0f b6 c0             	movzbl %al,%eax
f0130b9e:	39 c2                	cmp    %eax,%edx
f0130ba0:	74 0d                	je     f0130baf <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0130ba2:	ff 45 08             	incl   0x8(%ebp)
f0130ba5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ba8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0130bab:	72 e3                	jb     f0130b90 <memfind+0x13>
f0130bad:	eb 01                	jmp    f0130bb0 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0130baf:	90                   	nop
	return (void *) s;
f0130bb0:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130bb3:	c9                   	leave  
f0130bb4:	c3                   	ret    

f0130bb5 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0130bb5:	55                   	push   %ebp
f0130bb6:	89 e5                	mov    %esp,%ebp
f0130bb8:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0130bbb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0130bc2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130bc9:	eb 03                	jmp    f0130bce <strtol+0x19>
		s++;
f0130bcb:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130bce:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bd1:	8a 00                	mov    (%eax),%al
f0130bd3:	3c 20                	cmp    $0x20,%al
f0130bd5:	74 f4                	je     f0130bcb <strtol+0x16>
f0130bd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bda:	8a 00                	mov    (%eax),%al
f0130bdc:	3c 09                	cmp    $0x9,%al
f0130bde:	74 eb                	je     f0130bcb <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0130be0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130be3:	8a 00                	mov    (%eax),%al
f0130be5:	3c 2b                	cmp    $0x2b,%al
f0130be7:	75 05                	jne    f0130bee <strtol+0x39>
		s++;
f0130be9:	ff 45 08             	incl   0x8(%ebp)
f0130bec:	eb 13                	jmp    f0130c01 <strtol+0x4c>
	else if (*s == '-')
f0130bee:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bf1:	8a 00                	mov    (%eax),%al
f0130bf3:	3c 2d                	cmp    $0x2d,%al
f0130bf5:	75 0a                	jne    f0130c01 <strtol+0x4c>
		s++, neg = 1;
f0130bf7:	ff 45 08             	incl   0x8(%ebp)
f0130bfa:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0130c01:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130c05:	74 06                	je     f0130c0d <strtol+0x58>
f0130c07:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0130c0b:	75 20                	jne    f0130c2d <strtol+0x78>
f0130c0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c10:	8a 00                	mov    (%eax),%al
f0130c12:	3c 30                	cmp    $0x30,%al
f0130c14:	75 17                	jne    f0130c2d <strtol+0x78>
f0130c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c19:	40                   	inc    %eax
f0130c1a:	8a 00                	mov    (%eax),%al
f0130c1c:	3c 78                	cmp    $0x78,%al
f0130c1e:	75 0d                	jne    f0130c2d <strtol+0x78>
		s += 2, base = 16;
f0130c20:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0130c24:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0130c2b:	eb 28                	jmp    f0130c55 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0130c2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130c31:	75 15                	jne    f0130c48 <strtol+0x93>
f0130c33:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c36:	8a 00                	mov    (%eax),%al
f0130c38:	3c 30                	cmp    $0x30,%al
f0130c3a:	75 0c                	jne    f0130c48 <strtol+0x93>
		s++, base = 8;
f0130c3c:	ff 45 08             	incl   0x8(%ebp)
f0130c3f:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0130c46:	eb 0d                	jmp    f0130c55 <strtol+0xa0>
	else if (base == 0)
f0130c48:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130c4c:	75 07                	jne    f0130c55 <strtol+0xa0>
		base = 10;
f0130c4e:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0130c55:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c58:	8a 00                	mov    (%eax),%al
f0130c5a:	3c 2f                	cmp    $0x2f,%al
f0130c5c:	7e 19                	jle    f0130c77 <strtol+0xc2>
f0130c5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c61:	8a 00                	mov    (%eax),%al
f0130c63:	3c 39                	cmp    $0x39,%al
f0130c65:	7f 10                	jg     f0130c77 <strtol+0xc2>
			dig = *s - '0';
f0130c67:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c6a:	8a 00                	mov    (%eax),%al
f0130c6c:	0f be c0             	movsbl %al,%eax
f0130c6f:	83 e8 30             	sub    $0x30,%eax
f0130c72:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130c75:	eb 42                	jmp    f0130cb9 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0130c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c7a:	8a 00                	mov    (%eax),%al
f0130c7c:	3c 60                	cmp    $0x60,%al
f0130c7e:	7e 19                	jle    f0130c99 <strtol+0xe4>
f0130c80:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c83:	8a 00                	mov    (%eax),%al
f0130c85:	3c 7a                	cmp    $0x7a,%al
f0130c87:	7f 10                	jg     f0130c99 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0130c89:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c8c:	8a 00                	mov    (%eax),%al
f0130c8e:	0f be c0             	movsbl %al,%eax
f0130c91:	83 e8 57             	sub    $0x57,%eax
f0130c94:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130c97:	eb 20                	jmp    f0130cb9 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0130c99:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c9c:	8a 00                	mov    (%eax),%al
f0130c9e:	3c 40                	cmp    $0x40,%al
f0130ca0:	7e 39                	jle    f0130cdb <strtol+0x126>
f0130ca2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ca5:	8a 00                	mov    (%eax),%al
f0130ca7:	3c 5a                	cmp    $0x5a,%al
f0130ca9:	7f 30                	jg     f0130cdb <strtol+0x126>
			dig = *s - 'A' + 10;
f0130cab:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cae:	8a 00                	mov    (%eax),%al
f0130cb0:	0f be c0             	movsbl %al,%eax
f0130cb3:	83 e8 37             	sub    $0x37,%eax
f0130cb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0130cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130cbc:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130cbf:	7d 19                	jge    f0130cda <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0130cc1:	ff 45 08             	incl   0x8(%ebp)
f0130cc4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130cc7:	0f af 45 10          	imul   0x10(%ebp),%eax
f0130ccb:	89 c2                	mov    %eax,%edx
f0130ccd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130cd0:	01 d0                	add    %edx,%eax
f0130cd2:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0130cd5:	e9 7b ff ff ff       	jmp    f0130c55 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0130cda:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0130cdb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130cdf:	74 08                	je     f0130ce9 <strtol+0x134>
		*endptr = (char *) s;
f0130ce1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ce4:	8b 55 08             	mov    0x8(%ebp),%edx
f0130ce7:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0130ce9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130ced:	74 07                	je     f0130cf6 <strtol+0x141>
f0130cef:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130cf2:	f7 d8                	neg    %eax
f0130cf4:	eb 03                	jmp    f0130cf9 <strtol+0x144>
f0130cf6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130cf9:	c9                   	leave  
f0130cfa:	c3                   	ret    

f0130cfb <ltostr>:

void
ltostr(long value, char *str)
{
f0130cfb:	55                   	push   %ebp
f0130cfc:	89 e5                	mov    %esp,%ebp
f0130cfe:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0130d01:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0130d08:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0130d0f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130d13:	79 13                	jns    f0130d28 <ltostr+0x2d>
	{
		neg = 1;
f0130d15:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0130d1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d1f:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0130d22:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0130d25:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0130d28:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d2b:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0130d30:	99                   	cltd   
f0130d31:	f7 f9                	idiv   %ecx
f0130d33:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0130d36:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130d39:	8d 50 01             	lea    0x1(%eax),%edx
f0130d3c:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130d3f:	89 c2                	mov    %eax,%edx
f0130d41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d44:	01 d0                	add    %edx,%eax
f0130d46:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130d49:	83 c2 30             	add    $0x30,%edx
f0130d4c:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0130d4e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130d51:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130d56:	f7 e9                	imul   %ecx
f0130d58:	c1 fa 02             	sar    $0x2,%edx
f0130d5b:	89 c8                	mov    %ecx,%eax
f0130d5d:	c1 f8 1f             	sar    $0x1f,%eax
f0130d60:	29 c2                	sub    %eax,%edx
f0130d62:	89 d0                	mov    %edx,%eax
f0130d64:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0130d67:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130d6a:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130d6f:	f7 e9                	imul   %ecx
f0130d71:	c1 fa 02             	sar    $0x2,%edx
f0130d74:	89 c8                	mov    %ecx,%eax
f0130d76:	c1 f8 1f             	sar    $0x1f,%eax
f0130d79:	29 c2                	sub    %eax,%edx
f0130d7b:	89 d0                	mov    %edx,%eax
f0130d7d:	c1 e0 02             	shl    $0x2,%eax
f0130d80:	01 d0                	add    %edx,%eax
f0130d82:	01 c0                	add    %eax,%eax
f0130d84:	29 c1                	sub    %eax,%ecx
f0130d86:	89 ca                	mov    %ecx,%edx
f0130d88:	85 d2                	test   %edx,%edx
f0130d8a:	75 9c                	jne    f0130d28 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0130d8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0130d93:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130d96:	48                   	dec    %eax
f0130d97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0130d9a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130d9e:	74 3d                	je     f0130ddd <ltostr+0xe2>
		start = 1 ;
f0130da0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0130da7:	eb 34                	jmp    f0130ddd <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0130da9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130dac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130daf:	01 d0                	add    %edx,%eax
f0130db1:	8a 00                	mov    (%eax),%al
f0130db3:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0130db6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130db9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130dbc:	01 c2                	add    %eax,%edx
f0130dbe:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130dc1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130dc4:	01 c8                	add    %ecx,%eax
f0130dc6:	8a 00                	mov    (%eax),%al
f0130dc8:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0130dca:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130dcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130dd0:	01 c2                	add    %eax,%edx
f0130dd2:	8a 45 eb             	mov    -0x15(%ebp),%al
f0130dd5:	88 02                	mov    %al,(%edx)
		start++ ;
f0130dd7:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0130dda:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0130ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130de0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130de3:	7c c4                	jl     f0130da9 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0130de5:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0130de8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130deb:	01 d0                	add    %edx,%eax
f0130ded:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0130df0:	90                   	nop
f0130df1:	c9                   	leave  
f0130df2:	c3                   	ret    

f0130df3 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0130df3:	55                   	push   %ebp
f0130df4:	89 e5                	mov    %esp,%ebp
f0130df6:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0130df9:	ff 75 08             	pushl  0x8(%ebp)
f0130dfc:	e8 54 fa ff ff       	call   f0130855 <strlen>
f0130e01:	83 c4 04             	add    $0x4,%esp
f0130e04:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0130e07:	ff 75 0c             	pushl  0xc(%ebp)
f0130e0a:	e8 46 fa ff ff       	call   f0130855 <strlen>
f0130e0f:	83 c4 04             	add    $0x4,%esp
f0130e12:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0130e15:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0130e1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130e23:	eb 17                	jmp    f0130e3c <strcconcat+0x49>
		final[s] = str1[s] ;
f0130e25:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130e28:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e2b:	01 c2                	add    %eax,%edx
f0130e2d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0130e30:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e33:	01 c8                	add    %ecx,%eax
f0130e35:	8a 00                	mov    (%eax),%al
f0130e37:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0130e39:	ff 45 fc             	incl   -0x4(%ebp)
f0130e3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e3f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130e42:	7c e1                	jl     f0130e25 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0130e44:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0130e4b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0130e52:	eb 1f                	jmp    f0130e73 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0130e54:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e57:	8d 50 01             	lea    0x1(%eax),%edx
f0130e5a:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130e5d:	89 c2                	mov    %eax,%edx
f0130e5f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e62:	01 c2                	add    %eax,%edx
f0130e64:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0130e67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e6a:	01 c8                	add    %ecx,%eax
f0130e6c:	8a 00                	mov    (%eax),%al
f0130e6e:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0130e70:	ff 45 f8             	incl   -0x8(%ebp)
f0130e73:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130e76:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130e79:	7c d9                	jl     f0130e54 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0130e7b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130e7e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e81:	01 d0                	add    %edx,%eax
f0130e83:	c6 00 00             	movb   $0x0,(%eax)
}
f0130e86:	90                   	nop
f0130e87:	c9                   	leave  
f0130e88:	c3                   	ret    

f0130e89 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0130e89:	55                   	push   %ebp
f0130e8a:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0130e8c:	8b 45 14             	mov    0x14(%ebp),%eax
f0130e8f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0130e95:	8b 45 14             	mov    0x14(%ebp),%eax
f0130e98:	8b 00                	mov    (%eax),%eax
f0130e9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130ea1:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ea4:	01 d0                	add    %edx,%eax
f0130ea6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0130eac:	eb 0c                	jmp    f0130eba <strsplit+0x31>
			*string++ = 0;
f0130eae:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eb1:	8d 50 01             	lea    0x1(%eax),%edx
f0130eb4:	89 55 08             	mov    %edx,0x8(%ebp)
f0130eb7:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0130eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ebd:	8a 00                	mov    (%eax),%al
f0130ebf:	84 c0                	test   %al,%al
f0130ec1:	74 18                	je     f0130edb <strsplit+0x52>
f0130ec3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ec6:	8a 00                	mov    (%eax),%al
f0130ec8:	0f be c0             	movsbl %al,%eax
f0130ecb:	50                   	push   %eax
f0130ecc:	ff 75 0c             	pushl  0xc(%ebp)
f0130ecf:	e8 13 fb ff ff       	call   f01309e7 <strchr>
f0130ed4:	83 c4 08             	add    $0x8,%esp
f0130ed7:	85 c0                	test   %eax,%eax
f0130ed9:	75 d3                	jne    f0130eae <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0130edb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ede:	8a 00                	mov    (%eax),%al
f0130ee0:	84 c0                	test   %al,%al
f0130ee2:	74 5a                	je     f0130f3e <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0130ee4:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ee7:	8b 00                	mov    (%eax),%eax
f0130ee9:	83 f8 0f             	cmp    $0xf,%eax
f0130eec:	75 07                	jne    f0130ef5 <strsplit+0x6c>
		{
			return 0;
f0130eee:	b8 00 00 00 00       	mov    $0x0,%eax
f0130ef3:	eb 66                	jmp    f0130f5b <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0130ef5:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ef8:	8b 00                	mov    (%eax),%eax
f0130efa:	8d 48 01             	lea    0x1(%eax),%ecx
f0130efd:	8b 55 14             	mov    0x14(%ebp),%edx
f0130f00:	89 0a                	mov    %ecx,(%edx)
f0130f02:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130f09:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f0c:	01 c2                	add    %eax,%edx
f0130f0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f11:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130f13:	eb 03                	jmp    f0130f18 <strsplit+0x8f>
			string++;
f0130f15:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130f18:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f1b:	8a 00                	mov    (%eax),%al
f0130f1d:	84 c0                	test   %al,%al
f0130f1f:	74 8b                	je     f0130eac <strsplit+0x23>
f0130f21:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f24:	8a 00                	mov    (%eax),%al
f0130f26:	0f be c0             	movsbl %al,%eax
f0130f29:	50                   	push   %eax
f0130f2a:	ff 75 0c             	pushl  0xc(%ebp)
f0130f2d:	e8 b5 fa ff ff       	call   f01309e7 <strchr>
f0130f32:	83 c4 08             	add    $0x8,%esp
f0130f35:	85 c0                	test   %eax,%eax
f0130f37:	74 dc                	je     f0130f15 <strsplit+0x8c>
			string++;
	}
f0130f39:	e9 6e ff ff ff       	jmp    f0130eac <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0130f3e:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0130f3f:	8b 45 14             	mov    0x14(%ebp),%eax
f0130f42:	8b 00                	mov    (%eax),%eax
f0130f44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130f4b:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f4e:	01 d0                	add    %edx,%eax
f0130f50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0130f56:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0130f5b:	c9                   	leave  
f0130f5c:	c3                   	ret    

f0130f5d <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0130f5d:	55                   	push   %ebp
f0130f5e:	89 e5                	mov    %esp,%ebp
f0130f60:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0130f63:	90                   	nop
f0130f64:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0130f6b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130f6e:	89 c2                	mov    %eax,%edx
f0130f70:	ec                   	in     (%dx),%al
f0130f71:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0130f74:	8a 45 f7             	mov    -0x9(%ebp),%al
f0130f77:	0f b6 c0             	movzbl %al,%eax
f0130f7a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0130f7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130f80:	25 c0 00 00 00       	and    $0xc0,%eax
f0130f85:	83 f8 40             	cmp    $0x40,%eax
f0130f88:	75 da                	jne    f0130f64 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0130f8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130f8e:	74 11                	je     f0130fa1 <ide_wait_ready+0x44>
f0130f90:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130f93:	83 e0 21             	and    $0x21,%eax
f0130f96:	85 c0                	test   %eax,%eax
f0130f98:	74 07                	je     f0130fa1 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0130f9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130f9f:	eb 05                	jmp    f0130fa6 <ide_wait_ready+0x49>
	}
	return 0;
f0130fa1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130fa6:	c9                   	leave  
f0130fa7:	c3                   	ret    

f0130fa8 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0130fa8:	55                   	push   %ebp
f0130fa9:	89 e5                	mov    %esp,%ebp
f0130fab:	57                   	push   %edi
f0130fac:	53                   	push   %ebx
f0130fad:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0130fb0:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130fb7:	76 16                	jbe    f0130fcf <ide_read+0x27>
f0130fb9:	68 a3 c9 13 f0       	push   $0xf013c9a3
f0130fbe:	68 b0 c9 13 f0       	push   $0xf013c9b0
f0130fc3:	6a 25                	push   $0x25
f0130fc5:	68 c5 c9 13 f0       	push   $0xf013c9c5
f0130fca:	e8 d7 f1 fc ff       	call   f01001a6 <_panic>

	ide_wait_ready(0);
f0130fcf:	83 ec 0c             	sub    $0xc,%esp
f0130fd2:	6a 00                	push   $0x0
f0130fd4:	e8 84 ff ff ff       	call   f0130f5d <ide_wait_ready>
f0130fd9:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0130fdc:	8b 45 10             	mov    0x10(%ebp),%eax
f0130fdf:	0f b6 c0             	movzbl %al,%eax
f0130fe2:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0130fe9:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0130fec:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0130fef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130ff2:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130ff3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ff6:	0f b6 c0             	movzbl %al,%eax
f0130ff9:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131000:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131003:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131006:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131009:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013100a:	8b 45 08             	mov    0x8(%ebp),%eax
f013100d:	c1 e8 08             	shr    $0x8,%eax
f0131010:	0f b6 c0             	movzbl %al,%eax
f0131013:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013101a:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013101d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131020:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131023:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131024:	8b 45 08             	mov    0x8(%ebp),%eax
f0131027:	c1 e8 10             	shr    $0x10,%eax
f013102a:	0f b6 c0             	movzbl %al,%eax
f013102d:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131034:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131037:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013103a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013103d:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f013103e:	a1 ac 9a 65 f0       	mov    0xf0659aac,%eax
f0131043:	83 e0 01             	and    $0x1,%eax
f0131046:	c1 e0 04             	shl    $0x4,%eax
f0131049:	88 c2                	mov    %al,%dl
f013104b:	8b 45 08             	mov    0x8(%ebp),%eax
f013104e:	c1 e8 18             	shr    $0x18,%eax
f0131051:	83 e0 0f             	and    $0xf,%eax
f0131054:	09 d0                	or     %edx,%eax
f0131056:	83 c8 e0             	or     $0xffffffe0,%eax
f0131059:	0f b6 c0             	movzbl %al,%eax
f013105c:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131063:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131066:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131069:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013106c:	ee                   	out    %al,(%dx)
f013106d:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131074:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131078:	8a 45 d7             	mov    -0x29(%ebp),%al
f013107b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f013107e:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013107f:	eb 55                	jmp    f01310d6 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131081:	83 ec 0c             	sub    $0xc,%esp
f0131084:	6a 01                	push   $0x1
f0131086:	e8 d2 fe ff ff       	call   f0130f5d <ide_wait_ready>
f013108b:	83 c4 10             	add    $0x10,%esp
f013108e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131091:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131095:	79 05                	jns    f013109c <ide_read+0xf4>
			return r;
f0131097:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013109a:	eb 45                	jmp    f01310e1 <ide_read+0x139>
f013109c:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01310a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01310a9:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f01310b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01310b3:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01310b6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01310b9:	89 cb                	mov    %ecx,%ebx
f01310bb:	89 df                	mov    %ebx,%edi
f01310bd:	89 c1                	mov    %eax,%ecx
f01310bf:	fc                   	cld    
f01310c0:	f2 6d                	repnz insl (%dx),%es:(%edi)
f01310c2:	89 c8                	mov    %ecx,%eax
f01310c4:	89 fb                	mov    %edi,%ebx
f01310c6:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01310c9:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01310cc:	ff 4d 10             	decl   0x10(%ebp)
f01310cf:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01310d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01310da:	75 a5                	jne    f0131081 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f01310dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01310e1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01310e4:	5b                   	pop    %ebx
f01310e5:	5f                   	pop    %edi
f01310e6:	5d                   	pop    %ebp
f01310e7:	c3                   	ret    

f01310e8 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f01310e8:	55                   	push   %ebp
f01310e9:	89 e5                	mov    %esp,%ebp
f01310eb:	56                   	push   %esi
f01310ec:	53                   	push   %ebx
f01310ed:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f01310f0:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01310f7:	76 16                	jbe    f013110f <ide_write+0x27>
f01310f9:	68 a3 c9 13 f0       	push   $0xf013c9a3
f01310fe:	68 b0 c9 13 f0       	push   $0xf013c9b0
f0131103:	6a 3e                	push   $0x3e
f0131105:	68 c5 c9 13 f0       	push   $0xf013c9c5
f013110a:	e8 97 f0 fc ff       	call   f01001a6 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f013110f:	83 ec 0c             	sub    $0xc,%esp
f0131112:	6a 00                	push   $0x0
f0131114:	e8 44 fe ff ff       	call   f0130f5d <ide_wait_ready>
f0131119:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f013111c:	8b 45 10             	mov    0x10(%ebp),%eax
f013111f:	0f b6 c0             	movzbl %al,%eax
f0131122:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131129:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013112c:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013112f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131132:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131133:	8b 45 08             	mov    0x8(%ebp),%eax
f0131136:	0f b6 c0             	movzbl %al,%eax
f0131139:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131140:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131143:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131146:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131149:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013114a:	8b 45 08             	mov    0x8(%ebp),%eax
f013114d:	c1 e8 08             	shr    $0x8,%eax
f0131150:	0f b6 c0             	movzbl %al,%eax
f0131153:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013115a:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013115d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131160:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131163:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131164:	8b 45 08             	mov    0x8(%ebp),%eax
f0131167:	c1 e8 10             	shr    $0x10,%eax
f013116a:	0f b6 c0             	movzbl %al,%eax
f013116d:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131174:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131177:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013117a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013117d:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f013117e:	a1 ac 9a 65 f0       	mov    0xf0659aac,%eax
f0131183:	83 e0 01             	and    $0x1,%eax
f0131186:	c1 e0 04             	shl    $0x4,%eax
f0131189:	88 c2                	mov    %al,%dl
f013118b:	8b 45 08             	mov    0x8(%ebp),%eax
f013118e:	c1 e8 18             	shr    $0x18,%eax
f0131191:	83 e0 0f             	and    $0xf,%eax
f0131194:	09 d0                	or     %edx,%eax
f0131196:	83 c8 e0             	or     $0xffffffe0,%eax
f0131199:	0f b6 c0             	movzbl %al,%eax
f013119c:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01311a3:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01311a6:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01311a9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01311ac:	ee                   	out    %al,(%dx)
f01311ad:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01311b4:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f01311b8:	8a 45 d7             	mov    -0x29(%ebp),%al
f01311bb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01311be:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01311bf:	eb 55                	jmp    f0131216 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01311c1:	83 ec 0c             	sub    $0xc,%esp
f01311c4:	6a 01                	push   $0x1
f01311c6:	e8 92 fd ff ff       	call   f0130f5d <ide_wait_ready>
f01311cb:	83 c4 10             	add    $0x10,%esp
f01311ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01311d1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01311d5:	79 05                	jns    f01311dc <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f01311d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01311da:	eb 45                	jmp    f0131221 <ide_write+0x139>
f01311dc:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01311e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311e6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01311e9:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f01311f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311f3:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01311f6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01311f9:	89 cb                	mov    %ecx,%ebx
f01311fb:	89 de                	mov    %ebx,%esi
f01311fd:	89 c1                	mov    %eax,%ecx
f01311ff:	fc                   	cld    
f0131200:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131202:	89 c8                	mov    %ecx,%eax
f0131204:	89 f3                	mov    %esi,%ebx
f0131206:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131209:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f013120c:	ff 4d 10             	decl   0x10(%ebp)
f013120f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131216:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013121a:	75 a5                	jne    f01311c1 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f013121c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131221:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131224:	5b                   	pop    %ebx
f0131225:	5e                   	pop    %esi
f0131226:	5d                   	pop    %ebp
f0131227:	c3                   	ret    

f0131228 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131228:	55                   	push   %ebp
f0131229:	89 e5                	mov    %esp,%ebp
f013122b:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f013122e:	83 ec 0c             	sub    $0xc,%esp
f0131231:	68 d0 c9 13 f0       	push   $0xf013c9d0
f0131236:	e8 f2 f9 fc ff       	call   f0100c2d <cprintf>
f013123b:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f013123e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131245:	83 ec 0c             	sub    $0xc,%esp
f0131248:	68 fc c9 13 f0       	push   $0xf013c9fc
f013124d:	e8 db f9 fc ff       	call   f0100c2d <cprintf>
f0131252:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0131255:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131259:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f013125e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131261:	eb 56                	jmp    f01312b9 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131263:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131267:	74 1c                	je     f0131285 <print_mem_block_lists+0x5d>
f0131269:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013126c:	8b 50 08             	mov    0x8(%eax),%edx
f013126f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131272:	8b 48 08             	mov    0x8(%eax),%ecx
f0131275:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131278:	8b 40 0c             	mov    0xc(%eax),%eax
f013127b:	01 c8                	add    %ecx,%eax
f013127d:	39 c2                	cmp    %eax,%edx
f013127f:	73 04                	jae    f0131285 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131281:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131285:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131288:	8b 50 08             	mov    0x8(%eax),%edx
f013128b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013128e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131291:	01 c2                	add    %eax,%edx
f0131293:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131296:	8b 40 08             	mov    0x8(%eax),%eax
f0131299:	83 ec 04             	sub    $0x4,%esp
f013129c:	52                   	push   %edx
f013129d:	50                   	push   %eax
f013129e:	68 11 ca 13 f0       	push   $0xf013ca11
f01312a3:	e8 85 f9 fc ff       	call   f0100c2d <cprintf>
f01312a8:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01312ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01312b1:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f01312b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01312b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01312bd:	74 07                	je     f01312c6 <print_mem_block_lists+0x9e>
f01312bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312c2:	8b 00                	mov    (%eax),%eax
f01312c4:	eb 05                	jmp    f01312cb <print_mem_block_lists+0xa3>
f01312c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01312cb:	a3 a8 1e 6c f0       	mov    %eax,0xf06c1ea8
f01312d0:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f01312d5:	85 c0                	test   %eax,%eax
f01312d7:	75 8a                	jne    f0131263 <print_mem_block_lists+0x3b>
f01312d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01312dd:	75 84                	jne    f0131263 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f01312df:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01312e3:	75 10                	jne    f01312f5 <print_mem_block_lists+0xcd>
f01312e5:	83 ec 0c             	sub    $0xc,%esp
f01312e8:	68 20 ca 13 f0       	push   $0xf013ca20
f01312ed:	e8 3b f9 fc ff       	call   f0100c2d <cprintf>
f01312f2:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f01312f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f01312fc:	83 ec 0c             	sub    $0xc,%esp
f01312ff:	68 44 ca 13 f0       	push   $0xf013ca44
f0131304:	e8 24 f9 fc ff       	call   f0100c2d <cprintf>
f0131309:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f013130c:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131310:	a1 d0 9a 65 f0       	mov    0xf0659ad0,%eax
f0131315:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131318:	eb 56                	jmp    f0131370 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f013131a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013131e:	74 1c                	je     f013133c <print_mem_block_lists+0x114>
f0131320:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131323:	8b 50 08             	mov    0x8(%eax),%edx
f0131326:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131329:	8b 48 08             	mov    0x8(%eax),%ecx
f013132c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013132f:	8b 40 0c             	mov    0xc(%eax),%eax
f0131332:	01 c8                	add    %ecx,%eax
f0131334:	39 c2                	cmp    %eax,%edx
f0131336:	73 04                	jae    f013133c <print_mem_block_lists+0x114>
			sorted = 0 ;
f0131338:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f013133c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013133f:	8b 50 08             	mov    0x8(%eax),%edx
f0131342:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131345:	8b 40 0c             	mov    0xc(%eax),%eax
f0131348:	01 c2                	add    %eax,%edx
f013134a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013134d:	8b 40 08             	mov    0x8(%eax),%eax
f0131350:	83 ec 04             	sub    $0x4,%esp
f0131353:	52                   	push   %edx
f0131354:	50                   	push   %eax
f0131355:	68 11 ca 13 f0       	push   $0xf013ca11
f013135a:	e8 ce f8 fc ff       	call   f0100c2d <cprintf>
f013135f:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131362:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131365:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131368:	a1 d8 9a 65 f0       	mov    0xf0659ad8,%eax
f013136d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131370:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131374:	74 07                	je     f013137d <print_mem_block_lists+0x155>
f0131376:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131379:	8b 00                	mov    (%eax),%eax
f013137b:	eb 05                	jmp    f0131382 <print_mem_block_lists+0x15a>
f013137d:	b8 00 00 00 00       	mov    $0x0,%eax
f0131382:	a3 d8 9a 65 f0       	mov    %eax,0xf0659ad8
f0131387:	a1 d8 9a 65 f0       	mov    0xf0659ad8,%eax
f013138c:	85 c0                	test   %eax,%eax
f013138e:	75 8a                	jne    f013131a <print_mem_block_lists+0xf2>
f0131390:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131394:	75 84                	jne    f013131a <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0131396:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013139a:	75 10                	jne    f01313ac <print_mem_block_lists+0x184>
f013139c:	83 ec 0c             	sub    $0xc,%esp
f013139f:	68 5c ca 13 f0       	push   $0xf013ca5c
f01313a4:	e8 84 f8 fc ff       	call   f0100c2d <cprintf>
f01313a9:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f01313ac:	83 ec 0c             	sub    $0xc,%esp
f01313af:	68 d0 c9 13 f0       	push   $0xf013c9d0
f01313b4:	e8 74 f8 fc ff       	call   f0100c2d <cprintf>
f01313b9:	83 c4 10             	add    $0x10,%esp

}
f01313bc:	90                   	nop
f01313bd:	c9                   	leave  
f01313be:	c3                   	ret    

f01313bf <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f01313bf:	55                   	push   %ebp
f01313c0:	89 e5                	mov    %esp,%ebp
f01313c2:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f01313c5:	c7 05 d4 1e 6c f0 00 	movl   $0x0,0xf06c1ed4
f01313cc:	00 00 00 
f01313cf:	c7 05 d8 1e 6c f0 00 	movl   $0x0,0xf06c1ed8
f01313d6:	00 00 00 
f01313d9:	c7 05 e0 1e 6c f0 00 	movl   $0x0,0xf06c1ee0
f01313e0:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f01313e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01313ea:	e9 9e 00 00 00       	jmp    f013148d <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f01313ef:	a1 e0 9a 65 f0       	mov    0xf0659ae0,%eax
f01313f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01313f7:	c1 e2 04             	shl    $0x4,%edx
f01313fa:	01 d0                	add    %edx,%eax
f01313fc:	85 c0                	test   %eax,%eax
f01313fe:	75 14                	jne    f0131414 <initialize_MemBlocksList+0x55>
f0131400:	83 ec 04             	sub    $0x4,%esp
f0131403:	68 84 ca 13 f0       	push   $0xf013ca84
f0131408:	6a 46                	push   $0x46
f013140a:	68 a7 ca 13 f0       	push   $0xf013caa7
f013140f:	e8 92 ed fc ff       	call   f01001a6 <_panic>
f0131414:	a1 e0 9a 65 f0       	mov    0xf0659ae0,%eax
f0131419:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013141c:	c1 e2 04             	shl    $0x4,%edx
f013141f:	01 d0                	add    %edx,%eax
f0131421:	8b 15 d4 1e 6c f0    	mov    0xf06c1ed4,%edx
f0131427:	89 10                	mov    %edx,(%eax)
f0131429:	8b 00                	mov    (%eax),%eax
f013142b:	85 c0                	test   %eax,%eax
f013142d:	74 18                	je     f0131447 <initialize_MemBlocksList+0x88>
f013142f:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0131434:	8b 15 e0 9a 65 f0    	mov    0xf0659ae0,%edx
f013143a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f013143d:	c1 e1 04             	shl    $0x4,%ecx
f0131440:	01 ca                	add    %ecx,%edx
f0131442:	89 50 04             	mov    %edx,0x4(%eax)
f0131445:	eb 12                	jmp    f0131459 <initialize_MemBlocksList+0x9a>
f0131447:	a1 e0 9a 65 f0       	mov    0xf0659ae0,%eax
f013144c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013144f:	c1 e2 04             	shl    $0x4,%edx
f0131452:	01 d0                	add    %edx,%eax
f0131454:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f0131459:	a1 e0 9a 65 f0       	mov    0xf0659ae0,%eax
f013145e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131461:	c1 e2 04             	shl    $0x4,%edx
f0131464:	01 d0                	add    %edx,%eax
f0131466:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f013146b:	a1 e0 9a 65 f0       	mov    0xf0659ae0,%eax
f0131470:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131473:	c1 e2 04             	shl    $0x4,%edx
f0131476:	01 d0                	add    %edx,%eax
f0131478:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013147f:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f0131484:	40                   	inc    %eax
f0131485:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f013148a:	ff 45 f4             	incl   -0xc(%ebp)
f013148d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131490:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131493:	0f 82 56 ff ff ff    	jb     f01313ef <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0131499:	90                   	nop
f013149a:	c9                   	leave  
f013149b:	c3                   	ret    

f013149c <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013149c:	55                   	push   %ebp
f013149d:	89 e5                	mov    %esp,%ebp
f013149f:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01314a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01314a5:	8b 00                	mov    (%eax),%eax
f01314a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01314aa:	eb 19                	jmp    f01314c5 <find_block+0x29>
	{
		if(va==point->sva)
f01314ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314af:	8b 40 08             	mov    0x8(%eax),%eax
f01314b2:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01314b5:	75 05                	jne    f01314bc <find_block+0x20>
		   return point;
f01314b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314ba:	eb 36                	jmp    f01314f2 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01314bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01314bf:	8b 40 08             	mov    0x8(%eax),%eax
f01314c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01314c5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01314c9:	74 07                	je     f01314d2 <find_block+0x36>
f01314cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314ce:	8b 00                	mov    (%eax),%eax
f01314d0:	eb 05                	jmp    f01314d7 <find_block+0x3b>
f01314d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01314d7:	8b 55 08             	mov    0x8(%ebp),%edx
f01314da:	89 42 08             	mov    %eax,0x8(%edx)
f01314dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01314e0:	8b 40 08             	mov    0x8(%eax),%eax
f01314e3:	85 c0                	test   %eax,%eax
f01314e5:	75 c5                	jne    f01314ac <find_block+0x10>
f01314e7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01314eb:	75 bf                	jne    f01314ac <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f01314ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01314f2:	c9                   	leave  
f01314f3:	c3                   	ret    

f01314f4 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f01314f4:	55                   	push   %ebp
f01314f5:	89 e5                	mov    %esp,%ebp
f01314f7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f01314fa:	a1 d0 9a 65 f0       	mov    0xf0659ad0,%eax
f01314ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0131502:	a1 d4 9a 65 f0       	mov    0xf0659ad4,%eax
f0131507:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f013150a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013150d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0131510:	74 24                	je     f0131536 <insert_sorted_allocList+0x42>
f0131512:	8b 45 08             	mov    0x8(%ebp),%eax
f0131515:	8b 50 08             	mov    0x8(%eax),%edx
f0131518:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013151b:	8b 40 08             	mov    0x8(%eax),%eax
f013151e:	39 c2                	cmp    %eax,%edx
f0131520:	76 14                	jbe    f0131536 <insert_sorted_allocList+0x42>
f0131522:	8b 45 08             	mov    0x8(%ebp),%eax
f0131525:	8b 50 08             	mov    0x8(%eax),%edx
f0131528:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013152b:	8b 40 08             	mov    0x8(%eax),%eax
f013152e:	39 c2                	cmp    %eax,%edx
f0131530:	0f 82 60 01 00 00    	jb     f0131696 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0131536:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013153a:	75 65                	jne    f01315a1 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f013153c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131540:	75 14                	jne    f0131556 <insert_sorted_allocList+0x62>
f0131542:	83 ec 04             	sub    $0x4,%esp
f0131545:	68 84 ca 13 f0       	push   $0xf013ca84
f013154a:	6a 6b                	push   $0x6b
f013154c:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131551:	e8 50 ec fc ff       	call   f01001a6 <_panic>
f0131556:	8b 15 d0 9a 65 f0    	mov    0xf0659ad0,%edx
f013155c:	8b 45 08             	mov    0x8(%ebp),%eax
f013155f:	89 10                	mov    %edx,(%eax)
f0131561:	8b 45 08             	mov    0x8(%ebp),%eax
f0131564:	8b 00                	mov    (%eax),%eax
f0131566:	85 c0                	test   %eax,%eax
f0131568:	74 0d                	je     f0131577 <insert_sorted_allocList+0x83>
f013156a:	a1 d0 9a 65 f0       	mov    0xf0659ad0,%eax
f013156f:	8b 55 08             	mov    0x8(%ebp),%edx
f0131572:	89 50 04             	mov    %edx,0x4(%eax)
f0131575:	eb 08                	jmp    f013157f <insert_sorted_allocList+0x8b>
f0131577:	8b 45 08             	mov    0x8(%ebp),%eax
f013157a:	a3 d4 9a 65 f0       	mov    %eax,0xf0659ad4
f013157f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131582:	a3 d0 9a 65 f0       	mov    %eax,0xf0659ad0
f0131587:	8b 45 08             	mov    0x8(%ebp),%eax
f013158a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131591:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f0131596:	40                   	inc    %eax
f0131597:	a3 dc 9a 65 f0       	mov    %eax,0xf0659adc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013159c:	e9 dc 01 00 00       	jmp    f013177d <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f01315a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01315a4:	8b 50 08             	mov    0x8(%eax),%edx
f01315a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315aa:	8b 40 08             	mov    0x8(%eax),%eax
f01315ad:	39 c2                	cmp    %eax,%edx
f01315af:	77 6c                	ja     f013161d <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f01315b1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01315b5:	74 06                	je     f01315bd <insert_sorted_allocList+0xc9>
f01315b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01315bb:	75 14                	jne    f01315d1 <insert_sorted_allocList+0xdd>
f01315bd:	83 ec 04             	sub    $0x4,%esp
f01315c0:	68 c0 ca 13 f0       	push   $0xf013cac0
f01315c5:	6a 6f                	push   $0x6f
f01315c7:	68 a7 ca 13 f0       	push   $0xf013caa7
f01315cc:	e8 d5 eb fc ff       	call   f01001a6 <_panic>
f01315d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315d4:	8b 50 04             	mov    0x4(%eax),%edx
f01315d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01315da:	89 50 04             	mov    %edx,0x4(%eax)
f01315dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01315e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01315e3:	89 10                	mov    %edx,(%eax)
f01315e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315e8:	8b 40 04             	mov    0x4(%eax),%eax
f01315eb:	85 c0                	test   %eax,%eax
f01315ed:	74 0d                	je     f01315fc <insert_sorted_allocList+0x108>
f01315ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315f2:	8b 40 04             	mov    0x4(%eax),%eax
f01315f5:	8b 55 08             	mov    0x8(%ebp),%edx
f01315f8:	89 10                	mov    %edx,(%eax)
f01315fa:	eb 08                	jmp    f0131604 <insert_sorted_allocList+0x110>
f01315fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01315ff:	a3 d0 9a 65 f0       	mov    %eax,0xf0659ad0
f0131604:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131607:	8b 55 08             	mov    0x8(%ebp),%edx
f013160a:	89 50 04             	mov    %edx,0x4(%eax)
f013160d:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f0131612:	40                   	inc    %eax
f0131613:	a3 dc 9a 65 f0       	mov    %eax,0xf0659adc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131618:	e9 60 01 00 00       	jmp    f013177d <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f013161d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131620:	8b 50 08             	mov    0x8(%eax),%edx
f0131623:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131626:	8b 40 08             	mov    0x8(%eax),%eax
f0131629:	39 c2                	cmp    %eax,%edx
f013162b:	0f 82 4c 01 00 00    	jb     f013177d <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0131631:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131635:	75 14                	jne    f013164b <insert_sorted_allocList+0x157>
f0131637:	83 ec 04             	sub    $0x4,%esp
f013163a:	68 f8 ca 13 f0       	push   $0xf013caf8
f013163f:	6a 73                	push   $0x73
f0131641:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131646:	e8 5b eb fc ff       	call   f01001a6 <_panic>
f013164b:	8b 15 d4 9a 65 f0    	mov    0xf0659ad4,%edx
f0131651:	8b 45 08             	mov    0x8(%ebp),%eax
f0131654:	89 50 04             	mov    %edx,0x4(%eax)
f0131657:	8b 45 08             	mov    0x8(%ebp),%eax
f013165a:	8b 40 04             	mov    0x4(%eax),%eax
f013165d:	85 c0                	test   %eax,%eax
f013165f:	74 0c                	je     f013166d <insert_sorted_allocList+0x179>
f0131661:	a1 d4 9a 65 f0       	mov    0xf0659ad4,%eax
f0131666:	8b 55 08             	mov    0x8(%ebp),%edx
f0131669:	89 10                	mov    %edx,(%eax)
f013166b:	eb 08                	jmp    f0131675 <insert_sorted_allocList+0x181>
f013166d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131670:	a3 d0 9a 65 f0       	mov    %eax,0xf0659ad0
f0131675:	8b 45 08             	mov    0x8(%ebp),%eax
f0131678:	a3 d4 9a 65 f0       	mov    %eax,0xf0659ad4
f013167d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131680:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131686:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f013168b:	40                   	inc    %eax
f013168c:	a3 dc 9a 65 f0       	mov    %eax,0xf0659adc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131691:	e9 e7 00 00 00       	jmp    f013177d <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0131696:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131699:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f013169c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01316a3:	a1 d0 9a 65 f0       	mov    0xf0659ad0,%eax
f01316a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01316ab:	e9 9d 00 00 00       	jmp    f013174d <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f01316b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316b3:	8b 00                	mov    (%eax),%eax
f01316b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f01316b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01316bb:	8b 50 08             	mov    0x8(%eax),%edx
f01316be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316c1:	8b 40 08             	mov    0x8(%eax),%eax
f01316c4:	39 c2                	cmp    %eax,%edx
f01316c6:	76 7d                	jbe    f0131745 <insert_sorted_allocList+0x251>
f01316c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01316cb:	8b 50 08             	mov    0x8(%eax),%edx
f01316ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316d1:	8b 40 08             	mov    0x8(%eax),%eax
f01316d4:	39 c2                	cmp    %eax,%edx
f01316d6:	73 6d                	jae    f0131745 <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f01316d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01316dc:	74 06                	je     f01316e4 <insert_sorted_allocList+0x1f0>
f01316de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01316e2:	75 14                	jne    f01316f8 <insert_sorted_allocList+0x204>
f01316e4:	83 ec 04             	sub    $0x4,%esp
f01316e7:	68 1c cb 13 f0       	push   $0xf013cb1c
f01316ec:	6a 7f                	push   $0x7f
f01316ee:	68 a7 ca 13 f0       	push   $0xf013caa7
f01316f3:	e8 ae ea fc ff       	call   f01001a6 <_panic>
f01316f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316fb:	8b 10                	mov    (%eax),%edx
f01316fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131700:	89 10                	mov    %edx,(%eax)
f0131702:	8b 45 08             	mov    0x8(%ebp),%eax
f0131705:	8b 00                	mov    (%eax),%eax
f0131707:	85 c0                	test   %eax,%eax
f0131709:	74 0b                	je     f0131716 <insert_sorted_allocList+0x222>
f013170b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013170e:	8b 00                	mov    (%eax),%eax
f0131710:	8b 55 08             	mov    0x8(%ebp),%edx
f0131713:	89 50 04             	mov    %edx,0x4(%eax)
f0131716:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131719:	8b 55 08             	mov    0x8(%ebp),%edx
f013171c:	89 10                	mov    %edx,(%eax)
f013171e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131721:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131724:	89 50 04             	mov    %edx,0x4(%eax)
f0131727:	8b 45 08             	mov    0x8(%ebp),%eax
f013172a:	8b 00                	mov    (%eax),%eax
f013172c:	85 c0                	test   %eax,%eax
f013172e:	75 08                	jne    f0131738 <insert_sorted_allocList+0x244>
f0131730:	8b 45 08             	mov    0x8(%ebp),%eax
f0131733:	a3 d4 9a 65 f0       	mov    %eax,0xf0659ad4
f0131738:	a1 dc 9a 65 f0       	mov    0xf0659adc,%eax
f013173d:	40                   	inc    %eax
f013173e:	a3 dc 9a 65 f0       	mov    %eax,0xf0659adc
				break;
f0131743:	eb 39                	jmp    f013177e <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131745:	a1 d8 9a 65 f0       	mov    0xf0659ad8,%eax
f013174a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013174d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131751:	74 07                	je     f013175a <insert_sorted_allocList+0x266>
f0131753:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131756:	8b 00                	mov    (%eax),%eax
f0131758:	eb 05                	jmp    f013175f <insert_sorted_allocList+0x26b>
f013175a:	b8 00 00 00 00       	mov    $0x0,%eax
f013175f:	a3 d8 9a 65 f0       	mov    %eax,0xf0659ad8
f0131764:	a1 d8 9a 65 f0       	mov    0xf0659ad8,%eax
f0131769:	85 c0                	test   %eax,%eax
f013176b:	0f 85 3f ff ff ff    	jne    f01316b0 <insert_sorted_allocList+0x1bc>
f0131771:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131775:	0f 85 35 ff ff ff    	jne    f01316b0 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f013177b:	eb 01                	jmp    f013177e <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013177d:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f013177e:	90                   	nop
f013177f:	c9                   	leave  
f0131780:	c3                   	ret    

f0131781 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131781:	55                   	push   %ebp
f0131782:	89 e5                	mov    %esp,%ebp
f0131784:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131787:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f013178c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013178f:	e9 85 01 00 00       	jmp    f0131919 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0131794:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131797:	8b 40 0c             	mov    0xc(%eax),%eax
f013179a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013179d:	0f 82 6e 01 00 00    	jb     f0131911 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f01317a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317a6:	8b 40 0c             	mov    0xc(%eax),%eax
f01317a9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01317ac:	0f 85 8a 00 00 00    	jne    f013183c <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f01317b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01317b6:	75 17                	jne    f01317cf <alloc_block_FF+0x4e>
f01317b8:	83 ec 04             	sub    $0x4,%esp
f01317bb:	68 50 cb 13 f0       	push   $0xf013cb50
f01317c0:	68 93 00 00 00       	push   $0x93
f01317c5:	68 a7 ca 13 f0       	push   $0xf013caa7
f01317ca:	e8 d7 e9 fc ff       	call   f01001a6 <_panic>
f01317cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317d2:	8b 00                	mov    (%eax),%eax
f01317d4:	85 c0                	test   %eax,%eax
f01317d6:	74 10                	je     f01317e8 <alloc_block_FF+0x67>
f01317d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317db:	8b 00                	mov    (%eax),%eax
f01317dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317e0:	8b 52 04             	mov    0x4(%edx),%edx
f01317e3:	89 50 04             	mov    %edx,0x4(%eax)
f01317e6:	eb 0b                	jmp    f01317f3 <alloc_block_FF+0x72>
f01317e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317eb:	8b 40 04             	mov    0x4(%eax),%eax
f01317ee:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f01317f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317f6:	8b 40 04             	mov    0x4(%eax),%eax
f01317f9:	85 c0                	test   %eax,%eax
f01317fb:	74 0f                	je     f013180c <alloc_block_FF+0x8b>
f01317fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131800:	8b 40 04             	mov    0x4(%eax),%eax
f0131803:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131806:	8b 12                	mov    (%edx),%edx
f0131808:	89 10                	mov    %edx,(%eax)
f013180a:	eb 0a                	jmp    f0131816 <alloc_block_FF+0x95>
f013180c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013180f:	8b 00                	mov    (%eax),%eax
f0131811:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f0131816:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131819:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013181f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131822:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131829:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f013182e:	48                   	dec    %eax
f013182f:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
			   return  point;
f0131834:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131837:	e9 10 01 00 00       	jmp    f013194c <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f013183c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013183f:	8b 40 0c             	mov    0xc(%eax),%eax
f0131842:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131845:	0f 86 c6 00 00 00    	jbe    f0131911 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013184b:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0131850:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0131853:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131856:	8b 50 08             	mov    0x8(%eax),%edx
f0131859:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013185c:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f013185f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131862:	8b 55 08             	mov    0x8(%ebp),%edx
f0131865:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131868:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013186c:	75 17                	jne    f0131885 <alloc_block_FF+0x104>
f013186e:	83 ec 04             	sub    $0x4,%esp
f0131871:	68 50 cb 13 f0       	push   $0xf013cb50
f0131876:	68 9b 00 00 00       	push   $0x9b
f013187b:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131880:	e8 21 e9 fc ff       	call   f01001a6 <_panic>
f0131885:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131888:	8b 00                	mov    (%eax),%eax
f013188a:	85 c0                	test   %eax,%eax
f013188c:	74 10                	je     f013189e <alloc_block_FF+0x11d>
f013188e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131891:	8b 00                	mov    (%eax),%eax
f0131893:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131896:	8b 52 04             	mov    0x4(%edx),%edx
f0131899:	89 50 04             	mov    %edx,0x4(%eax)
f013189c:	eb 0b                	jmp    f01318a9 <alloc_block_FF+0x128>
f013189e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318a1:	8b 40 04             	mov    0x4(%eax),%eax
f01318a4:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f01318a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318ac:	8b 40 04             	mov    0x4(%eax),%eax
f01318af:	85 c0                	test   %eax,%eax
f01318b1:	74 0f                	je     f01318c2 <alloc_block_FF+0x141>
f01318b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318b6:	8b 40 04             	mov    0x4(%eax),%eax
f01318b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01318bc:	8b 12                	mov    (%edx),%edx
f01318be:	89 10                	mov    %edx,(%eax)
f01318c0:	eb 0a                	jmp    f01318cc <alloc_block_FF+0x14b>
f01318c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318c5:	8b 00                	mov    (%eax),%eax
f01318c7:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f01318cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318cf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01318d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01318df:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f01318e4:	48                   	dec    %eax
f01318e5:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
			   point->sva += size;
f01318ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318ed:	8b 50 08             	mov    0x8(%eax),%edx
f01318f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01318f3:	01 c2                	add    %eax,%edx
f01318f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318f8:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f01318fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318fe:	8b 40 0c             	mov    0xc(%eax),%eax
f0131901:	2b 45 08             	sub    0x8(%ebp),%eax
f0131904:	89 c2                	mov    %eax,%edx
f0131906:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131909:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f013190c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013190f:	eb 3b                	jmp    f013194c <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131911:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0131916:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131919:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013191d:	74 07                	je     f0131926 <alloc_block_FF+0x1a5>
f013191f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131922:	8b 00                	mov    (%eax),%eax
f0131924:	eb 05                	jmp    f013192b <alloc_block_FF+0x1aa>
f0131926:	b8 00 00 00 00       	mov    $0x0,%eax
f013192b:	a3 a8 1e 6c f0       	mov    %eax,0xf06c1ea8
f0131930:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0131935:	85 c0                	test   %eax,%eax
f0131937:	0f 85 57 fe ff ff    	jne    f0131794 <alloc_block_FF+0x13>
f013193d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131941:	0f 85 4d fe ff ff    	jne    f0131794 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f0131947:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013194c:	c9                   	leave  
f013194d:	c3                   	ret    

f013194e <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f013194e:	55                   	push   %ebp
f013194f:	89 e5                	mov    %esp,%ebp
f0131951:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f0131954:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f013195b:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0131960:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131963:	e9 df 00 00 00       	jmp    f0131a47 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0131968:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013196b:	8b 40 0c             	mov    0xc(%eax),%eax
f013196e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131971:	0f 82 c8 00 00 00    	jb     f0131a3f <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0131977:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013197a:	8b 40 0c             	mov    0xc(%eax),%eax
f013197d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131980:	0f 85 8a 00 00 00    	jne    f0131a10 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0131986:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013198a:	75 17                	jne    f01319a3 <alloc_block_BF+0x55>
f013198c:	83 ec 04             	sub    $0x4,%esp
f013198f:	68 50 cb 13 f0       	push   $0xf013cb50
f0131994:	68 b7 00 00 00       	push   $0xb7
f0131999:	68 a7 ca 13 f0       	push   $0xf013caa7
f013199e:	e8 03 e8 fc ff       	call   f01001a6 <_panic>
f01319a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319a6:	8b 00                	mov    (%eax),%eax
f01319a8:	85 c0                	test   %eax,%eax
f01319aa:	74 10                	je     f01319bc <alloc_block_BF+0x6e>
f01319ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319af:	8b 00                	mov    (%eax),%eax
f01319b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01319b4:	8b 52 04             	mov    0x4(%edx),%edx
f01319b7:	89 50 04             	mov    %edx,0x4(%eax)
f01319ba:	eb 0b                	jmp    f01319c7 <alloc_block_BF+0x79>
f01319bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319bf:	8b 40 04             	mov    0x4(%eax),%eax
f01319c2:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f01319c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319ca:	8b 40 04             	mov    0x4(%eax),%eax
f01319cd:	85 c0                	test   %eax,%eax
f01319cf:	74 0f                	je     f01319e0 <alloc_block_BF+0x92>
f01319d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319d4:	8b 40 04             	mov    0x4(%eax),%eax
f01319d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01319da:	8b 12                	mov    (%edx),%edx
f01319dc:	89 10                	mov    %edx,(%eax)
f01319de:	eb 0a                	jmp    f01319ea <alloc_block_BF+0x9c>
f01319e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319e3:	8b 00                	mov    (%eax),%eax
f01319e5:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f01319ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01319f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319f6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01319fd:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f0131a02:	48                   	dec    %eax
f0131a03:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
			   return currentMemBlock;
f0131a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a0b:	e9 4d 01 00 00       	jmp    f0131b5d <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0131a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a13:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a16:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131a19:	76 24                	jbe    f0131a3f <alloc_block_BF+0xf1>
f0131a1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a1e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a21:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131a24:	73 19                	jae    f0131a3f <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0131a26:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0131a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a30:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a33:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0131a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a39:	8b 40 08             	mov    0x8(%eax),%eax
f0131a3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131a3f:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0131a44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131a47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a4b:	74 07                	je     f0131a54 <alloc_block_BF+0x106>
f0131a4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a50:	8b 00                	mov    (%eax),%eax
f0131a52:	eb 05                	jmp    f0131a59 <alloc_block_BF+0x10b>
f0131a54:	b8 00 00 00 00       	mov    $0x0,%eax
f0131a59:	a3 a8 1e 6c f0       	mov    %eax,0xf06c1ea8
f0131a5e:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0131a63:	85 c0                	test   %eax,%eax
f0131a65:	0f 85 fd fe ff ff    	jne    f0131968 <alloc_block_BF+0x1a>
f0131a6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a6f:	0f 85 f3 fe ff ff    	jne    f0131968 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f0131a75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131a79:	0f 84 d9 00 00 00    	je     f0131b58 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131a7f:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0131a84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f0131a87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131a8a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131a8d:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0131a90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131a93:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a96:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0131a99:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131a9d:	75 17                	jne    f0131ab6 <alloc_block_BF+0x168>
f0131a9f:	83 ec 04             	sub    $0x4,%esp
f0131aa2:	68 50 cb 13 f0       	push   $0xf013cb50
f0131aa7:	68 c7 00 00 00       	push   $0xc7
f0131aac:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131ab1:	e8 f0 e6 fc ff       	call   f01001a6 <_panic>
f0131ab6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ab9:	8b 00                	mov    (%eax),%eax
f0131abb:	85 c0                	test   %eax,%eax
f0131abd:	74 10                	je     f0131acf <alloc_block_BF+0x181>
f0131abf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ac2:	8b 00                	mov    (%eax),%eax
f0131ac4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131ac7:	8b 52 04             	mov    0x4(%edx),%edx
f0131aca:	89 50 04             	mov    %edx,0x4(%eax)
f0131acd:	eb 0b                	jmp    f0131ada <alloc_block_BF+0x18c>
f0131acf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ad2:	8b 40 04             	mov    0x4(%eax),%eax
f0131ad5:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f0131ada:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131add:	8b 40 04             	mov    0x4(%eax),%eax
f0131ae0:	85 c0                	test   %eax,%eax
f0131ae2:	74 0f                	je     f0131af3 <alloc_block_BF+0x1a5>
f0131ae4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ae7:	8b 40 04             	mov    0x4(%eax),%eax
f0131aea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131aed:	8b 12                	mov    (%edx),%edx
f0131aef:	89 10                	mov    %edx,(%eax)
f0131af1:	eb 0a                	jmp    f0131afd <alloc_block_BF+0x1af>
f0131af3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131af6:	8b 00                	mov    (%eax),%eax
f0131af8:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f0131afd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131b00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131b06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131b09:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131b10:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f0131b15:	48                   	dec    %eax
f0131b16:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0131b1b:	83 ec 08             	sub    $0x8,%esp
f0131b1e:	ff 75 ec             	pushl  -0x14(%ebp)
f0131b21:	68 a0 1e 6c f0       	push   $0xf06c1ea0
f0131b26:	e8 71 f9 ff ff       	call   f013149c <find_block>
f0131b2b:	83 c4 10             	add    $0x10,%esp
f0131b2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0131b31:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131b34:	8b 50 08             	mov    0x8(%eax),%edx
f0131b37:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b3a:	01 c2                	add    %eax,%edx
f0131b3c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131b3f:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0131b42:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131b45:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b48:	2b 45 08             	sub    0x8(%ebp),%eax
f0131b4b:	89 c2                	mov    %eax,%edx
f0131b4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131b50:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f0131b53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131b56:	eb 05                	jmp    f0131b5d <alloc_block_BF+0x20f>
	}
	return NULL;
f0131b58:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131b5d:	c9                   	leave  
f0131b5e:	c3                   	ret    

f0131b5f <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131b5f:	55                   	push   %ebp
f0131b60:	89 e5                	mov    %esp,%ebp
f0131b62:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0131b65:	a1 b0 9a 65 f0       	mov    0xf0659ab0,%eax
f0131b6a:	85 c0                	test   %eax,%eax
f0131b6c:	0f 85 de 01 00 00    	jne    f0131d50 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0131b72:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0131b77:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131b7a:	e9 9e 01 00 00       	jmp    f0131d1d <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0131b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b82:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b85:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b88:	0f 82 87 01 00 00    	jb     f0131d15 <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0131b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b91:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b94:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b97:	0f 85 95 00 00 00    	jne    f0131c32 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0131b9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ba1:	75 17                	jne    f0131bba <alloc_block_NF+0x5b>
f0131ba3:	83 ec 04             	sub    $0x4,%esp
f0131ba6:	68 50 cb 13 f0       	push   $0xf013cb50
f0131bab:	68 e0 00 00 00       	push   $0xe0
f0131bb0:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131bb5:	e8 ec e5 fc ff       	call   f01001a6 <_panic>
f0131bba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bbd:	8b 00                	mov    (%eax),%eax
f0131bbf:	85 c0                	test   %eax,%eax
f0131bc1:	74 10                	je     f0131bd3 <alloc_block_NF+0x74>
f0131bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bc6:	8b 00                	mov    (%eax),%eax
f0131bc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131bcb:	8b 52 04             	mov    0x4(%edx),%edx
f0131bce:	89 50 04             	mov    %edx,0x4(%eax)
f0131bd1:	eb 0b                	jmp    f0131bde <alloc_block_NF+0x7f>
f0131bd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bd6:	8b 40 04             	mov    0x4(%eax),%eax
f0131bd9:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f0131bde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131be1:	8b 40 04             	mov    0x4(%eax),%eax
f0131be4:	85 c0                	test   %eax,%eax
f0131be6:	74 0f                	je     f0131bf7 <alloc_block_NF+0x98>
f0131be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131beb:	8b 40 04             	mov    0x4(%eax),%eax
f0131bee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131bf1:	8b 12                	mov    (%edx),%edx
f0131bf3:	89 10                	mov    %edx,(%eax)
f0131bf5:	eb 0a                	jmp    f0131c01 <alloc_block_NF+0xa2>
f0131bf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bfa:	8b 00                	mov    (%eax),%eax
f0131bfc:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f0131c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131c0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c0d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131c14:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f0131c19:	48                   	dec    %eax
f0131c1a:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
				   svaOfNF = point->sva;
f0131c1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c22:	8b 40 08             	mov    0x8(%eax),%eax
f0131c25:	a3 b0 9a 65 f0       	mov    %eax,0xf0659ab0
				   return  point;
f0131c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c2d:	e9 f8 04 00 00       	jmp    f013212a <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0131c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c35:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c38:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131c3b:	0f 86 d4 00 00 00    	jbe    f0131d15 <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131c41:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0131c46:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0131c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c4c:	8b 50 08             	mov    0x8(%eax),%edx
f0131c4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c52:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f0131c55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c58:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c5b:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131c5e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131c62:	75 17                	jne    f0131c7b <alloc_block_NF+0x11c>
f0131c64:	83 ec 04             	sub    $0x4,%esp
f0131c67:	68 50 cb 13 f0       	push   $0xf013cb50
f0131c6c:	68 e9 00 00 00       	push   $0xe9
f0131c71:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131c76:	e8 2b e5 fc ff       	call   f01001a6 <_panic>
f0131c7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c7e:	8b 00                	mov    (%eax),%eax
f0131c80:	85 c0                	test   %eax,%eax
f0131c82:	74 10                	je     f0131c94 <alloc_block_NF+0x135>
f0131c84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c87:	8b 00                	mov    (%eax),%eax
f0131c89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131c8c:	8b 52 04             	mov    0x4(%edx),%edx
f0131c8f:	89 50 04             	mov    %edx,0x4(%eax)
f0131c92:	eb 0b                	jmp    f0131c9f <alloc_block_NF+0x140>
f0131c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c97:	8b 40 04             	mov    0x4(%eax),%eax
f0131c9a:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f0131c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ca2:	8b 40 04             	mov    0x4(%eax),%eax
f0131ca5:	85 c0                	test   %eax,%eax
f0131ca7:	74 0f                	je     f0131cb8 <alloc_block_NF+0x159>
f0131ca9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cac:	8b 40 04             	mov    0x4(%eax),%eax
f0131caf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131cb2:	8b 12                	mov    (%edx),%edx
f0131cb4:	89 10                	mov    %edx,(%eax)
f0131cb6:	eb 0a                	jmp    f0131cc2 <alloc_block_NF+0x163>
f0131cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cbb:	8b 00                	mov    (%eax),%eax
f0131cbd:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f0131cc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cc5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131ccb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131cd5:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f0131cda:	48                   	dec    %eax
f0131cdb:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
				   svaOfNF = ReturnedBlock->sva;
f0131ce0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ce3:	8b 40 08             	mov    0x8(%eax),%eax
f0131ce6:	a3 b0 9a 65 f0       	mov    %eax,0xf0659ab0
				   point->sva += size;
f0131ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cee:	8b 50 08             	mov    0x8(%eax),%edx
f0131cf1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cf4:	01 c2                	add    %eax,%edx
f0131cf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cf9:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0131cfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cff:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d02:	2b 45 08             	sub    0x8(%ebp),%eax
f0131d05:	89 c2                	mov    %eax,%edx
f0131d07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d0a:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0131d0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d10:	e9 15 04 00 00       	jmp    f013212a <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0131d15:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0131d1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d1d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d21:	74 07                	je     f0131d2a <alloc_block_NF+0x1cb>
f0131d23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d26:	8b 00                	mov    (%eax),%eax
f0131d28:	eb 05                	jmp    f0131d2f <alloc_block_NF+0x1d0>
f0131d2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0131d2f:	a3 a8 1e 6c f0       	mov    %eax,0xf06c1ea8
f0131d34:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0131d39:	85 c0                	test   %eax,%eax
f0131d3b:	0f 85 3e fe ff ff    	jne    f0131b7f <alloc_block_NF+0x20>
f0131d41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d45:	0f 85 34 fe ff ff    	jne    f0131b7f <alloc_block_NF+0x20>
f0131d4b:	e9 d5 03 00 00       	jmp    f0132125 <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131d50:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0131d55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d58:	e9 b1 01 00 00       	jmp    f0131f0e <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0131d5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d60:	8b 50 08             	mov    0x8(%eax),%edx
f0131d63:	a1 b0 9a 65 f0       	mov    0xf0659ab0,%eax
f0131d68:	39 c2                	cmp    %eax,%edx
f0131d6a:	0f 82 96 01 00 00    	jb     f0131f06 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0131d70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d73:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d76:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d79:	0f 82 87 01 00 00    	jb     f0131f06 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0131d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d82:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d85:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d88:	0f 85 95 00 00 00    	jne    f0131e23 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131d8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d92:	75 17                	jne    f0131dab <alloc_block_NF+0x24c>
f0131d94:	83 ec 04             	sub    $0x4,%esp
f0131d97:	68 50 cb 13 f0       	push   $0xf013cb50
f0131d9c:	68 fc 00 00 00       	push   $0xfc
f0131da1:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131da6:	e8 fb e3 fc ff       	call   f01001a6 <_panic>
f0131dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dae:	8b 00                	mov    (%eax),%eax
f0131db0:	85 c0                	test   %eax,%eax
f0131db2:	74 10                	je     f0131dc4 <alloc_block_NF+0x265>
f0131db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131db7:	8b 00                	mov    (%eax),%eax
f0131db9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131dbc:	8b 52 04             	mov    0x4(%edx),%edx
f0131dbf:	89 50 04             	mov    %edx,0x4(%eax)
f0131dc2:	eb 0b                	jmp    f0131dcf <alloc_block_NF+0x270>
f0131dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dc7:	8b 40 04             	mov    0x4(%eax),%eax
f0131dca:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f0131dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dd2:	8b 40 04             	mov    0x4(%eax),%eax
f0131dd5:	85 c0                	test   %eax,%eax
f0131dd7:	74 0f                	je     f0131de8 <alloc_block_NF+0x289>
f0131dd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ddc:	8b 40 04             	mov    0x4(%eax),%eax
f0131ddf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131de2:	8b 12                	mov    (%edx),%edx
f0131de4:	89 10                	mov    %edx,(%eax)
f0131de6:	eb 0a                	jmp    f0131df2 <alloc_block_NF+0x293>
f0131de8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131deb:	8b 00                	mov    (%eax),%eax
f0131ded:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f0131df2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131df5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131dfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dfe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e05:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f0131e0a:	48                   	dec    %eax
f0131e0b:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
					   svaOfNF = point->sva;
f0131e10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e13:	8b 40 08             	mov    0x8(%eax),%eax
f0131e16:	a3 b0 9a 65 f0       	mov    %eax,0xf0659ab0
					   return  point;
f0131e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e1e:	e9 07 03 00 00       	jmp    f013212a <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0131e23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e26:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e29:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131e2c:	0f 86 d4 00 00 00    	jbe    f0131f06 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131e32:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0131e37:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0131e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e3d:	8b 50 08             	mov    0x8(%eax),%edx
f0131e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e43:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0131e46:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e49:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e4c:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131e4f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131e53:	75 17                	jne    f0131e6c <alloc_block_NF+0x30d>
f0131e55:	83 ec 04             	sub    $0x4,%esp
f0131e58:	68 50 cb 13 f0       	push   $0xf013cb50
f0131e5d:	68 04 01 00 00       	push   $0x104
f0131e62:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131e67:	e8 3a e3 fc ff       	call   f01001a6 <_panic>
f0131e6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e6f:	8b 00                	mov    (%eax),%eax
f0131e71:	85 c0                	test   %eax,%eax
f0131e73:	74 10                	je     f0131e85 <alloc_block_NF+0x326>
f0131e75:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e78:	8b 00                	mov    (%eax),%eax
f0131e7a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131e7d:	8b 52 04             	mov    0x4(%edx),%edx
f0131e80:	89 50 04             	mov    %edx,0x4(%eax)
f0131e83:	eb 0b                	jmp    f0131e90 <alloc_block_NF+0x331>
f0131e85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e88:	8b 40 04             	mov    0x4(%eax),%eax
f0131e8b:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f0131e90:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e93:	8b 40 04             	mov    0x4(%eax),%eax
f0131e96:	85 c0                	test   %eax,%eax
f0131e98:	74 0f                	je     f0131ea9 <alloc_block_NF+0x34a>
f0131e9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e9d:	8b 40 04             	mov    0x4(%eax),%eax
f0131ea0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131ea3:	8b 12                	mov    (%edx),%edx
f0131ea5:	89 10                	mov    %edx,(%eax)
f0131ea7:	eb 0a                	jmp    f0131eb3 <alloc_block_NF+0x354>
f0131ea9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131eac:	8b 00                	mov    (%eax),%eax
f0131eae:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f0131eb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131eb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131ebc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ebf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131ec6:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f0131ecb:	48                   	dec    %eax
f0131ecc:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
					   svaOfNF = ReturnedBlock->sva;
f0131ed1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ed4:	8b 40 08             	mov    0x8(%eax),%eax
f0131ed7:	a3 b0 9a 65 f0       	mov    %eax,0xf0659ab0
					   point->sva += size;
f0131edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131edf:	8b 50 08             	mov    0x8(%eax),%edx
f0131ee2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ee5:	01 c2                	add    %eax,%edx
f0131ee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eea:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0131eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ef0:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ef3:	2b 45 08             	sub    0x8(%ebp),%eax
f0131ef6:	89 c2                	mov    %eax,%edx
f0131ef8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131efb:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0131efe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f01:	e9 24 02 00 00       	jmp    f013212a <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131f06:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0131f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131f0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f12:	74 07                	je     f0131f1b <alloc_block_NF+0x3bc>
f0131f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f17:	8b 00                	mov    (%eax),%eax
f0131f19:	eb 05                	jmp    f0131f20 <alloc_block_NF+0x3c1>
f0131f1b:	b8 00 00 00 00       	mov    $0x0,%eax
f0131f20:	a3 a8 1e 6c f0       	mov    %eax,0xf06c1ea8
f0131f25:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0131f2a:	85 c0                	test   %eax,%eax
f0131f2c:	0f 85 2b fe ff ff    	jne    f0131d5d <alloc_block_NF+0x1fe>
f0131f32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f36:	0f 85 21 fe ff ff    	jne    f0131d5d <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131f3c:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0131f41:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131f44:	e9 ae 01 00 00       	jmp    f01320f7 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0131f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f4c:	8b 50 08             	mov    0x8(%eax),%edx
f0131f4f:	a1 b0 9a 65 f0       	mov    0xf0659ab0,%eax
f0131f54:	39 c2                	cmp    %eax,%edx
f0131f56:	0f 83 93 01 00 00    	jae    f01320ef <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0131f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f5f:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f62:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131f65:	0f 82 84 01 00 00    	jb     f01320ef <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0131f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f6e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f71:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131f74:	0f 85 95 00 00 00    	jne    f013200f <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131f7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f7e:	75 17                	jne    f0131f97 <alloc_block_NF+0x438>
f0131f80:	83 ec 04             	sub    $0x4,%esp
f0131f83:	68 50 cb 13 f0       	push   $0xf013cb50
f0131f88:	68 14 01 00 00       	push   $0x114
f0131f8d:	68 a7 ca 13 f0       	push   $0xf013caa7
f0131f92:	e8 0f e2 fc ff       	call   f01001a6 <_panic>
f0131f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f9a:	8b 00                	mov    (%eax),%eax
f0131f9c:	85 c0                	test   %eax,%eax
f0131f9e:	74 10                	je     f0131fb0 <alloc_block_NF+0x451>
f0131fa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fa3:	8b 00                	mov    (%eax),%eax
f0131fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131fa8:	8b 52 04             	mov    0x4(%edx),%edx
f0131fab:	89 50 04             	mov    %edx,0x4(%eax)
f0131fae:	eb 0b                	jmp    f0131fbb <alloc_block_NF+0x45c>
f0131fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fb3:	8b 40 04             	mov    0x4(%eax),%eax
f0131fb6:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f0131fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fbe:	8b 40 04             	mov    0x4(%eax),%eax
f0131fc1:	85 c0                	test   %eax,%eax
f0131fc3:	74 0f                	je     f0131fd4 <alloc_block_NF+0x475>
f0131fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fc8:	8b 40 04             	mov    0x4(%eax),%eax
f0131fcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131fce:	8b 12                	mov    (%edx),%edx
f0131fd0:	89 10                	mov    %edx,(%eax)
f0131fd2:	eb 0a                	jmp    f0131fde <alloc_block_NF+0x47f>
f0131fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fd7:	8b 00                	mov    (%eax),%eax
f0131fd9:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f0131fde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fe1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131fe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131ff1:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f0131ff6:	48                   	dec    %eax
f0131ff7:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
					   svaOfNF = point->sva;
f0131ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fff:	8b 40 08             	mov    0x8(%eax),%eax
f0132002:	a3 b0 9a 65 f0       	mov    %eax,0xf0659ab0
					   return  point;
f0132007:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013200a:	e9 1b 01 00 00       	jmp    f013212a <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f013200f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132012:	8b 40 0c             	mov    0xc(%eax),%eax
f0132015:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132018:	0f 86 d1 00 00 00    	jbe    f01320ef <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013201e:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0132023:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132026:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132029:	8b 50 08             	mov    0x8(%eax),%edx
f013202c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013202f:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132032:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132035:	8b 55 08             	mov    0x8(%ebp),%edx
f0132038:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f013203b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013203f:	75 17                	jne    f0132058 <alloc_block_NF+0x4f9>
f0132041:	83 ec 04             	sub    $0x4,%esp
f0132044:	68 50 cb 13 f0       	push   $0xf013cb50
f0132049:	68 1c 01 00 00       	push   $0x11c
f013204e:	68 a7 ca 13 f0       	push   $0xf013caa7
f0132053:	e8 4e e1 fc ff       	call   f01001a6 <_panic>
f0132058:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013205b:	8b 00                	mov    (%eax),%eax
f013205d:	85 c0                	test   %eax,%eax
f013205f:	74 10                	je     f0132071 <alloc_block_NF+0x512>
f0132061:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132064:	8b 00                	mov    (%eax),%eax
f0132066:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132069:	8b 52 04             	mov    0x4(%edx),%edx
f013206c:	89 50 04             	mov    %edx,0x4(%eax)
f013206f:	eb 0b                	jmp    f013207c <alloc_block_NF+0x51d>
f0132071:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132074:	8b 40 04             	mov    0x4(%eax),%eax
f0132077:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f013207c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013207f:	8b 40 04             	mov    0x4(%eax),%eax
f0132082:	85 c0                	test   %eax,%eax
f0132084:	74 0f                	je     f0132095 <alloc_block_NF+0x536>
f0132086:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132089:	8b 40 04             	mov    0x4(%eax),%eax
f013208c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013208f:	8b 12                	mov    (%edx),%edx
f0132091:	89 10                	mov    %edx,(%eax)
f0132093:	eb 0a                	jmp    f013209f <alloc_block_NF+0x540>
f0132095:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132098:	8b 00                	mov    (%eax),%eax
f013209a:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f013209f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01320a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01320a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01320ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01320b2:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f01320b7:	48                   	dec    %eax
f01320b8:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
					   svaOfNF = ReturnedBlock->sva;
f01320bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01320c0:	8b 40 08             	mov    0x8(%eax),%eax
f01320c3:	a3 b0 9a 65 f0       	mov    %eax,0xf0659ab0
					   point->sva += size;
f01320c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320cb:	8b 50 08             	mov    0x8(%eax),%edx
f01320ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01320d1:	01 c2                	add    %eax,%edx
f01320d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320d6:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f01320d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320dc:	8b 40 0c             	mov    0xc(%eax),%eax
f01320df:	2b 45 08             	sub    0x8(%ebp),%eax
f01320e2:	89 c2                	mov    %eax,%edx
f01320e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320e7:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f01320ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01320ed:	eb 3b                	jmp    f013212a <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f01320ef:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f01320f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320fb:	74 07                	je     f0132104 <alloc_block_NF+0x5a5>
f01320fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132100:	8b 00                	mov    (%eax),%eax
f0132102:	eb 05                	jmp    f0132109 <alloc_block_NF+0x5aa>
f0132104:	b8 00 00 00 00       	mov    $0x0,%eax
f0132109:	a3 a8 1e 6c f0       	mov    %eax,0xf06c1ea8
f013210e:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0132113:	85 c0                	test   %eax,%eax
f0132115:	0f 85 2e fe ff ff    	jne    f0131f49 <alloc_block_NF+0x3ea>
f013211b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013211f:	0f 85 24 fe ff ff    	jne    f0131f49 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0132125:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013212a:	c9                   	leave  
f013212b:	c3                   	ret    

f013212c <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f013212c:	55                   	push   %ebp
f013212d:	89 e5                	mov    %esp,%ebp
f013212f:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132132:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0132137:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f013213a:	a1 a4 1e 6c f0       	mov    0xf06c1ea4,%eax
f013213f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132142:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0132147:	85 c0                	test   %eax,%eax
f0132149:	74 14                	je     f013215f <insert_sorted_with_merge_freeList+0x33>
f013214b:	8b 45 08             	mov    0x8(%ebp),%eax
f013214e:	8b 50 08             	mov    0x8(%eax),%edx
f0132151:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132154:	8b 40 08             	mov    0x8(%eax),%eax
f0132157:	39 c2                	cmp    %eax,%edx
f0132159:	0f 87 9b 01 00 00    	ja     f01322fa <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f013215f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132163:	75 17                	jne    f013217c <insert_sorted_with_merge_freeList+0x50>
f0132165:	83 ec 04             	sub    $0x4,%esp
f0132168:	68 84 ca 13 f0       	push   $0xf013ca84
f013216d:	68 38 01 00 00       	push   $0x138
f0132172:	68 a7 ca 13 f0       	push   $0xf013caa7
f0132177:	e8 2a e0 fc ff       	call   f01001a6 <_panic>
f013217c:	8b 15 a0 1e 6c f0    	mov    0xf06c1ea0,%edx
f0132182:	8b 45 08             	mov    0x8(%ebp),%eax
f0132185:	89 10                	mov    %edx,(%eax)
f0132187:	8b 45 08             	mov    0x8(%ebp),%eax
f013218a:	8b 00                	mov    (%eax),%eax
f013218c:	85 c0                	test   %eax,%eax
f013218e:	74 0d                	je     f013219d <insert_sorted_with_merge_freeList+0x71>
f0132190:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0132195:	8b 55 08             	mov    0x8(%ebp),%edx
f0132198:	89 50 04             	mov    %edx,0x4(%eax)
f013219b:	eb 08                	jmp    f01321a5 <insert_sorted_with_merge_freeList+0x79>
f013219d:	8b 45 08             	mov    0x8(%ebp),%eax
f01321a0:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f01321a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01321a8:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f01321ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01321b0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321b7:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f01321bc:	40                   	inc    %eax
f01321bd:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01321c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01321c6:	0f 84 a8 06 00 00    	je     f0132874 <insert_sorted_with_merge_freeList+0x748>
f01321cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01321cf:	8b 50 08             	mov    0x8(%eax),%edx
f01321d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01321d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01321d8:	01 c2                	add    %eax,%edx
f01321da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321dd:	8b 40 08             	mov    0x8(%eax),%eax
f01321e0:	39 c2                	cmp    %eax,%edx
f01321e2:	0f 85 8c 06 00 00    	jne    f0132874 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f01321e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01321eb:	8b 50 0c             	mov    0xc(%eax),%edx
f01321ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321f1:	8b 40 0c             	mov    0xc(%eax),%eax
f01321f4:	01 c2                	add    %eax,%edx
f01321f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01321f9:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f01321fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132200:	75 17                	jne    f0132219 <insert_sorted_with_merge_freeList+0xed>
f0132202:	83 ec 04             	sub    $0x4,%esp
f0132205:	68 50 cb 13 f0       	push   $0xf013cb50
f013220a:	68 3c 01 00 00       	push   $0x13c
f013220f:	68 a7 ca 13 f0       	push   $0xf013caa7
f0132214:	e8 8d df fc ff       	call   f01001a6 <_panic>
f0132219:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013221c:	8b 00                	mov    (%eax),%eax
f013221e:	85 c0                	test   %eax,%eax
f0132220:	74 10                	je     f0132232 <insert_sorted_with_merge_freeList+0x106>
f0132222:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132225:	8b 00                	mov    (%eax),%eax
f0132227:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013222a:	8b 52 04             	mov    0x4(%edx),%edx
f013222d:	89 50 04             	mov    %edx,0x4(%eax)
f0132230:	eb 0b                	jmp    f013223d <insert_sorted_with_merge_freeList+0x111>
f0132232:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132235:	8b 40 04             	mov    0x4(%eax),%eax
f0132238:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f013223d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132240:	8b 40 04             	mov    0x4(%eax),%eax
f0132243:	85 c0                	test   %eax,%eax
f0132245:	74 0f                	je     f0132256 <insert_sorted_with_merge_freeList+0x12a>
f0132247:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013224a:	8b 40 04             	mov    0x4(%eax),%eax
f013224d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132250:	8b 12                	mov    (%edx),%edx
f0132252:	89 10                	mov    %edx,(%eax)
f0132254:	eb 0a                	jmp    f0132260 <insert_sorted_with_merge_freeList+0x134>
f0132256:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132259:	8b 00                	mov    (%eax),%eax
f013225b:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f0132260:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132263:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132269:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013226c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132273:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f0132278:	48                   	dec    %eax
f0132279:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
			head->size = 0;
f013227e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132281:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0132288:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013228b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132292:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132296:	75 17                	jne    f01322af <insert_sorted_with_merge_freeList+0x183>
f0132298:	83 ec 04             	sub    $0x4,%esp
f013229b:	68 84 ca 13 f0       	push   $0xf013ca84
f01322a0:	68 3f 01 00 00       	push   $0x13f
f01322a5:	68 a7 ca 13 f0       	push   $0xf013caa7
f01322aa:	e8 f7 de fc ff       	call   f01001a6 <_panic>
f01322af:	8b 15 d4 1e 6c f0    	mov    0xf06c1ed4,%edx
f01322b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322b8:	89 10                	mov    %edx,(%eax)
f01322ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322bd:	8b 00                	mov    (%eax),%eax
f01322bf:	85 c0                	test   %eax,%eax
f01322c1:	74 0d                	je     f01322d0 <insert_sorted_with_merge_freeList+0x1a4>
f01322c3:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f01322c8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01322cb:	89 50 04             	mov    %edx,0x4(%eax)
f01322ce:	eb 08                	jmp    f01322d8 <insert_sorted_with_merge_freeList+0x1ac>
f01322d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322d3:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f01322d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322db:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f01322e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322e3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322ea:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f01322ef:	40                   	inc    %eax
f01322f0:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01322f5:	e9 7a 05 00 00       	jmp    f0132874 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f01322fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01322fd:	8b 50 08             	mov    0x8(%eax),%edx
f0132300:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132303:	8b 40 08             	mov    0x8(%eax),%eax
f0132306:	39 c2                	cmp    %eax,%edx
f0132308:	0f 82 14 01 00 00    	jb     f0132422 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f013230e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132311:	8b 50 08             	mov    0x8(%eax),%edx
f0132314:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132317:	8b 40 0c             	mov    0xc(%eax),%eax
f013231a:	01 c2                	add    %eax,%edx
f013231c:	8b 45 08             	mov    0x8(%ebp),%eax
f013231f:	8b 40 08             	mov    0x8(%eax),%eax
f0132322:	39 c2                	cmp    %eax,%edx
f0132324:	0f 85 90 00 00 00    	jne    f01323ba <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f013232a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013232d:	8b 50 0c             	mov    0xc(%eax),%edx
f0132330:	8b 45 08             	mov    0x8(%ebp),%eax
f0132333:	8b 40 0c             	mov    0xc(%eax),%eax
f0132336:	01 c2                	add    %eax,%edx
f0132338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013233b:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f013233e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132341:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0132348:	8b 45 08             	mov    0x8(%ebp),%eax
f013234b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132352:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132356:	75 17                	jne    f013236f <insert_sorted_with_merge_freeList+0x243>
f0132358:	83 ec 04             	sub    $0x4,%esp
f013235b:	68 84 ca 13 f0       	push   $0xf013ca84
f0132360:	68 49 01 00 00       	push   $0x149
f0132365:	68 a7 ca 13 f0       	push   $0xf013caa7
f013236a:	e8 37 de fc ff       	call   f01001a6 <_panic>
f013236f:	8b 15 d4 1e 6c f0    	mov    0xf06c1ed4,%edx
f0132375:	8b 45 08             	mov    0x8(%ebp),%eax
f0132378:	89 10                	mov    %edx,(%eax)
f013237a:	8b 45 08             	mov    0x8(%ebp),%eax
f013237d:	8b 00                	mov    (%eax),%eax
f013237f:	85 c0                	test   %eax,%eax
f0132381:	74 0d                	je     f0132390 <insert_sorted_with_merge_freeList+0x264>
f0132383:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0132388:	8b 55 08             	mov    0x8(%ebp),%edx
f013238b:	89 50 04             	mov    %edx,0x4(%eax)
f013238e:	eb 08                	jmp    f0132398 <insert_sorted_with_merge_freeList+0x26c>
f0132390:	8b 45 08             	mov    0x8(%ebp),%eax
f0132393:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f0132398:	8b 45 08             	mov    0x8(%ebp),%eax
f013239b:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f01323a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01323a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01323aa:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f01323af:	40                   	inc    %eax
f01323b0:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01323b5:	e9 bb 04 00 00       	jmp    f0132875 <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f01323ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01323be:	75 17                	jne    f01323d7 <insert_sorted_with_merge_freeList+0x2ab>
f01323c0:	83 ec 04             	sub    $0x4,%esp
f01323c3:	68 f8 ca 13 f0       	push   $0xf013caf8
f01323c8:	68 4c 01 00 00       	push   $0x14c
f01323cd:	68 a7 ca 13 f0       	push   $0xf013caa7
f01323d2:	e8 cf dd fc ff       	call   f01001a6 <_panic>
f01323d7:	8b 15 a4 1e 6c f0    	mov    0xf06c1ea4,%edx
f01323dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01323e0:	89 50 04             	mov    %edx,0x4(%eax)
f01323e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01323e6:	8b 40 04             	mov    0x4(%eax),%eax
f01323e9:	85 c0                	test   %eax,%eax
f01323eb:	74 0c                	je     f01323f9 <insert_sorted_with_merge_freeList+0x2cd>
f01323ed:	a1 a4 1e 6c f0       	mov    0xf06c1ea4,%eax
f01323f2:	8b 55 08             	mov    0x8(%ebp),%edx
f01323f5:	89 10                	mov    %edx,(%eax)
f01323f7:	eb 08                	jmp    f0132401 <insert_sorted_with_merge_freeList+0x2d5>
f01323f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01323fc:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f0132401:	8b 45 08             	mov    0x8(%ebp),%eax
f0132404:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f0132409:	8b 45 08             	mov    0x8(%ebp),%eax
f013240c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132412:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f0132417:	40                   	inc    %eax
f0132418:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013241d:	e9 53 04 00 00       	jmp    f0132875 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132422:	a1 a0 1e 6c f0       	mov    0xf06c1ea0,%eax
f0132427:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013242a:	e9 15 04 00 00       	jmp    f0132844 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f013242f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132432:	8b 00                	mov    (%eax),%eax
f0132434:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0132437:	8b 45 08             	mov    0x8(%ebp),%eax
f013243a:	8b 50 08             	mov    0x8(%eax),%edx
f013243d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132440:	8b 40 08             	mov    0x8(%eax),%eax
f0132443:	39 c2                	cmp    %eax,%edx
f0132445:	0f 86 f1 03 00 00    	jbe    f013283c <insert_sorted_with_merge_freeList+0x710>
f013244b:	8b 45 08             	mov    0x8(%ebp),%eax
f013244e:	8b 50 08             	mov    0x8(%eax),%edx
f0132451:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132454:	8b 40 08             	mov    0x8(%eax),%eax
f0132457:	39 c2                	cmp    %eax,%edx
f0132459:	0f 83 dd 03 00 00    	jae    f013283c <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f013245f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132462:	8b 50 08             	mov    0x8(%eax),%edx
f0132465:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132468:	8b 40 0c             	mov    0xc(%eax),%eax
f013246b:	01 c2                	add    %eax,%edx
f013246d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132470:	8b 40 08             	mov    0x8(%eax),%eax
f0132473:	39 c2                	cmp    %eax,%edx
f0132475:	0f 85 b9 01 00 00    	jne    f0132634 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f013247b:	8b 45 08             	mov    0x8(%ebp),%eax
f013247e:	8b 50 08             	mov    0x8(%eax),%edx
f0132481:	8b 45 08             	mov    0x8(%ebp),%eax
f0132484:	8b 40 0c             	mov    0xc(%eax),%eax
f0132487:	01 c2                	add    %eax,%edx
f0132489:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013248c:	8b 40 08             	mov    0x8(%eax),%eax
f013248f:	39 c2                	cmp    %eax,%edx
f0132491:	0f 85 0d 01 00 00    	jne    f01325a4 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0132497:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013249a:	8b 50 0c             	mov    0xc(%eax),%edx
f013249d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324a0:	8b 40 0c             	mov    0xc(%eax),%eax
f01324a3:	01 c2                	add    %eax,%edx
f01324a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324a8:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f01324ab:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01324af:	75 17                	jne    f01324c8 <insert_sorted_with_merge_freeList+0x39c>
f01324b1:	83 ec 04             	sub    $0x4,%esp
f01324b4:	68 50 cb 13 f0       	push   $0xf013cb50
f01324b9:	68 5c 01 00 00       	push   $0x15c
f01324be:	68 a7 ca 13 f0       	push   $0xf013caa7
f01324c3:	e8 de dc fc ff       	call   f01001a6 <_panic>
f01324c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324cb:	8b 00                	mov    (%eax),%eax
f01324cd:	85 c0                	test   %eax,%eax
f01324cf:	74 10                	je     f01324e1 <insert_sorted_with_merge_freeList+0x3b5>
f01324d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324d4:	8b 00                	mov    (%eax),%eax
f01324d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01324d9:	8b 52 04             	mov    0x4(%edx),%edx
f01324dc:	89 50 04             	mov    %edx,0x4(%eax)
f01324df:	eb 0b                	jmp    f01324ec <insert_sorted_with_merge_freeList+0x3c0>
f01324e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324e4:	8b 40 04             	mov    0x4(%eax),%eax
f01324e7:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f01324ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324ef:	8b 40 04             	mov    0x4(%eax),%eax
f01324f2:	85 c0                	test   %eax,%eax
f01324f4:	74 0f                	je     f0132505 <insert_sorted_with_merge_freeList+0x3d9>
f01324f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324f9:	8b 40 04             	mov    0x4(%eax),%eax
f01324fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01324ff:	8b 12                	mov    (%edx),%edx
f0132501:	89 10                	mov    %edx,(%eax)
f0132503:	eb 0a                	jmp    f013250f <insert_sorted_with_merge_freeList+0x3e3>
f0132505:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132508:	8b 00                	mov    (%eax),%eax
f013250a:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f013250f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132512:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132518:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013251b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132522:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f0132527:	48                   	dec    %eax
f0132528:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
						nextBlock->sva = 0;
f013252d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132530:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0132537:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013253a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132541:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132545:	75 17                	jne    f013255e <insert_sorted_with_merge_freeList+0x432>
f0132547:	83 ec 04             	sub    $0x4,%esp
f013254a:	68 84 ca 13 f0       	push   $0xf013ca84
f013254f:	68 5f 01 00 00       	push   $0x15f
f0132554:	68 a7 ca 13 f0       	push   $0xf013caa7
f0132559:	e8 48 dc fc ff       	call   f01001a6 <_panic>
f013255e:	8b 15 d4 1e 6c f0    	mov    0xf06c1ed4,%edx
f0132564:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132567:	89 10                	mov    %edx,(%eax)
f0132569:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013256c:	8b 00                	mov    (%eax),%eax
f013256e:	85 c0                	test   %eax,%eax
f0132570:	74 0d                	je     f013257f <insert_sorted_with_merge_freeList+0x453>
f0132572:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0132577:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013257a:	89 50 04             	mov    %edx,0x4(%eax)
f013257d:	eb 08                	jmp    f0132587 <insert_sorted_with_merge_freeList+0x45b>
f013257f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132582:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f0132587:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013258a:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f013258f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132592:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132599:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f013259e:	40                   	inc    %eax
f013259f:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
					}
					currentBlock->size += blockToInsert->size;
f01325a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325a7:	8b 50 0c             	mov    0xc(%eax),%edx
f01325aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01325ad:	8b 40 0c             	mov    0xc(%eax),%eax
f01325b0:	01 c2                	add    %eax,%edx
f01325b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325b5:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f01325b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01325bb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f01325c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01325c5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01325cc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01325d0:	75 17                	jne    f01325e9 <insert_sorted_with_merge_freeList+0x4bd>
f01325d2:	83 ec 04             	sub    $0x4,%esp
f01325d5:	68 84 ca 13 f0       	push   $0xf013ca84
f01325da:	68 64 01 00 00       	push   $0x164
f01325df:	68 a7 ca 13 f0       	push   $0xf013caa7
f01325e4:	e8 bd db fc ff       	call   f01001a6 <_panic>
f01325e9:	8b 15 d4 1e 6c f0    	mov    0xf06c1ed4,%edx
f01325ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01325f2:	89 10                	mov    %edx,(%eax)
f01325f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01325f7:	8b 00                	mov    (%eax),%eax
f01325f9:	85 c0                	test   %eax,%eax
f01325fb:	74 0d                	je     f013260a <insert_sorted_with_merge_freeList+0x4de>
f01325fd:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f0132602:	8b 55 08             	mov    0x8(%ebp),%edx
f0132605:	89 50 04             	mov    %edx,0x4(%eax)
f0132608:	eb 08                	jmp    f0132612 <insert_sorted_with_merge_freeList+0x4e6>
f013260a:	8b 45 08             	mov    0x8(%ebp),%eax
f013260d:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f0132612:	8b 45 08             	mov    0x8(%ebp),%eax
f0132615:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f013261a:	8b 45 08             	mov    0x8(%ebp),%eax
f013261d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132624:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f0132629:	40                   	inc    %eax
f013262a:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
					break;
f013262f:	e9 41 02 00 00       	jmp    f0132875 <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132634:	8b 45 08             	mov    0x8(%ebp),%eax
f0132637:	8b 50 08             	mov    0x8(%eax),%edx
f013263a:	8b 45 08             	mov    0x8(%ebp),%eax
f013263d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132640:	01 c2                	add    %eax,%edx
f0132642:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132645:	8b 40 08             	mov    0x8(%eax),%eax
f0132648:	39 c2                	cmp    %eax,%edx
f013264a:	0f 85 7c 01 00 00    	jne    f01327cc <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0132650:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132654:	74 06                	je     f013265c <insert_sorted_with_merge_freeList+0x530>
f0132656:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013265a:	75 17                	jne    f0132673 <insert_sorted_with_merge_freeList+0x547>
f013265c:	83 ec 04             	sub    $0x4,%esp
f013265f:	68 c0 ca 13 f0       	push   $0xf013cac0
f0132664:	68 69 01 00 00       	push   $0x169
f0132669:	68 a7 ca 13 f0       	push   $0xf013caa7
f013266e:	e8 33 db fc ff       	call   f01001a6 <_panic>
f0132673:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132676:	8b 50 04             	mov    0x4(%eax),%edx
f0132679:	8b 45 08             	mov    0x8(%ebp),%eax
f013267c:	89 50 04             	mov    %edx,0x4(%eax)
f013267f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132682:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132685:	89 10                	mov    %edx,(%eax)
f0132687:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013268a:	8b 40 04             	mov    0x4(%eax),%eax
f013268d:	85 c0                	test   %eax,%eax
f013268f:	74 0d                	je     f013269e <insert_sorted_with_merge_freeList+0x572>
f0132691:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132694:	8b 40 04             	mov    0x4(%eax),%eax
f0132697:	8b 55 08             	mov    0x8(%ebp),%edx
f013269a:	89 10                	mov    %edx,(%eax)
f013269c:	eb 08                	jmp    f01326a6 <insert_sorted_with_merge_freeList+0x57a>
f013269e:	8b 45 08             	mov    0x8(%ebp),%eax
f01326a1:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f01326a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01326a9:	8b 55 08             	mov    0x8(%ebp),%edx
f01326ac:	89 50 04             	mov    %edx,0x4(%eax)
f01326af:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f01326b4:	40                   	inc    %eax
f01326b5:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
					blockToInsert->size += nextBlock->size;
f01326ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01326bd:	8b 50 0c             	mov    0xc(%eax),%edx
f01326c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01326c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01326c6:	01 c2                	add    %eax,%edx
f01326c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01326cb:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f01326ce:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01326d2:	75 17                	jne    f01326eb <insert_sorted_with_merge_freeList+0x5bf>
f01326d4:	83 ec 04             	sub    $0x4,%esp
f01326d7:	68 50 cb 13 f0       	push   $0xf013cb50
f01326dc:	68 6b 01 00 00       	push   $0x16b
f01326e1:	68 a7 ca 13 f0       	push   $0xf013caa7
f01326e6:	e8 bb da fc ff       	call   f01001a6 <_panic>
f01326eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01326ee:	8b 00                	mov    (%eax),%eax
f01326f0:	85 c0                	test   %eax,%eax
f01326f2:	74 10                	je     f0132704 <insert_sorted_with_merge_freeList+0x5d8>
f01326f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01326f7:	8b 00                	mov    (%eax),%eax
f01326f9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01326fc:	8b 52 04             	mov    0x4(%edx),%edx
f01326ff:	89 50 04             	mov    %edx,0x4(%eax)
f0132702:	eb 0b                	jmp    f013270f <insert_sorted_with_merge_freeList+0x5e3>
f0132704:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132707:	8b 40 04             	mov    0x4(%eax),%eax
f013270a:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f013270f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132712:	8b 40 04             	mov    0x4(%eax),%eax
f0132715:	85 c0                	test   %eax,%eax
f0132717:	74 0f                	je     f0132728 <insert_sorted_with_merge_freeList+0x5fc>
f0132719:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013271c:	8b 40 04             	mov    0x4(%eax),%eax
f013271f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132722:	8b 12                	mov    (%edx),%edx
f0132724:	89 10                	mov    %edx,(%eax)
f0132726:	eb 0a                	jmp    f0132732 <insert_sorted_with_merge_freeList+0x606>
f0132728:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013272b:	8b 00                	mov    (%eax),%eax
f013272d:	a3 a0 1e 6c f0       	mov    %eax,0xf06c1ea0
f0132732:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132735:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013273b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013273e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132745:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f013274a:	48                   	dec    %eax
f013274b:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
					nextBlock->sva = 0;
f0132750:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132753:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f013275a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013275d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132764:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132768:	75 17                	jne    f0132781 <insert_sorted_with_merge_freeList+0x655>
f013276a:	83 ec 04             	sub    $0x4,%esp
f013276d:	68 84 ca 13 f0       	push   $0xf013ca84
f0132772:	68 6e 01 00 00       	push   $0x16e
f0132777:	68 a7 ca 13 f0       	push   $0xf013caa7
f013277c:	e8 25 da fc ff       	call   f01001a6 <_panic>
f0132781:	8b 15 d4 1e 6c f0    	mov    0xf06c1ed4,%edx
f0132787:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013278a:	89 10                	mov    %edx,(%eax)
f013278c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013278f:	8b 00                	mov    (%eax),%eax
f0132791:	85 c0                	test   %eax,%eax
f0132793:	74 0d                	je     f01327a2 <insert_sorted_with_merge_freeList+0x676>
f0132795:	a1 d4 1e 6c f0       	mov    0xf06c1ed4,%eax
f013279a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013279d:	89 50 04             	mov    %edx,0x4(%eax)
f01327a0:	eb 08                	jmp    f01327aa <insert_sorted_with_merge_freeList+0x67e>
f01327a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327a5:	a3 d8 1e 6c f0       	mov    %eax,0xf06c1ed8
f01327aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327ad:	a3 d4 1e 6c f0       	mov    %eax,0xf06c1ed4
f01327b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327b5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01327bc:	a1 e0 1e 6c f0       	mov    0xf06c1ee0,%eax
f01327c1:	40                   	inc    %eax
f01327c2:	a3 e0 1e 6c f0       	mov    %eax,0xf06c1ee0
					break;
f01327c7:	e9 a9 00 00 00       	jmp    f0132875 <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f01327cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327d0:	74 06                	je     f01327d8 <insert_sorted_with_merge_freeList+0x6ac>
f01327d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01327d6:	75 17                	jne    f01327ef <insert_sorted_with_merge_freeList+0x6c3>
f01327d8:	83 ec 04             	sub    $0x4,%esp
f01327db:	68 1c cb 13 f0       	push   $0xf013cb1c
f01327e0:	68 73 01 00 00       	push   $0x173
f01327e5:	68 a7 ca 13 f0       	push   $0xf013caa7
f01327ea:	e8 b7 d9 fc ff       	call   f01001a6 <_panic>
f01327ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327f2:	8b 10                	mov    (%eax),%edx
f01327f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01327f7:	89 10                	mov    %edx,(%eax)
f01327f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01327fc:	8b 00                	mov    (%eax),%eax
f01327fe:	85 c0                	test   %eax,%eax
f0132800:	74 0b                	je     f013280d <insert_sorted_with_merge_freeList+0x6e1>
f0132802:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132805:	8b 00                	mov    (%eax),%eax
f0132807:	8b 55 08             	mov    0x8(%ebp),%edx
f013280a:	89 50 04             	mov    %edx,0x4(%eax)
f013280d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132810:	8b 55 08             	mov    0x8(%ebp),%edx
f0132813:	89 10                	mov    %edx,(%eax)
f0132815:	8b 45 08             	mov    0x8(%ebp),%eax
f0132818:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013281b:	89 50 04             	mov    %edx,0x4(%eax)
f013281e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132821:	8b 00                	mov    (%eax),%eax
f0132823:	85 c0                	test   %eax,%eax
f0132825:	75 08                	jne    f013282f <insert_sorted_with_merge_freeList+0x703>
f0132827:	8b 45 08             	mov    0x8(%ebp),%eax
f013282a:	a3 a4 1e 6c f0       	mov    %eax,0xf06c1ea4
f013282f:	a1 ac 1e 6c f0       	mov    0xf06c1eac,%eax
f0132834:	40                   	inc    %eax
f0132835:	a3 ac 1e 6c f0       	mov    %eax,0xf06c1eac
					break;
f013283a:	eb 39                	jmp    f0132875 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f013283c:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0132841:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132844:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132848:	74 07                	je     f0132851 <insert_sorted_with_merge_freeList+0x725>
f013284a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013284d:	8b 00                	mov    (%eax),%eax
f013284f:	eb 05                	jmp    f0132856 <insert_sorted_with_merge_freeList+0x72a>
f0132851:	b8 00 00 00 00       	mov    $0x0,%eax
f0132856:	a3 a8 1e 6c f0       	mov    %eax,0xf06c1ea8
f013285b:	a1 a8 1e 6c f0       	mov    0xf06c1ea8,%eax
f0132860:	85 c0                	test   %eax,%eax
f0132862:	0f 85 c7 fb ff ff    	jne    f013242f <insert_sorted_with_merge_freeList+0x303>
f0132868:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013286c:	0f 85 bd fb ff ff    	jne    f013242f <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132872:	eb 01                	jmp    f0132875 <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132874:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132875:	90                   	nop
f0132876:	c9                   	leave  
f0132877:	c3                   	ret    

f0132878 <__udivdi3>:
f0132878:	55                   	push   %ebp
f0132879:	57                   	push   %edi
f013287a:	56                   	push   %esi
f013287b:	53                   	push   %ebx
f013287c:	83 ec 1c             	sub    $0x1c,%esp
f013287f:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0132883:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0132887:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013288b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f013288f:	89 ca                	mov    %ecx,%edx
f0132891:	89 f8                	mov    %edi,%eax
f0132893:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0132897:	85 f6                	test   %esi,%esi
f0132899:	75 2d                	jne    f01328c8 <__udivdi3+0x50>
f013289b:	39 cf                	cmp    %ecx,%edi
f013289d:	77 65                	ja     f0132904 <__udivdi3+0x8c>
f013289f:	89 fd                	mov    %edi,%ebp
f01328a1:	85 ff                	test   %edi,%edi
f01328a3:	75 0b                	jne    f01328b0 <__udivdi3+0x38>
f01328a5:	b8 01 00 00 00       	mov    $0x1,%eax
f01328aa:	31 d2                	xor    %edx,%edx
f01328ac:	f7 f7                	div    %edi
f01328ae:	89 c5                	mov    %eax,%ebp
f01328b0:	31 d2                	xor    %edx,%edx
f01328b2:	89 c8                	mov    %ecx,%eax
f01328b4:	f7 f5                	div    %ebp
f01328b6:	89 c1                	mov    %eax,%ecx
f01328b8:	89 d8                	mov    %ebx,%eax
f01328ba:	f7 f5                	div    %ebp
f01328bc:	89 cf                	mov    %ecx,%edi
f01328be:	89 fa                	mov    %edi,%edx
f01328c0:	83 c4 1c             	add    $0x1c,%esp
f01328c3:	5b                   	pop    %ebx
f01328c4:	5e                   	pop    %esi
f01328c5:	5f                   	pop    %edi
f01328c6:	5d                   	pop    %ebp
f01328c7:	c3                   	ret    
f01328c8:	39 ce                	cmp    %ecx,%esi
f01328ca:	77 28                	ja     f01328f4 <__udivdi3+0x7c>
f01328cc:	0f bd fe             	bsr    %esi,%edi
f01328cf:	83 f7 1f             	xor    $0x1f,%edi
f01328d2:	75 40                	jne    f0132914 <__udivdi3+0x9c>
f01328d4:	39 ce                	cmp    %ecx,%esi
f01328d6:	72 0a                	jb     f01328e2 <__udivdi3+0x6a>
f01328d8:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01328dc:	0f 87 9e 00 00 00    	ja     f0132980 <__udivdi3+0x108>
f01328e2:	b8 01 00 00 00       	mov    $0x1,%eax
f01328e7:	89 fa                	mov    %edi,%edx
f01328e9:	83 c4 1c             	add    $0x1c,%esp
f01328ec:	5b                   	pop    %ebx
f01328ed:	5e                   	pop    %esi
f01328ee:	5f                   	pop    %edi
f01328ef:	5d                   	pop    %ebp
f01328f0:	c3                   	ret    
f01328f1:	8d 76 00             	lea    0x0(%esi),%esi
f01328f4:	31 ff                	xor    %edi,%edi
f01328f6:	31 c0                	xor    %eax,%eax
f01328f8:	89 fa                	mov    %edi,%edx
f01328fa:	83 c4 1c             	add    $0x1c,%esp
f01328fd:	5b                   	pop    %ebx
f01328fe:	5e                   	pop    %esi
f01328ff:	5f                   	pop    %edi
f0132900:	5d                   	pop    %ebp
f0132901:	c3                   	ret    
f0132902:	66 90                	xchg   %ax,%ax
f0132904:	89 d8                	mov    %ebx,%eax
f0132906:	f7 f7                	div    %edi
f0132908:	31 ff                	xor    %edi,%edi
f013290a:	89 fa                	mov    %edi,%edx
f013290c:	83 c4 1c             	add    $0x1c,%esp
f013290f:	5b                   	pop    %ebx
f0132910:	5e                   	pop    %esi
f0132911:	5f                   	pop    %edi
f0132912:	5d                   	pop    %ebp
f0132913:	c3                   	ret    
f0132914:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132919:	89 eb                	mov    %ebp,%ebx
f013291b:	29 fb                	sub    %edi,%ebx
f013291d:	89 f9                	mov    %edi,%ecx
f013291f:	d3 e6                	shl    %cl,%esi
f0132921:	89 c5                	mov    %eax,%ebp
f0132923:	88 d9                	mov    %bl,%cl
f0132925:	d3 ed                	shr    %cl,%ebp
f0132927:	89 e9                	mov    %ebp,%ecx
f0132929:	09 f1                	or     %esi,%ecx
f013292b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f013292f:	89 f9                	mov    %edi,%ecx
f0132931:	d3 e0                	shl    %cl,%eax
f0132933:	89 c5                	mov    %eax,%ebp
f0132935:	89 d6                	mov    %edx,%esi
f0132937:	88 d9                	mov    %bl,%cl
f0132939:	d3 ee                	shr    %cl,%esi
f013293b:	89 f9                	mov    %edi,%ecx
f013293d:	d3 e2                	shl    %cl,%edx
f013293f:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132943:	88 d9                	mov    %bl,%cl
f0132945:	d3 e8                	shr    %cl,%eax
f0132947:	09 c2                	or     %eax,%edx
f0132949:	89 d0                	mov    %edx,%eax
f013294b:	89 f2                	mov    %esi,%edx
f013294d:	f7 74 24 0c          	divl   0xc(%esp)
f0132951:	89 d6                	mov    %edx,%esi
f0132953:	89 c3                	mov    %eax,%ebx
f0132955:	f7 e5                	mul    %ebp
f0132957:	39 d6                	cmp    %edx,%esi
f0132959:	72 19                	jb     f0132974 <__udivdi3+0xfc>
f013295b:	74 0b                	je     f0132968 <__udivdi3+0xf0>
f013295d:	89 d8                	mov    %ebx,%eax
f013295f:	31 ff                	xor    %edi,%edi
f0132961:	e9 58 ff ff ff       	jmp    f01328be <__udivdi3+0x46>
f0132966:	66 90                	xchg   %ax,%ax
f0132968:	8b 54 24 08          	mov    0x8(%esp),%edx
f013296c:	89 f9                	mov    %edi,%ecx
f013296e:	d3 e2                	shl    %cl,%edx
f0132970:	39 c2                	cmp    %eax,%edx
f0132972:	73 e9                	jae    f013295d <__udivdi3+0xe5>
f0132974:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0132977:	31 ff                	xor    %edi,%edi
f0132979:	e9 40 ff ff ff       	jmp    f01328be <__udivdi3+0x46>
f013297e:	66 90                	xchg   %ax,%ax
f0132980:	31 c0                	xor    %eax,%eax
f0132982:	e9 37 ff ff ff       	jmp    f01328be <__udivdi3+0x46>
f0132987:	90                   	nop

f0132988 <__umoddi3>:
f0132988:	55                   	push   %ebp
f0132989:	57                   	push   %edi
f013298a:	56                   	push   %esi
f013298b:	53                   	push   %ebx
f013298c:	83 ec 1c             	sub    $0x1c,%esp
f013298f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0132993:	8b 74 24 34          	mov    0x34(%esp),%esi
f0132997:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013299b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f013299f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01329a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01329a7:	89 f3                	mov    %esi,%ebx
f01329a9:	89 fa                	mov    %edi,%edx
f01329ab:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01329af:	89 34 24             	mov    %esi,(%esp)
f01329b2:	85 c0                	test   %eax,%eax
f01329b4:	75 1a                	jne    f01329d0 <__umoddi3+0x48>
f01329b6:	39 f7                	cmp    %esi,%edi
f01329b8:	0f 86 a2 00 00 00    	jbe    f0132a60 <__umoddi3+0xd8>
f01329be:	89 c8                	mov    %ecx,%eax
f01329c0:	89 f2                	mov    %esi,%edx
f01329c2:	f7 f7                	div    %edi
f01329c4:	89 d0                	mov    %edx,%eax
f01329c6:	31 d2                	xor    %edx,%edx
f01329c8:	83 c4 1c             	add    $0x1c,%esp
f01329cb:	5b                   	pop    %ebx
f01329cc:	5e                   	pop    %esi
f01329cd:	5f                   	pop    %edi
f01329ce:	5d                   	pop    %ebp
f01329cf:	c3                   	ret    
f01329d0:	39 f0                	cmp    %esi,%eax
f01329d2:	0f 87 ac 00 00 00    	ja     f0132a84 <__umoddi3+0xfc>
f01329d8:	0f bd e8             	bsr    %eax,%ebp
f01329db:	83 f5 1f             	xor    $0x1f,%ebp
f01329de:	0f 84 ac 00 00 00    	je     f0132a90 <__umoddi3+0x108>
f01329e4:	bf 20 00 00 00       	mov    $0x20,%edi
f01329e9:	29 ef                	sub    %ebp,%edi
f01329eb:	89 fe                	mov    %edi,%esi
f01329ed:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01329f1:	89 e9                	mov    %ebp,%ecx
f01329f3:	d3 e0                	shl    %cl,%eax
f01329f5:	89 d7                	mov    %edx,%edi
f01329f7:	89 f1                	mov    %esi,%ecx
f01329f9:	d3 ef                	shr    %cl,%edi
f01329fb:	09 c7                	or     %eax,%edi
f01329fd:	89 e9                	mov    %ebp,%ecx
f01329ff:	d3 e2                	shl    %cl,%edx
f0132a01:	89 14 24             	mov    %edx,(%esp)
f0132a04:	89 d8                	mov    %ebx,%eax
f0132a06:	d3 e0                	shl    %cl,%eax
f0132a08:	89 c2                	mov    %eax,%edx
f0132a0a:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132a0e:	d3 e0                	shl    %cl,%eax
f0132a10:	89 44 24 04          	mov    %eax,0x4(%esp)
f0132a14:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132a18:	89 f1                	mov    %esi,%ecx
f0132a1a:	d3 e8                	shr    %cl,%eax
f0132a1c:	09 d0                	or     %edx,%eax
f0132a1e:	d3 eb                	shr    %cl,%ebx
f0132a20:	89 da                	mov    %ebx,%edx
f0132a22:	f7 f7                	div    %edi
f0132a24:	89 d3                	mov    %edx,%ebx
f0132a26:	f7 24 24             	mull   (%esp)
f0132a29:	89 c6                	mov    %eax,%esi
f0132a2b:	89 d1                	mov    %edx,%ecx
f0132a2d:	39 d3                	cmp    %edx,%ebx
f0132a2f:	0f 82 87 00 00 00    	jb     f0132abc <__umoddi3+0x134>
f0132a35:	0f 84 91 00 00 00    	je     f0132acc <__umoddi3+0x144>
f0132a3b:	8b 54 24 04          	mov    0x4(%esp),%edx
f0132a3f:	29 f2                	sub    %esi,%edx
f0132a41:	19 cb                	sbb    %ecx,%ebx
f0132a43:	89 d8                	mov    %ebx,%eax
f0132a45:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132a49:	d3 e0                	shl    %cl,%eax
f0132a4b:	89 e9                	mov    %ebp,%ecx
f0132a4d:	d3 ea                	shr    %cl,%edx
f0132a4f:	09 d0                	or     %edx,%eax
f0132a51:	89 e9                	mov    %ebp,%ecx
f0132a53:	d3 eb                	shr    %cl,%ebx
f0132a55:	89 da                	mov    %ebx,%edx
f0132a57:	83 c4 1c             	add    $0x1c,%esp
f0132a5a:	5b                   	pop    %ebx
f0132a5b:	5e                   	pop    %esi
f0132a5c:	5f                   	pop    %edi
f0132a5d:	5d                   	pop    %ebp
f0132a5e:	c3                   	ret    
f0132a5f:	90                   	nop
f0132a60:	89 fd                	mov    %edi,%ebp
f0132a62:	85 ff                	test   %edi,%edi
f0132a64:	75 0b                	jne    f0132a71 <__umoddi3+0xe9>
f0132a66:	b8 01 00 00 00       	mov    $0x1,%eax
f0132a6b:	31 d2                	xor    %edx,%edx
f0132a6d:	f7 f7                	div    %edi
f0132a6f:	89 c5                	mov    %eax,%ebp
f0132a71:	89 f0                	mov    %esi,%eax
f0132a73:	31 d2                	xor    %edx,%edx
f0132a75:	f7 f5                	div    %ebp
f0132a77:	89 c8                	mov    %ecx,%eax
f0132a79:	f7 f5                	div    %ebp
f0132a7b:	89 d0                	mov    %edx,%eax
f0132a7d:	e9 44 ff ff ff       	jmp    f01329c6 <__umoddi3+0x3e>
f0132a82:	66 90                	xchg   %ax,%ax
f0132a84:	89 c8                	mov    %ecx,%eax
f0132a86:	89 f2                	mov    %esi,%edx
f0132a88:	83 c4 1c             	add    $0x1c,%esp
f0132a8b:	5b                   	pop    %ebx
f0132a8c:	5e                   	pop    %esi
f0132a8d:	5f                   	pop    %edi
f0132a8e:	5d                   	pop    %ebp
f0132a8f:	c3                   	ret    
f0132a90:	3b 04 24             	cmp    (%esp),%eax
f0132a93:	72 06                	jb     f0132a9b <__umoddi3+0x113>
f0132a95:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0132a99:	77 0f                	ja     f0132aaa <__umoddi3+0x122>
f0132a9b:	89 f2                	mov    %esi,%edx
f0132a9d:	29 f9                	sub    %edi,%ecx
f0132a9f:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0132aa3:	89 14 24             	mov    %edx,(%esp)
f0132aa6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132aaa:	8b 44 24 04          	mov    0x4(%esp),%eax
f0132aae:	8b 14 24             	mov    (%esp),%edx
f0132ab1:	83 c4 1c             	add    $0x1c,%esp
f0132ab4:	5b                   	pop    %ebx
f0132ab5:	5e                   	pop    %esi
f0132ab6:	5f                   	pop    %edi
f0132ab7:	5d                   	pop    %ebp
f0132ab8:	c3                   	ret    
f0132ab9:	8d 76 00             	lea    0x0(%esi),%esi
f0132abc:	2b 04 24             	sub    (%esp),%eax
f0132abf:	19 fa                	sbb    %edi,%edx
f0132ac1:	89 d1                	mov    %edx,%ecx
f0132ac3:	89 c6                	mov    %eax,%esi
f0132ac5:	e9 71 ff ff ff       	jmp    f0132a3b <__umoddi3+0xb3>
f0132aca:	66 90                	xchg   %ax,%ax
f0132acc:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0132ad0:	72 ea                	jb     f0132abc <__umoddi3+0x134>
f0132ad2:	89 d9                	mov    %ebx,%ecx
f0132ad4:	e9 62 ff ff ff       	jmp    f0132a3b <__umoddi3+0xb3>
